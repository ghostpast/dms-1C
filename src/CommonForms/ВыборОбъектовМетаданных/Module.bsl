///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Перем ПодчиненныеСправочники;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьУсловноеОформление();

	ЗаполнитьВыбранныеОбъектыМетаданных();

	Если Параметры.ФильтрПоОбъектамМетаданных.Количество() > 0 Тогда
		Параметры.КоллекцииВыбираемыхОбъектовМетаданных.Очистить();
		Для Каждого ОбъектМетаданныхПолноеИмя Из Параметры.ФильтрПоОбъектамМетаданных Цикл
			ИмяБазовогоТипа = БазоваяПодсистемаСервер.ОН_ИмяБазовогоТипаПоОбъектуМетаданных(Метаданные.НайтиПоПолномуИмени(ОбъектМетаданныхПолноеИмя.Значение));
			Если Параметры.КоллекцииВыбираемыхОбъектовМетаданных.НайтиПоЗначению(ИмяБазовогоТипа) = Неопределено Тогда
				Параметры.КоллекцииВыбираемыхОбъектовМетаданных.Добавить(ИмяБазовогоТипа);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Параметры.Свойство("ТолькоПодсистемыСКИ") И Параметры.ТолькоПодсистемыСКИ Тогда
		СписокПодсистем = Метаданные.Подсистемы;
		ЗаполнитьСписокПодсистем(СписокПодсистем);
		ТолькоПодсистемыСКИ = Истина;
	КонецЕсли;

	Если Параметры.Свойство("ВыборЕдинственного", ВыборЕдинственного) И ВыборЕдинственного Тогда
		Элементы.Пометка.Видимость = Ложь;
	КонецЕсли;

	Если Параметры.Свойство("Заголовок") Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.Заголовок;
	КонецЕсли;

	Параметры.Свойство("НачальноеЗначениеВыбора", НачальноеЗначениеВыбора);
	Если Не ЗначениеЗаполнено(НачальноеЗначениеВыбора) И ВыборЕдинственного И Параметры.ВыбранныеОбъектыМетаданных.Количество() = 1 Тогда
		НачальноеЗначениеВыбора = Параметры.ВыбранныеОбъектыМетаданных[0].Значение;
	КонецЕсли;

	СпособГруппировкиОбъектов = Параметры.СпособГруппировкиОбъектов;
	Если Не ЗначениеЗаполнено(СпособГруппировкиОбъектов) Тогда
		СпособГруппировкиОбъектов = "ПоРазделам";
	Иначе
		Элементы.СпособГруппировкиОбъектов.Видимость = Ложь;
	КонецЕсли;

	ЗаполнитьДеревоОбъектов();

	Если Параметры.РодительскиеПодсистемы.Количество()> 0 Тогда
		Элементы.ДеревоОбъектовМетаданных.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	КонецЕсли;

	Если БазоваяПодсистемаСервер.ОН_ЭтоМобильныйКлиент() Тогда
		ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Верх;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Устанавливаем начальное значение выбора.
	Если ИдентификаторТекущейСтрокиПриОткрытии > 0 Тогда
		Элементы.ДеревоОбъектовМетаданных.ТекущаяСтрока = ИдентификаторТекущейСтрокиПриОткрытии;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПометкаПриИзменении(Элемент)
	ПриПометкеЭлементаДерева(ТекущийЭлемент.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура РежимВыбораПриИзменении(Элемент)
	АдресаВыбранныхОбъектов.Очистить();
	ОбновитьКоллекциюВыбранныеОбъектыМетаданных();

	ЗаполнитьДеревоОбъектов();
	Если ДеревоОбъектовМетаданных.ПолучитьЭлементы().Количество() = 1 Тогда
		ИдентификаторСтроки = ДеревоОбъектовМетаданных.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		Элементы.ДеревоОбъектовМетаданных.Развернуть(ИдентификаторСтроки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовМетаданныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ВыборЕдинственного Тогда
		ВыбратьВыполнить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВыполнить()
	Если ВыборЕдинственного Тогда
		ТекДанные = Элементы.ДеревоОбъектовМетаданных.ТекущиеДанные;
		Если ТекДанные <> Неопределено И ТекДанные.ЭтоОбъектМетаданных Тогда
			ВыбранныеОбъектыМетаданных.Очистить();
			ВыбранныеОбъектыМетаданных.Добавить(ТекДанные.ПолноеИмя, ТекДанные.Представление);
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		ВыбранныеОбъектыМетаданных.Очистить();
		ОбновитьКоллекциюВыбранныеОбъектыМетаданных();
	КонецЕсли;

	Если ВыбиратьСсылки Тогда
		ВыбратьСсылки(ВыбранныеОбъектыМетаданных);
	КонецЕсли;

	Если ЭтотОбъект.ОписаниеОповещенияОЗакрытии = Неопределено Тогда
		Оповестить("ВыборОбъектовМетаданных", ВыбранныеОбъектыМетаданных, Параметры.УникальныйИдентификаторИсточник);
	КонецЕсли;

	Закрыть(ВыбранныеОбъектыМетаданных);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьВыполнить()
	Закрыть();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВыбранныеОбъектыМетаданных()
	ОбъектыМетаданных			= Параметры.ВыбранныеОбъектыМетаданных.ВыгрузитьЗначения();
	ВыбранныеОбъектыМетаданных	= БазоваяПодсистемаСервер.ОН_СкопироватьРекурсивно(Параметры.ВыбранныеОбъектыМетаданных);

	Если Параметры.ЗапоминатьРазделыВыбранныхОбъектов И ВыбранныеОбъектыМетаданных.Количество() > 0 И СтрНачинаетсяС(ВыбранныеОбъектыМетаданных[0].Представление, "./") Тогда
		Для Каждого Элемент Из ВыбранныеОбъектыМетаданных Цикл
			АдресаВыбранныхОбъектов.Добавить(Элемент.Представление, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;

	ВыбиратьСсылки = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(Параметры, "ВыбиратьСсылки", Ложь);
	Если Не ВыбиратьСсылки Тогда
		Возврат;
	КонецЕсли;

	Ссылки = Новый Массив;

	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		Если ТипЗнч(ОбъектМетаданных) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Или ТипЗнч(ОбъектМетаданных) = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
			Ссылки.Добавить(ОбъектМетаданных);
		КонецЕсли;
	КонецЦикла;

	Если Ссылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ИменаОбъектовМетаданных = БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъектов(Ссылки, "ПолноеИмя");
	Для Каждого ЭлементСписка Из ВыбранныеОбъектыМетаданных Цикл
		ИмяОбъектаМетаданных = ИменаОбъектовМетаданных[ЭлементСписка.Значение];
		Если ИмяОбъектаМетаданных <> Неопределено Тогда
			ЭлементСписка.Значение = ИмяОбъектаМетаданных;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПодсистем(СписокПодсистем)
	Для Каждого Подсистема Из СписокПодсистем Цикл
		Если Подсистема.ВключатьВКомандныйИнтерфейс Тогда
			ЭлементыПодсистемСКоманднымИнтерфейсом.Добавить(Подсистема.ПолноеИмя());
		КонецЕсли;

		Если Подсистема.Подсистемы.Количество() > 0 Тогда
			ЗаполнитьСписокПодсистем(Подсистема.Подсистемы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДеревоОбъектовМетаданныхЗаполнить()
	ДеревоОбъектовМетаданных.ПолучитьЭлементы().Очистить();

	КоллекцииОбъектовМетаданных = Новый ТаблицаЗначений;
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Имя");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Синоним");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Картинка");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("КартинкаОбъекта");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("ЭтоКоллекцияОбщие");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("ПолноеИмя");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Родитель");

	КоллекцииОбъектовМетаданных_НоваяСтрока("Подсистемы",                   "Подсистемы",                     35, 36, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеМодули",                  "Общие модули",                   37, 38, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПараметрыСеанса",              "Параметры сеанса",               39, 40, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Роли",                         "Роли",                           41, 42, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПланыОбмена",                  "Планы обмена",                   43, 44, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("КритерииОтбора",               "Критерии отбора",                45, 46, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПодпискиНаСобытия",            "Подписки на события",            47, 48, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегламентныеЗадания",          "Регламентные задания",           49, 50, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ФункциональныеОпции",          "Функциональные опции",           51, 52, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПараметрыФункциональныхОпций", "Параметры функциональных опций", 53, 54, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ХранилищаНастроек",            "Хранилища настроек",             55, 56, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеФормы",                   "Общие формы",                    57, 58, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеКоманды",                 "Общие команды",                  59, 60, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ГруппыКоманд",                 "Группы команд",                  61, 62, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Интерфейсы",                   "Интерфейсы",                     63, 64, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеМакеты",                  "Общие макеты",                   65, 66, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеКартинки",                "Общие картинки",                 67, 68, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПакетыXDTO",                   "XDTO-пакеты",                    69, 70, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("WebСервисы",                   "Web-сервисы",                    71, 72, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("WSСсылки",                     "WS-ссылки",                      73, 74, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Стили",                        "Стили",                          75, 76, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Языки",                        "Языки",                          77, 78, Истина, КоллекцииОбъектовМетаданных);

	КоллекцииОбъектовМетаданных_НоваяСтрока("Константы",                    "Константы",                      БиблиотекаКартинок.Константа,              БиблиотекаКартинок.Константа,                    Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Справочники",                  "Справочники",                    БиблиотекаКартинок.Справочник,             БиблиотекаКартинок.Справочник,                   Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Документы",                    "Документы",                      БиблиотекаКартинок.Документ,               БиблиотекаКартинок.ДокументОбъект,               Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ЖурналыДокументов",            "Журналы документов",             БиблиотекаКартинок.ЖурналДокументов,       БиблиотекаКартинок.ЖурналДокументов,             Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Перечисления",                 "Перечисления",                   БиблиотекаКартинок.Перечисление,           БиблиотекаКартинок.Перечисление,                 Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Отчеты",                       "Отчеты",                         БиблиотекаКартинок.Отчет,                  БиблиотекаКартинок.Отчет,                        Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Обработки",                    "Обработки",                      БиблиотекаКартинок.Обработка,              БиблиотекаКартинок.Обработка,                    Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПланыВидовХарактеристик",      "Планы видов характеристик",      БиблиотекаКартинок.ПланВидовХарактеристик, БиблиотекаКартинок.ПланВидовХарактеристикОбъект, Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПланыСчетов",                  "Планы счетов",                   БиблиотекаКартинок.ПланСчетов,             БиблиотекаКартинок.ПланСчетовОбъект,             Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПланыВидовРасчета",            "Планы видов расчета",            БиблиотекаКартинок.ПланВидовРасчета,       БиблиотекаКартинок.ПланВидовРасчетаОбъект,        Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегистрыСведений",             "Регистры сведений",              БиблиотекаКартинок.РегистрСведений,        БиблиотекаКартинок.РегистрСведений,              Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегистрыНакопления",           "Регистры накопления",            БиблиотекаКартинок.РегистрНакопления,      БиблиотекаКартинок.РегистрНакопления,            Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегистрыБухгалтерии",          "Регистры бухгалтерии",           БиблиотекаКартинок.РегистрБухгалтерии,     БиблиотекаКартинок.РегистрБухгалтерии,           Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегистрыРасчета",              "Регистры расчета",               БиблиотекаКартинок.РегистрРасчета,         БиблиотекаКартинок.РегистрРасчета,               Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("БизнесПроцессы",               "Бизнес-процессы",                БиблиотекаКартинок.БизнесПроцесс,          БиблиотекаКартинок.БизнесПроцессОбъект,          Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Задачи",                       "Задачи",                         БиблиотекаКартинок.Задача,                 БиблиотекаКартинок.ЗадачаОбъект,                 Ложь, КоллекцииОбъектовМетаданных);

	// Создание предопределенных элементов.
	ПараметрыЭлемента			= ПараметрыЭлементаДереваОбъектовМетаданных();
	ПараметрыЭлемента.Имя		= Метаданные.Имя;
	ПараметрыЭлемента.Синоним	= Метаданные.Синоним;
	ПараметрыЭлемента.Картинка	= 79;
	ПараметрыЭлемента.Родитель	= ДеревоОбъектовМетаданных;
	ЭлементКонфигурация			= НоваяСтрокаДерева(ПараметрыЭлемента);

	ПараметрыЭлемента			= ПараметрыЭлементаДереваОбъектовМетаданных();
	ПараметрыЭлемента.Имя		= "Общие";
	ПараметрыЭлемента.Синоним	= "Общие";
	ПараметрыЭлемента.Картинка	= 0;
	ПараметрыЭлемента.Родитель	= ЭлементКонфигурация;
	ЭлементОбщие				= НоваяСтрокаДерева(ПараметрыЭлемента);

	// Заполнение дерева объектов метаданных.
	Для Каждого Строка Из КоллекцииОбъектовМетаданных Цикл
		Если Параметры.КоллекцииВыбираемыхОбъектовМетаданных.Количество() = 0
			Или Параметры.КоллекцииВыбираемыхОбъектовМетаданных.НайтиПоЗначению(Строка.Имя) <> Неопределено Тогда
			Строка.Родитель = ?(Строка.ЭтоКоллекцияОбщие, ЭлементОбщие, ЭлементКонфигурация);
			ДобавитьЭлементДереваОбъектовМетаданных(Строка, ?(Строка.Имя = "Подсистемы", Метаданные.Подсистемы, Неопределено));
		КонецЕсли;
	КонецЦикла;

	Если ЭлементОбщие.ПолучитьЭлементы().Количество() = 0 Тогда
		ЭлементКонфигурация.ПолучитьЭлементы().Удалить(ЭлементОбщие);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПараметрыЭлементаДереваОбъектовМетаданных()

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Имя",				"");
	СтруктураПараметров.Вставить("ПолноеИмя",		"");
	СтруктураПараметров.Вставить("Синоним",			"");
	СтруктураПараметров.Вставить("Пометка",			0);
	СтруктураПараметров.Вставить("Картинка",		0);
	СтруктураПараметров.Вставить("КартинкаОбъекта",	Неопределено);
	СтруктураПараметров.Вставить("Родитель",		Неопределено);

	Возврат СтруктураПараметров;
КонецФункции

&НаСервере
Функция ДобавитьЭлементДереваОбъектовМетаданных(ПараметрыЭлемента, Подсистемы = Неопределено, Проверять = Истина)
	// Проверка на наличие командного интерфейса только в листьях дерева.
	Если Подсистемы <> Неопределено  И Параметры.Свойство("ТолькоПодсистемыСКИ") И Не ПустаяСтрока(ПараметрыЭлемента.ПолноеИмя)  И ЭлементыПодсистемСКоманднымИнтерфейсом.НайтиПоЗначению(ПараметрыЭлемента.ПолноеИмя) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Подсистемы = Неопределено Тогда
		Если Метаданные[ПараметрыЭлемента.Имя].Количество() = 0 Тогда
			// Если нет ни одного объекта метаданных из нужной ветки.
			// Например, нет ни одного регистра бухгалтерии,
			// то корень "Регистры бухгалтерии" добавлять не нужно.
			Возврат Неопределено;
		КонецЕсли;

		НоваяСтрока = НоваяСтрокаДерева(ПараметрыЭлемента, Подсистемы <> Неопределено И Подсистемы <> Метаданные.Подсистемы);

		Для Каждого ЭлементКоллекцииМетаданных Из Метаданные[ПараметрыЭлемента.Имя] Цикл
			Если Параметры.ФильтрПоОбъектамМетаданных.Количество() > 0 И Параметры.ФильтрПоОбъектамМетаданных.НайтиПоЗначению(ЭлементКоллекцииМетаданных.ПолноеИмя()) = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			ПараметрыЭлемента			= ПараметрыЭлементаДереваОбъектовМетаданных();
			ПараметрыЭлемента.Имя		= ЭлементКоллекцииМетаданных.Имя;
			ПараметрыЭлемента.ПолноеИмя	= ЭлементКоллекцииМетаданных.ПолноеИмя();
			ПараметрыЭлемента.Синоним	= ЭлементКоллекцииМетаданных.Синоним;
			ПараметрыЭлемента.Родитель	= НоваяСтрока;
			ПараметрыЭлемента.Картинка	= КартинкаВКонфигураторе(ЭлементКоллекцииМетаданных);
			НоваяСтрокаДерева(ПараметрыЭлемента, Истина);
		КонецЦикла;

		Возврат НоваяСтрока;
	КонецЕсли;

	Если Подсистемы.Количество() = 0 И ПараметрыЭлемента.Имя = "Подсистемы" Тогда
		// Если нет ни одной подсистемы, то корень "Подсистемы" добавлять не нужно.
		Возврат Неопределено;
	КонецЕсли;

	НоваяСтрока = НоваяСтрокаДерева(ПараметрыЭлемента, Подсистемы <> Неопределено И Подсистемы <> Метаданные.Подсистемы);

	Для Каждого ЭлементКоллекцииМетаданных Из Подсистемы Цикл
		Если Не Проверять Или Параметры.РодительскиеПодсистемы.Количество() = 0 Или Параметры.РодительскиеПодсистемы.НайтиПоЗначению(ЭлементКоллекцииМетаданных.Имя) <> Неопределено Тогда
			ПараметрыЭлемента			= ПараметрыЭлементаДереваОбъектовМетаданных();
			ПараметрыЭлемента.Имя		= ЭлементКоллекцииМетаданных.Имя;
			ПараметрыЭлемента.ПолноеИмя	= ЭлементКоллекцииМетаданных.ПолноеИмя();
			ПараметрыЭлемента.Синоним	= ЭлементКоллекцииМетаданных.Синоним;
			ПараметрыЭлемента.Родитель	= НоваяСтрока;
			ПараметрыЭлемента.Картинка	= КартинкаВКонфигураторе(ЭлементКоллекцииМетаданных);
			ДобавитьЭлементДереваОбъектовМетаданных(ПараметрыЭлемента, ЭлементКоллекцииМетаданных.Подсистемы, Ложь);
		КонецЕсли;
	КонецЦикла;

	Возврат НоваяСтрока;
КонецФункции

&НаСервере
Функция НоваяСтрокаДерева(ПараметрыСтроки, ЭтоОбъектМетаданных = Ложь)
	Коллекция						= ПараметрыСтроки.Родитель.ПолучитьЭлементы(); // КоллекцияСтрокДереваЗначений
	НоваяСтрока						= Коллекция.Добавить();
	НоваяСтрока.Имя                 = ПараметрыСтроки.Имя;
	НоваяСтрока.Представление       = ?(ЗначениеЗаполнено(ПараметрыСтроки.Синоним), ПараметрыСтроки.Синоним, ПараметрыСтроки.Имя);
	НоваяСтрока.Пометка             = ?(ВыбранныеОбъектыМетаданных.НайтиПоЗначению(ПараметрыСтроки.ПолноеИмя) = Неопределено, 0, 1);
	НоваяСтрока.Картинка            = ПараметрыСтроки.Картинка;
	НоваяСтрока.ПолноеИмя           = ПараметрыСтроки.ПолноеИмя;
	НоваяСтрока.ЭтоОбъектМетаданных = ЭтоОбъектМетаданных;

	Если НоваяСтрока.ЭтоОбъектМетаданных И НоваяСтрока.ПолноеИмя = НачальноеЗначениеВыбора Тогда
		ИдентификаторТекущейСтрокиПриОткрытии = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;

	Возврат НоваяСтрока;
КонецФункции

&НаСервере
Процедура КоллекцииОбъектовМетаданных_НоваяСтрока(Имя, Синоним, Картинка, КартинкаОбъекта, ЭтоКоллекцияОбщие, Таб)
	НоваяСтрока						= Таб.Добавить();
	НоваяСтрока.Имя					= Имя;
	НоваяСтрока.Синоним				= Синоним;
	НоваяСтрока.Картинка			= Картинка;
	НоваяСтрока.КартинкаОбъекта		= КартинкаОбъекта;
	НоваяСтрока.ЭтоКоллекцияОбщие	= ЭтоКоллекцияОбщие;
КонецПроцедуры

&НаСервере
Процедура ПометитьЭлементыРодителейНаСервере(Элемент)
	Родитель = Элемент.ПолучитьРодителя();

	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЭлементыРодителя = Родитель.ПолучитьЭлементы();
	Если ЭлементыРодителя.Количество() = 0 Тогда
		Родитель.Пометка = 0;
	ИначеЕсли Элемент.Пометка = 2 Тогда
		Родитель.Пометка = 2;
	Иначе
		Родитель.Пометка = ЗначениеПометкиЭлементовНаСервере(ЭлементыРодителя);
	КонецЕсли;

	ПометитьЭлементыРодителейНаСервере(Родитель);
КонецПроцедуры

&НаСервере
Функция ЗначениеПометкиЭлементовНаСервере(ЭлементыРодителя)
	ЕстьПомеченные		= Ложь;
	ЕстьНепомеченные	= Ложь;

	Для каждого ЭлементРодителя Из ЭлементыРодителя Цикл
		Если ЭлементРодителя.Пометка = 2 ИЛИ (ЕстьПомеченные И ЕстьНепомеченные) Тогда
			ЕстьПомеченные		= Истина;
			ЕстьНепомеченные	= Истина;

			Прервать;
		ИначеЕсли ЭлементРодителя.ЭтоОбъектМетаданных Тогда
			ЕстьПомеченные		= ЕстьПомеченные ИЛИ ЭлементРодителя.Пометка;
			ЕстьНепомеченные	= ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка;
		Иначе
			ВложенныеЭлементы = ЭлементРодителя.ПолучитьЭлементы();
			Если ВложенныеЭлементы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеПометкиВложенныхЭлементов	= ЗначениеПометкиЭлементовНаСервере(ВложенныеЭлементы);
			ЕстьПомеченные						= ЕстьПомеченные ИЛИ ЭлементРодителя.Пометка ИЛИ ЗначениеПометкиВложенныхЭлементов;
			ЕстьНепомеченные					= ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка ИЛИ НЕ ЗначениеПометкиВложенныхЭлементов;
		КонецЕсли;
	КонецЦикла;

	Возврат ?(ЕстьПомеченные И ЕстьНепомеченные, 2, ?(ЕстьПомеченные, 1, 0));
КонецФункции

&НаСервере
Процедура НачальнаяПометкаКоллекций(Родитель)
	ВложенныеЭлементы = Родитель.ПолучитьЭлементы();

	Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
		Если ВложенныйЭлемент.Пометка Тогда
			ПометитьЭлементыРодителейНаСервере(ВложенныйЭлемент);
		КонецЕсли;
		НачальнаяПометкаКоллекций(ВложенныйЭлемент);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыбратьСсылки(ВыбранныеОбъектыМетаданных)
	Если ВыбранныеОбъектыМетаданных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ОписаниеОбъектовМетаданных	= ВыбранныеОбъектыМетаданных.ВыгрузитьЗначения();
	Ссылки						= Справочники.ИдентификаторыОбъектовМетаданных.ИдентификаторыОбъектовМетаданных(ОписаниеОбъектовМетаданных, Ложь);

	Для Каждого ЭлементСписка Из ВыбранныеОбъектыМетаданных Цикл
		Ссылка = Ссылки[ЭлементСписка.Значение];
		Если Ссылка <> Неопределено Тогда
			ЭлементСписка.Значение = Ссылка;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДеревоОбъектовМетаданныхЗаполнитьПоРазделам()
	ДеревоОбъектовМетаданных.ПолучитьЭлементы().Очистить();

	Ветка				= ДеревоОбъектовМетаданных.ПолучитьЭлементы().Добавить();
	Ветка.Имя			= Метаданные.Имя;
	Ветка.Представление	= Метаданные.Синоним;
	Ветка.Адрес			= ".";

	ВывестиКоллекцию(Ветка, Метаданные.Подсистемы);
КонецПроцедуры

&НаСервере
Процедура ВывестиКоллекцию(Знач Ветка, Знач КоллекцияОбъектовМетаданных)
	Для Каждого ОбъектМетаданных Из КоллекцияОбъектовМетаданных Цикл
		Если ТипЗнч(Ветка) = Тип("ДанныеФормыЭлементДерева") И ОбъектМетаданных.ПолноеИмя() = Ветка.ПолноеИмя Тогда
			Продолжить;
		КонецЕсли;
		Если Не ОбъектМетаданныхДоступен(ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;

		НоваяВетка					= Ветка.ПолучитьЭлементы().Добавить();
		НоваяВетка.Имя				= ОбъектМетаданных.Имя;
		НоваяВетка.ПолноеИмя		= ОбъектМетаданных.ПолноеИмя();
		НоваяВетка.Представление	= ОбъектМетаданных.Представление();
		НоваяВетка.Картинка			= КартинкаВИнтерфейсе(ОбъектМетаданных);
		НоваяВетка.Адрес			= ?(ТипЗнч(Ветка) = Тип("ДанныеФормыЭлементДерева"), Ветка.Адрес + "/", "") + НоваяВетка.Представление;
		Если ЗначениеЗаполнено(АдресаВыбранныхОбъектов) Тогда
			НоваяВетка.Пометка = ?(АдресаВыбранныхОбъектов.НайтиПоЗначению(НоваяВетка.Адрес) = Неопределено, 0, 1);
		Иначе
			НоваяВетка.Пометка = ?(ВыбранныеОбъектыМетаданных.НайтиПоЗначению(НоваяВетка.ПолноеИмя) = Неопределено, 0, 1);
		КонецЕсли;

		Если ЭтоПодсистема(ОбъектМетаданных) Тогда
			ВывестиКоллекцию(НоваяВетка, ОбъектМетаданных.Состав);
			ВывестиКоллекцию(НоваяВетка, ОбъектМетаданных.Подсистемы);
			НоваяВетка.ЭтоПодраздел = КоллекцияОбъектовМетаданных <> Метаданные.Подсистемы;
		Иначе
			НоваяВетка.ЭтоОбъектМетаданных = Истина;

			Если Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных) Тогда
				ВывестиКоллекцию(НоваяВетка, ОбъектМетаданных.РегистрируемыеДокументы);
			ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
				ВывестиКоллекцию(НоваяВетка, ПодчиненныеСправочники(ОбъектМетаданных));
			КонецЕсли;
		КонецЕсли;

		Если ЭтоПодсистема(ОбъектМетаданных) И НоваяВетка.ПолучитьЭлементы().Количество() = 0 Тогда
			Индекс = Ветка.ПолучитьЭлементы().Индекс(НоваяВетка);
			Ветка.ПолучитьЭлементы().Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция КартинкаВИнтерфейсе(ОбъектМетаданных)
	СвойстваОбъекта = Новый Структура("Картинка");
	ЗаполнитьЗначенияСвойств(СвойстваОбъекта, ОбъектМетаданных);
	Если ЗначениеЗаполнено(СвойстваОбъекта.Картинка) Тогда
		Возврат СвойстваОбъекта.Картинка;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

&НаСервере
Функция КартинкаВКонфигураторе(ОбъектМетаданных)

	ВидОбъекта	= СтрРазделить(ОбъектМетаданных.ПолноеИмя(), ".")[0];
	Картинки	= Новый Структура(ВидОбъекта);
	ЗаполнитьЗначенияСвойств(Картинки, БиблиотекаКартинок);

	Возврат Картинки[ВидОбъекта];
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоПодсистема(ОбъектМетаданных)
	Возврат СтрНачинаетсяС(ОбъектМетаданных.ПолноеИмя(), "Подсистема");
КонецФункции

&НаСервере
Функция ОбъектМетаданныхДоступен(ОбъектМетаданных)
	Если Не ЭтоПодсистема(ОбъектМетаданных) Тогда
		ЭтоВыбираемыйОбъект = Не ЗначениеЗаполнено(Параметры.КоллекцииВыбираемыхОбъектовМетаданных);
		Для Каждого ВидОбъекта Из Параметры.КоллекцииВыбираемыхОбъектовМетаданных.ВыгрузитьЗначения() Цикл
			Если Метаданные[ВидОбъекта].Содержит(ОбъектМетаданных) Тогда
				ЭтоВыбираемыйОбъект = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если Не ЭтоВыбираемыйОбъект Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Если Не Метаданные.Справочники.Содержит(ОбъектМетаданных)
		И Не Метаданные.Документы.Содержит(ОбъектМетаданных)
		И Не Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных)
		И Не Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
		И Не Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		И Не Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных)
		И Не Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
		И Не Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных)
		И Не Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
		И Не Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
		И Не Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных)
		И Не Метаданные.Задачи.Содержит(ОбъектМетаданных)
		И Не ЭтоПодсистема(ОбъектМетаданных) Тогда
		Возврат Ложь;
	КонецЕсли;

	ДоступенПоПравам				= ПравоДоступа("Просмотр", ОбъектМетаданных);
	ДоступенПоФункциональнымОпциям	= БазоваяПодсистемаСервер.ОН_ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных);

	СвойстваМетаданного = Новый Структура("ПолнотекстовыйПоиск, ВключатьВКомандныйИнтерфейс");
	ЗаполнитьЗначенияСвойств(СвойстваМетаданного, ОбъектМетаданных);

	Если СвойстваМетаданного.ПолнотекстовыйПоиск = Неопределено Тогда
		ИспользованиеПолнотекстовогоПоиска = Истина; // Если свойства нет - игнорируем.
	Иначе
		ИспользованиеПолнотекстовогоПоиска = (СвойстваМетаданного.ПолнотекстовыйПоиск = Метаданные.СвойстваОбъектов.ИспользованиеПолнотекстовогоПоиска.Использовать);
	КонецЕсли;

	Если СвойстваМетаданного.ВключатьВКомандныйИнтерфейс = Неопределено Тогда
		ВключатьВКомандныйИнтерфейс = Истина; // Если свойства нет - игнорируем.
	Иначе
		ВключатьВКомандныйИнтерфейс = СвойстваМетаданного.ВключатьВКомандныйИнтерфейс;
	КонецЕсли;

	Возврат ДоступенПоПравам И ДоступенПоФункциональнымОпциям И ИспользованиеПолнотекстовогоПоиска И ВключатьВКомандныйИнтерфейс;
КонецФункции

&НаСервере
Функция ПодчиненныеСправочники(ОбъектМетаданных)
	Если ПодчиненныеСправочники = Неопределено Тогда
		ПодчиненныеСправочники = Новый Соответствие;

		Для Каждого Справочник Из Метаданные.Справочники Цикл
			Если ПодчиненныеСправочники[Справочник] = Неопределено Тогда
				ПодчиненныеСправочники[Справочник] = Новый Массив;
			КонецЕсли;
			Для Каждого ВладелецСправочника Из Справочник.Владельцы Цикл
				Если ПодчиненныеСправочники[ВладелецСправочника] = Неопределено Тогда
					ПодчиненныеСправочники[ВладелецСправочника] = Новый Массив;
				КонецЕсли;
				СписокСправочников = ПодчиненныеСправочники[ВладелецСправочника]; // Массив
				СписокСправочников.Добавить(Справочник);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	Возврат ПодчиненныеСправочники[ОбъектМетаданных];
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоОбъектов()
	Если СпособГруппировкиОбъектов = "ПоРазделам" Тогда
		ДеревоОбъектовМетаданныхЗаполнитьПоРазделам();
	Иначе
		ДеревоОбъектовМетаданныхЗаполнить();
	КонецЕсли;

	НачальнаяПометкаКоллекций(ДеревоОбъектовМетаданных);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриПометкеЭлементаДерева(ЭлементДерева)
	ЭлементДерева.Пометка = СледующееЗначениеПометкиЭлемента(ЭлементДерева);

	Если ТребуетсяПометитьВложенныеЭлементы(ЭлементДерева) Тогда
		ПометитьВложенныеЭлементыРекурсивно(ЭлементДерева);
	КонецЕсли;

	Если ЭлементДерева.Пометка = ПометкаФлажокНеУстановлен() Тогда
		ЭлементДерева.Пометка = ЗначениеПометкиОтносительноВложенныхЭлементов(ЭлементДерева);
	КонецЕсли;

	ПометитьЭлементыРодителейРекурсивно(ЭлементДерева);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПометкаФлажокНеУстановлен()
	Возврат 0;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПометкаФлажокУстановлен()
	Возврат 1;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПометкаКвадрат()
	Возврат 2;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СледующееЗначениеПометкиЭлемента(ЭлементДерева)
	// 0 - Флажок не установлен.
	// 1 - Флажок установлен.
	// 2 - Установлен квадрат.
	//
	// Переопределение графа конечного автомата (или машины состояний, как ее еще можно назвать).
	//
	// Платформа делает постоянный цикл при изменении пометки,
	// т.е. имеет компоненту сильной связности орграфа:
	// 0-1-2-0-1-2-0-1...
	//
	//    0
	//   / \
	//  2 - 1
	//
	// т.е. совершает цикл: не помеченный - помеченный - квадрат - не помеченный.
	//
	// Нам требуется поведение недетерминированного конечного автомата с компонентой сильной связности:
	// 0-1-0-1-0...
	//
	// т.е. помеченный должен переходить в не помеченный, а тот - опять в помеченный.
	//
	// При этом:
	//
	// Для разделов циклы:
	// 1) 1-0-1-0-1...
	// 2) 2-0-1-0-1-0-...
	//
	//      /\
	// 2 - 0 -1
	//
	// т.е. с квадрата должен быть переход к неустановленному флажку.
	//
	// Для метаданных циклы:
	// 1) 1-0-1-0-1-0...
	// 2) 2-1-0-1-0-1-0...
	//
	//      /\
	// 2 - 1 -0
	//
	// т.е. с квадрата должен быть переход к установленному флажку.

	// На момент проверки платформа уже изменила значение пометки.

	Если ЭлементДерева.ЭтоОбъектМетаданных Тогда
		// Предыдущее значение пометки = 2 : Установлен квадрат.
		Если ЭлементДерева.Пометка = 0 Тогда
			Возврат ПометкаФлажокУстановлен();
		КонецЕсли;
	КонецЕсли;

	// Предыдущее значение пометки = 1 : Флажок установлен.
	Если ЭлементДерева.Пометка = 2 Тогда
		Возврат ПометкаФлажокНеУстановлен();
	КонецЕсли;

	// Во всех остальных случаях - значение установленное платформой.
	Возврат ЭлементДерева.Пометка;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПометитьЭлементыРодителейРекурсивно(ЭлементДерева)
	Родитель = ЭлементДерева.ПолучитьРодителя();

	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЭлементыРодителя = Родитель.ПолучитьЭлементы();
	Если ЭлементыРодителя.Количество() = 0 Тогда
		Родитель.Пометка = ПометкаФлажокУстановлен();
	ИначеЕсли ЭлементДерева.Пометка = ПометкаКвадрат() Тогда
		Родитель.Пометка = ПометкаКвадрат();
	Иначе
		Родитель.Пометка = ЗначениеПометкиОтносительноВложенныхЭлементов(Родитель);
	КонецЕсли;

	ПометитьЭлементыРодителейРекурсивно(Родитель);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеПометкиОтносительноВложенныхЭлементов(ЭлементДерева)
	СостояниеВложенныхЭлементов = СостояниеВложенныхЭлементов(ЭлементДерева);

	ЕстьПомеченные   = СостояниеВложенныхЭлементов.ЕстьПомеченные;
	ЕстьНепомеченные = СостояниеВложенныхЭлементов.ЕстьНепомеченные;

	Если ЭлементДерева.ЭтоОбъектМетаданных Тогда
		// Для объекта метаданных важно какое у него состояние сейчас,
		// ведь этот объект метаданных надо возвращать.
		// Нельзя сбрасывать установленный флажок.

		Если ЭлементДерева.Пометка = ПометкаФлажокУстановлен() Тогда
			// Оставляем флажок взведенным независимо от вложенных.
			Возврат ПометкаФлажокУстановлен();
		КонецЕсли;

		Если ЭлементДерева.Пометка = ПометкаФлажокНеУстановлен() Или ЭлементДерева.Пометка = ПометкаКвадрат() Тогда
			Если ЕстьПомеченные Тогда
				Возврат ПометкаКвадрат();
			Иначе
				Возврат ПометкаФлажокНеУстановлен();
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Для разделов не важно какое состояние сейчас,
		// они всегда зависят только от вложенных.

		Если ЕстьПомеченные Тогда
			Если ЕстьНепомеченные Тогда
				Возврат ПометкаКвадрат();
			Иначе
				Возврат ПометкаФлажокУстановлен();
			КонецЕсли;
		КонецЕсли;

		Возврат ПометкаФлажокНеУстановлен();
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СостояниеВложенныхЭлементов(ЭлементДерева)
	ВложенныеЭлементы = ЭлементДерева.ПолучитьЭлементы();

	ЕстьПомеченные   = Ложь;
	ЕстьНепомеченные = Ложь;

	Для каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
		Если ВложенныйЭлемент.Пометка = ПометкаФлажокНеУстановлен() Тогда
			ЕстьНепомеченные = Истина;
			Продолжить;
		КонецЕсли;

		Если ВложенныйЭлемент.Пометка = ПометкаФлажокУстановлен() Тогда
			ЕстьПомеченные = Истина;

			Если ВложенныйЭлемент.ЭтоОбъектМетаданных Тогда
				// Для объекта метаданных допустимо иметь непомеченные в своем составе вложенных,
				// при этом самостоятельно быть помеченным. Чтобы обыграть эту ситуацию надо поднять
				// вложенные элементы на один уровень с самим объектом, к которому они относятся.

				Состояние			= СостояниеВложенныхЭлементов(ВложенныйЭлемент);
				ЕстьПомеченные		= ЕстьПомеченные   Или Состояние.ЕстьПомеченные;
				ЕстьНепомеченные	= ЕстьНепомеченные Или Состояние.ЕстьНепомеченные;
			КонецЕсли;

			Продолжить;
		КонецЕсли;

		Если ВложенныйЭлемент.Пометка = ПометкаКвадрат() Тогда
			ЕстьПомеченные   = Истина;
			ЕстьНепомеченные = Истина;

			Продолжить;
		КонецЕсли;
	КонецЦикла;

	Результат = Новый Структура;
	Результат.Вставить("ЕстьПомеченные",   ЕстьПомеченные);
	Результат.Вставить("ЕстьНепомеченные", ЕстьНепомеченные);

	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяПометитьВложенныеЭлементы(ЭлементДерева)
	Если ЭлементДерева.ЭтоОбъектМетаданных Тогда
		// Если для объекта метаданных есть не полностью выбранные вложенные элементы,
		// значит эти элементы были выбраны пользователем и не следует портить его выбор.

		СостояниеВложенныхЭлементов = СостояниеВложенныхЭлементов(ЭлементДерева);

		ЕстьПомеченные   = СостояниеВложенныхЭлементов.ЕстьПомеченные;
		ЕстьНепомеченные = СостояниеВложенныхЭлементов.ЕстьНепомеченные;

		Если ЕстьПомеченные И ЕстьНепомеченные Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПометитьВложенныеЭлементыРекурсивно(ЭлементДерева)
	ВложенныеЭлементы = ЭлементДерева.ПолучитьЭлементы();

	Для каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
		ВложенныйЭлемент.Пометка = ЭлементДерева.Пометка;
		ПометитьВложенныеЭлементыРекурсивно(ВложенныйЭлемент);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	УсловноеОформление.Элементы.Очистить();

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента					= Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле				= Новый ПолеКомпоновкиДанных("ДеревоОбъектовМетаданных");

	ОтборЭлемента					= Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДеревоОбъектовМетаданных.ЭтоПодраздел");
	ОтборЭлемента.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение	= Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветРазделаПанелиФункций);
КонецПроцедуры

&НаКлиенте
Функция ВыбранныеЭлементы(Ветка)
	Результат = Новый Соответствие;

	Для Каждого Элемент Из Ветка.ПолучитьЭлементы() Цикл
		Если Элемент.Пометка = 1 И Не ПустаяСтрока(Элемент.ПолноеИмя) И Элемент.ЭтоОбъектМетаданных Тогда
			Результат.Вставить(Элемент.ПолноеИмя, ?(Параметры.ЗапоминатьРазделыВыбранныхОбъектов  И СпособГруппировкиОбъектов = "ПоРазделам", Элемент.Адрес, Элемент.Представление));
		КонецЕсли;
		Для Каждого ВыбранныйЭлемент Из ВыбранныеЭлементы(Элемент) Цикл
			Результат.Вставить(ВыбранныйЭлемент.Ключ, ВыбранныйЭлемент.Значение);
		КонецЦикла;
	КонецЦикла;

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ОбновитьКоллекциюВыбранныеОбъектыМетаданных()
	ВыбранныеОбъектыМетаданных.Очистить();
	Для Каждого ВыбранныйЭлемент Из ВыбранныеЭлементы(ДеревоОбъектовМетаданных) Цикл
		ВыбранныеОбъектыМетаданных.Добавить(ВыбранныйЭлемент.Ключ, ВыбранныйЭлемент.Значение, Истина);
	КонецЦикла;
КонецПроцедуры
