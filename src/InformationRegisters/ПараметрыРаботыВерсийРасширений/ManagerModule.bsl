///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ПараметрРаботыРасширения(ИмяПараметра, БезУчетаВерсииРасширений = Ложь) Экспорт
	ВерсияРасширений = ?(БезУчетаВерсииРасширений, Справочники.ВерсииРасширений.ПустаяСсылка(), ПараметрыСеанса.ВерсияРасширений);

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПараметрыРаботыВерсийРасширений.ХранилищеПараметра
	|ИЗ
	|	РегистрСведений.ПараметрыРаботыВерсийРасширений КАК ПараметрыРаботыВерсийРасширений
	|ГДЕ
	|	ПараметрыРаботыВерсийРасширений.ВерсияРасширений = &ВерсияРасширений
	|	И ПараметрыРаботыВерсийРасширений.ИмяПараметра = &ИмяПараметра";
	Запрос.УстановитьПараметр("ВерсияРасширений", ВерсияРасширений);
	Запрос.УстановитьПараметр("ИмяПараметра", ИмяПараметра);

	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ХранилищеПараметра.Получить();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтключениеБезопасногоРежима(Ложь);

	Возврат Неопределено;
КонецФункции

Процедура УстановитьПараметрРаботыРасширения(ИмяПараметра, Значение, БезУчетаВерсииРасширений = Ложь) Экспорт
	ВерсияРасширений					= ?(БезУчетаВерсииРасширений, Справочники.ВерсииРасширений.ПустаяСсылка(), ПараметрыСеанса.ВерсияРасширений);

	НаборЗаписей						= РегистрыСведений.ПараметрыРаботыПрограммы.СлужебныйНаборЗаписей(РегистрыСведений.ПараметрыРаботыВерсийРасширений);
	НаборЗаписей.Отбор.ВерсияРасширений.Установить(ВерсияРасширений);
	НаборЗаписей.Отбор.ИмяПараметра.Установить(ИмяПараметра);

	НоваяЗапись							= НаборЗаписей.Добавить();
	НоваяЗапись.ВерсияРасширений		= ВерсияРасширений;
	НоваяЗапись.ИмяПараметра			= ИмяПараметра;
	НоваяЗапись.ХранилищеПараметра		= Новый ХранилищеЗначения(Значение);

	НаборЗаписей.Записать();
КонецПроцедуры

Процедура ОчиститьВсеПараметрыРаботыРасширений() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	НачатьТранзакцию();
	Попытка
		НаборЗаписей						= РегистрыСведений.ПараметрыРаботыПрограммы.СлужебныйНаборЗаписей(РегистрыСведений.ИдентификаторыОбъектовВерсийРасширений);
		НаборЗаписей.Отбор.ВерсияРасширений.Установить(ПараметрыСеанса.ВерсияРасширений);
		НаборЗаписей.Записать();

		НаборЗаписей						= РегистрыСведений.ПараметрыРаботыПрограммы.СлужебныйНаборЗаписей(РегистрыСведений.ПараметрыРаботыВерсийРасширений);
		НаборЗаписей.Отбор.ВерсияРасширений.Установить(ПараметрыСеанса.ВерсияРасширений);
		НаборЗаписей.Записать();

		ИнтеграцияПодсистемСервер.ПриОчисткеВсехПараметровРаботыРасширений();

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

Процедура ЗаполнитьВсеПараметрыРаботыРасширений() Экспорт
	// Заполнить идентификаторы объектов метаданных расширений.
	Если ЗначениеЗаполнено(ПараметрыСеанса.ПодключенныеРасширения) Тогда
		Обновить	= Справочники.ИдентификаторыОбъектовРасширений.ИдентификаторыОбъектовТекущейВерсииРасширенийЗаполнены();
		БазоваяПодсистемаСерверПовтИсп.СП_ИдентификаторыОбъектовМетаданныхПроверкаИспользования(Истина, Истина);
	Иначе
		Обновить = Истина;
	КонецЕсли;

	Если Обновить Тогда
		Справочники.ИдентификаторыОбъектовРасширений.ОбновитьДанныеСправочника();
	КонецЕсли;

	// Зарезервировано для новых подсистем

	ИнтеграцияПодсистемСервер.ПриЗаполненииВсехПараметровРаботыРасширений();

	ИмяПараметра = "СтандартныеПодсистемы.БазоваяФункциональность.ДатаПоследнегоЗаполненияВсехПараметровРаботыРасширений";
	РегистрыСведений.ПараметрыРаботыВерсийРасширений.УстановитьПараметрРаботыРасширения(ИмяПараметра, ТекущаяДатаСеанса(), Истина);

	// Зарезервировано для новых подсистем
КонецПроцедуры

Процедура ПриУспешномНачалеВыполненияРегламентногоЗадания() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	ТекущийСеанс = ПолучитьТекущийСеансИнформационнойБазы();
	Если ТекущийСеанс.ИмяПриложения <> "BackgroundJob" Тогда
		Возврат;
	КонецЕсли;

	Если Не ТребуетсяВключитьЗаполнениеПараметровРаботыРасширений() Тогда
		Возврат;
	КонецЕсли;

	ТекущееФоновоеЗадание	= ТекущийСеанс.ПолучитьФоновоеЗадание();
	МетаданныеЗадания		= Метаданные.РегламентныеЗадания.ЗаполнениеПараметровРаботыРасширений;
	Запустить				= ТекущееФоновоеЗадание <> Неопределено И ТекущееФоновоеЗадание.ИмяМетода <> МетаданныеЗадания.ИмяМетода;

	ВключитьЗаполнениеПараметровРаботыРасширений(Запустить);
КонецПроцедуры

Процедура ЗаполнитьВсеПараметрыРаботыПоследнейВерсииРасширений() Экспорт
	Если ТранзакцияАктивна() Тогда
		Возврат;
	КонецЕсли;

	ТекущийСеанс = ПолучитьТекущийСеансИнформационнойБазы();
	Если ТекущийСеанс.ИмяПриложения <> "BackgroundJob" Тогда
		Возврат;
	КонецЕсли;
	ТекущееФоновоеЗадание = ТекущийСеанс.ПолучитьФоновоеЗадание();
	Если ТекущееФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИдентификаторТекущегоЗадания = ТекущееФоновоеЗадание.УникальныйИдентификатор;

	// Регистрация текущего фонового задания как исполняющего, либо завершение, если существует.
	ИмяПараметра				= "СтандартныеПодсистемы.БазоваяФункциональность.ЗаданиеЗаполненияПараметровРаботыРасширений";
	ИдентификаторЗадания		= РегистрыСведений.ПараметрыРаботыВерсийРасширений.ПараметрРаботыРасширения(ИмяПараметра, Истина);
	ИсполняющееФоновоеЗадание	= Неопределено;
	ЗаполнитьАктивноеФоновоеЗадание(ИсполняющееФоновоеЗадание, ИдентификаторЗадания);
	Если ИсполняющееФоновоеЗадание <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	Блокировка				= Новый БлокировкаДанных;
	ЭлементБлокировки		= Блокировка.Добавить("РегистрСведений.ПараметрыРаботыВерсийРасширений");
	ЭлементБлокировки.УстановитьЗначение("ВерсияРасширений", Справочники.ВерсииРасширений.ПустаяСсылка());
	ЭлементБлокировки.УстановитьЗначение("ИмяПараметра", ИмяПараметра);
	БлокировкаУстановлена	= Ложь;

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		БлокировкаУстановлена	= Истина;
		ИдентификаторЗадания	= РегистрыСведений.ПараметрыРаботыВерсийРасширений.ПараметрРаботыРасширения(ИмяПараметра, Истина);
		ЗаполнитьАктивноеФоновоеЗадание(ИсполняющееФоновоеЗадание, ИдентификаторЗадания);
		Если ИсполняющееФоновоеЗадание = Неопределено Тогда
			РегистрыСведений.ПараметрыРаботыВерсийРасширений.УстановитьПараметрРаботыРасширения(ИмяПараметра, ИдентификаторТекущегоЗадания, Истина);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Если БлокировкаУстановлена Тогда
			ВызватьИсключение;
		КонецЕсли;
		ЗапуститьЗаполнениеПараметровРаботыРасширений();

		Возврат;
	КонецПопытки;

	Если ИсполняющееФоновоеЗадание <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Перезапуск, если метаданные уже не актуальны.
	ВерсияРасширений = ПараметрыСеанса.ВерсияРасширений;
	ВерсияПриЗапуске = Справочники.ВерсииРасширений.ПоследняяВерсияРасширений();

	Если ВерсияПриЗапуске.ВерсияРасширений <> ВерсияРасширений Или КонфигурацияБазыДанныхИзмененаДинамически() Или Справочники.ВерсииРасширений.РасширенияИзмененыДинамически() Тогда
		РегистрыСведений.ПараметрыРаботыВерсийРасширений.УстановитьПараметрРаботыРасширения(ИмяПараметра, Неопределено, Истина);
		ЗапуститьЗаполнениеПараметровРаботыРасширений();

		Возврат;
	КонецЕсли;

	// Заполнение всех параметров работы текущей версии расширений.
	НомерПопытки		= 1;
	КоличествоПопыток	= 3;
	ПредыдущаяОшибка	= "";
	Пока Истина Цикл
		Попытка
			ЗаполнитьВсеПараметрыРаботыРасширений();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТребуетсяПерезапускСеанса = БазоваяПодсистемаСервер.СП_ТребуетсяПерезапускСеанса();
			Если Не ТребуетсяПерезапускСеанса Или Не БазоваяПодсистемаСервер.СП_ЭтоОшибкаТребованияПерезапускаСеанса(ИнформацияОбОшибке) Тогда
				ТекущаяОшибка = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				Если ПредыдущаяОшибка = ТекущаяОшибка Тогда
					ТекстОшибки = СтрШаблон("При попытке заполнения %1 из %2 повторилась ошибка предыдущей попытки.", Формат(НомерПопытки, "ЧГ="), Формат(КоличествоПопыток, "ЧГ="));
				Иначе
					ТекстОшибки = СтрШаблон("При попытке заполнения %1 из %2 возникла ошибка:
						           |%3",
						Формат(НомерПопытки, "ЧГ="), Формат(КоличествоПопыток, "ЧГ="), ТекущаяОшибка);
					ДобавитьДополнительныеСведения(ТекстОшибки);
				КонецЕсли;
				ПредыдущаяОшибка = ТекущаяОшибка;
				ЗаписьЖурналаРегистрации("Расширения конфигурации.Заполнение параметров работы расширений", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			КонецЕсли;
			Если ТребуетсяПерезапускСеанса Тогда
				РегистрыСведений.ПараметрыРаботыВерсийРасширений.УстановитьПараметрРаботыРасширения(ИмяПараметра, Неопределено, Истина);
				ЗапуститьЗаполнениеПараметровРаботыРасширений();

				Возврат;
			КонецЕсли;
			НомерПопытки = НомерПопытки + 1;
			Если НомерПопытки <= КоличествоПопыток Тогда
				Продолжить;
			КонецЕсли;
		КонецПопытки;
		Прервать;
	КонецЦикла;

	Если Не ЗначениеЗаполнено(ПредыдущаяОшибка) Тогда
		Комментарий = "Заполнение выполнено успешно.";
		ДобавитьДополнительныеСведения(Комментарий);
		ЗаписьЖурналаРегистрации("Расширения конфигурации.Заполнение параметров работы расширений", УровеньЖурналаРегистрации.Информация,,, Комментарий);
	КонецЕсли;

	Перезапустить = Ложь;
	ОтключитьЗаполнениеПараметровРаботыРасширений(ВерсияПриЗапуске, Перезапустить);

	Если Перезапустить Тогда
		РегистрыСведений.ПараметрыРаботыВерсийРасширений.УстановитьПараметрРаботыРасширения(ИмяПараметра, Неопределено, Истина);
		ЗапуститьЗаполнениеПараметровРаботыРасширений();
	КонецЕсли;
КонецПроцедуры

Процедура ОтметитьЗаполнениеПараметровРаботыРасширений() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Справочники.ВерсииРасширений.ЗарегистрироватьИспользованиеВерсииРасширений();
	ВерсияРасширений	= ПараметрыСеанса.ВерсияРасширений;
	ПоследняяВерсия		= Справочники.ВерсииРасширений.ПоследняяВерсияРасширений();
	Если ПоследняяВерсия.ВерсияРасширений = ВерсияРасширений Тогда
		ОтключитьЗаполнениеПараметровРаботыРасширений(ПоследняяВерсия,, Истина);
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Процедура ЗаполнитьАктивноеФоновоеЗадание(ИсполняющееФоновоеЗадание, ИдентификаторЗадания)
	Если ТипЗнч(ИдентификаторЗадания) = Тип("УникальныйИдентификатор") Тогда
		ИсполняющееФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		Если ИсполняющееФоновоеЗадание <> Неопределено И ИсполняющееФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
			ИсполняющееФоновоеЗадание = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОтключитьЗаполнениеПараметровРаботыРасширений(ВерсияПриЗапуске, Перезапустить = Ложь, ОбновитьИдентификаторЗаполнения = Ложь)
	ИмяПараметра		= "СтандартныеПодсистемы.БазоваяФункциональность.ИдентификаторЗаполненияПараметровРаботыРасширений";
	Блокировка			= Новый БлокировкаДанных;
	ЭлементБлокировки	= Блокировка.Добавить("РегистрСведений.ПараметрыРаботыВерсийРасширений");
	ЭлементБлокировки.УстановитьЗначение("ВерсияРасширений", Справочники.ВерсииРасширений.ПустаяСсылка());
	ЭлементБлокировки.УстановитьЗначение("ИмяПараметра", ИмяПараметра);

	Отбор = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.ЗаполнениеПараметровРаботыРасширений);

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		ТекущаяВерсия = Справочники.ВерсииРасширений.ПоследняяВерсияРасширений();

		Если ВерсияПриЗапуске.ВерсияРасширений = ТекущаяВерсия.ВерсияРасширений
		   И ВерсияПриЗапуске.ДатаОбновления = ТекущаяВерсия.ДатаОбновления
		   И (ОбновитьИдентификаторЗаполнения Или Не ТребуетсяВключитьЗаполнениеПараметровРаботыРасширений())
		   И Не КонфигурацияБазыДанныхИзмененаДинамически()
		   И Не Справочники.ВерсииРасширений.РасширенияИзмененыДинамически() Тогда

			Если ОбновитьИдентификаторЗаполнения Тогда
				ИдентификаторОбновления	= ТекущаяВерсия.ИдентификаторОбновления;
				ИдентификаторЗаполнения	= РегистрыСведений.ПараметрыРаботыВерсийРасширений.ПараметрРаботыРасширения(ИмяПараметра, Истина);
				Если ИдентификаторОбновления <> ИдентификаторЗаполнения Тогда
					РегистрыСведений.ПараметрыРаботыВерсийРасширений.УстановитьПараметрРаботыРасширения(ИмяПараметра, ИдентификаторОбновления, Истина);
				КонецЕсли;
			КонецЕсли;

			Задания = РегламентныеЗаданияСервер.РЗ_НайтиЗадания(Отбор);
			Для Каждого Задание Из Задания Цикл
				РегламентныеЗаданияСервер.РЗ_ИзменитьЗадание(Задание.УникальныйИдентификатор, Новый Структура("Использование", Ложь));
			КонецЦикла;
		Иначе
			Перезапустить = Истина;
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Функция ТребуетсяВключитьЗаполнениеПараметровРаботыРасширений()
	ПоследняяВерсияРасширений = Справочники.ВерсииРасширений.ПоследняяВерсияРасширений();

	ИмяПараметра = "СтандартныеПодсистемы.БазоваяФункциональность.ИдентификаторЗаполненияПараметровРаботыРасширений";
	ИдентификаторЗаполнения = РегистрыСведений.ПараметрыРаботыВерсийРасширений.ПараметрРаботыРасширения(ИмяПараметра, Истина);

	Возврат ПоследняяВерсияРасширений.ИдентификаторОбновления <> ИдентификаторЗаполнения;
КонецФункции

Процедура ПриПервомСерверномВызове() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Если ТекущийРежимЗапуска() = Неопределено
	 Или Не ТребуетсяВключитьЗаполнениеПараметровРаботыРасширений()
	 Или РегистрыСведений.ПараметрыРаботыПрограммы.НеобходимоОбновление()
	 Или ПланыОбмена.ГлавныйУзел() = Неопределено И ЗначениеЗаполнено(Константы.ГлавныйУзел.Получить()) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыЗапуска = БазоваяПодсистемаСервер.СП_ПараметрыКлиентаНаСервере().Получить("ПараметрЗапуска");
	ВключитьЗаполнениеПараметровРаботыРасширений(СтрНайти(ПараметрыЗапуска, "РежимОтладки") > 0 Или Не БазоваяПодсистемаСервер.ОН_ИнформационнаяБазаФайловая() И Ложь);
КонецПроцедуры

Процедура ВключитьЗаполнениеПараметровРаботыРасширений(Запустить = Истина, ВключитьБезусловно = Ложь) Экспорт
	ИмяПараметра = "СтандартныеПодсистемы.БазоваяФункциональность.ИдентификаторЗаполненияПараметровРаботыРасширений";

	Блокировка			= Новый БлокировкаДанных;
	ЭлементБлокировки	= Блокировка.Добавить("РегистрСведений.ПараметрыРаботыВерсийРасширений");
	ЭлементБлокировки.УстановитьЗначение("ВерсияРасширений", Справочники.ВерсииРасширений.ПустаяСсылка());
	ЭлементБлокировки.УстановитьЗначение("ИмяПараметра", ИмяПараметра);

	Отбор = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.ЗаполнениеПараметровРаботыРасширений);

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		ИдентификаторОбновления	= Справочники.ВерсииРасширений.ПоследняяВерсияРасширений().ИдентификаторОбновления;
		ИдентификаторЗаполнения	= РегистрыСведений.ПараметрыРаботыВерсийРасширений.ПараметрРаботыРасширения(ИмяПараметра, Истина);
		Если ВключитьБезусловно Или ИдентификаторОбновления <> ИдентификаторЗаполнения Тогда
			Если ИдентификаторОбновления <> ИдентификаторЗаполнения Тогда
				РегистрыСведений.ПараметрыРаботыВерсийРасширений.УстановитьПараметрРаботыРасширения(ИмяПараметра, ИдентификаторОбновления, Истина);
			КонецЕсли;
			Задания = РегламентныеЗаданияСервер.РЗ_НайтиЗадания(Отбор);
			Для Каждого Задание Из Задания Цикл
				РегламентныеЗаданияСервер.РЗ_ИзменитьЗадание(Задание.УникальныйИдентификатор, Новый Структура("Использование", Истина));
			КонецЦикла;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Если Запустить Тогда
		ЗапуститьЗаполнениеПараметровРаботыРасширений();
	КонецЕсли;
КонецПроцедуры

Процедура ЗапуститьЗаполнениеПараметровРаботыРасширений(ОжидатьЗавершения = Ложь) Экспорт
	Если ТранзакцияАктивна() Или МонопольныйРежим() И Не ОжидатьЗавершения Или КонфигурацияБазыДанныхИзмененаДинамически() И БазоваяПодсистемаСервер.ОН_ИнформационнаяБазаФайловая() Тогда
		// В файловой ИБ перезапуск фонового задания с расширениями базы данных
		// выполняется с той же версией динамического поколения конфигурации.
		Возврат;
	КонецЕсли;

	ТекущийСеанс		= ПолучитьТекущийСеансИнформационнойБазы();
	МетаданныеЗадания	= Метаданные.РегламентныеЗадания.ЗаполнениеПараметровРаботыРасширений;

	НаименованиеЗадания = "Автозапуск" + ": " + МетаданныеЗадания.Синоним + " (" + СтрШаблон("из сеанса %1 от %2", Формат(ТекущийСеанс.НомерСеанса, "ЧГ="), Формат(ТекущийСеанс.НачалоСеанса, "ДЛФ=DT")) + ")";

	ФоновоеЗадание = РасширенияКонфигурации.ВыполнитьФоновоеЗаданиеСРасширениямиБазыДанных(МетаданныеЗадания.ИмяМетода,,, НаименованиеЗадания);

	Если ОжидатьЗавершения И ФоновоеЗадание <> Неопределено И (ТекущийРежимЗапуска() <> Неопределено Или Не БазоваяПодсистемаСервер.ОН_ИнформационнаяБазаФайловая()) Тогда
		ФоновоеЗадание.ОжидатьЗавершенияВыполнения();
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьДополнительныеСведения(Комментарий)
	ОписаниеРасширений = Справочники.ВерсииРасширений.ОписаниеРасширенийДляЖурнала();

	ДополнительныеСведения = СтрШаблон("*** Дополнительные сведения ***
		           |
		           |1. Подключенные расширения (включая исправления):
		           |%1
		           |
		           |2. Отключенные расширения (включая исправления):
		           |%2
		           |
		           |3. Все расширения базы данных (включая исправления):
		           |%3
		           |
		           |4. Версия расширений ""%4""
		           |%5",
		ОписаниеРасширений.Подключенные,
		ОписаниеРасширений.Отключенные,
		ОписаниеРасширений.Все,
		Строка(ПараметрыСеанса.ВерсияРасширений),
		ПараметрыСеанса.ВерсияРасширений.ОписаниеМетаданных);

	Комментарий = Комментарий + Символы.ПС + Символы.ПС + ДополнительныеСведения;
КонецПроцедуры

#КонецЕсли
