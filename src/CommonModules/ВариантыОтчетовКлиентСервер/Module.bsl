///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ВариантыОтчетов

Функция ВО_ТипОтчетаСтрокой(Знач ТипОтчета, Знач Отчет = Неопределено) Экспорт
	ТипТипаОтчета = ТипЗнч(ТипОтчета);
	Если ТипТипаОтчета = Тип("Строка") Тогда
		Возврат ТипОтчета;
	ИначеЕсли ТипТипаОтчета = Тип("ПеречислениеСсылка.ТипыОтчетов") Тогда
		Если ТипОтчета = ПредопределенноеЗначение("Перечисление.ТипыОтчетов.Внутренний") Тогда
			Возврат "Внутренний";
		ИначеЕсли ТипОтчета = ПредопределенноеЗначение("Перечисление.ТипыОтчетов.Расширение") Тогда
			Возврат "Расширение";
		ИначеЕсли ТипОтчета = ПредопределенноеЗначение("Перечисление.ТипыОтчетов.Дополнительный") Тогда
			Возврат "Дополнительный";
		ИначеЕсли ТипОтчета = ПредопределенноеЗначение("Перечисление.ТипыОтчетов.Внешний") Тогда
			Возврат "Внешний";
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если ТипТипаОтчета <> Тип("Тип") Тогда
			ТипОтчета = ТипЗнч(Отчет);
		КонецЕсли;
		Если ТипОтчета = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
			Возврат "Внутренний";
		ИначеЕсли ТипОтчета = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
			Возврат "Расширение";
		ИначеЕсли ТипОтчета = Тип("Строка") Тогда
			Возврат "Внешний";
		Иначе
			Возврат "Дополнительный";
		КонецЕсли;
	КонецЕсли;
КонецФункции

Процедура ВО_ДополнитьСтруктуруКлючом(Структура, Ключ, Значение = Неопределено) Экспорт
	Если Не Структура.Свойство(Ключ) Тогда
		Структура.Вставить(Ключ, Значение);
	КонецЕсли;
КонецПроцедуры

Функция ВО_РазложитьСтрокуПоискаВМассивСлов(СтрокаПоиска) Экспорт
	СловаИИхДлина = Новый СписокЗначений;
	ДлинаСтроки = СтрДлина(СтрокаПоиска);

	Слово			= "";
	ДлинаСлова		= 0;
	ОткрытаКавычка	= Ложь;
	Для НомерСимвола = 1 По ДлинаСтроки Цикл
		КодСимвола = КодСимвола(СтрокаПоиска, НомерСимвола);
		Если КодСимвола = 34 Тогда // 34 - двойная кавычка ".
			ОткрытаКавычка = Не ОткрытаКавычка;
		ИначеЕсли ОткрытаКавычка
			Или (КодСимвола >= 48 И КодСимвола <= 57) // цифры
			Или (КодСимвола >= 65 И КодСимвола <= 90) // латиница большие
			Или (КодСимвола >= 97 И КодСимвола <= 122) // латиница маленькие
			Или (КодСимвола >= 1040 И КодСимвола <= 1103) // кириллица
			Или КодСимвола = 95 Тогда // символ "_"
			Слово = Слово + Символ(КодСимвола);
			ДлинаСлова = ДлинаСлова + 1;
		ИначеЕсли Слово <> "" Тогда
			Если СловаИИхДлина.НайтиПоЗначению(Слово) = Неопределено Тогда
				СловаИИхДлина.Добавить(Слово, Формат(ДлинаСлова, "ЧЦ=3; ЧВН="));
			КонецЕсли;
			Слово = "";
			ДлинаСлова = 0;
		КонецЕсли;
	КонецЦикла;

	Если Слово <> "" И СловаИИхДлина.НайтиПоЗначению(Слово) = Неопределено Тогда
		СловаИИхДлина.Добавить(Слово, Формат(ДлинаСлова, "ЧЦ=3; ЧВН="));
	КонецЕсли;

	СловаИИхДлина.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);

	Возврат СловаИИхДлина.ВыгрузитьЗначения();
КонецФункции

Процедура сВО_ОпределитьДоступностьДействийКонтекстногоМеню(Форма, СвойстваЗаголовка) Экспорт
	Если ТипЗнч(СвойстваЗаголовка) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	ДействияКонтекстногоМеню = сВО_ДействияКонтекстногоМенюОбластиЗаголовка();

	Для Каждого Действие Из ДействияКонтекстногоМеню Цикл
		Форма.Элементы[Действие.Ключ].Доступность = СвойстваЗаголовка[Действие.Значение];
	КонецЦикла;
КонецПроцедуры

Функция сВО_КартинкаПоля(ТипЗначенияПоля) Экспорт
	ДоступныеТипы = ?(ТипЗначенияПоля <> Неопределено, ТипЗначенияПоля.Типы(), Новый Массив);

	Если ДоступныеТипы.Количество() = 0 Тогда
		Возврат БиблиотекаКартинок.Пустая;
	КонецЕсли;

	Если ДоступныеТипы.Количество() > 1 Тогда
		Возврат БиблиотекаКартинок.ТипСоставнойОсновной;
	КонецЕсли;

	Если ТипЗначенияПоля.СодержитТип(Тип("Число")) Тогда
		Возврат БиблиотекаКартинок.ТипЧисло;
	КонецЕсли;

	Если ТипЗначенияПоля.СодержитТип(Тип("Строка")) Тогда
		Возврат БиблиотекаКартинок.ТипСтрока;
	КонецЕсли;

	Если ТипЗначенияПоля.СодержитТип(Тип("Дата")) Тогда
		Возврат БиблиотекаКартинок.ТипДата;
	КонецЕсли;

	Если ТипЗначенияПоля.СодержитТип(Тип("Булево")) Тогда
		Возврат БиблиотекаКартинок.ТипБулево;
	КонецЕсли;

	Если ТипЗначенияПоля.СодержитТип(Тип("УникальныйИдентификатор")) Тогда
		Возврат БиблиотекаКартинок.ТипИдентификатор;
	КонецЕсли;

	Возврат БиблиотекаКартинок.ТипСсылка;
КонецФункции

Функция сВО_ПолеСодержитсяВГруппировкеОтчета(Поля, Поле, ПроверятьИспользование = Истина, Содержится = Ложь) Экспорт
	Возврат сВО_ПолеОтчета(Поля, Поле, ПроверятьИспользование) <> Неопределено;
КонецФункции

Функция сВО_ПолеОтчета(Поля, Поле, ПроверятьИспользование = Истина, ЗаголовокПоля = "", ПолеОтчета = Неопределено) Экспорт
	ДоступныеПоля = Неопределено;

	Если ТипЗнч(Поля) = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
		ДоступныеПоля = Поля.ДоступныеПоляВыбора;
	ИначеЕсли ТипЗнч(Поля) = Тип("ПоляГруппировкиКомпоновкиДанных") Тогда
		ДоступныеПоля = Поля.ДоступныеПоляПолейГруппировок;
	КонецЕсли;

	ОписаниеПоля = ?(ДоступныеПоля = Неопределено, Неопределено, ДоступныеПоля.НайтиПоле(Поле));

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПроверятьИспользование",	ПроверятьИспользование);
	ДополнительныеПараметры.Вставить("ЗаголовокПоля",			ЗаголовокПоля);
	ДополнительныеПараметры.Вставить("ОписаниеПоля",			ОписаниеПоля);

	сВО_НайтиПолеОтчета(Поля, Поле, ПолеОтчета, ДополнительныеПараметры);

	Возврат ПолеОтчета;
КонецФункции

Функция сВО_ДействияКонтекстногоМенюОбластиЗаголовка()
	Действия = Новый Соответствие;
	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаВставитьПолеСправа",			"ВставитьПолеСправа");
	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаВставитьГруппировкуНиже",		"ВставитьГруппировкуНиже");

	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаПереместитьПолеВлево",		"ПереместитьПолеВлево");
	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаПереместитьПолеВправо",		"ПереместитьПолеВправо");
	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаПереместитьПолеВыше",			"ПереместитьПолеВыше");
	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаПереместитьПолеНиже",			"ПереместитьПолеНиже");

	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаСортироватьПоВозрастанию",	"СортироватьПоВозрастанию");
	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаСортироватьПоУбыванию",		"СортироватьПоУбыванию");

	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаСкрытьПоле",					"СкрытьПоле");
	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаПереименоватьПоле",			"ПереименоватьПоле");

	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаОформитьОтрицательные",		"ОформитьОтрицательные");
	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаОформитьПоложительные",		"ОформитьПоложительные");
	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаМенюОформитьЕще",				"ОформитьЕще");

	Возврат Действия;
КонецФункции

Процедура сВО_НайтиПолеОтчета(Поля, Поле, НайденноеПоле, ДополнительныеПараметры)
	ПроверятьИспользование	= ДополнительныеПараметры.ПроверятьИспользование;
	ЗаголовокПоля			= ДополнительныеПараметры.ЗаголовокПоля;
	ОписаниеПоля			= ДополнительныеПараметры.ОписаниеПоля;

	Для Каждого Элемент Из Поля.Элементы Цикл
		ТипЭлемента = ТипЗнч(Элемент);

		ПроверкаИспользованияПоляПройденаУспешно	= Не ПроверятьИспользование Или ПроверятьИспользование И Элемент.Использование;
		ПроверкаЗаголовкаПройденаУспешно			= Не ЗначениеЗаполнено(ЗаголовокПоля) Или Элемент.Заголовок = ЗаголовокПоля Или ОписаниеПоля <> Неопределено И ОписаниеПоля.Заголовок = ЗаголовокПоля;

		Если ТипЭлемента <> Тип("АвтоВыбранноеПолеКомпоновкиДанных") И Элемент.Поле = Поле И ПроверкаИспользованияПоляПройденаУспешно И ПроверкаЗаголовкаПройденаУспешно Тогда
			НайденноеПоле = Элемент;

			Возврат;
		ИначеЕсли ТипЭлемента = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			сВО_НайтиПолеОтчета(Элемент, Поле, НайденноеПоле, ДополнительныеПараметры);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция сВО_ПолеИспользуетсяВРодительскихГруппировкахОтчета(Родитель, Поле, Содержится = Ложь) Экспорт
	Если (ТипЗнч(Родитель) = Тип("ГруппировкаКомпоновкиДанных") Или ТипЗнч(Родитель) = Тип("ГруппировкаТаблицыКомпоновкиДанных")) Тогда
		Если сВО_ПолеОтчета(Родитель.ПоляГруппировки, Поле, Истина) <> Неопределено Тогда
			Содержится = Истина;
		Иначе
			сВО_ПолеИспользуетсяВРодительскихГруппировкахОтчета(Родитель.Родитель, Поле, Содержится);
		КонецЕсли;
	КонецЕсли;

	Возврат Содержится;
КонецФункции

Функция сВО_ГруппировкаФильтра(Настройки, СвойстваЗаголовка, ЭтоГруппировка = Ложь) Экспорт
	Если СвойстваЗаголовка.ИдентификаторНастроек = Неопределено Тогда
		Возврат Настройки;
	КонецЕсли;

	ИспользуемыеНастройки = Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторНастроек);

	Если ИспользуемыеНастройки = Неопределено Тогда
		ИспользуемыеНастройки = Настройки;
	КонецЕсли;

	Если ЭтоГруппировка Или СвойстваЗаголовка.ЭтоФормула Или СвойстваЗаголовка.КоличествоРазделов = 1 Тогда
		Раздел = ИспользуемыеНастройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторРаздела);
	Иначе
		Раздел = ИспользуемыеНастройки;
	КонецЕсли;

	Если ТипЗнч(Раздел) = Тип("ТаблицаКомпоновкиДанных") Тогда
		Если СтрНайти(СвойстваЗаголовка.ИдентификаторГруппировки, "/column/") > 0 И Раздел.Строки.Количество() > 0 Тогда
			Возврат Раздел.Строки[0];
		Иначе
			Группировка = ИспользуемыеНастройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторГруппировки);

			Возврат Группировка;
		КонецЕсли;
	КонецЕсли;

	Возврат Раздел;
КонецФункции

Функция сВО_ФильтрыРазделаОтчета(Настройки, СвойстваЗаголовка, ЭтоГруппировка = Ложь) Экспорт
	ГруппировкаФильтра = сВО_ГруппировкаФильтра(Настройки, СвойстваЗаголовка, ЭтоГруппировка);

	Возврат ГруппировкаФильтра.Отбор;
КонецФункции

Функция сВО_ФильтрРазделаОтчета(Фильтры, Поле, Фильтр = Неопределено) Экспорт
	Для Каждого Элемент Из Фильтры.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			сВО_ФильтрРазделаОтчета(Элемент, Поле, Фильтр);
		ИначеЕсли Элемент.ЛевоеЗначение = Поле Тогда
			Фильтр = Элемент;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Фильтр;
КонецФункции

Функция сВО_ФормулаПоПутиКДанным(Настройки, ПутьКДанным) Экспорт
	Формулы = Настройки.ПользовательскиеПоля.Элементы;

	Для Каждого Формула Из Формулы Цикл
		Если СтрЗаканчиваетсяНа(Формула.ПутьКДанным, ПутьКДанным) Тогда
			Возврат Формула;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

Функция сВО_ИндексКартинкиПоля(Знач ТипЗначенияПоля, ЭтоГруппа = Ложь) Экспорт
	Если ЭтоГруппа Тогда
		Возврат 14;
	КонецЕсли;

	Если ТипЗначенияПоля = Неопределено Тогда
		ТипЗначенияПоля = Новый ОписаниеТипов();
	КонецЕсли;

	ДоступныеТипы = ТипЗначенияПоля.Типы();

	Если ДоступныеТипы.Количество() = 0 Тогда
		Возврат -1;
	КонецЕсли;

	Если ДоступныеТипы.Количество() > 1 Тогда
		Возврат 15;
	КонецЕсли;

	Если ТипЗначенияПоля.СодержитТип(Тип("Число")) Тогда
		Возврат 13;
	КонецЕсли;

	Если ТипЗначенияПоля.СодержитТип(Тип("Строка")) Тогда
		Возврат 8;
	КонецЕсли;

	Если ТипЗначенияПоля.СодержитТип(Тип("Дата")) Тогда
		Возврат 2;
	КонецЕсли;

	Если ТипЗначенияПоля.СодержитТип(Тип("Булево")) Тогда
		Возврат 0;
	КонецЕсли;

	Если ТипЗначенияПоля.СодержитТип(Тип("УникальныйИдентификатор")) Тогда
		Возврат 4;
	КонецЕсли;

	Возврат 16;
КонецФункции

Функция сВО_РежимВариантаОтчета(КлючВарианта) Экспорт
	Возврат ТипЗнч(КлючВарианта) = Тип("Строка") И Не ПустаяСтрока(КлючВарианта);
КонецФункции

#КонецОбласти

#Область Отчеты

Функция О_НастройкиОтчетаПоУмолчанию() Экспорт
	Настройки = Новый Структура;
	Настройки.Вставить("ФормироватьСразу",										Ложь);
	Настройки.Вставить("ВыводитьСуммуВыделенныхЯчеек",							Истина);
	Настройки.Вставить("РазрешеноИзменятьСтруктуру",							Истина);
	Настройки.Вставить("РазрешеноИзменятьВарианты",								Истина);
	Настройки.Вставить("РазрешеноВыбиратьИНастраиватьВариантыБезСохранения",	Ложь);
	Настройки.Вставить("ПараметрыРасположенияЭлементовУправления",				Неопределено);
	Настройки.Вставить("СкрытьКомандыРассылки",									Ложь);
	Настройки.Вставить("РазрешеноЗагружатьСхему",								Ложь);
	Настройки.Вставить("РазрешеноРедактироватьСхему",							Ложь);
	Настройки.Вставить("РазрешеноВосстанавливатьСтандартнуюСхему",				Ложь);
	Настройки.Вставить("ЗагрузитьНастройкиПриИзмененииПараметров",				Новый Массив);
	Настройки.Вставить("ПоляПоиска",											Новый Массив);
	Настройки.Вставить("ВариантПредставленияПериода",							ПредопределенноеЗначение("Перечисление.ВариантыПредставленияПериода.Стандартный"));
	Настройки.Вставить("ВариантПериода",										ПредопределенноеЗначение("Перечисление.ВариантыПериода.Стандартный"));

	Печать = Новый Структура;
	Печать.Вставить("ПолеСверху",			10);
	Печать.Вставить("ПолеСлева",			10);
	Печать.Вставить("ПолеСнизу",			10);
	Печать.Вставить("ПолеСправа",			10);
	Печать.Вставить("ОриентацияСтраницы",	ОриентацияСтраницы.Портрет);
	Печать.Вставить("АвтоМасштаб",			Истина);
	Печать.Вставить("МасштабПечати",		Неопределено);

	Настройки.Вставить("Печать",			Печать);

	События = Новый Структура;
	События.Вставить("ПриСозданииНаСервере",							Ложь);
	События.Вставить("ПередЗагрузкойНастроекВКомпоновщик",				Ложь);
	События.Вставить("ПередЗагрузкойВариантаНаСервере",					Ложь);
	События.Вставить("ПриЗагрузкеВариантаНаСервере",					Ложь);
	События.Вставить("ПриЗагрузкеПользовательскихНастроекНаСервере",	Ложь);
	События.Вставить("ПередЗаполнениемПанелиБыстрыхНастроек",			Ложь);
	События.Вставить("ПослеЗаполненияПанелиБыстрыхНастроек",			Ложь);
	События.Вставить("ПриОпределенииПараметровВыбора",					Ложь);
	События.Вставить("ПриОпределенииИспользуемыхТаблиц",				Ложь);
	События.Вставить("ПриОпределенииСвойствЭлементовФормыНастроек",		Ложь);
	События.Вставить("ПриОпределенииОсновныхПолей",						Ложь);

	Настройки.Вставить("События",										События);

	Возврат Настройки;
КонецФункции

Функция О_ЗагрузитьНастройки(КомпоновщикНастроек, Настройки, ПользовательскиеНастройки = Неопределено, ФиксированныеНастройки = Неопределено) Экспорт
	НастройкиЗагружены = (ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") И Настройки <> КомпоновщикНастроек.Настройки);

	Если НастройкиЗагружены Тогда
		Если ТипЗнч(ПользовательскиеНастройки) <> Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
			ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
		КонецЕсли;

		Если ТипЗнч(ФиксированныеНастройки) <> Тип("НастройкиКомпоновкиДанных") Тогда
			ФиксированныеНастройки = КомпоновщикНастроек.ФиксированныеНастройки;
		КонецЕсли;

		ДоступныеЗначения = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(КомпоновщикНастроек.Настройки.ДополнительныеСвойства, "ДоступныеЗначения");

		Если ДоступныеЗначения <> Неопределено Тогда
			Настройки.ДополнительныеСвойства.Вставить("ДоступныеЗначения", ДоступныеЗначения);
		КонецЕсли;

		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	КонецЕсли;

	Если ТипЗнч(ПользовательскиеНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") И ПользовательскиеНастройки <> КомпоновщикНастроек.ПользовательскиеНастройки Тогда
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
	КонецЕсли;

	Если ТипЗнч(ФиксированныеНастройки) = Тип("НастройкиКомпоновкиДанных") И ФиксированныеНастройки <> КомпоновщикНастроек.ФиксированныеНастройки Тогда
		КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(ФиксированныеНастройки);
	КонецЕсли;

	Возврат НастройкиЗагружены;
КонецФункции

Функция О_ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки, Идентификатор, Иерархия = Неопределено, ПользовательскиеНастройки = Неопределено) Экспорт
	Если Иерархия = Неопределено И ТипЗнч(ПользовательскиеНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда

		НайденныеЭлементы = ПользовательскиеНастройки.ПолучитьОсновныеНастройкиПоИдентификаторуПользовательскойНастройки(Идентификатор);

		Если НайденныеЭлементы.Количество() > 0 Тогда
			Возврат НайденныеЭлементы[0];
		КонецЕсли;
	КонецЕсли;

	Если Иерархия <> Неопределено Тогда
		Иерархия.Добавить(Настройки);
	КонецЕсли;

	ТипНастройки = ТипЗнч(Настройки);

	Если ТипНастройки <> Тип("НастройкиКомпоновкиДанных") Тогда
		Если Настройки.ИдентификаторПользовательскойНастройки = Идентификатор Тогда
			Возврат Настройки;
		ИначеЕсли ТипНастройки = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			Возврат О_ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Настройки, Идентификатор, Иерархия);
		ИначеЕсли ТипНастройки = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") ИЛИ ТипНастройки = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") ИЛИ ТипНастройки = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
			Для Каждого ВложенныйЭлемент Из Настройки Цикл
				РезультатПоиска = О_ПолучитьОбъектПоПользовательскомуИдентификатору(ВложенныйЭлемент, Идентификатор, Иерархия);
				Если РезультатПоиска <> Неопределено Тогда
					Возврат РезультатПоиска;
				КонецЕсли;
			КонецЦикла;

			Если Иерархия <> Неопределено Тогда
				Иерархия.Удалить(Иерархия.ВГраница());
			КонецЕсли;

			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	Если Настройки.Выбор.ИдентификаторПользовательскойНастройки = Идентификатор Тогда
		Возврат Настройки.Выбор;
	ИначеЕсли Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = Идентификатор Тогда
		Возврат Настройки.УсловноеОформление;
	КонецЕсли;

	Если ТипНастройки <> Тип("ТаблицаКомпоновкиДанных") И ТипНастройки <> Тип("ДиаграммаКомпоновкиДанных") Тогда
		Если Настройки.Отбор.ИдентификаторПользовательскойНастройки = Идентификатор Тогда
			Возврат Настройки.Отбор;
		ИначеЕсли Настройки.Порядок.ИдентификаторПользовательскойНастройки = Идентификатор Тогда
			Возврат Настройки.Порядок;
		КонецЕсли;
	КонецЕсли;

	Если ТипНастройки = Тип("НастройкиКомпоновкиДанных") Тогда
		РезультатПоиска = О_НайтиЭлементНастройки(Настройки.ПараметрыДанных, Идентификатор);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЕсли;

	Если ТипНастройки <> Тип("ТаблицаКомпоновкиДанных") И ТипНастройки <> Тип("ДиаграммаКомпоновкиДанных") Тогда
		РезультатПоиска = О_НайтиЭлементНастройки(Настройки.Отбор, Идентификатор);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЕсли;

	РезультатПоиска = О_НайтиЭлементНастройки(Настройки.УсловноеОформление, Идентификатор);
	Если РезультатПоиска <> Неопределено Тогда
		Возврат РезультатПоиска;
	КонецЕсли;

	Если ТипНастройки = Тип("ТаблицаКомпоновкиДанных") Тогда
		РезультатПоиска = О_ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Строки, Идентификатор, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;

		РезультатПоиска = О_ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Колонки, Идентификатор, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	ИначеЕсли ТипНастройки = Тип("ДиаграммаКомпоновкиДанных") Тогда
		РезультатПоиска = О_ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Точки, Идентификатор, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;

		РезультатПоиска = О_ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Серии, Идентификатор, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	Иначе
		РезультатПоиска = О_ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Структура, Идентификатор, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЕсли;

	Если Иерархия <> Неопределено Тогда
		Иерархия.Удалить(Иерархия.ВГраница());
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

Функция О_НайтиЭлементНастройки(ЭлементНастройки, ИдентификаторПользовательскойНастройки)
	// Поиск элемента с заданным значением свойства ИдентификаторПользовательскойНастройки (ИПН).

	Группы = Новый Массив;
	Группы.Добавить(ЭлементНастройки.Элементы);
	Индекс = 0;

	Пока Индекс < Группы.Количество() Цикл
		КоллекцияЭлементов	= Группы[Индекс];
		Индекс				= Индекс + 1;
		Для Каждого ПодчиненныйЭлемент Из КоллекцияЭлементов Цикл
			Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
				// Не содержит ИПН; Коллекция вложенных элементов не содержит ИПН.
			ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
				// Не содержит ИПН; Коллекция вложенных элементов может содержать ИПН.
				Группы.Добавить(ПодчиненныйЭлемент.ЗначенияВложенныхПараметров);
			ИначеЕсли ПодчиненныйЭлемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
				// Найден нужный элемент.
				Возврат ПодчиненныйЭлемент;
			Иначе
				// Содержит ИПН; Коллекция вложенных элементов может содержать ИПН.
				Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					Группы.Добавить(ПодчиненныйЭлемент.Элементы);
				ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					Группы.Добавить(ПодчиненныйЭлемент.ЗначенияВложенныхПараметров);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

Функция О_НайтиДоступнуюНастройку(Настройки, ЭлементНастройки) Экспорт
	Тип = ТипЗнч(ЭлементНастройки);
	Если Тип = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		ЭлементОтбора = ЭлементНастройки;

		Если ЗначениеЗаполнено(ЭлементНастройки.ИдентификаторПользовательскойНастройки) Тогда
			ЭлементОтбора = О_ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки, ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		КонецЕсли;

		Возврат О_НайтиДоступноеПолеКД(Настройки, ЭлементОтбора.ЛевоеЗначение);
	ИначеЕсли Тип = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Возврат О_НайтиДоступныйПараметрКД(Настройки, ЭлементНастройки.Параметр);
	ИначеЕсли Тип = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат Настройки.ДоступныеОбъекты.Элементы.Найти(ЭлементНастройки.ИдентификаторОбъекта);
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

Функция О_НайтиДоступноеПолеКД(НастройкиКД, ПолеКД)
	Если ПолеКД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ТипЗнч(НастройкиКД) = Тип("ГруппировкаКомпоновкиДанных") Или ТипЗнч(НастройкиКД) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Или ТипЗнч(НастройкиКД) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		ДоступнаяНастройка = НастройкиКД.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
	Иначе
		ДоступнаяНастройка = НастройкиКД.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
	КонецЕсли;

	Если ДоступнаяНастройка <> Неопределено Тогда
		Возврат ДоступнаяНастройка;
	КонецЕсли;

	МассивСтруктур = Новый Массив;
	МассивСтруктур.Добавить(НастройкиКД.Структура);
	Пока МассивСтруктур.Количество() > 0 Цикл
		СтруктураКД = МассивСтруктур[0];
		МассивСтруктур.Удалить(0);

		Для Каждого ЭлементСтруктурыКД Из СтруктураКД Цикл
			Если ТипЗнч(ЭлементСтруктурыКД) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				ДоступнаяНастройка = ЭлементСтруктурыКД.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
				Если ДоступнаяНастройка <> Неопределено Тогда
					Возврат ДоступнаяНастройка;
				КонецЕсли;

				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Настройки.Структура);
			ИначеЕсли ТипЗнч(ЭлементСтруктурыКД) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				ДоступнаяНастройка = ЭлементСтруктурыКД.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
				Если ДоступнаяНастройка <> Неопределено Тогда
					Возврат ДоступнаяНастройка;
				КонецЕсли;

				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Структура);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

Функция О_НайтиДоступныйПараметрКД(НастройкиКД, ПараметрКД)
	Если ПараметрКД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если НастройкиКД.ПараметрыДанных.ДоступныеПараметры <> Неопределено Тогда
		// Настройки, которым принадлежат параметры данных, связаны с источником доступных настроек.
		ДоступнаяНастройка = НастройкиКД.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(ПараметрКД);
		Если ДоступнаяНастройка <> Неопределено Тогда
			Возврат ДоступнаяНастройка;
		КонецЕсли;
	КонецЕсли;

	МассивСтруктур = Новый Массив;
	МассивСтруктур.Добавить(НастройкиКД.Структура);
	Пока МассивСтруктур.Количество() > 0 Цикл
		СтруктураКД = МассивСтруктур[0];
		МассивСтруктур.Удалить(0);

		Для Каждого ЭлементСтруктурыКД Из СтруктураКД Цикл
			Если ТипЗнч(ЭлементСтруктурыКД) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				Если ЭлементСтруктурыКД.Настройки.ПараметрыДанных.ДоступныеПараметры <> Неопределено Тогда
					// Настройки, которым принадлежат параметры данных, связаны с источником доступных настроек.
					ДоступнаяНастройка = ЭлементСтруктурыКД.Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(ПараметрКД);
					Если ДоступнаяНастройка <> Неопределено Тогда
						Возврат ДоступнаяНастройка;
					КонецЕсли;
				КонецЕсли;

				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Настройки.Структура);
			ИначеЕсли ТипЗнч(ЭлементСтруктурыКД) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Структура);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

Функция О_КлючУникальности(ПолноеИмяОтчета, КлючВарианта) Экспорт
	Результат = ПолноеИмяОтчета;
	Если ЗначениеЗаполнено(КлючВарианта) Тогда
		Результат = Результат + "/КлючВарианта." + КлючВарианта;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция О_НайтиСтрокиТаблицы(ТаблицаРеквизит, ДанныеСтроки) Экспорт
	Если ТипЗнч(ТаблицаРеквизит) = Тип("ДанныеФормыКоллекция") Тогда // Таблица значений.
		Возврат ТаблицаРеквизит.НайтиСтроки(ДанныеСтроки);
	ИначеЕсли ТипЗнч(ТаблицаРеквизит) = Тип("ДанныеФормыДерево") Тогда // Дерево значений.
		Возврат О_НайтиРекурсивно(ТаблицаРеквизит.ПолучитьЭлементы(), ДанныеСтроки);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция О_НайтиРекурсивно(НаборСтрок, ДанныеСтроки, Найденные = Неопределено)
	Если Найденные = Неопределено Тогда
		Найденные = Новый Массив;
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из НаборСтрок Цикл
		ЗначенияСовпадают = Истина;
		Для Каждого КлючИЗначение Из ДанныеСтроки Цикл
			Если СтрокаТаблицы[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
				ЗначенияСовпадают = Ложь;

				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначенияСовпадают Тогда
			Найденные.Добавить(СтрокаТаблицы);
		КонецЕсли;
		О_НайтиРекурсивно(СтрокаТаблицы.ПолучитьЭлементы(), ДанныеСтроки, Найденные);
	КонецЦикла;

	Возврат Найденные;
КонецФункции

Функция О_ТипНастройкиСтрокой(Тип) Экспорт
	Если Тип = Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат "Настройки";
	ИначеЕсли Тип = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат "НастройкиВложенногоОбъекта";
	ИначеЕсли Тип = Тип("ОтборКомпоновкиДанных") Тогда
		Возврат "Отбор";
	ИначеЕсли Тип = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Возврат "ЭлементОтбора";
	ИначеЕсли Тип = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		Возврат "ГруппаЭлементовОтбора";
	ИначеЕсли Тип = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Возврат "ЗначениеПараметраНастроек";
	ИначеЕсли Тип = Тип("ГруппировкаКомпоновкиДанных") Тогда
		Возврат "Группировка";
	ИначеЕсли Тип = Тип("ПоляГруппировкиКомпоновкиДанных") Тогда
		Возврат "ПоляГруппировки";
	ИначеЕсли Тип = Тип("КоллекцияПолейГруппировкиКомпоновкиДанных") Тогда
		Возврат "КоллекцияПолейГруппировки";
	ИначеЕсли Тип = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
		Возврат "ПолеГруппировки";
	ИначеЕсли Тип = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
		Возврат "АвтоПолеГруппировки";
	ИначеЕсли Тип = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
		Возврат "ВыбранныеПоля";
	ИначеЕсли Тип = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
		Возврат "ВыбранноеПоле";
	ИначеЕсли Тип = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
		Возврат "ГруппаВыбранныхПолей";
	ИначеЕсли Тип = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
		Возврат "АвтоВыбранноеПоле";
	ИначеЕсли Тип = Тип("ПорядокКомпоновкиДанных") Тогда
		Возврат "Порядок";
	ИначеЕсли Тип = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
		Возврат "ЭлементПорядка";
	ИначеЕсли Тип = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
		Возврат "АвтоЭлементПорядка";
	ИначеЕсли Тип = Тип("УсловноеОформлениеКомпоновкиДанных") Тогда
		Возврат "УсловноеОформление";
	ИначеЕсли Тип = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда
		Возврат "ЭлементУсловногоОформления";
	ИначеЕсли Тип = Тип("СтруктураНастроекКомпоновкиДанных") Тогда
		Возврат "СтруктураНастроек";
	ИначеЕсли Тип = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
		Возврат "КоллекцияЭлементовСтруктурыНастроек";
	ИначеЕсли Тип = Тип("ТаблицаКомпоновкиДанных") Тогда
		Возврат "Таблица";
	ИначеЕсли Тип = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		Возврат "ГруппировкаТаблицы";
	ИначеЕсли Тип = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
		Возврат "КоллекцияЭлементовСтруктурыТаблицы";
	ИначеЕсли Тип = Тип("ДиаграммаКомпоновкиДанных") Тогда
		Возврат "Диаграмма";
	ИначеЕсли Тип = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		Возврат "ГруппировкаДиаграммы";
	ИначеЕсли Тип = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		Возврат "КоллекцияЭлементовСтруктурыДиаграммы";
	ИначеЕсли Тип = Тип("ЗначенияПараметровДанныхКомпоновкиДанных") Тогда
		Возврат "ЗначенияПараметровДанных";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция О_ИндексКартинки(Тип, Состояние = Неопределено) Экспорт
	Если Тип = "Группа" Тогда
		Индекс = 1;
	ИначеЕсли Тип = "Элемент" Тогда
		Индекс = 4;
	ИначеЕсли Тип = "Группировка" Или Тип = "ГруппировкаТаблицы" Или Тип = "ГруппировкаДиаграммы" Тогда
		Индекс = 7;
	ИначеЕсли Тип = "Таблица" Тогда
		Индекс = 10;
	ИначеЕсли Тип = "Диаграмма" Тогда
		Индекс = 11;
	ИначеЕсли Тип = "НастройкиВложенногоОбъекта" Тогда
		Индекс = 12;
	ИначеЕсли Тип = "ПараметрыДанных" Тогда
		Индекс = 14;
	ИначеЕсли Тип = "ПараметрДанных" Тогда
		Индекс = 15;
	ИначеЕсли Тип = "Отборы" Тогда
		Индекс = 16;
	ИначеЕсли Тип = "ЭлементОтбора" Тогда
		Индекс = 17;
	ИначеЕсли Тип = "ВыбранныеПоля" Тогда
		Индекс = 18;
	ИначеЕсли Тип = "Сортировки" Тогда
		Индекс = 19;
	ИначеЕсли Тип = "УсловноеОформление" Тогда
		Индекс = 20;
	ИначеЕсли Тип = "Настройки" Тогда
		Индекс = 21;
	ИначеЕсли Тип = "Структура" Тогда
		Индекс = 22;
	ИначеЕсли Тип = "Ресурс" Тогда
		Индекс = 23;
	ИначеЕсли Тип = "Предупреждение" Тогда
		Индекс = 24;
	ИначеЕсли Тип = "Ошибка" Тогда
		Индекс = 25;
	Иначе
		Индекс = -2;
	КонецЕсли;

	Если Состояние = "ПометкаУдаления" Тогда
		Индекс = Индекс + 1;
	ИначеЕсли Состояние = "Предопределенный" Тогда
		Индекс = Индекс + 2;
	КонецЕсли;

	Возврат Индекс;
КонецФункции

Функция О_ЭтоВидСравненияСписка(ВидСравнения) Экспорт
	ВидыСравнений = Новый Массив;
	ВидыСравнений.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
	ВидыСравнений.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке);
	ВидыСравнений.Добавить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
	ВидыСравнений.Добавить(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии);

	Возврат ВидыСравнений.Найти(ВидСравнения) <> Неопределено;
КонецФункции

Функция О_ЗначенияСписком(Значения, ТолькоЗаполненные = Ложь) Экспорт
	Если ТипЗнч(Значения) = Тип("СписокЗначений") Тогда
		Список = Значения;
	Иначе
		Список = Новый СписокЗначений;
		Если ТипЗнч(Значения) = Тип("Массив") Тогда
			Список.ЗагрузитьЗначения(Значения);
		ИначеЕсли ЗначениеЗаполнено(Значения) Тогда
			Список.Добавить(Значения);
		КонецЕсли;
	КонецЕсли;

	Если Не ТолькоЗаполненные Тогда
		Возврат Список;
	КонецЕсли;

	Индекс = Список.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Элемент = Список[Индекс];
		Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
			Список.Удалить(Элемент);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;

	Возврат Список;
КонецФункции

Функция О_ЗначениеТипаГруппыИЭлементы(ИсходноеЗначение, Условие = Неопределено) Экспорт
	Если Условие <> Неопределено Тогда
		Если Условие = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Или Условие = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
			Если ИсходноеЗначение = ГруппыИЭлементы.Группы Или ИсходноеЗначение = ИспользованиеГруппИЭлементов.Группы Тогда
				Возврат ГруппыИЭлементы.Группы;
			Иначе
				Возврат ГруппыИЭлементы.ГруппыИЭлементы;
			КонецЕсли;
		ИначеЕсли Условие = ВидСравненияКомпоновкиДанных.ВИерархии Или Условие = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
			Возврат ГруппыИЭлементы.Группы;
		КонецЕсли;
	КонецЕсли;

	Если ТипЗнч(ИсходноеЗначение) = Тип("ГруппыИЭлементы") Тогда
		Возврат ИсходноеЗначение;
	ИначеЕсли ИсходноеЗначение = ИспользованиеГруппИЭлементов.Элементы Тогда
		Возврат ГруппыИЭлементы.Элементы;
	ИначеЕсли ИсходноеЗначение = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
		Возврат ГруппыИЭлементы.ГруппыИЭлементы;
	ИначеЕсли ИсходноеЗначение = ИспользованиеГруппИЭлементов.Группы Тогда
		Возврат ГруппыИЭлементы.Группы;
	КонецЕсли;

	Возврат ГруппыИЭлементы.Авто;
КонецФункции

Функция О_ПараметрыВыбора(Настройки, ПользовательскиеНастройки, ЭлементНастройки, РежимИзмененияВарианта = Ложь) Экспорт
	ПараметрыВыбора = Новый Массив;

	ОписаниеЭлементаНастройки = О_НайтиДоступнуюНастройку(Настройки, ЭлементНастройки);
	Если ОписаниеЭлементаНастройки = Неопределено Тогда
		Возврат Новый ФиксированныйМассив(ПараметрыВыбора);
	КонецЕсли;

	Параметры = ОписаниеЭлементаНастройки.ПолучитьПараметрыВыбора(); // ПараметрыВыбораКомпоновкиДанных
	Для Каждого Параметр Из Параметры Цикл
		Если ЗначениеЗаполнено(Параметр.Имя) Тогда
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора(Параметр.Имя, Параметр.Значение));
		КонецЕсли;
	КонецЦикла;

	Параметры = ОписаниеЭлементаНастройки.ПолучитьСвязиПараметровВыбора(); // СвязиПараметровВыбораКомпоновкиДанных
	Для Каждого Параметр Из Параметры Цикл
		Если Не ЗначениеЗаполнено(Параметр.Имя) Тогда
			Продолжить;
		КонецЕсли;

		Значение = О_ЗначениеПараметраВыбора(Настройки, ПользовательскиеНастройки, Параметр.Поле, РежимИзмененияВарианта);
		Если ЗначениеЗаполнено(Значение) Тогда
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора(Параметр.Имя, Значение));
		КонецЕсли;
	КонецЦикла;

	Возврат Новый ФиксированныйМассив(ПараметрыВыбора);
КонецФункции

Функция О_ЗначениеПараметраВыбора(Настройки, ПользовательскиеНастройки, Поле, РежимИзмененияВарианта)
	Значение = О_ЗначениеПараметраДанныхПоПолю(Настройки, ПользовательскиеНастройки, Поле, РежимИзмененияВарианта);

	Если Значение = Неопределено Тогда
		ЭлементыОтбора = Настройки.Отбор.Элементы;
		О_НайтиЗначенияПоляЭлементовОтбора(Поле, ЭлементыОтбора, ПользовательскиеНастройки, Значение, РежимИзмененияВарианта);
	КонецЕсли;

	Если ТипЗнч(Значение) = Тип("СтандартнаяДатаНачала") Тогда
		Возврат Значение.Дата;
	КонецЕсли;

	Если ТипЗнч(Значение) = Тип("СтандартныйПериод") Тогда
		Возврат Значение.ДатаОкончания;
	КонецЕсли;

	Возврат Значение;
КонецФункции

Функция О_ЗначениеПараметраДанныхПоПолю(Настройки, ПользовательскиеНастройки, Поле, РежимИзмененияВарианта)
	Если ТипЗнч(Настройки) <> Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат Неопределено;
	КонецЕсли;

	ЭлементыНастроек = Настройки.ПараметрыДанных.Элементы;
	Для Каждого Элемент Из ЭлементыНастроек Цикл
		ЭлементПользовательский	= ПользовательскиеНастройки.Найти(Элемент.ИдентификаторПользовательскойНастройки);
		ЭлементАнализируемый	= ?(РежимИзмененияВарианта Или ЭлементПользовательский = Неопределено, Элемент, ЭлементПользовательский);

		Поля = Новый Массив;
		Поля.Добавить(Новый ПолеКомпоновкиДанных(Строка(Элемент.Параметр)));
		Поля.Добавить(Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Строка(Элемент.Параметр)));

		Если ЭлементАнализируемый.Использование И (Поля[0] = Поле Или Поля[1] = Поле) И ЗначениеЗаполнено(ЭлементАнализируемый.Значение) И ТипЗнч(ЭлементАнализируемый.Значение) <> Тип("СписокЗначений") Тогда
			Возврат ЭлементАнализируемый.Значение;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

Процедура О_НайтиЗначенияПоляЭлементовОтбора(Поле, ЭлементыОтбора, ПользовательскиеНастройки, Значение, РежимИзмененияВарианта)
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Элемент Из ЭлементыОтбора Цикл
		ЭлементПользовательский	= ПользовательскиеНастройки.Найти(Элемент.ИдентификаторПользовательскойНастройки);
		ЭлементАнализируемый	= ?(РежимИзмененияВарианта Или ЭлементПользовательский = Неопределено, Элемент, ЭлементПользовательский);

		Если ТипЗнч(ЭлементАнализируемый) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			О_НайтиЗначенияПоляЭлементовОтбора(Поле, Элемент.Элементы, ПользовательскиеНастройки, Значение, РежимИзмененияВарианта);
		Иначе
			Если Элемент.ЛевоеЗначение = Поле И ЭлементАнализируемый.Использование И ЭлементАнализируемый.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно И ЗначениеЗаполнено(ЭлементАнализируемый.ПравоеЗначение) Тогда
				Значение = ЭлементАнализируемый.ПравоеЗначение;

				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция О_СкопироватьРекурсивно(Знач Узел, Знач ЧтоКопировать, Знач КудаВставить, Знач Индекс, Соответствие = Неопределено, БезСтруктуры = Ложь) Экспорт
	Если Соответствие = Неопределено Тогда
		Соответствие = Новый Соответствие;
	КонецЕсли;

	ТипЭлемента				= ТипЗнч(ЧтоКопировать);
	ПараметрыКопирования	= О_ПараметрыКопирования(ТипЭлемента, КудаВставить, БезСтруктуры);

	Если ПараметрыКопирования.НужноУказыватьТипЭлемента Тогда
		Если Индекс = Неопределено Тогда
			НоваяСтрока = КудаВставить.Добавить(ТипЭлемента);
		Иначе
			НоваяСтрока = КудаВставить.Вставить(Индекс, ТипЭлемента);
		КонецЕсли;
	Иначе
		Если Индекс = Неопределено Тогда
			НоваяСтрока = КудаВставить.Добавить();
		Иначе
			НоваяСтрока = КудаВставить.Вставить(Индекс);
		КонецЕсли;
	КонецЕсли;

	О_ЗаполнитьСвойстваРекурсивно(Узел, НоваяСтрока, ЧтоКопировать, Соответствие, ПараметрыКопирования);

	Возврат НоваяСтрока;
КонецФункции

Функция О_ПараметрыКопирования(ТипЭлемента, Коллекция, БезСтруктуры = Ложь)
	Результат = Новый Структура;
	Результат.Вставить("НужноУказыватьТипЭлемента",			Ложь);
	Результат.Вставить("ИсключаяСвойства",					Неопределено);
	Результат.Вставить("ЕстьНастройки",						Ложь);
	Результат.Вставить("ЕстьЭлементы",						Ложь);
	Результат.Вставить("ЕстьВыбор",							Ложь);
	Результат.Вставить("ЕстьОтбор",							Ложь);
	Результат.Вставить("ЕстьПараметрыВывода",				Ложь);
	Результат.Вставить("ЕстьПараметрыДанных",				Ложь);
	Результат.Вставить("ЕстьПользовательскиеПоля",			Ложь);
	Результат.Вставить("ЕстьПоляГруппировки",				Ложь);
	Результат.Вставить("ЕстьПорядок",						Ложь);
	Результат.Вставить("ЕстьСтруктура",						Ложь);
	Результат.Вставить("ЕстьУсловноеОформление",			Ложь);
	Результат.Вставить("ЕстьКолонкиИСтроки",				Ложь);
	Результат.Вставить("ЕстьСерииИТочки",					Ложь);
	Результат.Вставить("ЕстьЗначенияВложенныхПараметров",	Ложь);
	Результат.Вставить("ЕстьПоляИОформление",				Ложь);

	Если ТипЭлемента = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Или ТипЭлемента = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		Результат.НужноУказыватьТипЭлемента	= Истина;
		Результат.ИсключаяСвойства			= "Родитель";
		Результат.ЕстьЭлементы				= Истина;
	ИначеЕсли ТипЭлемента = Тип("ВыбранноеПолеКомпоновкиДанных") Или ТипЭлемента = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Или ТипЭлемента = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Результат.ИсключаяСвойства			= "Родитель";
		Результат.НужноУказыватьТипЭлемента	= Истина;
	ИначеЕсли ТипЭлемента = Тип("ЗначениеПараметраКомпоновкиДанных") Или ТипЭлемента = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Результат.ИсключаяСвойства = "Родитель";
	ИначеЕсли ТипЭлемента = Тип("ПолеГруппировкиКомпоновкиДанных") Или ТипЭлемента = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Или ТипЭлемента = Тип("ЭлементПорядкаКомпоновкиДанных") Или ТипЭлемента = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
		Результат.НужноУказыватьТипЭлемента = Истина;
	ИначеЕсли ТипЭлемента = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда
		Результат.ЕстьОтбор					= Истина;
		Результат.ЕстьПоляИОформление		= Истина;
	ИначеЕсли ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных") Или ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных") Или ТипЭлемента = Тип("ГруппировкаДиаграммыКомпоновкиДанных")Тогда
		Результат.ИсключаяСвойства = "Родитель";
		ТипКоллекции = ТипЗнч(Коллекция);
		Если ТипКоллекции = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
			Результат.НужноУказыватьТипЭлемента	= Истина;
			ТипЭлемента							= Тип("ГруппировкаКомпоновкиДанных"); // Подмена типа на поддерживаемый.
		КонецЕсли;

		Результат.ЕстьВыбор					= Истина;
		Результат.ЕстьОтбор					= Истина;
		Результат.ЕстьПараметрыВывода		= Истина;
		Результат.ЕстьПоляГруппировки		= Истина;
		Результат.ЕстьПорядок				= Истина;
		Результат.ЕстьСтруктура				= Не БезСтруктуры;
		Результат.ЕстьУсловноеОформление	= Истина;
	ИначеЕсли ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") Тогда
		Результат.ИсключаяСвойства			= "Родитель";
		Результат.НужноУказыватьТипЭлемента	= Истина;

		Результат.ЕстьВыбор					= Истина;
		Результат.ЕстьКолонкиИСтроки		= Истина;
		Результат.ЕстьПараметрыВывода		= Истина;
	ИначеЕсли ТипЭлемента = Тип("ДиаграммаКомпоновкиДанных") Тогда
		Результат.ИсключаяСвойства = "Родитель";
		Результат.НужноУказыватьТипЭлемента = Истина;

		Результат.ЕстьВыбор					= Истина;
		Результат.ЕстьСерииИТочки			= Истина;
		Результат.ЕстьПараметрыВывода		= Истина;
	ИначеЕсли ТипЭлемента = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Результат.ИсключаяСвойства			= "Родитель";
		Результат.НужноУказыватьТипЭлемента	= Истина;
		Результат.ЕстьНастройки				= Истина;

		Результат.ЕстьВыбор					= Истина;
		Результат.ЕстьОтбор					= Истина;
		Результат.ЕстьПараметрыВывода		= Истина;
		Результат.ЕстьПараметрыДанных		= Истина;
		Результат.ЕстьПользовательскиеПоля	= Истина;
		Результат.ЕстьПорядок				= Истина;
		Результат.ЕстьСтруктура				= Не БезСтруктуры;
		Результат.ЕстьУсловноеОформление	= Истина;
	ИначеЕсли ТипЭлемента <> Тип("ДанныеФормыЭлементДерева") Тогда
		ВызватьИсключение СтрШаблон("Копирование элементов ""%1"" не поддерживается", ТипЭлемента);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция О_ЗаполнитьСвойстваРекурсивно(Узел, ЧтоЗаполнить, ЧемЗаполнить, Соответствие = Неопределено, ПараметрыКопирования = Неопределено, БезСтруктуры = Ложь) Экспорт
	Если Соответствие = Неопределено Тогда
		Соответствие = Новый Соответствие;
	КонецЕсли;

	Если ПараметрыКопирования = Неопределено Тогда
		ПараметрыКопирования = О_ПараметрыКопирования(ТипЗнч(ЧемЗаполнить), Неопределено, БезСтруктуры);
	КонецЕсли;

	Если ПараметрыКопирования.ИсключаяСвойства <> "*" Тогда
		ЗаполнитьЗначенияСвойств(ЧтоЗаполнить, ЧемЗаполнить, , ПараметрыКопирования.ИсключаяСвойства);
	КонецЕсли;

	ЭтоДанныеФормыЭлементДерева = ТипЗнч(ЧемЗаполнить) = Тип("ДанныеФормыЭлементДерева");
	Если ЭтоДанныеФормыЭлементДерева Тогда
		Соответствие.Вставить(ЧемЗаполнить, ЧтоЗаполнить);

		КоллекцияВложенных = ?(ЭтоДанныеФормыЭлементДерева, ЧемЗаполнить.ПолучитьЭлементы(), ЧемЗаполнить.Строки);
		Если КоллекцияВложенных.Количество() > 0 Тогда
			НоваяКоллекцияВложенных = ?(ЭтоДанныеФормыЭлементДерева, ЧтоЗаполнить.ПолучитьЭлементы(), ЧтоЗаполнить.Строки);
			Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
				О_СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
			КонецЦикла;
		КонецЕсли;

		Возврат ЧтоЗаполнить;
	КонецЕсли;

	СтарыйИдентификатор	= Узел.ПолучитьИдентификаторПоОбъекту(ЧемЗаполнить);
	НовыйИдентификатор	= Узел.ПолучитьИдентификаторПоОбъекту(ЧтоЗаполнить);
	Соответствие.Вставить(СтарыйИдентификатор, НовыйИдентификатор);

	Если ПараметрыКопирования.ЕстьНастройки Тогда
		ЧтоЗаполнить.УстановитьИдентификатор(ЧемЗаполнить.ИдентификаторОбъекта);
		ЧтоЗаполнить	= ЧтоЗаполнить.Настройки; // НастройкиКомпоновкиДанных, ВыбранныеПоляКомпоновкиДанных, ОтборКомпоновкиДанных, ГруппировкаКомпоновкиДанных, ТаблицаКомпоновкиДанных, ДиаграммаКомпоновкиДанных, ЭлементУсловногоОформленияКомпоновкиДанных
		ЧемЗаполнить	= ЧемЗаполнить.Настройки; // НастройкиКомпоновкиДанных, ВыбранныеПоляКомпоновкиДанных, ОтборКомпоновкиДанных, ГруппировкаКомпоновкиДанных, ТаблицаКомпоновкиДанных, ДиаграммаКомпоновкиДанных, ЭлементУсловногоОформленияКомпоновкиДанных
	КонецЕсли;

	Если ПараметрыКопирования.ЕстьЭлементы Тогда
		КоллекцияВложенных = ЧемЗаполнить.Элементы; // КоллекцияВыбранныхПолейКомпоновкиДанных, КоллекцияЭлементовОтбораКомпоновкиДанных
		Если КоллекцияВложенных.Количество() > 0 Тогда
			НоваяКоллекцияВложенных = ЧтоЗаполнить.Элементы;
			Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
				О_СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыКопирования.ЕстьВыбор Тогда
		//   Выбор (ВыбранныеПоляКомпоновкиДанных).
		ЗаполнитьЗначенияСвойств(ЧтоЗаполнить.Выбор, ЧемЗаполнить.Выбор, , "ДоступныеПоляВыбора, Элементы");
		//   Выбор.Элементы (КоллекцияВыбранныхПолейКомпоновкиДанных).
		КоллекцияВложенных = ЧемЗаполнить.Выбор.Элементы;
		Если КоллекцияВложенных.Количество() > 0 Тогда
			НоваяКоллекцияВложенных = ЧтоЗаполнить.Выбор.Элементы;
			Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
				О_СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыКопирования.ЕстьОтбор Тогда
		//   Отбор (ОтборКомпоновкиДанных).
		ЗаполнитьЗначенияСвойств(ЧтоЗаполнить.Отбор, ЧемЗаполнить.Отбор, , "ДоступныеПоляОтбора, Элементы");
		//   Отбор.Элементы (КоллекцияЭлементовОтбораКомпоновкиДанных).
		КоллекцияВложенных = ЧемЗаполнить.Отбор.Элементы;
		Если КоллекцияВложенных.Количество() > 0 Тогда
			НоваяКоллекцияВложенных = ЧтоЗаполнить.Отбор.Элементы;
			Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
				О_СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Новый Соответствие);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыКопирования.ЕстьПараметрыВывода Тогда
		//   ПараметрыВывода (ЗначенияПараметровВыводаКомпоновкиДанных,
		//       ЗначенияПараметровВыводаГруппировкиКомпоновкиДанных,
		//       ЗначенияПараметровВыводаГруппировкиТаблицыКомпоновкиДанных,
		//       ЗначенияПараметровВыводаГруппировкиДиаграммыКомпоновкиДанных,
		//       ЗначенияПараметровВыводаТаблицыКомпоновкиДанных,
		//       ЗначенияПараметровВыводаДиаграммыКомпоновкиДанных).
		//   ПараметрыВывода.Элементы (КоллекцияЗначенийПараметровКомпоновкиДанных).
		КоллекцияВложенных = ЧемЗаполнить.ПараметрыВывода.Элементы;
		Если КоллекцияВложенных.Количество() > 0 Тогда
			УзелВложенных = ЧтоЗаполнить.ПараметрыВывода;
			Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
				ЗначениеПараметраКД = УзелВложенных.НайтиЗначениеПараметра(ПодчиненнаяСтрока.Параметр);
				Если ЗначениеПараметраКД <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ЗначениеПараметраКД, ПодчиненнаяСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыКопирования.ЕстьПараметрыДанных Тогда
		//   ПараметрыДанных (ЗначенияПараметровДанныхКомпоновкиДанных).
		//   ПараметрыДанных.Элементы (КоллекцияЗначенийПараметровКомпоновкиДанных).
		КоллекцияВложенных = ЧемЗаполнить.ПараметрыДанных.Элементы;
		Если КоллекцияВложенных.Количество() > 0 Тогда
			УзелВложенных = ЧтоЗаполнить.ПараметрыДанных;
			Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
				ЗначениеПараметраКД = УзелВложенных.НайтиЗначениеПараметра(ПодчиненнаяСтрока.Параметр);
				Если ЗначениеПараметраКД <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ЗначениеПараметраКД, ПодчиненнаяСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыКопирования.ЕстьПользовательскиеПоля Тогда
		//   ПользовательскиеПоля (ПользовательскиеПоляКомпоновкиДанных).
		//   ПользовательскиеПоля.Элементы (КоллекцияПользовательскихПолейКомпоновкиДанных).
		КоллекцияВложенных = ЧемЗаполнить.ПользовательскиеПоля.Элементы;
		Если КоллекцияВложенных.Количество() > 0 Тогда
			НоваяКоллекцияВложенных = ЧтоЗаполнить.ПользовательскиеПоля.Элементы;
			Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
				О_СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыКопирования.ЕстьПоляГруппировки Тогда
		//   ПоляГруппировки (ПоляГруппировкиКомпоновкиДанных).
		//   ПоляГруппировки.Элементы (КоллекцияПолейГруппировкиКомпоновкиДанных).
		КоллекцияВложенных = ЧемЗаполнить.ПоляГруппировки.Элементы;
		Если КоллекцияВложенных.Количество() > 0 Тогда
			НоваяКоллекцияВложенных = ЧтоЗаполнить.ПоляГруппировки.Элементы;
			Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
				О_СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Новый Соответствие);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыКопирования.ЕстьПорядок Тогда
		//   Порядок (ПорядокКомпоновкиДанных).
		ЗаполнитьЗначенияСвойств(ЧтоЗаполнить.Порядок, ЧемЗаполнить.Порядок, , "ДоступныеПоляПорядка, Элементы");
		//   Порядок.Элементы (КоллекцияЭлементовПорядкаКомпоновкиДанных).
		КоллекцияВложенных = ЧемЗаполнить.Порядок.Элементы;
		Если КоллекцияВложенных.Количество() > 0 Тогда
			НоваяКоллекцияВложенных = ЧтоЗаполнить.Порядок.Элементы;
			Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
				О_СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыКопирования.ЕстьСтруктура Тогда
		//   Структура (КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных,
		//       КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных,
		//       КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных).
		ЗаполнитьЗначенияСвойств(ЧтоЗаполнить.Структура, ЧемЗаполнить.Структура);
		КоллекцияВложенных = ЧемЗаполнить.Структура;
		Если КоллекцияВложенных.Количество() > 0 Тогда
			НоваяКоллекцияВложенных = ЧтоЗаполнить.Структура;
			Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
				О_СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыКопирования.ЕстьУсловноеОформление Тогда
		//   УсловноеОформление (УсловноеОформлениеКомпоновкиДанных).
		ЗаполнитьЗначенияСвойств(ЧтоЗаполнить.УсловноеОформление, ЧемЗаполнить.УсловноеОформление, , "ДоступныеПоляОтбора, ДоступныеПоляПолей, Элементы");
		//   УсловноеОформление.Элементы (КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных).
		КоллекцияВложенных = ЧемЗаполнить.УсловноеОформление.Элементы;
		Если КоллекцияВложенных.Количество() > 0 Тогда
			НоваяКоллекцияВложенных = ЧтоЗаполнить.УсловноеОформление.Элементы;
			Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
				О_СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыКопирования.ЕстьКолонкиИСтроки Тогда
		//   Колонки (КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных).
		КоллекцияВложенных = ЧемЗаполнить.Колонки;
		НоваяКоллекцияВложенных = ЧтоЗаполнить.Колонки;
		СтарыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(КоллекцияВложенных);
		НовыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(НоваяКоллекцияВложенных);
		Соответствие.Вставить(СтарыйИдентификатор, НовыйИдентификатор);
		Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
			О_СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
		КонецЦикла;
		//   Строки (КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных).
		КоллекцияВложенных = ЧемЗаполнить.Строки;
		НоваяКоллекцияВложенных = ЧтоЗаполнить.Строки;
		СтарыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(КоллекцияВложенных);
		НовыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(НоваяКоллекцияВложенных);
		Соответствие.Вставить(СтарыйИдентификатор, НовыйИдентификатор);
		Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
			О_СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
		КонецЦикла;
	КонецЕсли;

	Если ПараметрыКопирования.ЕстьСерииИТочки Тогда
		//   Серии (КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных).
		КоллекцияВложенных = ЧемЗаполнить.Серии;
		НоваяКоллекцияВложенных = ЧтоЗаполнить.Серии;
		СтарыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(КоллекцияВложенных);
		НовыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(НоваяКоллекцияВложенных);
		Соответствие.Вставить(СтарыйИдентификатор, НовыйИдентификатор);
		Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
			О_СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
		КонецЦикла;
		//   Точки (КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных).
		КоллекцияВложенных = ЧемЗаполнить.Точки;
		НоваяКоллекцияВложенных = ЧтоЗаполнить.Точки;
		СтарыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(КоллекцияВложенных);
		НовыйИдентификатор = Узел.ПолучитьИдентификаторПоОбъекту(НоваяКоллекцияВложенных);
		Соответствие.Вставить(СтарыйИдентификатор, НовыйИдентификатор);
		Для Каждого ПодчиненнаяСтрока Из КоллекцияВложенных Цикл
			О_СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, НоваяКоллекцияВложенных, Неопределено, Соответствие);
		КонецЦикла;
	КонецЕсли;

	Если ПараметрыКопирования.ЕстьЗначенияВложенныхПараметров Тогда
		//   ЗначенияВложенныхПараметров (КоллекцияЗначенийПараметровКомпоновкиДанных).
		Для Каждого ПодчиненнаяСтрока Из ЧемЗаполнить.ЗначенияВложенныхПараметров Цикл
			О_СкопироватьРекурсивно(Узел, ПодчиненнаяСтрока, ЧтоЗаполнить.ЗначенияВложенныхПараметров, Неопределено, Соответствие);
		КонецЦикла;
	КонецЕсли;

	Если ПараметрыКопирования.ЕстьПоляИОформление Тогда
		Для Каждого ОформляемоеПоле Из ЧемЗаполнить.Поля.Элементы Цикл
			ЗаполнитьЗначенияСвойств(ЧтоЗаполнить.Поля.Элементы.Добавить(), ОформляемоеПоле);
		КонецЦикла;
		Для Каждого Источник Из ЧемЗаполнить.Оформление.Элементы Цикл
			Приемник = ЧтоЗаполнить.Оформление.НайтиЗначениеПараметра(Источник.Параметр);
			Если Приемник <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Приемник, Источник, , "Родитель");
				Для Каждого ВложенныйИсточник Из Источник.ЗначенияВложенныхПараметров Цикл
					ВложенныйПриемник = ЧтоЗаполнить.Оформление.НайтиЗначениеПараметра(Источник.Параметр);
					Если ВложенныйПриемник <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(ВложенныйПриемник, ВложенныйИсточник, , "Родитель");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат ЧтоЗаполнить;
КонецФункции

Функция О_ДополнитьСписок(СписокПриемник, СписокИсточник, КонтролироватьТип = Неопределено, ДобавлятьНовые = Истина) Экспорт
	Если СписокПриемник = Неопределено Или СписокИсточник = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ЗаменятьСуществующие	= Истина;
	ЗаменятьПредставление	= ЗаменятьСуществующие И ДобавлятьНовые;

	Результат = Новый Структура;
	Результат.Вставить("Всего", 0);
	Результат.Вставить("Добавлено", 0);
	Результат.Вставить("Обновлено", 0);
	Результат.Вставить("Пропущено", 0);

	Если КонтролироватьТип = Неопределено Тогда
		КонтролироватьТип = (СписокПриемник.ТипЗначения <> СписокИсточник.ТипЗначения);
	КонецЕсли;
	Если КонтролироватьТип Тогда
		ОписаниеТиповПриемника = СписокПриемник.ТипЗначения;
	КонецЕсли;
	Для Каждого ЭлементИсточник Из СписокИсточник Цикл
		Результат.Всего	= Результат.Всего + 1;
		Значение		= ЭлементИсточник.Значение;
		Если КонтролироватьТип И Не ОписаниеТиповПриемника.СодержитТип(ТипЗнч(Значение)) Тогда
			Результат.Пропущено = Результат.Пропущено + 1;

			Продолжить;
		КонецЕсли;
		ЭлементПриемник = СписокПриемник.НайтиПоЗначению(Значение);
		Если ЭлементПриемник = Неопределено Тогда
			Если ДобавлятьНовые Тогда
				Результат.Добавлено = Результат.Добавлено + 1;
				ЗаполнитьЗначенияСвойств(СписокПриемник.Добавить(), ЭлементИсточник);
			Иначе
				Результат.Пропущено = Результат.Пропущено + 1;
			КонецЕсли;
		Иначе
			Если ЗаменятьСуществующие Тогда
				Результат.Обновлено = Результат.Обновлено + 1;
				ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник, , ?(ЗаменятьПредставление, "", "Представление"));
			Иначе
				Результат.Пропущено = Результат.Пропущено + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция О_ПредставлениеЭлементаУсловногоОформления(ЭлементКД, НастройкаВариантаКД, Состояние) Экспорт
	ПредставлениеОформления = О_ПредставлениеОформления(ЭлементКД.Оформление);
	Если ПредставлениеОформления = "" Тогда
		ПредставлениеОформления = "Не оформлять";
	КонецЕсли;
	ДоступныСведенияИзВарианта = (НастройкаВариантаКД <> Неопределено И НастройкаВариантаКД <> ЭлементКД);

	ПредставлениеПолей = О_ПредставлениеОформляемыхПолей(ЭлементКД.Поля, Состояние);
	Если ПредставлениеПолей = "" И ДоступныСведенияИзВарианта Тогда
		ПредставлениеПолей = О_ПредставлениеОформляемыхПолей(НастройкаВариантаКД.Поля, Состояние);
	КонецЕсли;
	Если ПредставлениеПолей = "" Тогда
		ПредставлениеПолей = "Все поля";
	Иначе
		ПредставлениеПолей = "Поля: " + ПредставлениеПолей;
	КонецЕсли;

	ПредставлениеОтбора = О_ПредставлениеОтбора(ЭлементКД.Отбор, ЭлементКД.Отбор.Элементы, Состояние);
	Если ПредставлениеОтбора = "" И ДоступныСведенияИзВарианта Тогда
		ПредставлениеОтбора = О_ПредставлениеОтбора(НастройкаВариантаКД.Отбор, НастройкаВариантаКД.Отбор.Элементы, Состояние);
	КонецЕсли;
	Если ПредставлениеОтбора = "" Тогда
		Разделитель			= "";
	Иначе
		Разделитель			= "; ";
		ПредставлениеОтбора	= "Условие: " + ПредставлениеОтбора;
	КонецЕсли;

	Возврат ПредставлениеОформления + " (" + ПредставлениеПолей + Разделитель + ПредставлениеОтбора + ")";
КонецФункции

Функция О_ПредставлениеОформления(ОформлениеКД)
	Представление = "";
	Для Каждого ЭлементКД Из ОформлениеКД.Элементы Цикл
		Если ЭлементКД.Использование Тогда
			ДоступныйПараметрКД = ОформлениеКД.ДоступныеПараметры.НайтиПараметр(ЭлементКД.Параметр);
			Если ДоступныйПараметрКД <> Неопределено И ЗначениеЗаполнено(ДоступныйПараметрКД.Заголовок) Тогда
				ПредставлениеКлюча = ДоступныйПараметрКД.Заголовок;
			Иначе
				ПредставлениеКлюча = Строка(ЭлементКД.Параметр);
			КонецЕсли;

			Если ТипЗнч(ЭлементКД.Значение) = Тип("Цвет") Тогда
				ПредставлениеЗначения = О_ПредставлениеЦвета(ЭлементКД.Значение);
			Иначе
				ПредставлениеЗначения = Строка(ЭлементКД.Значение);
			КонецЕсли;

			Представление = Представление + ?(Представление = "", "", ", ") + ПредставлениеКлюча + ?(ПредставлениеЗначения = "", "", ": " + ПредставлениеЗначения);
		КонецЕсли;
	КонецЦикла;

	Возврат Представление;
КонецФункции

Функция О_ПредставлениеЦвета(Цвет)
	Если Цвет.Вид = ВидЦвета.ЭлементСтиля Тогда
		Представление = Строка(Цвет);
		Представление = Сред(Представление, СтрНайти(Представление, ":")+1);
		Представление = О_ИмяВПредставление(Представление);
	ИначеЕсли Цвет.Вид = ВидЦвета.WebЦвет
		Или Цвет.Вид = ВидЦвета.WindowsЦвет Тогда
		Представление = О_СтрЛевДоСимвола(Строка(Цвет), " (");
	ИначеЕсли Цвет.Вид = ВидЦвета.Абсолютный Тогда
		Представление = Строка(Цвет);
		Если Представление = "0, 0, 0" Тогда
			Представление = "Черный";
		ИначеЕсли Представление = "255, 255, 255" Тогда
			Представление = "Белый";
		КонецЕсли;
	ИначеЕсли Цвет.Вид = ВидЦвета.АвтоЦвет Тогда
		Представление = "Авто";
	Иначе
		Представление = "";
	КонецЕсли;

	Возврат Представление;
КонецФункции

Функция О_ИмяВПредставление(Знач ИсходнаяСтрока)
	Результат		= "";
	ЭтоПервыйСимвол	= Истина;
	Для НомерСимвола = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		КодСимвола	= КодСимвола(ИсходнаяСтрока, НомерСимвола);
		Символ		= Символ(КодСимвола);
		Если ЭтоПервыйСимвол Тогда
			Если Не ПустаяСтрока(Символ) Тогда
				Результат		= Результат + Символ;
				ЭтоПервыйСимвол	= Ложь;
			КонецЕсли;
		Иначе
			Если (КодСимвола >= 65 И КодСимвола <= 90)
				Или (КодСимвола >= 1040 И КодСимвола <= 1071) Тогда
				Символ = " " + НРег(Символ);
			ИначеЕсли Символ = "_" Тогда
				Символ = " ";
			КонецЕсли;
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция О_ПредставлениеОформляемыхПолей(ОформляемыеПоляКД, Состояние)
	Представление = "";

	Для Каждого ОформляемоеПолеКД Из ОформляемыеПоляКД.Элементы Цикл
		Если Не ОформляемоеПолеКД.Использование Тогда
			Продолжить;
		КонецЕсли;

		ДоступноеПолеКД = ОформляемыеПоляКД.ДоступныеПоляОформляемыхПолей.НайтиПоле(ОформляемоеПолеКД.Поле);
		Если ДоступноеПолеКД = Неопределено Тогда
			Состояние			= "ПометкаУдаления";
			ПредставлениеПоля	= Строка(ОформляемоеПолеКД.Поле);
		Иначе
			Если ЗначениеЗаполнено(ДоступноеПолеКД.Заголовок) Тогда
				ПредставлениеПоля	= ДоступноеПолеКД.Заголовок;
			Иначе
				ПредставлениеПоля	= Строка(ОформляемоеПолеКД.Поле);
			КонецЕсли;
		КонецЕсли;
		Представление = Представление + ?(Представление = "", "", ", ") + ПредставлениеПоля;
	КонецЦикла;

	Возврат Представление;
КонецФункции

Функция О_ПредставлениеОтбора(УзелКД, НаборСтрокКД, Состояние)
	Представление = "";

	Для Каждого ЭлементКД Из НаборСтрокКД Цикл
		Если Не ЭлементКД.Использование Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(ЭлементКД) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ПредставлениеГруппы		= Строка(ЭлементКД.ТипГруппы);
			ПредставлениеВложенных	= О_ПредставлениеОтбора(УзелКД, ЭлементКД.Элементы, Состояние);
			Если ПредставлениеВложенных = "" Тогда
				Продолжить;
			КонецЕсли;
			ПредставлениеЭлемента = ПредставлениеГруппы + "(" + ПредставлениеВложенных + ")";
		ИначеЕсли ТипЗнч(ЭлементКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ДоступноеПолеОтбораКД = УзелКД.ДоступныеПоляОтбора.НайтиПоле(ЭлементКД.ЛевоеЗначение);
			Если ДоступноеПолеОтбораКД = Неопределено Тогда
				Состояние			= "ПометкаУдаления";
				ПредставлениеПоля	= Строка(ЭлементКД.ЛевоеЗначение);
			Иначе
				Если ЗначениеЗаполнено(ДоступноеПолеОтбораКД.Заголовок) Тогда
					ПредставлениеПоля = ДоступноеПолеОтбораКД.Заголовок;
				Иначе
					ПредставлениеПоля = Строка(ЭлементКД.ЛевоеЗначение);
				КонецЕсли;
			КонецЕсли;

			ПредставлениеЗначения = Строка(ЭлементКД.ПравоеЗначение);

			Если ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				ПредставлениеУсловия = "=";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
				ПредставлениеУсловия = "<>";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
				ПредставлениеУсловия = ">";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
				ПредставлениеУсловия = ">=";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
				ПредставлениеУсловия = "<";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
				ПредставлениеУсловия = "<=";

			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
				ПредставлениеУсловия = "В группе";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
				ПредставлениеУсловия = "Не в группе";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				ПредставлениеУсловия = "В списке";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
				ПредставлениеУсловия = "Не в списке";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
				ПредставлениеУсловия = "В списке включая подчиненные";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
				ПредставлениеУсловия = "Не в списке включая подчиненные";

			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
				ПредставлениеУсловия = "Содержит";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
				ПредставлениеУсловия = "Не содержит";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Подобно Тогда
				ПредставлениеУсловия = "Соответствует шаблону";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеПодобно Тогда
				ПредставлениеУсловия = "Не соответствует шаблону";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда
				ПредставлениеУсловия = "Начинается с";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда
				ПредставлениеУсловия = "Не начинается с";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
				ПредставлениеУсловия = "Заполнено";
				ПредставлениеЗначения = "";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
				ПредставлениеУсловия = "Не заполнено";
				ПредставлениеЗначения = "";
			КонецЕсли;

			ПредставлениеЭлемента = СокрЛП(ПредставлениеПоля + " " + ПредставлениеУсловия + " " + ПредставлениеЗначения);
		Иначе
			Продолжить;
		КонецЕсли;

		Представление = Представление + ?(Представление = "", "", ", ") + ПредставлениеЭлемента;
	КонецЦикла;

	Возврат Представление;
КонецФункции

Функция О_СтрЛевДоСимвола(Строка, Разделитель, Остаток = Неопределено)
	Позиция = СтрНайти(Строка, Разделитель);
	Если Позиция = 0 Тогда
		СтрокаДоТочки	= Строка;
		Остаток			= "";
	Иначе
		СтрокаДоТочки	= Лев(Строка, Позиция - 1);
		Остаток			= Сред(Строка, Позиция + 1);
	КонецЕсли;

	Возврат СтрокаДоТочки;
КонецФункции

Процедура О_ОтобразитьСостояниеОтчета(Форма, Знач ТекстСостояния = "", Знач КартинкаСостояния = Неопределено) Экспорт
	ПолеОтчета = Форма.Элементы.Найти("ОтчетТабличныйДокумент");
	Если ПолеОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОтображатьСостояние = Не ПустаяСтрока(ТекстСостояния);

	Если КартинкаСостояния = Неопределено Или Не ОтображатьСостояние Тогда
		КартинкаСостояния = Новый Картинка;
	КонецЕсли;

	ОтображениеСостояния								= ПолеОтчета.ОтображениеСостояния;
	ОтображениеСостояния.Видимость						= ОтображатьСостояние;
	ОтображениеСостояния.ДополнительныйРежимОтображения	= ?(ОтображатьСостояние, ДополнительныйРежимОтображения.Неактуальность, ДополнительныйРежимОтображения.НеИспользовать);
	ОтображениеСостояния.Картинка						= КартинкаСостояния;
	ОтображениеСостояния.Текст							= ТекстСостояния;

	ПолеОтчета.ТолькоПросмотр							= ОтображатьСостояние Или ПолеОтчета.Вывод = ИспользованиеВывода.Запретить;
КонецПроцедуры

Функция О_ИндексЭлементаНастройкиПоПути(Знач Путь, СвойствоЭлемента = Неопределено) Экспорт
	ДоступныеСвойства = СтрРазделить("Использование, Значение, Список", ", ", Ложь);
	Для Каждого СвойствоЭлемента Из ДоступныеСвойства Цикл
		Если СтрЗаканчиваетсяНа(Путь, СвойствоЭлемента) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	ОписаниеИндекса = Новый ОписаниеТипов("Число");

	ИндексЭлемента = СтрЗаменить(Путь, "КомпоновщикНастроекПользовательскиеНастройкиЭлемент", "");
	ИндексЭлемента = СтрЗаменить(ИндексЭлемента, СвойствоЭлемента, "");

	Возврат ОписаниеИндекса.ПривестиЗначение(ИндексЭлемента);
КонецФункции

Процедура О_ОповеститьОИзмененииНастроек(Форма) Экспорт
	Если Не Форма.ПользовательскиеНастройкиМодифицированы Тогда
		Возврат;
	КонецЕсли;

	ТекстСостояния = "Изменились настройки. Нажмите ""Сформировать"" для получения отчета.";
	О_ОтобразитьСостояниеОтчета(Форма, ТекстСостояния);
КонецПроцедуры

Функция О_УсловиеЭлементаНастройки(Элемент, Описание) Экспорт
	Условие = ВидСравненияКомпоновкиДанных.Равно;

	Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Условие = Элемент.ВидСравнения;
	ИначеЕсли ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И Описание.ДоступенСписокЗначений Тогда
		Условие = ВидСравненияКомпоновкиДанных.ВСписке;
	КонецЕсли;

	Возврат Условие;
КонецФункции

Функция О_ДобавитьУникальноеЗначениеВСписок(Список, Значение, Представление, Использование) Экспорт
	Если ТипЗнч(Список) <> Тип("СписокЗначений") Или (Не ЗначениеЗаполнено(Значение) И Не ЗначениеЗаполнено(Представление)) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ЭлементСписка = Список.НайтиПоЗначению(Значение);

	Если ЭлементСписка = Неопределено Тогда
		ЭлементСписка			= Список.Добавить();
		ЭлементСписка.Значение	= Значение;
	КонецЕсли;

	Если ЗначениеЗаполнено(Представление) Тогда
		ЭлементСписка.Представление = Представление;
	ИначеЕсли Не ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
		ЭлементСписка.Представление = Строка(Значение);
	КонецЕсли;

	Если Использование И Не ЭлементСписка.Пометка Тогда
		ЭлементСписка.Пометка = Истина;
	КонецЕсли;

	Возврат ЭлементСписка;
КонецФункции

Процедура О_ОбновитьПредставленияСписка(СписокПриемник, СписокИсточник) Экспорт
	Если ТипЗнч(СписокИсточник) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Элемент Из СписокИсточник Цикл
		Если Не ЗначениеЗаполнено(Элемент.Представление) Тогда
			Продолжить;
		КонецЕсли;

		НайденныйЭлемент = СписокПриемник.НайтиПоЗначению(Элемент.Значение);

		Если НайденныйЭлемент <> Неопределено Тогда
			НайденныйЭлемент.Представление = Элемент.Представление;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура О_ПривестиЗначениеКТипу(Значение, ОписаниеТипов) Экспорт
	Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Для Каждого ЭлементСписка Из Значение Цикл
			Если Не ОписаниеТипов.СодержитТип(ТипЗнч(ЭлементСписка.Значение)) Тогда
				ЭлементСписка.Значение = ОписаниеТипов.ПривестиЗначение();
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если Не ОписаниеТипов.СодержитТип(ТипЗнч(Значение)) Тогда
			Значение = ОписаниеТипов.ПривестиЗначение();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
