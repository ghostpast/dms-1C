///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СерверныеОповещения

Функция СО_НовоеСерверноеОповещение(Имя) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Имя",					Имя);
	Результат.Вставить("ИмяМодуляОтправки",		"");
	Результат.Вставить("ИмяМодуляПолучения",	"");
	Результат.Вставить("Параметры",				Неопределено);
	Результат.Вставить("ПериодПроверки",		20*60);

	Возврат Результат;
КонецФункции

Процедура СО_ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	Параметры.Вставить("СерверныеОповещения", СО_ПараметрыСерверныхОповещенийЭтогоСеанса());
КонецПроцедуры

Функция СО_ПараметрыСерверныхОповещенийЭтогоСеанса() Экспорт
	Оповещения = СО_ДобавленныеОповещенияСеанса();

	Параметры = Новый Структура;
	Параметры.Вставить("КлючСеанса",						СО_КлючСеанса());
	Параметры.Вставить("ИдентификаторПользователяИБ",		ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
	Параметры.Вставить("ДатаПоследнегоОповещения",			СО_НачалоТекущегоСеансаВЧасовомПоясеТекущейДатыСеанса());
	Параметры.Вставить("Оповещения",						Оповещения);
	Параметры.Вставить("МинимальныйПериод",					20*60);
	Параметры.Вставить("ИдентификаторЛичногоОбсуждения",	Неопределено);
	Параметры.Вставить("ИдентификаторОбщегоОбсуждения",		Неопределено);
	Параметры.Вставить("СеансАдминистратораСервиса",		Ложь);

	ПериодическиеОповещения = Новый Соответствие;
	Для Каждого КлючИЗначение Из Оповещения Цикл
		Оповещение = КлючИЗначение.Значение;
		Если Не ЗначениеЗаполнено(Оповещение.Имя) Или КлючИЗначение.Ключ <> Оповещение.Имя Тогда
			ТекстОшибки = СтрШаблон("В процедуре ""%1""
				           |не заполнено или некорректно заполнено имя оповещения
				           |%2 = ""%3""
				           |%4 = ""%5"".", "ОбщегоНазначенияПереопределяемый.ПриДобавленииСерверныхОповещений", "Ключ", КлючИЗначение.Ключ, "Оповещение.Имя", Оповещение.Имя);

			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Оповещение.ИмяМодуляПолучения) Тогда
			ТекстОшибки = СтрШаблон("В процедуре ""%1""
				           |у оповещения ""%2""
				           |не заполнено свойство ""%3"".", "ОбщегоНазначенияПереопределяемый.ПриДобавленииСерверныхОповещений", Оповещение.Имя, "ИмяМодуляПолучения");

			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		Если Метаданные.ОбщиеМодули.Найти(Оповещение.ИмяМодуляПолучения) = Неопределено Тогда
			ТекстОшибки = СтрШаблон("В процедуре ""%1""
				           |у оповещения ""%2""
				           |в свойстве ""%3"" указан несуществующий общий модуль
				           |""%4"".", "ОбщегоНазначенияПереопределяемый.ПриДобавленииСерверныхОповещений", Оповещение.Имя, "ИмяМодуляПолучения", Оповещение.ИмяМодуляПолучения);

			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Оповещение.ИмяМодуляОтправки) Тогда
			Продолжить;
		КонецЕсли;
		Если Метаданные.ОбщиеМодули.Найти(Оповещение.ИмяМодуляОтправки) = Неопределено Тогда
			ТекстОшибки = СтрШаблон("В процедуре ""%1""
				           |у оповещения ""%2""
				           |в свойстве ""%3"" указан несуществующий общий модуль
				           |""%4"".", "ОбщегоНазначенияПереопределяемый.ПриДобавленииСерверныхОповещений", Оповещение.Имя, "ИмяМодуляОтправки", Оповещение.ИмяМодуляОтправки);

			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		Если Параметры.СеансАдминистратораСервиса Тогда
			Продолжить;
		КонецЕсли;
		ПериодическиеОповещения.Вставить(КлючИЗначение.Ключ, Оповещение);
		Если Параметры.МинимальныйПериод > Оповещение.ПериодПроверки Тогда
			Параметры.МинимальныйПериод = Оповещение.ПериодПроверки;
		КонецЕсли;
	КонецЦикла;

	Если Параметры.СеансАдминистратораСервиса Тогда
		Возврат Параметры;
	КонецЕсли;

	СО_УточнитьМинимальныйПериодПроверки(Параметры.МинимальныйПериод);

	Если ЗначениеЗаполнено(ПериодическиеОповещения) Тогда
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей							= СО_СлужебныйНаборЗаписей(РегистрыСведений.ПериодическиеСерверныеОповещения);
		НаборЗаписей.Отбор.КлючСеанса.Установить(Параметры.КлючСеанса);
		НоваяЗапись								= НаборЗаписей.Добавить();
		НоваяЗапись.КлючСеанса					= Параметры.КлючСеанса;
		НоваяЗапись.ИдентификаторПользователяИБ	= ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
		НоваяЗапись.Оповещения					= Новый ХранилищеЗначения(ПериодическиеОповещения);
		НоваяЗапись.ДатаДобавления				= ТекущаяДатаСеанса();
		НаборЗаписей.Записать();
		СО_НастроитьЗаданиеОтправкаСерверныхОповещенийКлиентам(Истина, Параметры.МинимальныйПериод, Истина);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;

	Для Каждого КлючИЗначение Из Оповещения Цикл
		КлючИЗначение.Значение.Параметры = Неопределено;
	КонецЦикла;

	ЗаполнитьЗначенияСвойств(Параметры, СО_ИдентификаторыОбсуждений());

	Возврат Параметры;
КонецФункции

Функция СО_НачалоТекущегоСеансаВЧасовомПоясеТекущейДатыСеанса()
	СдвигВремени = ТекущаяДатаСеанса() - ТекущаяДата();

	Возврат ПолучитьТекущийСеансИнформационнойБазы().НачалоСеанса + СдвигВремени;
КонецФункции

Процедура СО_УточнитьМинимальныйПериодПроверки(МинимальныйПериодПроверки)
	НижняяГраница = 60;

	Если МинимальныйПериодПроверки < НижняяГраница Тогда
		МинимальныйПериодПроверки = НижняяГраница;
	КонецЕсли;
КонецПроцедуры

Процедура СО_НастроитьЗаданиеОтправкаСерверныхОповещенийКлиентам(Включить, ПериодПовтора = 0, ПриЗапуске = Ложь)
	Попытка
		СО_НастроитьЗаданиеОтправкаСерверныхОповещенийКлиентамБезПопытки(Включить, ПериодПовтора, ПриЗапуске);
	Исключение
		ИнформацияОбОшибке	= ИнформацияОбОшибке();
		ТекстОшибки			= СтрШаблон("Не удалось настроить регламентное задание
			           |""%1"" по причине:
			           |%2", Метаданные.РегламентныеЗадания.ОтправкаСерверныхОповещенийКлиентам.Имя, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ЗаписьЖурналаРегистрации("Серверные оповещения.Ошибка настройки регламентного задания", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	КонецПопытки;
КонецПроцедуры

Процедура СО_НастроитьЗаданиеОтправкаСерверныхОповещенийКлиентамБезПопытки(Включить, ПериодПовтора, ПриЗапуске)
	ИмяПользователя = "";
	Если ЗначениеЗаполнено(ИмяПользователя()) Или Не ПриЗапуске И ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() <> 0 Тогда
		Попытка
			ПользовательИБ = СО_СлужебныйПользовательИБ();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = СтрШаблон("Не удалось создать служебного пользователя ""%1"" по причине:
				           |%2", "ОтправкаСерверныхОповещений", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));

			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
		Если ПользовательИБ <> Неопределено Тогда
			ИмяПользователя = ПользовательИБ.Имя;
		КонецЕсли;
	КонецЕсли;

	МинимальныйПериодПовтора	= 60;
	МаксимальныйПериодПовтора	= 20*60;
	СО_УточнитьМинимальныйПериодПроверки(МинимальныйПериодПовтора);

	Если ЗначениеЗаполнено(ПериодПовтора) Тогда
		Если ПериодПовтора < МинимальныйПериодПовтора Тогда
			ПериодПовтора = МинимальныйПериодПовтора;
		ИначеЕсли ПериодПовтора > МаксимальныйПериодПовтора Тогда
			ПериодПовтора = МаксимальныйПериодПовтора;
		Иначе
			ЦелыхДолей = Цел(ПериодПовтора / 15);
			Остаток = ПериодПовтора - ЦелыхДолей * 15;
			Если Остаток <> 0 Тогда
				ПериодПовтора = ЦелыхДолей * 15;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПериодПовтора = МаксимальныйПериодПовтора;
	КонецЕсли;

	Расписание								= Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораДней			= 1;
	Расписание.ПериодПовтораВТечениеДня		= ПериодПовтора;

	МетаданныеЗадания = Метаданные.РегламентныеЗадания.ОтправкаСерверныхОповещенийКлиентам;
	ПараметрыЗадания = Новый Структура("Ключ, ИнтервалПовтораПриАварийномЗавершении, КоличествоПовторовПриАварийномЗавершении");
	ЗаполнитьЗначенияСвойств(ПараметрыЗадания, МетаданныеЗадания);
	ПараметрыЗадания.Вставить("Использование", Включить);
	ПараметрыЗадания.Вставить("ИмяПользователя", ИмяПользователя);
	ПараметрыЗадания.Вставить("Расписание", Расписание);

	Отбор = Новый Структура("Метаданные", МетаданныеЗадания);

	НайденныеЗадания = РегламентныеЗаданияСервер.РЗ_НайтиЗадания(Отбор);

	Если НайденныеЗадания.Количество() > 1 Тогда
		Для Каждого НайденноеЗадание Из НайденныеЗадания Цикл
			Если НайденноеЗадание = НайденныеЗадания[0] Тогда
				Продолжить;
			КонецЕсли;
			РегламентныеЗаданияСервер.РЗ_УдалитьЗадание(НайденноеЗадание);
		КонецЦикла;
	КонецЕсли;

	Если НайденныеЗадания.Количество() = 0 Тогда
		НачатьТранзакцию();
		Попытка
			РегламентныеЗаданияСервер.РЗ_ЗаблокироватьРегламентноеЗадание(МетаданныеЗадания);
			НайденныеЗадания = РегламентныеЗаданияСервер.РЗ_НайтиЗадания(Отбор);
			Если НайденныеЗадания.Количество() = 0 Тогда
				ПараметрыЗадания.Вставить("Метаданные", МетаданныеЗадания);
				РегламентныеЗаданияСервер.РЗ_ДобавитьЗадание(ПараметрыЗадания);
				СО_ОбновитьСостояниеОтправки(Новый Структура("МинимальныйПериодПроверки", ПериодПовтора), "МинимальныйПериодПроверки");
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();

			ВызватьИсключение;
		КонецПопытки
	КонецЕсли;

	Если НайденныеЗадания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Задание = НайденныеЗадания[0];
	Если СО_ПараметрыЗаданияСовпадают(Задание, ПараметрыЗадания, ПриЗапуске) Тогда
		Возврат;
	КонецЕсли;

	НачатьТранзакцию();
	Попытка
		РегламентныеЗаданияСервер.РЗ_ЗаблокироватьРегламентноеЗадание(Задание.УникальныйИдентификатор);
		НайденныеЗадания = РегламентныеЗаданияСервер.РЗ_НайтиЗадания(Отбор);
		Если НайденныеЗадания.Количество() = 0 Или НайденныеЗадания[0].УникальныйИдентификатор <> Задание.УникальныйИдентификатор Тогда
			СО_НастроитьЗаданиеОтправкаСерверныхОповещенийКлиентамБезПопытки(Включить, ПериодПовтора, ПриЗапуске);
		ИначеЕсли Не СО_ПараметрыЗаданияСовпадают(НайденныеЗадания[0], ПараметрыЗадания, ПриЗапуске) Тогда
			Если ПриЗапуске И ПериодПовтора >= НайденныеЗадания[0].Расписание.ПериодПовтораВТечениеДня Тогда
				ПараметрыЗадания.Удалить("Расписание");
			КонецЕсли;
			РегламентныеЗаданияСервер.РЗ_ИзменитьЗадание(НайденныеЗадания[0].УникальныйИдентификатор, ПараметрыЗадания);
			Если ПараметрыЗадания.Свойство("Расписание") Тогда
				СО_ОбновитьСостояниеОтправки(Новый Структура("МинимальныйПериодПроверки", ПериодПовтора), "МинимальныйПериодПроверки");
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки
КонецПроцедуры

Функция СО_ДобавленныеОповещенияСеанса()
	Оповещения = Новый Соответствие;
	БазоваяПодсистемаСервер.ДО_ПриДобавленииСерверныхОповещений(Оповещения);

	ИнтеграцияПодсистемСервер.ПриДобавленииСерверныхОповещений(Оповещения);

	Возврат Оповещения;
КонецФункции

Процедура СО_ОтправитьПодготовленныеСерверныеОповещения(СостояниеОтправки, МинимальныйПериодПоПользователям)
	Если Не СО_ТекущийПользовательЗарегистрированВСистемеВзаимодействия() Тогда
		Возврат;
	КонецЕсли;

	ИдентификаторОбщегоОбсуждения = СО_ИдентификаторОбщегоОбсуждения();
	Если ИдентификаторОбщегоОбсуждения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СО_ОчиститьУстаревшиеСообщения(СостояниеОтправки);

	ДатаПоследнегоОповещения = СостояниеОтправки.ДатаПоследнейПроверки;
	ДатаОповещенияСОшибкой   = '00010101';

	Выборка = СО_НовыеСерверныеОповещения(?(ЗначениеЗаполнено(СостояниеОтправки.ДатаОповещенияСОшибкой), СостояниеОтправки.ДатаОповещенияСОшибкой, СостояниеОтправки.ДатаПоследнегоОповещения));

	Контекст = Новый Структура;
	Контекст.Вставить("ИдентификаторОбщегоОбсуждения",					ИдентификаторОбщегоОбсуждения);
	Контекст.Вставить("ИдентификаторыЛичныхОбсуждений",					Новый Соответствие);
	Контекст.Вставить("ДатыОповещенийСОшибкамиПоПользователям",			Новый Соответствие);
	Контекст.Вставить("ДатыУспешнойОтправкиОповещенийПоПользователям",	Новый Соответствие);

	Пока Выборка.Следующий() Цикл
		Хранилище	= Выборка.СодержимоеОповещения;
		Содержимое	= СО_НовоеСодержимоеОповещения(Хранилище);
		Если ЗначениеЗаполнено(Содержимое.ИмяОповещения) Тогда
			Данные							= СО_НовыеДанныеСообщения();
			Данные.ИмяОповещения			= Содержимое.ИмяОповещения;
			Данные.Результат				= Содержимое.Результат;
			Данные.ИдентификаторОповещения	= Выборка.ИдентификаторОповещения;
			Данные.ДатаДобавления			= Выборка.ДатаДобавления;

			Если ТипЗнч(Содержимое.Адресаты) <> Тип("Соответствие") Тогда
				Если Не СО_СообщениеУжеОтправлено(СостояниеОтправки, Выборка, "ВсеПользователи") Тогда
					Данные.Адресаты = Неопределено;
					Данные.Ошибки = Контекст.ДатыОповещенийСОшибкамиПоПользователям;
					Если СО_ОтправитьСообщение(Данные, ИдентификаторОбщегоОбсуждения) Тогда
						Контекст.ДатыУспешнойОтправкиОповещенийПоПользователям.Вставить("ВсеПользователи", ТекущаяДатаСеанса());
					Иначе
						Если Контекст.ДатыОповещенийСОшибкамиПоПользователям.Получить("ВсеПользователи") = Неопределено Тогда
							Контекст.ДатыОповещенийСОшибкамиПоПользователям.Вставить("ВсеПользователи", Данные.ДатаДобавления);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Адресаты = Новый Соответствие;
				Для Каждого ОписаниеАдресата Из Содержимое.Адресаты Цикл
					Если Не СО_СообщениеУжеОтправлено(СостояниеОтправки, Выборка, ОписаниеАдресата.Ключ) Тогда
						Адресаты.Вставить(ОписаниеАдресата.Ключ, ОписаниеАдресата.Значение);
					КонецЕсли;
				КонецЦикла;
				СО_ОтправитьАдресноеСообщение(Данные, Адресаты, Контекст);
			КонецЕсли;
		КонецЕсли;
		ДатаПоследнегоОповещения = Данные.ДатаДобавления;
	КонецЦикла;

	СО_ОповеститьОбАктивности(СостояниеОтправки, МинимальныйПериодПоПользователям, Контекст);

	Если ЗначениеЗаполнено(ДатаОповещенияСОшибкой) И ДатаОповещенияСОшибкой < ДатаПоследнегоОповещения - 120 Тогда
		ДатаОповещенияСОшибкой = ДатаПоследнегоОповещения - 120;
	КонецЕсли;

	СостояниеОтправки.ДатаОповещенияСОшибкой					= ДатаОповещенияСОшибкой;
	СостояниеОтправки.ДатаПоследнегоОповещения					= ДатаПоследнегоОповещения;
	СостояниеОтправки.ДатыОповещенийСОшибкамиПоПользователям	= Контекст.ДатыОповещенийСОшибкамиПоПользователям;

	СО_ОбновитьСостояниеОтправки(СостояниеОтправки,
		"ДатаОповещенияСОшибкой,
		|ДатаПоследнегоОповещения,
		|ДатаПоследнейОчисткиСообщений,
		|ДатыОповещенийСОшибкамиПоПользователям,
		|ДатыУспешнойОтправкиОповещенийПоПользователям");
КонецПроцедуры

Процедура СО_ОтправитьАдресноеСообщение(Данные, Адресаты, Контекст)
	Если Адресаты.Количество() > 20 Тогда
		Данные.Адресаты = Адресаты;
		СО_УстановитьДатыОповещенийСОшибками(Данные, Контекст.ДатыОповещенийСОшибкамиПоПользователям);
		Если СО_ОтправитьСообщение(Данные, Контекст.ИдентификаторОбщегоОбсуждения) Тогда
			Для Каждого ОписаниеАдресата Из Адресаты Цикл
				Контекст.ДатыУспешнойОтправкиОповещенийПоПользователям.Вставить(ОписаниеАдресата.Ключ, ТекущаяДатаСеанса());
			КонецЦикла;
		Иначе
			Для Каждого ОписаниеАдресата Из Адресаты Цикл
				Если Контекст.ДатыОповещенийСОшибкамиПоПользователям.Получить(ОписаниеАдресата.Ключ) = Неопределено Тогда
					Контекст.ДатыОповещенийСОшибкамиПоПользователям.Вставить(ОписаниеАдресата.Ключ, Данные.ДатаДобавления);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Для Каждого ОписаниеАдресата Из Адресаты Цикл
			ИдентификаторПользователяИБ = ОписаниеАдресата.Ключ;
			Данные.Адресаты = Новый Соответствие;
			Данные.Адресаты.Вставить(ИдентификаторПользователяИБ, ОписаниеАдресата.Значение);
			СО_УстановитьДатыОповещенийСОшибками(Данные, Контекст.ДатыОповещенийСОшибкамиПоПользователям);
			ИдентификаторОбсуждения = Контекст.ИдентификаторыЛичныхОбсуждений.Получить(ИдентификаторПользователяИБ);
			Если ИдентификаторОбсуждения = Неопределено Тогда
				ИдентификаторОбсуждения = СО_ИдентификаторЛичногоОбсуждения(ИдентификаторПользователяИБ);
			КонецЕсли;
			Если СО_ОтправитьСообщение(Данные, ИдентификаторОбсуждения) Тогда
				Контекст.ДатыУспешнойОтправкиОповещенийПоПользователям.Вставить(ИдентификаторПользователяИБ, ТекущаяДатаСеанса());
			Иначе
				Если Контекст.ДатыОповещенийСОшибкамиПоПользователям.Получить(ИдентификаторПользователяИБ) = Неопределено Тогда
					Контекст.ДатыОповещенийСОшибкамиПоПользователям.Вставить(ИдентификаторПользователяИБ, Данные.ДатаДобавления);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура СО_ОповеститьОбАктивности(СостояниеОтправки, МинимальныйПериодПоПользователям, Контекст)
	АдресатыPing			= Новый Соответствие;
	ДатаСледующейПроверки	= СостояниеОтправки.ДатаПоследнейПроверки + СостояниеОтправки.МинимальныйПериодПроверки + 3;

	Для Каждого ОписаниеПериода Из МинимальныйПериодПоПользователям Цикл
		Если Контекст.ДатыОповещенийСОшибкамиПоПользователям.Получить("ВсеПользователи") <> Неопределено Или Контекст.ДатыОповещенийСОшибкамиПоПользователям.Получить(ОписаниеПериода.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДатаОтправки		= Контекст.ДатыУспешнойОтправкиОповещенийПоПользователям.Получить(ОписаниеПериода.Ключ);
		ОбщаяДатаОтправки	= Контекст.ДатыУспешнойОтправкиОповещенийПоПользователям.Получить("ВсеПользователи");
		Если ДатаОтправки = Неопределено Или ОбщаяДатаОтправки <> Неопределено И ДатаОтправки < ОбщаяДатаОтправки Тогда
			ДатаОтправки = ОбщаяДатаОтправки;
		КонецЕсли;
		Если ДатаОтправки = Неопределено Тогда
			ДатаОтправки		= СостояниеОтправки.ДатыУспешнойОтправкиОповещенийПоПользователям.Получить(ОписаниеПериода.Ключ);
			ОбщаяДатаОтправки	= СостояниеОтправки.ДатыУспешнойОтправкиОповещенийПоПользователям.Получить("ВсеПользователи");
			Если ДатаОтправки = Неопределено Или ОбщаяДатаОтправки <> Неопределено И ДатаОтправки < ОбщаяДатаОтправки Тогда
				ДатаОтправки = ОбщаяДатаОтправки;
			КонецЕсли;
		КонецЕсли;
		Если ДатаОтправки = Неопределено Или ДатаОтправки + ОписаниеПериода.Значение > ДатаСледующейПроверки Тогда
			АдресатыPing.Вставить(ОписаниеПериода.Ключ, Новый Массив);
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(АдресатыPing) Тогда
		Данные					= СО_НовыеДанныеСообщения();
		Данные.ИмяОповещения	= "НетСерверныхОповещений";
		СО_ОтправитьАдресноеСообщение(Данные, АдресатыPing, Контекст);
	КонецЕсли;
КонецПроцедуры

Функция СО_КлючСеанса(Сеанс = Неопределено) Экспорт
	Если Сеанс = Неопределено Тогда
		Сеанс = ПолучитьТекущийСеансИнформационнойБазы();
	КонецЕсли;

	Возврат Формат(Сеанс.НачалоСеанса, "ДФ='yyyy.MM.dd HH:mm:ss'") + " " + Формат(Сеанс.НомерСеанса, "ЧН=0; ЧГ=");
КонецФункции

Функция СО_СлужебныйПользовательИБ()
	ИмяПользователя = "ОтправкаСерверныхОповещений";

	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	РольДляЗапуска = Метаданные.Роли.Администрирование;
	Если ПользовательИБ <> Неопределено Тогда
		Если Не ПользовательИБ.Роли.Содержит(РольДляЗапуска) Тогда
			ПользовательИБ.Роли.Очистить();
			ПользовательИБ.Роли.Добавить(РольДляЗапуска);
			ПользователиСервер.сП_ЗаписатьПользователяИнформационнойБазы(ПользовательИБ);
		КонецЕсли;
		Возврат ПользовательИБ;
	КонецЕсли;

	Если ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	ОписаниеПользователяИБ = Новый Структура;
	ОписаниеПользователяИБ.Вставить("Действие",						"Записать");
	ОписаниеПользователяИБ.Вставить("Имя",							"ОтправкаСерверныхОповещений");
	ОписаниеПользователяИБ.Вставить("АутентификацияСтандартная",	Истина);
	ОписаниеПользователяИБ.Вставить("ЗапрещеноИзменятьПароль",		Истина);
	ОписаниеПользователяИБ.Вставить("ПоказыватьВСпискеВыбора",		Ложь);
	ОписаниеПользователяИБ.Вставить("Пароль",						Строка(Новый УникальныйИдентификатор));
	ОписаниеПользователяИБ.Вставить("Роли",							БазоваяПодсистемаКлиентСервер.ОН_ЗначениеВМассиве(РольДляЗапуска));

	Пользователь				= Справочники.Пользователи.СоздатьЭлемент();
	Пользователь.Наименование	= "ОтправкаСерверныхОповещений";
	Пользователь.Служебный		= Истина;
	Пользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
	Пользователь.Записать();

	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);

	Возврат ПользовательИБ;
КонецФункции

Функция СО_СостояниеОтправкиСерверныхОповещений()
	Состояние = Новый Структура;
	Состояние.Вставить("ДатаПоследнейПроверки",							'00010101');
	Состояние.Вставить("МинимальныйПериодПроверки",						0);
	Состояние.Вставить("ДатыПроверкиПоИменамОповещений",				Новый Соответствие);
	Состояние.Вставить("ДатаПоследнегоОповещения",						'00010101');
	Состояние.Вставить("ДатаОповещенияСОшибкой",						'00010101');
	Состояние.Вставить("ДатыОповещенийСОшибкамиПоПользователям",		Новый Соответствие);
	Состояние.Вставить("ДатыУспешнойОтправкиОповещенийПоПользователям",	Новый Соответствие);
	Состояние.Вставить("ИдентификаторФоновогоЗадания",					Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Состояние.Вставить("ДатаПоследнейОчисткиСообщений",					'00010101');

	Значение = Константы.СостояниеОтправкиСерверныхОповещений.Получить();
	Если ТипЗнч(Значение) = Тип("ХранилищеЗначения") Тогда
		ТекущееСостояние = Значение.Получить();
		Если ТипЗнч(ТекущееСостояние) = Тип("Структура") Тогда
			Для Каждого КлючИЗначение Из ТекущееСостояние Цикл
				Если ТипЗнч(Состояние[КлючИЗначение.Ключ]) = ТипЗнч(КлючИЗначение.Значение) Тогда
					Состояние[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат Состояние;
КонецФункции

Процедура СО_ОбновитьСостояниеОтправки(НовоеСостояниеОтправки, ИменаСвойств)
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("Константа.СостояниеОтправкиСерверныхОповещений");
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		СостояниеОтправки = СО_СостояниеОтправкиСерверныхОповещений();
		Если СтрНайти(ИменаСвойств, "ДатыУспешнойОтправкиОповещенийПоПользователям") > 0 Тогда
			НовыеДаты = НовоеСостояниеОтправки.ДатыУспешнойОтправкиОповещенийПоПользователям;
			Для Каждого КлючИЗначение Из СостояниеОтправки.ДатыУспешнойОтправкиОповещенийПоПользователям Цикл
				НоваяДата = НовыеДаты.Получить(КлючИЗначение.Ключ);
				Если НоваяДата <> Неопределено И НоваяДата < КлючИЗначение.Значение Тогда
					НовыеДаты.Вставить(КлючИЗначение.Ключ, НоваяДата);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Записать = Ложь;
		Для Каждого КлючИЗначение Из Новый Структура(ИменаСвойств) Цикл
			ИмяСвойства = КлючИЗначение.Ключ;
			Если СостояниеОтправки[ИмяСвойства] = НовоеСостояниеОтправки[ИмяСвойства] Тогда
				Продолжить;
			КонецЕсли;
			СостояниеОтправки[ИмяСвойства] = НовоеСостояниеОтправки[ИмяСвойства];
			Записать = Истина;
		КонецЦикла;
		Если Записать Тогда
			МенеджерЗначения			= СО_СлужебныйМенеджерЗначения(Константы.СостояниеОтправкиСерверныхОповещений);
			МенеджерЗначения.Значение	= Новый ХранилищеЗначения(СостояниеОтправки);
			МенеджерЗначения.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке	= ИнформацияОбОшибке();
		ТекстОшибки			= СтрШаблон("Не удалось установить константу %1 по причине:
			           |%2", "СостояниеОтправкиСерверныхОповещений", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ЗаписьЖурналаРегистрации("Серверные оповещения.Ошибка работы фонового задания", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	КонецПопытки;
КонецПроцедуры

Функция СО_СостояниеОтправкиПриЗапускеФоновогоЗадания()
	ТекущийСеанс = ПолучитьТекущийСеансИнформационнойБазы();
	Если ТекущийСеанс.ИмяПриложения <> "BackgroundJob" Тогда
		Возврат СО_СостояниеОтправкиСерверныхОповещений();
	КонецЕсли;

	ТекущееФоновоеЗадание = ТекущийСеанс.ПолучитьФоновоеЗадание();
	Если ТекущееФоновоеЗадание = Неопределено Тогда
		Возврат СО_СостояниеОтправкиСерверныхОповещений();
	КонецЕсли;

	СостояниеОтправки = Неопределено;

	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("Константа.СостояниеОтправкиСерверныхОповещений");
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		СостояниеОтправки = СО_СостояниеОтправкиСерверныхОповещений();
		Если СО_ОтправкаСерверныхОповещенийКлиентамУжеВыполняется(СостояниеОтправки) Тогда
			СостояниеОтправки = Неопределено;
		Иначе
			СостояниеОтправки.ИдентификаторФоновогоЗадания = ТекущееФоновоеЗадание.УникальныйИдентификатор;
			МенеджерЗначения = СО_СлужебныйМенеджерЗначения(Константы.СостояниеОтправкиСерверныхОповещений);
			МенеджерЗначения.Значение = Новый ХранилищеЗначения(СостояниеОтправки);
			МенеджерЗначения.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		СостояниеОтправки = Неопределено;
		ТекстОшибки = СтрШаблон("Не удалось установить константу %1 по причине:
			           |%2","СостояниеОтправкиСерверныхОповещений", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ЗаписьЖурналаРегистрации("Серверные оповещения.Ошибка запуска фонового задания", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	КонецПопытки;

	Возврат СостояниеОтправки;
КонецФункции

Функция СО_ОтправкаСерверныхОповещенийКлиентамУжеВыполняется(СостояниеОтправки)
	ИсполняющееФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(СостояниеОтправки.ИдентификаторФоновогоЗадания);

	Возврат ИсполняющееФоновоеЗадание <> Неопределено И ИсполняющееФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно;
КонецФункции

Процедура СО_УдалитьУстаревшиеОповещения()
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	|	ОтправленныеСерверныеОповещения.ИдентификаторОповещения КАК ИдентификаторОповещения
	|ИЗ
	|	РегистрСведений.ОтправленныеСерверныеОповещения КАК ОтправленныеСерверныеОповещения
	|ГДЕ
	|	ОтправленныеСерверныеОповещения.ДатаДобавления < &ГраницаУстаревания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтправленныеСерверныеОповещения.ДатаДобавления,
	|	ОтправленныеСерверныеОповещения.ДатаДобавленияМиллисекунды";
	Запрос.УстановитьПараметр("ГраницаУстаревания", ТекущаяДатаСеанса() - 60*60);

	ПустойНаборЗаписей = СО_СлужебныйНаборЗаписей(РегистрыСведений.ОтправленныеСерверныеОповещения);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПустойНаборЗаписей.Отбор.ИдентификаторОповещения.Установить(Выборка.ИдентификаторОповещения);
		ПустойНаборЗаписей.Записать();
	КонецЦикла;
КонецПроцедуры

Функция СО_ПараметрыЗаданияСовпадают(Задание, ПараметрыЗадания, ПриЗапуске)
	Для Каждого КлючИЗначение Из ПараметрыЗадания Цикл
		Если Задание[КлючИЗначение.Ключ] = КлючИЗначение.Значение Тогда
			Продолжить;
		КонецЕсли;
		Если КлючИЗначение.Ключ = "Расписание" Тогда
			Если ПриЗапуске Тогда
				Если ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня
				   < Задание.Расписание.ПериодПовтораВТечениеДня Тогда
					Возврат Ложь;
				КонецЕсли;
				НовоеРасписание								= Новый РасписаниеРегламентногоЗадания;
				ЗаполнитьЗначенияСвойств(НовоеРасписание, ПараметрыЗадания.Расписание);
				НовоеРасписание.ПериодПовтораВТечениеДня	= Задание.Расписание.ПериодПовтораВТечениеДня;
			Иначе
				НовоеРасписание = ПараметрыЗадания.Расписание;
			КонецЕсли;
			Если Строка(Задание[КлючИЗначение.Ключ]) = Строка(НовоеРасписание) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Возврат Ложь;
	КонецЦикла;

	Возврат Истина;
КонецФункции

Функция СО_ИдентификаторыОбсуждений()
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторЛичногоОбсуждения");
	Результат.Вставить("ИдентификаторОбщегоОбсуждения");

	Если Не СО_ТекущийПользовательЗарегистрированВСистемеВзаимодействия() Тогда
		Возврат Результат;
	КонецЕсли;

	ИдентификаторЛичногоОбсуждения = СО_ИдентификаторЛичногоОбсуждения();
	Если ИдентификаторЛичногоОбсуждения = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	ИдентификаторОбщегоОбсуждения = СО_ИдентификаторОбщегоОбсуждения();
	Если ИдентификаторОбщегоОбсуждения = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	Результат.ИдентификаторЛичногоОбсуждения = ИдентификаторЛичногоОбсуждения;
	Результат.ИдентификаторОбщегоОбсуждения  = ИдентификаторОбщегоОбсуждения;

	Возврат Результат;
КонецФункции

Функция СО_ТекущийПользовательЗарегистрированВСистемеВзаимодействия()
	Если Не СО_СистемаВзаимодействийПодключена() Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Ложь;

	// Зарезервировано для новых подсистем
КонецФункции

Функция СО_СистемаВзаимодействийПодключена() Экспорт
	// Зарезервировано для новых подсистем

	Результат = Ложь;

	Возврат Результат;
КонецФункции

Функция СО_ИдентификаторЛичногоОбсуждения(ИдентификаторПользователяИБ = Неопределено)
	УстановитьПривилегированныйРежим(Истина);
	Если ИдентификаторПользователяИБ = Неопределено Тогда
		УникальныйИдентификатор = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	Иначе
		УникальныйИдентификатор = ИдентификаторПользователяИБ;
	КонецЕсли;
	КлючЛичногоОбсуждения = "СерверныеОповещения" + "_" + НРег(УникальныйИдентификатор);

	Попытка
		ОбновлятьУчастниковОбсуждения = Ложь;
		Если ИдентификаторПользователяИБ = Неопределено Тогда
			ИдентификаторТекущегоПользователя = СистемаВзаимодействия.ИдентификаторТекущегоПользователя();
			ОбновлятьУчастниковОбсуждения = Истина;
		Иначе
			Попытка
				ИдентификаторТекущегоПользователя	= СистемаВзаимодействия.ПолучитьИдентификаторПользователя(УникальныйИдентификатор);
				ОбновлятьУчастниковОбсуждения		= Истина;
			Исключение
				ИдентификаторТекущегоПользователя	= СистемаВзаимодействия.ИдентификаторТекущегоПользователя();
			КонецПопытки;
		КонецЕсли;
		НомерПопытки	= 1;
		Создано			= Ложь;
		Пока Истина Цикл
			Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(КлючЛичногоОбсуждения);
			Если Обсуждение <> Неопределено Тогда
				Прервать;
			КонецЕсли;
			НовоеОбсуждение					= СистемаВзаимодействия.СоздатьОбсуждение();
			НовоеОбсуждение.Отображаемое	= Ложь;
			НовоеОбсуждение.Ключ			= КлючЛичногоОбсуждения;
			НовоеОбсуждение.Участники.Добавить(ИдентификаторТекущегоПользователя);
			Попытка
				НовоеОбсуждение.Записать();
				Обсуждение	= НовоеОбсуждение;
				Создано		= Истина;

				Прервать;
			Исключение
				НомерПопытки = НомерПопытки + 1;
				Если НомерПопытки > 10 Тогда
					ВызватьИсключение;
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;
		Если Не Создано
		   И (Обсуждение.Отображаемое
		      Или ОбновлятьУчастниковОбсуждения
		        И (Обсуждение.Участники.Количество() <> 1
		           Или Не Обсуждение.Участники.Содержит(ИдентификаторТекущегоПользователя))) Тогда
			Обсуждение.Отображаемое = Ложь;
			Если ОбновлятьУчастниковОбсуждения Тогда
				Обсуждение.Участники.Очистить();
				Обсуждение.Участники.Добавить(ИдентификаторТекущегоПользователя);
			КонецЕсли;
			Обсуждение.Записать();
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = СтрШаблон("Не удалось создать личное обсуждение для пользователя ""%1 (%2)"" по причине:
			           |%3",
			ПользователиИнформационнойБазы.ТекущийПользователь().Имя,
			НРег(ИдентификаторПользователяИБ),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ЗаписьЖурналаРегистрации("Серверные оповещения.Ошибка создания личного обсуждения", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);

		Возврат Неопределено;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);

	Возврат Обсуждение.Идентификатор;
КонецФункции

Функция СО_ИдентификаторОбщегоОбсуждения()
	КлючОбщегоОбсуждения = "СерверныеОповещения";

	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Обсуждение	= СистемаВзаимодействия.ПолучитьОбсуждение(КлючОбщегоОбсуждения);
		Создано		= Ложь;
		Если Обсуждение = Неопределено Тогда
			Обсуждение				= СистемаВзаимодействия.СоздатьОбсуждение();
			Обсуждение.Отображаемое	= Ложь;
			Обсуждение.Ключ			= КлючОбщегоОбсуждения;
			Обсуждение.Участники.Добавить(СистемаВзаимодействия.СтандартныеПользователи.ВсеПользователиПриложения);
			Попытка
				Обсуждение.Записать();
				Создано = Истина;
			Исключение
				Создано = Ложь;
			КонецПопытки;
			Если Не Создано Тогда
				СуществующееОбсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(КлючОбщегоОбсуждения);
				Если СуществующееОбсуждение <> Неопределено Тогда
					Обсуждение = СуществующееОбсуждение;
				Иначе
					Обсуждение.Записать();
					Создано = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Не Создано И Обсуждение.Отображаемое Тогда
			Обсуждение.Отображаемое = Ложь;
			Обсуждение.Записать();
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации("Серверные оповещения.Ошибка создания общего обсуждения", УровеньЖурналаРегистрации.Ошибка,,,ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));

		Возврат Неопределено;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);

	Возврат Обсуждение.Идентификатор;
КонецФункции

Процедура СО_ОтправитьСерверноеОповещениеСИдентификаторомГруппы(ИмяОповещения, Результат, Адресаты, ОтправитьСразу, ИдентификаторГруппы = Неопределено) Экспорт
	Если Адресаты <> Неопределено И Не ЗначениеЗаполнено(Адресаты) Тогда
		Возврат;
	КонецЕсли;

	ЗаписаноВСистемуВзаимодействия	= Ложь;
	ИдентификаторОповещения			= НРег(Новый УникальныйИдентификатор);
	ДатаДобавления					= ТекущаяДатаСеанса();
	ДатаДобавленияМиллисекунды		= СО_Миллисекунды();

	Если ОтправитьСразу И СерверныеОповещенияСерверПовтИсп.сСО_ЭтоСеансОтправкиСерверныхОповещенийКлиентам() Тогда
		ТекстОшибки = СтрШаблон("В процедуре %1 недопустимо указывать значение %2 для параметра %3
			           |при вызове из процедур %4.",
			"СерверныеОповещенияСервер.СО_ОтправитьСерверноеОповещение",
			"Истина",
			"ОтправитьСразу",
			"ПриОтправкеСерверногоОповещения");

		ВызватьИсключение ТекстОшибки;
	ИначеЕсли ОтправитьСразу И СО_ТекущийПользовательЗарегистрированВСистемеВзаимодействия() Тогда
		Данные							= СО_НовыеДанныеСообщения();
		Данные.ИмяОповещения			= ИмяОповещения;
		Данные.Результат				= Результат;
		Данные.Адресаты					= Адресаты;
		Данные.ИдентификаторОповещения	= ИдентификаторОповещения;
		Данные.ДатаДобавления			= ДатаДобавления;
		Данные.ОтправленоИзОчереди		= Ложь;

		Если ЗначениеЗаполнено(Адресаты) И Адресаты.Количество() = 1 Тогда
			Для Каждого КлючИЗначение Из Адресаты Цикл
				Прервать;
			КонецЦикла;
			ИдентификаторОбсуждения = СО_ИдентификаторЛичногоОбсуждения(КлючИЗначение.Ключ);
		Иначе
			ИдентификаторОбсуждения = СО_ИдентификаторОбщегоОбсуждения();
		КонецЕсли;
		Если ИдентификаторОбсуждения <> Неопределено Тогда
			ЗаписаноВСистемуВзаимодействия = СО_ОтправитьСообщение(Данные, ИдентификаторОбсуждения);
		КонецЕсли;
	КонецЕсли;

	СодержимоеОповещения				= СО_НовоеСодержимоеОповещения();
	СодержимоеОповещения.ИмяОповещения	= ИмяОповещения;
	СодержимоеОповещения.Результат		= Результат;
	СодержимоеОповещения.Адресаты		= Адресаты;

	НаборЗаписей	= СО_СлужебныйНаборЗаписей(РегистрыСведений.ОтправленныеСерверныеОповещения);
	НаборЗаписей.Отбор.ИдентификаторОповещения.Установить(ИдентификаторОповещения);
	НоваяЗапись									= НаборЗаписей.Добавить();
	НоваяЗапись.ИдентификаторОповещения			= ИдентификаторОповещения;
	НоваяЗапись.ДатаДобавления					= ДатаДобавления;
	НоваяЗапись.ДатаДобавленияМиллисекунды		= ДатаДобавленияМиллисекунды;
	НоваяЗапись.ЗаписаноВСистемуВзаимодействия	= ЗаписаноВСистемуВзаимодействия;
	НоваяЗапись.СодержимоеОповещения			= Новый ХранилищеЗначения(СодержимоеОповещения);
	НоваяЗапись.ИдентификаторГруппы				= НРег(ИдентификаторГруппы);
	НаборЗаписей.Записать();
КонецПроцедуры

Функция СО_НовыеДанныеСообщения() Экспорт
	Данные = Новый Структура;
	Данные.Вставить("ИмяОповещения",			"");
	Данные.Вставить("Результат");
	Данные.Вставить("Адресаты",					Новый Соответствие);
	Данные.Вставить("ИдентификаторОповещения",	"");
	Данные.Вставить("ДатаДобавления",			'00010101');
	Данные.Вставить("Ошибки",					Новый Соответствие);
	Данные.Вставить("ОтправленоИзОчереди",		Истина);

	Возврат Данные;
КонецФункции

Функция СО_СообщениеУжеОтправлено(СостояниеОтправки, Выборка, ИдентификаторПользователяИБ)
	Если Выборка.ЗаписаноВСистемуВзаимодействия Тогда
		Возврат Истина;
	КонецЕсли;

	ДатаОповещенияСОшибкой = СостояниеОтправки.ДатыОповещенийСОшибкамиПоПользователям.Получить("ВсеПользователи");

	Если ДатаОповещенияСОшибкой = Неопределено Тогда
		ДатаОповещенияСОшибкой = СостояниеОтправки.ДатаПоследнегоОповещения;
	КонецЕсли;

	Возврат Выборка.ДатаДобавления < ДатаОповещенияСОшибкой;
КонецФункции

Функция СО_НовоеСодержимоеОповещения(Хранилище = Неопределено)
	Содержимое = Новый Структура;
	Содержимое.Вставить("ИмяОповещения", "");
	Содержимое.Вставить("Результат");
	Содержимое.Вставить("Адресаты", Новый Соответствие);

	Если ТипЗнч(Хранилище) <> Тип("ХранилищеЗначения") Тогда
		Возврат Содержимое;
	КонецЕсли;

	ТекущееСодержимое = Хранилище.Получить();
	Если ТипЗнч(ТекущееСодержимое) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Содержимое, ТекущееСодержимое);
	КонецЕсли;

	Возврат Содержимое;
КонецФункции

Процедура СО_ОтправкаСерверныхОповещенийКлиентам() Экспорт
	БазоваяПодсистемаСервер.ОН_ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаСерверныхОповещенийКлиентам);

	УстановитьПривилегированныйРежим(Истина);
	СостояниеОтправки = СО_СостояниеОтправкиПриЗапускеФоновогоЗадания();
	Если СостояниеОтправки <> Неопределено Тогда
		МинимальныйПериодПоПользователям = Новый Соответствие;
		СО_ПодготовитьСерверныеОповещения(СостояниеОтправки, МинимальныйПериодПоПользователям);
		СО_ОтправитьПодготовленныеСерверныеОповещения(СостояниеОтправки, МинимальныйПериодПоПользователям);
	КонецЕсли;
	СО_ОбновитьЗаданиеОтправкаСерверныхОповещенийКлиентамЕслиНетОповещений(СостояниеОтправки.МинимальныйПериодПроверки);
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Функция СО_ОтправитьСообщение(Данные, ИдентификаторОбсуждения)
	Попытка
		НовоеСообщение			= СистемаВзаимодействия.СоздатьСообщение(ИдентификаторОбсуждения);
		НовоеСообщение.Данные	= Данные;
		НовоеСообщение.Дата		= ТекущаяДатаСеанса();
		НовоеСообщение.Записать();
	Исключение
		ИнформацияОбОшибке	= ИнформацияОбОшибке();
		ТекстОшибки			= СтрШаблон("Не удалось отправить сообщение в обсуждение %1 по причине:
			           |%2", НРег(ИдентификаторОбсуждения), ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ЗаписьЖурналаРегистрации("Серверные оповещения.Ошибка отправки сообщения", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);

		Возврат Ложь;
	КонецПопытки;

	Возврат Истина;
КонецФункции

Процедура СО_ОчиститьУстаревшиеСообщения(СостояниеОтправки)
	НоваяДата	= НачалоЧаса(ТекущаяДатаСеанса());
	Период		= 60*60;
	Если СостояниеОтправки.ДатаПоследнейОчисткиСообщений + Период > НоваяДата Тогда
		Возврат;
	КонецЕсли;

	Граница = НоваяДата - Период;

	Попытка
		ОтборОбсуждений					= Новый ОтборОбсужденийСистемыВзаимодействия;
		ОтборОбсуждений.Групповое		= Истина;
		ОтборОбсуждений.Отображаемое	= Ложь;
		НайденныеОбсуждения = СистемаВзаимодействия.ПолучитьОбсуждения(ОтборОбсуждений);
		Для Каждого Обсуждение Из НайденныеОбсуждения Цикл
			Если Не СтрНачинаетсяС(Обсуждение.Ключ, "СерверныеОповещения") Тогда
				Продолжить;
			КонецЕсли;
			ОтборСообщений							= Новый ОтборСообщенийСистемыВзаимодействия;
			ОтборСообщений.Обсуждение				= Обсуждение.Идентификатор;
			ОтборСообщений.НаправлениеСортировки	= НаправлениеСортировки.Возр;
			Сообщения = СистемаВзаимодействия.ПолучитьСообщения(ОтборСообщений);
			Для Каждого Сообщение Из Сообщения Цикл
				Если Сообщение.Дата < Граница Тогда
					СистемаВзаимодействия.УдалитьСообщение(Сообщение.Идентификатор);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		СостояниеОтправки.ДатаПоследнейОчисткиСообщений = НоваяДата;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации("Серверные оповещения.Ошибка очистки устаревших сообщений", УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
КонецПроцедуры

Функция СО_СерверныеОповещенияДляКлиента(ИдентификаторГруппыОповещений, ПоследнееОповещение = Неопределено) Экспорт
	Если ПоследнееОповещение = Неопределено Тогда
		ПоследнееОповещение = СО_НовоеСерверноеОповещенияДляКлиента();
	КонецЕсли;

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	|	ОтправленныеСерверныеОповещения.ИдентификаторОповещения КАК ИдентификаторОповещения,
	|	ОтправленныеСерверныеОповещения.СодержимоеОповещения КАК СодержимоеОповещения,
	|	ОтправленныеСерверныеОповещения.ДатаДобавления КАК ДатаДобавления,
	|	ОтправленныеСерверныеОповещения.ДатаДобавленияМиллисекунды КАК ДатаДобавленияМиллисекунды
	|ИЗ
	|	РегистрСведений.ОтправленныеСерверныеОповещения КАК ОтправленныеСерверныеОповещения
	|ГДЕ
	|	ОтправленныеСерверныеОповещения.ИдентификаторГруппы = &ИдентификаторГруппы
	|	И ОтправленныеСерверныеОповещения.ИдентификаторОповещения <> &ИдентификаторОповещения
	|	И (ОтправленныеСерверныеОповещения.ДатаДобавления > &ДатаДобавления
	|			ИЛИ ОтправленныеСерверныеОповещения.ДатаДобавления = &ДатаДобавления
	|				И ОтправленныеСерверныеОповещения.ДатаДобавленияМиллисекунды > &ДатаДобавленияМиллисекунды)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтправленныеСерверныеОповещения.ДатаДобавления,
	|	ОтправленныеСерверныеОповещения.ДатаДобавленияМиллисекунды";
	Запрос.УстановитьПараметр("ИдентификаторГруппы",        НРег(ИдентификаторГруппыОповещений));
	Запрос.УстановитьПараметр("ДатаДобавления",             ПоследнееОповещение.ДатаДобавления);
	Запрос.УстановитьПараметр("ДатаДобавленияМиллисекунды", ПоследнееОповещение.ДатаДобавленияМиллисекунды);
	Запрос.УстановитьПараметр("ИдентификаторОповещения",    ПоследнееОповещение.ИдентификаторОповещения);

	Выборка = Запрос.Выполнить().Выбрать();
	Результат = Новый Массив;

	Пока Выборка.Следующий() Цикл
		Оповещение				= СО_НовоеСерверноеОповещенияДляКлиента();
		ЗаполнитьЗначенияСвойств(Оповещение, Выборка);
		Оповещение.Содержимое	= СО_НовоеСодержимоеОповещения(Выборка.СодержимоеОповещения);
		Результат.Добавить(Оповещение);
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция СО_Миллисекунды()
	ДатаВМиллисекундах = ТекущаяУниверсальнаяДатаВМиллисекундах();

	Возврат ДатаВМиллисекундах - Цел(ДатаВМиллисекундах/1000)*1000;
КонецФункции

Функция СО_НовоеСерверноеОповещенияДляКлиента()
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторОповещения",		"");
	Результат.Вставить("Содержимое",					Неопределено);
	Результат.Вставить("ДатаДобавления",				'00010101');
	Результат.Вставить("ДатаДобавленияМиллисекунды",	0);

	Возврат Результат;
КонецФункции

Функция СО_СлужебныйНаборЗаписей(МенеджерРегистра)
	НаборЗаписей										= МенеджерРегистра.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить("НеВыполнятьКонтрольУдаляемых");
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение	= Ложь;
	НаборЗаписей.ОбменДанными.Загрузка					= Истина;

	Возврат НаборЗаписей;
КонецФункции

Функция СО_СлужебныйМенеджерЗначения(МенеджерКонстанты)
	МенеджерЗначения										= МенеджерКонстанты.СоздатьМенеджерЗначения();
	МенеджерЗначения.ДополнительныеСвойства.Вставить("НеВыполнятьКонтрольУдаляемых");
	МенеджерЗначения.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
	МенеджерЗначения.ОбменДанными.Получатели.АвтоЗаполнение	= Ложь;
	МенеджерЗначения.ОбменДанными.Загрузка					= Истина;

	Возврат МенеджерЗначения;
КонецФункции

Функция СО_НедоставленныеСерверныеОповещенияСеанса(Знач Параметры) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("СерверныеОповещения",       Новый Массив);
	Результат.Вставить("ДатаПоследнегоОповещения",  Параметры.ДатаПоследнегоОповещения);
	Результат.Вставить("МинимальныйПериодПроверки", Параметры.МинимальныйПериодПроверки);
	Результат.Вставить("ДополнительныеРезультаты",  Новый Соответствие);

	БазоваяПодсистемаСервер.ЖР_ЗаписатьСобытияВЖурналРегистрации(Параметры.СообщенияДляЖурналаРегистрации);

	БазоваяПодсистемаСервер.ДО_ПриПериодическомПолученииДанныхКлиентаНаСервере(Параметры.ДополнительныеПараметры, Результат.ДополнительныеРезультаты);

	Если Параметры.ПериодическаяОтправкаДанных Тогда
		ИнтеграцияПодсистемСервер.ПриПериодическомПолученииДанныхКлиентаНаСервере(Параметры.ДополнительныеПараметры, Результат.ДополнительныеРезультаты);
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	НоваяДатаПоследнегоОповещения = Параметры.ДатаПоследнегоОповещения;

	СостояниеОтправки = СО_СостояниеОтправкиСерверныхОповещений();

	ДатаСледующейПроверки = СостояниеОтправки.ДатаПоследнейПроверки + СостояниеОтправки.МинимальныйПериодПроверки;

	// Зарезервировано для новых подсистем

	Если НоваяДатаПоследнегоОповещения < СостояниеОтправки.ДатаПоследнейПроверки Тогда
		НоваяДатаПоследнегоОповещения = СостояниеОтправки.ДатаПоследнейПроверки;
	КонецЕсли;

	ИдентификаторПользователяИБ = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	КлючЭтогоСеанса = СО_КлючСеанса();

	Выборка = СО_НовыеСерверныеОповещения(Параметры.ДатаПоследнегоОповещения);
	Пока Выборка.Следующий() Цикл
		Хранилище	= Выборка.СодержимоеОповещения;
		Содержимое	= СО_НовоеСодержимоеОповещения(Хранилище);
		Если ЗначениеЗаполнено(Содержимое.ИмяОповещения) Тогда
			Если ТипЗнч(Содержимое.Адресаты) = Тип("Соответствие") Тогда
				КлючиСеансов = Содержимое.Адресаты.Получить(ИдентификаторПользователяИБ);
				Если ТипЗнч(КлючиСеансов) <> Тип("Массив") Или КлючиСеансов.Найти(КлючЭтогоСеанса) = Неопределено И КлючиСеансов.Найти("*") = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Данные							= СО_НовыеДанныеСообщения();
			Данные.ИмяОповещения			= Содержимое.ИмяОповещения;
			Данные.Результат				= Содержимое.Результат;
			Данные.ИдентификаторОповещения	= Выборка.ИдентификаторОповещения;
			Данные.ДатаДобавления			= Выборка.ДатаДобавления;
			Если Не БазоваяПодсистемаСервер.ДО_ПропуститьОповещение(Данные) Тогда
				Результат.СерверныеОповещения.Добавить(Данные);
			КонецЕсли;
		КонецЕсли;
		НоваяДатаПоследнегоОповещения = Выборка.ДатаДобавления;
	КонецЦикла;

	Если ЗначениеЗаполнено(НоваяДатаПоследнегоОповещения) Тогда
		Результат.ДатаПоследнегоОповещения = НоваяДатаПоследнегоОповещения;
	КонецЕсли;

	Если ЗначениеЗаполнено(СостояниеОтправки.МинимальныйПериодПроверки) Тогда
		Результат.МинимальныйПериодПроверки = СостояниеОтправки.МинимальныйПериодПроверки;
	КонецЕсли;

	ИмяКлючаПараметровОбсуждений = "СтандартныеПодсистемы.БазоваяФункциональность.ИдентификаторыОбсуждений";
	Если Параметры.ДополнительныеПараметры.Получить(ИмяКлючаПараметровОбсуждений) <> Неопределено Тогда
		Результат.ДополнительныеРезультаты.Вставить(ИмяКлючаПараметровОбсуждений, СО_ИдентификаторыОбсуждений());
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

	Возврат Результат;
КонецФункции

Процедура СО_ПодготовитьСерверныеОповещения(СостояниеОтправки, МинимальныйПериодПоПользователям = Неопределено)
	СО_УдалитьУстаревшиеОповещения();

	СостояниеОтправки.ДатаПоследнейПроверки		= ТекущаяДатаСеанса();
	СостояниеОтправки.МинимальныйПериодПроверки	= 60*20;

	ПериодическиеОповещения = СО_ПериодическиеСерверныеОповещения(МинимальныйПериодПоПользователям);

	Для Каждого КлючИЗначение Из ПериодическиеОповещения Цикл
		ИмяОповещения = КлючИЗначение.Ключ;
		Оповещение    = КлючИЗначение.Значение;
		Если СостояниеОтправки.МинимальныйПериодПроверки > Оповещение.ПериодПроверки Тогда
			СостояниеОтправки.МинимальныйПериодПроверки = Оповещение.ПериодПроверки;
		КонецЕсли;
		ДатаПроверки = СостояниеОтправки.ДатыПроверкиПоИменамОповещений.Получить(ИмяОповещения);
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		Если ТипЗнч(ДатаПроверки) = Тип("Дата") И ТекущаяДатаСеанса < ДатаПроверки + Оповещение.ПериодПроверки Тогда
			Продолжить;
		КонецЕсли;
		СостояниеОтправки.ДатыПроверкиПоИменамОповещений.Вставить(ИмяОповещения, ТекущаяДатаСеанса);
		Если Метаданные.ОбщиеМодули.Найти(Оповещение.ИмяМодуляОтправки) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МодульОтправки = БазоваяПодсистемаСервер.ОН_ОбщийМодуль(Оповещение.ИмяМодуляОтправки);
		Попытка
			МодульОтправки.ПриОтправкеСерверногоОповещения(ИмяОповещения, КлючИЗначение.Значение.ВариантыПараметров);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = СтрШаблон("При вызове процедуры ""%1"" возникла ошибка:
				           |%2", Оповещение.ИмяМодуляОтправки + ".ПриОтправкеСерверногоОповещения", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			ЗаписьЖурналаРегистрации("Серверные оповещения.Ошибка работы фонового задания", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецПопытки;
	КонецЦикла;

	СО_УточнитьМинимальныйПериодПроверки(СостояниеОтправки.МинимальныйПериодПроверки);

	СО_ОбновитьСостояниеОтправки(СостояниеОтправки, "ДатаПоследнейПроверки, ДатыПроверкиПоИменамОповещений, МинимальныйПериодПроверки");
КонецПроцедуры

Процедура СО_УстановитьДатыОповещенийСОшибками(Данные, ДатыОповещенийСОшибкамиПоПользователям, ИдентификаторПользователяИБ = Неопределено)
	Данные.Ошибки = Новый Соответствие;

	Если ИдентификаторПользователяИБ = Неопределено Тогда
		Для Каждого КлючИЗначение Из ДатыОповещенийСОшибкамиПоПользователям Цикл
			Если Данные.Адресаты.Получить(КлючИЗначение.Ключ) <> Неопределено Тогда
				Данные.Ошибки.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ДатаОповещенияСОшибкой = ДатыОповещенийСОшибкамиПоПользователям.Получить(ИдентификаторПользователяИБ);
		Если ДатаОповещенияСОшибкой <> Неопределено Тогда
			Данные.Ошибки.Вставить(ИдентификаторПользователяИБ, ДатаОповещенияСОшибкой);
		КонецЕсли;
	КонецЕсли;

	ДатаОповещенияСОшибкой = ДатыОповещенийСОшибкамиПоПользователям.Получить("ВсеПользователи");
	Если ДатаОповещенияСОшибкой <> Неопределено Тогда
		Данные.Ошибки.Вставить("ВсеПользователи", ДатаОповещенияСОшибкой);
	КонецЕсли;
КонецПроцедуры

Функция СО_НовыеСерверныеОповещения(ДатаПоследнегоОповещения)
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	|	ОтправленныеСерверныеОповещения.ИдентификаторОповещения КАК ИдентификаторОповещения,
	|	ОтправленныеСерверныеОповещения.СодержимоеОповещения КАК СодержимоеОповещения,
	|	ОтправленныеСерверныеОповещения.ДатаДобавления КАК ДатаДобавления,
	|	ОтправленныеСерверныеОповещения.ЗаписаноВСистемуВзаимодействия КАК ЗаписаноВСистемуВзаимодействия
	|ИЗ
	|	РегистрСведений.ОтправленныеСерверныеОповещения КАК ОтправленныеСерверныеОповещения
	|ГДЕ
	|	ОтправленныеСерверныеОповещения.ДатаДобавления >= &ДатаПоследнегоОповещения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтправленныеСерверныеОповещения.ДатаДобавления,
	|	ОтправленныеСерверныеОповещения.ДатаДобавленияМиллисекунды";
	Запрос.УстановитьПараметр("ДатаПоследнегоОповещения", ДатаПоследнегоОповещения);

	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция СО_НовыйВариантПараметровСерверногоОповещения()
	ВариантПараметров = Новый Структура;
	ВариантПараметров.Вставить("Параметры");
	ВариантПараметров.Вставить("Адресаты", Новый Соответствие);

	Возврат ВариантПараметров;
КонецФункции

Функция СО_ПериодическиеСерверныеОповещения(МинимальныйПериодПоПользователям)
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	|	ПериодическиеСерверныеОповещения.КлючСеанса КАК КлючСеанса,
	|	ПериодическиеСерверныеОповещения.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ,
	|	ПериодическиеСерверныеОповещения.Оповещения КАК Оповещения
	|ИЗ
	|	РегистрСведений.ПериодическиеСерверныеОповещения КАК ПериодическиеСерверныеОповещения";

	Оповещения										= Новый Соответствие;
	ВариантыПараметровОповещенийПоКлючамЗначений	= Новый Соответствие;

	КлючиАктивныхСеансов = Новый Соответствие;
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	Для Каждого Сеанс Из Сеансы Цикл
		КлючиАктивныхСеансов.Вставить(СО_КлючСеанса(Сеанс), Истина);
	КонецЦикла;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если КлючиАктивныхСеансов.Получить(Выборка.КлючСеанса) = Неопределено Тогда
			НаборЗаписей = СО_СлужебныйНаборЗаписей(РегистрыСведений.ПериодическиеСерверныеОповещения);
			НаборЗаписей.Отбор.КлючСеанса.Установить(Выборка.КлючСеанса);
			НаборЗаписей.Записать();
			Продолжить;
		КонецЕсли;
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			Выборка.ИдентификаторПользователяИБ);
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОповещенияСеанса = СО_ПериодическиеСерверныеОповещенияСеанса(Выборка.Оповещения);
		Если Не ЗначениеЗаполнено(ОповещенияСеанса) Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого КлючИЗначение Из ОповещенияСеанса Цикл
			ИмяОповещения = КлючИЗначение.Ключ;
			Если ТипЗнч(КлючИЗначение.Значение) <> Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			Оповещение = Оповещения.Получить(ИмяОповещения);
			Если Оповещение = Неопределено Тогда
				Оповещение = Новый Структура;
				Оповещение.Вставить("ИмяМодуляОтправки", "");
				Оповещение.Вставить("ПериодПроверки", 20*60);
				ЗаполнитьЗначенияСвойств(Оповещение, КлючИЗначение.Значение);
				Оповещение.Вставить("ВариантыПараметров", Новый Массив);
				Оповещения.Вставить(ИмяОповещения, Оповещение);
			КонецЕсли;
			ПараметрыОповещения = Неопределено;
			КлючИЗначение.Значение.Свойство("Параметры", ПараметрыОповещения);
			ВариантыПараметровПоКлючамЗначений = ВариантыПараметровОповещенийПоКлючамЗначений.Получить(ИмяОповещения);
			Если ВариантыПараметровПоКлючамЗначений = Неопределено Тогда
				ВариантыПараметровПоКлючамЗначений = Новый Соответствие;
				ВариантыПараметровОповещенийПоКлючамЗначений.Вставить(ИмяОповещения, ВариантыПараметровПоКлючамЗначений);
			КонецЕсли;
			КлючЗначенияПараметров = ЗначениеВСтрокуВнутр(ПараметрыОповещения);
			ВариантПараметров = ВариантыПараметровПоКлючамЗначений.Получить(КлючЗначенияПараметров);
			Если ВариантПараметров = Неопределено Тогда
				ВариантПараметров = СО_НовыйВариантПараметровСерверногоОповещения();
				ВариантыПараметровПоКлючамЗначений.Вставить(КлючЗначенияПараметров, ВариантПараметров);
				ВариантПараметров.Параметры = ПараметрыОповещения;
				Оповещение.ВариантыПараметров.Добавить(ВариантПараметров);
			КонецЕсли;
			КлючиСеансов = ВариантПараметров.Адресаты.Получить(Выборка.ИдентификаторПользователяИБ);
			Если КлючиСеансов = Неопределено Тогда
				КлючиСеансов = Новый Массив;
				ВариантПараметров.Адресаты.Вставить(Выборка.ИдентификаторПользователяИБ, КлючиСеансов);
			КонецЕсли;
			Если КлючиСеансов.Найти(Выборка.КлючСеанса) = Неопределено Тогда
				КлючиСеансов.Добавить(Выборка.КлючСеанса);
			КонецЕсли;
			Если МинимальныйПериодПоПользователям <> Неопределено Тогда
				ТекущийПериод = МинимальныйПериодПоПользователям.Получить(Выборка.ИдентификаторПользователяИБ);
				Если ТекущийПериод = Неопределено Или ТекущийПериод > Оповещение.ПериодПроверки Тогда
					МинимальныйПериодПоПользователям.Вставить(Выборка.ИдентификаторПользователяИБ, Оповещение.ПериодПроверки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Оповещения;
КонецФункции

Процедура СО_ОбновитьЗаданиеОтправкаСерверныхОповещенийКлиентамЕслиНетОповещений(МинимальныйПериодПроверки)
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	РегистрСведений.ПериодическиеСерверныеОповещения КАК ПериодическиеСерверныеОповещения";

	ЗаданиеОтключено = Ложь;
	Если Запрос.Выполнить().Пустой() Тогда
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("РегистрСведений.ПериодическиеСерверныеОповещения");

		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			Если Запрос.Выполнить().Пустой() Тогда
				СО_НастроитьЗаданиеОтправкаСерверныхОповещенийКлиентам(Ложь);
				ЗаданиеОтключено = Истина;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();

			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;

	Если Не ЗаданиеОтключено Тогда
		СО_НастроитьЗаданиеОтправкаСерверныхОповещенийКлиентам(Истина, МинимальныйПериодПроверки);
	КонецЕсли;
КонецПроцедуры

Функция СО_ПериодическиеСерверныеОповещенияСеанса(ХранилищеОповещений)
	Если ТипЗнч(ХранилищеОповещений) <> Тип("ХранилищеЗначения") Тогда
		Возврат Новый Соответствие;
	КонецЕсли;

	Оповещения = ХранилищеОповещений.Получить();
	Если ТипЗнч(Оповещения) <> Тип("Соответствие") Тогда
		Возврат Новый Соответствие;
	КонецЕсли;

	Возврат Оповещения;
КонецФункции

#КонецОбласти
