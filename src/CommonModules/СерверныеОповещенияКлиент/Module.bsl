///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СерверныеОповещения

Процедура СО_ПодключитьОбработчикПроверкиПолученияСерверныхОповещений(Интервал = 1) Экспорт
	Если Интервал < 1 Тогда
		Интервал = 1;
	ИначеЕсли Интервал > 60 Тогда
		Интервал = 60;
	КонецЕсли;

	ПодключитьОбработчикОжидания("СО_ОбработчикПроверкиПолученияСерверныхОповещений", Интервал, Истина);
КонецПроцедуры

Процедура ПередНачаломРаботыСистемы(Параметры) Экспорт
	ПараметрыКлиента = БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиентаПриЗапуске();

	Если Не ПараметрыКлиента.Свойство("СерверныеОповещения") Тогда
		Возврат;
	КонецЕсли;

	ПараметрыСерверныхОповещений	= ПараметрыКлиента.СерверныеОповещения;
	СостояниеПолучения				= СО_СостояниеПолучения();
	ЗаполнитьЗначенияСвойств(СостояниеПолучения, ПараметрыСерверныхОповещений);
	Параметры.ПолученныеПараметрыКлиента.Вставить("СерверныеОповещения");

	ДатаСеанса													= БазоваяПодсистемаКлиент.ОН_ДатаСеанса();
	СостояниеПолучения.ДатаОбновленияСостояния					= ДатаСеанса;
	СостояниеПолучения.ДатаПоследнегоПолученияСообщения			= ДатаСеанса;
	СостояниеПолучения.ДатаПоследнейПериодическойОтправкиДанных	= ДатаСеанса;

	СостояниеПолучения.ПроверкаРазрешена = Истина;
	СО_ПодключитьОбработчикПроверкиПолученияСерверныхОповещений();
КонецПроцедуры

Процедура СО_ПослеНачалаРаботыСистемы() Экспорт
	СостояниеПолучения = СО_СостояниеПолучения();

	Если СостояниеПолучения.СеансАдминистратораСервиса Тогда
		Возврат;
	КонецЕсли;

	СостояниеПолучения.ПериодическаяОтправкаДанныхРазрешена = Истина;
КонецПроцедуры

Функция СО_СостояниеПолучения() Экспорт
	ИмяПараметраПриложения	= "СтандартныеПодсистемы.БазоваяФункциональность.СерверныеОповещения";
	СостояниеПолучения		= ПараметрыПриложения.Получить(ИмяПараметраПриложения);
	Если СостояниеПолучения = Неопределено Тогда
		СостояниеПолучения = СО_НовоеСостояниеПолучения();
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, СостояниеПолучения);
	КонецЕсли;

	Возврат СостояниеПолучения;
КонецФункции

Функция СО_НовоеСостояниеПолучения()
	Состояние = Новый Структура;
	Состояние.Вставить("ПроверкаРазрешена",									Ложь);
	Состояние.Вставить("СеансАдминистратораСервиса",						Ложь);
	Состояние.Вставить("ПериодическаяОтправкаДанныхРазрешена",				Ложь);
	Состояние.Вставить("ПроверкаВыполняется",								Ложь);
	Состояние.Вставить("КлючСеанса",										"");
	Состояние.Вставить("ИдентификаторПользователяИБ",						 Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Состояние.Вставить("ДатаОбновленияСостояния",							'00010101');
	Состояние.Вставить("ДатаПоследнегоПолученияСообщения",					'00010101');
	Состояние.Вставить("МинимальныйПериод",									60);
	Состояние.Вставить("ДатаПоследнегоОповещения",							'00010101');
	Состояние.Вставить("Оповещения",										Новый Соответствие);
	Состояние.Вставить("ПолученныеОповещения",								Новый Массив);
	Состояние.Вставить("ИдентификаторЛичногоОбсуждения",					Неопределено);
	Состояние.Вставить("ИдентификаторОбщегоОбсуждения",						Неопределено);
	Состояние.Вставить("ОбработчикНовыхЛичныхСообщенийПодключен",			Ложь);
	Состояние.Вставить("ОбработчикНовыхОбщихСообщенийПодключен",			Ложь);
	Состояние.Вставить("НачатоПодключениеОбработчикаНовыхЛичныхСообщений",	Ложь);
	Состояние.Вставить("НачатоПодключениеОбработчикаНовыхОбщихСообщений",	Ложь);
	Состояние.Вставить("ДатаПоследнейПериодическойОтправкиДанных",			'00010101');

	Возврат Состояние;
КонецФункции

Процедура СО_ПроверитьПолучитьСерверныеОповещения() Экспорт
	СостояниеПолучения = СО_СостояниеПолучения();
	Если Не СостояниеПолучения.ПроверкаРазрешена Тогда
		Возврат;
	КонецЕсли;

	Интервал = СостояниеПолучения.МинимальныйПериод;
	ОбсужденияАктивны = СостояниеПолучения.ОбработчикНовыхЛичныхСообщенийПодключен И СостояниеПолучения.ДатаПоследнегоПолученияСообщения + 60 > БазоваяПодсистемаКлиент.ОН_ДатаСеанса();

	ДополнительныеПараметры			= Новый Соответствие;
	ИмяКлючаПараметровОбсуждений	= "СтандартныеПодсистемы.БазоваяФункциональность.ИдентификаторыОбсуждений";

	БазоваяПодсистемаКлиент.ДО_ПередПериодическойОтправкойДанныхКлиентаНаСервер(ДополнительныеПараметры, ОбсужденияАктивны, Интервал);

	ТекущаяДатаСеанса			= БазоваяПодсистемаКлиент.ОН_ДатаСеанса();
	ПериодическаяОтправкаДанных	= Ложь;

	Если СостояниеПолучения.ДатаПоследнейПериодическойОтправкиДанных + 60 < ТекущаяДатаСеанса Тогда
		Если СостояниеПолучения.ПериодическаяОтправкаДанныхРазрешена Тогда
			ИнтеграцияПодсистемКлиент.ПередПериодическойОтправкойДанныхКлиентаНаСервер(ДополнительныеПараметры);
			ПериодическаяОтправкаДанных = Истина;
		КонецЕсли;
		СостояниеПолучения.ДатаПоследнейПериодическойОтправкиДанных = ТекущаяДатаСеанса;
		СообщенияДляЖурналаРегистрации = ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"];
		Если СостояниеПолучения.ИдентификаторЛичногоОбсуждения = Неопределено И СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
			ДополнительныеПараметры.Вставить(ИмяКлючаПараметровОбсуждений, Ложь);
		КонецЕсли;
	КонецЕсли;

	Если СО_ОповещенияПолучены(СостояниеПолучения) И Не ЗначениеЗаполнено(ДополнительныеПараметры) И Не ЗначениеЗаполнено(СообщенияДляЖурналаРегистрации) Тогда
		СО_ПодключитьОбработчикПроверкиПолученияСерверныхОповещений(Интервал);

		Возврат;
	КонецЕсли;

	ПараметрыОбщегоВызова									= СО_НовыеПараметрыОбщегоСерверногоВызова();
	ПараметрыОбщегоВызова.ДатаПоследнегоОповещения			= СостояниеПолучения.ДатаПоследнегоОповещения;
	ПараметрыОбщегоВызова.МинимальныйПериодПроверки			= СостояниеПолучения.МинимальныйПериод;
	ПараметрыОбщегоВызова.ДополнительныеПараметры			= ДополнительныеПараметры;
	ПараметрыОбщегоВызова.ПериодическаяОтправкаДанных		= ПериодическаяОтправкаДанных;
	ПараметрыОбщегоВызова.СообщенияДляЖурналаРегистрации	= ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"];

	РезультатОбщегоВызова = СерверныеОповещенияВызовСервера.сСО_НедоставленныеСерверныеОповещенияСеанса(ПараметрыОбщегоВызова);

	Если ПараметрыОбщегоВызова.СообщенияДляЖурналаРегистрации <> Неопределено Тогда
		ПараметрыОбщегоВызова.СообщенияДляЖурналаРегистрации.Очистить();
	КонецЕсли;

	ДополнительныеРезультаты = РезультатОбщегоВызова.ДополнительныеРезультаты;
	ИдентификаторыОбсуждений = ДополнительныеРезультаты.Получить(ИмяКлючаПараметровОбсуждений);
	Если ИдентификаторыОбсуждений <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СостояниеПолучения, ИдентификаторыОбсуждений);
		СО_ПодключитьОбработчикНовыхСообщений(СостояниеПолучения);
	КонецЕсли;

	Для Каждого СерверноеОповещение Из РезультатОбщегоВызова.СерверныеОповещения Цикл
		СО_ОбработатьСерверноеОповещениеНаКлиенте(СостояниеПолучения, СерверноеОповещение);
	КонецЦикла;

	БазоваяПодсистемаКлиент.ДО_ПослеПериодическогоПолученияДанныхКлиентаНаСервере(ДополнительныеРезультаты, ОбсужденияАктивны, Интервал);

	// Зарезервировано для новых подсистем

	Если ПериодическаяОтправкаДанных Тогда
		ИнтеграцияПодсистемКлиент.ПослеПериодическогоПолученияДанныхКлиентаНаСервере(ДополнительныеРезультаты);
	КонецЕсли;

	СостояниеПолучения.ДатаПоследнегоОповещения = РезультатОбщегоВызова.ДатаПоследнегоОповещения;
	СостояниеПолучения.МинимальныйПериод        = РезультатОбщегоВызова.МинимальныйПериодПроверки;
	СостояниеПолучения.ДатаОбновленияСостояния  = БазоваяПодсистемаКлиент.ОН_ДатаСеанса();

	Если Интервал > СостояниеПолучения.МинимальныйПериод Тогда
		Интервал = СостояниеПолучения.МинимальныйПериод;
	КонецЕсли;

	СО_ПодключитьОбработчикПроверкиПолученияСерверныхОповещений(Интервал);
КонецПроцедуры

Процедура СО_ОбработатьСерверноеОповещениеНаКлиенте(СостояниеПолучения, СерверноеОповещение)
	Если СО_ОповещениеУжеПолучено(СостояниеПолучения, СерверноеОповещение) Тогда
		Возврат;
	КонецЕсли;

	ИмяОповещения = СерверноеОповещение.ИмяОповещения;
	Результат     = СерверноеОповещение.Результат;

	Оповещение = СостояниеПолучения.Оповещения.Получить(ИмяОповещения);
	Если Оповещение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МодульОбработки = БазоваяПодсистемаКлиент.ОН_ОбщийМодуль(Оповещение.ИмяМодуляПолучения);
	Попытка
		МодульОбработки.ПриПолученииСерверногоОповещения(ИмяОповещения, Результат);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = СтрШаблон("При вызове процедуры ""%1"" возникла ошибка:
			           |%2", Оповещение.ИмяМодуляПолучения + ".ПриПолученииСерверногоОповещения", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		БазоваяПодсистемаКлиент.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Серверные оповещения.Ошибка обработки полученного оповещения", "Ошибка", ТекстОшибки);
	КонецПопытки;
КонецПроцедуры

Функция СО_ОповещенияПолучены(СостояниеПолучения)
	СО_ПодключитьОбработчикНовыхСообщений(СостояниеПолучения);

	Граница	= СостояниеПолучения.ДатаОбновленияСостояния + СостояниеПолучения.МинимальныйПериод;

	Запас	= Граница - БазоваяПодсистемаКлиент.ОН_ДатаСеанса();

	Если Запас > 0 Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Функция СО_НовыеПараметрыОбщегоСерверногоВызова() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ДатаПоследнегоОповещения",			'00010101');
	Результат.Вставить("МинимальныйПериодПроверки",			60);
	Результат.Вставить("ДополнительныеПараметры",			Новый Соответствие);
	Результат.Вставить("СообщенияДляЖурналаРегистрации",	Неопределено);
	Результат.Вставить("ПериодическаяОтправкаДанных",		Ложь);

	Возврат Результат;
КонецФункции

Процедура СО_ПодключитьОбработчикНовыхСообщений(СостояниеПолучения)
	Если СостояниеПолучения.ИдентификаторЛичногоОбсуждения <> Неопределено
	   И Не СостояниеПолучения.ОбработчикНовыхЛичныхСообщенийПодключен
	   И Не СостояниеПолучения.НачатоПодключениеОбработчикаНовыхЛичныхСообщений Тогда

		Контекст = Новый Структура("СостояниеПолучения", СостояниеПолучения);
		Попытка
			СистемаВзаимодействия.НачатьПодключениеОбработчикаНовыхСообщений(
				Новый ОписаниеОповещения("СО_ПослеПодключенияОбработчикаНовыхЛичныхСообщений", ЭтотОбъект, Контекст, "СО_ПослеОшибкиПодключенияОбработчикаНовыхЛичныхСообщений", ЭтотОбъект),
				Новый ИдентификаторОбсужденияСистемыВзаимодействия(СостояниеПолучения.ИдентификаторЛичногоОбсуждения),
				Новый ОписаниеОповещения("СО_ПриПолученииНовогоЛичногоСообщенияСистемыВзаимодействия", ЭтотОбъект, Контекст, "СО_ПриОшибкеПолученияНовогоЛичногоСообщенияСистемыВзаимодействия", ЭтотОбъект),
				Неопределено);
		Исключение
			СО_ПослеОшибкиПодключенияОбработчикаНовыхЛичныхСообщений(ИнформацияОбОшибке(), Ложь, Контекст);
		КонецПопытки;
	КонецЕсли;

	Если СостояниеПолучения.ИдентификаторОбщегоОбсуждения <> Неопределено
	   И Не СостояниеПолучения.ОбработчикНовыхОбщихСообщенийПодключен
	   И Не СостояниеПолучения.НачатоПодключениеОбработчикаНовыхОбщихСообщений Тогда

		Контекст = Новый Структура("СостояниеПолучения", СостояниеПолучения);
		Попытка
			СистемаВзаимодействия.НачатьПодключениеОбработчикаНовыхСообщений(
				Новый ОписаниеОповещения("СО_ПослеПодключенияОбработчикаНовыхОбщихСообщений", ЭтотОбъект, Контекст, "СО_ПослеОшибкиПодключенияОбработчикаНовыхОбщихСообщений", ЭтотОбъект),
				Новый ИдентификаторОбсужденияСистемыВзаимодействия(СостояниеПолучения.ИдентификаторОбщегоОбсуждения),
				Новый ОписаниеОповещения("СО_ПриПолученииНовогоОбщегоСообщенияСистемыВзаимодействия", ЭтотОбъект, Контекст, "СО_ПриОшибкеПолученияНовогоОбщегоСообщенияСистемыВзаимодействия", ЭтотОбъект),
				Неопределено);
		Исключение
			СО_ПослеОшибкиПодключенияОбработчикаНовыхОбщихСообщений(ИнформацияОбОшибке(), Ложь, Контекст);
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Процедура СО_ПослеПодключенияОбработчикаНовыхЛичныхСообщений(Контекст) Экспорт
	Контекст.СостояниеПолучения.НачатоПодключениеОбработчикаНовыхЛичныхСообщений	= Ложь;
	Контекст.СостояниеПолучения.ОбработчикНовыхЛичныхСообщенийПодключен				= Истина;
КонецПроцедуры

Процедура СО_ПослеОшибкиПодключенияОбработчикаНовыхЛичныхСообщений(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	СтандартнаяОбработка = Ложь;

	Контекст.СостояниеПолучения.НачатоПодключениеОбработчикаНовыхЛичныхСообщений = Ложь;

	БазоваяПодсистемаКлиент.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Серверные оповещения.Ошибка подключения обработчика новых личных сообщений", "Ошибка", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
КонецПроцедуры

Процедура СО_ПриПолученииНовогоЛичногоСообщенияСистемыВзаимодействия(Сообщение, Контекст) Экспорт
	СО_ПриПолученииНовогоСообщенияСистемыВзаимодействия(Сообщение, Контекст);
КонецПроцедуры

Процедура СО_ПриОшибкеПолученияНовогоЛичногоСообщенияСистемыВзаимодействия(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	СтандартнаяОбработка = Ложь;

	БазоваяПодсистемаКлиент.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Серверные оповещения.Ошибка получения нового личного сообщения", "Ошибка", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
КонецПроцедуры

Процедура СО_ПослеПодключенияОбработчикаНовыхОбщихСообщений(Контекст) Экспорт
	Контекст.СостояниеПолучения.НачатоПодключениеОбработчикаНовыхОбщихСообщений = Ложь;
	Контекст.СостояниеПолучения.ОбработчикНовыхОбщихСообщенийПодключен = Истина;
КонецПроцедуры

Процедура СО_ПослеОшибкиПодключенияОбработчикаНовыхОбщихСообщений(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	СтандартнаяОбработка = Ложь;

	Контекст.СостояниеПолучения.НачатоПодключениеОбработчикаНовыхОбщихСообщений = Ложь;

	БазоваяПодсистемаКлиент.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Серверные оповещения.Ошибка подключения обработчика новых общих сообщений", "Ошибка", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
КонецПроцедуры

Процедура СО_ПриПолученииНовогоОбщегоСообщенияСистемыВзаимодействия(Сообщение, Контекст) Экспорт
	СО_ПриПолученииНовогоСообщенияСистемыВзаимодействия(Сообщение, Контекст);
КонецПроцедуры

Процедура СО_ПриОшибкеПолученияНовогоОбщегоСообщенияСистемыВзаимодействия(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	СтандартнаяОбработка = Ложь;

	БазоваяПодсистемаКлиент.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Серверные оповещения.Ошибка получения нового общего сообщения", "Ошибка", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
КонецПроцедуры

Процедура СО_ПриПолученииНовогоСообщенияСистемыВзаимодействия(Сообщение, Контекст)
	СостояниеПолучения = Контекст.СостояниеПолучения;

	Если Не СостояниеПолучения.ПроверкаРазрешена Или ПараметрыПриложения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СостояниеПолучения.ДатаПоследнегоПолученияСообщения = БазоваяПодсистемаКлиент.ОН_ДатаСеанса();

	Если ТипЗнч(Сообщение.Данные) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	Данные = Сообщение.Данные;
	Если Не Данные.Свойство("ИмяОповещения") Тогда
		Возврат;
	КонецЕсли;

	Если Данные.ИмяОповещения <> "НетСерверныхОповещений" Тогда
		Если Данные.Адресаты <> Неопределено Тогда
			КлючиСеансов = Данные.Адресаты.Получить(СостояниеПолучения.ИдентификаторПользователяИБ);
			Если ТипЗнч(КлючиСеансов) <> Тип("Массив") Или КлючиСеансов.Найти(СостояниеПолучения.КлючСеанса) = Неопределено И КлючиСеансов.Найти("*") = Неопределено Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		СО_ОбработатьСерверноеОповещениеНаКлиенте(СостояниеПолучения, Данные);
		Если Не Данные.ОтправленоИзОчереди Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ДатаПоследнегоОповещения = Данные.Ошибки.Получить(СостояниеПолучения.ИдентификаторПользователяИБ);
	Если ДатаПоследнегоОповещения = Неопределено Тогда
		ДатаПоследнегоОповещения = Данные.Ошибки.Получить("ВсеПользователи");
		Если ДатаПоследнегоОповещения = Неопределено Тогда
			ДатаПоследнегоОповещения					= Данные.ДатаДобавления;
			СостояниеПолучения.ДатаОбновленияСостояния	= БазоваяПодсистемаКлиент.ОН_ДатаСеанса();
		КонецЕсли;
	КонецЕсли;
	Если СостояниеПолучения.ДатаПоследнегоОповещения < ДатаПоследнегоОповещения Тогда
		СостояниеПолучения.ДатаПоследнегоОповещения = ДатаПоследнегоОповещения;
	КонецЕсли;
КонецПроцедуры

Функция СО_ОповещениеУжеПолучено(СостояниеПолучения, СерверноеОповещение)
	Если СерверноеОповещение.ДатаДобавления < СостояниеПолучения.ДатаПоследнегоОповещения Тогда
		Возврат Истина;
	КонецЕсли;

	ПолученныеОповещения = СостояниеПолучения.ПолученныеОповещения;

	Если ПолученныеОповещения.Найти(СерверноеОповещение.ИдентификаторОповещения) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	ПолученныеОповещения.Добавить(СерверноеОповещение.ИдентификаторОповещения);
	Если ПолученныеОповещения.Количество() > 100 Тогда
		ПолученныеОповещения.Удалить(0);
	КонецЕсли;

	Возврат Ложь;
КонецФункции

#КонецОбласти
