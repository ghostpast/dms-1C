///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ВариантыОтчетов

Функция ВО_ВариантОтчета(Отчет, КлючВарианта) Экспорт
	Результат = Неопределено;

	Запрос = Новый Запрос;
	Если ТипЗнч(Отчет) = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Отчеты.Ссылка КАК ВариантОтчета
		|ИЗ
		|	РегистрСведений.ПредопределенныеВариантыОтчетовВерсийРасширений КАК ОтчетыРасширений
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов КАК Отчеты
		|		ПО Отчеты.ПредопределенныйВариант = ОтчетыРасширений.Вариант
		|ГДЕ
		|	ОтчетыРасширений.Отчет = &Отчет
		|	И ОтчетыРасширений.ВерсияРасширений = &ВерсияРасширений
		|	И ОтчетыРасширений.КлючВарианта = &КлючВарианта
		|
		|УПОРЯДОЧИТЬ ПО
		|	Отчеты.ПометкаУдаления";

		Запрос.УстановитьПараметр("ВерсияРасширений", ПараметрыСеанса.ВерсияРасширений);
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВариантыОтчетов.Ссылка КАК ВариантОтчета
		|ИЗ
		|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		|ГДЕ
		|	ВариантыОтчетов.Отчет = &Отчет
		|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВариантыОтчетов.ПометкаУдаления";
	КонецЕсли;

	Запрос.УстановитьПараметр("Отчет", Отчет);
	Запрос.УстановитьПараметр("КлючВарианта", КлючВарианта);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.ВариантОтчета;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ВО_ОписаниеВарианта(Настройки, Отчет, КлючВарианта) Экспорт
	Если ТипЗнч(Отчет) = Тип("СтрокаТаблицыЗначений") Тогда
		ОписаниеОтчета = Отчет;
	Иначе
		ОписаниеОтчета = ВО_ОписаниеОтчета(Настройки, Отчет);
	КонецЕсли;

	Если Настройки.Найти(ОписаниеОтчета.Тип, "Тип") = Неопределено Тогда
		Возврат ОписаниеОтчета;
	КонецЕсли;

	МетаданныеОтчета	= ОписаниеОтчета.Метаданные; // ОбъектМетаданныхОтчет
	КлючВариантаОтчета	= ?(ПустаяСтрока(КлючВарианта), ОписаниеОтчета.ОсновнойВариант, КлючВарианта);

	Поиск		= Новый Структура("Отчет, КлючВарианта, ЭтоВариант", ОписаниеОтчета.Отчет, КлючВариантаОтчета, Истина);
	Результат	= Настройки.НайтиСтроки(Поиск);

	Если Результат.Количество() <> 1 Тогда
		ВызватьИсключение СтрШаблон("Недопустимое значение параметра КлючВарианта в функции ВариантыОтчетовСервер.ВО_ОписаниеВарианта:
				|вариант ""%1"" отсутствует в отчете ""%2"".",
			КлючВариантаОтчета, МетаданныеОтчета.Имя);
	КонецЕсли;

	ВО_ЗаполнитьОписаниеСтрокиВарианта(Результат[0], ОписаниеОтчета);

	Возврат Результат[0];
КонецФункции

Процедура ВО_УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОтчетИлиПодсистема, ГруппироватьПоОтчетам) Экспорт
	Если ТипЗнч(ГруппироватьПоОтчетам) <> Тип("Булево") Тогда
		ГруппироватьПоОтчетам = (ГруппироватьПоОтчетам = ВРег("ПоОтчетам"));
	КонецЕсли;

	Если ТипЗнч(ОтчетИлиПодсистема) = Тип("СтрокаТаблицыЗначений") Или Метаданные.Отчеты.Содержит(ОтчетИлиПодсистема) Тогда
		ВО_УстановитьРежимВыводаОтчетаВПанеляхОтчетов(Настройки, ОтчетИлиПодсистема, ГруппироватьПоОтчетам);

		Возврат;
	КонецЕсли;

	Подсистемы			= Новый Массив;
	Подсистемы.Добавить(ОтчетИлиПодсистема);
	Количество			= 1;
	ОбработанныеОбъекты	= Новый Соответствие;
	Пока Количество > 0 Цикл
		Количество	= Количество - 1;
		Подсистема	= Подсистемы[0];
		Подсистемы.Удалить(0);
		Для Каждого ВложеннаяПодсистема Из Подсистема.Подсистемы Цикл
			Количество	= Количество + 1;
			Подсистемы.Добавить(ВложеннаяПодсистема);
		КонецЦикла;
		Для Каждого ОбъектМетаданных Из ОтчетИлиПодсистема.Состав Цикл
			Если ОбработанныеОбъекты[ОбъектМетаданных] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;

			ОбработанныеОбъекты[ОбъектМетаданных] = Истина;
			Если Метаданные.Отчеты.Содержит(ОбъектМетаданных) Тогда
				ВО_УстановитьРежимВыводаОтчетаВПанеляхОтчетов(Настройки, ОбъектМетаданных, ГруппироватьПоОтчетам);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура ВО_ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	Параметры.Вставить("ВариантыОтчетов", Новый ФиксированнаяСтруктура(ВО_ПараметрыКлиента()));
КонецПроцедуры

Процедура ВО_ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	// СовместноДляПользователейИВнешнихПользователей.
	НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Добавить(Метаданные.Роли.ДобавлениеИзменениеЛичныхВариантовОтчетов.Имя);
КонецПроцедуры

Процедура ВО_ПриЗаполненииВсехПараметровРаботыРасширений() Экспорт
	Настройки						= ВО_ПараметрыОбновленияНастроек();
	Настройки.Конфигурация			= Ложь;
	Настройки.Расширения			= Истина;
	Настройки.ОбщиеДанные			= Истина;
	Настройки.РазделенныеДанные		= Истина;
	Настройки.Оперативное			= Истина;
	Настройки.Отложенное			= Истина;

	ВО_Обновить(Настройки);
КонецПроцедуры

Функция ВО_ПараметрыКлиента() Экспорт
	ПараметрыКлиента	= Новый Структура;
	ПараметрыКлиента.Вставить("ВыполнятьЗамеры", Ложь);
	// Зарезервировано для новых подсистем

	Возврат ПараметрыКлиента;
КонецФункции

Функция ВО_ПараметрыОбновленияНастроек() Экспорт
	Настройки	= Новый Структура;
	Настройки.Вставить("Конфигурация",				Истина);
	Настройки.Вставить("Расширения",				Ложь);
	Настройки.Вставить("ОбщиеДанные",				Истина);
	Настройки.Вставить("РазделенныеДанные",			Истина);
	Настройки.Вставить("Оперативное",				Истина);
	Настройки.Вставить("Отложенное",				Ложь);
	Настройки.Вставить("ИндексироватьСхему",		Ложь);
	Настройки.Вставить("ЗаполнятьПредставления",	Истина);

	Если БазоваяПодсистемаСервер.ОН_ЭтоАвтономноеРабочееМесто() Тогда
		Настройки.ОбщиеДанные = Ложь;
	КонецЕсли;

	Настройки.Расширения	= Настройки.РазделенныеДанные;

	Возврат Настройки;
КонецФункции

Функция ВО_Обновить(Знач Настройки = Неопределено) Экспорт
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);

	Если Настройки = Неопределено Тогда
		Настройки	= ВО_ПараметрыОбновленияНастроек();
	КонецЕсли;

	Результат	= Новый Структура;
	Результат.Вставить("ЕстьИзменения", Ложь);

	Если Настройки.Оперативное Тогда
		Если Настройки.ОбщиеДанные Тогда
			Если Настройки.Конфигурация Тогда
				ПромежуточныйРезультат = ВО_ОперативноеОбновлениеОбщихДанных("ОбщиеДанныеКонфигурации", Неопределено);
				Результат.Вставить("Оперативное_ОбщиеДанные_Конфигурация", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;

			Если Настройки.Расширения Тогда
				ПромежуточныйРезультат = ВО_ОперативноеОбновлениеОбщихДанных("ОбщиеДанныеРасширений", Неопределено);
				Результат.Вставить("Оперативное_ОбщиеДанные_Расширения", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если Настройки.РазделенныеДанные Тогда
			Если Настройки.Конфигурация Тогда
				ПромежуточныйРезультат = ВО_АктуализироватьВариантыОтчетов("РазделенныеДанныеКонфигурации");
				Результат.Вставить("Оперативное_РазделенныеДанные_Конфигурация", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;

			Если Настройки.Расширения Тогда
				ПромежуточныйРезультат = ВО_АктуализироватьВариантыОтчетов("РазделенныеДанныеРасширений");
				Результат.Вставить("Оперативное_РазделенныеДанные_Расширения", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Настройки.Отложенное Тогда
		Если Настройки.ОбщиеДанные Тогда
			Если Настройки.Конфигурация Тогда
				ПромежуточныйРезультат = ВО_ОбновитьИндексПоиска("ОбщиеДанныеКонфигурации", Настройки.ИндексироватьСхему);
				Результат.Вставить("Отложенное_ОбщиеДанные_Конфигурация", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;

			Если Настройки.Расширения Тогда
				ПромежуточныйРезультат = ВО_ОбновитьИндексПоиска("ОбщиеДанныеРасширений", Настройки.ИндексироватьСхему);
				Результат.Вставить("Отложенное_ОбщиеДанные_Расширения", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если Настройки.РазделенныеДанные Тогда
			Если Настройки.Конфигурация Тогда
				ПромежуточныйРезультат = ВО_ОбновитьИндексПоиска("РазделенныеДанныеКонфигурации", Настройки.ИндексироватьСхему);
				Результат.Вставить("Отложенное_РазделенныеДанные_Конфигурация", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;

			Если Настройки.Расширения Тогда
				ПромежуточныйРезультат = ВО_ОбновитьИндексПоиска("РазделенныеДанныеРасширений", Настройки.ИндексироватьСхему);
				Результат.Вставить("Отложенное_РазделенныеДанные_Расширения", ПромежуточныйРезультат);
				Если ПромежуточныйРезультат <> Неопределено И ПромежуточныйРезультат.ЕстьИзменения Тогда
					Результат.ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Настройки.ЗаполнятьПредставления Тогда
		ВО_ЗапланироватьЗаполнениеПредставлений();
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ВО_ОперативноеОбновлениеОбщихДанных(Режим, РазделенныеОбработчики)
	////////////////////////////////////////////////////////////////////////////////
	// Выполняется только для предопределенных вариантов отчетов.

	Результат = ВО_РезультатОбновленияОбщихДанных(Режим, РазделенныеОбработчики);

	ВО_АктуализироватьКлючиПредопределенных(Режим, Результат);
	ВО_ПометитьУдаленныеПредопределенные(Режим, Результат);
	ВО_СформироватьТаблицуФункциональныхОпций(Режим, Результат);
	ВО_ПометитьНаУдалениеВариантыУдаленныхОтчетов(Режим, Результат);
	ВО_ЗаписатьТаблицуФункциональныхОпций(Режим, Результат);
	ВО_ЗафиксироватьТекущуюВерсиюРасширений();

	Возврат Результат;
КонецФункции

Функция ВО_АктуализироватьВариантыОтчетов(Режим)
	Результат = ВО_РезультатАктуализацииВариантовОтчетов();

	// 1. Актуализировать разделенные варианты отчетов.
	ВО_АктуализироватьВариантыОтчетовПоПредопределенным(Режим, Результат);

	// 2. Установить пометку удаления вариантов удаленных отчетов.
	ВО_ПометитьНаУдалениеВариантыУдаленныхОтчетов(Режим, Результат);

	Возврат Результат;
КонецФункции

Функция ВО_ОбновитьИндексПоиска(Режим, ИндексироватьСхему)
	ВО_УстановитьПризнакЗаполненияПредставлений(ТекущаяДатаСеанса(), Ложь, Режим);

	ОбщиеДанные	= (Режим = "ОбщиеДанныеКонфигурации" Или Режим = "ОбщиеДанныеРасширений");
	Уточнение	= НРег(ВО_ПредставлениеРежима(Режим)) + ", " + ?(ИндексироватьСхему, "полное", "по изменениям");

	ПредставлениеПроцедуры = СтрШаблон("Обновление индекса поиска (%1)", Уточнение);
	БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Варианты отчетов", УровеньЖурналаРегистрации.Информация,,, СтрШаблон("Запуск процедуры ""%1"".", ПредставлениеПроцедуры));

	Запрос = Новый Запрос;

	Если ОбщиеДанные Тогда
		Поиск = Новый Структура("Отчет, КлючВарианта, ЭтоВариант", , , Истина);
		Если Режим = "ОбщиеДанныеКонфигурации" Тогда
			ПредопределенныеВарианты	= ВО_ПредопределенныеВариантыОтчетов("Внутренний");
			Запрос.Текст				=
			"ВЫБРАТЬ
			|	ПредопределенныеВариантыОтчетов.Ссылка,
			|	ПредопределенныеВариантыОтчетов.Отчет
			|ИЗ
			|	Справочник.ПредопределенныеВариантыОтчетов КАК ПредопределенныеВариантыОтчетов
			|ГДЕ
			|	ПредопределенныеВариантыОтчетов.ПометкаУдаления = ЛОЖЬ";
		ИначеЕсли Режим = "ОбщиеДанныеРасширений" Тогда
			ПредопределенныеВарианты	= ВО_ПредопределенныеВариантыОтчетов("Расширение");
			Запрос.Текст				=
			"ВЫБРАТЬ
			|	ПредопределенныеВариантыОтчетовВерсийРасширений.Вариант КАК Ссылка,
			|	ПредопределенныеВариантыОтчетовВерсийРасширений.Отчет
			|ИЗ
			|	РегистрСведений.ПредопределенныеВариантыОтчетовВерсийРасширений КАК ПредопределенныеВариантыОтчетовВерсийРасширений
			|ГДЕ
			|	ПредопределенныеВариантыОтчетовВерсийРасширений.ВерсияРасширений = &ВерсияРасширений
			|	И ПредопределенныеВариантыОтчетовВерсийРасширений.Вариант <> &ПустаяСсылка";
			Запрос.УстановитьПараметр("ВерсияРасширений",	ПараметрыСеанса.ВерсияРасширений);
			Запрос.УстановитьПараметр("ПустаяСсылка",		Справочники.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка());
		КонецЕсли;
	Иначе
		Запрос.Текст					=
		"ВЫБРАТЬ
		|	ВариантыОтчетов.Ссылка,
		|	ВариантыОтчетов.Отчет
		|ИЗ
		|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		|ГДЕ
		|	ВариантыОтчетов.Пользовательский
		|	И ВариантыОтчетов.ТипОтчета = &ТипОтчета
		|	И ВариантыОтчетов.Отчет В(&ДоступныеОтчеты)";
		Запрос.УстановитьПараметр("ДоступныеОтчеты", Новый Массив(ВариантыОтчетовСерверПовтИсп.ВО_ДоступныеОтчеты(Ложь)));
		Если Режим = "РазделенныеДанныеКонфигурации" Тогда
			Запрос.УстановитьПараметр("ТипОтчета", Перечисления.ТипыОтчетов.Внутренний);
		ИначеЕсли Режим = "РазделенныеДанныеРасширений" Тогда
			Запрос.УстановитьПараметр("ТипОтчета", Перечисления.ТипыОтчетов.Расширение);
		КонецЕсли;
	КонецЕсли;

	ПроблемныеОтчеты	= Новый Соответствие;
	НовыеСведения		= Новый Соответствие;
	СтарыеСведения		= Новый Структура("ХешНастроек, НаименованияПолей, НаименованияПараметровИОтборов, КлючевыеСлова");

	СписокОшибок		= Новый Массив;

	Выборка				= Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ПроблемныеОтчеты[Выборка.Отчет] = Истина Тогда
			Продолжить; // Отчет не подключен, ошибка зарегистрирована ранее.
		КонецЕсли;

		НачатьТранзакцию();
		Попытка
			Блокировка			= Новый БлокировкаДанных;
			ЭлементБлокировки	= Блокировка.Добавить(Выборка.Ссылка.Метаданные().ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();

			ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ВариантыОтчетов, СправочникОбъект.ПредопределенныеВариантыОтчетов, СправочникОбъект.ПредопределенныеВариантыОтчетовРасширений
			Если ВариантОбъект = Неопределено Тогда
				ОтменитьТранзакцию();

				Продолжить;
			КонецЕсли;

			СведенияОбОтчете = НовыеСведения[Выборка.Отчет];
			Если СведенияОбОтчете = Неопределено Тогда
				СведенияОбОтчете				= Новый Структура("НастройкиКД, НастройкиДляПоиска, ОтчетОбъект, ИндексироватьСхему");
				НовыеСведения[Выборка.Отчет]	= СведенияОбОтчете;
			КонецЕсли;

			Если ОбщиеДанные Тогда
				ЗаполнитьЗначенияСвойств(Поиск, ВариантОбъект, "Отчет, КлючВарианта");
				Найденные = ПредопределенныеВарианты.НайтиСтроки(Поиск);
				Если Найденные.Количество() = 0 Тогда
					ТекстОшибки = СтрШаблон("Вариант ""%1"" не существует для отчета ""%2""", ВариантОбъект.КлючВарианта, ВариантОбъект.Отчет);
					ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки, ВариантОбъект.Ссылка);

					ОтменитьТранзакцию();
					Продолжить; // Возникла проблема.
				КонецЕсли;

				ОписаниеВарианта = Найденные[0]; // см. ОписаниеОтчетаПоУмолчанию
				ВО_ЗаполнитьОписаниеСтрокиВарианта(ОписаниеВарианта, ПредопределенныеВарианты.НайтиСтроки(Новый Структура("Отчет,ЭтоВариант", ВариантОбъект.Отчет, Ложь))[0]);

				// Если вариант отключен, то и в поиске он не участвует.
				Если Не ОписаниеВарианта.Включен Тогда
					ОтменитьТранзакцию();

					Продолжить; // Заполнение не требуется.
				КонецЕсли;

				СведенияОбОтчете.НастройкиКД		= БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(ОписаниеВарианта.СистемнаяИнформация, "НастройкиКД");
				СведенияОбОтчете.НастройкиДляПоиска	= ОписаниеВарианта.НастройкиДляПоиска;
			КонецЕсли;

			ЗаполнитьЗначенияСвойств(СтарыеСведения, ВО_ПоляДляПоиска(ВариантОбъект));
			СтарыеСведения.ХешНастроек			= ВариантОбъект.ХешНастроек;
			СведенияОбОтчете.ИндексироватьСхему	= ИндексироватьСхему; // Переиндексировать принудительно, без проверки хеш-суммы.

			Попытка
				СхемаПроиндексирована	= ВО_ЗаполнитьПоляДляПоиска(ВариантОбъект, СведенияОбОтчете);
			Исключение
				ТекстОшибки	= СтрШаблон("Не удалось перестроить индекс поиска для варианта ""%1"" отчета ""%2"". Возможно, отчет неисправен.", ВариантОбъект.КлючВарианта, ВариантОбъект.Отчет);
				ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ВариантОбъект.Ссылка);
				СписокОшибок.Добавить(ТекстОшибки);
				ОтменитьТранзакцию();

				Продолжить;
			КонецПопытки;

			Если СхемаПроиндексирована И ВО_ИзменилисьНастройкиПоиска(ВариантОбъект, СтарыеСведения) Тогда
				Если ОбщиеДанные Тогда
					ВО_ЗаписатьПредопределенный(ВариантОбъект);
				Иначе
					ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьОбъект(ВариантОбъект);
				КонецЕсли;
			КонецЕсли;

			Если СведенияОбОтчете.ОтчетОбъект = Неопределено Тогда
				ПроблемныеОтчеты[Выборка.Отчет] = Истина; // Отчет не был подключен
			КонецЕсли;

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();

			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	ВО_УстановитьПризнакЗаполненияПредставлений(Истина, Ложь, Режим);

	ВО_ЗаписатьВЖурналЗавершениеПроцедуры(ПредставлениеПроцедуры);

	Возврат Неопределено;
КонецФункции

Процедура ВО_АктуализироватьКлючиПредопределенных(Режим, Результат)
	ПредставлениеПроцедуры = СтрШаблон("Обновление ключей вариантов отчетов (%1)", ?(Режим = "ОбщиеДанныеКонфигурации", "метаданные конфигурации", "метаданные расширений"));
	БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Варианты отчетов",УровеньЖурналаРегистрации.Информация,,, СтрШаблон("Запуск процедуры ""%1"".", ПредставлениеПроцедуры));

	// Составить таблицу замен старых ключей вариантов на актуальные.
	Изменения = ВО_ИзмененияКлючей();

	// Получить ссылки вариантов отчетов для замены ключей,
	// исключив из списка замен те варианты отчетов,
	// актуальные ключи которых уже зарегистрированы,
	// или старые ключи которых уже не заняты.
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	|	Изменения.Отчет,
	|	Изменения.СтароеИмяВарианта,
	|	Изменения.АктуальноеИмяВарианта
	|ПОМЕСТИТЬ втИзменения
	|ИЗ
	|	&Изменения КАК Изменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втИзменения.Отчет,
	|	втИзменения.АктуальноеИмяВарианта,
	|	ВариантыОтчетовСтарые.Ссылка
	|ИЗ
	|	втИзменения КАК втИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов КАК ВариантыОтчетовАктуальные
	|		ПО втИзменения.Отчет = ВариантыОтчетовАктуальные.Отчет
	|			И втИзменения.АктуальноеИмяВарианта = ВариантыОтчетовАктуальные.КлючВарианта
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов КАК ВариантыОтчетовСтарые
	|		ПО втИзменения.Отчет = ВариантыОтчетовСтарые.Отчет
	|			И втИзменения.СтароеИмяВарианта = ВариантыОтчетовСтарые.КлючВарианта
	|ГДЕ
	|	ВариантыОтчетовАктуальные.Ссылка ЕСТЬ NULL
	|	И НЕ ВариантыОтчетовСтарые.Ссылка ЕСТЬ NULL ";

	Если Режим = "ОбщиеДанныеРасширений" Тогда
		Запрос.Текст	= СтрЗаменить(Запрос.Текст, ".ПредопределенныеВариантыОтчетов", ".ПредопределенныеВариантыОтчетовРасширений");
		ИмяСправочника	= "Справочник.ПредопределенныеВариантыОтчетовРасширений";
	Иначе
		ИмяСправочника	= "Справочник.ПредопределенныеВариантыОтчетов";
	КонецЕсли;

	Запрос.УстановитьПараметр("Изменения", Изменения);

	// Заменить старые имена вариантов на актуальные.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.ЕстьИзменения			= Истина;
		Результат.ЕстьВажныеИзменения	= Истина;

		НачатьТранзакцию();
		Попытка
			Блокировка					= Новый БлокировкаДанных;
			ЭлементБлокировки			= Блокировка.Добавить(ИмяСправочника);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();

			ВариантОбъект				= Выборка.Ссылка.ПолучитьОбъект();
			ВариантОбъект.КлючВарианта	= Выборка.АктуальноеИмяВарианта;
			ВО_ЗаписатьПредопределенный(ВариантОбъект);

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();

			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;

	ВО_ЗаписатьВЖурналЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

Процедура ВО_ПометитьУдаленныеПредопределенные(Режим, Результат)
	ПредставлениеПроцедуры = СтрШаблон("Обновление настроек предопределенных (%1)", ?(Режим = "ОбщиеДанныеКонфигурации", "метаданные конфигурации", "метаданные расширений"));
	БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Варианты отчетов",УровеньЖурналаРегистрации.Информация,,, СтрШаблон("Запуск процедуры ""%1"".", ПредставлениеПроцедуры));

	Если Режим = "ОбщиеДанныеКонфигурации" Тогда
		ТекстЗапроса	= "ВЫБРАТЬ * ИЗ Справочник.ПредопределенныеВариантыОтчетов УПОРЯДОЧИТЬ ПО ПометкаУдаления";
		ПустаяСсылка	= Справочники.ПредопределенныеВариантыОтчетов.ПустаяСсылка();
		ИмяТаблицы		= "Справочник.ПредопределенныеВариантыОтчетов";
	ИначеЕсли Режим = "ОбщиеДанныеРасширений" Тогда
		ТекстЗапроса	= "ВЫБРАТЬ * ИЗ Справочник.ПредопределенныеВариантыОтчетовРасширений УПОРЯДОЧИТЬ ПО ПометкаУдаления";
		ПустаяСсылка	= Справочники.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка();
		ИмяТаблицы		= "Справочник.ПредопределенныеВариантыОтчетовРасширений";
	КонецЕсли;

	// Сопоставление информации из базы и из метаданных и пометка на удаление устаревших объектов из базы.
	Результат.ВариантыОтчетов.Индексы.Добавить("Отчет, КлючВарианта, НайденВБазеДанных, ЭтоВариант");
	ПоискВарианта					= Новый Структура("Отчет, КлючВарианта, НайденВБазеДанных, ЭтоВариант");
	ПоискВарианта.НайденВБазеДанных	= Ложь;
	ПоискВарианта.ЭтоВариант		= Истина;

	Запрос			= Новый Запрос;
	Запрос.Текст	= ТекстЗапроса;
	ПредопределенныеВариантыОтчетов = Запрос.Выполнить().Выгрузить();

	Для Каждого ВариантИзБазы Из ПредопределенныеВариантыОтчетов Цикл
		ЗаполнитьЗначенияСвойств(ПоискВарианта, ВариантИзБазы, "Отчет, КлючВарианта");
		Найденные = Результат.ВариантыОтчетов.НайтиСтроки(ПоискВарианта);
		Если Найденные.Количество() > 0 Тогда
			ОписаниеВарианта					= Найденные[0];
			ОписаниеОтчета						= Результат.ВариантыОтчетов.НайтиСтроки(Новый Структура("Отчет, ЭтоВариант", ВариантИзБазы.Отчет, Ложь))[0];
			ВО_ЗаполнитьОписаниеСтрокиВарианта(ОписаниеВарианта, ОписаниеОтчета);
			ОписаниеВарианта.НайденВБазеДанных	= Истина;
			ОписаниеВарианта.ВариантИзБазы		= ВариантИзБазы;

			Продолжить;
		КонецЕсли;

		Если ВариантИзБазы.ПометкаУдаления И ВариантИзБазы.Родитель = ПустаяСсылка Тогда
			Продолжить; // Действие не требуется.
		КонецЕсли;

		НачатьТранзакцию();
		Попытка
			Блокировка			= Новый БлокировкаДанных;
			ЭлементБлокировки	= Блокировка.Добавить(ИмяТаблицы);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВариантИзБазы.Ссылка);
			Блокировка.Заблокировать();

			ВариантОбъект = ВариантИзБазы.Ссылка.ПолучитьОбъект();
			Если ВариантОбъект = Неопределено Тогда
				ОтменитьТранзакцию();

				Продолжить;
			КонецЕсли;

			ВариантОбъект.ПометкаУдаления	= Истина;
			ВариантОбъект.Родитель			= ПустаяСсылка;
			ВО_ЗаписатьПредопределенный(ВариантОбъект);

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;

		Результат.ЕстьИзменения			= Истина;
		Результат.ЕстьВажныеИзменения	= Истина;

	КонецЦикла;
	ВО_ЗаписатьВЖурналЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

Процедура ВО_СформироватьТаблицуФункциональныхОпций(Режим, Результат)
	РеквизитыВариантов = Метаданные.Справочники.ВариантыОтчетов.Реквизиты;

	Если Режим = "ОбщиеДанныеКонфигурации" Тогда
		ПустаяСсылка = Справочники.ПредопределенныеВариантыОтчетов.ПустаяСсылка();
	ИначеЕсли Режим = "ОбщиеДанныеРасширений" Тогда
		ПустаяСсылка = Справочники.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка();
	КонецЕсли;

	ТаблицаФункциональныхОпций = Новый ТаблицаЗначений;
	ТаблицаФункциональныхОпций.Колонки.Добавить("Отчет",                   РеквизитыВариантов.Отчет.Тип);
	ТаблицаФункциональныхОпций.Колонки.Добавить("ПредопределенныйВариант", РеквизитыВариантов.ПредопределенныйВариант.Тип);
	ТаблицаФункциональныхОпций.Колонки.Добавить("ИмяФункциональнойОпции",  Новый ОписаниеТипов("Строка"));

	Результат.Вставить("ТаблицаФункциональныхОпций", ТаблицаФункциональныхОпций);

	ОтчетыСНастройкамиСписок = Новый СписокЗначений;
	Результат.Вставить("ОтчетыСНастройкамиСписок", ОтчетыСНастройкамиСписок);

	ОсновныеВарианты = Новый Соответствие;
	Для Каждого ОписаниеВарианта Из Результат.ВариантыОтчетов Цикл
		Если Не ОписаниеВарианта.ЭтоВариант Тогда
			Если ОписаниеВарианта.ОпределитьНастройкиФормы Тогда
				ОтчетыСНастройкамиСписок.Добавить(ОписаниеВарианта.Отчет);
			КонецЕсли;

			Продолжить;
		КонецЕсли;

		// Установка реквизита ВариантРодитель для связи вариантов отчетов с основными вариантами отчетов.
		ОписаниеОтчета = Результат.ВариантыОтчетов.НайтиСтроки(Новый Структура("Отчет, ЭтоВариант", ОписаниеВарианта.Отчет, Ложь))[0];
		ВО_ЗаполнитьОписаниеСтрокиВарианта(ОписаниеВарианта, ОписаниеОтчета);
		Если ПустаяСтрока(ОписаниеОтчета.ОсновнойВариант) Или ОписаниеВарианта.КлючВарианта = ОписаниеОтчета.ОсновнойВариант Тогда
			КлючОсновногоВарианта	= ОписаниеВарианта.Отчет.ПолноеИмя + "." + ОписаниеВарианта.КлючВарианта;
			ВариантСсылка			= ОсновныеВарианты[КлючОсновногоВарианта];
			Если ВариантСсылка = Неопределено Тогда
				ОписаниеВарианта.ВариантРодитель		= ПустаяСсылка;
				ВариантСсылка							= ВО_ОбновитьПредопределенныйВариантОтчета(Режим, ОписаниеВарианта, Результат); 
				ОсновныеВарианты[КлючОсновногоВарианта]	= ВариантСсылка;
			КонецЕсли
		Иначе
			ОсновнойВариант			= Результат.ВариантыОтчетов.НайтиСтроки(Новый Структура("Отчет, КлючВарианта", ОписаниеВарианта.Отчет, ОписаниеОтчета.ОсновнойВариант))[0];
			КлючОсновногоВарианта	= ОсновнойВариант.Отчет.ПолноеИмя + "." + ОсновнойВариант.КлючВарианта;
			ОсновнойВариантСсылка	= ОсновныеВарианты[КлючОсновногоВарианта];
			Если ОсновнойВариантСсылка = Неопределено Тогда
				ОсновнойВариант.ВариантРодитель			= ПустаяСсылка;
				ОсновнойВариантСсылка					= ВО_ОбновитьПредопределенныйВариантОтчета(Режим, ОсновнойВариант, Результат); 
				ОсновныеВарианты[КлючОсновногоВарианта]	= ОсновнойВариантСсылка;
			КонецЕсли;
			ОписаниеВарианта.ВариантРодитель	= ОсновнойВариантСсылка;
			ВариантСсылка						= ВО_ОбновитьПредопределенныйВариантОтчета(Режим, ОписаниеВарианта, Результат);
		КонецЕсли;

		Для Каждого ИмяФункциональнойОпции Из ОписаниеВарианта.ФункциональныеОпции Цикл
			СвязьСФункциональнойОпцией							= ТаблицаФункциональныхОпций.Добавить();
			СвязьСФункциональнойОпцией.Отчет					= ОписаниеВарианта.Отчет;
			СвязьСФункциональнойОпцией.ПредопределенныйВариант	= ВариантСсылка;
			СвязьСФункциональнойОпцией.ИмяФункциональнойОпции	= ИмяФункциональнойОпции;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ВО_ЗапланироватьЗаполнениеПредставлений(Знач Языки = Неопределено, Знач ИндексТекущегоЯзыка = 0)
	Если БазоваяПодсистемаСервер.ОН_ИнформационнаяБазаФайловая() Тогда
		Возврат;
	КонецЕсли;

	ПараметрыЗаполнения = ВО_ПараметрыЗаполненияПредставленийВариантовОтчетов(Языки, ИндексТекущегоЯзыка);
	Если ПараметрыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОтборЗаданий = Новый Структура("Метаданные, Ключ");
	ЗаполнитьЗначенияСвойств(ОтборЗаданий, ПараметрыЗаполнения);

	Задания = РегламентныеЗаданияСервер.РЗ_НайтиЗадания(ОтборЗаданий);

	ЗаполнениеПредставлений = ?(Задания.Количество() = 0, Неопределено, Задания[0]);
	Если ЗаполнениеПредставлений = Неопределено Тогда
		ЗаполнениеПредставлений = РегламентныеЗаданияСервер.РЗ_ДобавитьЗадание(ПараметрыЗаполнения);

		Возврат;
	ИначеЕсли ЗаполнениеПредставлений.Использование Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ЗаполнениеПредставлений, ПараметрыЗаполнения);
	ЗаполнениеПредставлений.Записать();
КонецПроцедуры

Функция ВО_РезультатОбновленияОбщихДанных(Знач Режим, Знач РазделенныеОбработчики)
	Результат	= Новый Структура;

	Результат.Вставить("ОбновлятьКонфигурацию",		Режим = "ОбщиеДанныеКонфигурации");
	Результат.Вставить("ОбновлятьРасширения",		Режим = "ОбщиеДанныеРасширений");
	Результат.Вставить("РазделенныеОбработчики",	РазделенныеОбработчики);
	Результат.Вставить("ЕстьИзменения",				Ложь);
	Результат.Вставить("ЕстьВажныеИзменения",		Ложь);
	Результат.Вставить("ВариантыОтчетов",			ВО_ПредопределенныеВариантыОтчетов(?(Результат.ОбновлятьКонфигурацию, "Внутренний", "Расширение")));
	Результат.Вставить("ОбновлятьЗамеры",			Ложь);
	Результат.Вставить("ТаблицаЗамеров",			ВО_ТаблицаЗамеров());

	Возврат Результат;
КонецФункции

Процедура ВО_ПометитьНаУдалениеВариантыУдаленныхОтчетов(Режим, Результат)
	ПредставлениеПроцедуры = СтрШаблон("Удаление вариантов удаленных отчетов (%1)", НРег(ВО_ПредставлениеРежима(Режим)));
	БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Варианты отчетов",УровеньЖурналаРегистрации.Информация,,, СтрШаблон("Запуск процедуры ""%1"".", ПредставлениеПроцедуры));

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	НЕ ВариантыОтчетов.ПометкаУдаления
	|	И ВариантыОтчетов.ТипОтчета = &ТипОтчета
	|	И ЕСТЬNULL(ВариантыОтчетов.Отчет.ПометкаУдаления, ИСТИНА)";

	ИмяТаблицы = "Справочник.ВариантыОтчетов";
	Если Режим = "ОбщиеДанныеКонфигурации" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ВариантыОтчетов", ".ПредопределенныеВариантыОтчетов");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВариантыОтчетов.ТипОтчета = &ТипОтчета", "Истина");
		ИмяТаблицы = "Справочник.ПредопределенныеВариантыОтчетов";
	ИначеЕсли Режим = "ОбщиеДанныеРасширений" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ВариантыОтчетов", ".ПредопределенныеВариантыОтчетовРасширений");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВариантыОтчетов.ТипОтчета = &ТипОтчета", "Истина");
		ИмяТаблицы = "Справочник.ПредопределенныеВариантыОтчетовРасширений";
	ИначеЕсли Режим = "РазделенныеДанныеКонфигурации" Тогда
		Запрос.УстановитьПараметр("ТипОтчета", Перечисления.ТипыОтчетов.Внутренний);
	ИначеЕсли Режим = "РазделенныеДанныеРасширений" Тогда
		Запрос.УстановитьПараметр("ТипОтчета", Перечисления.ТипыОтчетов.Расширение);
	КонецЕсли;

	СсылкиУдаляемыхВариантов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Для Каждого ВариантСсылка Из СсылкиУдаляемыхВариантов Цикл
		Результат.ЕстьИзменения			= Истина;
		Результат.ЕстьВажныеИзменения	= Истина;

		НачатьТранзакцию();
		Попытка
			Блокировка			= Новый БлокировкаДанных;
			ЭлементБлокировки	= Блокировка.Добавить(ИмяТаблицы);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВариантСсылка);
			Блокировка.Заблокировать();

			ВариантОбъект = ВариантСсылка.ПолучитьОбъект();
			Если ВариантОбъект = Неопределено Тогда
				ОтменитьТранзакцию();

				Продолжить;
			КонецЕсли;
			ВариантОбъект.Заблокировать();
			ВариантОбъект.ПометкаУдаления = Истина;
			ВО_ЗаписатьПредопределенный(ВариантОбъект);

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();

			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;

	ВО_ЗаписатьВЖурналЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

Процедура ВО_ЗаписатьТаблицуФункциональныхОпций(Режим, Результат)
	Если Режим = "ОбщиеДанныеРасширений" И Не ЗначениеЗаполнено(ПараметрыСеанса.ВерсияРасширений) Тогда
		Возврат; // Обновление не требуется.
	КонецЕсли;
	ПредставлениеПроцедуры = "Запись неразделенного кэша в регистр";
	БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Варианты отчетов",УровеньЖурналаРегистрации.Информация,,, СтрШаблон("Запуск процедуры ""%1"".", ПредставлениеПроцедуры));

	Результат.ТаблицаФункциональныхОпций.Сортировать("Отчет, ПредопределенныйВариант, ИмяФункциональнойОпции");
	Результат.ОтчетыСНастройкамиСписок.СортироватьПоЗначению();

	НовоеЗначение = Новый Структура;
	НовоеЗначение.Вставить("ТаблицаФункциональныхОпций",	Результат.ТаблицаФункциональныхОпций);
	НовоеЗначение.Вставить("ОтчетыСНастройками",			Результат.ОтчетыСНастройкамиСписок.ВыгрузитьЗначения());

	ПолноеИмяПодсистемы = "СтандартныеПодсистемы.ВариантыОтчетов";

	Если Режим = "ОбщиеДанныеКонфигурации" Тогда
		РегистрыСведений.ПараметрыРаботыПрограммы.УстановитьПараметрРаботыПрограммы(ПолноеИмяПодсистемы, НовоеЗначение);
	ИначеЕсли Режим = "ОбщиеДанныеРасширений" Тогда
		РегистрыСведений.ПараметрыРаботыВерсийРасширений.УстановитьПараметрРаботыРасширения(ПолноеИмяПодсистемы, НовоеЗначение, Ложь);
	КонецЕсли;

	ВО_ЗаписатьВЖурналЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

Процедура ВО_ЗафиксироватьТекущуюВерсиюРасширений()
	Если Не ЗначениеЗаполнено(ПараметрыСеанса.ВерсияРасширений) Тогда
		Возврат; // Обновление не требуется.
	КонецЕсли;

	ПредставлениеПроцедуры = "Запись регистра версий расширений";
	БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Варианты отчетов",УровеньЖурналаРегистрации.Информация,,, СтрШаблон("Запуск процедуры ""%1"".", ПредставлениеПроцедуры));

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	|	ПредопределенныеРасширений.Ссылка КАК Вариант,
	|	ПредопределенныеРасширений.Отчет,
	|	ПредопределенныеРасширений.КлючВарианта
	|ИЗ
	|	Справочник.ПредопределенныеВариантыОтчетовРасширений КАК ПредопределенныеРасширений
	|ГДЕ
	|	ПредопределенныеРасширений.ПометкаУдаления = ЛОЖЬ";

	Таблица		= Запрос.Выполнить().Выгрузить();
	Измерения	= Новый Структура("ВерсияРасширений", ПараметрыСеанса.ВерсияРасширений);
	Ресурсы		= Новый Структура;
	Набор		= РегистрыСведений.ПредопределенныеВариантыОтчетовВерсийРасширений.Набор(Таблица, Измерения, Ресурсы, Истина);
	ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьНаборЗаписей(Набор, Истина);

	ВО_ЗаписатьВЖурналЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

Функция ВО_РезультатАктуализацииВариантовОтчетов()
	Результат = Новый Структура;

	Результат.Вставить("ЕстьИзменения",					Ложь);
	Результат.Вставить("ЕстьВажныеИзменения",			Ложь);
	Результат.Вставить("ПустаяСсылка",					Справочники.ВариантыОтчетов.ПустаяСсылка());
	Результат.Вставить("ПоискРодителей",				Новый Соответствие);
	Результат.Вставить("ОбработанныеПредопределенные",	Новый Соответствие);
	Результат.Вставить("ОсновныеВарианты",				ВО_КоллекцияОсновныхВариантовОтчетов());

	Возврат Результат;
КонецФункции

Процедура ВО_АктуализироватьВариантыОтчетовПоПредопределенным(Режим, Результат)
	ПредставлениеПроцедуры = СтрШаблон("Обновление вариантов отчетов (%1)", НРег(ВО_ПредставлениеРежима(Режим)));
	БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Варианты отчетов",УровеньЖурналаРегистрации.Информация,,, СтрШаблон("Запуск процедуры ""%1"".", ПредставлениеПроцедуры));

	// Обновление сведений предопределенных вариантов.
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	|	ПредопределенныеКонфигурации.Ссылка КАК ПредопределенныйВариант,
	|	ПредопределенныеКонфигурации.Наименование КАК Наименование,
	|	ПредопределенныеКонфигурации.Отчет КАК Отчет,
	|	ПредопределенныеКонфигурации.ГруппироватьПоОтчету КАК ГруппироватьПоОтчету,
	|	ПредопределенныеКонфигурации.КлючВарианта КАК КлючВарианта,
	|	ПредопределенныеКонфигурации.ВидимостьПоУмолчанию КАК ВидимостьПоУмолчанию,
	|	ПредопределенныеКонфигурации.Родитель КАК Родитель
	|ПОМЕСТИТЬ втПредопределенные
	|ИЗ
	|	Справочник.ПредопределенныеВариантыОтчетов КАК ПредопределенныеКонфигурации
	|ГДЕ
	|	ПредопределенныеКонфигурации.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка,
	|	ВариантыОтчетов.ПометкаУдаления,
	|	ВариантыОтчетов.Отчет,
	|	ВариантыОтчетов.ТипОтчета,
	|	ВариантыОтчетов.КлючВарианта,
	|	ВариантыОтчетов.Наименование,
	|	ВариантыОтчетов.ПредопределенныйВариант,
	|	ВариантыОтчетов.Родитель
	|ПОМЕСТИТЬ втВариантыОтчетов
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	(ВариантыОтчетов.ТипОтчета = &ТипОтчета
	|		ИЛИ ТИПЗНАЧЕНИЯ(ВариантыОтчетов.Отчет) = &ТипРеквизитаОтчет)
	|	И ВариантыОтчетов.Пользовательский = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА втПредопределенные.ПредопределенныйВариант ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УстановитьПометкуУдаления,
	|	ВЫБОР
	|		КОГДА втВариантыОтчетов.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СоздатьНовый,
	|	втПредопределенные.ПредопределенныйВариант КАК ПредопределенныйВариант,
	|	втПредопределенные.Наименование КАК Наименование,
	|	втПредопределенные.Отчет КАК Отчет,
	|	втПредопределенные.КлючВарианта КАК КлючВарианта,
	|	втПредопределенные.ГруппироватьПоОтчету КАК ГруппироватьПоОтчету,
	|	ВЫБОР
	|		КОГДА втПредопределенные.Родитель = &ПустаяСсылкаВарианта
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ втПредопределенные.Родитель
	|	КОНЕЦ КАК ПредопределенныйВариантРодитель,
	|	втВариантыОтчетов.Ссылка КАК РеквизитСсылка,
	|	втВариантыОтчетов.Родитель КАК РеквизитРодитель,
	|	втВариантыОтчетов.Отчет КАК РеквизитОтчет,
	|	втВариантыОтчетов.КлючВарианта КАК РеквизитКлючВарианта,
	|	втВариантыОтчетов.Наименование КАК РеквизитНаименование,
	|	втВариантыОтчетов.ПредопределенныйВариант КАК РеквизитПредопределенныйВариант,
	|	втВариантыОтчетов.ПометкаУдаления КАК РеквизитПометкаУдаления
	|ИЗ
	|	втВариантыОтчетов КАК втВариантыОтчетов
	|		ПОЛНОЕ СОЕДИНЕНИЕ втПредопределенные КАК втПредопределенные
	|		ПО втВариантыОтчетов.ПредопределенныйВариант = втПредопределенные.ПредопределенныйВариант";

	Если Режим = "РазделенныеДанныеКонфигурации" Тогда
		Запрос.УстановитьПараметр("ТипОтчета",				Перечисления.ТипыОтчетов.Внутренний);
		Запрос.УстановитьПараметр("ТипРеквизитаОтчет",		Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
		Запрос.УстановитьПараметр("ПустаяСсылкаВарианта",	Справочники.ПредопределенныеВариантыОтчетов.ПустаяСсылка());
	ИначеЕсли Режим = "РазделенныеДанныеРасширений" Тогда
		Запрос.УстановитьПараметр("ТипОтчета",				Перечисления.ТипыОтчетов.Расширение);
		Запрос.УстановитьПараметр("ТипРеквизитаОтчет", 		Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений"));
		Запрос.УстановитьПараметр("ПустаяСсылкаВарианта",	Справочники.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка());
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ПредопределенныеВариантыОтчетов", ".ПредопределенныеВариантыОтчетовРасширений");
	КонецЕсли;

	ИзменяемыеРеквизиты = Новый Структура("ПометкаУдаления, Родитель, Наименование, Отчет, КлючВарианта, ПредопределенныйВариант");

	СводнаяТаблицаПредопределенных = Запрос.Выполнить().Выгрузить();
	СводнаяТаблицаПредопределенных.Колонки.Добавить("Обработана",	Новый ОписаниеТипов("Булево"));
	СводнаяТаблицаПредопределенных.Колонки.Добавить("Родитель",		Новый ОписаниеТипов("СправочникСсылка.ВариантыОтчетов"));

	// Обновление основных предопределенных вариантов (без родителя).
	Поиск		= Новый Структура("ПредопределенныйВариантРодитель, УстановитьПометкуУдаления", Неопределено, Ложь);
	Найденные	= СводнаяТаблицаПредопределенных.НайтиСтроки(Поиск);
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		Если СтрокаТаблицы.Обработана Тогда
			Продолжить;
		КонецЕсли;
		Если Результат.ОбработанныеПредопределенные[СтрокаТаблицы.ПредопределенныйВариант] <> Неопределено Тогда
			СтрокаТаблицы.УстановитьПометкуУдаления = Истина;
		КонецЕсли;

		СтрокаТаблицы.Родитель = Результат.ПустаяСсылка;
		ВО_ОбновитьРазделенныйПредопределенный(Результат, ИзменяемыеРеквизиты, СтрокаТаблицы);

		Если Не СтрокаТаблицы.УстановитьПометкуУдаления И СтрокаТаблицы.ГруппироватьПоОтчету И Результат.ПоискРодителей[СтрокаТаблицы.Отчет] = Неопределено Тогда
			Результат.ПоискРодителей[СтрокаТаблицы.Отчет] = СтрокаТаблицы.РеквизитСсылка;

			ОсновнойВариант			= Результат.ОсновныеВарианты.Добавить();
			ОсновнойВариант.Отчет	= СтрокаТаблицы.Отчет;
			ОсновнойВариант.Вариант	= СтрокаТаблицы.РеквизитСсылка;
		КонецЕсли;
	КонецЦикла;

	// Обновление всех оставшихся предопределенных вариантов (подчиненных).
	СводнаяТаблицаПредопределенных.Сортировать("УстановитьПометкуУдаления Возр");
	Для Каждого СтрокаТаблицы Из СводнаяТаблицаПредопределенных Цикл
		Если СтрокаТаблицы.Обработана Тогда
			Продолжить;
		КонецЕсли;
		Если Результат.ОбработанныеПредопределенные[СтрокаТаблицы.ПредопределенныйВариант] <> Неопределено Тогда
			СтрокаТаблицы.УстановитьПометкуУдаления = Истина;
		КонецЕсли;
		Если СтрокаТаблицы.УстановитьПометкуУдаления Тогда
			РодительСсылка = Результат.ПустаяСсылка;
		Иначе
			РодительСсылка = Результат.ПоискРодителей[СтрокаТаблицы.Отчет];
		КонецЕсли;

		СтрокаТаблицы.Родитель = РодительСсылка;
		ВО_ОбновитьРазделенныйПредопределенный(Результат, ИзменяемыеРеквизиты, СтрокаТаблицы);
	КонецЦикла;

	// Обновление родителей пользовательских вариантов.
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	|	ОсновныеВариантыОтчетов.Отчет,
	|	ОсновныеВариантыОтчетов.Вариант
	|ПОМЕСТИТЬ втОсновные
	|ИЗ
	|	&ОсновныеВариантыОтчетов КАК ОсновныеВариантыОтчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка,
	|	втОсновные.Вариант КАК Родитель
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОсновные КАК втОсновные
	|		ПО ВариантыОтчетов.Отчет = втОсновные.Отчет
	|			И ВариантыОтчетов.Родитель <> втОсновные.Вариант
	|			И ВариантыОтчетов.Родитель.Родитель <> втОсновные.Вариант
	|			И ВариантыОтчетов.Ссылка <> втОсновные.Вариант
	|ГДЕ
	|	ВариантыОтчетов.Пользовательский
	|	ИЛИ НЕ ВариантыОтчетов.ПометкаУдаления";

	Запрос.УстановитьПараметр("ОсновныеВариантыОтчетов", Результат.ОсновныеВарианты);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.ЕстьИзменения = Истина;

		НачатьТранзакцию();
		Попытка
			Блокировка			= Новый БлокировкаДанных;
			ЭлементБлокировки	= Блокировка.Добавить("Справочник.ВариантыОтчетов");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();

			ВариантОбъект			= Выборка.Ссылка.ПолучитьОбъект();
			ВариантОбъект.Родитель	= Выборка.Родитель;
			ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьОбъект(ВариантОбъект);

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();

			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;

	ВО_ЗаписатьВЖурналЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

Процедура ВО_УстановитьПризнакЗаполненияПредставлений(Знач Значение, Знач СброситьКеш, Знач Режим)
	ИмяПараметра = "СтандартныеПодсистемы.ВариантыОтчетов.ПредставленияЗаполнены";
	Если Режим = "ОбщиеДанныеКонфигурации" Тогда
		Параметры = РегистрыСведений.ПараметрыРаботыПрограммы.ПараметрРаботыПрограммы(ИмяПараметра);
	Иначе
		Параметры = РегистрыСведений.ПараметрыРаботыВерсийРасширений.ПараметрРаботыРасширения(ИмяПараметра, Ложь);
	КонецЕсли;
	Если Параметры = Неопределено Тогда
		Параметры = Новый Соответствие;
	ИначеЕсли СброситьКеш Тогда
		Параметры.Очистить();
	КонецЕсли;
	Параметры[ТекущийЯзык().КодЯзыка] = Значение;

	Если Режим = "ОбщиеДанныеКонфигурации" Тогда
		РегистрыСведений.ПараметрыРаботыПрограммы.УстановитьПараметрРаботыПрограммы(ИмяПараметра, Параметры);
	Иначе
		РегистрыСведений.ПараметрыРаботыВерсийРасширений.УстановитьПараметрРаботыРасширения(ИмяПараметра, Параметры, Ложь);
	КонецЕсли;
КонецПроцедуры

Функция ВО_ПредставлениеРежима(Режим)
	Режимы = Новый Соответствие;
	Режимы.Вставить("ОбщиеДанныеКонфигурации",			"Общие данные конфигурации");
	Режимы.Вставить("ОбщиеДанныеРасширений",			"Общие данные расширений");
	Режимы.Вставить("РазделенныеДанныеКонфигурации",	"Разделенные данные конфигурации");
	Режимы.Вставить("РазделенныеДанныеРасширений",		"Разделенные данные расширений");

	ПредставлениеРежима = Режимы.Получить(Режим);

	Возврат ?(ПредставлениеРежима = Неопределено, "", ПредставлениеРежима);
КонецФункции

Функция ВО_ПредопределенныеВариантыОтчетов(ТипОтчетов = "Внутренний", ПодключенныеКХранилищу = Истина) Экспорт
	Результат	= ВО_КоллекцияПредопределенныхВариантовОтчетов();

	ГруппироватьПоОтчетам	= ВО_ГлобальныеНастройки().ВыводитьОтчетыВместоВариантов;
	// Зарезервировано для новых подсистем

	ПодсистемыОтчетов	= ВО_РазмещениеОтчетовВПодсистемах();
	КэшФлажкаХранилища	= Неопределено;

	Для Каждого ОтчетМетаданные Из Метаданные.Отчеты Цикл
		Если ПодключенныеКХранилищу И Не ВО_ОтчетПодключенКХранилищу(ОтчетМетаданные, КэшФлажкаХранилища) Тогда
			Продолжить;
		КонецЕсли;

		ОтчетСсылка = Справочники.ИдентификаторыОбъектовМетаданных.ИдентификаторОбъектаМетаданных(ОтчетМетаданные, Истина);
		ОтчетТип = ВО_ТипОтчетаСтрокой(ОтчетСсылка);
		Если ТипОтчетов <> Неопределено И ТипОтчетов <> ОтчетТип Тогда
			Продолжить;
		КонецЕсли;

		ОписаниеОтчета = ВО_ОписаниеОтчетаПоУмолчанию(Результат, ОтчетМетаданные, ОтчетСсылка, ОтчетТип, ГруппироватьПоОтчетам);

		// Размещение.
		Найденные = ПодсистемыОтчетов.НайтиСтроки(Новый Структура("ОтчетМетаданные", ОтчетМетаданные));
		Для Каждого СтрокаПодсистема Из Найденные Цикл
			ОписаниеОтчета.Размещение.Вставить(СтрокаПодсистема.ПодсистемаМетаданные, "");
		КонецЦикла;

		// Предопределенные варианты.
		Если ОписаниеОтчета.ИспользуетСКД Тогда
			ОтчетМенеджер		= Отчеты[ОтчетМетаданные.Имя];
			СхемаКД				= Неопределено;
			ВариантыНастроек	= Неопределено;
			Попытка
				СхемаКД		= ОтчетМенеджер.ПолучитьМакет(ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных.Имя);
			Исключение
				ТекстОшибки	= СтрШаблон("Не удалось прочитать схему отчета %1:
						|%2", ОтчетМетаданные.Имя, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Предупреждение, ТекстОшибки, ОтчетМетаданные);
			КонецПопытки;
			// Чтение настроек вариантов отчета из схемы.
			Если СхемаКД <> Неопределено Тогда
				Попытка
					ВариантыНастроек	= СхемаКД.ВариантыНастроек;
				Исключение
					ШаблонТекстаОшибки	= "Не удалось прочитать список вариантов отчета %1:
							|%2";

					ТекстОшибки			= СтрШаблон(ШаблонТекстаОшибки, ОтчетМетаданные.Имя, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Предупреждение, ТекстОшибки, ОтчетМетаданные);
				КонецПопытки;
			КонецЕсли;
			// Чтение настроек вариантов отчета из модуля менеджера (если не получилось из схемы).
			Если ВариантыНастроек = Неопределено Тогда
				Попытка
					ВариантыНастроек	= ОтчетМенеджер.ВариантыНастроек();
				Исключение
					ТекстОшибки			= СтрШаблон("Не удалось прочитать список вариантов отчета %1 из модуля менеджера:
							|%2", ОтчетМетаданные.Имя, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки, ОтчетМетаданные);
				КонецПопытки;
			КонецЕсли;
			// Регистрация найденных вариантов.
			Если ВариантыНастроек <> Неопределено Тогда
				Для Каждого ВариантНастроекКД Из ВариантыНастроек Цикл
					ОписаниеВарианта				= Результат.Добавить();
					ОписаниеВарианта.Отчет			= ОписаниеОтчета.Отчет;
					ОписаниеВарианта.КлючВарианта	= ВариантНастроекКД.Имя;
					ОписаниеВарианта.Наименование	= ВариантНастроекКД.Представление;
					Если ПустаяСтрока(ОписаниеВарианта.Наименование) Тогда // если конфигурация частично локализована
						ОписаниеВарианта.Наименование = ?(ОписаниеВарианта.КлючВарианта <> "Основной", ОписаниеВарианта.КлючВарианта,  ОписаниеОтчета.Наименование + "." + ОписаниеВарианта.КлючВарианта);
					КонецЕсли;
					ОписаниеВарианта.Тип          = ОтчетТип;
					ОписаниеВарианта.ЭтоВариант   = Истина;
					Если ПустаяСтрока(ОписаниеОтчета.ОсновнойВариант) Тогда
						ОписаниеОтчета.ОсновнойВариант = ОписаниеВарианта.КлючВарианта;
					КонецЕсли;
					Если ТипЗнч(ВариантНастроекКД) = Тип("ВариантНастроекКомпоновкиДанных") Тогда
						Попытка
							ОписаниеВарианта.СистемнаяИнформация.Вставить("НастройкиКД", ВариантНастроекКД.Настройки);
						Исключение
							ТекстОшибки = СтрШаблон("Не удалось прочитать настройки варианта ""%1"":
									|%2", ОписаниеВарианта.КлючВарианта, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Предупреждение, ТекстОшибки, ОтчетМетаданные);
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		Если ПустаяСтрока(ОписаниеОтчета.ОсновнойВариант) Тогда
			ОписаниеВарианта				= Результат.Добавить();
			ЗаполнитьЗначенияСвойств(ОписаниеВарианта, ОписаниеОтчета, "Отчет, Наименование");
			ОписаниеВарианта.КлючВарианта	= "";
			ОписаниеВарианта.ЭтоВариант		= Истина;
			ОписаниеОтчета.ОсновнойВариант	= ОписаниеВарианта.КлючВарианта;
		КонецЕсли;

		// Зазерервировано для новых подсистем
	КонецЦикла;

	КэшРезультата = Результат.Скопировать(, "Отчет, Наименование");

	// Механизмы расширения.
	Если ТипОтчетов = Неопределено Или ТипОтчетов = "Внутренний" Тогда
		ВО_НастроитьОтчетВМодулеМенеджера(Результат, Метаданные.Отчеты.УниверсальныйОтчет);
	КонецЕсли;

	Если ТипОтчетов = Неопределено Или ТипОтчетов = "Внутренний" Или ТипОтчетов = "Расширение" Тогда
		ИнтеграцияПодсистемСервер.ПриНастройкеВариантовОтчетов(Результат);
	КонецЕсли;

	ВО_ЗаполнитьОчищенныеНаименования(Результат, КэшРезультата);

	// Определение основных вариантов отчетов.
	Для Каждого ОписаниеОтчета Из Результат.НайтиСтроки(Новый Структура("ЭтоВариант", Ложь)) Цикл
		Если Не ОписаниеОтчета.ГруппироватьПоОтчету Тогда
			ОписаниеОтчета.ОсновнойВариант = "";

			Продолжить;
		КонецЕсли;

		ЕстьОсновойВариант		= Не ПустаяСтрока(ОписаниеОтчета.ОсновнойВариант);
		ОсновойВариантВключен	= Ложь;
		Если ЕстьОсновойВариант Тогда
			ПоискОписания = Новый Структура;
			ПоискОписания.Вставить("Отчет",			ОписаниеОтчета.Отчет);
			ПоискОписания.Вставить("КлючВарианта",	ОписаниеОтчета.ОсновнойВариант);
			ПоискОписания.Вставить("ЭтоВариант",	Истина);

			НайденныеОписания	= Результат.НайтиСтроки(ПоискОписания);
			Описание			= НайденныеОписания[0]; // см. ОписаниеОтчетаПоУмолчанию

			ОсновойВариантВключен = Описание.Включен;
		КонецЕсли;

		Если Не ЕстьОсновойВариант Или Не ОсновойВариантВключен Тогда
			ПоискОписания		= Новый Структура("Отчет", ОписаниеОтчета.Отчет);
			НайденныеОписания	= Результат.НайтиСтроки(ПоискОписания);

			Для Каждого ОписаниеВарианта Из НайденныеОписания Цикл
				Если ПустаяСтрока(ОписаниеВарианта.КлючВарианта) Тогда
					Продолжить;
				КонецЕсли;

				ВО_ЗаполнитьОписаниеСтрокиВарианта(ОписаниеВарианта, ОписаниеОтчета);

				Если ОписаниеВарианта.Включен Тогда
					ОписаниеОтчета.ОсновнойВариант			= ОписаниеВарианта.КлючВарианта;
					ОписаниеВарианта.ВидимостьПоУмолчанию	= Истина;

					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Процедура ВО_ЗаполнитьОписаниеСтрокиВарианта(ОписаниеВарианта, ОписаниеОтчета)
	Если ОписаниеВарианта.ОписаниеПолучено Тогда
		Возврат;
	КонецЕсли;

	// Флажок изменения настроек
	ОписаниеВарианта.ОписаниеПолучено = Истина;

	// Копирование настроек отчета.
	ЗаполнитьЗначенияСвойств(ОписаниеВарианта, ОписаниеОтчета, "Включен, ВидимостьПоУмолчанию, ГруппироватьПоОтчету");

	Если ОписаниеВарианта.КлючВарианта = ОписаниеОтчета.ОсновнойВариант Тогда
		// Вариант "по умолчанию".
		ОписаниеВарианта.Описание				= ОписаниеОтчета.Описание;
		ОписаниеВарианта.ВидимостьПоУмолчанию	= Истина;
	Иначе
		// Предопределенный вариант.
		Если ОписаниеВарианта.ГруппироватьПоОтчету Тогда
			ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
		КонецЕсли;
	КонецЕсли;

	ОписаниеВарианта.Размещение				= БазоваяПодсистемаСервер.ОН_СкопироватьРекурсивно(ОписаниеОтчета.Размещение);
	ОписаниеВарианта.ФункциональныеОпции	= БазоваяПодсистемаСервер.ОН_СкопироватьРекурсивно(ОписаниеОтчета.ФункциональныеОпции);
	ОписаниеВарианта.НастройкиДляПоиска		= БазоваяПодсистемаСервер.ОН_СкопироватьРекурсивно(ОписаниеОтчета.НастройкиДляПоиска);

	// Зарезервировано для новых подсистем
КонецПроцедуры

Функция ВО_ПоляДляПоиска(ВариантОтчета)
	Результат = Новый Структура;
	Результат.Вставить("НаименованияПолей",					"");
	Результат.Вставить("НаименованияПараметровИОтборов",	"");
	ЭтоПользовательскийВариантОтчета = (ТипЗнч(ВариантОтчета) = Тип("СправочникОбъект.ВариантыОтчетов"));
	Если Не ЭтоПользовательскийВариантОтчета Тогда
		Результат.Вставить("КлючевыеСлова",	"");
		Результат.Вставить("Описание",		"");
		Результат.Вставить("Наименование",	"");
	КонецЕсли;

	Если ТекущийЯзык() = Метаданные.ОсновнойЯзык Или ЭтоПользовательскийВариантОтчета Тогда
		ЗаполнитьЗначенияСвойств(Результат, ВариантОтчета);

		Возврат Результат;
	КонецЕсли;

	ПредставленияДляЯзыка = ВариантОтчета.Представления.Найти(ТекущийЯзык().КодЯзыка, "КодЯзыка");
	Если ПредставленияДляЯзыка = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(Результат, ПредставленияДляЯзыка);

	Возврат Результат;
КонецФункции

Функция ВО_ЗаполнитьПоляДляПоиска(ВариантОбъект, СведенияОбОтчете = Неопределено) Экспорт
	ПоляДляПоиска = ВО_ПоляДляПоиска(ВариантОбъект);

	ПроверятьХеш = СведенияОбОтчете = Неопределено Или Не СведенияОбОтчете.ИндексироватьСхему;
	Если ПроверятьХеш Тогда
		// Проверка, заполнены ли поля для поиска ранее.
		ЗаполнитьПоля				= Лев(ПоляДляПоиска.НаименованияПолей, 1) <> "#";
		ЗаполнитьПараметрыИОтборы	= Лев(ПоляДляПоиска.НаименованияПараметровИОтборов, 1) <> "#";
		Если Не ЗаполнитьПоля И Не ЗаполнитьПараметрыИОтборы Тогда
			Возврат Ложь; // Заполнение не требуется.
		КонецЕсли;
	Иначе
		ЗаполнитьПоля				= Истина;
		ЗаполнитьПараметрыИОтборы	= Истина;
	КонецЕсли;

	// Получение объекта отчета, настроек СКД и варианта.
	ЭтоПредопределенный = ВО_ЭтоПредопределенныйВариантОтчета(ВариантОбъект);

	// Предустановленные настройки поиска.
	НастройкиДляПоиска = ?(СведенияОбОтчете <> Неопределено, СведенияОбОтчете.НастройкиДляПоиска, Неопределено);
	Если НастройкиДляПоиска <> Неопределено Тогда
		ТребуетсяЗапись = Ложь;
		Если ЗначениеЗаполнено(НастройкиДляПоиска.НаименованияПолей) Тогда
			ПоляДляПоиска.НаименованияПолей	= "#" + СокрЛП(НастройкиДляПоиска.НаименованияПолей);
			ЗаполнитьПоля					= Ложь;
			ТребуетсяЗапись					= Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(НастройкиДляПоиска.НаименованияПараметровИОтборов) Тогда
			ПоляДляПоиска.НаименованияПараметровИОтборов	= "#" + СокрЛП(НастройкиДляПоиска.НаименованияПараметровИОтборов);
			ЗаполнитьПараметрыИОтборы						= Ложь;
			ТребуетсяЗапись									= Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(НастройкиДляПоиска.КлючевыеСлова) Тогда
			ПоляДляПоиска.КлючевыеСлова = "#" + СокрЛП(НастройкиДляПоиска.КлючевыеСлова);
			ТребуетсяЗапись = Истина;
		КонецЕсли;
		Если Не ЗаполнитьПоля И Не ЗаполнитьПараметрыИОтборы Тогда
			ВО_УстановитьПоляДляПоиска(ВариантОбъект, ПоляДляПоиска);

			Возврат ТребуетсяЗапись; // Заполнение выполнено - объект надо записать.
		КонецЕсли;
	КонецЕсли;

	// В некоторых сценариях объект может быть уже закэширован в дополнительных свойствах.
	ОтчетОбъект = ?(СведенияОбОтчете <> Неопределено, СведенияОбОтчете.ОтчетОбъект, Неопределено);

	// Когда объект отчета не закэширован - подключение отчета штатным способом.
	Если ОтчетОбъект = Неопределено Тогда
		Подключение = ВО_ПодключитьОтчетОбъект(ВариантОбъект.Отчет, Ложь);
		Если Подключение.Успех Тогда
			ОтчетОбъект = Подключение.Объект;
		КонецЕсли;
		Если СведенияОбОтчете <> Неопределено Тогда
			СведенияОбОтчете.ОтчетОбъект = ОтчетОбъект;
		КонецЕсли;
		Если ОтчетОбъект = Неопределено Тогда
			ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, Подключение.ТекстОшибки, ВариантОбъект.Ссылка);

			Возврат Ложь; // Возникла проблема при подключении отчета.
		КонецЕсли;
	КонецЕсли;

	// Извлечение текстов макетов возможно только после получения объекта отчета.
	Если НастройкиДляПоиска <> Неопределено И ЗначениеЗаполнено(НастройкиДляПоиска.ИменаМакетов) Тогда
		ПоляДляПоиска.НаименованияПолей = "#" + ВО_ИзвлечьТекстМакета(ОтчетОбъект, НастройкиДляПоиска.ИменаМакетов);
		Если Не ЗаполнитьПараметрыИОтборы Тогда
			ВО_УстановитьПоляДляПоиска(ВариантОбъект, ПоляДляПоиска);

			Возврат Истина; // Заполнение выполнено - объект надо записать.
		КонецЕсли;
	КонецЕсли;

	// Схема компоновки, на основании которой будет выполняться отчет.
	СхемаКД = ОтчетОбъект.СхемаКомпоновкиДанных;

	// Если отчет не на СКД, следовательно представления не заполняются или заполняются прикладными механизмами.
	Если СхемаКД = Неопределено Тогда
		ТекстОшибки = СтрШаблон("Для варианта ""%1"" отчета ""%2"" не заполнены настройки поиска:
			|Наименования полей, параметров и отборов.",
			ВариантОбъект.КлючВарианта, ВариантОбъект.Отчет);

		ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Информация, ТекстОшибки, ВариантОбъект.Ссылка);

		Возврат Ложь;
	КонецЕсли;

	НастройкиКД = ?(СведенияОбОтчете <> Неопределено, СведенияОбОтчете.НастройкиКД, Неопределено);
	Если ТипЗнч(НастройкиКД) <> Тип("НастройкиКомпоновкиДанных") Тогда
		ВариантНастроекКД = СхемаКД.ВариантыНастроек.Найти(ВариантОбъект.КлючВарианта);
		Если ВариантНастроекКД <> Неопределено Тогда
			НастройкиКД = ВариантНастроекКД.Настройки;
		КонецЕсли;
	КонецЕсли;

	// Чтение настроек из данных варианта.
	Если ТипЗнч(НастройкиКД) <> Тип("НастройкиКомпоновкиДанных") И ТипЗнч(ВариантОбъект) = Тип("СправочникОбъект.ВариантыОтчетов") Тогда
		Попытка
			НастройкиКД = ВариантОбъект.Настройки.Получить();
		Исключение
			ШаблонСообщения = "Не удалось прочитать настройки пользовательского варианта отчета:
				|%1";
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстСообщения, ВариантОбъект.Ссылка);

			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;

	// Последняя проверка.
	Если ТипЗнч(НастройкиКД) <> Тип("НастройкиКомпоновкиДанных") Тогда
		Если ТипЗнч(ВариантОбъект) = Тип("СправочникОбъект.ПредопределенныеВариантыОтчетов") Или ТипЗнч(ВариантОбъект) = Тип("СправочникОбъект.ПредопределенныеВариантыОтчетовРасширений") Тогда
			ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, СтрШаблон("Не удалось прочитать настройки предопределенного варианта отчета ""%1"".", ВариантОбъект.КлючЗамеров), ВариантОбъект.Ссылка);
		КонецЕсли;

		Возврат Ложь;
	КонецЕсли;

	ХешНовыхНастроек = БазоваяПодсистемаСервер.ОН_КонтрольнаяСуммаСтрокой(БазоваяПодсистемаСервер.ОН_ЗначениеВСтрокуXML(НастройкиКД));
	Если ПроверятьХеш И ВариантОбъект.ХешНастроек = ХешНовыхНастроек Тогда
		Возврат Ложь; // Настройки не изменились.
	КонецЕсли;
	ВариантОбъект.ХешНастроек = ХешНовыхНастроек;

	ОтчетОбъект.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));
	ВариантыОтчетовКлиентСервер.О_ЗагрузитьНастройки(ОтчетОбъект.КомпоновщикНастроек, НастройкиКД);

	Если ЗаполнитьПоля Тогда
		// Преобразование всех настроек автоматической группировки в наборы полей.
		//   См. "АвтоВыбранноеПолеКомпоновкиДанных", "АвтоПолеГруппировкиКомпоновкиДанных",
		//   "АвтоЭлементПорядкаКомпоновкиДанных" в синтакс-помощнике.
		ОтчетОбъект.КомпоновщикНастроек.РазвернутьАвтоПоля();
		ПоляДляПоиска.НаименованияПолей = ВО_СформироватьПредставленияПолей(ОтчетОбъект.КомпоновщикНастроек);
	КонецЕсли;

	Если ЗаполнитьПараметрыИОтборы Тогда
		ПоляДляПоиска.НаименованияПараметровИОтборов = ВО_СформироватьПредставленияПараметровИОтборов(ОтчетОбъект.КомпоновщикНастроек);
	КонецЕсли;

	ВО_УстановитьПоляДляПоиска(ВариантОбъект, ПоляДляПоиска);

	Возврат Истина;
КонецФункции

Процедура ВО_УстановитьПоляДляПоиска(ВариантОтчета, ПоляДляПоиска)
	ЭтоПользовательскийВариантОтчета = (ТипЗнч(ВариантОтчета) = Тип("СправочникОбъект.ВариантыОтчетов"));
	Если ТекущийЯзык() = Метаданные.ОсновнойЯзык Или ЭтоПользовательскийВариантОтчета Тогда
		ЗаполнитьЗначенияСвойств(ВариантОтчета, ПоляДляПоиска);

		Возврат;
	КонецЕсли;

	ПредставленияДляЯзыка = ВариантОтчета.Представления.Найти(ТекущийЯзык().КодЯзыка, "КодЯзыка");
	Если ПредставленияДляЯзыка = Неопределено Тогда
		ПредставленияДляЯзыка = ВариантОтчета.Представления.Добавить();
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ПредставленияДляЯзыка, ПоляДляПоиска);
	ПредставленияДляЯзыка.КодЯзыка = ТекущийЯзык().КодЯзыка;
КонецПроцедуры

Функция ВО_ИзменилисьНастройкиПоиска(ВариантИзБазы, СтарыеСведения)
	Возврат ВариантИзБазы.ХешНастроек <> СтарыеСведения.ХешНастроек
		Или ВариантИзБазы.НаименованияПолей <> СтарыеСведения.НаименованияПолей
		Или ВариантИзБазы.НаименованияПараметровИОтборов <> СтарыеСведения.НаименованияПараметровИОтборов
		Или ВариантИзБазы.КлючевыеСлова <> СтарыеСведения.КлючевыеСлова;
КонецФункции

Процедура ВО_ЗаписатьПредопределенный(ВариантОбъект)
	ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных");
	ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьОбъект(ВариантОбъект);
КонецПроцедуры

Процедура ВО_ОбновитьРазделенныйПредопределенный(Результат, ИзменяемыеРеквизиты, СтрокаТаблицы)
	Если СтрокаТаблицы.Обработана Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы.Обработана = Истина;

	Если СтрокаТаблицы.УстановитьПометкуУдаления Тогда
		Если СтрокаТаблицы.РеквизитРодитель = Результат.ПустаяСсылка И СтрокаТаблицы.РеквизитПометкаУдаления = Истина Тогда
			Возврат; // Уже помечен.
		КонецЕсли;

		НачатьТранзакцию();
		Попытка
			Блокировка			= Новый БлокировкаДанных;
			ЭлементБлокировки	= Блокировка.Добавить("Справочник.ВариантыОтчетов");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаТаблицы.РеквизитСсылка);
			Блокировка.Заблокировать();

			ВариантОбъект = СтрокаТаблицы.РеквизитСсылка.ПолучитьОбъект();
			ВариантОбъект.Заблокировать();

			ВариантОбъект.Родитель			= Результат.ПустаяСсылка;
			ВариантОбъект.ПометкаУдаления	= Истина;
			ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьОбъект(ВариантОбъект);

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();

			ВызватьИсключение;
		КонецПопытки;

		Результат.ЕстьИзменения = Истина;

		Возврат;
	КонецЕсли;

	Если СтрокаТаблицы.ГруппироватьПоОтчету И Не ЗначениеЗаполнено(СтрокаТаблицы.ПредопределенныйВариантРодитель) Тогда
		СтрокаТаблицы.Родитель = Результат.ПустаяСсылка;
	КонецЕсли;
	Результат.ОбработанныеПредопределенные[СтрокаТаблицы.ПредопределенныйВариант] = Истина;
	ЗаполнитьЗначенияСвойств(ИзменяемыеРеквизиты, СтрокаТаблицы);
	ИзменяемыеРеквизиты.ПометкаУдаления = Ложь;

	Если Не СтрокаТаблицы.СоздатьНовый И ВО_СовпадаютЗначенияСвойств(ИзменяемыеРеквизиты, СтрокаТаблицы, "Реквизит") Тогда
		Возврат; // Изменений нет.
	КонецЕсли;

	НачатьТранзакцию();
	Попытка
		Если СтрокаТаблицы.СоздатьНовый Тогда // Добавить.
			ВариантОбъект							= Справочники.ВариантыОтчетов.СоздатьЭлемент();
			ВариантОбъект.ПредопределенныйВариант	= СтрокаТаблицы.ПредопределенныйВариант;
			ВариантОбъект.Пользовательский			= Ложь;
		Иначе // Обновить (если есть изменения).
			Блокировка			= Новый БлокировкаДанных;
			ЭлементБлокировки	= Блокировка.Добавить("Справочник.ВариантыОтчетов");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаТаблицы.РеквизитСсылка);
			Блокировка.Заблокировать();

			// Перенос пользовательских настроек.
			ВО_ЗаменитьКлючиПользовательскихНастроек(ИзменяемыеРеквизиты, СтрокаТаблицы);

			ВариантОбъект = СтрокаТаблицы.РеквизитСсылка.ПолучитьОбъект();
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(ВариантОбъект, ИзменяемыеРеквизиты);

		ТипОтчетаСтрокой		= ВариантыОтчетовКлиентСервер.ВО_ТипОтчетаСтрокой(Неопределено, ВариантОбъект.Отчет);
		ВариантОбъект.ТипОтчета	= Перечисления.ТипыОтчетов[ТипОтчетаСтрокой];
		ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьОбъект(ВариантОбъект);

		РегистрыСведений.НастройкиВариантовОтчетов.ЗаписатьНастройкиДоступностиВариантаОтчета(ВариантОбъект.Ссылка, СтрокаТаблицы.СоздатьНовый);

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Результат.ЕстьИзменения = Истина;
	Если СтрокаТаблицы.СоздатьНовый Тогда
		СтрокаТаблицы.РеквизитСсылка = ВариантОбъект.Ссылка;
	КонецЕсли;
КонецПроцедуры

Функция ВО_ИзмененияКлючей()
	РеквизитыВариантов = Метаданные.Справочники.ВариантыОтчетов.Реквизиты;

	Изменения	= Новый ТаблицаЗначений;
	Изменения.Колонки.Добавить("Отчет",                 Новый ОписаниеТипов("ОбъектМетаданных"));
	Изменения.Колонки.Добавить("СтароеИмяВарианта",     РеквизитыВариантов.КлючВарианта.Тип);
	Изменения.Колонки.Добавить("АктуальноеИмяВарианта", РеквизитыВариантов.КлючВарианта.Тип);

	// Переопределяемая часть.
	ИнтеграцияПодсистемСервер.ПриИзмененииКлючейВариантовОтчетов(Изменения);

	Изменения.Колонки.Найти("Отчет").Имя = "ОтчетМетаданные";
	Изменения.Колонки.Добавить("Отчет",				РеквизитыВариантов.Отчет.Тип);
	Изменения.Индексы.Добавить("ОтчетМетаданные,	СтароеИмяВарианта");

	// Проверить корректность замен.
	Для Каждого Изменение Из Изменения Цикл
		Изменение.Отчет = Справочники.ИдентификаторыОбъектовМетаданных.ИдентификаторОбъектаМетаданных(Изменение.ОтчетМетаданные, Истина);
		Найденные = Изменения.НайтиСтроки(Новый Структура("ОтчетМетаданные, СтароеИмяВарианта", Изменение.ОтчетМетаданные, Изменение.АктуальноеИмяВарианта));
		Если Найденные.Количество() > 0 Тогда
			Конфликт = Найденные[0];
			ВызватьИсключение СтрШаблон("Ошибка регистрации изменений имени варианта отчета ""%1"":
				|Актуальное имя варианта ""%2"" (старое имя ""%3"")
				|также числится как старое имя ""%4"" (актуальное имя ""%5"").",
				Строка(Изменение.Отчет),
				Изменение.АктуальноеИмяВарианта,
				Изменение.СтароеИмяВарианта,
				Конфликт.СтароеИмяВарианта,
				Конфликт.АктуальноеИмяВарианта);
		КонецЕсли;
		Найденные = Изменения.НайтиСтроки(Новый Структура("ОтчетМетаданные, СтароеИмяВарианта", Изменение.ОтчетМетаданные, Изменение.СтароеИмяВарианта));
		Если Найденные.Количество() > 2 Тогда
			Конфликт = Найденные[1];
			ВызватьИсключение СтрШаблон("Ошибка регистрации изменений имени варианта отчета ""%1"":
				|Старое имя варианта ""%2"" (актуальное имя ""%3"")
				|также числится как старое имя
				|варианта отчета ""%4"" (актуальное имя ""%5"").",
				Строка(Изменение.Отчет),
				Изменение.СтароеИмяВарианта,
				Изменение.АктуальноеИмяВарианта,
				Строка(Конфликт.ОтчетМетаданные.Представление()),
				Конфликт.АктуальноеИмяВарианта);
		КонецЕсли;
	КонецЦикла;

	Возврат Изменения;
КонецФункции

Процедура ВО_ЗаписатьВЖурнал(Уровень, Сообщение, ВариантОтчета = Неопределено) Экспорт
	Если ТипЗнч(ВариантОтчета) = Тип("ОбъектМетаданных") Тогда
		ОбъектМетаданных	= ВариантОтчета;
		Данные				= ОбъектМетаданных.Представление();
	Иначе
		ОбъектМетаданных	= Метаданные.Справочники.ВариантыОтчетов;
		Данные				= ВариантОтчета;
	КонецЕсли;
	ЗаписьЖурналаРегистрации("Варианты отчетов", Уровень, ОбъектМетаданных, Данные, Сообщение);
КонецПроцедуры

Процедура ВО_ЗаписатьВЖурналЗавершениеПроцедуры(ИмяПроцедуры, ИзмененоОбъектов = Неопределено)
	Текст = СтрШаблон("Завершение процедуры ""%1"".", ИмяПроцедуры);
	Если ИзмененоОбъектов <> Неопределено Тогда
		Текст = Текст + " "  + СтрШаблон("Изменено %1 объектов.", ИзмененоОбъектов);
	КонецЕсли;
	БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Варианты отчетов", УровеньЖурналаРегистрации.Информация,,, Текст);
КонецПроцедуры

Функция ВО_ОбновитьПредопределенныйВариантОтчета(Режим, ОписаниеВарианта, Результат)
	НачатьТранзакцию();
	Попытка
		ВариантИзБазы = ОписаниеВарианта.ВариантИзБазы;
		// Зарезервировано для новых подсистем
		Если ОписаниеВарианта.НайденВБазеДанных Тогда
			Если ВариантИзБазы.ПометкаУдаления = Истина Или ВО_ИзменилисьКлючевыеНастройкиПредопределенного(ОписаниеВарианта, ВариантИзБазы) Тогда
				Результат.ЕстьВажныеИзменения = Истина;
			ИначеЕсли Не ВО_ИзменилисьВторостепенныеНастройкиПредопределенного(ОписаниеВарианта, ВариантИзБазы) Тогда
				ЗафиксироватьТранзакцию();

				Возврат ВариантИзБазы.Ссылка;
			КонецЕсли;

			ВариантИзБазы = ОписаниеВарианта.ВариантИзБазы;

			Если Режим = "ОбщиеДанныеКонфигурации" Тогда
				ИмяТаблицы = "Справочник.ПредопределенныеВариантыОтчетов";
			ИначеЕсли Режим = "ОбщиеДанныеРасширений" Тогда
				ИмяТаблицы = "Справочник.ПредопределенныеВариантыОтчетовРасширений";
			КонецЕсли;
			Блокировка			= Новый БлокировкаДанных;
			ЭлементБлокировки	= Блокировка.Добавить(ИмяТаблицы);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВариантИзБазы.Ссылка);
			Блокировка.Заблокировать();

			ВариантОбъект = ВариантИзБазы.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ПредопределенныеВариантыОтчетов, СправочникОбъект.ПредопределенныеВариантыОтчетовРасширений
			ВариантОбъект.Размещение.Очистить();
			Если ВариантОбъект.ПометкаУдаления Тогда
				ВариантОбъект.ПометкаУдаления = Ложь;
			КонецЕсли;
		Иначе
			Результат.ЕстьВажныеИзменения = Истина; // Регистрация нового (потребуется обновление разделенных данных).
			Если Режим = "ОбщиеДанныеКонфигурации" Тогда
				ВариантОбъект = Справочники.ПредопределенныеВариантыОтчетов.СоздатьЭлемент();
			ИначеЕсли Режим = "ОбщиеДанныеРасширений" Тогда
				ВариантОбъект = Справочники.ПредопределенныеВариантыОтчетовРасширений.СоздатьЭлемент();
			КонецЕсли;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(ВариантОбъект, ОписаниеВарианта,  "Отчет, КлючВарианта, Включен, ВидимостьПоУмолчанию, ГруппироватьПоОтчету");
		ПоляДляПоиска				= ВО_ПоляДляПоиска(ВариантОбъект);
		ПоляДляПоиска.Наименование	= ОписаниеВарианта.Наименование;
		ПоляДляПоиска.Описание		= ОписаниеВарианта.Описание;
		ВО_УстановитьПоляДляПоиска(ВариантОбъект, ПоляДляПоиска);

		ВариантОбъект.Родитель = ОписаниеВарианта.ВариантРодитель;

		РазмещениеВарианта = Новый Массив;
		Для Каждого Раздел Из ОписаниеВарианта.Размещение Цикл
			ПолноеИмя = ?(ТипЗнч(Раздел.Ключ) = Тип("Строка"), Раздел.Ключ, Раздел.Ключ.ПолноеИмя());
			РазмещениеВарианта.Добавить(ПолноеИмя);
		КонецЦикла;
		ИдентификаторыПодсистем = Справочники.ИдентификаторыОбъектовМетаданных.ИдентификаторыОбъектовМетаданных(РазмещениеВарианта, Истина);
		Для Каждого РазмещениеОтчета Из ОписаниеВарианта.Размещение Цикл
			СтрокаРазмещения				= ВариантОбъект.Размещение.Добавить();
			ПолноеИмя						= ?(ТипЗнч(РазмещениеОтчета.Ключ) = Тип("Строка"), РазмещениеОтчета.Ключ, РазмещениеОтчета.Ключ.ПолноеИмя());
			СтрокаРазмещения.Подсистема		= ИдентификаторыПодсистем[ПолноеИмя];
			СтрокаРазмещения.Важный			= (НРег(РазмещениеОтчета.Значение) = НРег("Важный"));
			СтрокаРазмещения.СмТакже		= (НРег(РазмещениеОтчета.Значение) = НРег("СмТакже"));
		КонецЦикла;

		Если Результат.ОбновлятьЗамеры Тогда
			ВариантОбъект.КлючЗамеров = ОписаниеВарианта.КлючЗамеров;
		КонецЕсли;

		Результат.ЕстьИзменения = Истина;
		ВО_ЗаписатьПредопределенный(ВариантОбъект);

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Возврат ВариантОбъект.Ссылка;
КонецФункции

Функция ВО_ПараметрыЗаполненияПредставленийВариантовОтчетов(Языки = Неопределено, ИндексТекущегоЯзыка = 0)
	Если Языки = Неопределено Тогда
		Языки = ВО_ЯзыкиПредставленийВариантовОтчетовДляЗаполнения();
	КонецЕсли;

	Если ИндексТекущегоЯзыка > Языки.ВГраница() Тогда
		Возврат Неопределено;
	КонецЕсли;

	КодЯзыка				= Языки[ИндексТекущегоЯзыка];
	СлужебныйПользователь	= ВО_СлужебныйПользователь(КодЯзыка);

	Если СлужебныйПользователь = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	МетаданныеЗадания	= Метаданные.РегламентныеЗадания.ОбновлениеПредопределенныхВариантовОтчетов;
	КлючЗадания			= "ЗаполнениеПредставленийВариантовОтчетовДляЯзыка" + ВРег(КодЯзыка);
	НаименованиеЗадания	= СтрШаблон("Заполнение представлений предопределенных вариантов отчетов для языка %1", КодЯзыка);

	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(Языки);
	ПараметрыЗадания.Добавить(ИндексТекущегоЯзыка);

	РасписаниеЗадания				= Новый РасписаниеРегламентногоЗадания;
	РасписаниеЗадания.ВремяНачала	= ТекущаяДатаСеанса() + 60;

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Метаданные",		МетаданныеЗадания);
	ПараметрыЗаполнения.Вставить("ИмяПользователя",	СлужебныйПользователь);
	ПараметрыЗаполнения.Вставить("Ключ",			КлючЗадания);
	ПараметрыЗаполнения.Вставить("Наименование",	НаименованиеЗадания);
	ПараметрыЗаполнения.Вставить("Параметры",		ПараметрыЗадания);
	ПараметрыЗаполнения.Вставить("Расписание",		РасписаниеЗадания);
	ПараметрыЗаполнения.Вставить("Использование",	Истина);

	Возврат ПараметрыЗаполнения;
КонецФункции

Функция ВО_ТаблицаЗамеров()
	Результат = Новый ТаблицаЗначений;

	Результат.Колонки.Добавить("СтароеИмя",					Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	Результат.Колонки.Добавить("АктуальноеИмя",				Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	Результат.Колонки.Добавить("АктуальноеНаименование",	Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));

	Возврат Результат;
КонецФункции

Процедура ВО_ЗаполнитьОчищенныеНаименования(СвойстваВариантовОтчетов, КэшСвойствВариантовОтчетов)
	НайденныеСвойства = СвойстваВариантовОтчетов.НайтиСтроки(Новый Структура("Наименование", "")); // см. КоллекцияПредопределенныхВариантовОтчетов
	Если НайденныеСвойства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	КэшСвойствВариантовОтчетов.Свернуть("Отчет, Наименование");
	КэшСвойствВариантовОтчетов.Индексы.Добавить("Отчет");

	Для Каждого Свойства Из НайденныеСвойства Цикл
		КэшированныеСвойства = КэшСвойствВариантовОтчетов.Найти(Свойства.Отчет, "Отчет");

		Если КэшированныеСвойства <> Неопределено И ЗначениеЗаполнено(КэшированныеСвойства.Наименование) Тогда
			Свойства.Наименование = КэшированныеСвойства.Наименование;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ВО_КоллекцияОсновныхВариантовОтчетов()
	ОсновныеВариантыОтчетов = Новый ТаблицаЗначений;

	ОсновныеВариантыОтчетов.Колонки.Добавить("Отчет",	Метаданные.Справочники.ВариантыОтчетов.Реквизиты.Отчет.Тип);
	ОсновныеВариантыОтчетов.Колонки.Добавить("Вариант",	Новый ОписаниеТипов("СправочникСсылка.ВариантыОтчетов"));

	Возврат ОсновныеВариантыОтчетов;
КонецФункции

Функция ВО_КоллекцияПредопределенныхВариантовОтчетов() Экспорт
	РеквизитыСправочника		= Метаданные.Справочники.ВариантыОтчетов.Реквизиты;

	ОписаниеПризнака			= Новый ОписаниеТипов("Булево");
	ОписаниеМассива				= Новый ОписаниеТипов("Массив");
	ОписаниеСоответствия		= Новый ОписаниеТипов("Соответствие");
	ОписаниеСтруктуры			= Новый ОписаниеТипов("Структура");
	ОписаниеОбъектаМетаданных	= Новый ОписаниеТипов("ОбъектМетаданных");
	ОписаниеВариантаОтчета		= Новый ОписаниеТипов("СправочникСсылка.ПредопределенныеВариантыОтчетов, СправочникСсылка.ПредопределенныеВариантыОтчетовРасширений");

	Результат = Новый ТаблицаЗначений;

	Результат.Колонки.Добавить("Отчет",						РеквизитыСправочника.Отчет.Тип);
	Результат.Колонки.Добавить("Метаданные",				ОписаниеОбъектаМетаданных);
	Результат.Колонки.Добавить("ИспользуетСКД",				ОписаниеПризнака);
	Результат.Колонки.Добавить("КлючВарианта",				РеквизитыСправочника.КлючВарианта.Тип);
	Результат.Колонки.Добавить("ОписаниеПолучено",			ОписаниеПризнака);
	Результат.Колонки.Добавить("Включен",					ОписаниеПризнака);
	Результат.Колонки.Добавить("ВидимостьПоУмолчанию",		ОписаниеПризнака);
	Результат.Колонки.Добавить("Наименование",				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
	Результат.Колонки.Добавить("Описание",					Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
	Результат.Колонки.Добавить("Размещение",				ОписаниеСоответствия);
	Результат.Колонки.Добавить("НастройкиДляПоиска",		ОписаниеСтруктуры);
	Результат.Колонки.Добавить("СистемнаяИнформация",		ОписаниеСтруктуры);
	Результат.Колонки.Добавить("Тип",						Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
	Результат.Колонки.Добавить("ЭтоВариант",				ОписаниеПризнака);
	Результат.Колонки.Добавить("ФункциональныеОпции",		ОписаниеМассива);
	Результат.Колонки.Добавить("ГруппироватьПоОтчету",		ОписаниеПризнака);
	Результат.Колонки.Добавить("КлючЗамеров",				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
	Результат.Колонки.Добавить("ОсновнойВариант",			РеквизитыСправочника.КлючВарианта.Тип);
	Результат.Колонки.Добавить("ФорматНастроекСКД",			ОписаниеПризнака);
	Результат.Колонки.Добавить("ОпределитьНастройкиФормы",	ОписаниеПризнака);

	// Вспомогательные сведения для процедуры ОбновитьНастройкиПредопределенных.
	Результат.Колонки.Добавить("НайденВБазеДанных",			ОписаниеПризнака);
	Результат.Колонки.Добавить("ВариантИзБазы"); // строка выборки из таблицы
	Результат.Колонки.Добавить("ВариантРодитель",			ОписаниеВариантаОтчета);

	Результат.Индексы.Добавить("Отчет");
	Результат.Индексы.Добавить("Отчет, ЭтоВариант");
	Результат.Индексы.Добавить("Отчет, КлючВарианта");
	Результат.Индексы.Добавить("Отчет, КлючВарианта, ЭтоВариант");
	Результат.Индексы.Добавить("КлючВарианта");
	Результат.Индексы.Добавить("Метаданные, КлючВарианта");
	Результат.Индексы.Добавить("Метаданные, ЭтоВариант");

	Возврат Результат;
КонецФункции

Функция ВО_ГлобальныеНастройки() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ВыводитьОтчетыВместоВариантов",					Ложь);
	Результат.Вставить("ВыводитьОписания",								Истина);
	Результат.Вставить("РазрешеноИзменятьВарианты",						Истина);
	Результат.Вставить("ВыводитьОбщиеНастройкиКолонтитулов",			Истина);
	Результат.Вставить("ВыводитьИндивидуальныеНастройкиКолонтитулов",	Истина);

	Результат.Вставить("Поиск", Новый Структура);
	Результат.Поиск.Вставить("ПодсказкаВвода", "Наименование, поле или автор отчета");

	Результат.Вставить("ДругиеОтчеты", Новый Структура);
	Результат.ДругиеОтчеты.Вставить("ЗакрыватьПослеВыбора",	Истина);
	Результат.ДругиеОтчеты.Вставить("ПоказыватьФлажок",		Ложь);

	ИнтеграцияПодсистемСервер.ПриОпределенииНастроекВариантовОтчетов(Результат);

	Возврат Результат;
КонецФункции

Функция ВО_РазмещениеОтчетовВПодсистемах(Результат = Неопределено, РодительскаяПодсистема = Неопределено)
	Если Результат = Неопределено Тогда
		ПолноеИмяОписаниеТипов = Метаданные.Справочники.ИдентификаторыОбъектовМетаданных.Реквизиты.ПолноеИмя.Тип;

		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("ОтчетМетаданные",      Новый ОписаниеТипов("ОбъектМетаданных"));
		Результат.Колонки.Добавить("ОтчетПолноеИмя",       ПолноеИмяОписаниеТипов);
		Результат.Колонки.Добавить("ПодсистемаМетаданные", Новый ОписаниеТипов("ОбъектМетаданных"));
		Результат.Колонки.Добавить("ПодсистемаПолноеИмя",  ПолноеИмяОписаниеТипов);

		Результат.Индексы.Добавить("ОтчетПолноеИмя");
		Результат.Индексы.Добавить("ОтчетМетаданные");

		РодительскаяПодсистема = Метаданные;
	КонецЕсли;

	// Перебор вложенных подсистем родителя.
	Для Каждого ДочерняяПодсистема Из РодительскаяПодсистема.Подсистемы Цикл
		Если ДочерняяПодсистема.ВключатьВКомандныйИнтерфейс Тогда
			Для Каждого ОтчетМетаданные Из ДочерняяПодсистема.Состав Цикл
				Если Не Метаданные.Отчеты.Содержит(ОтчетМетаданные) Тогда
					Продолжить;
				КонецЕсли;

				СтрокаТаблицы						= Результат.Добавить();
				СтрокаТаблицы.ОтчетМетаданные		= ОтчетМетаданные;
				СтрокаТаблицы.ОтчетПолноеИмя		= ОтчетМетаданные.ПолноеИмя();
				СтрокаТаблицы.ПодсистемаМетаданные	= ДочерняяПодсистема;
				СтрокаТаблицы.ПодсистемаПолноеИмя	= ДочерняяПодсистема.ПолноеИмя();
			КонецЦикла;
		КонецЕсли;

		ВО_РазмещениеОтчетовВПодсистемах(Результат, ДочерняяПодсистема);
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция ВО_ТипОтчетаСтрокой(ОтчетСсылка) Экспорт
	ТипСсылки = ТипЗнч(ОтчетСсылка);

	Если ТипСсылки = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		Возврат "Внутренний";
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
		Возврат "Расширение";
	ИначеЕсли ТипСсылки = Тип("Строка") Тогда
		Возврат "Внешний";
	ИначеЕсли ТипСсылки = ВО_ТипСсылкиДополнительногоОтчета() Тогда
		Возврат "Дополнительный";
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

Функция ВО_ТипСсылкиДополнительногоОтчета()
	// Зарезервировано для новых подсистем

	Возврат Неопределено;
КонецФункции

Функция ВО_ОписаниеОтчетаПоУмолчанию(ОписанияОтчетов, МетаданныеОтчета, СсылкаОтчета, ТипОтчета = Неопределено, ГруппироватьПоОтчетам = Неопределено)
	Если ТипОтчета = Неопределено Тогда
		ТипОтчета = ВО_ТипОтчетаСтрокой(СсылкаОтчета);
	КонецЕсли;

	Если ГруппироватьПоОтчетам = Неопределено Тогда
		ГруппироватьПоОтчетам = ВО_ГлобальныеНастройки().ВыводитьОтчетыВместоВариантов;
	КонецЕсли;

	ИспользуетСКД		= (МетаданныеОтчета.ОсновнаяСхемаКомпоновкиДанных <> Неопределено);
	ФорматНастроекСКД	= (ИспользуетСКД И МетаданныеОтчета.Реквизиты.Количество() = 0);
	НастройкиДляПоиска	= Новый Структура("НаименованияПолей, НаименованияПараметровИОтборов, КлючевыеСлова, ИменаМакетов");

	ОписаниеОтчета							= ОписанияОтчетов.Добавить();
	ОписаниеОтчета.Отчет					= СсылкаОтчета;
	ОписаниеОтчета.Метаданные				= МетаданныеОтчета;
	ОписаниеОтчета.Включен					= Истина;
	ОписаниеОтчета.ВидимостьПоУмолчанию		= Истина;
	ОписаниеОтчета.Описание					= МетаданныеОтчета.Пояснение;
	ОписаниеОтчета.Наименование				= МетаданныеОтчета.Представление();
	ОписаниеОтчета.ОписаниеПолучено			= Истина;
	ОписаниеОтчета.Тип						= ТипОтчета;
	ОписаниеОтчета.ГруппироватьПоОтчету		= ГруппироватьПоОтчетам;
	ОписаниеОтчета.ИспользуетСКД			= ИспользуетСКД;
	ОписаниеОтчета.ФорматНастроекСКД		= ФорматНастроекСКД;
	ОписаниеОтчета.НастройкиДляПоиска		= НастройкиДляПоиска;

	Возврат ОписаниеОтчета;
КонецФункции

Процедура ВО_НастроитьОтчетВМодулеМенеджера(Настройки, ОтчетМетаданные) Экспорт
	НастройкиОтчета	= ВО_ОписаниеОтчета(Настройки, ОтчетМетаданные);

	Попытка
		Отчеты[ОтчетМетаданные.Имя].НастроитьВариантыОтчета(Настройки, НастройкиОтчета);
	Исключение
		ТекстОшибки = СтрШаблон("Недопустимое значение параметра КлючВарианта в процедуре ВариантыОтчетовСервер.ВО_НастроитьОтчетВМодулеМенеджера.
			|Не удалось настроить варианты отчета из модуля менеджера по причине:
			|%1",
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки, ОтчетМетаданные);
	КонецПопытки;
КонецПроцедуры

Функция ВО_ОписаниеОтчета(Настройки, Отчет) Экспорт
	Если ТипЗнч(Отчет) = Тип("ОбъектМетаданных") Тогда
		Результат = Настройки.НайтиСтроки(Новый Структура("Метаданные, ЭтоВариант", Отчет, Ложь));
	Иначе
		Результат = Настройки.НайтиСтроки(Новый Структура("Отчет, ЭтоВариант", Отчет, Ложь));
	КонецЕсли;

	Если Результат.Количество() = 0 Тогда
		Результат = ВО_НайденныеОписанияОтчета(Отчет);
	КонецЕсли;

	Если Результат.Количество() <> 1 Тогда
		ВызватьИсключение СтрШаблон("Недопустимое значение параметра Отчет в функции ВариантыОтчетов.ОписаниеОтчета.
			|Отчет ""%1"" не подключен к подсистеме ""%2"". Проверьте свойство ""Хранилище вариантов"" в свойствах отчета.",
			Строка(Отчет), "Варианты отчетов");
	КонецЕсли;

	Возврат Результат[0];
КонецФункции

Функция ВО_ЭтоПредопределенныйВариантОтчета(ВариантОтчета) Экспорт
	ТипВариантаОтчета = ТипЗнч(ВариантОтчета);

	Если ТипВариантаОтчета = Тип("СправочникОбъект.ПредопределенныеВариантыОтчетов") Или ТипВариантаОтчета = Тип("СправочникОбъект.ПредопределенныеВариантыОтчетовРасширений") Или ТипВариантаОтчета = Тип("СправочникСсылка.ПредопределенныеВариантыОтчетов") Или ТипВариантаОтчета = Тип("СправочникСсылка.ПредопределенныеВариантыОтчетовРасширений") Тогда
		Возврат Истина;
	КонецЕсли;

	СвойстваВариантаОтчета = Новый Структура("Пользовательский, ПредопределенныйВариант");
	ЗаполнитьЗначенияСвойств(СвойстваВариантаОтчета, ВариантОтчета);

	Возврат СвойстваВариантаОтчета.Пользовательский <> Истина И ЗначениеЗаполнено(СвойстваВариантаОтчета.ПредопределенныйВариант);
КонецФункции

Функция ВО_ПодключитьОтчетОбъект(СсылкаОтчета, ПолучатьМетаданные)
	Результат = Новый Структура("Объект, Имя, ПолноеИмя, Метаданные, Ссылка, ТекстОшибки");
	Результат.Вставить("Успех", Ложь);

	Если СсылкаОтчета = Неопределено Тогда
		Результат.ТекстОшибки = СтрШаблон("В методе ""%1"" не указан параметр ""%2"".", "ПодключитьОтчетОбъект", "СсылкаОтчета");

		Возврат Результат;
	Иначе
		Результат.Ссылка = СсылкаОтчета;
	КонецЕсли;

	Если ТипЗнч(Результат.Ссылка) = Тип("Строка") Тогда
		Результат.ТекстОшибки = СтрШаблон("Отчет ""%1"" записан как внешний и не может быть подключен из программы", Результат.Ссылка);

		Возврат Результат;
	КонецЕсли;

	Если ТипЗнч(Результат.Ссылка) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Или ТипЗнч(Результат.Ссылка) = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
		Результат.Метаданные = Справочники.ИдентификаторыОбъектовМетаданных.ОбъектМетаданныхПоИдентификатору(Результат.Ссылка, Ложь);

		Если ТипЗнч(Результат.Метаданные) <> Тип("ОбъектМетаданных") Тогда
			Результат.ТекстОшибки = СтрШаблон("Отчет ""%1"" не существует в программе", Результат.Имя);

			Возврат Результат;
		КонецЕсли;
		Результат.Имя = Результат.Метаданные.Имя;
		Если Не ПравоДоступа("Использование", Результат.Метаданные) Тогда
			Результат.ТекстОшибки = "Недостаточно прав доступа";

			Возврат Результат;
		КонецЕсли;
		Попытка
			Результат.Объект	= Отчеты[Результат.Имя].Создать();
			Результат.Успех		= Истина;
		Исключение
			ТекстОшибки = СтрШаблон("Не удалось подключить отчет %1:", Результат.Метаданные);
			ТекстОшибки = ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки, Результат.Метаданные);
		КонецПопытки;
	Иначе
		// Зарезервировано для новых подсистем
	КонецЕсли;

	Если Результат.Успех И ПолучатьМетаданные Тогда
		Результат.ПолноеИмя = Результат.Метаданные.ПолноеИмя();
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ВО_ИзвлечьТекстМакета(ОтчетОбъект, ИменаМакетов)
	Если ТипЗнч(ИменаМакетов) = Тип("Строка") Тогда
		ИменаМакетов = СтрРазделить(ИменаМакетов, ",", Ложь);
	КонецЕсли;
	ТекстыОбластей = Новый Массив;
	Для Каждого ИмяМакета Из ИменаМакетов Цикл
		Макет = ОтчетОбъект.ПолучитьМакет(СокрЛП(ИмяМакета));
		Если ТипЗнч(Макет) = Тип("ТабличныйДокумент") Тогда
			Низ					= Макет.ВысотаТаблицы;
			Право				= Макет.ШиринаТаблицы;
			ПроверенныеЯчейки	= Новый Соответствие;
			Для НомерКолонки = 1 По Право Цикл
				Для НомерСтроки = 1 По Низ Цикл
					Ячейка = Макет.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
					Если ПроверенныеЯчейки[Ячейка.Имя] <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ПроверенныеЯчейки[Ячейка.Имя] = Истина;
					Если ТипЗнч(Ячейка) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
						Продолжить;
					КонецЕсли;
					ТекстОбласти = СокрЛП(Ячейка.Текст);
					Если ПустаяСтрока(ТекстОбласти) Тогда
						Продолжить;
					КонецЕсли;

					ТекстыОбластей.Добавить(ТекстОбласти);
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Макет) = Тип("ТекстовыйДокумент") Тогда
			ТекстыОбластей.Добавить(СокрЛП(Макет.ПолучитьТекст()));
		КонецЕсли;
	КонецЦикла;

	Возврат СтрСоединить(ТекстыОбластей, Символы.ПС);
КонецФункции

Функция ВО_СформироватьПредставленияПолей(КомпоновщикНастроекКД)
	Результат = СтрРазделить(Строка(КомпоновщикНастроекКД.Настройки.Выбор), ",", Ложь);

	Коллекции = Новый Массив;
	Коллекции.Добавить(КомпоновщикНастроекКД.Настройки.Структура);
	Индекс = 0;
	Пока Индекс < Коллекции.Количество() Цикл
		Коллекция	= Коллекции[Индекс];
		Индекс		= Индекс + 1;

		Для Каждого Настройка Из Коллекция Цикл
			Если ТипЗнч(Настройка) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				Если Не Настройка.Использование Тогда
					Продолжить;
				КонецЕсли;
				Настройка = Настройка.Настройки;
			КонецЕсли;

			БазоваяПодсистемаКлиентСервер.ОН_ДополнитьМассив(Результат, СтрРазделить(Строка(Настройка.Выбор), ",", Ложь));

			Если ТипЗнч(Настройка) = Тип("НастройкиКомпоновкиДанных") Тогда
				Коллекции.Добавить(Настройка.Структура);
			ИначеЕсли ТипЗнч(Настройка) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				Если Не Настройка.Использование Тогда
					Продолжить;
				КонецЕсли;
				Коллекции.Добавить(Настройка.Структура);
			ИначеЕсли ТипЗнч(Настройка) = Тип("ТаблицаКомпоновкиДанных") Тогда
				Если Не Настройка.Использование Тогда
					Продолжить;
				КонецЕсли;
				Коллекции.Добавить(Настройка.Строки);
			ИначеЕсли ТипЗнч(Настройка) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
				Если Не Настройка.Использование Тогда
					Продолжить;
				КонецЕсли;
				Коллекции.Добавить(Настройка.Структура);
			ИначеЕсли ТипЗнч(Настройка) = Тип("ДиаграммаКомпоновкиДанных") Тогда
				Если Не Настройка.Использование Тогда
					Продолжить;
				КонецЕсли;
				Коллекции.Добавить(Настройка.Серии);
				Коллекции.Добавить(Настройка.Точки);
			ИначеЕсли ТипЗнч(Настройка) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
				Если Не Настройка.Использование Тогда
					Продолжить;
				КонецЕсли;
				Коллекции.Добавить(Настройка.Структура);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Результат = БазоваяПодсистемаКлиентСервер.ОН_СвернутьМассив(Результат);

	Возврат СтрСоединить(Результат, Символы.ПС);
КонецФункции

Функция ВО_СформироватьПредставленияПараметровИОтборов(КомпоновщикНастроек)
	Результат = Новый Массив;

	Настройки					= КомпоновщикНастроек.Настройки;
	ПользовательскиеНастройки	= КомпоновщикНастроек.ПользовательскиеНастройки;

	Режимы = РежимОтображенияЭлементаНастройкиКомпоновкиДанных;
	Для Каждого ПользовательскаяНастройка Из ПользовательскиеНастройки.Элементы Цикл
		ТипНастройки = ТипЗнч(ПользовательскаяНастройка);
		Если ТипНастройки = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			ЭтоОтбор = Ложь;
		ИначеЕсли ТипНастройки = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЭтоОтбор = Истина;
		Иначе
			Продолжить;
		КонецЕсли;

		Если ПользовательскаяНастройка.РежимОтображения = Режимы.Недоступный Тогда
			Продолжить;
		КонецЕсли;

		Идентификатор = ПользовательскаяНастройка.ИдентификаторПользовательскойНастройки;

		ОбщаяНастройка = ВариантыОтчетовКлиентСервер.О_ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки, Идентификатор,, ПользовательскиеНастройки);

		Если ОбщаяНастройка = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если ПользовательскаяНастройка.РежимОтображения = Режимы.Авто И ОбщаяНастройка.РежимОтображения <> Режимы.БыстрыйДоступ Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПредставлений = Новый Структура("Представление, ПредставлениеПользовательскойНастройки", "", "");
		ЗаполнитьЗначенияСвойств(СтруктураПредставлений, ОбщаяНастройка);
		Если ЗначениеЗаполнено(СтруктураПредставлений.ПредставлениеПользовательскойНастройки) Тогда
			ЭлементЗаголовок = СтруктураПредставлений.ПредставлениеПользовательскойНастройки;
		ИначеЕсли ЗначениеЗаполнено(СтруктураПредставлений.Представление) Тогда
			ЭлементЗаголовок = СтруктураПредставлений.Представление;
		Иначе
			ДоступнаяНастройка = ВариантыОтчетовКлиентСервер.О_НайтиДоступнуюНастройку(Настройки, ОбщаяНастройка);
			Если ДоступнаяНастройка <> Неопределено И ЗначениеЗаполнено(ДоступнаяНастройка.Заголовок) Тогда
				ЭлементЗаголовок = ДоступнаяНастройка.Заголовок;
			Иначе
				ЭлементЗаголовок = Строка(?(ЭтоОтбор, ОбщаяНастройка.ЛевоеЗначение, ОбщаяНастройка.Параметр));
			КонецЕсли;
		КонецЕсли;

		ЭлементЗаголовок = СокрЛП(ЭлементЗаголовок);
		Если ЭлементЗаголовок <> "" Тогда
			Результат.Добавить(ЭлементЗаголовок);
		КонецЕсли;
	КонецЦикла;

	Результат = БазоваяПодсистемаКлиентСервер.ОН_СвернутьМассив(Результат);

	Возврат СтрСоединить(Результат, Символы.ПС);
КонецФункции

Процедура ВО_ЗаменитьКлючиПользовательскихНастроек(СтарыйВариант, АктуальныйВариант)
	Если СтарыйВариант.КлючВарианта = АктуальныйВариант.КлючВарианта Или Не ЗначениеЗаполнено(СтарыйВариант.КлючВарианта) Или Не ЗначениеЗаполнено(АктуальныйВариант.КлючВарианта) Или ТипЗнч(АктуальныйВариант.Отчет) <> Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		Возврат;
	КонецЕсли;

	ОтчетПолноеИмя		= АктуальныйВариант.Отчет.ПолноеИмя;
	СтарыйКлючОбъекта	= ОтчетПолноеИмя + "/" + СтарыйВариант.КлючВарианта;
	НовыйКлючОбъекта	= ОтчетПолноеИмя + "/" + АктуальныйВариант.КлючВарианта;

	Отбор				= Новый Структура("КлючОбъекта", СтарыйКлючОбъекта);
	ВыборкаХранилища	= ХранилищеПользовательскихНастроекОтчетов.Выбрать(Отбор);
	ОшибокЧтенияПодряд	= 0;
	Пока Истина Цикл
		// Чтение настроек из хранилища по старому ключу.
		Попытка
			ЭлементВыборкиПолучен	= ВыборкаХранилища.Следующий();
			ОшибокЧтенияПодряд		= 0;
		Исключение
			ЭлементВыборкиПолучен	= Неопределено;
			ОшибокЧтенияПодряд		= ОшибокЧтенияПодряд + 1;
			ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, "В процессе выборки вариантов отчетов из стандартного хранилища возникла ошибка:" + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), СтарыйВариант.Ссылка);
		КонецПопытки;

		Если ЭлементВыборкиПолучен = Ложь Тогда
			Прервать;
		ИначеЕсли ЭлементВыборкиПолучен = Неопределено Тогда
			Если ОшибокЧтенияПодряд > 100 Тогда
				Прервать;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		// Чтение описания настроек.
		ОписаниеНастроек = ХранилищеПользовательскихНастроекОтчетов.ПолучитьОписание(ВыборкаХранилища.КлючОбъекта, ВыборкаХранилища.КлючНастроек, ВыборкаХранилища.Пользователь);

		// Запись настроек в хранилище по новому ключу.
		ХранилищеПользовательскихНастроекОтчетов.Сохранить(НовыйКлючОбъекта, ВыборкаХранилища.КлючНастроек, ВыборкаХранилища.Настройки, ОписаниеНастроек, ВыборкаХранилища.Пользователь);
	КонецЦикла;

	// Очистка старых настроек хранилища.
	ХранилищеПользовательскихНастроекОтчетов.Удалить(СтарыйКлючОбъекта, Неопределено, Неопределено);
КонецПроцедуры

Функция ВО_СовпадаютЗначенияСвойств(Структура, Коллекция, ПрефиксВКоллекции = "")
	Для Каждого КлючИЗначение Из Структура Цикл
		Если Коллекция[ПрефиксВКоллекции + КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;
КонецФункции

Функция ВО_ИзменилисьКлючевыеНастройкиПредопределенного(ОписаниеВарианта, ВариантИзБазы)
	Возврат (ВариантИзБазы.Наименование <> ОписаниеВарианта.Наименование Или ВариантИзБазы.Родитель <> ОписаниеВарианта.ВариантРодитель Или ВариантИзБазы.ВидимостьПоУмолчанию <> ОписаниеВарианта.ВидимостьПоУмолчанию);
КонецФункции

Функция ВО_ИзменилисьВторостепенныеНастройкиПредопределенного(ОписаниеВарианта, ВариантИзБазы)
	// Шапка
	Если ВариантИзБазы.Включен <> ОписаниеВарианта.Включен Или ВариантИзБазы.Описание <> ОписаниеВарианта.Описание Или ВариантИзБазы.КлючЗамеров <> ОписаниеВарианта.КлючЗамеров Или ВариантИзБазы.ГруппироватьПоОтчету <> ОписаниеВарианта.ГруппироватьПоОтчету Тогда
		Возврат Истина;
	КонецЕсли;

	// Таблица "Размещение"
	ТаблицаРазмещения = ВариантИзБазы.Размещение;
	Если ТаблицаРазмещения.Количество() <> ОписаниеВарианта.Размещение.Количество() Тогда
		Возврат Истина;
	КонецЕсли;

	Для Каждого КлючИЗначение Из ОписаниеВарианта.Размещение Цикл
		Подсистема = Справочники.ИдентификаторыОбъектовМетаданных.ИдентификаторОбъектаМетаданных(КлючИЗначение.Ключ, Истина);
		Если ТипЗнч(Подсистема) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		СтрокаРазмещения = ТаблицаРазмещения.Найти(Подсистема, "Подсистема");
		Если СтрокаРазмещения = Неопределено Или СтрокаРазмещения.Важный <> (НРег(КлючИЗначение.Значение) = НРег("Важный")) Или СтрокаРазмещения.СмТакже <> (НРег(КлючИЗначение.Значение) = НРег("СмТакже")) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

Функция ВО_НайденныеОписанияОтчета(Отчет)
	НайденныеОписанияОтчета = Новый Массив;

	Если ТипЗнч(Отчет) = Тип("ОбъектМетаданных") Тогда
		СсылкаОтчета		= Справочники.ИдентификаторыОбъектовМетаданных.ИдентификаторОбъектаМетаданных(Отчет, Истина);
		МетаданныеОтчета	= Отчет;
	Иначе
		СсылкаОтчета		= Отчет;
		МетаданныеОтчета	= Справочники.ИдентификаторыОбъектовМетаданных.ОбъектМетаданныхПоИдентификатору(Отчет, Истина);
	КонецЕсли;

	Если Не ВО_ОтчетПодключенКХранилищу(МетаданныеОтчета) Тогда
		Возврат НайденныеОписанияОтчета;
	КонецЕсли;

	ОписанияОтчетов	= ВО_КоллекцияПредопределенныхВариантовОтчетов();
	ОписаниеОтчета	= ВО_ОписаниеОтчетаПоУмолчанию(ОписанияОтчетов, МетаданныеОтчета, СсылкаОтчета);
	НайденныеОписанияОтчета.Добавить(ОписаниеОтчета);

	Возврат НайденныеОписанияОтчета;
КонецФункции

Функция ВО_ЯзыкиПредставленийВариантовОтчетовДляЗаполнения()
	Языки = Новый Массив;

	Исключения = Новый Массив;
	Исключения.Добавить(ТекущийЯзык());
	Исключения.Добавить(Метаданные.ОсновнойЯзык);

	Для Каждого Язык Из Метаданные.Языки Цикл
		Если Исключения.Найти(Язык) = Неопределено Тогда
			Языки.Добавить(Язык.КодЯзыка);
		КонецЕсли;
	КонецЦикла;

	Возврат Языки;
КонецФункции

Функция ВО_СлужебныйПользователь(Знач КодЯзыка)
	ИмяПользователя = "СлужебныйПользовательДляОбновленияПредставлений";

	// Обновление пользователя информационной базы.
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);

	Если ПользовательИБ = Неопределено Тогда
		Если ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;

		ПользовательИБ							= ПользователиИнформационнойБазы.СоздатьПользователя();
		ПользовательИБ.Имя						= ИмяПользователя;
		ПользовательИБ.Пароль					= Строка(Новый УникальныйИдентификатор);
		ПользовательИБ.ЗапрещеноИзменятьПароль	= Истина;
		ПользовательИБ.ПоказыватьВСпискеВыбора	= Ложь;
	КонецЕсли;

	ПользовательИБ.Язык	= ВО_ЯзыкПоКоду(КодЯзыка);
	ПользовательИБ.Записать();

	// Обновление пользователя - элемента справочника Пользователи.
	ОписаниеПользователяИБ = Новый Структура;
	ОписаниеПользователяИБ.Вставить("Действие",						"Записать");
	ОписаниеПользователяИБ.Вставить("Имя",							ПользовательИБ.Имя);
	ОписаниеПользователяИБ.Вставить("АутентификацияСтандартная",	Истина);
	ОписаниеПользователяИБ.Вставить("ПоказыватьВСпискеВыбора",		ПользовательИБ.ПоказыватьВСпискеВыбора);
	ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор",		ПользовательИБ.УникальныйИдентификатор);

	Отбор		= Новый Структура("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
	Выборка		= Справочники.Пользователи.Выбрать(,, Отбор);
	ЭтоНовый	= Не Выборка.Следующий();

	НачатьТранзакцию();

	Попытка
		Блокировка			= Новый БлокировкаДанных;
		ЭлементБлокировки	= Блокировка.Добавить(Метаданные.Справочники.Пользователи.ПолноеИмя());

		Если Не ЭтоНовый Тогда
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		КонецЕсли;

		Блокировка.Заблокировать();

		Если ЭтоНовый Тогда
			Пользователь = Справочники.Пользователи.СоздатьЭлемент();
		Иначе
			Пользователь = Выборка.Ссылка.ПолучитьОбъект();
		КонецЕсли;

		Пользователь.Наименование	= ПользовательИБ.Имя;
		Пользователь.Служебный		= Истина;
		Пользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		Пользователь.Записать();

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ЗаписьЖурналаРегистрации("Варианты отчетов.Создание служебного пользователя", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Пользователи,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		Возврат Неопределено;
	КонецПопытки;

	Возврат ПользовательИБ.Имя;
КонецФункции

Функция ВО_ОтчетПодключенКХранилищу(ОтчетМетаданные, ПоУмолчаниюВсеПодключены = Неопределено) Экспорт
	ХранилищеМетаданные	= ОтчетМетаданные.ХранилищеВариантов;
	Если ХранилищеМетаданные = Неопределено Тогда
		Если ПоУмолчаниюВсеПодключены = Неопределено Тогда
			ПоУмолчаниюВсеПодключены = (Метаданные.ХранилищеВариантовОтчетов <> Неопределено И Метаданные.ХранилищеВариантовОтчетов.Имя = "ХранилищеВариантовОтчетов");
		КонецЕсли;
		ОтчетПодключен = ПоУмолчаниюВсеПодключены;
	Иначе
		ОтчетПодключен = (ХранилищеМетаданные = Метаданные.ХранилищаНастроек.ХранилищеВариантовОтчетов);
	КонецЕсли;

	Возврат ОтчетПодключен;
КонецФункции

Функция ВО_НаименованиеЗанято(Отчет, Ссылка, Наименование) Экспорт
	Если Наименование = Строка(Ссылка) Тогда
		Возврат Ложь; // Проверка отключается т.к. наименование не изменилось.
	КонецЕсли;

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	|	ВариантыОтчетов.Представление КАК Наименование
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.Ссылка <> &Ссылка
	|	И НЕ ВариантыОтчетов.ПометкаУдаления
	|	И НЕ ВариантыОтчетов.ПредопределенныйВариант В (&ОтключенныеВариантыПрограммы)";
	Запрос.УстановитьПараметр("Отчет",			Отчет);
	Запрос.УстановитьПараметр("Ссылка",			Ссылка);
	Запрос.УстановитьПараметр("ОтключенныеВариантыПрограммы", ВариантыОтчетовСерверПовтИсп.ВО_ОтключенныеВариантыПрограммы());

	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		Если Выборка.Наименование = Наименование Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

Функция ВО_КлючВариантаЗанят(Отчет, Ссылка, КлючВарианта) Экспорт
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК КлючВариантаЗанят
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.Ссылка <> &Ссылка
	|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта
	|	И ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Отчет",        Отчет);
	Запрос.УстановитьПараметр("Ссылка",       Ссылка);
	Запрос.УстановитьПараметр("КлючВарианта", КлючВарианта);

	УстановитьПривилегированныйРежим(Истина);
	Результат = Не Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);

	Возврат Результат;
КонецФункции

Функция ВО_ОтключенныеВариантыОтчетов(Знач ОтчетыПользователя = Неопределено) Экспорт
	Если ОтчетыПользователя = Неопределено Тогда
		ОтчетыПользователя = Новый Массив(ВариантыОтчетовСерверПовтИсп.ВО_ДоступныеОтчеты());
	КонецЕсли;

	// Получить варианты, недоступные по функциональным опциям.

	ТаблицаОпций		= ВариантыОтчетовСерверПовтИсп.ВО_Параметры().ТаблицаФункциональныхОпций;
	ТаблицаВариантов	= ТаблицаОпций.СкопироватьКолонки("ПредопределенныйВариант, ИмяФункциональнойОпции");
	ТаблицаВариантов.Колонки.Добавить("ЗначениеОпции", Новый ОписаниеТипов("Число"));

	Для Каждого ОтчетСсылка Из ОтчетыПользователя Цикл
		Найденные = ТаблицаОпций.НайтиСтроки(Новый Структура("Отчет", ОтчетСсылка));
		Для Каждого СтрокаТаблицы Из Найденные Цикл
			СтрокаВариант	= ТаблицаВариантов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВариант, СтрокаТаблицы);
			Значение		= ПолучитьФункциональнуюОпцию(СтрокаТаблицы.ИмяФункциональнойОпции);
			Если Значение = Истина Тогда
				СтрокаВариант.ЗначениеОпции = 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	ТаблицаВариантов.Свернуть("ПредопределенныйВариант", "ЗначениеОпции");
	ТаблицаОтключенных					= ТаблицаВариантов.Скопировать(Новый Структура("ЗначениеОпции", 0));
	ТаблицаОтключенных.Свернуть("ПредопределенныйВариант");
	ОтключенныеПоФункциональнымОпциям	= ТаблицаОтключенных.ВыгрузитьКолонку("ПредопределенныйВариант");

	// Добавить варианты, отключенные разработчиком.
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВариантыКонфигурации.Ссылка
	|ИЗ
	|	Справочник.ПредопределенныеВариантыОтчетов КАК ВариантыКонфигурации
	|ГДЕ
	|	ВариантыКонфигурации.Отчет В (&ОтчетыПользователя)
	|	И (НЕ ВариантыКонфигурации.Включен
	|		ИЛИ ВариантыКонфигурации.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВариантыРасширений.Ссылка
	|ИЗ
	|	Справочник.ПредопределенныеВариантыОтчетовРасширений КАК ВариантыРасширений
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредопределенныеВариантыОтчетовВерсийРасширений КАК Версии
	|		ПО ВариантыРасширений.Ссылка = Версии.Вариант
	|		И ВариантыРасширений.Отчет = Версии.Отчет
	|		И Версии.ВерсияРасширений = &ВерсияРасширений
	|ГДЕ
	|	ВариантыРасширений.Отчет В (&ОтчетыПользователя)
	|	И (НЕ ВариантыРасширений.Включен
	|		ИЛИ Версии.Вариант ЕСТЬ NULL)";

	Запрос.УстановитьПараметр("ОтчетыПользователя",	ОтчетыПользователя);
	Запрос.УстановитьПараметр("ВерсияРасширений",	ПараметрыСеанса.ВерсияРасширений);

	ОтключенныеПринудительно = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	БазоваяПодсистемаКлиентСервер.ОН_ДополнитьМассив(ОтключенныеПоФункциональнымОпциям, ОтключенныеПринудительно);

	Возврат ОтключенныеПоФункциональнымОпциям;
КонецФункции

Функция ВО_ТипОтчета(ОтчетСсылка) Экспорт
	ТипСсылки = ТипЗнч(ОтчетСсылка);
	Если ТипСсылки = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		Возврат Перечисления.ТипыОтчетов.Внутренний;
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
		Возврат Перечисления.ТипыОтчетов.Расширение;
	ИначеЕсли ТипСсылки = Тип("Строка") Тогда
		Возврат Перечисления.ТипыОтчетов.Внешний;
	ИначеЕсли ТипСсылки = ВО_ТипСсылкиДополнительногоОтчета() Тогда
		Возврат Перечисления.ТипыОтчетов.Дополнительный;
	КонецЕсли;

	Возврат Перечисления.ТипыОтчетов.ПустаяСсылка();
КонецФункции

Функция ВО_СписокРазделов() Экспорт
	СписокРазделов = Новый СписокЗначений;

	ИнтеграцияПодсистемСервер.ПриОпределенииРазделовСВариантамиОтчетов(СписокРазделов);


	// Зарезервировано для новых подсистем

	Возврат СписокРазделов;
КонецФункции

Процедура ВО_УстановитьРежимВыводаОтчетаВПанеляхОтчетов(Настройки, Отчет, ГруппироватьПоОтчетам)
	Если ТипЗнч(Отчет) = Тип("СтрокаТаблицыЗначений") Тогда
		ОписаниеОтчета = Отчет;
	Иначе
		ОписаниеОтчета = Настройки.НайтиСтроки(Новый Структура("Метаданные,ЭтоВариант", Отчет, Ложь));
		Если ОписаниеОтчета.Количество() <> 1 Тогда
			ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Предупреждение, СтрШаблон("Отчет ""%1"" не подключен к подсистеме.", Отчет.Имя));

			Возврат;
		КонецЕсли;
		ОписаниеОтчета = ОписаниеОтчета[0];
	КонецЕсли;
	ОписаниеОтчета.ГруппироватьПоОтчету = ГруппироватьПоОтчетам;
КонецПроцедуры

Процедура ВО_ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	////////////////////////////////////////////////////////////////////////////////
	// 1. Обновление общих данных.

	Обработчик							= Обработчики.Добавить();
	Обработчик.УправлениеОбработчиками	= Истина;
	Обработчик.ОбщиеДанные				= Истина;
	Обработчик.РежимВыполнения			= "Оперативно";
	Обработчик.Версия					= "*";
	Обработчик.Процедура				= "ВариантыОтчетовСервер.ВО_ОперативноеОбновлениеОбщихДанныхКонфигурации";
	Обработчик.Приоритет				= 90;

	////////////////////////////////////////////////////////////////////////////////
	// 2. Обновление разделенных данных.

	// 2.3. Обновить разделенные данные в локальном режиме.
	Обработчик								= Обработчики.Добавить();
	Обработчик.ВыполнятьВГруппеОбязательных	= Истина;
	Обработчик.ОбщиеДанные					= Ложь;
	Обработчик.РежимВыполнения				= "Оперативно";
	Обработчик.Версия						= "*";
	Обработчик.Приоритет					= 70;
	Обработчик.Процедура					= "ВариантыОтчетовСервер.ВО_ОперативноеОбновлениеРазделенныхДанныхКонфигурации";

	// 2.4. Обновить служебного пользователя для обновления представлений.
	Обработчик								= Обработчики.Добавить();
	Обработчик.ВыполнятьВГруппеОбязательных	= Истина;
	Обработчик.ОбщиеДанные					= Ложь;
	Обработчик.РежимВыполнения				= "Оперативно";
	Обработчик.Версия						= "3.1.2.205";
	Обработчик.Приоритет					= 99;
	Обработчик.Процедура					= "ВариантыОтчетовСервер.ВО_ОперативноеОбновлениеСлужебногоПользователя";

	////////////////////////////////////////////////////////////////////////////////
	// 3. Отложенное обновление.

	// 3.2. Заполнить информацию для поиска предопределенных вариантов отчетов.

	Обработчик					= Обработчики.Добавить();
	Обработчик.РежимВыполнения	= "Отложенно";
	Обработчик.ОбщиеДанные		= Ложь;
	Обработчик.Идентификатор	= Новый УникальныйИдентификатор("38d2a135-53e0-4c68-9bd6-3d6df9b9dcfb");
	Обработчик.Версия			= "*";
	Обработчик.Процедура		= "ВариантыОтчетовСервер.ВО_ОбновитьИндексПоискаПредопределенныхВариантовОтчетов";
	Обработчик.Комментарий		= "Обновление индекса поиска отчетов, предусмотренных в программе.";

	// 3.3. Заполнить информацию для поиска пользовательских вариантов отчетов.
	Обработчик					= Обработчики.Добавить();
	Обработчик.РежимВыполнения	= "Отложенно";
	Обработчик.ОбщиеДанные		= Ложь;
	Обработчик.Идентификатор	= Новый УникальныйИдентификатор("5ba93197-230b-4ac8-9abb-ab3662e5ff76");
	Обработчик.Версия			= "*";
	Обработчик.Процедура		= "ВариантыОтчетовСервер.ВО_ОбновитьИндексПоискаПользовательскихВариантовОтчетов";
	Обработчик.Комментарий		= "Обновление индекса поиска отчетов, сохраненных пользователями.";

	// 3.4. Установить соответствующие ссылки на идентификаторы объектов метаданных в настройках вариантов универсального отчета.
	Обработчик										= Обработчики.Добавить();
	Обработчик.Версия								= "3.0.1.81";
	Обработчик.Идентификатор						= Новый УникальныйИдентификатор("6cd3c6c1-6919-4e18-9725-eb6dbb841f4a");
	Обработчик.РежимВыполнения						= "Отложенно";
	Обработчик.ОчередьОтложеннойОбработки			= 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления	= "Справочники.ВариантыОтчетов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.Процедура							= "Справочники.ВариантыОтчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ЧитаемыеОбъекты						= "Справочник.ВариантыОтчетов";
	Обработчик.ИзменяемыеОбъекты					= "Справочник.ВариантыОтчетов";
	Обработчик.БлокируемыеОбъекты					= "Справочник.ВариантыОтчетов";
	Обработчик.ПроцедураПроверки					= "ОбновлениеВерсииИБСервер.ОИБ_ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий							= "Установка параметра ИсточникДанных в настройках вариантов универсального отчета.
		|После завершения обработки, переименование объектов метаданных не приведет к потере сохраненных вариантов отчетов";

	Обработчик.ПриоритетыВыполнения					= ОбновлениеВерсииИБСервер.ОИБ_ПриоритетыВыполненияОбработчика();
	Приоритет										= Обработчик.ПриоритетыВыполнения.Добавить();
	Приоритет.Процедура								= "РегистрыСведений.НастройкиВариантовОтчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Приоритет.Порядок								= "До";

	// 3.5. Зарегистрировать настройки доступности вариантов отчетов в разрезе пользователей (групп пользователей).
	Обработчик										= Обработчики.Добавить();
	Обработчик.Версия								= "3.1.2.64";
	Обработчик.Идентификатор						= Новый УникальныйИдентификатор("eba9f8fb-2755-4d1a-99f5-cdd132e48cfc");
	Обработчик.РежимВыполнения						= "Отложенно";
	Обработчик.ОчередьОтложеннойОбработки			= 2;
	Обработчик.ПроцедураЗаполненияДанныхОбновления	= "РегистрыСведений.НастройкиВариантовОтчетов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.Процедура							= "РегистрыСведений.НастройкиВариантовОтчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ЧитаемыеОбъекты						= "Справочник.ВариантыОтчетов";
	Обработчик.ИзменяемыеОбъекты					= "Справочник.ВариантыОтчетов";
	Обработчик.БлокируемыеОбъекты					= "Справочник.ВариантыОтчетов, РегистрСведений.НастройкиВариантовОтчетов";
	Обработчик.ПроцедураПроверки					= "ОбновлениеВерсииИБСервер.ОИБ_ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий							= "Перенос всех настроек доступности вариантов отчетов в регистр сведений ""Настройки вариантов отчетов"".
		|До завершения обработки, настройка доступности вариантов отчетов в разрезе пользователей (групп пользователей) будет работать некорректно.";

	Обработчик.ПриоритетыВыполнения					= ОбновлениеВерсииИБСервер.ОИБ_ПриоритетыВыполненияОбработчика();
	Приоритет										= Обработчик.ПриоритетыВыполнения.Добавить();
	Приоритет.Процедура								= "Справочники.ВариантыОтчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Приоритет.Порядок								= "После";
КонецПроцедуры

Процедура ВО_ОперативноеОбновлениеОбщихДанныхКонфигурации(ПараметрыОбновления) Экспорт
	Режим = "ОбщиеДанныеКонфигурации";
	ВО_УстановитьПризнакЗаполненияПредставлений(ТекущаяДатаСеанса(), Истина, Режим);
	ВО_ОперативноеОбновлениеОбщихДанных(Режим, ПараметрыОбновления.РазделенныеОбработчики);

	ВО_ЗапланироватьЗаполнениеПредставлений();
КонецПроцедуры

Процедура ВО_ОперативноеОбновлениеРазделенныхДанныхКонфигурации() Экспорт
	ВО_АктуализироватьВариантыОтчетов("РазделенныеДанныеКонфигурации");
КонецПроцедуры

Процедура ВО_ОперативноеОбновлениеСлужебногоПользователя() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	ИмяПользователя	= "СлужебныйПользовательДляОбновленияПредставлений";
	ПользовательИБ	= ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);

	Если ПользовательИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Отбор	= Новый Структура("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
	Выборка	= Справочники.Пользователи.Выбрать(,, Отбор);

	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;

	НачатьТранзакцию();

	Попытка
		Блокировка			= Новый БлокировкаДанных;
		ЭлементБлокировки	= Блокировка.Добавить(Метаданные.Справочники.Пользователи.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		Блокировка.Заблокировать();

		Пользователь		= Выборка.Ссылка.ПолучитьОбъект();
		ОбновлениеВерсииИБСервер.ОИБ_УдалитьДанные(Пользователь);

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ЗаписьЖурналаРегистрации("Варианты ВариантыОтчетовСервер.ВО_Обновление служебного пользователя", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Пользователи,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

Процедура ВО_ОбновитьИндексПоискаПредопределенныхВариантовОтчетов(Параметры = Неопределено) Экспорт
	ВО_ОбновитьИндексПоиска("ОбщиеДанныеКонфигурации", Истина);
КонецПроцедуры

Процедура ВО_ОбновитьИндексПоискаПользовательскихВариантовОтчетов(Параметры = Неопределено) Экспорт
	ВО_ОбновитьИндексПоиска("РазделенныеДанныеКонфигурации", Истина);
КонецПроцедуры

Процедура ВО_ПриОчисткеВсехПараметровРаботыРасширений() Экспорт
	НаборЗаписей = РегистрыСведений.ПредопределенныеВариантыОтчетовВерсийРасширений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВерсияРасширений.Установить(ПараметрыСеанса.ВерсияРасширений);
	НаборЗаписей.Записать();
КонецПроцедуры

Функция ВО_ПолныеПраваНаВарианты() Экспорт
	МетаданныеВариантовОтчетов	= Метаданные.Справочники.ВариантыОтчетов;
	СтандартныеРеквизиты		= МетаданныеВариантовОтчетов.СтандартныеРеквизиты;

	ПараметрыДоступа			= ПараметрыДоступа("Изменение", МетаданныеВариантовОтчетов, СтандартныеРеквизиты.Ссылка.Имя);

	Возврат ПараметрыДоступа.Доступность И Не ПараметрыДоступа.ОграничениеУсловием;
КонецФункции

Функция ВО_ОтчетыТекущегоПользователя() Экспорт
	ДоступныеОтчеты = Новый Массив(ВариантыОтчетовСерверПовтИсп.ВО_ДоступныеОтчеты());

	// Зарезервировано для новых подсистем

	Возврат ДоступныеОтчеты;
КонецФункции

Процедура ВО_ДополнитьОтборыИзСтруктуры(Отбор, Структура, РежимОтображения = Неопределено) Экспорт
	Если РежимОтображения = Неопределено Тогда
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	Для Каждого КлючИЗначение Из Структура Цикл
		ИмяПоля		= КлючИЗначение.Ключ;
		ОтборПоля	= КлючИЗначение.Значение;
		Тип 		= ТипЗнч(ОтборПоля);
		Если Тип = Тип("Структура") Тогда
			Условие		= ВидСравненияКомпоновкиДанных[ОтборПоля.Вид];
			Значение	= ОтборПоля.Значение;
		ИначеЕсли Тип = Тип("Массив") Тогда
			Условие		= ВидСравненияКомпоновкиДанных.ВСписке;
			Значение	= ОтборПоля;
		ИначеЕсли Тип = Тип("СписокЗначений") Тогда
			Условие		= ВидСравненияКомпоновкиДанных.ВСписке;
			Значение	= ОтборПоля.ВыгрузитьЗначения();
		ИначеЕсли Тип = Тип("ВидСравненияКомпоновкиДанных") Тогда
			Условие		= ОтборПоля;
			Значение	= Неопределено;
		Иначе
			Условие		= ВидСравненияКомпоновкиДанных.Равно;
			Значение	= ОтборПоля;
		КонецЕсли;
		БазоваяПодсистемаКлиентСервер.ОН_УстановитьЭлементОтбора(Отбор, ИмяПоля, Значение, Условие, , Истина, РежимОтображения);
	КонецЦикла;
КонецПроцедуры

Процедура ВО_ПриПодключенииОтчета(ПараметрыОткрытия) Экспорт
	ПараметрыОткрытия.Вставить("Подключен", Ложь);

	Если ПараметрыОткрытия.ТипОтчета = "Внутренний"
		Или ПараметрыОткрытия.ТипОтчета = "Расширение" Тогда

		МетаданныеОтчета = Справочники.ИдентификаторыОбъектовМетаданных.ОбъектМетаданныхПоИдентификатору(ПараметрыОткрытия.Отчет, Ложь);

		Если ТипЗнч(МетаданныеОтчета) <> Тип("ОбъектМетаданных") Тогда
			ВызватьИсключение СтрШаблон("Не удалось открыть отчет ""%1"".
					|Возможно, было отключено расширение конфигурации с этим отчетом.",
				ПараметрыОткрытия.Отчет);
		КонецЕсли;
		ПараметрыОткрытия.ИмяОтчета = МетаданныеОтчета.Имя;
		ПараметрыОткрытия.Подключен = Истина; // Отчеты конфигурации всегда подключены.

	ИначеЕсли ПараметрыОткрытия.ТипОтчета = "Расширение" Тогда
		Если Метаданные.Отчеты.Найти(ПараметрыОткрытия.ИмяОтчета) = Неопределено Тогда
			ВызватьИсключение СтрШаблон("Не удалось открыть отчет ""%1"".
					|Возможно, было отключено расширение конфигурации с этим отчетом.",
				ПараметрыОткрытия.ИмяОтчета);
		КонецЕсли;
		ПараметрыОткрытия.Подключен = Истина;
	ИначеЕсли ПараметрыОткрытия.ТипОтчета = "Дополнительный" Тогда
		// Зарезервировано для новых подсистем
	КонецЕсли;
КонецПроцедуры

Функция ВО_НайтиВариантыОтчетов(Знач ПараметрыПоиска, Знач ПолучатьИтоговуюТаблицу = Ложь, Знач ПолучатьПодсветку = Ложь) Экспорт
	Если ВО_ПредставленияЗаполнены() = "НеЗаполнены" Тогда
		Настройки = ВО_ПараметрыОбновленияНастроек();
		Настройки.Отложенное = Истина;
		ВО_Обновить(Настройки);
	КонецЕсли;

	ЕстьСтрокаПоиска		= ПараметрыПоиска.Свойство("СтрокаПоиска") И ЗначениеЗаполнено(ПараметрыПоиска.СтрокаПоиска);
	ЕстьОтборПоОтчетам		= ПараметрыПоиска.Свойство("Отчеты") И ЗначениеЗаполнено(ПараметрыПоиска.Отчеты);
	ЕстьОтборПоПодсистемам	= ПараметрыПоиска.Свойство("Подсистемы") И ЗначениеЗаполнено(ПараметрыПоиска.Подсистемы);
	ЕстьОтборПоКонтексту	= ПараметрыПоиска.Свойство("Контекст");

	ЕстьОтборПоТипамОтчетов		= ПараметрыПоиска.Свойство("ТипыОтчетов") И ЗначениеЗаполнено(ПараметрыПоиска.ТипыОтчетов);

	Результат = Новый Структура;
	Результат.Вставить("Ссылки",							Новый Массив);
	Результат.Вставить("ПодсветкаВариантов",				Новый Соответствие);
	Результат.Вставить("Подсистемы",						Новый Массив);
	Результат.Вставить("ПодсветкаПодсистем",				Новый Соответствие);
	Результат.Вставить("ВариантыСвязанныеСПодсистемами",	Новый Соответствие);
	Результат.Вставить("РодителиСвязанныеСВариантами",		Новый Массив);

	Если ПолучатьИтоговуюТаблицу Тогда
		Результат.Вставить("ТаблицаЗначений", Новый ТаблицаЗначений);
	КонецЕсли;

	Если Не ЕстьОтборПоПодсистемам И Не ЕстьСтрокаПоиска И Не ЕстьОтборПоТипамОтчетов И Не ЕстьОтборПоОтчетам Тогда
		Возврат Результат;
	КонецЕсли;

	ЕстьОтборПоВидимости = ЕстьОтборПоПодсистемам И ПараметрыПоиска.Свойство("ТолькоВидимыеВПанелиОтчетов")  И ПараметрыПоиска.ТолькоВидимыеВПанелиОтчетов = Истина;

	ТолькоНепомеченныеДляУдаления = ?(ПараметрыПоиска.Свойство("ПометкаУдаления"), ПараметрыПоиска.ПометкаУдаления, Истина);

	Если ЕстьОтборПоОтчетам Тогда
		ОтборПоОтчетам = ПараметрыПоиска.Отчеты;
		ПараметрыПоиска.Вставить("ОтключенныеВариантыПрограммы", ВО_ОтключенныеВариантыОтчетов(ОтборПоОтчетам));
	Иначе
		ПараметрыПоиска.Вставить("ОтключенныеВариантыПрограммы", ВариантыОтчетовСерверПовтИсп.ВО_ОтключенныеВариантыПрограммы());
		ПараметрыПоиска.Вставить("ОтчетыПользователя", ВО_ОтчетыТекущегоПользователя());
		ОтборПоОтчетам = ПараметрыПоиска.ОтчетыПользователя;
	КонецЕсли;

	ЕстьПравоЧтенияАвторов							= ПравоДоступа("Чтение", Метаданные.Справочники.Пользователи);
	ТекущийПользователь								= ПользователиСервер.сП_АвторизованныйПользователь();
	ПоказыватьЛичныеВариантыОтчетовДругихАвторов	= ПользователиСервер.П_ЭтоПолноправныйПользователь();

	Если ПараметрыПоиска.Свойство("ТолькоЛичные") Тогда
		ПоказыватьЛичныеВариантыОтчетовДругихАвторов = ПоказыватьЛичныеВариантыОтчетовДругихАвторов И Не ПараметрыПоиска.ТолькоЛичные;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийПользователь",          ТекущийПользователь);
	Запрос.УстановитьПараметр("ОтчетыПользователя",           ОтборПоОтчетам);
	Запрос.УстановитьПараметр("ОтключенныеВариантыПрограммы", ПараметрыПоиска.ОтключенныеВариантыПрограммы);
	Запрос.УстановитьПараметр("ВерсияРасширений",             ПараметрыСеанса.ВерсияРасширений);
	Запрос.УстановитьПараметр("НетОтбораПоПометкеУдаления",   НЕ ТолькоНепомеченныеДляУдаления);
	Запрос.УстановитьПараметр("ЕстьПравоЧтенияАвторов",       ЕстьПравоЧтенияАвторов);
	Запрос.УстановитьПараметр("ЕстьОтборПоТипамОтчетов",      ЕстьОтборПоТипамОтчетов);
	Запрос.УстановитьПараметр("ЕстьОтборПоПодсистемам",       ЕстьОтборПоПодсистемам);
	Запрос.УстановитьПараметр("ЕстьОтборПоКонтексту",         ЕстьОтборПоКонтексту);
	Запрос.УстановитьПараметр("ТипыОтчетов",                  ?(ЕстьОтборПоТипамОтчетов, ПараметрыПоиска.ТипыОтчетов, Новый Массив));
	Запрос.УстановитьПараметр("НеПолучатьОписания",           Не ЕстьСтрокаПоиска И Не ПолучатьИтоговуюТаблицу);
	Запрос.УстановитьПараметр("ПолучатьИтоговуюТаблицу",      ПолучатьИтоговуюТаблицу);
	Запрос.УстановитьПараметр("ПоказыватьЛичныеВариантыОтчетовДругихАвторов", ПоказыватьЛичныеВариантыОтчетовДругихАвторов);
	Запрос.УстановитьПараметр("ЭтоОсновнойЯзык",              ТекущийЯзык() = Метаданные.ОсновнойЯзык);
	Запрос.УстановитьПараметр("КодЯзыка",                     ТекущийЯзык().КодЯзыка);
	Запрос.УстановитьПараметр("ПредставленияПодсистем",       ВариантыОтчетовСерверПовтИсп.ВО_ПредставленияПодсистем());
	Запрос.УстановитьПараметр("Контекст",                     ?(ЕстьОтборПоКонтексту, ПараметрыПоиска.Контекст, ""));

	Если ЕстьОтборПоПодсистемам Или ЕстьСтрокаПоиска Тогда
		Если ЕстьОтборПоПодсистемам Тогда
			Если ТипЗнч(ПараметрыПоиска.Подсистемы) = Тип("Массив") Тогда
				ПодсистемыОтчетов = ПараметрыПоиска.Подсистемы;
			Иначе
				ПодсистемыОтчетов = Новый Массив;
				ПодсистемыОтчетов.Добавить(ПараметрыПоиска.Подсистемы);
			КонецЕсли;
		Иначе
			ПодсистемыОтчетов = Новый Массив;
		КонецЕсли;

		ПодсистемыОтчетов.Добавить(Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка());

		Запрос.УстановитьПараметр("ЕстьСтрокаПоиска",			ЕстьСтрокаПоиска);
		Запрос.УстановитьПараметр("ПолучатьИтоговуюТаблицу",	ПолучатьИтоговуюТаблицу);
		Запрос.УстановитьПараметр("ЕстьОтборПоВидимости",		ЕстьОтборПоВидимости);
		Запрос.УстановитьПараметр("ПодсистемыОтчетов",			ПодсистемыОтчетов);

		ТекстЗапроса = ВО_ТекстЗапросаОтчетовСУточненнымиОтборами();

		СловаПоиска = ВО_ПодготовитьУсловиеПоискаПоСтроке(Запрос, ТекстЗапроса, ЕстьСтрокаПоиска, ПараметрыПоиска, ЕстьПравоЧтенияАвторов);
	Иначе
		ТекстЗапроса = ВО_ТекстЗапросаОтчетовСПростымиОтборами();
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Запрос.Текст	= ТекстЗапроса;
	ИсходнаяТаблица = Запрос.Выполнить().Выгрузить();

	Если ПолучатьИтоговуюТаблицу Тогда
		Результат.ТаблицаЗначений = ИсходнаяТаблица;
	КонецЕсли;

	Если ИсходнаяТаблица.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;

	Если ЕстьСтрокаПоиска И ПолучатьПодсветку Тогда
		ВО_СформироватьРезультатыПоиска(СловаПоиска, ИсходнаяТаблица, Результат);
	Иначе
		ВО_СформироватьСписокСсылок(ИсходнаяТаблица, Результат.Ссылки);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ВО_ПредставленияЗаполнены(Знач Режим = "") Экспорт
	ИмяПараметра = "СтандартныеПодсистемы.ВариантыОтчетов.ПредставленияЗаполнены";
	Если Режим = "ОбщиеДанныеКонфигурации" Тогда
		Параметры = РегистрыСведений.ПараметрыРаботыПрограммы.ПараметрРаботыПрограммы(ИмяПараметра);
	ИначеЕсли Режим = "РазделенныеДанныеКонфигурации" Тогда
		Параметры = РегистрыСведений.ПараметрыРаботыВерсийРасширений.ПараметрРаботыРасширения(ИмяПараметра, Ложь);
	Иначе
		РезультатОбщий			= ВО_ПредставленияЗаполнены("ОбщиеДанныеКонфигурации");
		РезультатРазделенный	= ВО_ПредставленияЗаполнены("РазделенныеДанныеКонфигурации");
		Если РезультатОбщий = "НеЗаполнены" Или РезультатРазделенный = "НеЗаполнены" Тогда
			Возврат "НеЗаполнены";
		ИначеЕсли РезультатОбщий = "Заполняются" Или РезультатРазделенный = "Заполняются" Тогда
			Возврат "Заполняются";
		КонецЕсли;

		Возврат "Заполнены";
	КонецЕсли;
	Если Параметры = Неопределено Тогда
		Параметры = Новый Соответствие;
	КонецЕсли;

	Результат = Параметры[ТекущийЯзык().КодЯзыка];
	Если ТипЗнч(Результат) = Тип("Дата") Тогда
		Возврат ?(ТекущаяДатаСеанса() - Результат < 15 * 60, "Заполняются", "НеЗаполнены"); // таймаут - 15 минут
	КонецЕсли;

	Возврат ?(Результат = Истина, "Заполнены", "НеЗаполнены");
КонецФункции

Функция ВО_ТекстЗапросаОтчетовСУточненнымиОтборами()
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВариантыОтчетов.Ссылка КАК Ссылка,
	|	ВариантыОтчетов.Родитель КАК Родитель,
	|	ВЫБОР
	|		КОГДА &ЕстьПравоЧтенияАвторов
	|			ТОГДА ВариантыОтчетов.Автор
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Автор,
	|	ВариантыОтчетов.ТолькоДляАвтора КАК ТолькоДляАвтора,
	|	ВариантыОтчетов.Отчет КАК Отчет,
	|	ВариантыОтчетов.КлючВарианта КАК КлючВарианта,
	|	ВариантыОтчетов.ТипОтчета КАК ТипОтчета,
	|	ВариантыОтчетов.Пользовательский КАК Пользовательский,
	|	ВариантыОтчетов.ПредопределенныйВариант КАК ПредопределенныйВариант,
	|	ВЫБОР
	|		КОГДА ВариантыОтчетов.Пользовательский
	|			ТОГДА ВариантыОтчетов.ИнтерактивнаяПометкаУдаления
	|		КОГДА ВариантыОтчетов.ТипОтчета = ЗНАЧЕНИЕ(Перечисление.ТипыОтчетов.Расширение)
	|			ТОГДА ДоступныеВариантыРасширений.Вариант ЕСТЬ NULL
	|		ИНАЧЕ ЕСТЬNULL(ВариантыКонфигурации.ПометкаУдаления, ВариантыОтчетов.ПометкаУдаления)
	|	КОНЕЦ КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА &НеПолучатьОписания
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА &ЭтоОсновнойЯзык
	|			И (ВариантыОтчетов.Пользовательский
	|				ИЛИ ВариантыОтчетов.ПредопределенныйВариант В (
	|						НЕОПРЕДЕЛЕНО,
	|						ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетов.ПустаяСсылка),
	|						ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка)))
	|			ТОГДА ВариантыОтчетов.Наименование
	|		КОГДА НЕ &ЭтоОсновнойЯзык
	|			И (ВариантыОтчетов.Пользовательский
	|				ИЛИ ВариантыОтчетов.ПредопределенныйВариант В (
	|						НЕОПРЕДЕЛЕНО,
	|						ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетов.ПустаяСсылка),
	|						ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка)))
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ПредставленияВариантов.Наименование, ВариантыОтчетов.Наименование) КАК СТРОКА(1000))
	|		КОГДА &ЭтоОсновнойЯзык
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ЕСТЬNULL(ВариантыКонфигурации.Наименование, ВариантыРасширений.Наименование), ВариантыОтчетов.Наименование) КАК СТРОКА(1000))
	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ЕСТЬNULL(ПредставленияИзКонфигурации.Наименование, ПредставленияИзРасширений.Наименование), ПредставленияВариантов.Наименование) КАК СТРОКА(1000))
	|	КОНЕЦ КАК НаименованиеВарианта,
	|	ВЫБОР
	|		КОГДА &НеПолучатьОписания
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА &ЭтоОсновнойЯзык
	|				И ПОДСТРОКА(ВариантыОтчетов.НаименованияПолей, 1, 1) = """"
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыКонфигурации.НаименованияПолей, ВариантыРасширений.НаименованияПолей) КАК СТРОКА(1000))
	|		КОГДА НЕ &ЭтоОсновнойЯзык
	|				И ПОДСТРОКА(ВариантыОтчетов.НаименованияПолей, 1, 1) = """"
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ПредставленияИзКонфигурации.НаименованияПолей, ПредставленияИзРасширений.НаименованияПолей) КАК СТРОКА(1000))
	|		ИНАЧЕ ВЫРАЗИТЬ(ВариантыОтчетов.НаименованияПолей КАК СТРОКА(1000))
	|	КОНЕЦ КАК НаименованияПолей,
	|	ВЫБОР
	|		КОГДА &НеПолучатьОписания
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА &ЭтоОсновнойЯзык
	|				И ПОДСТРОКА(ВариантыОтчетов.НаименованияПараметровИОтборов, 1, 1) = """"
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыКонфигурации.НаименованияПараметровИОтборов, ВариантыРасширений.НаименованияПараметровИОтборов) КАК СТРОКА(1000))
	|		КОГДА НЕ &ЭтоОсновнойЯзык
	|				И ПОДСТРОКА(ВариантыОтчетов.НаименованияПараметровИОтборов, 1, 1) = """"
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ПредставленияИзКонфигурации.НаименованияПараметровИОтборов, ПредставленияИзРасширений.НаименованияПараметровИОтборов) КАК СТРОКА(1000))
	|		ИНАЧЕ ВЫРАЗИТЬ(ВариантыОтчетов.НаименованияПараметровИОтборов КАК СТРОКА(1000))
	|	КОНЕЦ КАК НаименованияПараметровИОтборов,
	|	ВЫБОР
	|		КОГДА &НеПолучатьОписания
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА &ЭтоОсновнойЯзык
	|				И ПОДСТРОКА(ВариантыОтчетов.КлючевыеСлова, 1, 1) = """"
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыКонфигурации.КлючевыеСлова, ВариантыРасширений.КлючевыеСлова) КАК СТРОКА(1000))
	|		КОГДА НЕ &ЭтоОсновнойЯзык
	|				И ПОДСТРОКА(ВариантыОтчетов.КлючевыеСлова, 1, 1) = """"
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ПредставленияИзКонфигурации.КлючевыеСлова, ПредставленияИзРасширений.КлючевыеСлова) КАК СТРОКА(1000))
	|		ИНАЧЕ ВЫРАЗИТЬ(ВариантыОтчетов.КлючевыеСлова КАК СТРОКА(1000))
	|	КОНЕЦ КАК КлючевыеСлова,
	|	ВЫБОР
	|		КОГДА &ЭтоОсновнойЯзык И ПОДСТРОКА(ВариантыОтчетов.Описание, 1, 1) <> """"
	|			ТОГДА ВЫРАЗИТЬ(ВариантыОтчетов.Описание КАК СТРОКА(1000))
	|		КОГДА &ЭтоОсновнойЯзык И ПОДСТРОКА(ВариантыОтчетов.Описание, 1, 1) = """"
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыКонфигурации.Описание, ВариантыРасширений.Описание) КАК СТРОКА(1000))
	|		КОГДА НЕ &ЭтоОсновнойЯзык И ПОДСТРОКА(ПредставленияВариантов.Описание, 1, 1) <> """"
	|			ТОГДА ВЫРАЗИТЬ(ПредставленияВариантов.Описание КАК СТРОКА(1000))
	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ЕСТЬNULL(ПредставленияИзКонфигурации.Описание, ПредставленияИзРасширений.Описание), ВариантыОтчетов.Описание) КАК СТРОКА(1000))
	|	КОНЕЦ КАК Описание
	|ПОМЕСТИТЬ ВариантыОтчетов
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредопределенныеВариантыОтчетовВерсийРасширений КАК ДоступныеВариантыРасширений
	|			ПО ВариантыОтчетов.ПредопределенныйВариант = ДоступныеВариантыРасширений.Вариант
	|			И ДоступныеВариантыРасширений.ВерсияРасширений = &ВерсияРасширений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов КАК ВариантыКонфигурации
	|			ПО ВариантыОтчетов.ПредопределенныйВариант = ВариантыКонфигурации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетовРасширений КАК ВариантыРасширений
	|			ПО ВариантыОтчетов.ПредопределенныйВариант = ВариантыРасширений.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов.Представления КАК ПредставленияВариантов
	|			ПО ВариантыОтчетов.Ссылка = ПредставленияВариантов.Ссылка
	|			И ПредставленияВариантов.КодЯзыка = &КодЯзыка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов.Представления КАК ПредставленияИзКонфигурации
	|			ПО ВариантыОтчетов.ПредопределенныйВариант = ПредставленияИзКонфигурации.Ссылка
	|			И ПредставленияИзКонфигурации.КодЯзыка = &КодЯзыка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетовРасширений.Представления КАК ПредставленияИзРасширений
	|			ПО ВариантыОтчетов.ПредопределенныйВариант = ПредставленияИзРасширений.Ссылка
	|			И ПредставленияИзРасширений.КодЯзыка = &КодЯзыка
	|ГДЕ
	|	(НЕ &ЕстьОтборПоТипамОтчетов
	|		ИЛИ ВариантыОтчетов.ТипОтчета В (&ТипыОтчетов))
	|	И ВариантыОтчетов.Отчет В (&ОтчетыПользователя)
	|	И НЕ ВариантыОтчетов.ПредопределенныйВариант В (&ОтключенныеВариантыПрограммы)
	|	И (&ПоказыватьЛичныеВариантыОтчетовДругихАвторов
	|		ИЛИ ВариантыОтчетов.ТолькоДляАвтора = ЛОЖЬ
	|		ИЛИ ВариантыОтчетов.Автор = &ТекущийПользователь)
	|	И ВариантыОтчетов.Контекст = &Контекст
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредставленияПодсистем.Ссылка КАК Ссылка,
	|	ПредставленияПодсистем.Представление КАК Представление
	|ПОМЕСТИТЬ ПредставленияПодсистем
	|ИЗ
	|	&ПредставленияПодсистем КАК ПредставленияПодсистем
	|ГДЕ
	|	НЕ &ЭтоОсновнойЯзык
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВариантыОтчетов.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ВариантыОтчетов.Пользовательский
	|			ИЛИ ЕСТЬNULL(РазмещениеОтчетовКонфигурации.Подсистема, РазмещениеОтчетовРасширений.Подсистема) ЕСТЬ NULL
	|		ТОГДА РазмещениеОтчетов.Подсистема
	|		ИНАЧЕ ЕСТЬNULL(РазмещениеОтчетовКонфигурации.Подсистема, РазмещениеОтчетовРасширений.Подсистема)
	|	КОНЕЦ КАК Подсистема
	|ПОМЕСТИТЬ РазмещениеВариантовОтчетов
	|ИЗ
	|	ВариантыОтчетов КАК ВариантыОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредопределенныеВариантыОтчетовВерсийРасширений КАК ДоступныеВариантыРасширений
	|			ПО ДоступныеВариантыРасширений.ВерсияРасширений = &ВерсияРасширений
	|			И ДоступныеВариантыРасширений.Вариант = ВариантыОтчетов.ПредопределенныйВариант
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов.Размещение КАК РазмещениеОтчетов
	|			ПО РазмещениеОтчетов.Ссылка = ВариантыОтчетов.Ссылка
	|			И (НЕ &ЕстьОтборПоПодсистемам
	|				ИЛИ РазмещениеОтчетов.Подсистема В (&ПодсистемыОтчетов))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов.Размещение КАК РазмещениеОтчетовКонфигурации
	|			ПО РазмещениеОтчетовКонфигурации.Ссылка = ВариантыОтчетов.ПредопределенныйВариант
	|			И (НЕ &ЕстьОтборПоПодсистемам
	|				ИЛИ РазмещениеОтчетовКонфигурации.Подсистема В (&ПодсистемыОтчетов))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетовРасширений.Размещение КАК РазмещениеОтчетовРасширений
	|			ПО РазмещениеОтчетовРасширений.Ссылка = ВариантыОтчетов.ПредопределенныйВариант
	|			И (НЕ &ЕстьОтборПоПодсистемам
	|				ИЛИ РазмещениеОтчетовРасширений.Подсистема В (&ПодсистемыОтчетов))
	|ГДЕ
	|	(&НетОтбораПоПометкеУдаления
	|		ИЛИ НЕ ВариантыОтчетов.ПометкаУдаления
	|		ИЛИ НЕ ДоступныеВариантыРасширений.Вариант ЕСТЬ NULL)
	|	И ЕСТЬNULL(РазмещениеОтчетов.Использование, ИСТИНА)
	|	И НЕ ЕСТЬNULL(РазмещениеОтчетов.Подсистема,
	|		ЕСТЬNULL(РазмещениеОтчетовКонфигурации.Подсистема, РазмещениеОтчетовРасширений.Подсистема)) ЕСТЬ NULL
	|	И (&ПоказыватьЛичныеВариантыОтчетовДругихАвторов
	|		ИЛИ НЕ ВариантыОтчетов.ТолькоДляАвтора
	|		ИЛИ ВариантыОтчетов.Автор = &ТекущийПользователь)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РазмещениеВариантовОтчетов.Ссылка КАК Ссылка,
	|	РазмещениеВариантовОтчетов.Подсистема,
	|	ДоступныеВариантыОтчетов.Видимость
	|ПОМЕСТИТЬ НастройкиВариантовОтчетов
	|ИЗ
	|	РазмещениеВариантовОтчетов КАК РазмещениеВариантовОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|			ПО СоставыГруппПользователей.Пользователь = &ТекущийПользователь
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовОтчетов КАК ДоступныеВариантыОтчетов
	|			ПО ДоступныеВариантыОтчетов.Вариант = РазмещениеВариантовОтчетов.Ссылка
	|			И ДоступныеВариантыОтчетов.Подсистема В (
	|				РазмещениеВариантовОтчетов.Подсистема,
	|				ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовОтчетов КАК НедоступныеВариантыОтчетов
	|			ПО НедоступныеВариантыОтчетов.Вариант = РазмещениеВариантовОтчетов.Ссылка
	|			И НедоступныеВариантыОтчетов.Подсистема = РазмещениеВариантовОтчетов.Подсистема
	|			И (НедоступныеВариантыОтчетов.Пользователь В (&ТекущийПользователь, НЕОПРЕДЕЛЕНО)
	|				ИЛИ ТИПЗНАЧЕНИЯ(&ТекущийПользователь) = ТИП(Справочник.Пользователи)
	|					И НедоступныеВариантыОтчетов.Пользователь = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	|				ИЛИ ТИПЗНАЧЕНИЯ(&ТекущийПользователь) = ТИП(Справочник.ВнешниеПользователи)
	|					И НедоступныеВариантыОтчетов.Пользователь = ЗНАЧЕНИЕ(Справочник.ГруппыВнешнихПользователей.ВсеВнешниеПользователи))
	|			И НЕ НедоступныеВариантыОтчетов.Видимость
	|ГДЕ
	|	&ЕстьОтборПоВидимости
	|	И ДоступныеВариантыОтчетов.Пользователь В (СоставыГруппПользователей.ГруппаПользователей, НЕОПРЕДЕЛЕНО)
	|	И ДоступныеВариантыОтчетов.Подсистема В (&ПодсистемыОтчетов)
	|	И ДоступныеВариантыОтчетов.Видимость
	|	И НедоступныеВариантыОтчетов.Вариант ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РазмещениеВариантовОтчетов.Ссылка КАК Ссылка,
	|	РазмещениеВариантовОтчетов.Подсистема,
	|	ЕСТЬNULL(ИдентификаторыМетаданных.Синоним, ЕСТЬNULL(ИдентификаторыРасширений.Синоним, ЕСТЬNULL(ПредставленияПодсистем.Представление, """"))) КАК НаименованиеПодсистемы
	|ПОМЕСТИТЬ РазмещениеСУчетомНастроек
	|ИЗ
	|	РазмещениеВариантовОтчетов КАК РазмещениеВариантовОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыМетаданных
	|			ПО ИдентификаторыМетаданных.Ссылка = РазмещениеВариантовОтчетов.Подсистема
	|			И &ЭтоОсновнойЯзык
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовРасширений КАК ИдентификаторыРасширений
	|			ПО ИдентификаторыРасширений.Ссылка = РазмещениеВариантовОтчетов.Подсистема
	|			И &ЭтоОсновнойЯзык
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПредставленияПодсистем КАК ПредставленияПодсистем
	|			ПО ПредставленияПодсистем.Ссылка = РазмещениеВариантовОтчетов.Подсистема
	|			И НЕ &ЭтоОсновнойЯзык
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиВариантовОтчетов КАК НастройкиВариантовОтчетов
	|			ПО НастройкиВариантовОтчетов.Ссылка = РазмещениеВариантовОтчетов.Ссылка
	|			И НастройкиВариантовОтчетов.Подсистема В (
	|				РазмещениеВариантовОтчетов.Подсистема,
	|				ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка))
	|ГДЕ
	|	НЕ &ЕстьОтборПоВидимости
	|		ИЛИ НастройкиВариантовОтчетов.Видимость = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВариантыОтчетов.Ссылка КАК Ссылка,
	|	ВариантыОтчетов.Родитель КАК Родитель,
	|	ВариантыОтчетов.НаименованиеВарианта КАК НаименованиеВарианта,
	|	ВариантыОтчетов.ТолькоДляАвтора КАК ТолькоДляАвтора,
	|	ВЫБОР
	|		КОГДА &ЕстьПравоЧтенияАвторов
	|			ТОГДА ВариантыОтчетов.Автор
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Автор,
	|	ВЫБОР
	|		КОГДА &ЕстьПравоЧтенияАвторов
	|			ТОГДА ЕСТЬNULL(ВариантыОтчетов.Автор.Наименование, """")
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АвторПредставление,
	|	ВариантыОтчетов.Отчет КАК Отчет,
	|	ВЫБОР
	|		КОГДА &ПолучатьИтоговуюТаблицу
	|			ТОГДА ВариантыОтчетов.Отчет.Имя
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИмяОтчета,
	|	ВариантыОтчетов.КлючВарианта КАК КлючВарианта,
	|	ВариантыОтчетов.ТипОтчета КАК ТипОтчета,
	|	ВариантыОтчетов.Пользовательский КАК Пользовательский,
	|	ВариантыОтчетов.ПредопределенныйВариант КАК ПредопределенныйВариант,
	|	ВариантыОтчетов.НаименованияПараметровИОтборов КАК НаименованияПараметровИОтборов,
	|	ВариантыОтчетов.НаименованияПолей КАК НаименованияПолей,
	|	ВариантыОтчетов.КлючевыеСлова КАК КлючевыеСлова,
	|	ВариантыОтчетов.Описание КАК Описание,
	|	Размещение.Подсистема КАК Подсистема,
	|	Размещение.НаименованиеПодсистемы КАК НаименованиеПодсистемы,
	|	НЕОПРЕДЕЛЕНО КАК КлючПользовательскойНастройки,
	|	НЕОПРЕДЕЛЕНО КАК ПредставлениеПользовательскойНастройки,
	|	ВариантыОтчетов.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	ВариантыОтчетов КАК ВариантыОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РазмещениеСУчетомНастроек КАК Размещение
	|			ПО ВариантыОтчетов.Ссылка = Размещение.Ссылка
	|ГДЕ
	|	(&НетОтбораПоПометкеУдаления
	|		ИЛИ НЕ ВариантыОтчетов.ПометкаУдаления)
	|	И &ВариантыИПодсистемыПоСтрокеПоиска
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Пользовательские.Вариант,
	|	ВариантыОтчетов.Родитель,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	Пользовательские.КлючПользовательскойНастройки,
	|	Пользовательские.Наименование,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВариантыОтчетов КАК ВариантыОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПользовательскиеНастройкиОтчетов КАК Пользовательские
	|			ПО ВариантыОтчетов.Ссылка = Пользовательские.Вариант
	|ГДЕ
	|	(&НетОтбораПоПометкеУдаления
	|		ИЛИ ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ)
	|	И (&НетОтбораПоПометкеУдаления
	|		ИЛИ Пользовательские.ПометкаУдаления = ЛОЖЬ)
	|	И Пользовательские.Пользователь = &ТекущийПользователь
	|	И &ПользовательскиеНастройкиПоСтрокеПоиска";
КонецФункции

Функция ВО_ПодготовитьУсловиеПоискаПоСтроке(Знач Запрос, ТекстЗапроса, Знач ЕстьСтрокаПоиска, Знач ПараметрыПоиска, Знач ПравоЧтенияАвторов)
	Если ЕстьСтрокаПоиска Тогда
		СтрокаПоиска = ВРег(СокрЛП(ПараметрыПоиска.СтрокаПоиска));
		СловаПоиска = ВариантыОтчетовКлиентСервер.ВО_РазложитьСтрокуПоискаВМассивСлов(СтрокаПоиска);
		ШаблоныПоиска = Новый Массив;
		Для НомерСлова = 1 По СловаПоиска.Количество() Цикл
			Слово = СловаПоиска[НомерСлова - 1];
			ИмяСлова = "Слово" + Формат(НомерСлова, "ЧГ=");
			Запрос.УстановитьПараметр(ИмяСлова, "%" + Слово + "%");
			ШаблоныПоиска.Добавить("<ИмяТаблицы.ИмяПоля> ПОДОБНО &" + ИмяСлова);
		КонецЦикла;
		ШаблонПоиска = СтрСоединить(ШаблоныПоиска, " ИЛИ "); // не локализуется (фрагмент текста запроса)

		ТекстыПоиска = Новый Массив;
		ТекстыПоиска.Добавить("ВариантыОтчетов.НаименованиеВарианта");
		ТекстыПоиска.Добавить("Размещение.НаименованиеПодсистемы");
		ТекстыПоиска.Добавить("ВариантыОтчетов.НаименованияПолей");
		ТекстыПоиска.Добавить("ВариантыОтчетов.НаименованияПараметровИОтборов");
		ТекстыПоиска.Добавить("ВариантыОтчетов.Описание");
		ТекстыПоиска.Добавить("ВариантыОтчетов.КлючевыеСлова");
		Если ПравоЧтенияАвторов Тогда
			ТекстыПоиска.Добавить("ВариантыОтчетов.Автор.Наименование");
		КонецЕсли;

		Для Индекс = 0 По ТекстыПоиска.Количество() - 1 Цикл
			ТекстыПоиска[Индекс] = СтрЗаменить(ШаблонПоиска, "<ИмяТаблицы.ИмяПоля>", ТекстыПоиска[Индекс]);
		КонецЦикла;
		ВариантыИПодсистемыПоСтрокеПоиска		= "(" + СтрСоединить(ТекстыПоиска, " ИЛИ ") + ")"; // не локализуется (фрагмент текста запроса)
		ТекстЗапроса							= СтрЗаменить(ТекстЗапроса, "&ВариантыИПодсистемыПоСтрокеПоиска", ВариантыИПодсистемыПоСтрокеПоиска);

		ПользовательскиеНастройкиПоСтрокеПоиска	= "(" + СтрЗаменить(ШаблонПоиска, "<ИмяТаблицы.ИмяПоля>", "Пользовательские.Наименование") + ")";
		ТекстЗапроса							= СтрЗаменить(ТекстЗапроса, "&ПользовательскиеНастройкиПоСтрокеПоиска", ПользовательскиеНастройкиПоСтрокеПоиска);
	Иначе
		// Удаление отбора для поиска в данных вариантов отчетов и подсистем.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ВариантыИПодсистемыПоСтрокеПоиска", "");
		// Удаление таблицы для поиска среди пользовательских настроек.
		НачалоВыборкиИзТаблицы = (
		"ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Пользовательские.Вариант");
		ТекстЗапроса = СокрП(Лев(ТекстЗапроса, СтрНайти(ТекстЗапроса, НачалоВыборкиИзТаблицы) - 1));
	КонецЕсли;

	Возврат СловаПоиска;
КонецФункции

Функция ВО_ТекстЗапросаОтчетовСПростымиОтборами()
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВариантыОтчетов.Ссылка КАК Ссылка,
	|	ВариантыОтчетов.Родитель КАК Родитель,
	|	ВЫБОР
	|		КОГДА &НеПолучатьОписания
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА &ЭтоОсновнойЯзык
	|			И НЕ ПользовательскиеВариантыОтчетов.Ссылка ЕСТЬ NULL
	|			ТОГДА ВариантыОтчетов.Наименование
	|		КОГДА НЕ &ЭтоОсновнойЯзык
	|			И НЕ ПользовательскиеВариантыОтчетов.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ПредставленияВариантов.Наименование, ВариантыОтчетов.Наименование) КАК СТРОКА(1000))
	|		КОГДА &ЭтоОсновнойЯзык
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ЕСТЬNULL(ВариантыКонфигурации.Наименование, ВариантыРасширений.Наименование), ВариантыОтчетов.Наименование) КАК СТРОКА(1000))
	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ЕСТЬNULL(ПредставленияИзКонфигурации.Наименование, ПредставленияИзРасширений.Наименование), ПредставленияВариантов.Наименование) КАК СТРОКА(1000))
	|	КОНЕЦ КАК Наименование,
	|	ВариантыОтчетов.ТолькоДляАвтора КАК ТолькоДляАвтора,
	|	ВЫБОР
	|		КОГДА &ЕстьПравоЧтенияАвторов
	|			ТОГДА ВариантыОтчетов.Автор
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Автор,
	|	ВЫБОР
	|		КОГДА &ЕстьПравоЧтенияАвторов
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ВариантыОтчетов.Автор)
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АвторПредставление,
	|	ВариантыОтчетов.Отчет КАК Отчет,
	|	&ИмяОтчета КАК ИмяОтчета,
	|	ВариантыОтчетов.КлючВарианта КАК КлючВарианта,
	|	ВариантыОтчетов.ТипОтчета КАК ТипОтчета,
	|	ВариантыОтчетов.Пользовательский КАК Пользовательский,
	|	ВариантыОтчетов.ПредопределенныйВариант КАК ПредопределенныйВариант,
	|	ВЫРАЗИТЬ(ВариантыОтчетов.НаименованияПараметровИОтборов КАК СТРОКА(1000)) КАК НаименованияПараметровИОтборов,
	|	ВЫРАЗИТЬ(ВариантыОтчетов.НаименованияПолей КАК СТРОКА(1000)) КАК НаименованияПолей,
	|	ВЫРАЗИТЬ(ВариантыОтчетов.КлючевыеСлова КАК СТРОКА(1000)) КАК КлючевыеСлова,
	|	ВЫБОР
	|		КОГДА &ЭтоОсновнойЯзык И ПОДСТРОКА(ВариантыОтчетов.Описание, 1, 1) <> """"
	|			ТОГДА ВЫРАЗИТЬ(ВариантыОтчетов.Описание КАК СТРОКА(1000))
	|		КОГДА &ЭтоОсновнойЯзык И ПОДСТРОКА(ВариантыОтчетов.Описание, 1, 1) = """"
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВариантыКонфигурации.Описание, ВариантыРасширений.Описание) КАК СТРОКА(1000))
	|		КОГДА НЕ &ЭтоОсновнойЯзык И ПОДСТРОКА(ПредставленияВариантов.Описание, 1, 1) <> """"
	|			ТОГДА ВЫРАЗИТЬ(ПредставленияВариантов.Описание КАК СТРОКА(1000))
	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ЕСТЬNULL(ПредставленияИзКонфигурации.Описание, ПредставленияИзРасширений.Описание), ВариантыОтчетов.Описание) КАК СТРОКА(1000))
	|	КОНЕЦ КАК Описание,
	|	НЕОПРЕДЕЛЕНО КАК Подсистема,
	|	"""" КАК НаименованиеПодсистемы,
	|	НЕОПРЕДЕЛЕНО КАК КлючПользовательскойНастройки,
	|	НЕОПРЕДЕЛЕНО КАК ПредставлениеПользовательскойНастройки,
	|	ВариантыОтчетов.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов КАК ВариантыКонфигурации
	|		ПО ВариантыОтчетов.ПредопределенныйВариант = ВариантыКонфигурации.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетовРасширений КАК ВариантыРасширений
	|		ПО ВариантыОтчетов.ПредопределенныйВариант = ВариантыРасширений.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов.Представления КАК ПредставленияВариантов
	|		ПО ВариантыОтчетов.Ссылка = ПредставленияВариантов.Ссылка
	|		И (ПредставленияВариантов.КодЯзыка = &КодЯзыка)
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов.Представления КАК ПредставленияИзКонфигурации
	|		ПО ВариантыОтчетов.ПредопределенныйВариант = ПредставленияИзКонфигурации.Ссылка
	|		И (ПредставленияИзКонфигурации.КодЯзыка = &КодЯзыка)
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетовРасширений.Представления КАК ПредставленияИзРасширений
	|		ПО ВариантыОтчетов.ПредопределенныйВариант = ПредставленияИзРасширений.Ссылка
	|		И (ПредставленияИзРасширений.КодЯзыка = &КодЯзыка)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК ГруппыТекущегоПользователя
	|		ПО ГруппыТекущегоПользователя.Пользователь = &ТекущийПользователь
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ПО СоставыГруппПользователей.ГруппаПользователей = ГруппыТекущегоПользователя.ГруппаПользователей
	|		И &ПоказыватьЛичныеВариантыОтчетовДругихАвторов
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовОтчетов КАК ДоступныеВариантыОтчетов
	|		ПО ДоступныеВариантыОтчетов.Вариант = ВариантыОтчетов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов КАК ПользовательскиеВариантыОтчетов
	|		ПО ПользовательскиеВариантыОтчетов.Ссылка = ВариантыОтчетов.Ссылка
	|		И (ПользовательскиеВариантыОтчетов.Пользовательский
	|			ИЛИ ПользовательскиеВариантыОтчетов.ПредопределенныйВариант В (
	|				НЕОПРЕДЕЛЕНО,
	|				ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетов.ПустаяСсылка),
	|				ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетовРасширений.ПустаяСсылка)))
	|ГДЕ
	|	ВариантыОтчетов.Отчет В (&ОтчетыПользователя)
	|	И (НЕ &ЕстьОтборПоТипамОтчетов
	|		ИЛИ ВариантыОтчетов.ТипОтчета В (&ТипыОтчетов))
	|	И НЕ ВариантыОтчетов.ПредопределенныйВариант В (&ОтключенныеВариантыПрограммы)
	|	И (НЕ ВариантыОтчетов.Пользовательский
	|		ИЛИ &НетОтбораПоПометкеУдаления
	|		ИЛИ НЕ ВариантыОтчетов.ИнтерактивнаяПометкаУдаления)
	|	И (ВариантыОтчетов.Пользовательский
	|		ИЛИ &НетОтбораПоПометкеУдаления
	|		ИЛИ НЕ ВариантыОтчетов.ПометкаУдаления)
	|	И (&ПоказыватьЛичныеВариантыОтчетовДругихАвторов
	|		ИЛИ НЕ ВариантыОтчетов.ТолькоДляАвтора
	|		ИЛИ ВариантыОтчетов.Автор = &ТекущийПользователь)
	|	И ЕСТЬNULL(ДоступныеВариантыОтчетов.Пользователь, НЕОПРЕДЕЛЕНО) В (СоставыГруппПользователей.Пользователь, &ТекущийПользователь, НЕОПРЕДЕЛЕНО)
	|	И ЕСТЬNULL(ДоступныеВариантыОтчетов.Видимость, ИСТИНА)
	|	И (&ЕстьОтборПоКонтексту
	|			И (ПользовательскиеВариантыОтчетов.Ссылка ЕСТЬ NULL
	|			ИЛИ НЕ ПользовательскиеВариантыОтчетов.Ссылка ЕСТЬ NULL
	|				И ВариантыОтчетов.Контекст = &Контекст)
	|		ИЛИ НЕ &ЕстьОтборПоКонтексту)";

	ИмяОтчета = "ВЫБОР
	|		КОГДА &ПолучатьИтоговуюТаблицу И ТИПЗНАЧЕНИЯ(ВариантыОтчетов.Отчет) = ТИП(Справочник.ИдентификаторыОбъектовМетаданных)
	|			ТОГДА ВЫРАЗИТЬ(ВариантыОтчетов.Отчет КАК Справочник.ИдентификаторыОбъектовМетаданных).Имя
	|		КОГДА &ПолучатьИтоговуюТаблицу И ТИПЗНАЧЕНИЯ(ВариантыОтчетов.Отчет) = ТИП(Справочник.ИдентификаторыОбъектовРасширений)
	|			ТОГДА ВЫРАЗИТЬ(ВариантыОтчетов.Отчет КАК Справочник.ИдентификаторыОбъектовРасширений).Имя
	|		КОГДА &ПолучатьИтоговуюТаблицу И ТИПЗНАЧЕНИЯ(ВариантыОтчетов.Отчет) = ТИП(СТРОКА)
	|			ТОГДА ВЫРАЗИТЬ(ВариантыОтчетов.Отчет КАК СТРОКА(150))
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ";

	// Зарезервировано для новых подсистем

	Возврат СтрЗаменить(ТекстЗапроса, "&ИмяОтчета", ИмяОтчета);
КонецФункции

Процедура ВО_СформироватьРезультатыПоиска(Знач МассивСлов, Знач ИсходнаяТаблица, Результат)
	ИсходнаяТаблица.Сортировать("Ссылка");
	СтрокаТаблицы = ИсходнаяТаблица[0];

	ШаблонОбластиПоиска	= Новый ФиксированнаяСтруктура("Значение, КоличествоНайденныхСлов, ПодсветкаСлов", "", 0, Новый СписокЗначений);
	Вариант				= ВО_СведенияОВариантеОтчета(СтрокаТаблицы.Ссылка, СтрокаТаблицы.Родитель, ШаблонОбластиПоиска);

	РазделительПредставления	= ", ";
	НайденныеСлова				= Новый Соответствие;

	Количество = ИсходнаяТаблица.Количество();
	Для Индекс = 1 По Количество Цикл
		// Заполнение переменных.
		Если Не ЗначениеЗаполнено(Вариант.НаименованиеВарианта.Значение) И ЗначениеЗаполнено(СтрокаТаблицы.НаименованиеВарианта) Тогда
			Вариант.НаименованиеВарианта.Значение = СтрокаТаблицы.НаименованиеВарианта;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Вариант.Описание.Значение) И ЗначениеЗаполнено(СтрокаТаблицы.Описание) Тогда
			Вариант.Описание.Значение = СтрокаТаблицы.Описание;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Вариант.НаименованияПолей.Значение) И ЗначениеЗаполнено(СтрокаТаблицы.НаименованияПолей) Тогда
			Вариант.НаименованияПолей.Значение = СтрокаТаблицы.НаименованияПолей;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Вариант.НаименованияПараметровИОтборов.Значение) И ЗначениеЗаполнено(СтрокаТаблицы.НаименованияПараметровИОтборов) Тогда
			Вариант.НаименованияПараметровИОтборов.Значение = СтрокаТаблицы.НаименованияПараметровИОтборов;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Вариант.КлючевыеСлова.Значение) И ЗначениеЗаполнено(СтрокаТаблицы.КлючевыеСлова) Тогда
			Вариант.КлючевыеСлова.Значение = СтрокаТаблицы.КлючевыеСлова;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Вариант.ПредставлениеАвтора.Значение) И ЗначениеЗаполнено(СтрокаТаблицы.АвторПредставление) Тогда
			Вариант.ПредставлениеАвтора.Значение = СтрокаТаблицы.АвторПредставление;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПредставлениеПользовательскойНастройки) Тогда
			Если Вариант.НаименованияПользовательскихНастроек.Значение = "" Тогда
				Вариант.НаименованияПользовательскихНастроек.Значение = СтрокаТаблицы.ПредставлениеПользовательскойНастройки;
			Иначе
				Вариант.НаименованияПользовательскихНастроек.Значение = Вариант.НаименованияПользовательскихНастроек.Значение
				+ РазделительПредставления
				+ СтрокаТаблицы.ПредставлениеПользовательскойНастройки;
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаТаблицы.НаименованиеПодсистемы) И Вариант.Подсистемы.Найти(СтрокаТаблицы.Подсистема) = Неопределено Тогда
			Вариант.Подсистемы.Добавить(СтрокаТаблицы.Подсистема);
			Подсистема = Результат.ПодсветкаПодсистем.Получить(СтрокаТаблицы.Подсистема);
			Если Подсистема = Неопределено Тогда
				Подсистема = Новый Структура;
				Подсистема.Вставить("Ссылка",					СтрокаТаблицы.Подсистема);
				Подсистема.Вставить("НаименованиеПодсистемы",	Новый Структура(ШаблонОбластиПоиска));
				Подсистема.НаименованиеПодсистемы.Значение = СтрокаТаблицы.НаименованиеПодсистемы;

				ВсеСловаНайдены = Истина;
				НайденныеСлова.Вставить(СтрокаТаблицы.Подсистема, Новый Соответствие);

				Для Каждого Слово Из МассивСлов Цикл
					Если ВО_ОтметитьСлово(Подсистема.НаименованиеПодсистемы, Слово) Тогда
						НайденныеСлова[СтрокаТаблицы.Подсистема].Вставить(Слово, Истина);
					Иначе
						ВсеСловаНайдены = Ложь;
					КонецЕсли;
				КонецЦикла;
				Если ВсеСловаНайдены Тогда
					Результат.Подсистемы.Добавить(Подсистема.Ссылка);
				КонецЕсли;
				Результат.ПодсветкаПодсистем.Вставить(Подсистема.Ссылка, Подсистема);
			КонецЕсли;

			НаименованияПодсистем					= Вариант.НаименованияПодсистем.Значение;
			Вариант.НаименованияПодсистем.Значение	= ?(ПустаяСтрока(НаименованияПодсистем), СтрокаТаблицы.НаименованиеПодсистемы, НаименованияПодсистем + РазделительПредставления + СтрокаТаблицы.НаименованиеПодсистемы);
		КонецЕсли;

		Если Индекс < Количество Тогда
			СтрокаТаблицы = ИсходнаяТаблица[Индекс];
		КонецЕсли;

		Если Индекс = Количество Или СтрокаТаблицы.Ссылка <> Вариант.Ссылка Тогда
			// Анализ собранной информации о варианте.
			ВсеСловаНайдены = Истина;
			СвязанныеПодсистемы = Новый Массив;
			Для Каждого Слово Из МассивСлов Цикл
				СловоНайдено = ВО_ОтметитьСлово(Вариант.НаименованиеВарианта, Слово)
					Или ВО_ОтметитьСлово(Вариант.Описание, Слово)
					Или ВО_ОтметитьСлово(Вариант.НаименованияПолей, Слово, Истина)
					Или ВО_ОтметитьСлово(Вариант.ПредставлениеАвтора, Слово, Истина)
					Или ВО_ОтметитьСлово(Вариант.НаименованияПараметровИОтборов, Слово, Истина)
					Или ВО_ОтметитьСлово(Вариант.КлючевыеСлова, Слово, Истина)
					Или ВО_ОтметитьСлово(Вариант.НаименованияПользовательскихНастроек, Слово, Истина);

				Если Не СловоНайдено Тогда
					Для Каждого ПодсистемаСсылка Из Вариант.Подсистемы Цикл
						Если НайденныеСлова[ПодсистемаСсылка] <> Неопределено Тогда
							СловоНайдено = Истина;
							СвязанныеПодсистемы.Добавить(ПодсистемаСсылка);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;

				Если Не СловоНайдено Тогда
					ВсеСловаНайдены = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если ВсеСловаНайдены Тогда // Регистрация результата.
				Результат.Ссылки.Добавить(Вариант.Ссылка);
				Результат.ПодсветкаВариантов.Вставить(Вариант.Ссылка, Вариант);
				Если СвязанныеПодсистемы.Количество() > 0 Тогда
					Результат.ВариантыСвязанныеСПодсистемами.Вставить(Вариант.Ссылка, СвязанныеПодсистемы);
				КонецЕсли;
				// Удаление связи "от подчиненного", если родитель найден самостоятельно.
				ИндексРодителя = Результат.РодителиСвязанныеСВариантами.Найти(Вариант.Ссылка);
				Если ИндексРодителя <> Неопределено Тогда
					Результат.РодителиСвязанныеСВариантами.Удалить(ИндексРодителя);
				КонецЕсли;
				Если ЗначениеЗаполнено(Вариант.Родитель) И Результат.Ссылки.Найти(Вариант.Родитель) = Неопределено Тогда
					Результат.Ссылки.Добавить(Вариант.Родитель);
					Результат.РодителиСвязанныеСВариантами.Добавить(Вариант.Родитель);
				КонецЕсли;
			КонецЕсли;

			Если Индекс = Количество Тогда
				Прервать;
			КонецЕсли;

			Вариант = ВО_СведенияОВариантеОтчета(СтрокаТаблицы.Ссылка, СтрокаТаблицы.Родитель, ШаблонОбластиПоиска);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ВО_СведенияОВариантеОтчета(ВариантОтчетаСсылка, РодительСсылка, ШаблонОбластиПоиска)
	Вариант = Новый Структура;
	Вариант.Вставить("Ссылка",									ВариантОтчетаСсылка);
	Вариант.Вставить("Родитель",								РодительСсылка);
	Вариант.Вставить("НаименованиеВарианта",					Новый Структура(ШаблонОбластиПоиска));
	Вариант.Вставить("Описание",								Новый Структура(ШаблонОбластиПоиска));
	Вариант.Вставить("НаименованияПолей",						Новый Структура(ШаблонОбластиПоиска));
	Вариант.Вставить("НаименованияПараметровИОтборов",			Новый Структура(ШаблонОбластиПоиска));
	Вариант.Вставить("КлючевыеСлова",							Новый Структура(ШаблонОбластиПоиска));
	Вариант.Вставить("НаименованияПользовательскихНастроек",	Новый Структура(ШаблонОбластиПоиска));
	Вариант.Вставить("НаименованияПодсистем",					Новый Структура(ШаблонОбластиПоиска));
	Вариант.Вставить("Подсистемы",								Новый Массив);
	Вариант.Вставить("ПредставлениеАвтора",						Новый Структура(ШаблонОбластиПоиска));

	Возврат Вариант;
КонецФункции

Функция ВО_ОтметитьСлово(СтруктураГде, Слово, ИспользоватьРазделитель = Ложь) Экспорт
	Если СтрНачинаетсяС(СтруктураГде.Значение, "#") Тогда
		СтруктураГде.Значение = Сред(СтруктураГде.Значение, 2);
	КонецЕсли;
	ОстатокВРег = ВРег(СтруктураГде.Значение);
	Позиция = СтрНайти(ОстатокВРег, Слово);
	Если Позиция = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Если СтруктураГде.КоличествоНайденныхСлов = 0 Тогда
		// Инициализация переменной, содержащей директивы для подсветки слов.
		СтруктураГде.ПодсветкаСлов = Новый СписокЗначений;
		// Прокрутка фокуса до значащего слова (обнаруженной информации).
		Если ИспользоватьРазделитель Тогда
			РазделительХранения			= Символы.ПС;
			РазделительПредставления	= ", ";
			ДлинаРазделителя			= СтрДлина(РазделительХранения);
			Пока Позиция > 10 Цикл
				ПозицияРазделителя = СтрНайти(ОстатокВРег, РазделительХранения);
				Если ПозицияРазделителя = 0 Тогда
					Прервать;
				КонецЕсли;
				Если ПозицияРазделителя < Позиция Тогда
					// Перенос фрагмента до разделителя в конец области.
					СтруктураГде.Значение = (
						Сред(СтруктураГде.Значение, ПозицияРазделителя + ДлинаРазделителя)
						+ РазделительХранения
						+ Лев(СтруктураГде.Значение, ПозицияРазделителя - 1));
					ОстатокВРег = (
						Сред(ОстатокВРег, ПозицияРазделителя + ДлинаРазделителя)
						+ РазделительХранения
						+ Лев(ОстатокВРег, ПозицияРазделителя - 1));
					// Обновление информации о расположении слова.
					Позиция = Позиция - ПозицияРазделителя - ДлинаРазделителя + 1;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			СтруктураГде.Значение	= СтрЗаменить(СтруктураГде.Значение, РазделительХранения, РазделительПредставления);
			ОстатокВРег				= СтрЗаменить(ОстатокВРег, РазделительХранения, РазделительПредставления);
			Позиция					= СтрНайти(ОстатокВРег, Слово);
		КонецЕсли;
	КонецЕсли;
	// Регистрация найденного слова.
	СтруктураГде.КоличествоНайденныхСлов = СтруктураГде.КоличествоНайденныхСлов + 1;
	// Отметка слов.
	ДлинаЛевойЧасти = 0;
	ДлинаСлова = СтрДлина(Слово);
	Пока Позиция > 0 Цикл
		СтруктураГде.ПодсветкаСлов.Добавить(ДлинаЛевойЧасти + Позиция, "+");
		СтруктураГде.ПодсветкаСлов.Добавить(ДлинаЛевойЧасти + Позиция + ДлинаСлова, "-");
		ОстатокВРег		= Сред(ОстатокВРег, Позиция + ДлинаСлова);
		ДлинаЛевойЧасти	= ДлинаЛевойЧасти + Позиция + ДлинаСлова - 1;
		Позиция			= СтрНайти(ОстатокВРег, Слово);
	КонецЦикла;

	Возврат Истина;
КонецФункции

Процедура ВО_СформироватьСписокСсылок(Знач ТаблицаЗначений, СписокСсылок)
	Дубли				= Новый Соответствие;
	ТаблицаВариантов	= ТаблицаЗначений.Скопировать(, "Ссылка, Родитель");
	ТаблицаВариантов.Свернуть("Ссылка, Родитель");
	Для Каждого СтрокаТаблицы Из ТаблицаВариантов Цикл
		ВариантОтчетаСсылка = СтрокаТаблицы.Ссылка;
		Если ЗначениеЗаполнено(ВариантОтчетаСсылка) И Дубли[ВариантОтчетаСсылка] = Неопределено Тогда
			СписокСсылок.Добавить(ВариантОтчетаСсылка);
			Дубли.Вставить(ВариантОтчетаСсылка);
			ВариантОтчетаСсылка = СтрокаТаблицы.Родитель;
			Если ЗначениеЗаполнено(ВариантОтчетаСсылка) И Дубли[ВариантОтчетаСсылка] = Неопределено Тогда
				СписокСсылок.Добавить(ВариантОтчетаСсылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ВО_СвойстваВариантовОтчетовИзФайлов(ОписаниеФайлов) Экспорт
	ОписаниеВариантовОтчетов = Новый Массив;

	Для Каждого ОписаниеФайла Из ОписаниеФайлов Цикл
		ОписаниеВариантаОтчета	= ВО_ОписаниеВариантаОтчета(ОписаниеФайла);

		ВариантОтчетаОснование	= ВО_ВариантОтчетаОснование(ОписаниеВариантаОтчета.ИмяОтчета, ОписаниеВариантаОтчета.КлючВарианта);

		Ссылка					= ВО_ВариантОтчетаПоОписанию(ОписаниеВариантаОтчета, ВариантОтчетаОснование);
		ОписаниеВариантаОтчета.Вставить("Ссылка", Ссылка);

		ОписаниеВариантовОтчетов.Добавить(ОписаниеВариантаОтчета);
	КонецЦикла;

	Возврат ОписаниеВариантовОтчетов;
КонецФункции

Функция ВО_СвойстваВариантаОтчетаИзФайла(ОписаниеФайла, ВариантОтчетаОснование) Экспорт
	ОписаниеВариантаОтчета = ВО_ОписаниеВариантаОтчета(ОписаниеФайла);

	Ссылка = ВО_ВариантОтчетаПоОписанию(ОписаниеВариантаОтчета, ВариантОтчетаОснование);
	ОписаниеВариантаОтчета.Вставить("Ссылка", Ссылка);

	Возврат ОписаниеВариантаОтчета;
КонецФункции

Функция ВО_ОписаниеВариантаОтчета(ОписаниеФайла)
	ИмяКаталога = БазоваяПодсистемаКлиентСервер.ОН_ДобавитьКонечныйРазделительПути(БазоваяПодсистемаСервер.ФС_СоздатьВременныйКаталог());
	ИмяФайлаАрхива = ПолучитьИмяВременногоФайла("zip"); // АПК:441 Временные файлы удаляются процедурой УдалитьФайлыОписанияВариантаОтчета;

	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение); // ДвоичныеДанные
	ДвоичныеДанные.Записать(ИмяФайлаАрхива);

	Архив = Новый ЧтениеZipФайла(ИмяФайлаАрхива);
	Архив.ИзвлечьВсе(ИмяКаталога);

	ОписаниеВариантаОтчета = ВО_ОписаниеНастроекВариантаОтчета(ИмяКаталога);

	Если ЗначениеЗаполнено(ОписаниеВариантаОтчета.ОписаниеОшибки) Тогда
		БазоваяПодсистемаСервер.ФС_УдалитьВременныйКаталог(ИмяКаталога);
		БазоваяПодсистемаСервер.ФС_УдалитьВременныйФайл(ИмяФайлаАрхива);

		ВызватьИсключение ОписаниеВариантаОтчета.ОписаниеОшибки;
	КонецЕсли;

	ОписаниеВариантаОтчета.Настройки = ВО_ДесериализованныеНастройки(ИмяКаталога + "Settings.xml");

	Счетчик = 0;

	Для Каждого ЭлементСписка Из ОписаниеВариантаОтчета.ПользовательскиеНастройки Цикл
		Счетчик = Счетчик + 1;
		ИмяФайла = СтрШаблон(ИмяКаталога + "UserSettings%1.xml", Счетчик);

		ОписаниеВариантаОтчета.ХранилищеПользовательскихНастроек.Вставить(ЭлементСписка.Значение, ВО_ДесериализованныеНастройки(ИмяФайла));
	КонецЦикла;

	БазоваяПодсистемаСервер.ФС_УдалитьВременныйКаталог(ИмяКаталога);
	БазоваяПодсистемаСервер.ФС_УдалитьВременныйФайл(ИмяФайлаАрхива);

	Возврат ОписаниеВариантаОтчета;
КонецФункции

Функция ВО_ОписаниеНастроекВариантаОтчета(ИмяКаталога)
	ОписаниеНастроек = ВО_ОписаниеНастроекВариантаОтчетаПоУмолчанию();

	#Область ЧтениеФайлаОписанияНастроек

	ШаблонОписанияОшибки = "Некорректный формат описания настроек: %1";

	ЧтениеXML = Новый ЧтениеXML;

	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяКаталога + "SettingsDescription.xml");
	Исключение
		ОписаниеНастроек.ОписаниеОшибки = СтрШаблон(ШаблонОписанияОшибки, "отсутствует файл SettingsDescription.xml");

		Возврат ОписаниеНастроек;
	КонецПопытки;

	ПостроительDOM	= Новый ПостроительDOM;
	ДокументDOM		= ПостроительDOM.Прочитать(ЧтениеXML);

	ЧтениеXML.Закрыть();

	#КонецОбласти

	#Область ЧтениеОбщегоОписанияНастроек

	Если ДокументDOM.ДочерниеУзлы.Количество() = 0 Тогда
		ОписаниеНастроек.ОписаниеОшибки = СтрШаблон(ШаблонОписанияОшибки, "отсутствует элемент SettingsDescription");

		Возврат ОписаниеНастроек;
	КонецЕсли;

	Элемент = ДокументDOM.ДочерниеУзлы.Элемент(0);

	ИмяОтчета = Элемент.Атрибуты.ПолучитьИменованныйЭлемент("ReportName");
	Если ИмяОтчета = Неопределено Тогда
		ОписаниеНастроек.ОписаниеОшибки = СтрШаблон(ШаблонОписанияОшибки, "отсутствует атрибут ReportName");

		Возврат ОписаниеНастроек;
	КонецЕсли;

	ОписаниеНастроек.ИмяОтчета = ИмяОтчета.Значение;

	Состав = Элемент.ДочерниеУзлы;

	#КонецОбласти

	#Область ЧтениеОписанияОсновныхНастроек

	Если Состав.Количество() = 0 Тогда
		ОписаниеНастроек.ОписаниеОшибки = СтрШаблон(ШаблонОписанияОшибки, "отсутствует элемент Settings");

		Возврат ОписаниеНастроек;
	КонецЕсли;

	Элемент = Состав.Элемент(0);

	КлючВарианта = Элемент.Атрибуты.ПолучитьИменованныйЭлемент("Key");
	Если КлючВарианта = Неопределено Тогда
		ОписаниеНастроек.ОписаниеОшибки = СтрШаблон(ШаблонОписанияОшибки, "отсутствует атрибут Key элемента Settings");

		Возврат ОписаниеНастроек;
	КонецЕсли;

	ОписаниеНастроек.КлючВарианта = КлючВарианта.Значение;

	ПредставлениеВарианта = Элемент.Атрибуты.ПолучитьИменованныйЭлемент("Presentation");
	Если ПредставлениеВарианта = Неопределено Тогда
		ОписаниеНастроек.ОписаниеОшибки = СтрШаблон(ШаблонОписанияОшибки, "отсутствует атрибут Presentation элемента Settings");

		Возврат ОписаниеНастроек;
	КонецЕсли;

	ОписаниеНастроек.ПредставлениеВарианта = ПредставлениеВарианта.Значение;

	#КонецОбласти

	#Область ЧтениеОписанияПользовательскихНастроек

	ГраницаСостава = Состав.Количество() - 1;
	Если ГраницаСостава <= 0 Тогда
		Возврат ОписаниеНастроек;
	КонецЕсли;

	Для Индекс = 1 По ГраницаСостава Цикл
		Элемент = Состав.Элемент(Индекс);

		КлючНастроек = Элемент.Атрибуты.ПолучитьИменованныйЭлемент("Key");
		Если КлючНастроек = Неопределено Тогда
			ОписаниеНастроек.ОписаниеОшибки = СтрШаблон(ШаблонОписанияОшибки, "отсутствует атрибут Key элемента UserSettings");

			Возврат ОписаниеНастроек;
		КонецЕсли;

		ПредставлениеНастроек = Элемент.Атрибуты.ПолучитьИменованныйЭлемент("Presentation");
		Если ПредставлениеНастроек = Неопределено Тогда
			ОписаниеНастроек.ОписаниеОшибки = СтрШаблон(ШаблонОписанияОшибки, "отсутствует атрибут Presentation элемента UserSettings");

			Возврат ОписаниеНастроек;
		КонецЕсли;

		ЭтоТекущиеПредставление = Элемент.Атрибуты.ПолучитьИменованныйЭлемент("isCurrent");
		Если ЭтоТекущиеПредставление = Неопределено Тогда
			ОписаниеНастроек.ОписаниеОшибки = СтрШаблон(ШаблонОписанияОшибки, "отсутствует атрибут isCurrent элемента UserSettings");

			Возврат ОписаниеНастроек;
		КонецЕсли;

		ЭтоТекущие = XMLЗначение(Тип("Булево"), ЭтоТекущиеПредставление.Значение);

		ОписаниеНастроек.ПользовательскиеНастройки.Добавить(КлючНастроек.Значение, ПредставлениеНастроек.Значение, ЭтоТекущие);

		Если ЭтоТекущие Тогда
			ОписаниеНастроек.КлючТекущихПользовательскихНастроек			= КлючНастроек.Значение;
			ОписаниеНастроек.ПредставлениеТекущихПользовательскихНастроек	= ПредставлениеНастроек.Значение;
		КонецЕсли;
	КонецЦикла;

	#КонецОбласти

	Возврат ОписаниеНастроек;
КонецФункции

Функция ВО_ВариантОтчетаОснование(ИмяОтчета, КлючВарианта)
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	|	Отчеты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Отчеты
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК Отчеты
	|ГДЕ
	|	Отчеты.ПолноеИмя = &ИмяОтчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Отчеты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовРасширений КАК Отчеты
	|ГДЕ
	|	Отчеты.ПолноеИмя = &ИмяОтчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ НЕОПРЕДЕЛЕНО
	|;
	|
	|ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка
	|ИЗ
	|	Отчеты КАК Отчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ПО ВариантыОтчетов.Отчет = Отчеты.Ссылка
	|ГДЕ
	|	ВариантыОтчетов.КлючВарианта = &КлючВарианта";

	Запрос.УстановитьПараметр("ИмяОтчета",		ИмяОтчета);
	Запрос.УстановитьПараметр("КлючВарианта",	КлючВарианта);

	Выборка = Запрос.Выполнить().Выбрать();

	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
КонецФункции

Функция ВО_ВариантОтчетаПоОписанию(ОписаниеВариантаОтчета, ВариантОтчетаОснование)
	Если Не ВариантыОтчетовСерверПовтИсп.ВО_ПравоДобавления() Тогда
		ВызватьИсключение "Недостаточно прав для выполнения операции";
	КонецЕсли;

	ИнформацияОбОтчете	= ВО_ИнформацияОбОтчете(ОписаниеВариантаОтчета.ИмяОтчета, Истина);
	Автор				= ПользователиСервер.сП_АвторизованныйПользователь();

	НачатьТранзакцию();

	Попытка
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить(Метаданные.Справочники.ВариантыОтчетов.ПолноеИмя());
		Блокировка.Заблокировать();

		ВариантОтчета = ВО_ПользовательскийВариантОтчета(ИнформацияОбОтчете.Отчет, ОписаниеВариантаОтчета.КлючВарианта, Автор);

		Если ЗначениеЗаполнено(ВариантОтчета.Ссылка) Тогда
			#Область ОбновлениеСуществующегоВариантаОтчета

			Объект					= ВариантОтчета.Ссылка.ПолучитьОбъект();
			Объект.Настройки		= Новый ХранилищеЗначения(ОписаниеВариантаОтчета.Настройки);

			ПользователиВарианта	= Новый СписокЗначений;

			РегистрыСведений.НастройкиВариантовОтчетов.ПрочитатьНастройкиДоступностиВариантаОтчета(Объект.Ссылка, ПользователиВарианта);

			Если ПользователиВарианта.НайтиПоЗначению(Автор) = Неопределено Тогда
				ПользователиВарианта.Добавить(Автор);
			КонецЕсли;

			Объект.ДополнительныеСвойства.Вставить("ПользователиВарианта", ПользователиВарианта);

			#КонецОбласти
		Иначе
			#Область СозданиеНовогоВариантаОтчета

			Наименование = ВО_ДоступноеНаименованиеВариантаОтчета(ИнформацияОбОтчете.Отчет, ОписаниеВариантаОтчета.ПредставлениеВарианта);

			Если ВариантОтчета.КлючВариантаЗанят Тогда
				ОписаниеВариантаОтчета.КлючВарианта = Строка(Новый УникальныйИдентификатор());
			КонецЕсли;

			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("Отчет",			ИнформацияОбОтчете.Отчет);
			ДанныеЗаполнения.Вставить("КлючВарианта",	ОписаниеВариантаОтчета.КлючВарианта);
			ДанныеЗаполнения.Вставить("Настройки",		ОписаниеВариантаОтчета.Настройки);
			ДанныеЗаполнения.Вставить("Наименование",	Наименование);
			ДанныеЗаполнения.Вставить("Автор",			Автор);
			ДанныеЗаполнения.Вставить("Основание",		ВариантОтчетаОснование);

			Объект = Справочники.ВариантыОтчетов.СоздатьЭлемент();
			Объект.Заполнить(ДанныеЗаполнения);

			#КонецОбласти
		КонецЕсли;

		Объект.Записать();

		ВО_СохранитьПользовательскиеНастройкиИзФайла(Объект.Ссылка, ОписаниеВариантаОтчета);

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Возврат Объект.Ссылка;
КонецФункции

Функция ВО_ОписаниеНастроекВариантаОтчетаПоУмолчанию()
	ОписаниеНастроек = Новый Структура;

	ОписаниеНастроек.Вставить("ИмяОтчета",										"");
	ОписаниеНастроек.Вставить("Настройки",										Неопределено);
	ОписаниеНастроек.Вставить("КлючВарианта",									"");
	ОписаниеНастроек.Вставить("ПредставлениеВарианта",							"");
	ОписаниеНастроек.Вставить("КлючТекущихПользовательскихНастроек",			"");
	ОписаниеНастроек.Вставить("ПредставлениеТекущихПользовательскихНастроек",	"");
	ОписаниеНастроек.Вставить("ПользовательскиеНастройки",						Новый СписокЗначений);
	ОписаниеНастроек.Вставить("ХранилищеПользовательскихНастроек",				Новый Соответствие);
	ОписаниеНастроек.Вставить("ОписаниеОшибки",									"");

	Возврат ОписаниеНастроек;
КонецФункции

Функция ВО_ИнформацияОбОтчете(Знач ОтчетПолноеИмя, Знач ВызыватьИсключение = Ложь) Экспорт
	Результат					= Новый Структура("Отчет, ТипОтчета, ОтчетПолноеИмя, ОтчетИмя, ОтчетМетаданные, ТекстОшибки");
	Результат.Отчет				= ОтчетПолноеИмя;
	Результат.ОтчетПолноеИмя	= ОтчетПолноеИмя;
	Результат.ТекстОшибки		= "";

	ПозицияТочки = СтрНайти(ОтчетПолноеИмя, ".");
	Если ПозицияТочки = 0 Тогда
		Префикс				= "";
		Результат.ОтчетИмя	= ОтчетПолноеИмя;
	Иначе
		Префикс				= Лев(ОтчетПолноеИмя, ПозицияТочки - 1);
		Результат.ОтчетИмя	= Сред(ОтчетПолноеИмя, ПозицияТочки + 1);
	КонецЕсли;

	Если ВРег(Префикс) = "ОТЧЕТ" Тогда
		Результат.ОтчетМетаданные = Метаданные.Отчеты.Найти(Результат.ОтчетИмя);
		Если Результат.ОтчетМетаданные = Неопределено Тогда
			Результат.ОтчетПолноеИмя = "ВнешнийОтчет." + Результат.ОтчетИмя;
			ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Предупреждение, СтрШаблон("Отчет ""%1"" не существует в программе, он будет значиться как внешний.", ОтчетПолноеИмя));
		ИначеЕсли Не ПравоДоступа("Просмотр", Результат.ОтчетМетаданные) Тогда
			Результат.ТекстОшибки = СтрШаблон("Недостаточно прав доступа к отчету ""%1"".", ОтчетПолноеИмя);
		КонецЕсли;
	ИначеЕсли ВРег(Префикс) = "ВНЕШНИЙОТЧЕТ" Тогда
		// Получение метаданных и проверок не требуется.
	Иначе
		Результат.ТекстОшибки = СтрШаблон("Неизвестный тип отчета ""%1"" (ожидался ""Отчет"" или ""ВнешнийОтчет"").", ОтчетПолноеИмя);
		Если ВызыватьИсключение Тогда
			ВызватьИсключение Результат.ТекстОшибки;
		КонецЕсли;

		Возврат Результат;
	КонецЕсли;

	Если Результат.ОтчетМетаданные = Неопределено Тогда
		Результат.Отчет		= Результат.ОтчетПолноеИмя;
		Результат.ТипОтчета	= Перечисления.ТипыОтчетов.Внешний;

		// Зарезервировано для новых подсистем

	Иначе
		Результат.Отчет		= Справочники.ИдентификаторыОбъектовМетаданных.ИдентификаторОбъектаМетаданных(Результат.ОтчетМетаданные, Истина);
		Результат.ТипОтчета	= ВО_ТипОтчета(Результат.Отчет);
	КонецЕсли;

	Если ВызыватьИсключение И ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
		ВызватьИсключение Результат.ТекстОшибки;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ВО_ПользовательскийВариантОтчета(Отчет, КлючВарианта, Автор)
	ВариантОтчета = Новый Структура("Ссылка, КлючВариантаЗанят");

	#Область ЗапросПользовательскогоВариантаОтчета

	Запрос			= Новый Запрос;
	Запрос.Текст	=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Отчеты.Ссылка,
	|	Отчеты.ПометкаУдаления
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК Отчеты
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Отчет) <> ТИП(Справочник.ИдентификаторыОбъектовРасширений)
	|	И Отчеты.Отчет = &Отчет
	|	И Отчеты.КлючВарианта = &КлючВарианта
	|	И Отчеты.Автор = &Автор
	|	И Отчеты.Пользовательский
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Отчеты.Ссылка,
	|	Отчеты.ПометкаУдаления
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК Отчеты
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредопределенныеВариантыОтчетовВерсийРасширений КАК ОтчетыРасширений
	|		ПО ОтчетыРасширений.Вариант = Отчеты.ПредопределенныйВариант
	|		И ОтчетыРасширений.Отчет = Отчеты.Отчет
	|		И ОтчетыРасширений.КлючВарианта = Отчеты.КлючВарианта
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Отчет) = ТИП(Справочник.ИдентификаторыОбъектовРасширений)
	|	И Отчеты.Отчет = &Отчет
	|	И Отчеты.КлючВарианта = &КлючВарианта
	|	И Отчеты.Автор = &Автор
	|	И Отчеты.Пользовательский
	|	И ОтчетыРасширений.ВерсияРасширений = &ВерсияРасширений
	|
	|УПОРЯДОЧИТЬ ПО
	|	Отчеты.ПометкаУдаления УБЫВ
	|;
	|
	|ВЫБРАТЬ
	|	ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Справочник.ВариантыОтчетов КАК ОтчетыИдентичные
	|		ГДЕ
	|			ОтчетыИдентичные.Отчет = &Отчет
	|			И ОтчетыИдентичные.КлючВарианта = &КлючВарианта
	|	) КАК КлючВариантаЗанят";

	Запрос.УстановитьПараметр("Отчет",				Отчет);
	Запрос.УстановитьПараметр("КлючВарианта",		КлючВарианта);
	Запрос.УстановитьПараметр("Автор",				Автор);
	Запрос.УстановитьПараметр("ВерсияРасширений",	ПараметрыСеанса.ВерсияРасширений);

	РезультатыЗапроса = Запрос.ВыполнитьПакет(); // Массив из РезультатЗапроса

	#КонецОбласти

	Для Каждого Результат Из РезультатыЗапроса Цикл
		Выборка = Результат.Выбрать(); // ВыборкаИзРезультатаЗапроса
		Выборка.Следующий();

		ЗаполнитьЗначенияСвойств(ВариантОтчета, Выборка);
	КонецЦикла;

	Возврат ВариантОтчета;
КонецФункции

Функция ВО_ДоступноеНаименованиеВариантаОтчета(Отчет, Знач Наименование)
	Запрос			= Новый Запрос;
	Запрос.Текст	=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВариантыОтчетов.Наименование
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.Наименование ПОДОБНО &ШаблонНаименования";

	Запрос.УстановитьПараметр("Отчет",				Отчет);
	Запрос.УстановитьПараметр("ШаблонНаименования",	Наименование + "%");

	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		Возврат Наименование;
	КонецЕсли;

	НаименованияЗанятые = Результат.Выбрать();

	Если Не НаименованияЗанятые.НайтиСледующий(Наименование, "Наименование") Тогда
		Возврат Наименование;
	КонецЕсли;

	НаименованияЗанятые.Сбросить();

	ШаблонСчетчикаКопий	= " (%1)";
	ШаблонНаименования	= ВО_ШаблонНаименованияВариантаОтчета(НаименованияЗанятые, Наименование, ШаблонСчетчикаКопий);

	Если Не СтрЗаканчиваетсяНа(ШаблонНаименования, ШаблонСчетчикаКопий) Тогда
		Возврат ШаблонНаименования;
	КонецЕсли;

	МаксимальноеКоличествоКопий = НаименованияЗанятые.Количество();

	Для НомерКопии = 1 По МаксимальноеКоличествоКопий Цикл
		Наименование = СтрШаблон(ШаблонНаименования, НомерКопии);

		Если Не НаименованияЗанятые.НайтиСледующий(Наименование, "Наименование") Тогда
			Возврат Наименование;
		КонецЕсли;

		НаименованияЗанятые.Сбросить();
	КонецЦикла;

	Возврат Наименование;
КонецФункции

Функция ВО_ШаблонНаименованияВариантаОтчета(НаименованияЗанятые, Знач Наименование, ШаблонСчетчикаКопий)
	ПризнакКопии = " - копия";

	Если СтрЗаканчиваетсяНа(Наименование, ПризнакКопии) Тогда
		Возврат Наименование + ШаблонСчетчикаКопий;
	КонецЕсли;

	ПозицияПризнакаКопии = СтрНайти(Наименование, ПризнакКопии);

	Если ПозицияПризнакаКопии > 0 Тогда
		Возврат Сред(Наименование, 1, ПозицияПризнакаКопии - 1) + ШаблонСчетчикаКопий;
	КонецЕсли;

	Наименование = Наименование + ПризнакКопии;

	Если Не НаименованияЗанятые.НайтиСледующий(Наименование, "Наименование") Тогда
		Возврат Наименование;
	КонецЕсли;

	НаименованияЗанятые.Сбросить();

	Возврат Наименование + ШаблонСчетчикаКопий;
КонецФункции

Процедура ВО_СохранитьПользовательскиеНастройкиИзФайла(ВариантОтчета, ОписаниеВариантаОтчета)
	Если ОписаниеВариантаОтчета.ПользовательскиеНастройки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ШаблонОписанияНастроек				= Новый Структура("КлючОбъекта, КлючНастроек, Представление, Пользователь");
	ШаблонОписанияНастроек.КлючОбъекта	= ОписаниеВариантаОтчета.ИмяОтчета + "/" + ОписаниеВариантаОтчета.КлючВарианта;
	ШаблонОписанияНастроек.Пользователь	= ИмяПользователя();

	Для Каждого ЭлементСписка Из ОписаниеВариантаОтчета.ПользовательскиеНастройки Цикл
		ОписаниеНастроек				= Новый ОписаниеНастроек;
		ЗаполнитьЗначенияСвойств(ОписаниеНастроек, ШаблонОписанияНастроек);
		ОписаниеНастроек.КлючНастроек	= ЭлементСписка.Значение;
		ОписаниеНастроек.Представление	= ЭлементСписка.Представление;

		Настройки						= ОписаниеВариантаОтчета.ХранилищеПользовательскихНастроек[ОписаниеНастроек.КлючНастроек];

		ХранилищеПользовательскихНастроекОтчетов.Сохранить(ОписаниеНастроек.КлючОбъекта, ОписаниеНастроек.КлючНастроек, Настройки, ОписаниеНастроек, ОписаниеНастроек.Пользователь);
	КонецЦикла;

	Если Не ЗначениеЗаполнено(ОписаниеВариантаОтчета.КлючТекущихПользовательскихНастроек) Тогда
		Возврат;
	КонецЕсли;

	ОписаниеНастроек				= Новый ОписаниеНастроек;
	ЗаполнитьЗначенияСвойств(ОписаниеНастроек, ШаблонОписанияНастроек);
	ОписаниеНастроек.КлючОбъекта	= ОписаниеНастроек.КлючОбъекта + "/ТекущиеПользовательскиеНастройки";
	ОписаниеНастроек.КлючНастроек	= ОписаниеВариантаОтчета.КлючТекущихПользовательскихНастроек;
	ОписаниеНастроек.Представление	= ОписаниеВариантаОтчета.ПредставлениеТекущихПользовательскихНастроек;

	Настройки						= ОписаниеВариантаОтчета.ХранилищеПользовательскихНастроек[ОписаниеНастроек.КлючНастроек];

	БазоваяПодсистемаСервер.ОН_ХранилищеСохранить(ХранилищеСистемныхНастроек, ОписаниеНастроек.КлючОбъекта, ОписаниеНастроек.КлючНастроек, Настройки, ОписаниеНастроек, ОписаниеНастроек.Пользователь, Ложь);
КонецПроцедуры

Функция ВО_ДесериализованныеНастройки(ИмяФайла)
	ЧтениеXML = Новый ЧтениеXML;

	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
	Исключение
		ОписаниеИмениФайла = СтрРазделить(ИмяФайла, ПолучитьРазделительПути());

		ВызватьИсключение СтрШаблон("Некорректный формат настроек: отсутствует файл %1",ОписаниеИмениФайла[ОписаниеИмениФайла.ВГраница()]);
	КонецПопытки;

	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
КонецФункции

Процедура ВО_УстановитьУсловноеОформлениеДереваПодсистем(Форма) Экспорт
	ЭлементыФормы = Форма.Элементы;

	ДеревоПодсистем				= ЭлементыФормы.ДеревоПодсистем; // ТаблицаФормы
	ПризнакИспользованияОтчета	= ЭлементыФормы.ДеревоПодсистемИспользование; // ПолеФормы
	ПолеВажностиОтчета			= ЭлементыФормы.ДеревоПодсистемВажность; // ПолеФормы

	ВариантыВажностиОтчета = ПолеВажностиОтчета.СписокВыбора; // СписокЗначений
	ВариантыВажностиОтчета.Добавить("Важный");
	ВариантыВажностиОтчета.Добавить("См. также");

	Элемент				= Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента		= Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле	= Новый ПолеКомпоновкиДанных(ДеревоПодсистем.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодсистем.Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "";

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента		= Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле	= Новый ПолеКомпоновкиДанных(ПризнакИспользованияОтчета.Имя);
	ПолеЭлемента		= Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле	= Новый ПолеКомпоновкиДанных(ПолеВажностиОтчета.Имя);

	ОтборЭлемента					= Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДеревоПодсистем.Приоритет");
	ОтборЭлемента.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение	= "";

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
КонецПроцедуры

Процедура ВО_ДеревоПодсистемЗаписать(ВариантОбъект, ИзмененныеПодсистемы) Экспорт
	Для Каждого Подсистема Из ИзмененныеПодсистемы Цикл
		СтрокаТабличнойЧасти = ВариантОбъект.Размещение.Найти(Подсистема.Ссылка, "Подсистема");
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			// Необходимо зарегистрировать настройку размещения варианта безусловно (даже флажок Использование отключен)
			// - только тогда эта настройка заменит предопределенную (из неразделенного справочника).
			СтрокаТабличнойЧасти			= ВариантОбъект.Размещение.Добавить();
			СтрокаТабличнойЧасти.Подсистема	= Подсистема.Ссылка;
		КонецЕсли;

		Если Подсистема.Использование = 0 Тогда
			СтрокаТабличнойЧасти.Использование = Ложь;
		ИначеЕсли Подсистема.Использование = 1 Тогда
			СтрокаТабличнойЧасти.Использование = Истина;
		Иначе
			// Оставить как есть
		КонецЕсли;

		Если Подсистема.Важность = "Важный" Тогда
			СтрокаТабличнойЧасти.Важный  = Истина;
			СтрокаТабличнойЧасти.СмТакже = Ложь;
		ИначеЕсли Подсистема.Важность = "См. также" Тогда
			СтрокаТабличнойЧасти.Важный  = Ложь;
			СтрокаТабличнойЧасти.СмТакже = Истина;
		Иначе
			СтрокаТабличнойЧасти.Важный  = Ложь;
			СтрокаТабличнойЧасти.СмТакже = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ВО_СброситьНастройкиВариантаОтчета(ВариантОбъект) Экспорт
	Если ВариантОбъект.Пользовательский
		Или (ВариантОбъект.ТипОтчета <> Перечисления.ТипыОтчетов.Внутренний И ВариантОбъект.ТипОтчета <> Перечисления.ТипыОтчетов.Расширение)
		Или Не ЗначениеЗаполнено(ВариантОбъект.ПредопределенныйВариант) Тогда

		Возврат Ложь;
	КонецЕсли;

	ВариантОбъект.Наименование		= БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(ВариантОбъект.ПредопределенныйВариант, "Наименование");
	ВариантОбъект.Автор				= Неопределено;
	ВариантОбъект.ТолькоДляАвтора 	= Ложь;
	ВариантОбъект.Описание			= "";
	ВариантОбъект.Размещение.Очистить();

	Возврат Истина;
КонецФункции

Процедура ВО_ОпределитьПоведениеСпискаПользователейВариантаОтчета(Форма) Экспорт
	Элементы = Форма.Элементы;

	ПодменюПодбора						= Элементы.ПользователиВариантаГруппаПодобрать; // ГруппаФормы
	КнопкаПодбораПользователей			= Элементы.ПользователиВариантаПодобратьПользователейГруппы; // КнопкаФормы
	КнопкаПодбораГруппВнеПользователей	= Элементы.ПользователиВариантаПодобратьГруппыВнешнихПользователей; // КнопкаФормы

	НастройкаДоступностиРазрешена		= Не Элементы.Доступен.ТолькоПросмотр И ПравоДоступа("Чтение", Метаданные.Справочники.Пользователи);

	ПодменюПодбора.Видимость			= Форма.ИспользоватьГруппыПользователей И Форма.ИспользоватьВнешнихПользователей;

	Элементы.ПользователиВариантаПодобратьПользователей.Видимость = Форма.ИспользоватьГруппыПользователей И Не Форма.ИспользоватьВнешнихПользователей;

	ГруппыИспользуются = Форма.ИспользоватьГруппыПользователей Или Форма.ИспользоватьВнешнихПользователей;

	Элементы.ПользователиВариантаУдалить.Видимость							= ГруппыИспользуются;
	Элементы.ПользователиВарианта.ИзменятьСоставСтрок						= ГруппыИспользуются И НастройкаДоступностиРазрешена;

	Элементы.ПользователиВариантаПометка.Видимость							= Не ГруппыИспользуются;
	Элементы.ПользователиВариантаКонтекстноеМенюУстановитьФлажки.Видимость	= Не ГруппыИспользуются;
	Элементы.ПользователиВариантаКонтекстноеМенюСнятьФлажки.Видимость		= Не ГруппыИспользуются;

	Элементы.ПользователиВарианта.ТолькоПросмотр							= Не НастройкаДоступностиРазрешена;

	Если ПодменюПодбора.Видимость Тогда
		ПодменюПодбора.Доступность						= НастройкаДоступностиРазрешена;
		КнопкаПодбораПользователей.Доступность			= НастройкаДоступностиРазрешена;
		КнопкаПодбораГруппВнеПользователей.Доступность	= НастройкаДоступностиРазрешена;
	КонецЕсли;

	Если Элементы.ПользователиВариантаПодобратьПользователей.Видимость Тогда
		Элементы.ПользователиВариантаПодобратьПользователей.Доступность = НастройкаДоступностиРазрешена;
	КонецЕсли;

	Если Элементы.ПользователиВариантаУдалить.Видимость Тогда
		Элементы.ПользователиВариантаУдалить.Доступность = НастройкаДоступностиРазрешена;
	КонецЕсли;
КонецПроцедуры

Функция ВО_ДеревоПодсистемСформировать(Форма, ВариантОснование) Экспорт
	// Пустое дерево без настроек.
	Прототип		= Форма.РеквизитФормыВЗначение("ДеревоПодсистем", Тип("ДеревоЗначений")); // ДеревоЗначений
	ДеревоПодсистем	= ВариантыОтчетовСерверПовтИсп.ВО_ПодсистемыТекущегоПользователя().Скопировать();
	Для Каждого КолонкаПрототипа Из Прототип.Колонки Цикл
		Если ДеревоПодсистем.Колонки.Найти(КолонкаПрототипа.Имя) = Неопределено Тогда
			ДеревоПодсистем.Колонки.Добавить(КолонкаПрототипа.Имя, КолонкаПрототипа.ТипЗначения);
		КонецЕсли;
	КонецЦикла;

	// Параметры.
	Контекст = Новый Структура("ДеревоПодсистем");
	Контекст.ДеревоПодсистем = ДеревоПодсистем;

	// Размещение, настроенное администратором.
	Подсистемы = Новый Массив;
	Для Каждого СтрокаРазмещения Из ВариантОснование.Размещение Цикл
		Подсистемы.Добавить(СтрокаРазмещения.Подсистема);
		ВО_ДеревоПодсистемЗарегистрироватьНастройкиПодсистемы(Контекст, СтрокаРазмещения, СтрокаРазмещения.Использование);
	КонецЦикла;

	// Размещение, предопределенное разработчиком.
	Запрос			= Новый Запрос;
	Запрос.Текст	=
	"ВЫБРАТЬ
	|	Размещение.Ссылка,
	|	Размещение.НомерСтроки,
	|	Размещение.Подсистема,
	|	Размещение.Важный,
	|	Размещение.СмТакже
	|ИЗ
	|	Справочник.ПредопределенныеВариантыОтчетов.Размещение КАК Размещение
	|ГДЕ
	|	Размещение.Ссылка = &Ссылка
	|	И НЕ Размещение.Подсистема В (&Подсистемы)";

	Если ТипЗнч(ВариантОснование.ПредопределенныйВариант) = Тип("СправочникСсылка.ПредопределенныеВариантыОтчетовРасширений") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПредопределенныеВариантыОтчетов", "ПредопределенныеВариантыОтчетовРасширений");
	КонецЕсли;

	Запрос.УстановитьПараметр("Ссылка", ВариантОснование.ПредопределенныйВариант);
	// Не зачитывать настройки подсистем, переопределенные администратором.
	Запрос.УстановитьПараметр("Подсистемы", Подсистемы);

	РазмещениеПредопределенного = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаРазмещения Из РазмещениеПредопределенного Цикл
		ВО_ДеревоПодсистемЗарегистрироватьНастройкиПодсистемы(Контекст, СтрокаРазмещения, Истина);
	КонецЦикла;

	Возврат Контекст.ДеревоПодсистем;
КонецФункции

Процедура ВО_ДеревоПодсистемЗарегистрироватьНастройкиПодсистемы(Контекст, СтрокаРазмещения, Использование)
	Поиск		= Новый Структура("Ссылка", СтрокаРазмещения.Подсистема);
	Найденные	= Контекст.ДеревоПодсистем.Строки.НайтиСтроки(Поиск, Истина);
	Если Найденные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокаДерева = Найденные[0];

	Если СтрокаРазмещения.Важный Тогда
		СтрокаДерева.Важность = "Важный";
	ИначеЕсли СтрокаРазмещения.СмТакже Тогда
		СтрокаДерева.Важность = "См. также";
	Иначе
		СтрокаДерева.Важность = "";
	КонецЕсли;
	СтрокаДерева.Использование = Использование;
КонецПроцедуры

Процедура ВО_УстановитьУсловноеОформлениеСпискаПользователейВариантаОтчета(Форма) Экспорт
	ЭлементыФормы				= Форма.Элементы;
	ПолеЗначенияПользователя	= ЭлементыФормы.ПользователиВариантаЗначение; // ПолеФормы

	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента		= Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле	= Новый ПолеКомпоновкиДанных(ПолеЗначенияПользователя.Имя);

	ОтборЭлемента				= Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("ПользователиВарианта.Значение");
	ОтборЭлемента.ВидСравнения	= ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "Все пользователи");

	Элемент						= Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента				= Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле			= Новый ПолеКомпоновкиДанных(ПолеЗначенияПользователя.Имя);

	ОтборЭлемента					= Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ПользователиВарианта.Представление");
	ОтборЭлемента.ВидСравнения		= ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение	= "[ЭтоТекущийПользователь]";

	ШрифтВажнойНадписи			= Метаданные.ЭлементыСтиля.ВажнаяНадписьШрифт;
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтВажнойНадписи.Значение);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ПользователиВарианта.Значение"));
КонецПроцедуры

Функция ВО_ЯзыкПоКоду(Знач КодЯзыка)
	Для каждого Язык Из Метаданные.Языки Цикл
		Если Язык.КодЯзыка = КодЯзыка Тогда
			Возврат Язык;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

Процедура ВО_ВывестиПризнакУведомленияПользователейВариантаОтчета(Признак) Экспорт
	Признак.Видимость = Ложь;

	Возврат;

	// Зарезервировано для новых подсистем
КонецПроцедуры

Функция ВО_ТаблицаВариантовОтчетов(Знач ПараметрыПоиска) Экспорт
	Возврат ВО_НайтиВариантыОтчетов(ПараметрыПоиска, Истина).ТаблицаЗначений;
КонецФункции

Процедура ВО_СброситьПользовательскиеНастройки(Ключ, ТипыНастроек = Неопределено) Экспорт
	БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр("ВариантыОтчетов.СброситьПользовательскиеНастройки", "Ключ", Ключ, Новый ОписаниеТипов("Строка, ОбъектМетаданных, СправочникСсылка.ВариантыОтчетов"));

	КлючиВариантов = Новый Массив; // Итоговый список очищаемых ключей.

	// Список ключей может быть заполнен из запроса или извне можно передать один конкретный ключ.
	Запрос			= Новый Запрос;
	Запрос.Текст	=
	"ВЫБРАТЬ
	|	&ИмяОтчета КАК ИмяОтчета,
	|	ВариантыОтчетов.КлючВарианта
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	&Условие";

	ИмяОтчета = "ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВариантыОтчетов.Отчет) = ТИП(Справочник.ИдентификаторыОбъектовМетаданных)
	|			ТОГДА ВЫРАЗИТЬ(ВариантыОтчетов.Отчет КАК Справочник.ИдентификаторыОбъектовМетаданных).Имя
	|		КОГДА ТИПЗНАЧЕНИЯ(ВариантыОтчетов.Отчет) = ТИП(Справочник.ИдентификаторыОбъектовРасширений)
	|			ТОГДА ВЫРАЗИТЬ(ВариантыОтчетов.Отчет КАК Справочник.ИдентификаторыОбъектовРасширений).Имя
	|		ИНАЧЕ ВЫРАЗИТЬ(ВариантыОтчетов.Отчет КАК СТРОКА(150))
	|	КОНЕЦ";

	// Зарезервировано для новых подсистем

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяОтчета", ИмяОтчета);

	Если Ключ = "*" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "ТипОтчета = ЗНАЧЕНИЕ(Перечисление.ТипыОтчетов.Внутренний)");
	ИначеЕсли ТипЗнч(Ключ) = Тип("ОбъектМетаданных") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "Отчет = &Отчет");
		Запрос.УстановитьПараметр("Отчет", Справочники.ИдентификаторыОбъектовМетаданных.ИдентификаторОбъектаМетаданных(Ключ, Истина));
	ИначеЕсли ТипЗнч(Ключ) = Тип("СправочникСсылка.ВариантыОтчетов") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Ключ);
	ИначеЕсли ТипЗнч(Ключ) = Тип("Строка") Тогда
		КлючиВариантов.Добавить(Ключ);
	Иначе
		ВызватьИсключение "Некорректный тип параметра ""Отчет""";
	КонецЕсли;

	Если Не ПустаяСтрока(Запрос.Текст) Тогда
		Выборка = Запрос.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл
			КлючиВариантов.Добавить(Выборка.ИмяОтчета +"/"+ Выборка.КлючВарианта);
		КонецЦикла;
	КонецЕсли;

	Если ТипыНастроек = Неопределено Тогда
		ТипыНастроек = Новый Структура;
	КонецЕсли;

	ВариантыОтчетовКлиентСервер.ВО_ДополнитьСтруктуруКлючом(ТипыНастроек, "ЭлементОтбора", Истина);
	ВариантыОтчетовКлиентСервер.ВО_ДополнитьСтруктуруКлючом(ТипыНастроек, "ЗначениеПараметраНастроек", Истина);
	СбрасыватьПрочие = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(ТипыНастроек, "Прочие", Истина);

	УстановитьПривилегированныйРежим(Истина);

	Для Каждого ПолноеИмяВарианта Из КлючиВариантов Цикл
		КлючОбъекта			= "Отчет." + ПолноеИмяВарианта + "/ТекущиеПользовательскиеНастройки";
		ВыборкаХранилища	= ХранилищеСистемныхНастроек.Выбрать(Новый Структура("КлючОбъекта", КлючОбъекта));

		ОшибокЧтенияПодряд = 0;
		Пока Истина Цикл
			Попытка
				ЭлементВыборкиПолучен	= ВыборкаХранилища.Следующий();
				ОшибокЧтенияПодряд		= 0;
			Исключение
				ЭлементВыборкиПолучен	= Неопределено;
				ОшибокЧтенияПодряд		= ОшибокЧтенияПодряд + 1;
				ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, "В процессе выборки пользовательских настроек отчетов из системного хранилища возникла ошибка:" + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;

			Если ЭлементВыборкиПолучен = Ложь Тогда
				Прервать;
			ИначеЕсли ЭлементВыборкиПолучен = Неопределено Тогда
				Если ОшибокЧтенияПодряд > 100 Тогда
					Прервать;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			ПользовательскиеНастройкиКД = ВыборкаХранилища.Настройки; // ПользовательскиеНастройкиКомпоновкиДанных
			Если ТипЗнч(ПользовательскиеНастройкиКД) <> Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;

			ЕстьИзменения = Ложь;
			Количество = ПользовательскиеНастройкиКД.Элементы.Количество();
			Для Номер = 1 По Количество Цикл
				ОбратныйИндекс				= Количество - Номер;
				ПользовательскаяНастройкаКД	= ПользовательскиеНастройкиКД.Элементы.Получить(ОбратныйИндекс);
				Тип							= ВариантыОтчетовКлиентСервер.О_ТипНастройкиСтрокой(ТипЗнч(ПользовательскаяНастройкаКД));
				Сбрасывать					= БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(ТипыНастроек, Тип, СбрасыватьПрочие);

				Если Сбрасывать Тогда
					ПользовательскиеНастройкиКД.Элементы.Удалить(ОбратныйИндекс);
					ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЦикла;

			Если ЕстьИзменения Тогда
				БазоваяПодсистемаСервер.ОН_ХранилищеСохранить(ХранилищеСистемныхНастроек, ВыборкаХранилища.КлючОбъекта, ВыборкаХранилища.КлючНастроек, ПользовательскиеНастройкиКД, Неопределено, ВыборкаХранилища.Пользователь, Ложь);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ВО_ЗаполнитьПредставленияПредопределенныхВариантовОтчетов(Языки, ИндексТекущегоЯзыка) Экспорт
	БазоваяПодсистемаСервер.ОН_ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеПредопределенныхВариантовОтчетов);

	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);

	ПараметрыОбновления							= ВО_ПараметрыОбновленияНастроек();
	ПараметрыОбновления.Отложенное				= Истина;
	ПараметрыОбновления.ЗаполнятьПредставления	= Ложь;

	ВО_Обновить(ПараметрыОбновления);

	Если ИндексТекущегоЯзыка < Языки.ВГраница() Тогда
		ВО_ЗапланироватьЗаполнениеПредставлений(Языки, ИндексТекущегоЯзыка + 1);

		Возврат;
	КонецЕсли;

	МетаданныеЗадания	= Метаданные.РегламентныеЗадания.ОбновлениеПредопределенныхВариантовОтчетов;
	Задания				= РегламентныеЗаданияСервер.РЗ_НайтиЗадания(Новый Структура("Метаданные", МетаданныеЗадания));

	Для Каждого Задание Из Задания Цикл
		Задание.Удалить();
	КонецЦикла;
КонецПроцедуры

Функция ВО_ОбщиеНастройкиПанели() Экспорт
	ОбщиеНастройки = БазоваяПодсистемаСервер.ОН_ХранилищеЗагрузить(ХранилищеОбщихНастроек, "СтандартныеПодсистемы.ВариантыОтчетов", "ПанельОтчетов", Неопределено, Неопределено, Неопределено);
	Если ОбщиеНастройки = Неопределено Тогда
		ОбщиеНастройки = Новый Структура("ПоказыватьПодсказки, ИскатьВоВсехРазделах, ПоказатьОповещениеОПодсказках");
		ОбщиеНастройки.ПоказатьОповещениеОПодсказках = Ложь;
		ОбщиеНастройки.ПоказыватьПодсказки           = ВО_ГлобальныеНастройки().ВыводитьОписания;
		ОбщиеНастройки.ИскатьВоВсехРазделах          = Ложь;
	Иначе
		// Возможность можно считать новой для пользователя только в том случае,
		// если у пользователя есть понимание что такое "старые" возможности (т.е. если он уже работал с этой формой).
		Если Не ОбщиеНастройки.Свойство("ПоказатьОповещениеОПодсказках") Тогда
			ОбщиеНастройки.Вставить("ПоказатьОповещениеОПодсказках", Истина);
		КонецЕсли;
	КонецЕсли;

	Возврат ОбщиеНастройки;
КонецФункции

Функция ВО_СохранитьОбщиеНастройкиПанели(ОбщиеНастройки) Экспорт
	Если ТипЗнч(ОбщиеНастройки) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ОбщиеНастройки.Количество() < 3 Тогда
		БазоваяПодсистемаКлиентСервер.ОН_ДополнитьСтруктуру(ОбщиеНастройки, ВО_ОбщиеНастройкиПанели(), Ложь);
	КонецЕсли;
	БазоваяПодсистемаСервер.ОН_ХранилищеСохранить(ХранилищеОбщихНастроек,"СтандартныеПодсистемы.ВариантыОтчетов", "ПанельОтчетов", ОбщиеНастройки, Неопределено, Неопределено, Ложь);

	Возврат ОбщиеНастройки;
КонецФункции

Процедура ВО_ПриСохраненииПользовательскихНастроекНаСервере(Форма, Настройки) Экспорт
	РеквизитыФормы = Новый Структура("КлючОбъекта, ВариантСсылка");
	ЗаполнитьЗначенияСвойств(РеквизитыФормы, Форма);
	Если Не ЗначениеЗаполнено(РеквизитыФормы.КлючОбъекта) Или Не ЗначениеЗаполнено(РеквизитыФормы.ВариантСсылка) Тогда
		ОтчетОбъект		= Форма.РеквизитФормыВЗначение("Отчет");
		ОтчетМетаданные	= ОтчетОбъект.Метаданные();
		Если Не ЗначениеЗаполнено(РеквизитыФормы.КлючОбъекта) Тогда
			РеквизитыФормы.КлючОбъекта = ОтчетМетаданные.ПолноеИмя();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(РеквизитыФормы.ВариантСсылка) Тогда
			ОтчетИнформация = ВО_ИнформацияОбОтчете(РеквизитыФормы.КлючОбъекта);
			Если НЕ ЗначениеЗаполнено(ОтчетИнформация.ТекстОшибки) Тогда
				ОтчетСсылка = ОтчетИнформация.Отчет;
			Иначе
				ОтчетСсылка = РеквизитыФормы.КлючОбъекта;
			КонецЕсли;
			РеквизитыФормы.ВариантСсылка = ВО_ВариантОтчета(ОтчетСсылка, Форма.КлючТекущегоВарианта);
		КонецЕсли;
	КонецЕсли;

	КлючНастроек		= РеквизитыФормы.КлючОбъекта + "/" + Форма.КлючТекущегоВарианта;
	СписокНастроек		= ХранилищеПользовательскихНастроекОтчетов.ПолучитьСписок(КлючНастроек);
	КоличествоНастроек	= СписокНастроек.Количество();
	ПользовательСсылка	= ПользователиСервер.сП_АвторизованныйПользователь();

	ПользовательскиеНастройки = ВО_ПользовательскиеНастройкиВариантаОтчета(РеквизитыФормы.ВариантСсылка, ПользовательСсылка);
	Если ПользовательскиеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Настройка Из ПользовательскиеНастройки Цикл
		ЭлементСписка = СписокНастроек.НайтиПоЗначению(Настройка.КлючПользовательскойНастройки);

		ПометкаУдаления = (ЭлементСписка = Неопределено);
		Если ПометкаУдаления <> Настройка.ПометкаУдаления Тогда
			НастройкаОбъект = Настройка.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ПользовательскиеНастройкиОтчетов
			НастройкаОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		КонецЕсли;

		Если ПометкаУдаления Тогда
			Если КоличествоНастроек = 0 Тогда
				Прервать;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если Настройка.Наименование <> ЭлементСписка.Представление Тогда
			НастройкаОбъект					= Настройка.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ПользовательскиеНастройкиОтчетов
			НастройкаОбъект.Наименование	= ЭлементСписка.Представление;

			// Блокировка не устанавливается, т.к. пользовательские настройки разрезаются по пользователям,
			// поэтому конкурентной работы не ожидается.
			НастройкаОбъект.Записать(); // АПК:1327
		КонецЕсли;

		СписокНастроек.Удалить(ЭлементСписка);
		КоличествоНастроек = КоличествоНастроек - 1;
	КонецЦикла;

	Для Каждого ЭлементСписка Из СписокНастроек Цикл
		НастройкаОбъект									= Справочники.ПользовательскиеНастройкиОтчетов.СоздатьЭлемент();
		НастройкаОбъект.Наименование					= ЭлементСписка.Представление;
		НастройкаОбъект.КлючПользовательскойНастройки	= ЭлементСписка.Значение;
		НастройкаОбъект.Вариант							= РеквизитыФормы.ВариантСсылка;
		НастройкаОбъект.Пользователь					= ПользовательСсылка;

		// Блокировка не устанавливается, т.к. пользовательские настройки разрезаются по пользователям,
		// поэтому конкурентной работы не ожидается.
		НастройкаОбъект.Записать(); // АПК:1327
	КонецЦикла;
КонецПроцедуры

Функция ВО_ИспользуемыеТаблицы(Объект) Экспорт
	Таблицы = Новый Массив;

	Если ТипЗнч(Объект) = Тип("СхемаКомпоновкиДанных") Тогда
		ВО_ЗарегистрироватьТаблицыНаборовДанных(Таблицы, Объект.НаборыДанных);
	ИначеЕсли ТипЗнч(Объект) = Тип("Строка") Тогда
		ВО_ЗарегистрироватьТаблицыЗапроса(Таблицы, Объект);
	КонецЕсли;

	Возврат Таблицы;
КонецФункции

Функция ВО_ПроверитьИспользуемыеТаблицы(Объект, Сообщать = Истина) Экспорт
	Если ТипЗнч(Объект) = Тип("Массив") Тогда
		ИспользуемыеТаблицы = Объект;
	Иначе
		ИспользуемыеТаблицы = ВО_ИспользуемыеТаблицы(Объект);
	КонецЕсли;
	Для Каждого ПолноеИмя Из ИспользуемыеТаблицы Цикл
		Если Не ОбновлениеВерсииИБСервер.ОИБ_ОбъектОбработан(ПолноеИмя).Обработан Тогда
			Если Сообщать Тогда
				БазоваяПодсистемаСервер.ОН_СообщитьПользователю("Отчет может содержать некорректные данные, так как не завершен переход на новую версию программы. Если отчет долгое время недоступен, обратитесь к администратору.");
			КонецЕсли;

			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

Процедура ВО_ЗарегистрироватьТаблицыНаборовДанных(Таблицы, НаборыДанных)
	Для Каждого Набор Из НаборыДанных Цикл
		Если ТипЗнч(Набор) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			ВО_ЗарегистрироватьТаблицыЗапроса(Таблицы, Набор.Запрос);
		ИначеЕсли ТипЗнч(Набор) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			ВО_ЗарегистрироватьТаблицыНаборовДанных(Таблицы, Набор.Элементы);
		ИначеЕсли ТипЗнч(Набор) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") Тогда
			// Нечего регистрировать.
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ВО_ЗарегистрироватьТаблицыЗапроса(Таблицы, ТекстЗапроса)
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Для Каждого Запрос Из СхемаЗапроса.ПакетЗапросов Цикл
		Если ТипЗнч(Запрос) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			ВО_ЗарегистрироватьТаблицыОператоровЗапроса(Таблицы, Запрос.Операторы);
		ИначеЕсли ТипЗнч(Запрос) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			// Нечего регистрировать.
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ВО_ЗарегистрироватьТаблицыОператоровЗапроса(Таблицы, Операторы)
	Для Каждого Оператор Из Операторы Цикл
		Для Каждого Источник Из Оператор.Источники Цикл
			Источник = Источник.Источник;
			Если ТипЗнч(Источник) = Тип("ТаблицаСхемыЗапроса") Тогда
				Если Таблицы.Найти(Источник.ИмяТаблицы) = Неопределено Тогда
					Таблицы.Добавить(Источник.ИмяТаблицы);
				КонецЕсли;
			ИначеЕсли ТипЗнч(Источник) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
				ВО_ЗарегистрироватьТаблицыОператоровЗапроса(Таблицы, Источник.Запрос.Операторы);
			ИначеЕсли ТипЗнч(Источник) = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
				// Нечего регистрировать.
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ВО_ПользовательскиеНастройкиВариантаОтчета(ВариантОтчета, Пользователь, КлючНастройки = Неопределено)
	Если ТипЗнч(ВариантОтчета) <> Тип("СправочникСсылка.ВариантыОтчетов") Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПредставлениеВариантОтчета = Строка(ВариантОтчета);

	НачатьТранзакцию();

	Попытка
		Блокировка				= Новый БлокировкаДанных;
		ЭлементБлокировки		= Блокировка.Добавить(Метаданные.Справочники.ПользовательскиеНастройкиОтчетов.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Вариант", ВариантОтчета);
		ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
		ЭлементБлокировки.Режим	= РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();

		Запрос			= Новый Запрос;
		Запрос.Текст	=
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Настройки.*
		|ИЗ
		|	Справочник.ПользовательскиеНастройкиОтчетов КАК Настройки
		|ГДЕ
		|	Настройки.Вариант = &ВариантОтчета
		|	И Настройки.Пользователь = &Пользователь
		|	И (НЕ &КлючНастройкиОпределен
		|		ИЛИ Настройки.КлючПользовательскойНастройки = &КлючНастройки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Настройки.ПометкаУдаления";

		Запрос.УстановитьПараметр("ВариантОтчета",			ВариантОтчета);
		Запрос.УстановитьПараметр("Пользователь",			Пользователь);
		Запрос.УстановитьПараметр("КлючНастройкиОпределен",	КлючНастройки <> Неопределено);
		Запрос.УстановитьПараметр("КлючНастройки",			КлючНастройки);

		ПользовательскиеНастройки = Запрос.Выполнить().Выгрузить();

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ПользовательскиеНастройки = Неопределено;

		ЗаписьЖурналаРегистрации("Чтение пользовательских настроек отчета", УровеньЖурналаРегистрации.Ошибка,, ПредставлениеВариантОтчета, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		ВызватьИсключение;
	КонецПопытки;

	Возврат ПользовательскиеНастройки;
КонецФункции

Процедура ВО_ПоделитьсяПользовательскимиНастройками(ВыбранныеПользователи, ШаблонОписанияНастроек) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь		= ПользователиСервер.сП_АвторизованныйПользователь();
	СвойстваПользователей	= ВО_СвойстваПользователейНастроек(ВыбранныеПользователи, ТекущийПользователь);

	Если СвойстваПользователей.Действительных.Количество() = 0 Тогда
		ШаблонОписанияНастроек.Вставить("Предупреждение", "Выбранные пользователи недействительны");

		Возврат;
	КонецЕсли;

	Если СвойстваПользователей.Недействительных.Количество() > 0 Тогда
		ШаблонПояснения = "Некоторые из выбранных пользователей недействительны: %1";

		Пояснение = СтрШаблон(ШаблонПояснения, СтрСоединить(СвойстваПользователей.Недействительных, ", "));

		ШаблонОписанияНастроек.Вставить("Пояснение", Пояснение);
	КонецЕсли;

	ВыбранныеПользователи.Добавить(ТекущийПользователь);
	ВО_ПроверитьДоступностьВариантаОтчета(ШаблонОписанияНастроек.ВариантОтчета, ВыбранныеПользователи);

	ВО_НормализоватьШаблонОписанияНастроек(ШаблонОписанияНастроек, ТекущийПользователь);

	Для Каждого СвойстваПользователя Из СвойстваПользователей.Действительных Цикл
		ОписаниеНастроек = Новый ОписаниеНастроек;
		ЗаполнитьЗначенияСвойств(ОписаниеНастроек, ШаблонОписанияНастроек);
		ОписаниеНастроек.Пользователь = СвойстваПользователя.Имя;

		ХранилищеПользовательскихНастроекОтчетов.Сохранить(ОписаниеНастроек.КлючОбъекта, ОписаниеНастроек.КлючНастроек, ШаблонОписанияНастроек.Настройки, ОписаниеНастроек, ОписаниеНастроек.Пользователь);

		ВО_ОбновитьСлужебнуюИнформациюПользовательскихНастроек(СвойстваПользователя.Ссылка, ШаблонОписанияНастроек);
	КонецЦикла;

	ВО_ОповеститьПользователейНастроекОтчета(СвойстваПользователей.Действительных, ШаблонОписанияНастроек);
КонецПроцедуры

Функция ВО_СвойстваПользователейНастроек(ВыбранныеПользователи, ТекущийПользователь)
	СвойстваПользователей = Новый Структура;
	СвойстваПользователей.Вставить("Действительных", Новый Массив);
	СвойстваПользователей.Вставить("Недействительных", Новый Массив);

	#Область ЗапросПользователей

	ИспользоватьГруппыПользователей = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей");

	// АПК:96 -выкл результат должен содержать уникальные значения

	Запрос			= Новый Запрос;
	Запрос.Текст	=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.Ссылка,
	|	Пользователи.Представление,
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка В (&ВыбранныеПользователи)
	|	И Пользователи.Ссылка <> &ТекущийПользователь
	|	И НЕ Пользователи.ПометкаУдаления
	|	И НЕ Пользователи.Недействителен
	|	И НЕ Пользователи.Служебный
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Пользователи.Ссылка,
	|	Пользователи.Представление,
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.ГруппыПользователей.Состав КАК СоставыГруппПользователей
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО Пользователи.Ссылка = СоставыГруппПользователей.Пользователь
	|ГДЕ
	|	&ИспользоватьГруппыПользователей
	|	И СоставыГруппПользователей.Ссылка В (&ВыбранныеПользователи)
	|	И Пользователи.Ссылка <> &ТекущийПользователь
	|	И НЕ Пользователи.ПометкаУдаления
	|	И НЕ Пользователи.Недействителен
	|	И НЕ Пользователи.Служебный";

	// АПК:96 -вкл

	Запрос.УстановитьПараметр("ВыбранныеПользователи",				ВыбранныеПользователи);
	Запрос.УстановитьПараметр("ТекущийПользователь",				ТекущийПользователь);
	Запрос.УстановитьПараметр("ИспользоватьГруппыПользователей",	ИспользоватьГруппыПользователей);

	Выборка = Запрос.Выполнить().Выбрать();

	#КонецОбласти

	Пока Выборка.Следующий() Цикл
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);

		Если ПользовательИБ = Неопределено Тогда
			СвойстваПользователей.Недействительных.Добавить(Выборка.Представление);

			Продолжить;
		КонецЕсли;

		СвойстваПользователя = ВО_СвойстваПользователя(Выборка.Ссылка, ПользовательИБ.Имя, Выборка.ИдентификаторПользователяИБ);
		СвойстваПользователей.Действительных.Добавить(СвойстваПользователя);
	КонецЦикла;

	Возврат СвойстваПользователей;
КонецФункции

Функция ВО_СвойстваПользователя(Ссылка, ИмяПользователяИБ, ИдентификаторПользователяИБ)
	СвойстваПользователя = Новый Структура;
	СвойстваПользователя.Вставить("Ссылка",							Ссылка);
	СвойстваПользователя.Вставить("Имя",							ИмяПользователяИБ);
	СвойстваПользователя.Вставить("ИдентификаторПользователяИБ",	ИдентификаторПользователяИБ);

	Возврат СвойстваПользователя;
КонецФункции

Процедура ВО_ПроверитьДоступностьВариантаОтчета(ВариантОтчета, ВыбранныеПользователи)
	ВыборкаПользователей = РегистрыСведений.НастройкиВариантовОтчетов.ПользователиВариантаОтчета(ВариантОтчета, ВыбранныеПользователи);

	Пока ВыборкаПользователей.Следующий() Цикл
		НайденныйПользователь = ВыбранныеПользователи.Найти(ВыборкаПользователей.Ссылка);
		Если НайденныйПользователь <> Неопределено Тогда
			ВыбранныеПользователи.Удалить(НайденныйПользователь);
		КонецЕсли;
	КонецЦикла;

	Если ВыбранныеПользователи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПользователиВарианта = Новый СписокЗначений;
	ПользователиВарианта.ЗагрузитьЗначения(ВыбранныеПользователи);

	РегистрыСведений.НастройкиВариантовОтчетов.ЗаписатьНастройкиДоступностиВариантаОтчета(ВариантОтчета, Ложь, ПользователиВарианта);
КонецПроцедуры

Процедура ВО_НормализоватьШаблонОписанияНастроек(ШаблонОписанияНастроек, ТекущийПользователь)
	ВО_УстановитьПредставлениеПользовательскихНастроек(ШаблонОписанияНастроек, ТекущийПользователь);

	Если ЗначениеЗаполнено(ШаблонОписанияНастроек.КлючНастроек) Тогда
		Возврат;
	КонецЕсли;

	ШаблонОписанияНастроек.КлючНастроек = Строка(Новый УникальныйИдентификатор());

	Если ШаблонОписанияНастроек.ВариантМодифицирован Тогда
		Возврат;
	КонецЕсли;

	БазоваяПодсистемаСервер.ОН_ХранилищеСохранить(ХранилищеСистемныхНастроек, ШаблонОписанияНастроек.КлючОбъекта + "/ТекущиеПользовательскиеНастройки", "", ШаблонОписанияНастроек.Настройки, Неопределено, Неопределено, Ложь);
КонецПроцедуры

Процедура ВО_УстановитьПредставлениеПользовательскихНастроек(ШаблонОписанияНастроек, ТекущийПользователь)
	ПользовательскиеНастройки = ВО_ПользовательскиеНастройкиВариантаОтчета(ШаблонОписанияНастроек.ВариантОтчета, ТекущийПользователь, ШаблонОписанияНастроек.КлючНастроек);

	Если ПользовательскиеНастройки <> Неопределено И ПользовательскиеНастройки.Количество() > 0 Тогда
		ОписаниеНастройки						= ПользовательскиеНастройки[0];
		ШаблонОписанияНастроек.Представление	= ОписаниеНастройки.Наименование;

		Возврат;
	КонецЕсли;

	ШаблонПредставления			= "Настройки %1";
	ПредставлениеПользователя	= БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(ТекущийПользователь, "Представление");

	// Зарезервировано для новых подсистем

	ШаблонОписанияНастроек.Представление = СтрШаблон(ШаблонПредставления, ПредставлениеПользователя);
КонецПроцедуры

Процедура ВО_ОбновитьСлужебнуюИнформациюПользовательскихНастроек(Пользователь, ОписаниеНастроек)
	Элементы = ВО_ПользовательскиеНастройкиВариантаОтчета(ОписаниеНастроек.ВариантОтчета, Пользователь, ОписаниеНастроек.КлючНастроек);

	Если Элементы = Неопределено Или Элементы.Количество() = 0 Тогда
		Объект									= Справочники.ПользовательскиеНастройкиОтчетов.СоздатьЭлемент();
		Объект.Наименование						= ОписаниеНастроек.Представление;
		Объект.КлючПользовательскойНастройки	= ОписаниеНастроек.КлючНастроек;
		Объект.Вариант							= ОписаниеНастроек.ВариантОтчета;
		Объект.Пользователь						= Пользователь;
		Объект.Записать(); // АПК:1327

		Возврат;
	КонецЕсли;

	Элемент = Элементы[0];

	Если Не Элемент.ПометкаУдаления И Элемент.Наименование = ОписаниеНастроек.Представление Тогда
		Возврат;
	КонецЕсли;

	Объект				= Элемент.Ссылка.ПолучитьОбъект();
	Объект.Наименование = ОписаниеНастроек.Представление;

	Если Элемент.ПометкаУдаления Тогда
		Объект.УстановитьПометкуУдаления(Ложь);
	Иначе
		Объект.Записать(); // АПК:1327
	КонецЕсли;
КонецПроцедуры

Процедура ВО_ОповеститьПользователейНастроекОтчета(СвойстваПользователей, ОписаниеНастроек)
	#Область Проверка
	// Зарезервировано для новых подсистем

	Возврат;
	#КонецОбласти
КонецПроцедуры

Функция ВО_НастройкиФормыОтчета(ОтчетСсылка, КлючВарианта, ОтчетОбъект) Экспорт
	НастройкиОтчета = ВариантыОтчетовКлиентСервер.О_НастройкиОтчетаПоУмолчанию();

	ОтчетыСНастройками = ВариантыОтчетовСерверПовтИсп.ВО_Параметры().ОтчетыСНастройками;
	Если ОтчетыСНастройками.Найти(ОтчетСсылка) = Неопределено И (ОтчетОбъект = Неопределено Или Метаданные.Отчеты.Содержит(ОтчетОбъект.Метаданные()))Тогда
		Возврат НастройкиОтчета;
	КонецЕсли;

	Если ОтчетОбъект = Неопределено Тогда
		Подключение = ВО_ПодключитьОтчетОбъект(ОтчетСсылка, Ложь);
		Если Подключение.Успех Тогда
			ОтчетОбъект = Подключение.Объект;
		Иначе
			Текст = СтрШаблон("Не удалось получить настройки отчета ""%1"":" + Символы.ПС + Подключение.ТекстОшибки, ОтчетСсылка);
			ВО_ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Информация, Текст, ОтчетСсылка);

			Возврат НастройкиОтчета;
		КонецЕсли;
	КонецЕсли;

	Попытка
		ОтчетОбъект.ОпределитьНастройкиФормы(Неопределено, КлючВарианта, НастройкиОтчета);
	Исключение
		НастройкиОтчета = ВариантыОтчетовКлиентСервер.О_НастройкиОтчетаПоУмолчанию();
	КонецПопытки;

	Если Не ВО_ГлобальныеНастройки().РазрешеноИзменятьВарианты Тогда
		НастройкиОтчета.РазрешеноИзменятьВарианты = Ложь;
	КонецЕсли;

	Возврат НастройкиОтчета;
КонецФункции

Процедура ВО_ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники) Экспорт
	// Загрузка в справочник ПользовательскиеНастройкиОтчетов запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.ПользовательскиеНастройкиОтчетов.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;
КонецПроцедуры

Функция сВО_СвойстваРезультатаОтчета() Экспорт
	СвойстваРезультата = Новый Структура;
	СвойстваРезультата.Вставить("АдресИндексаСтруктурыОтчета",	Неопределено);
	СвойстваРезультата.Вставить("Заголовки",					Новый Соответствие);
	СвойстваРезультата.Вставить("ГраницыРазделов",				Новый СписокЗначений);
	СвойстваРезультата.Вставить("РолиПолей",					Новый Структура);
	СвойстваРезультата.Вставить("ИндексПолей",					Новый Соответствие);
	СвойстваРезультата.Вставить("ОсновныеПоля",					Новый Массив);
	СвойстваРезультата.Вставить("ИтоговыеНастройки",			Неопределено);
	СвойстваРезультата.Вставить("КомпоновщикНастроек",			Неопределено);
	СвойстваРезультата.Вставить("МакетыОписаны",				Ложь);
	СвойстваРезультата.Вставить("ВремяФормирования",			0);

	Возврат СвойстваРезультата;
КонецФункции

Процедура сВО_ИнициализироватьЗаголовкиОтчета(Форма) Экспорт
	НастройкиОтчета = Форма.НастройкиОтчета;

	Если Не ВариантыОтчетовКлиентСервер.сВО_РежимВариантаОтчета(Форма.КлючТекущегоВарианта) Или Не НастройкиОтчета.РазрешеноИзменятьВарианты Тогда
		Возврат;
	КонецЕсли;

	Заголовки = Новый Соответствие;

	Элементы			= Форма.Элементы;
	СвойстваРезультата	= НастройкиОтчета.СвойстваРезультата;
	РезультатОтчета		= Форма.ОтчетТабличныйДокумент;

	РазрезСвойствЗаголовков = сВО_СтандартныйРазрезСвойствЗаголовковОтчета();

	Для НомерСтроки = 1 По РезультатОтчета.ВысотаТаблицы Цикл
		Для НомерКолонки = 1 По РезультатОтчета.ШиринаТаблицы Цикл
			Ячейка = РезультатОтчета.Область(НомерСтроки, НомерКолонки);

			Если Ячейка.РежимИзмененияРазмераКолонки <> РежимИзмененияРазмера.БыстроеИзменение Тогда
				Продолжить;
			КонецЕсли;

			Ячейка.ГиперСсылка = Истина;

			ЗаполнитьЗначенияСвойств(РазрезСвойствЗаголовков.Добавить(), Ячейка);

			СвойстваЗаголовка = сВО_СтандартныеСвойстваЗаголовкаОтчета();
			ЗаполнитьЗначенияСвойств(СвойстваЗаголовка, Ячейка);

			Заголовки.Вставить(Ячейка.Имя, СвойстваЗаголовка);
		КонецЦикла;
	КонецЦикла;

	сВО_ОпределитьИерархиюЗаголовковОтчета(РазрезСвойствЗаголовков, Заголовки);
	ГраницыРазделов = сВО_ГраницыРазделовОтчета(РезультатОтчета, РазрезСвойствЗаголовков);

	ИндексСтруктурыОтчета = сВО_ИндексСтруктурыОтчета(Форма);
	сВО_ДополнитьСвойстваЗаголовковОтчета(Форма, РезультатОтчета, Заголовки, РазрезСвойствЗаголовков, ИндексСтруктурыОтчета, ГраницыРазделов);

	Ячейка = Элементы.ОтчетТабличныйДокумент.ТекущаяОбласть;

	Если Ячейка <> Неопределено Тогда
		ВариантыОтчетовКлиентСервер.сВО_ОпределитьДоступностьДействийКонтекстногоМеню(Форма, Заголовки[Ячейка.Имя]);
	КонецЕсли;

	СвойстваРезультата.Заголовки = Заголовки;
	СвойстваРезультата.ГраницыРазделов = ГраницыРазделов;
КонецПроцедуры

Процедура сВО_ОпределитьПоляФормулы(АдресСхемы, Настройки, ИндексСтруктурыОтчета)
	Для Каждого Запись Из ИндексСтруктурыОтчета Цикл
		Запись.ЭтоФормула = сВО_ЭтоПользовательскоеПоле(Настройки.ПользовательскиеПоля, Запись.Поле);
	КонецЦикла;

	Если Не ЭтоАдресВременногоХранилища(АдресСхемы) Тогда
		Возврат;
	КонецЕсли;

	Схема = ПолучитьИзВременногоХранилища(АдресСхемы);

	Если ТипЗнч(Схема) <> Тип("СхемаКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;

	НайденныеЗаписи = ИндексСтруктурыОтчета.НайтиСтроки(Новый Структура("ЭтоФормула", Ложь));
	ВычисляемыеПоля = Схема.ВычисляемыеПоля;

	Для Каждого Запись Из НайденныеЗаписи Цикл
		Запись.ЭтоФормула = ВычисляемыеПоля.Найти(Строка(Запись.Поле)) <> Неопределено;
	КонецЦикла;
КонецПроцедуры

Функция сВО_ЗначениеЯчейки(Ячейка, ДоступныеТипы, ДанныеРасшифровки) Экспорт
	ЗначениеЯчейки = сВО_СтандартноеЗначениеЯчейки(Ячейка.Текст);

	КоличествоДоступныхТипов = ДоступныеТипы.Типы().Количество();

	Если ТипЗнч(Ячейка.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		ЭлементРасшифровки	= ДанныеРасшифровки.Элементы[Ячейка.Расшифровка];
		Поля				= ЭлементРасшифровки.ПолучитьПоля();

		Если Поля.Количество() > 0 Тогда
			Значение = Поля[0].Значение;

			Если КоличествоДоступныхТипов = 0 Тогда
				ЗначениеЯчейки.Значение = Значение;
			ИначеЕсли ЗначениеЗаполнено(Значение) И Не ДоступныеТипы.СодержитТип(ТипЗнч(Значение)) Тогда
				ЗначениеЯчейки.Значение = Null;
			ИначеЕсли Значение = Null Тогда
				ЗначениеЯчейки.Значение = ДоступныеТипы.ПривестиЗначение(Ячейка.Текст);
			Иначе
				ЗначениеЯчейки.Значение = ДоступныеТипы.ПривестиЗначение(Значение);
			КонецЕсли;

			Если ЗначениеЯчейки.Значение = Неопределено Тогда
				ЗначениеЯчейки.Значение = Null;
			КонецЕсли;

			Возврат ЗначениеЯчейки;
		КонецЕсли;
	КонецЕсли;

	Если БазоваяПодсистемаКлиентСервер.ОН_ЭтоЧисло(Ячейка.Текст) Тогда
		ОписаниеЧисла			= Новый ОписаниеТипов("Число");
		ЗначениеЯчейки.Значение	= ОписаниеЧисла.ПривестиЗначение(Ячейка.Текст);

		Возврат ЗначениеЯчейки;
	КонецЕсли;

	Значение = БазоваяПодсистемаКлиентСервер.ОН_СтрокаВДату(ЗначениеЯчейки.Значение);

	Если ЗначениеЗаполнено(Значение) Тогда
		ЗначениеЯчейки.Значение = Значение;
	Иначе
		ЗначениеЯчейки.Значение = ДоступныеТипы.ПривестиЗначение(Значение);
	КонецЕсли;

	Возврат ЗначениеЯчейки;
КонецФункции

Функция сВО_СтандартноеЗначениеЯчейки(Значение)
	ЗначениеЯчейки = Новый Структура;
	ЗначениеЯчейки.Вставить("Значение",			Значение);
	ЗначениеЯчейки.Вставить("Представление",	Значение);
	ЗначениеЯчейки.Вставить("Пометка",			Истина);

	Возврат ЗначениеЯчейки;
КонецФункции

Функция сВО_ЗаполнитьЗначенияФильтра(ПараметрыЗаполнения) Экспорт
	Значения							= ПараметрыЗаполнения.Значения;
	СвойстваЗаголовка					= ПараметрыЗаполнения.СвойстваЗаголовка;
	Документ							= ПараметрыЗаполнения.Документ;
	Заголовки							= ПараметрыЗаполнения.Заголовки;
	ГраницаРаздела						= ПараметрыЗаполнения.ГраницаРаздела;
	ДанныеРасшифровки					= ПараметрыЗаполнения.ДанныеРасшифровки;
	КоличествоПервыхЧитаемыхСтрок		= ПараметрыЗаполнения.КоличествоПервыхЧитаемыхСтрок;
	ВыведеныВсеЗначенияРазделаОтчета	= ПараметрыЗаполнения.ВыведеныВсеЗначенияРазделаОтчета;
	ДоступныеЗначения					= ПараметрыЗаполнения.ДоступныеЗначения;

	ДоступныеТипы				= Значения.ТипЗначения;
	ИндексЗначенийЯчеек			= Новый Соответствие;

	КоличествоПрочтенныхСтрок		= 0;
	КоличествоСтрокВРазделеОтчета	= ГраницаРаздела - СвойстваЗаголовка.Низ;

	Если ВыведеныВсеЗначенияРазделаОтчета Тогда
		КоличествоЧитаемыхСтрок = КоличествоСтрокВРазделеОтчета;
	Иначе
		КоличествоЧитаемыхСтрок = Мин(КоличествоПервыхЧитаемыхСтрок + СвойстваЗаголовка.Низ, КоличествоСтрокВРазделеОтчета);
	КонецЕсли;

	Для НомерСтроки = СвойстваЗаголовка.Низ + 1 По Документ.ВысотаТаблицы Цикл
		КоличествоПрочтенныхСтрок = КоличествоПрочтенныхСтрок + 1;

		Если КоличествоПрочтенныхСтрок > КоличествоЧитаемыхСтрок Тогда
			Прервать;
		КонецЕсли;

		Ячейка = Документ.Область(НомерСтроки, СвойстваЗаголовка.Лево);

		Если Заголовки[Ячейка.Имя] <> Неопределено Или Ячейка.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Или Не ЗначениеЗаполнено(Ячейка.Текст) Тогда
			Продолжить;
		КонецЕсли;

		ЗначениеЯчейки = сВО_ЗначениеЯчейки(Ячейка, ДоступныеТипы, ДанныеРасшифровки);

		Если Не сВО_ЗначениеЯчейкиКонсистентно(ЗначениеЯчейки, ИндексЗначенийЯчеек, ДоступныеТипы) Тогда
			Продолжить;
		КонецЕсли;

		ДоступноеЗначение = ДоступныеЗначения.НайтиПоЗначению(ЗначениеЯчейки.Значение);

		Если ДоступноеЗначение = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Значения.Добавить(), ЗначениеЯчейки);
		Иначе
			ДоступноеЗначение.Пометка = Истина;
			ЗаполнитьЗначенияСвойств(Значения.Добавить(), ДоступноеЗначение);
		КонецЕсли;
	КонецЦикла;

	ВыведеныВсеЗначенияРазделаОтчета = (КоличествоЧитаемыхСтрок = КоличествоСтрокВРазделеОтчета);

	РезультатЗаполнения = Новый Структура;
	РезультатЗаполнения.Вставить("Значения",							Значения);
	РезультатЗаполнения.Вставить("КоличествоСтрокВРазделеОтчета",		КоличествоСтрокВРазделеОтчета);
	РезультатЗаполнения.Вставить("ВыведеныВсеЗначенияРазделаОтчета",	ВыведеныВсеЗначенияРазделаОтчета);

	Возврат РезультатЗаполнения;
КонецФункции

Функция сВО_ЗначениеЯчейкиКонсистентно(ЗначениеЯчейки, ИндексЗначенийЯчеек, ДоступныеТипы)
	Если Не ЗначениеЗаполнено(ЗначениеЯчейки.Значение) И ЗначениеЗаполнено(ЗначениеЯчейки.Представление) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ИндексЗначенийЯчеек[ЗначениеЯчейки.Значение] <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	КоличествоДоступныхТипов = ДоступныеТипы.Типы().Количество();

	Если КоличествоДоступныхТипов > 0 И Не ДоступныеТипы.СодержитТип(ТипЗнч(ЗначениеЯчейки.Значение)) Тогда
		Возврат Ложь;
	КонецЕсли;

	ИндексЗначенийЯчеек.Вставить(ЗначениеЯчейки.Значение, Истина);

	Возврат Истина;
КонецФункции

Функция сВО_ПредставлениеЭлементовСтруктуры(ЭлементыСтруктуры) Экспорт
	ПредставлениеЭлементов = Новый Массив;

	Для Каждого Элемент Из ЭлементыСтруктуры Цикл
		Если Не Элемент.Использование Тогда
			Продолжить;
		КонецЕсли;

		ПредставлениеЭлемента = сВО_ПредставлениеЭлементаСтруктуры(Элемент);

		Если ЗначениеЗаполнено(ПредставлениеЭлемента) Тогда
			ПредставлениеЭлементов.Добавить(ПредставлениеЭлемента);
		КонецЕсли;
	КонецЦикла;

	Возврат СтрСоединить(ПредставлениеЭлементов, ", ");
КонецФункции

Функция сВО_ПредставлениеЭлементаСтруктуры(Элемент) Экспорт
	ПредставлениеЭлемента = "";

	Если ЗначениеЗаполнено(Элемент.ПредставлениеПользовательскойНастройки) Тогда
		ПредставлениеЭлемента = Элемент.ПредставлениеПользовательскойНастройки;
	Иначе
		ТипЭлемента = ТипЗнч(Элемент);

		ПараметрИспользованияЗаголовка	= Элемент.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок");
		ПараметрЗаголовка				= Элемент.ПараметрыВывода.Элементы.Найти("Заголовок");

		Если ЗначениеЗаполнено(ПараметрЗаголовка.Значение) И (ПараметрЗаголовка.Использование Или ПараметрИспользованияЗаголовка.Использование И ПараметрИспользованияЗаголовка.Значение <> ТипВыводаТекстаКомпоновкиДанных.НеВыводить) Тогда
			ПредставлениеЭлемента = ПараметрЗаголовка.Значение;
		ИначеЕсли ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") Тогда
			ПредставлениеЭлемента = "Таблица";
		ИначеЕсли ТипЭлемента = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ПредставлениеЭлемента = "Диаграмма";
		ИначеЕсли ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных") Или ТипЭлемента = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Или ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			ПредставлениеЭлемента = сВО_ПредставлениеПолейГруппировки(Элемент);
		КонецЕсли;

	КонецЕсли;

	Возврат ПредставлениеЭлемента;
КонецФункции

Функция сВО_ПредставлениеПолейГруппировки(Группировка, ПометкаУдаления = Ложь) Экспорт
	Если ЗначениеЗаполнено(Группировка.ПредставлениеПользовательскойНастройки) Тогда
		Возврат Группировка.ПредставлениеПользовательскойНастройки;
	КонецЕсли;

	Поля = Группировка.ПоляГруппировки; // ПоляГруппировкиКомпоновкиДанных

	Если Поля.Элементы.Количество() = 0 Тогда
		Возврат "<Детальные записи>";
	КонецЕсли;

	ПредставлениеПолей = Новый Массив;

	Для Каждого Элемент Из Поля.Элементы Цикл
		Если Не Элемент.Использование Или ТипЗнч(Элемент) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;

		ОписаниеПоля = Поля.ДоступныеПоляПолейГруппировок.НайтиПоле(Элемент.Поле);

		Если ОписаниеПоля = Неопределено Тогда
			ПометкаУдаления		= Истина;
			ПредставлениеПоля	= Строка(Элемент.Поле);
		Иначе
			ПредставлениеПоля	= ОписаниеПоля.Заголовок;
		КонецЕсли;

		Если Элемент.ТипГруппировки <> ТипГруппировкиКомпоновкиДанных.Элементы Тогда
			ПредставлениеПоля = ПредставлениеПоля + " (" + Элемент.ТипГруппировки + ")";
		КонецЕсли;

		ПредставлениеПолей.Добавить(ПредставлениеПоля);
	КонецЦикла;

	Если ПредставлениеПолей.Количество() = 0 Тогда
		Возврат "<Детальные записи>";
	КонецЕсли;

	Возврат СтрСоединить(ПредставлениеПолей, ", ");
КонецФункции

Функция сВО_ПредставлениеВыбранныхПолей(ВыбранныеПоля, Коллекция = Неопределено, ПредставлениеПолей = Неопределено) Экспорт
	Если ЗначениеЗаполнено(ВыбранныеПоля.ПредставлениеПользовательскойНастройки) Тогда
		Возврат ВыбранныеПоля.ПредставлениеПользовательскойНастройки;
	КонецЕсли;

	Если Коллекция = Неопределено Тогда
		Коллекция = ВыбранныеПоля;
	КонецЕсли;

	Если ПредставлениеПолей = Неопределено Тогда
		ПредставлениеПолей = Новый Массив;
	КонецЕсли;

	Для Каждого Элемент Из Коллекция.Элементы Цикл
		Если Не Элемент.Использование Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			ПредставлениеПолей.Добавить("Авто");
		ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			сВО_ПредставлениеВыбранныхПолей(ВыбранныеПоля, Элемент, ПредставлениеПолей);
		ИначеЕсли ЗначениеЗаполнено(Элемент.Заголовок) Тогда
			ПредставлениеПолей.Добавить(Элемент.Заголовок);
		Иначе
			ОписаниеПоля		= ВыбранныеПоля.ДоступныеПоляВыбора.НайтиПоле(Элемент.Поле); // ДоступноеПолеКомпоновкиДанных

			ПредставлениеПоля	= ?(ОписаниеПоля = Неопределено, Строка(Элемент.Поле), ОписаниеПоля.Заголовок);
			ПредставлениеПолей.Добавить(ПредставлениеПоля);
		КонецЕсли;
	КонецЦикла;

	Возврат СтрСоединить(ПредставлениеПолей, ", ");
КонецФункции

Функция сВО_ПредставлениеУсловногоОформления(УсловноеОформление) Экспорт
	ПредставлениеОформления = Новый Массив;

	Для Каждого Элемент Из УсловноеОформление.Элементы Цикл
		Если Не Элемент.Использование Тогда
			Продолжить;
		КонецЕсли;

		ПредставлениеЭлемента = ВариантыОтчетовКлиентСервер.О_ПредставлениеЭлементаУсловногоОформления(Элемент, Неопределено, "");

		Если ЗначениеЗаполнено(ПредставлениеЭлемента) Тогда
			ПредставлениеОформления.Добавить(ПредставлениеЭлемента);
		КонецЕсли;
	КонецЦикла;

	Если ПредставлениеОформления.Количество() = 0 Тогда
		Возврат "Оформление";
	КонецЕсли;

	Возврат СтрСоединить(ПредставлениеОформления, ", ");
КонецФункции

Функция сВО_ПредставлениеСортировки(Сортировка) Экспорт
	ПредставлениеСортировки = Новый Массив;

	Для Каждого Элемент Из Сортировка.Элементы Цикл
		Если Не Элемент.Использование Тогда
			Продолжить;
		КонецЕсли;

		ПредставлениеЭлемента = сВО_ПредставлениеЭлементаСортировки(Элемент);

		Если ЗначениеЗаполнено(ПредставлениеЭлемента) Тогда
			ПредставлениеСортировки.Добавить(ПредставлениеЭлемента);
		КонецЕсли;
	КонецЦикла;

	Если ПредставлениеСортировки.Количество() = 0 Тогда
		Возврат "Сортировка";
	КонецЕсли;

	Возврат СтрСоединить(ПредставлениеСортировки, ", ");
КонецФункции

Функция сВО_ПредставлениеЭлементаСортировки(Элемент) Экспорт
	Если Не Элемент.Использование Тогда
		Возврат "";
	КонецЕсли;

	Если ТипЗнч(Элемент) = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
		Возврат "Авто";
	КонецЕсли;

	Если Элемент.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр Тогда
		Возврат Строка(Элемент.Поле);
	КонецЕсли;

	Возврат СтрШаблон("%1 (убыв)", Элемент.Поле);
КонецФункции

Процедура сВО_ОпределитьИерархиюЗаголовковОтчета(РазрезСвойствЗаголовков, Заголовки)
	РазрезСвойствЗаголовков.Свернуть("Верх, Лево, Низ, Право, Имя, Расшифровка");
	РазрезСвойствЗаголовков.Сортировать("Верх, Лево");
	РазрезСвойствЗаголовков.Индексы.Добавить("Верх, Низ, Лево");

	Для Каждого Запись Из РазрезСвойствЗаголовков Цикл
		Если Запись.Расшифровка <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Верх				= Запись.Низ + 1;
		НайденныеОбласти	= РазрезСвойствЗаголовков.НайтиСтроки(Новый Структура("Верх, Лево", Верх, Запись.Лево));

		Пока НайденныеОбласти.Количество() > 0 Цикл
			СвойстваОбласти									= Заголовки[Запись.Имя];
			СвойстваОбласти.КоличествоДочернихЗаголовков	= СвойстваОбласти.КоличествоДочернихЗаголовков + 1;

			Верх				= Верх + 1;
			НайденныеОбласти	= РазрезСвойствЗаголовков.НайтиСтроки(Новый Структура("Верх, Лево", Верх, Запись.Лево));
		КонецЦикла;

		Низ					= Запись.Верх - 1;
		НайденныеОбласти	= РазрезСвойствЗаголовков.НайтиСтроки(Новый Структура("Низ, Лево", Низ, Запись.Лево));

		Пока НайденныеОбласти.Количество() > 0 Цикл
			СвойстваОбласти										= Заголовки[Запись.Имя];
			СвойстваОбласти.КоличествоРодительскихЗаголовков	= СвойстваОбласти.КоличествоРодительскихЗаголовков + 1;

			Низ					= Низ - 1;
			НайденныеОбласти	= РазрезСвойствЗаголовков.НайтиСтроки(Новый Структура("Низ, Лево", Низ, Запись.Лево));
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция сВО_ГраницыРазделовОтчета(РезультатОтчета, РазрезСвойствЗаголовков)
	Границы = Новый СписокЗначений;

	ВерхниеГраницы = РазрезСвойствЗаголовков.Скопировать();
	ВерхниеГраницы.Свернуть("Верх");
	ВерхниеГраницы.Сортировать("Верх");

	Для Каждого Запись Из ВерхниеГраницы Цикл
		Индекс = ВерхниеГраницы.Индекс(Запись);

		Если Индекс = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если (Запись.Верх - ВерхниеГраницы[Индекс - 1].Верх) > 1 Тогда
			Границы.Добавить(Макс(0, Запись.Верх - 1));
		КонецЕсли;
	КонецЦикла;

	Границы.Добавить(РезультатОтчета.ВысотаТаблицы);

	Возврат Границы;
КонецФункции

Процедура сВО_ДополнитьСвойстваЗаголовковОтчета(Форма, РезультатОтчета, Заголовки, РазрезСвойствЗаголовков, ИндексСтруктурыОтчета, ГраницыРазделов)
	ИндексСтруктурыОтчета.Индексы.Добавить("ПорядокРаздела, ПредставлениеПоля");

	ПорядокРаздела			= 1;
	ГраницаТекущегоРаздела	= 0;
	ОбработанныеПоля		= Новый Соответствие;

	Для Каждого Граница Из ГраницыРазделов Цикл
		Для Каждого Запись Из РазрезСвойствЗаголовков Цикл
			СвойстваЗаголовка = Заголовки[Запись.Имя];

			Если СвойстваЗаголовка.Верх >= ГраницаТекущегоРаздела И СвойстваЗаголовка.Верх <= Граница.Значение Тогда
				ИндексПоля = сВО_ИндексПоляПоСвойствамЗаголовка(Форма, СвойстваЗаголовка, ИндексСтруктурыОтчета, ПорядокРаздела, ОбработанныеПоля);

				Если ИндексПоля = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				ЗаполнитьЗначенияСвойств(СвойстваЗаголовка, ИндексПоля);

				ЭтоЧисло								= СвойстваЗаголовка.ТипЗначения.СодержитТип(Тип("Число"));
				СвойстваЗаголовка.ОформитьОтрицательные	= ЭтоЧисло;
				СвойстваЗаголовка.ОформитьПоложительные	= ЭтоЧисло;

				сВО_ВставитьИндикаторСортировки(ИндексПоля, СвойстваЗаголовка, РезультатОтчета.Область(Запись.Имя));
			КонецЕсли;
		КонецЦикла;

		ПорядокРаздела			= ПорядокРаздела + 1;
		ГраницаТекущегоРаздела	= Граница.Значение;
	КонецЦикла;
КонецПроцедуры

Функция сВО_ИндексПоляПоСвойствамЗаголовка(Форма, СвойстваЗаголовка, ИндексСтруктурыОтчета, ПорядокРаздела, ОбработанныеПоля)
	Поиск = Новый Структура("ПорядокРаздела, ПредставлениеПоля", ПорядокРаздела, ВРег(СвойстваЗаголовка.Текст));

	ИндексПоля = сВО_ИндексПоляПоПредставлению(ИндексСтруктурыОтчета, Поиск, ОбработанныеПоля);

	Если ИндексПоля = Неопределено Тогда
		ИндексПоля = сВО_ИндексПоляПоРасшифровке(Форма, СвойстваЗаголовка.Расшифровка, ИндексСтруктурыОтчета, Поиск, ОбработанныеПоля);
	КонецЕсли;

	Возврат ИндексПоля;
КонецФункции

Функция сВО_ИндексПоляПоПредставлению(ИндексСтруктурыОтчета, Поиск, ОбработанныеПоля)
	ПодходящееПоле = сВО_ПодходящееПоле(ИндексСтруктурыОтчета, Поиск, ОбработанныеПоля);

	Если ПодходящееПоле <> Неопределено Тогда
		Возврат ПодходящееПоле;
	КонецЕсли;

	ОбластьВладельцаСРеквизитами = СтрНайти(Поиск.ПредставлениеПоля, ",") > 0;

	Если ОбластьВладельцаСРеквизитами Тогда
		Поиск.ПредставлениеПоля = СтрРазделить(Поиск.ПредставлениеПоля, ",")[0];
	КонецЕсли;

	ПодходящееПоле = сВО_ПодходящееПоле(ИндексСтруктурыОтчета, Поиск, ОбработанныеПоля);

	Если ПодходящееПоле <> Неопределено Тогда
		Возврат ПодходящееПоле;
	КонецЕсли;

	ОписаниеЗаголовка = СтрРазделить(Поиск.ПредставлениеПоля, ".");

	ПоискРаздела	= Новый Структура("ПорядокРаздела", Поиск.ПорядокРаздела);
	НайденныеПоля	= ИндексСтруктурыОтчета.НайтиСтроки(ПоискРаздела);

	Для Каждого ИндексПоля Из НайденныеПоля Цикл
		ОписаниеПредставления = СтрРазделить(ИндексПоля.ПредставлениеПоля, ".");

		КоличествоСовпадений = 0;

		Для Каждого Фрагмент Из ОписаниеЗаголовка Цикл
			НормализованныйФрагмент = СокрЛП(Фрагмент);

			Если ОписаниеПредставления.Найти(НормализованныйФрагмент) <> Неопределено Тогда
				КоличествоСовпадений = КоличествоСовпадений + 1;
			КонецЕсли;
		КонецЦикла;

		Если ОбластьВладельцаСРеквизитами И КоличествоСовпадений = ОписаниеПредставления.Количество() Или Не ОбластьВладельцаСРеквизитами И КоличествоСовпадений = ОписаниеЗаголовка.Количество() Тогда
			Возврат ИндексПоля;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

Функция сВО_ПодходящееПоле(ИндексСтруктурыОтчета, Поиск, ОбработанныеПоля)
	НайденныеПоля = ИндексСтруктурыОтчета.НайтиСтроки(Поиск);

	Возврат сВО_ИндексПоляНеобработанный(ИндексСтруктурыОтчета, Поиск.ПредставлениеПоля, НайденныеПоля, ОбработанныеПоля);
КонецФункции

Функция сВО_ИндексПоляНеобработанный(ИндексСтруктурыОтчета, ПредставлениеПоля, НайденныеПоля, ОбработанныеПоля)
	Если НайденныеПоля.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если НайденныеПоля.Количество() = 1 Тогда
		Возврат НайденныеПоля[0];
	КонецЕсли;

	ОбработанныеИндексы = ОбработанныеПоля[ПредставлениеПоля];

	Если ОбработанныеИндексы = Неопределено Тогда
		ПодходящееПоле		= НайденныеПоля[0];

		ОбработанныеИндексы	= Новый Соответствие;
		ОбработанныеИндексы.Вставить(ИндексСтруктурыОтчета.Индекс(ПодходящееПоле), ПодходящееПоле);

		ОбработанныеПоля.Вставить(ПредставлениеПоля, ОбработанныеИндексы);

		Возврат ПодходящееПоле;
	КонецЕсли;

	ПодходящееПоле = Неопределено;

	Для Каждого НайденноеПоле Из НайденныеПоля Цикл
		ИндексПоля = ИндексСтруктурыОтчета.Индекс(НайденноеПоле);

		Если ОбработанныеИндексы[ИндексПоля] = Неопределено Тогда
			ПодходящееПоле = НайденноеПоле;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ПодходящееПоле = Неопределено Тогда
		Возврат НайденныеПоля[0];
	КонецЕсли;

	ОбработанныеИндексы.Вставить(ИндексПоля, ПодходящееПоле);
	ОбработанныеПоля.Вставить(ПредставлениеПоля, ОбработанныеИндексы);

	Возврат ПодходящееПоле;
КонецФункции

Процедура сВО_ВставитьИндикаторСортировки(ИндексПоля, СвойстваЗаголовка, Ячейка)
	Если Не ИндексПоля.ПолеСортируется Тогда
		Возврат;
	КонецЕсли;

	МинимальнаяШиринаКолонкиДляВыводаИндикатора = 5;

	Если Ячейка.ШиринаКолонки > 0 И Ячейка.ШиринаКолонки <= МинимальнаяШиринаКолонкиДляВыводаИндикатора Тогда
		Возврат;
	КонецЕсли;

	Если ИндексПоля.НаправлениеСортировки = НаправлениеСортировкиКомпоновкиДанных.Возр Тогда
		СвойстваЗаголовка.СортироватьПоВозрастанию	= Ложь;
		Ячейка.Картинка								= БиблиотекаКартинок.СортироватьСтрокиПоВозрастанию;
	ИначеЕсли ИндексПоля.НаправлениеСортировки = НаправлениеСортировкиКомпоновкиДанных.Убыв Тогда
		СвойстваЗаголовка.СортироватьПоУбыванию	= Ложь;
		Ячейка.Картинка							= БиблиотекаКартинок.СортироватьСтрокиПоУбыванию;
	КонецЕсли;

	Ячейка.РазмерКартинки					= РазмерКартинки.РеальныйРазмер;
	Ячейка.ГоризонтальноеПоложениеКартинки	= ГоризонтальноеПоложение.Право;
	Ячейка.ВертикальноеПоложениеКартинки	= ВертикальноеПоложение.Верх;
КонецПроцедуры

Функция сВО_ИндексПоляПоРасшифровке(Форма, Расшифровка, ИндексСтруктурыОтчета, Поиск, ОбработанныеПоля)
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		Возврат Неопределено;
	КонецЕсли;

	Данные = сВО_ДанныеЭлементаРасшифровки(Форма, Расшифровка);

	Если Данные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПоискПоПолю = Новый Структура;
	ПоискПоПолю.Вставить("ПорядокРаздела",	Поиск.ПорядокРаздела);
	ПоискПоПолю.Вставить("Поле",			Новый ПолеКомпоновкиДанных(Данные.Поле));

	НайденныеПоля = ИндексСтруктурыОтчета.НайтиСтроки(ПоискПоПолю);

	Если НайденныеПоля.Количество() > 0 Тогда
		Возврат НайденныеПоля[0];
	КонецЕсли;

	Поиск.ПредставлениеПоля = ВРег(Данные.Поле);

	Возврат сВО_ИндексПоляПоПредставлению(ИндексСтруктурыОтчета, Поиск, ОбработанныеПоля);
КонецФункции

Функция сВО_СтандартныйРазрезСвойствЗаголовковОтчета()
	ОписаниеЧисла	= Новый ОписаниеТипов("Число");
	ОписаниеСтроки	= Новый ОписаниеТипов("Строка");

	Свойства = Новый ТаблицаЗначений;
	Свойства.Колонки.Добавить("Верх",	ОписаниеЧисла);
	Свойства.Колонки.Добавить("Лево",	ОписаниеЧисла);
	Свойства.Колонки.Добавить("Низ",	ОписаниеЧисла);
	Свойства.Колонки.Добавить("Право",	ОписаниеЧисла);
	Свойства.Колонки.Добавить("Имя",	ОписаниеСтроки);
	Свойства.Колонки.Добавить("Расшифровка");

	Возврат Свойства;
КонецФункции

Функция сВО_СтандартныеСвойстваЗаголовкаОтчета() Экспорт
	Свойства = Новый Структура;
	Свойства.Вставить("Текст",			"");
	Свойства.Вставить("Верх",			0);
	Свойства.Вставить("Низ",			0);
	Свойства.Вставить("Лево",			0);
	Свойства.Вставить("Право",			0);
	Свойства.Вставить("Расшифровка",	Неопределено);

	Свойства.Вставить("КоличествоДочернихЗаголовков",		0);
	Свойства.Вставить("КоличествоРодительскихЗаголовков",	0);

	Свойства.Вставить("ПорядокРаздела",		0);
	Свойства.Вставить("КоличествоРазделов",	0);
	Свойства.Вставить("ПорядокГруппировки",	0);
	Свойства.Вставить("ПорядокПоля",		0);

	Свойства.Вставить("ИдентификаторНастроек",		Неопределено);
	Свойства.Вставить("ИдентификаторРаздела",		Неопределено);
	Свойства.Вставить("ИдентификаторГруппировки",	Неопределено);
	Свойства.Вставить("ИдентификаторПоля",			Неопределено);

	Свойства.Вставить("Поле",					Неопределено);
	Свойства.Вставить("ПолеСортируется",		Ложь);
	Свойства.Вставить("НаправлениеСортировки",	Неопределено);

	Свойства.Вставить("Период",		Ложь);
	Свойства.Вставить("Измерение",	Ложь);
	Свойства.Вставить("Ресурс",		Ложь);
	Свойства.Вставить("ЭтоФормула",	Ложь);

	Свойства.Вставить("ТипЗначения",					Неопределено);
	Свойства.Вставить("ТипПоля",						Неопределено);

	Свойства.Вставить("ИспользуетсяВПоляхГруппировки",	Ложь);
	Свойства.Вставить("ТипГруппировки",					Неопределено);

	Свойства.Вставить("СгруппироватьПоВыбранномуПолю",	Ложь);

	Свойства.Вставить("ВставитьПолеСлева",			Ложь);
	Свойства.Вставить("ВставитьПолеСправа",			Ложь);
	Свойства.Вставить("ВставитьГруппировкуВыше",	Ложь);
	Свойства.Вставить("ВставитьГруппировкуНиже",	Ложь);

	Свойства.Вставить("ПереместитьПолеВлево",	Ложь);
	Свойства.Вставить("ПереместитьПолеВправо",	Ложь);
	Свойства.Вставить("ПереместитьПолеВыше",	Ложь);
	Свойства.Вставить("ПереместитьПолеНиже",	Ложь);

	Свойства.Вставить("СортироватьПоВозрастанию",	Истина);
	Свойства.Вставить("СортироватьПоУбыванию",		Истина);

	Свойства.Вставить("СкрытьПоле",			Ложь);
	Свойства.Вставить("ПереименоватьПоле",	Ложь);

	Свойства.Вставить("ОформитьОтрицательные",	Ложь);
	Свойства.Вставить("ОформитьПоложительные",	Ложь);
	Свойства.Вставить("ОформитьЕще",			Ложь);

	Свойства.Вставить("ИдентификаторИндекса",	Неопределено);

	Возврат Свойства;
КонецФункции

Функция сВО_ЭтоПользовательскоеПоле(ПользовательскиеПоля, Поле)
	Для Каждого Элемент Из ПользовательскиеПоля.Элементы Цикл
		Если Элемент.ПутьКДанным = Строка(Поле) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

Функция сВО_ДанныеЭлементаРасшифровки(Форма, Расшифровка) Экспорт
	Если Не ВариантыОтчетовКлиентСервер.сВО_РежимВариантаОтчета(Форма.КлючТекущегоВарианта) Или Не Форма.НастройкиОтчета.РазрешеноИзменятьВарианты Или Не ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		Возврат Неопределено;
	КонецЕсли;

	Отчет			= Форма.Отчет;
	Документ		= Форма.ОтчетТабличныйДокумент;
	ПолеДокумента	= Форма.Элементы.ОтчетТабличныйДокумент;

	ВыделенныеОбластиДокумента = ПолеДокумента.ПолучитьВыделенныеОбласти();

	Данные				= ПолучитьИзВременногоХранилища(Форма.ОтчетДанныеРасшифровки);
	ЭлементРасшифровки	= Данные.Элементы.Получить(Расшифровка);

	Родители	= ЭлементРасшифровки.ПолучитьРодителей();
	Родитель	= ?(Родители.Количество() = 0, Неопределено, Родители[0]);

	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Или ТипЗнч(Родитель) <> Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
		ТипЭлементаРасшифровки = "Группировка";
	Иначе
		ТипЭлементаРасшифровки = "Реквизит";
	КонецЕсли;

	ДанныеЭлементаРасшифровки = Новый Структура;
	ДанныеЭлементаРасшифровки.Вставить("Тип",		ТипЭлементаРасшифровки);
	ДанныеЭлементаРасшифровки.Вставить("Настройки",	Данные.Настройки);
	ДанныеЭлементаРасшифровки.Вставить("Отбор",		сВО_ОтборЭлементаРасшифровки(ЭлементРасшифровки));
	ДанныеЭлементаРасшифровки.Вставить("Отборы",	сВО_ОтборыВыделенныхЭлементовРасшифровки(Документ, ВыделенныеОбластиДокумента, Данные));

	Поля = ЭлементРасшифровки.ПолучитьПоля();

	Если Поля.Количество() = 0 Тогда
		ДанныеЭлементаРасшифровки.Вставить("Значение", Неопределено);
		ДанныеЭлементаРасшифровки.Вставить("Значения", Неопределено);
		ДанныеЭлементаРасшифровки.Вставить("Поле", "");
	Иначе
		СвойстваПоля = Поля[0];

		ДанныеЭлементаРасшифровки.Вставить("Значение",	?(СвойстваПоля.Значение = Null, Неопределено, СвойстваПоля.Значение));
		ДанныеЭлементаРасшифровки.Вставить("Значения",	ДанныеЭлементаРасшифровки.Отборы[СвойстваПоля.Поле]);
		ДанныеЭлементаРасшифровки.Вставить("Поле",		СвойстваПоля.Поле);
	КонецЕсли;

	ДанныеЭлементаРасшифровки.Вставить("ЭтоСсылка", БазоваяПодсистемаСервер.ОН_ЭтоСсылка(ТипЗнч(ДанныеЭлементаРасшифровки.Значение)));

	ДоступныеВидыСравнения = Новый СписокЗначений;

	Если ЗначениеЗаполнено(ДанныеЭлементаРасшифровки.Поле) Тогда
		ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ДанныеЭлементаРасшифровки.Поле));

		Если ДоступноеПоле = Неопределено Тогда
			ДанныеЭлементаРасшифровки.Вставить("ТипЗначения",	Тип("Неопределено"));
			ДанныеЭлементаРасшифровки.Вставить("Ресурс",		Ложь);
		Иначе
			ДанныеЭлементаРасшифровки.Вставить("ТипЗначения",	ДоступноеПоле.ТипЗначения);
			ДанныеЭлементаРасшифровки.Вставить("Ресурс",		ДоступноеПоле.Ресурс);

			Если ДанныеЭлементаРасшифровки.Значение = Неопределено Тогда
				Область								= ПолеДокумента.ТекущаяОбласть;
				Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
					ДанныеЭлементаРасшифровки.Значение	= ДоступноеПоле.ТипЗначения.ПривестиЗначение(Область.Текст);
					ДанныеЭлементаРасшифровки.Значения	= сВО_ПриведенныеЗначенияВыделенныхОбластей(Документ, ВыделенныеОбластиДокумента, ДоступноеПоле.ТипЗначения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ДоступноеПолеОтбора = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ДанныеЭлементаРасшифровки.Поле));

		Если ДоступноеПолеОтбора <> Неопределено Тогда
			ДоступныеВидыСравнения = ДоступноеПолеОтбора.ДоступныеВидыСравнения;
		КонецЕсли;
	Иначе
		ДанныеЭлементаРасшифровки.Вставить("ТипЗначения",	Тип("Неопределено"));
		ДанныеЭлементаРасшифровки.Вставить("Ресурс",		Ложь);
	КонецЕсли;

	Если ДоступныеВидыСравнения.Количество() = 0 Тогда
		Для Каждого Вид Из ВидСравненияКомпоновкиДанных Цикл
			ДоступныеВидыСравнения.Добавить(Вид);
		КонецЦикла;
	КонецЕсли;

	Если ДоступныеВидыСравнения.НайтиПоЗначению("СнятьФильтр") = Неопределено Тогда
		ДоступныеВидыСравнения.Вставить(0, "СнятьФильтр", "Снять фильтр");
	КонецЕсли;

	Если ДоступныеВидыСравнения.НайтиПоЗначению("ФильтроватьЕще") = Неопределено Тогда
		ДоступныеВидыСравнения.Добавить("ФильтроватьЕще", "Еще...");
	КонецЕсли;

	ДанныеЭлементаРасшифровки.Вставить("ДоступныеВидыСравнения", ДоступныеВидыСравнения);

	Возврат ДанныеЭлементаРасшифровки;
КонецФункции

Функция сВО_ОтборЭлементаРасшифровки(ЭлементРасшифровки, Результат = Неопределено)
	Если Результат = Неопределено Тогда
		Результат = Новый Соответствие;
	КонецЕсли;

	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Поля = ЭлементРасшифровки.ПолучитьПоля();

		Для каждого Поле Из Поля Цикл
			Если Поле.Значение = Null Тогда
				Продолжить;
			КонецЕсли;

			Значение = Результат[Поле.Поле];

			Если Значение = Неопределено Тогда
				Результат.Вставить(Поле.Поле, Поле.Значение);

				Продолжить;
			КонецЕсли;

			Значения = ВариантыОтчетовКлиентСервер.О_ЗначенияСписком(Значение);

			Если Значения.НайтиПоЗначению(Поле.Значение) = Неопределено Тогда
				Значения.Добавить(Поле.Значение);
			КонецЕсли;

			Результат.Вставить(Поле.Поле, Значения);
		КонецЦикла;
	КонецЕсли;

	Родители = ЭлементРасшифровки.ПолучитьРодителей();

	Для Каждого Родитель Из Родители Цикл
		сВО_ОтборЭлементаРасшифровки(Родитель, Результат);
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция сВО_ОтборыВыделенныхЭлементовРасшифровки(Документ, ВыделенныеОбластиДокумента, Данные)
	Результат = Новый Соответствие;

	Для Каждого ВыделеннаяОбласть Из ВыделенныеОбластиДокумента Цикл
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;

		Для НомерСтроки = ВыделеннаяОбласть.Верх По ВыделеннаяОбласть.Низ Цикл
			Область = Документ.Область(НомерСтроки, ВыделеннаяОбласть.Лево, НомерСтроки, ВыделеннаяОбласть.Право);

			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТипЗнч(Область.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
				ЭлементРасшифровки = Данные.Элементы.Получить(Область.Расшифровка);
				сВО_ОтборЭлементаРасшифровки(ЭлементРасшифровки, Результат);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция сВО_ПриведенныеЗначенияВыделенныхОбластей(Документ, ВыделенныеОбластиДокумента, ТипЗначения)
	Результат = Новый СписокЗначений;

	Для Каждого ВыделеннаяОбласть Из ВыделенныеОбластиДокумента Цикл
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;

		Для НомерСтроки = ВыделеннаяОбласть.Верх По ВыделеннаяОбласть.Низ Цикл
			Область = Документ.Область(НомерСтроки, ВыделеннаяОбласть.Лево, НомерСтроки, ВыделеннаяОбласть.Право);

			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Значение = ТипЗначения.ПривестиЗначение(Область.Текст);

				Если Результат.НайтиПоЗначению(Значение) = Неопределено Тогда
					Результат.Добавить(Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция сВО_ИндексСтруктурыОтчета(Форма) Экспорт
	НастройкиОтчета		= Форма.НастройкиОтчета;
	СвойстваРезультата	= НастройкиОтчета.СвойстваРезультата;

	ИтоговыеНастройки	= Форма.Отчет.КомпоновщикНастроек.ПолучитьНастройки();

	КомпоновщикНастроек	= Новый КомпоновщикНастроекКомпоновкиДанных;
	О_ИнициализироватьКомпоновщикНастроек(КомпоновщикНастроек, НастройкиОтчета.АдресСхемы);
	КомпоновщикНастроек.ЗагрузитьНастройки(ИтоговыеНастройки);

	сВО_СкопироватьДополнительныеСвойстваНастроек(КомпоновщикНастроек, Форма.Отчет.КомпоновщикНастроек);

	СвойстваРезультата.ИтоговыеНастройки	= ИтоговыеНастройки;
	СвойстваРезультата.КомпоновщикНастроек	= КомпоновщикНастроек;
	СвойстваРезультата.РолиПолей			= сВО_РолиПолейОтчета(НастройкиОтчета.АдресСхемы);

	ИндексСтруктурыОтчета = Неопределено;
	Если ЭтоАдресВременногоХранилища(СвойстваРезультата.АдресИндексаСтруктурыОтчета) Тогда
		ИндексСтруктурыОтчета = ПолучитьИзВременногоХранилища(СвойстваРезультата.АдресИндексаСтруктурыОтчета);
	КонецЕсли;

	Если ИндексСтруктурыОтчета = Неопределено Или Форма.ВариантМодифицирован Тогда
		ИндексСтруктурыОтчета = сВО_ИндексСтруктурыОтчетаБезКонтекста(КомпоновщикНастроек, ИтоговыеНастройки);

		сВО_ОпределитьРолиПолей(ИндексСтруктурыОтчета, СвойстваРезультата.РолиПолей);
		сВО_ОпределитьПоляФормулы(НастройкиОтчета.АдресСхемы, ИтоговыеНастройки, ИндексСтруктурыОтчета);
		сВО_УстановитьИдентификаторыИндексаСтруктурыОтчета(ИндексСтруктурыОтчета);
		сВО_ОпределитьДоступныеДействияПолейОтчета(ИндексСтруктурыОтчета);

		СвойстваРезультата.АдресИндексаСтруктурыОтчета = ПоместитьВоВременноеХранилище(ИндексСтруктурыОтчета, Форма.УникальныйИдентификатор);
	КонецЕсли;

	СвойстваРезультата.ИндексПолей		= сВО_ИндексПолейСтруктурыОтчета(ИндексСтруктурыОтчета);
	СвойстваРезультата.ОсновныеПол		= сВО_ОсновныеПоляОтчета(Форма);
	СвойстваРезультата.МакетыОписаны	= сВО_МакетыКомпоновкиДанныхОписаны(НастройкиОтчета.АдресСхемы);

	Возврат ИндексСтруктурыОтчета;
КонецФункции

Функция сВО_ИндексСтруктурыОтчетаБезКонтекста(КомпоновщикНастроек, ИтоговыеНастройки = Неопределено) Экспорт
	Если ИтоговыеНастройки = Неопределено Тогда
		КомпоновщикНастроек.РазвернутьАвтоПоля();
		ИтоговыеНастройки = КомпоновщикНастроек.ПолучитьНастройки();
	КонецЕсли;

	ИндексСтруктурыОтчета = сВО_НовыйИндексСтруктурыОтчета();
	сВО_ИндексироватьРазделыОтчета(ИтоговыеНастройки, ИтоговыеНастройки, ИндексСтруктурыОтчета);
	сВО_ИндексироватьГруппировкиОтчета(ИтоговыеНастройки, ИндексСтруктурыОтчета);

	сВО_УдалитьНеидентифицированныеПоля(ИндексСтруктурыОтчета);
	сВО_УточнитьПорядокРазделов(ИндексСтруктурыОтчета);

	Возврат ИндексСтруктурыОтчета;
КонецФункции

Функция сВО_МакетыКомпоновкиДанныхОписаны(АдресСхемы)
	Схема = ПолучитьИзВременногоХранилища(АдресСхемы);

	Если ТипЗнч(Схема) <> Тип("СхемаКомпоновкиДанных") Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Схема.Макеты.Количество() > 0
		Или Схема.МакетыЗаголовковГруппировок.Количество() > 0
		Или Схема.МакетыГруппировок.Количество() > 0
		Или Схема.МакетыПолей.Количество() > 0
		Или Схема.МакетыПолейИтога.Количество() > 0;
КонецФункции

Процедура сВО_СкопироватьДополнительныеСвойстваНастроек(Приемник, Источник)
	ВидыНастроек = СтрРазделить("Настройки, ПользовательскиеНастройки", ", ", Ложь);

	Для Каждого ВидНастроек Из ВидыНастроек Цикл
		СвойстваИсточника = Источник[ВидНастроек].ДополнительныеСвойства;

		СвойстваПриемника = Приемник[ВидНастроек].ДополнительныеСвойства;
		СвойстваПриемника.Очистить();

		Для Каждого Свойство Из СвойстваИсточника Цикл
			СвойстваПриемника.Вставить(Свойство.Ключ, Свойство.Значение);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура сВО_ИндексироватьРазделыОтчета(ИтоговыеНастройки, Настройки, ИндексСтруктурыОтчета, ПорядокРаздела = 0)
	Для Каждого Раздел Из Настройки.Структура Цикл
		Если Не Раздел.Использование Или ТипЗнч(Раздел) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(Раздел) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			сВО_ИндексироватьРазделыОтчета(ИтоговыеНастройки, Раздел.Настройки, ИндексСтруктурыОтчета, ПорядокРаздела);
		Иначе
			ПорядокРаздела = ПорядокРаздела + 1;

			ИндексРаздела						= ИндексСтруктурыОтчета.Добавить();
			ИндексРаздела.ПорядокРаздела		= ПорядокРаздела;
			ИндексРаздела.ИдентификаторНастроек	= ИтоговыеНастройки.ПолучитьИдентификаторПоОбъекту(Настройки);
			ИндексРаздела.ИдентификаторРаздела	= Настройки.ПолучитьИдентификаторПоОбъекту(Раздел);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура сВО_ИндексироватьГруппировкиОтчета(ИтоговыеНастройки, ИндексСтруктурыОтчета)
	ИндексРазделовОтчетов = ИндексСтруктурыОтчета.Скопировать();

	Для Каждого ИндексРаздела Из ИндексРазделовОтчетов Цикл
		Настройки	= ИтоговыеНастройки.ПолучитьОбъектПоИдентификатору(ИндексРаздела.ИдентификаторНастроек);
		Раздел		= Настройки.ПолучитьОбъектПоИдентификатору(ИндексРаздела.ИдентификаторРаздела); // ГруппировкаКомпоновкиДанных, ТаблицаКомпоновкиДанных

		Если ТипЗнч(Раздел) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;

		ПорядокГруппировки	= 0;
		ПорядокПоля			= 0;

		ПоляСортировки		= Новый Соответствие;
		сВО_ПоляСортировки(Настройки, Настройки, ПоляСортировки);

		Если ТипЗнч(Раздел) = Тип("ТаблицаКомпоновкиДанных") Тогда
			сВО_ИндексироватьГруппировкиРазделаОтчета(ИндексСтруктурыОтчета, ИндексРаздела, Настройки, Раздел.Строки, ПорядокГруппировки, ПорядокПоля, ПоляСортировки);

			сВО_ИндексироватьГруппировкиРазделаОтчета(ИндексСтруктурыОтчета, ИндексРаздела, Настройки, Раздел.Колонки, ПорядокГруппировки, ПорядокПоля, ПоляСортировки);
		Иначе
			ИндексГруппировки = сВО_ИндексГруппировкиОтчета(ИндексСтруктурыОтчета, ИндексРаздела, Настройки, Раздел, ПорядокГруппировки);

			сВО_ПоляСортировки(Раздел, Настройки, ПоляСортировки);

			сВО_ИндексироватьПоляГруппировкиОтчета(ИндексСтруктурыОтчета, ИндексГруппировки, Настройки, Раздел, ПорядокПоля, ПоляСортировки);
			сВО_ИндексироватьГруппировкиРазделаОтчета(ИндексСтруктурыОтчета, ИндексРаздела, Настройки, Раздел.Структура, ПорядокГруппировки, ПорядокПоля, ПоляСортировки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура сВО_ИндексироватьГруппировкиРазделаОтчета(ИндексСтруктурыОтчета, ИндексРаздела, Настройки, Группировки, ПорядокГруппировки, ПорядокПоля, ПоляСортировки = Неопределено)
	Для Каждого Элемент Из Группировки Цикл
		Если Не Элемент.Использование Тогда
			Продолжить;
		КонецЕсли;

		ТипЭлемента = ТипЗнч(Элемент);

		Если ТипЭлемента = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			сВО_ИндексироватьГруппировкиРазделаОтчета(ИндексСтруктурыОтчета, ИндексРаздела, Элемент.Настройки, Элемент.Настройки.Структура, ПорядокГруппировки, ПорядокПоля, ПоляСортировки);
		ИначеЕсли ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") Тогда
			сВО_ИндексироватьГруппировкиРазделаОтчета(ИндексСтруктурыОтчета, ИндексРаздела, Настройки, Элемент.Строки, ПорядокГруппировки, ПорядокПоля, ПоляСортировки);

			сВО_ИндексироватьГруппировкиРазделаОтчета(ИндексСтруктурыОтчета, ИндексРаздела, Настройки, Элемент.Колонки, ПорядокГруппировки, ПорядокПоля, ПоляСортировки);
		ИначеЕсли ТипЭлемента <> Тип("ДиаграммаКомпоновкиДанных") Тогда
			сВО_ПоляСортировки(Элемент, Настройки, ПоляСортировки);

			ИндексГруппировки = сВО_ИндексГруппировкиОтчета(ИндексСтруктурыОтчета, ИндексРаздела, Настройки, Элемент, ПорядокГруппировки);

			сВО_ИндексироватьПоляГруппировкиОтчета(ИндексСтруктурыОтчета, ИндексГруппировки, Настройки, Элемент, ПорядокПоля, ПоляСортировки);
			сВО_ИндексироватьГруппировкиРазделаОтчета(ИндексСтруктурыОтчета, ИндексРаздела, Настройки, Элемент.Структура, ПорядокГруппировки, ПорядокПоля, ПоляСортировки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция сВО_ПоляСортировки(Группировка, Настройки, ПоляСортировки = Неопределено, Замещать = Истина)
	Если ПоляСортировки = Неопределено Тогда
		ПоляСортировки = Новый Соответствие;
	КонецЕсли;

	ТипГруппировки = ТипЗнч(Группировка);

	Если ТипГруппировки <> Тип("НастройкиКомпоновкиДанных") И ТипГруппировки <> Тип("ГруппировкаКомпоновкиДанных") И ТипГруппировки <> Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		Возврат ПоляСортировки;
	КонецЕсли;

	ЭлементыСортировки = Группировка.Порядок.Элементы;

	Для Каждого Элемент Из ЭлементыСортировки Цикл
		Если Не Элемент.Использование Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(Элемент) = Тип("АвтоЭлементПорядкаКомпоновкиДанных") И ТипГруппировки <> Тип("НастройкиКомпоновкиДанных") Тогда
			сВО_ПоляСортировки(Настройки, Настройки, ПоляСортировки, Ложь);
		ИначеЕсли ТипЗнч(Элемент) <> Тип("АвтоЭлементПорядкаКомпоновкиДанных") И (Замещать Или ПоляСортировки[Элемент.Поле] = Неопределено) Тогда
			ПоляСортировки.Вставить(Элемент.Поле, Элемент.ТипУпорядочивания);
		КонецЕсли;
	КонецЦикла;

	Возврат ПоляСортировки;
КонецФункции

Функция сВО_ИндексГруппировкиОтчета(ИндексСтруктурыОтчета, ИндексРаздела, Настройки, Группировка, ПорядокГруппировки)
	ПорядокГруппировки = ПорядокГруппировки + 1;

	ИндексГруппировки = ИндексСтруктурыОтчета.Добавить();
	ЗаполнитьЗначенияСвойств(ИндексГруппировки, ИндексРаздела);

	ИндексГруппировки.ПорядокГруппировки				= ПорядокГруппировки;
	ИндексГруппировки.ИдентификаторГруппировки			= Настройки.ПолучитьИдентификаторПоОбъекту(Группировка);
	ИндексГруппировки.ПредставлениеГруппировки			= сВО_ПредставлениеПолейГруппировки(Группировка);
	ИндексГруппировки.СодержитРодительскиеГруппировки	= сВО_СодержитРодительскиеГруппировки(Группировка);
	ИндексГруппировки.СодержитДочерниеГруппировки		= сВО_СодержитДочерниеГруппировки(Группировка);

	Возврат ИндексГруппировки;
КонецФункции

Функция сВО_СодержитРодительскиеГруппировки(Группировка)
	ТипРодителя = ТипЗнч(Группировка.Родитель);

	Возврат ТипРодителя = Тип("ГруппировкаКомпоновкиДанных") Или ТипРодителя = Тип("ГруппировкаТаблицыКомпоновкиДанных")
КонецФункции

Функция сВО_СодержитДочерниеГруппировки(Группировка)
	Для Каждого Элемент Из Группировка.Структура Цикл
		ТипЭлемента = ТипЗнч(Элемент);

		Если ТипЭлемента <> Тип("ГруппировкаКомпоновкиДанных") И ТипЭлемента <> Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;

		Если Элемент.Использование Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

Процедура сВО_ИндексироватьПоляГруппировкиОтчета(ИндексСтруктурыОтчета, ИндексГруппировки, Настройки, Группировка, ПорядокПоля, ПоляСортировки)
	ИспользуемыеПоляГруппировки = Новый Соответствие;

	ИспользуетсяАвтоПоле	= сВО_ИспользуетсяАвтоПоле(Группировка.Выбор);
	ИспользуемыеНастройки	= сВО_ИспользуемыеНастройкиГруппировкиОтчета(Настройки, Группировка);

	ПоляГруппировки = Группировка.ПоляГруппировки;

	Для Каждого Элемент Из ПоляГруппировки.Элементы Цикл
		Если ТипЗнч(Элемент) <> Тип("ПолеГруппировкиКомпоновкиДанных") Или Не Элемент.Использование Тогда
			Продолжить;
		КонецЕсли;

		ИспользуемыеПоляГруппировки.Вставить(Элемент.Поле, Элемент);

		Если ИспользуетсяАвтоПоле И Не ВариантыОтчетовКлиентСервер.сВО_ПолеСодержитсяВГруппировкеОтчета(Группировка.Выбор, Элемент.Поле) И Не ВариантыОтчетовКлиентСервер.сВО_ПолеСодержитсяВГруппировкеОтчета(ИспользуемыеНастройки.Выбор, Элемент.Поле) Тогда
			сВО_ДобавитьПолеОтчетаВИндекс(ИндексСтруктурыОтчета, ИндексГруппировки, ПоляГруппировки, Элемент, ПорядокПоля, ПоляСортировки, ИспользуемыеПоляГруппировки);
		КонецЕсли;
	КонецЦикла;

	сВО_ИндексироватьВыбранныеПоляГруппировкиОтчета(ИндексСтруктурыОтчета, ИндексГруппировки, Настройки, Группировка, ПорядокПоля, ПоляСортировки, ИспользуемыеПоляГруппировки);
КонецПроцедуры

Функция сВО_ИспользуетсяАвтоПоле(Поля)
	Для Каждого Элемент Из Поля.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Или ТипЗнч(Элемент) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
			Возврат Элемент.Использование;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

Процедура сВО_ИндексироватьВыбранныеПоляГруппировкиОтчета(ИндексСтруктурыОтчета, ИндексГруппировки, Настройки, Группировка, ПорядокПоля, ПоляСортировки, ИспользуемыеПоляГруппировки, Поля = Неопределено, Родитель = Неопределено)
	Если Поля = Неопределено Тогда
		Поля = Группировка.Выбор;
	КонецЕсли;

	Если Родитель = Неопределено Тогда
		Родитель = Группировка.Выбор;
	КонецЕсли;

	Для Каждого Элемент Из Поля.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			сВО_ИндексироватьВыбранныеПоляНастроекОтчета(ИндексСтруктурыОтчета, ИндексГруппировки, Настройки, Группировка, ПорядокПоля, ПоляСортировки, ИспользуемыеПоляГруппировки);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			сВО_ИндексироватьВыбранныеПоляГруппировкиОтчета(ИндексСтруктурыОтчета, ИндексГруппировки, Настройки, Группировка, ПорядокПоля, ПоляСортировки, ИспользуемыеПоляГруппировки, Элемент, Родитель);
		ИначеЕсли сВО_РазрешеноИспользоватьПолеВГруппировке(Группировка, Элемент.Поле) Тогда
			сВО_ДобавитьПолеОтчетаВИндекс(ИндексСтруктурыОтчета, ИндексГруппировки, Родитель, Элемент, ПорядокПоля, ПоляСортировки, ИспользуемыеПоляГруппировки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура сВО_ИндексироватьВыбранныеПоляНастроекОтчета(ИндексСтруктурыОтчета, ИндексГруппировки, Настройки, Группировка, ПорядокПоля, ПоляСортировки, ИспользуемыеПоляГруппировки, Поля = Неопределено, Родитель = Неопределено)
	ИспользуемыеНастройки = сВО_ИспользуемыеНастройкиГруппировкиОтчета(Настройки, Группировка);

	Если Поля = Неопределено Тогда
		Поля = ИспользуемыеНастройки.Выбор;
	КонецЕсли;

	Если Родитель = Неопределено Тогда
		Родитель = ИспользуемыеНастройки.Выбор;
	КонецЕсли;

	сВО_ПоляСортировки(Группировка, Настройки, ПоляСортировки);

	Для Каждого Элемент Из Поля.Элементы Цикл
		ТипЭлемента = ТипЗнч(Элемент);

		Если ТипЭлемента = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			сВО_ИндексироватьВыбранныеПоляНастроекОтчета(ИндексСтруктурыОтчета, ИндексГруппировки, Настройки, Группировка, ПорядокПоля, ПоляСортировки, ИспользуемыеПоляГруппировки, Элемент, Родитель);
		ИначеЕсли ТипЭлемента <> Тип("АвтоВыбранноеПолеКомпоновкиДанных") И сВО_РазрешеноИспользоватьПолеВГруппировке(Группировка, Элемент.Поле) И Не ВариантыОтчетовКлиентСервер.сВО_ПолеСодержитсяВГруппировкеОтчета(Группировка.Выбор, Элемент.Поле, Ложь) Тогда
			сВО_ДобавитьПолеОтчетаВИндекс(ИндексСтруктурыОтчета, ИндексГруппировки, Родитель, Элемент, ПорядокПоля, ПоляСортировки, ИспользуемыеПоляГруппировки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция сВО_РазрешеноИспользоватьПолеВГруппировке(Группировка, Поле)
	Элементы						= Группировка.ПоляГруппировки.Элементы;
	ЭтоГруппировкаДетальныхЗаписей	= (Элементы.Количество() = 0);

	Если ЭтоГруппировкаДетальныхЗаписей И (ВариантыОтчетовКлиентСервер.сВО_ПолеСодержитсяВГруппировкеОтчета(Группировка.Выбор, Поле) Или Не ВариантыОтчетовКлиентСервер.сВО_ПолеИспользуетсяВРодительскихГруппировкахОтчета(Группировка.Родитель, Поле)) Тогда
		Возврат Истина;
	КонецЕсли;

	ДоступноеПоле = Группировка.Выбор.ДоступныеПоляВыбора.НайтиПоле(Поле);

	Если ДоступноеПоле = Неопределено Тогда
		ДоступноеПоле = Группировка.ПоляГруппировки.ДоступныеПоляПолейГруппировок.НайтиПоле(Поле);
	КонецЕсли;

	Если ДоступноеПоле <> Неопределено И ДоступноеПоле.Ресурс Тогда
		Возврат Истина;
	КонецЕсли;

	Для Каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ПолеГруппировкиКомпоновкиДанных") И Элемент.Использование И (Элемент.Поле = Поле Или СтрНайти(Строка(Элемент.Поле), Строка(Поле)) > 0 Или СтрНайти(Строка(Поле), Строка(Элемент.Поле)) > 0) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

Функция сВО_ИспользуемыеНастройкиГруппировкиОтчета(Настройки, Группировка)
	Если ТипЗнч(Группировка.Родитель) = Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат Группировка.Родитель;
	КонецЕсли;

	Возврат Настройки;
КонецФункции

Процедура сВО_ДобавитьПолеОтчетаВИндекс(ИндексСтруктурыОтчета, ИндексГруппировки, Родитель, Поле, ПорядокПоля, ПоляСортировки, ИспользуемыеПоляГруппировки)
	Если Не Поле.Использование Тогда
		Возврат;
	КонецЕсли;

	ОписаниеПоля = сВО_ОписаниеПоляОтчета(Родитель, Поле, ИспользуемыеПоляГруппировки);

	Если ОписаниеПоля.Ресурс И СтрНайти(ИндексГруппировки.ИдентификаторГруппировки, "/row/") > 0 Тогда
		Возврат;
	КонецЕсли;

	Поиск		= Новый Структура("ПорядокРаздела, ПорядокГруппировки, Поле");
	ЗаполнитьЗначенияСвойств(Поиск, ИндексГруппировки);
	Поиск.Поле	= Поле.Поле;

	НайденныеИндексыПоля = ИндексСтруктурыОтчета.НайтиСтроки(Поиск);

	Если НайденныеИндексыПоля.Количество() > 0 Тогда
		ИндексПоля				= НайденныеИндексыПоля[0];
	Иначе
		ПорядокПоля				= ПорядокПоля + 1;

		ИндексПоля				= ИндексСтруктурыОтчета.Добавить();
		ЗаполнитьЗначенияСвойств(ИндексПоля, ИндексГруппировки);
		ИндексПоля.ПорядокПоля	= ПорядокПоля;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ИндексПоля, ОписаниеПоля);

	ИндексПоля.ПредставлениеПоля		= ВРег(ИндексПоля.ПредставлениеПоля);
	ИндексПоля.НаправлениеСортировки	= ПоляСортировки[Поле.Поле];
	ИндексПоля.ПолеСортируется			= (ИндексПоля.НаправлениеСортировки <> Неопределено);
КонецПроцедуры

Функция сВО_ОписаниеПоляОтчета(Родитель, Поле, ИспользуемыеПоляГруппировки)
	ОписаниеПоля = Новый Структура;
	ОписаниеПоля.Вставить("Поле",							Поле.Поле);
	ОписаниеПоля.Вставить("ИдентификаторПоля",				Родитель.ПолучитьИдентификаторПоОбъекту(Поле));
	ОписаниеПоля.Вставить("ПредставлениеПоля",				Строка(Поле.Поле));
	ОписаниеПоля.Вставить("ТипПоля",						ТипЗнч(Поле));
	ОписаниеПоля.Вставить("ТипЗначения",					Новый ОписаниеТипов("Неопределено"));
	ОписаниеПоля.Вставить("Ресурс",							Ложь);

	ПолеГруппировки	= ИспользуемыеПоляГруппировки[Поле.Поле];
	ТипГруппировки	= ?(ПолеГруппировки = Неопределено, ТипГруппировкиКомпоновкиДанных.Элементы, ПолеГруппировки.ТипГруппировки);

	ОписаниеПоля.Вставить("ИспользуетсяВПоляхГруппировки",	ПолеГруппировки <> Неопределено);
	ОписаниеПоля.Вставить("ТипГруппировки",					ТипГруппировки);

	ДоступноеПоле = Неопределено;

	Если ОписаниеПоля.ТипПоля = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
		ДоступноеПоле = Родитель.ДоступныеПоляПолейГруппировок.НайтиПоле(Поле.Поле);
	ИначеЕсли ОписаниеПоля.ТипПоля = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
		ДоступноеПоле = Родитель.ДоступныеПоляВыбора.НайтиПоле(Поле.Поле);
	КонецЕсли;

	Если ДоступноеПоле <> Неопределено Тогда
		ОписаниеПоля.ПредставлениеПоля = ДоступноеПоле.Заголовок;
		ОписаниеПоля.Ресурс = ДоступноеПоле.Ресурс;
		ОписаниеПоля.ТипЗначения = ДоступноеПоле.ТипЗначения;
	КонецЕсли;

	Если ОписаниеПоля.ТипПоля = Тип("ВыбранноеПолеКомпоновкиДанных") И ЗначениеЗаполнено(Поле.Заголовок) Тогда
		ОписаниеПоля.ПредставлениеПоля = Поле.Заголовок;
	КонецЕсли;

	Возврат ОписаниеПоля;
КонецФункции

Процедура сВО_УдалитьНеидентифицированныеПоля(ИндексСтруктурыОтчета)
	НайденныеЗаписи = ИндексСтруктурыОтчета.НайтиСтроки(Новый Структура("ИдентификаторПоля", Неопределено));
	Для Каждого Запись Из НайденныеЗаписи Цикл
		ИндексСтруктурыОтчета.Удалить(Запись);
	КонецЦикла;
КонецПроцедуры

Процедура сВО_УточнитьПорядокРазделов(ИндексСтруктурыОтчета)
	ИндексСтруктурыОтчета.Сортировать("ПорядокРаздела, ПорядокГруппировки, ПорядокПоля");

	Разделы = ИндексСтруктурыОтчета.Скопировать();
	Разделы.Свернуть("ПорядокРаздела");

	Поиск = Новый Структура("ПорядокРаздела");

	Для ПорядокРаздела = 1 По Разделы.Количество() Цикл
		Поиск.ПорядокРаздела	= Разделы[ПорядокРаздела - 1].ПорядокРаздела;
		НайденныеЗаписи			= ИндексСтруктурыОтчета.НайтиСтроки(Поиск);

		Для Каждого Запись Из НайденныеЗаписи Цикл
			Запись.ПорядокРаздела = ПорядокРаздела;
		КонецЦикла;
	КонецЦикла;

	ИндексСтруктурыОтчета.ЗаполнитьЗначения(Разделы.Количество(), "КоличествоРазделов");
КонецПроцедуры

Процедура сВО_ОпределитьРолиПолей(ИндексСтруктурыОтчета, РолиПолей)
	Для Каждого Запись Из ИндексСтруктурыОтчета Цикл
		Запись.Период		= (РолиПолей.Периоды[Запись.Поле] <> Неопределено);
		Запись.Измерение	= (РолиПолей.Измерения[Запись.Поле] <> Неопределено);
	КонецЦикла;
КонецПроцедуры

Функция сВО_РолиПолейОтчета(АдресСхемы)
	РолиПолей = Новый Структура;
	РолиПолей.Вставить("Периоды",	Новый Соответствие);
	РолиПолей.Вставить("Измерения",	Новый Соответствие);
	РолиПолей.Вставить("Остатки",	Новый Соответствие);

	Схема = ПолучитьИзВременногоХранилища(АдресСхемы);

	Для Каждого НаборДанных Из Схема.НаборыДанных Цикл
		Для Каждого Поле Из НаборДанных.Поля Цикл
			Если ТипЗнч(Поле) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных") Или ТипЗнч(Поле) = Тип("ВложенныйНаборДанныхСхемыКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;

			Если Поле.Роль.НомерПериода > 0 Тогда
				РолиПолей.Периоды.Вставить(Новый ПолеКомпоновкиДанных(Поле.Поле),	сВО_ОписаниеРолиПоляОтчета(Поле.Роль));
			ИначеЕсли Поле.Роль.Измерение Тогда
				РолиПолей.Измерения.Вставить(Новый ПолеКомпоновкиДанных(Поле.Поле),	сВО_ОписаниеРолиПоляОтчета(Поле.Роль));
			ИначеЕсли Поле.Роль.Остаток Тогда
				РолиПолей.Остатки.Вставить(Новый ПолеКомпоновкиДанных(Поле.Поле),	сВО_ОписаниеРолиПоляОтчета(Поле.Роль));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат РолиПолей;
КонецФункции

Функция сВО_ОписаниеРолиПоляОтчета(Роль)
	ОписаниеРоли = Новый Структура("ВыражениеВидаСчета, ГруппаОстатка, ИгнорироватьЗначенияNULL, Измерение,
		|НомерПериода, Обязательное, Остаток, ПолеСчета, РеквизитИзмерения, РодительскоеИзмерение, Счет");

	ЗаполнитьЗначенияСвойств(ОписаниеРоли, Роль);

	ОписаниеРоли.Вставить("ТипБухгалтерскогоОстатка",	Строка(Роль.ТипБухгалтерскогоОстатка));
	ОписаниеРоли.Вставить("РодительскоеИзмерение",		Строка(Роль.РодительскоеИзмерение));
	ОписаниеРоли.Вставить("ТипПериода",					Строка(Роль.ТипПериода));

	Возврат ОписаниеРоли;
КонецФункции

Процедура сВО_УстановитьИдентификаторыИндексаСтруктурыОтчета(ИндексСтруктурыОтчета)
	Для Каждого Индекс Из ИндексСтруктурыОтчета Цикл
		Индекс.ИдентификаторИндекса = Новый УникальныйИдентификатор();
	КонецЦикла;

	ИндексСтруктурыОтчета.Индексы.Добавить("ИдентификаторИндекса");
КонецПроцедуры

Процедура сВО_ОпределитьДоступныеДействияПолейОтчета(ИндексСтруктурыОтчета)
	Разделы			= ИндексСтруктурыОтчета.Скопировать();
	Разделы.Свернуть("ПорядокРаздела");
	ПорядокРазделов	= Разделы.ВыгрузитьКолонку("ПорядокРаздела");

	Для Каждого ПорядокРаздела Из ПорядокРазделов Цикл
		сВО_ОпределитьДоступныеДействияПолейРазделаОтчета(ИндексСтруктурыОтчета, ПорядокРаздела);
		сВО_ОпределитьДоступныеДействияПолейРазделаОтчета(ИндексСтруктурыОтчета, ПорядокРаздела, Истина);
	КонецЦикла;
КонецПроцедуры

Процедура сВО_ОпределитьДоступныеДействияПолейРазделаОтчета(ИндексСтруктурыОтчета, ПорядокРаздела, ЭтоРесурс = Ложь)
	ПоискПолейРаздела	= Новый Структура("ПорядокРаздела, Ресурс", ПорядокРаздела, ЭтоРесурс);
	ПоляГруппировок		= ИндексСтруктурыОтчета.Скопировать(ПоискПолейРаздела);

	ПоискПолейГруппировки = Новый Структура("ПорядокГруппировки");

	Группировки			= ПоляГруппировок.Скопировать();
	Группировки.Свернуть("ПорядокГруппировки");
	ПорядокГруппировок	= Группировки.ВыгрузитьКолонку("ПорядокГруппировки");

	Для Каждого ПорядокГруппировки Из ПорядокГруппировок Цикл
		ПоискПолейГруппировки.ПорядокГруппировки	= ПорядокГруппировки;
		ПоляГруппировки								= ПоляГруппировок.Скопировать(ПоискПолейГруппировки);
		ПоляГруппировки.Сортировать("ПорядокПоля");

		ПоискПолейГруппировки.ПорядокГруппировки	= ПорядокГруппировки - 1;
		ПоляГруппировкиВыше							= ПоляГруппировок.Скопировать(ПоискПолейГруппировки);

		ПоискПолейГруппировки.ПорядокГруппировки	= ПорядокГруппировки + 1;
		ПоляГруппировкиНиже							= ПоляГруппировок.Скопировать(ПоискПолейГруппировки);

		Для Каждого ПолеГруппировки Из ПоляГруппировки Цикл
			ЭтоПолеГруппировкиКолонки = СтрНайти(ПолеГруппировки.ИдентификаторГруппировки, "/column/") > 0 И ПолеГруппировки.ИспользуетсяВПоляхГруппировки;

			Индекс									= ИндексСтруктурыОтчета.Найти(ПолеГруппировки.ИдентификаторИндекса, "ИдентификаторИндекса");
			Индекс.СгруппироватьПоВыбранномуПолю	= Не ЭтоПолеГруппировкиКолонки;
			Индекс.ВставитьПолеСлева				= Не ЭтоПолеГруппировкиКолонки;
			Индекс.ВставитьПолеСправа				= Не ЭтоПолеГруппировкиКолонки;
			Индекс.ВставитьГруппировкуВыше			= Не ЭтоПолеГруппировкиКолонки И Не ЭтоРесурс;
			Индекс.ВставитьГруппировкуНиже			= Не ЭтоПолеГруппировкиКолонки И Не ЭтоРесурс;

			Индекс.ПереместитьПолеВыше				= Не ЭтоПолеГруппировкиКолонки И Не ЭтоРесурс И Индекс.СодержитРодительскиеГруппировки И ПоляГруппировкиВыше.Найти(Не ПолеГруппировки.Период, "Период") = Неопределено;

			Индекс.ПереместитьПолеНиже				= Не ЭтоПолеГруппировкиКолонки И Не ЭтоРесурс И Индекс.СодержитДочерниеГруппировки И ПоляГруппировкиНиже.Найти(Не ПолеГруппировки.Период, "Период") = Неопределено;
			Если Не ЭтоПолеГруппировкиКолонки И ПоляГруппировки.Индекс(ПолеГруппировки) > 0 Тогда
				Индекс.ПереместитьПолеВлево = Истина;
			КонецЕсли;

			Если Не ЭтоПолеГруппировкиКолонки И ПоляГруппировки.Индекс(ПолеГруппировки) < ПоляГруппировки.Количество() - 1 Тогда
				Индекс.ПереместитьПолеВправо = Истина;
			КонецЕсли;

			Индекс.СкрытьПоле						= Не ЭтоПолеГруппировкиКолонки;
			Индекс.ПереименоватьПоле				= Не ЭтоПолеГруппировкиКолонки;
			Индекс.ОформитьЕще						= Не ЭтоПолеГруппировкиКолонки;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция сВО_ИндексПолейСтруктурыОтчета(ИндексСтруктурыОтчета)
	ИндексПолей = Новый Соответствие;

	Разделы = ИндексСтруктурыОтчета.Скопировать();
	Разделы.Свернуть("ПорядокРаздела");

	ПорядокРазделов = Разделы.ВыгрузитьКолонку("ПорядокРаздела");

	ПоискГруппировок	= Новый Структура("ПорядокРаздела");
	ПоискПоля			= Новый Структура("ПорядокРаздела, ПорядокГруппировки");

	Для Каждого ПорядокРаздела Из ПорядокРазделов Цикл
		ПоискГруппировок.ПорядокРаздела	= ПорядокРаздела;
		Группировки						= ИндексСтруктурыОтчета.Скопировать(ПоискГруппировок);
		Группировки.Свернуть("ПорядокГруппировки");

		ПорядокГруппировок = Группировки.ВыгрузитьКолонку("ПорядокГруппировки");

		ИндексПолейРаздела = ИндексПолей[ПорядокРаздела];
		Если ИндексПолейРаздела = Неопределено Тогда
			ИндексПолейРаздела = Новый Соответствие;
		КонецЕсли;

		Для Каждого ПорядокГруппировки Из ПорядокГруппировок Цикл
			ПоискПоля.ПорядокРаздела		= ПорядокРаздела;
			ПоискПоля.ПорядокГруппировки	= ПорядокГруппировки;
			ПоляГруппировки					= ИндексСтруктурыОтчета.НайтиСтроки(ПоискПоля);

			ИндексПолейГруппировки			= ИндексПолейРаздела[ПорядокГруппировки];
			Если ИндексПолейГруппировки = Неопределено Тогда
				ИндексПолейГруппировки = Новый Соответствие;
			КонецЕсли;

			Для Каждого ПолеГруппировки Из ПоляГруппировки Цикл
				СвойстваПоля = сВО_СтандартныеСвойстваПоляОтчета();
				ЗаполнитьЗначенияСвойств(СвойстваПоля, ПолеГруппировки);

				ИндексПолейГруппировки.Вставить(ПолеГруппировки.Поле, СвойстваПоля);
			КонецЦикла;

			ИндексПолейРаздела.Вставить(ПорядокГруппировки, ИндексПолейГруппировки);
		КонецЦикла;

		ИндексПолей.Вставить(ПорядокРаздела, ИндексПолейРаздела);
	КонецЦикла;

	Возврат ИндексПолей;
КонецФункции

Функция сВО_ОсновныеПоляОтчета(Форма)
	ОсновныеПоля = Новый Массив;

	// Локальное переопределение для отчета.
	Если Форма.НастройкиОтчета.События.ПриОпределенииОсновныхПолей Тогда
		Отчет = О_ОтчетОбъект(Форма.НастройкиОтчета.ПолноеИмя);
		Отчет.ПриОпределенииОсновныхПолей(Форма, ОсновныеПоля);
	КонецЕсли;

	Возврат ОсновныеПоля;
КонецФункции

Функция сВО_НовыйИндексСтруктурыОтчета() Экспорт
	ОписаниеЧисла			= Новый ОписаниеТипов("Число");
	ОписаниеСтроки			= Новый ОписаниеТипов("Строка");
	ОписаниеПризнака		= Новый ОписаниеТипов("Булево");
	ОписаниеПоля			= Новый ОписаниеТипов("ПолеКомпоновкиДанных");
	ОписаниеТипов			= Новый ОписаниеТипов("ОписаниеТипов");
	ОписаниеТипа			= Новый ОписаниеТипов("Тип");
	ОписаниеИдентификатора	= Новый ОписаниеТипов("УникальныйИдентификатор");
	ОписаниеТипаГруппировки	= Новый ОписаниеТипов("ТипГруппировкиКомпоновкиДанных");

	Индекс = Новый ТаблицаЗначений;
	Индекс.Колонки.Добавить("ПорядокРаздела",		ОписаниеЧисла);
	Индекс.Колонки.Добавить("КоличествоРазделов",	ОписаниеЧисла);
	Индекс.Колонки.Добавить("ПорядокГруппировки",	ОписаниеЧисла);
	Индекс.Колонки.Добавить("ПорядокПоля",			ОписаниеЧисла);

	Индекс.Колонки.Добавить("ИдентификаторНастроек");
	Индекс.Колонки.Добавить("ИдентификаторРаздела");
	Индекс.Колонки.Добавить("ИдентификаторГруппировки");
	Индекс.Колонки.Добавить("ИдентификаторПоля");

	Индекс.Колонки.Добавить("Поле",								ОписаниеПоля);
	Индекс.Колонки.Добавить("ТипПоля",							ОписаниеТипа);

	Индекс.Колонки.Добавить("ИспользуетсяВПоляхГруппировки",	ОписаниеПризнака);
	Индекс.Колонки.Добавить("ТипГруппировки",					ОписаниеТипаГруппировки);

	Индекс.Колонки.Добавить("ПредставлениеГруппировки",			ОписаниеСтроки);
	Индекс.Колонки.Добавить("ПредставлениеПоля",				ОписаниеСтроки);

	Индекс.Колонки.Добавить("Период",							ОписаниеПризнака);
	Индекс.Колонки.Добавить("Измерение",						ОписаниеПризнака);
	Индекс.Колонки.Добавить("Ресурс",							ОписаниеПризнака);
	Индекс.Колонки.Добавить("ЭтоФормула",						ОписаниеПризнака);

	Индекс.Колонки.Добавить("ТипЗначения",						ОписаниеТипов);
	Индекс.Колонки.Добавить("ПолеСортируется",					ОписаниеПризнака);
	Индекс.Колонки.Добавить("НаправлениеСортировки");

	Индекс.Колонки.Добавить("СгруппироватьПоВыбранномуПолю",	ОписаниеПризнака);

	Индекс.Колонки.Добавить("ВставитьПолеСлева",				ОписаниеПризнака);
	Индекс.Колонки.Добавить("ВставитьПолеСправа",				ОписаниеПризнака);
	Индекс.Колонки.Добавить("ВставитьГруппировкуВыше",			ОписаниеПризнака);
	Индекс.Колонки.Добавить("ВставитьГруппировкуНиже",			ОписаниеПризнака);

	Индекс.Колонки.Добавить("ПереместитьПолеВлево",				ОписаниеПризнака);
	Индекс.Колонки.Добавить("ПереместитьПолеВправо",			ОписаниеПризнака);
	Индекс.Колонки.Добавить("ПереместитьПолеВыше",				ОписаниеПризнака);
	Индекс.Колонки.Добавить("ПереместитьПолеНиже",				ОписаниеПризнака);

	Индекс.Колонки.Добавить("СкрытьПоле",						ОписаниеПризнака);
	Индекс.Колонки.Добавить("ПереименоватьПоле",				ОписаниеПризнака);

	Индекс.Колонки.Добавить("ОформитьОтрицательные",			ОписаниеПризнака);
	Индекс.Колонки.Добавить("ОформитьПоложительные",			ОписаниеПризнака);
	Индекс.Колонки.Добавить("ОформитьЕще",						ОписаниеПризнака);

	Индекс.Колонки.Добавить("СодержитРодительскиеГруппировки",	ОписаниеПризнака);
	Индекс.Колонки.Добавить("СодержитДочерниеГруппировки",		ОписаниеПризнака);

	Индекс.Колонки.Добавить("ИдентификаторИндекса",				ОписаниеИдентификатора);

	Возврат Индекс;
КонецФункции

Функция сВО_СтандартныеСвойстваПоляОтчета()
	Индекс = Новый Структура;
	Индекс.Вставить("ПорядокПоля",				0);
	Индекс.Вставить("ИдентификаторПоля",		Неопределено);
	Индекс.Вставить("ПредставлениеПоля",		"");

	Индекс.Вставить("ПолеСортируется",			Ложь);
	Индекс.Вставить("НаправлениеСортировки",	Неопределено);

	Индекс.Вставить("Ресурс",					Ложь);
	Индекс.Вставить("ТипЗначения",				Неопределено);
	Индекс.Вставить("ТипПоля",					Неопределено);

	Индекс.Вставить("ИдентификаторНастроек",	Неопределено);
	Индекс.Вставить("ИдентификаторРаздела",		Неопределено);
	Индекс.Вставить("ИдентификаторГруппировки",	Неопределено);

	Индекс.Вставить("ИдентификаторИндекса",		Неопределено);

	Возврат Индекс;
КонецФункции

#КонецОбласти

#Область ОтчетыСервер

Процедура О_ПодключитьСхему(Отчет, Контекст, Схема, КлючСхемы) Экспорт
	СобытиеФормы = (ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения"));

	Отчет.СхемаКомпоновкиДанных = Схема;
	Если СобытиеФормы Тогда
		НастройкиОтчета	= Контекст.НастройкиОтчета;
		АдресСхемы		= НастройкиОтчета.АдресСхемы;
		НастройкиОтчета.Вставить("СхемаМодифицирована", Истина);
	Иначе
		АдресСхемыЗаполнен = (ТипЗнч(Контекст.АдресСхемы) = Тип("Строка") И ЭтоАдресВременногоХранилища(Контекст.АдресСхемы));
		Если Не АдресСхемыЗаполнен Тогда
			ИдентификаторФормы = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(Контекст, "ИдентификаторФормы");
			Если ТипЗнч(ИдентификаторФормы) = Тип("УникальныйИдентификатор") Тогда
				АдресСхемыЗаполнен	= Истина;
				Контекст.АдресСхемы	= ПоместитьВоВременноеХранилище(Схема, ИдентификаторФормы);
			КонецЕсли;
		КонецЕсли;
		Если АдресСхемыЗаполнен Тогда
			АдресСхемы = Контекст.АдресСхемы;
		Иначе
			АдресСхемы = ПоместитьВоВременноеХранилище(Схема);
		КонецЕсли;
		Контекст.СхемаМодифицирована = Истина;
	КонецЕсли;
	ПоместитьВоВременноеХранилище(Схема, АдресСхемы);

	ВариантОтчета = ?(СобытиеФормы, НастройкиОтчета.ВариантСсылка, Неопределено);
	О_ИнициализироватьКомпоновщикНастроек(Отчет.КомпоновщикНастроек, АдресСхемы, Отчет, ВариантОтчета);

	Если СобытиеФормы Тогда
		ЗначениеВДанныеФормы(Отчет, Контекст.Отчет);
	КонецЕсли;
КонецПроцедуры

Процедура О_ИнициализироватьКомпоновщикНастроек(КомпоновщикНастроек, Схема, Отчет = Неопределено, ВариантОтчета = Неопределено) Экспорт
	Попытка
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	Исключение
		ИмяСобытия = "Ошибка инициализации компоновщика настроек компоновки данных.";

		ОбъектМетаданных = Неопределено;
		Если Отчет <> Неопределено Тогда
			ОбъектМетаданных = Отчет.Метаданные();
		ИначеЕсли ВариантОтчета <> Неопределено Тогда
			ОбъектМетаданных = ВариантОтчета.Метаданные();
		КонецЕсли;

		Комментарий = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, ОбъектМетаданных, ВариантОтчета, Комментарий);

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Функция О_ОтчетОбъект(Идентификатор) Экспорт
	ПолноеИмя = Идентификатор;

	Если ТипЗнч(Идентификатор) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		ПолноеИмя = БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(Идентификатор, "ПолноеИмя");
	КонецЕсли;

	ОписаниеОбъекта = СтрРазделить(ПолноеИмя, ".");

	Если ОписаниеОбъекта.Количество() >= 2 Тогда
		Вид = ВРег(ОписаниеОбъекта[0]);
		Имя = ОписаниеОбъекта[1];
	Иначе
		ВызватьИсключение СтрШаблон("'Некорректное полное имя отчета ""%1"".", ПолноеИмя);
	КонецЕсли;

	Если Вид = "ОТЧЕТ" Тогда
		Возврат Отчеты[Имя].Создать();
	ИначеЕсли Вид = "ВНЕШНИЙОТЧЕТ" Тогда
		Возврат ВнешниеОтчеты.Создать(Имя);
	Иначе
		ВызватьИсключение СтрШаблон("""%1"" не является отчетом.", ПолноеИмя);
	КонецЕсли;
КонецФункции

Процедура О_ПередОбновлениемЭлементовФормыНастроек(Форма, ПараметрыОбновления)
	Если ТипЗнч(ПараметрыОбновления) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	КомпоновщикНастроек = Форма.Отчет.КомпоновщикНастроек;

	ИмяСобытия = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(ПараметрыОбновления, "ИмяСобытия");

	Если ИмяСобытия = "НастройкиПоУмолчанию" Тогда
		КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ПорядокЭлементовНастроек", Новый Соответствие);
	КонецЕсли;
КонецПроцедуры

Функция О_ПоляЭлементовФормыНастроек()
	ОписаниеСтроки	= Новый ОписаниеТипов("Строка");
	ОписаниеЧисла	= Новый ОписаниеТипов("Число");

	Поля = Новый ТаблицаЗначений;
	Поля.Колонки.Добавить("ИндексНастройки",		ОписаниеЧисла);
	Поля.Колонки.Добавить("ИдентификаторНастройки",	ОписаниеСтроки);
	Поля.Колонки.Добавить("Настройки");
	Поля.Колонки.Добавить("ЭлементНастройки");
	Поля.Колонки.Добавить("ОписаниеНастройки");
	Поля.Колонки.Добавить("Представление",			ОписаниеСтроки);
	Поля.Колонки.Добавить("ИдентификаторГруппы",	ОписаниеСтроки);
	Поля.Колонки.Добавить("ПоложениеЗаголовка",		Новый ОписаниеТипов("ПоложениеЗаголовкаЭлементаФормы"));
	Поля.Колонки.Добавить("РастягиватьПоГоризонтали");
	Поля.Колонки.Добавить("Ширина",					ОписаниеЧисла);

	Возврат Поля;
КонецФункции

Функция О_СведенияОПользовательскихНастройках(Настройки) Экспорт
	Сведения = Новый Соответствие;
	О_ПолучитьСведенияОГруппировке(Настройки, Сведения, Настройки.ДополнительныеСвойства);

	Возврат Сведения;
КонецФункции

Процедура О_ПолучитьСведенияОГруппировке(Группировка, Сведения, ДополнительныеСвойства)
	ТипГруппировки = ТипЗнч(Группировка);
	Если ТипГруппировки <> Тип("НастройкиКомпоновкиДанных") И ТипГруппировки <> Тип("ГруппировкаКомпоновкиДанных") И ТипГруппировки <> Тип("ГруппировкаТаблицыКомпоновкиДанных") И ТипГруппировки <> Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;

	Если ТипГруппировки <> Тип("НастройкиКомпоновкиДанных") И ЗначениеЗаполнено(Группировка.ИдентификаторПользовательскойНастройки) Тогда
		ВидыСведений					= О_ВидыСведений();
		ВидыСведений.Настройки			= Группировка;
		ВидыСведений.ЭлементНастройки	= Группировка;

		Сведения.Вставить(Группировка.ИдентификаторПользовательскойНастройки, ВидыСведений);
	КонецЕсли;

	О_ПолучитьСведенияОСвойствахЭлементаНастроек(Группировка, Сведения, ДополнительныеСвойства);
КонецПроцедуры

Процедура О_ПолучитьСведенияОТаблице(Таблица, Сведения, ДополнительныеСвойства)
	Если ТипЗнч(Таблица) <> Тип("ТаблицаКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Таблица.ИдентификаторПользовательскойНастройки) Тогда
		ВидыСведений					= О_ВидыСведений();
		ВидыСведений.Настройки			= Таблица;
		ВидыСведений.ЭлементНастройки	= Таблица;

		Сведения.Вставить(Таблица.ИдентификаторПользовательскойНастройки, ВидыСведений);
	КонецЕсли;

	О_ПолучитьСведенияОСвойствахЭлементаНастроек(Таблица, Сведения, ДополнительныеСвойства);
	О_ПолучитьСведенияОКоллекции(Таблица, Таблица.Строки, Сведения, ДополнительныеСвойства);
	О_ПолучитьСведенияОКоллекции(Таблица, Таблица.Колонки, Сведения, ДополнительныеСвойства);
КонецПроцедуры

Процедура О_ПолучитьСведенияОДиаграмме(Диаграмма, Сведения, ДополнительныеСвойства)
	Если ТипЗнч(Диаграмма) <> Тип("ДиаграммаКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Диаграмма.ИдентификаторПользовательскойНастройки) Тогда
		ВидыСведений					= О_ВидыСведений();
		ВидыСведений.Настройки			= Диаграмма;
		ВидыСведений.ЭлементНастройки	= Диаграмма;

		Сведения.Вставить(Диаграмма.ИдентификаторПользовательскойНастройки, ВидыСведений);
	КонецЕсли;

	О_ПолучитьСведенияОСвойствахЭлементаНастроек(Диаграмма, Сведения, ДополнительныеСвойства);
	О_ПолучитьСведенияОКоллекции(Диаграмма, Диаграмма.Серии, Сведения, ДополнительныеСвойства);
	О_ПолучитьСведенияОКоллекции(Диаграмма, Диаграмма.Точки, Сведения, ДополнительныеСвойства);
КонецПроцедуры

Процедура О_ПолучитьСведенияОКоллекции(ЭлементНастроек, Коллекция, Сведения, ДополнительныеСвойства)
	ТипКоллекции = ТипЗнч(Коллекция);
	Если ТипКоллекции <> Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") И ТипКоллекции <> Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") И ТипКоллекции <> Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Коллекция.ИдентификаторПользовательскойНастройки) Тогда
		ВидыСведений					= О_ВидыСведений();
		ВидыСведений.Настройки			= ЭлементНастроек;
		ВидыСведений.ЭлементНастройки	= Коллекция;

		Сведения.Вставить(Коллекция.ИдентификаторПользовательскойНастройки, ВидыСведений);
	КонецЕсли;

	Для Каждого Элемент Из Коллекция Цикл
		Настройки = Элемент;
		Если ТипЗнч(Элемент) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			Если ЗначениеЗаполнено(Элемент.ИдентификаторПользовательскойНастройки) Тогда
				ВидыСведений					= О_ВидыСведений();
				ВидыСведений.Настройки			= Элемент;
				ВидыСведений.ЭлементНастройки	= Элемент;

				Сведения.Вставить(Элемент.ИдентификаторПользовательскойНастройки, ВидыСведений);
			КонецЕсли;

			Настройки = Элемент.Настройки;
		КонецЕсли;

		О_ПолучитьСведенияОГруппировке(Настройки, Сведения, ДополнительныеСвойства);
		О_ПолучитьСведенияОТаблице(Настройки, Сведения, ДополнительныеСвойства);
		О_ПолучитьСведенияОДиаграмме(Настройки, Сведения, ДополнительныеСвойства);
	КонецЦикла;
КонецПроцедуры

Процедура О_ПолучитьСведенияОСвойствахЭлементаНастроек(ЭлементНастроек, Сведения, ДополнительныеСвойства)
	ИдентификаторыСвойств			= О_ИдентификаторыСвойствНастроек(ДополнительныеСвойства);
	ДополнительныеИдентификаторы	= Новый Массив;

	ДоступныеСвойства = Новый Структура("Выбор, Отбор, Порядок, УсловноеОформление, Структура");

	ТипЭлементаНастроек = ТипЗнч(ЭлементНастроек);
	Если ТипЭлементаНастроек <> Тип("ТаблицаКомпоновкиДанных") И ТипЭлементаНастроек <> Тип("ДиаграммаКомпоновкиДанных") Тогда
		ДополнительныеИдентификаторы.Добавить("Отбор");
		ДополнительныеИдентификаторы.Добавить("Порядок");
		ДополнительныеИдентификаторы.Добавить("Структура");

		Если ТипЭлементаНастроек = Тип("НастройкиКомпоновкиДанных") Тогда
			ДополнительныеИдентификаторы.Добавить("ПараметрыДанных");
		КонецЕсли;
	КонецЕсли;

	БазоваяПодсистемаКлиентСервер.ОН_ДополнитьМассив(ИдентификаторыСвойств, ДополнительныеИдентификаторы, Истина);

	Для Каждого Идентификатор Из ИдентификаторыСвойств Цикл
		Свойство = ЭлементНастроек[Идентификатор];

		Если ДоступныеСвойства.Свойство(Идентификатор) И ЗначениеЗаполнено(Свойство.ИдентификаторПользовательскойНастройки) Тогда
			ВидыСведений = О_ВидыСведений();
			ВидыСведений.Настройки = ЭлементНастроек;
			ВидыСведений.ЭлементНастройки = Свойство;

			Сведения.Вставить(Свойство.ИдентификаторПользовательскойНастройки, ВидыСведений);
		КонецЕсли;

		О_ПолучитьСведенияОЭлементахСвойстваНастроек(ЭлементНастроек, Свойство, Идентификатор, Сведения, ДополнительныеСвойства);
		О_ПолучитьСведенияОКоллекции(ЭлементНастроек, Свойство, Сведения, ДополнительныеСвойства);
	КонецЦикла;
КонецПроцедуры

Процедура О_ПолучитьСведенияОЭлементахСвойстваНастроек(Настройки, Свойство, ИдентификаторСвойства, Сведения, ДополнительныеСвойства)
	СвойстваСЭлементами = Новый Структура("Отбор, ПараметрыДанных, ПараметрыВывода, УсловноеОформление");
	Если Не СвойстваСЭлементами.Свойство(ИдентификаторСвойства) Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Элемент Из Свойство.Элементы Цикл
		ТипЭлемента = ТипЗнч(Элемент);

		Если ЗначениеЗаполнено(Элемент.ИдентификаторПользовательскойНастройки) Тогда
			Описание = Неопределено;
			Если ТипЭлемента = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				ДоступныеПоля = Настройки[ИдентификаторСвойства].ДоступныеПоляОтбора;
				Если ДоступныеПоля <> Неопределено Тогда
					Описание = ДоступныеПоля.НайтиПоле(Элемент.ЛевоеЗначение);
				КонецЕсли;
			ИначеЕсли ТипЭлемента = Тип("ЗначениеПараметраКомпоновкиДанных") Или ТипЭлемента = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ДоступныеПараметры = Настройки[ИдентификаторСвойства].ДоступныеПараметры;
				Если ДоступныеПараметры <> Неопределено Тогда
					Описание = ДоступныеПараметры.НайтиПараметр(Элемент.Параметр);
				КонецЕсли;
			КонецЕсли;

			ВидыСведений					= О_ВидыСведений();
			ВидыСведений.Настройки			= Настройки;
			ВидыСведений.ЭлементНастройки	= Элемент;
			ВидыСведений.ОписаниеНастройки	= Описание;

			Сведения.Вставить(Элемент.ИдентификаторПользовательскойНастройки, ВидыСведений);
		КонецЕсли;

		Если ТипЭлемента = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			О_ПолучитьСведенияОЭлементахСвойстваНастроек(Настройки, Элемент, ИдентификаторСвойства, Сведения, ДополнительныеСвойства);
		ИначеЕсли ТипЭлемента = Тип("ЗначениеПараметраКомпоновкиДанных") Или ТипЭлемента = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			О_ПолучитьСведенияОЗначенияхВложенныхПараметров(Настройки, Элемент.ЗначенияВложенныхПараметров, ИдентификаторСвойства, Сведения, ДополнительныеСвойства);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура О_ПолучитьСведенияОЗначенияхВложенныхПараметров(Настройки, ЗначенияПараметров, ИдентификаторСвойства, Сведения, ДополнительныеСвойства)
	Для Каждого ЗначениеПараметра Из ЗначенияПараметров Цикл
		Если ЗначениеЗаполнено(ЗначениеПараметра.ИдентификаторПользовательскойНастройки) Тогда
			ВидыСведений					= О_ВидыСведений();
			ВидыСведений.Настройки			= Настройки;
			ВидыСведений.ЭлементНастройки	= ЗначениеПараметра;
			ВидыСведений.ОписаниеНастройки	= Настройки[ИдентификаторСвойства].ДоступныеПараметры.НайтиПараметр(ЗначениеПараметра.Параметр);

			Сведения.Вставить(ЗначениеПараметра.ИдентификаторПользовательскойНастройки, ВидыСведений);
		КонецЕсли;

		О_ПолучитьСведенияОЗначенияхВложенныхПараметров(Настройки, ЗначениеПараметра.ЗначенияВложенныхПараметров, ИдентификаторСвойства, Сведения, ДополнительныеСвойства);
	КонецЦикла;
КонецПроцедуры

Функция О_ВидыСведений()
	Возврат Новый Структура("Настройки, ЭлементНастройки, ОписаниеНастройки");
КонецФункции

Функция О_ИдентификаторыСвойствНастроек(ДополнительныеСвойства)
	ИдентификаторыСвойствПоУмолчанию = СтрРазделить("Выбор, ПараметрыВывода, УсловноеОформление", ", ", Ложь);

	ИдентификаторыСвойств = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(ДополнительныеСвойства, "ИдентификаторыСвойствНастроек", ИдентификаторыСвойствПоУмолчанию);

	Возврат БазоваяПодсистемаСервер.ОН_СкопироватьРекурсивно(ИдентификаторыСвойств);
КонецФункции

Процедура О_ДобавитьВариантыКонтекста(Отчет, Варианты, ВариантыКонтекста) Экспорт
	Если ВариантыКонтекста.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ОтсутствующиеВарианты = Новый Массив;

	Для Каждого ВариантКонтекста Из ВариантыКонтекста Цикл
		Если Варианты.Найти(ВариантКонтекста.Значение, "КлючВарианта") = Неопределено Тогда
			ОтсутствующиеВарианты.Добавить(ВариантКонтекста.Значение);
		КонецЕсли;
	КонецЦикла;

	Если ОтсутствующиеВарианты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Запрос			= Новый Запрос;
	Запрос.Текст	=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВариантыОтчетов.*,
	|	ВариантыОтчетов.Представление КАК Наименование
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.КлючВарианта В (&ОтсутствующиеВарианты)";

	Запрос.УстановитьПараметр("Отчет",					Отчет);
	Запрос.УстановитьПараметр("ОтсутствующиеВарианты",	ОтсутствующиеВарианты);

	Вариант = Запрос.Выполнить().Выбрать();

	Пока Вариант.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Варианты.Добавить(), Вариант);
	КонецЦикла;
КонецПроцедуры

Функция О_РасширенноеОписаниеТипов(ИсходноеОписаниеТипов, ПривестиКФорме, ПараметрыПодбора = Неопределено) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("СодержитТипТип",        Ложь);
	Результат.Вставить("СодержитТипДата",       Ложь);
	Результат.Вставить("СодержитТипБулево",     Ложь);
	Результат.Вставить("СодержитТипСтрока",     Ложь);
	Результат.Вставить("СодержитТипЧисло",      Ложь);
	Результат.Вставить("СодержитТипПериод",     Ложь);
	Результат.Вставить("СодержитТипУИД",        Ложь);
	Результат.Вставить("СодержитТипХранилище",  Ложь);
	Результат.Вставить("СодержитОбъектныеТипы", Ложь);
	Результат.Вставить("ОграниченнойДлины",     Истина);

	Результат.Вставить("КоличествоТипов",            0);
	Результат.Вставить("КоличествоПримитивныхТипов", 0);
	Результат.Вставить("ОбъектныеТипы", Новый Массив);

	Если ПривестиКФорме Тогда
		ДобавляемыеТипы	= Новый Массив;
		ВычитаемыеТипы	= Новый Массив;
		Результат.Вставить("ОписаниеТиповИсходное", ИсходноеОписаниеТипов);
		Результат.Вставить("ОписаниеТиповДляФормы", ИсходноеОписаниеТипов);
	КонецЕсли;

	Если ИсходноеОписаниеТипов = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	МассивТипов = ИсходноеОписаниеТипов.Типы();
	Для Каждого Тип Из МассивТипов Цикл
		Если Тип = Тип("Null") Тогда
			ВычитаемыеТипы.Добавить(Тип);

			Продолжить;
		КонецЕсли;

		Если Тип = Тип("ПолеКомпоновкиДанных") Тогда
			Если ПривестиКФорме Тогда
				ВычитаемыеТипы.Добавить(Тип);
			КонецЕсли;

			Продолжить;
		КонецЕсли;

		МетаданныеНастройки = Метаданные.НайтиПоТипу(Тип);
		Если МетаданныеНастройки <> Неопределено Тогда
			Если БазоваяПодсистемаСервер.ОН_ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеНастройки) Тогда
				Если ТипЗнч(ПараметрыПодбора) = Тип("Соответствие") Тогда
					ПараметрыПодбора.Вставить(Тип, МетаданныеНастройки.ПолноеИмя() + ".ФормаВыбора");
				КонецЕсли;
			Иначе // Объект недоступен.
				Если ПривестиКФорме Тогда
					ВычитаемыеТипы.Добавить(Тип);
				КонецЕсли;

				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Результат.КоличествоТипов = Результат.КоличествоТипов + 1;

		Если Тип = Тип("Тип") Тогда
			Результат.СодержитТипТип = Истина;
		ИначеЕсли Тип = Тип("Дата") Тогда
			Результат.СодержитТипДата = Истина;
			Результат.КоличествоПримитивныхТипов = Результат.КоличествоПримитивныхТипов + 1;
		ИначеЕсли Тип = Тип("Булево") Тогда
			Результат.СодержитТипБулево = Истина;
			Результат.КоличествоПримитивныхТипов = Результат.КоличествоПримитивныхТипов + 1;
		ИначеЕсли Тип = Тип("Число") Тогда
			Результат.СодержитТипЧисло = Истина;
			Результат.КоличествоПримитивныхТипов = Результат.КоличествоПримитивныхТипов + 1;
		ИначеЕсли Тип = Тип("СтандартныйПериод") Тогда
			Результат.СодержитТипПериод = Истина;
		ИначеЕсли Тип = Тип("Строка") Тогда
			Результат.СодержитТипСтрока = Истина;
			Результат.КоличествоПримитивныхТипов = Результат.КоличествоПримитивныхТипов + 1;
			Если ИсходноеОписаниеТипов.КвалификаторыСтроки.Длина = 0 И ИсходноеОписаниеТипов.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Переменная Тогда
				Результат.ОграниченнойДлины = Ложь;
			КонецЕсли;
		ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда
			Результат.СодержитТипУИД = Истина;
		ИначеЕсли Тип = Тип("ХранилищеЗначения") Тогда
			Результат.СодержитТипХранилище = Истина;
		Иначе
			Результат.СодержитОбъектныеТипы = Истина;
			Результат.ОбъектныеТипы.Добавить(Тип);
		КонецЕсли;
	КонецЦикла;

	Если ПривестиКФорме И (ДобавляемыеТипы.Количество() > 0 Или ВычитаемыеТипы.Количество() > 0) Тогда
		Результат.ОписаниеТиповДляФормы = Новый ОписаниеТипов(ИсходноеОписаниеТипов, ДобавляемыеТипы, ВычитаемыеТипы);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Процедура О_УстановитьФиксированныеОтборы(СтруктураОтборов, НастройкиКД, НастройкиОтчета) Экспорт
	Если ТипЗнч(НастройкиКД) <> Тип("НастройкиКомпоновкиДанных") Или СтруктураОтборов = Неопределено Или СтруктураОтборов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПараметрыКД	= НастройкиКД.ПараметрыДанных;
	ОтборыКД	= НастройкиКД.Отбор;
	Недоступный	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Для Каждого КлючИЗначение Из СтруктураОтборов Цикл
		Имя			= КлючИЗначение.Ключ;
		Значение	= КлючИЗначение.Значение;
		Если ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
			Значение = Новый Массив(Значение);
		КонецЕсли;
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			Список		= Новый СписокЗначений;
			Список.ЗагрузитьЗначения(Значение);
			Значение	= Список;
		КонецЕсли;
		ПараметрКД = ПараметрыКД.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(Имя));
		Если ТипЗнч(ПараметрКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			ПараметрКД.ИдентификаторПользовательскойНастройки	= "";
			ПараметрКД.Использование							= Истина;
			ПараметрКД.РежимОтображения							= Недоступный;
			ПараметрКД.Значение									= Значение;

			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Значение) = Тип("Структура") Тогда
			ВидСравненияКД	= БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(Значение, "ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
			Значение		= БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(Значение, "ПравоеЗначение");
		ИначеЕсли ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
			ВидСравненияКД = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ВидСравненияКД = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		БазоваяПодсистемаКлиентСервер.ОН_УстановитьЭлементОтбора(ОтборыКД, Имя, Значение, ВидСравненияКД, , Истина, Недоступный, "");
	КонецЦикла;
КонецПроцедуры

Функция О_КоличествоДоступныхНастроек(КомпоновщикНастроек) Экспорт
	ДоступныеНастройки = Новый Структура;
	ДоступныеНастройки.Вставить("БыстрогоДоступа",	0);
	ДоступныеНастройки.Вставить("Обычных",			0);
	ДоступныеНастройки.Вставить("Итог",				0);

	ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
	Для Каждого ЭлементПользовательскойНастройки Из ПользовательскиеНастройки.Элементы Цикл
		ЭлементНастройки = ВариантыОтчетовКлиентСервер.о_ПолучитьОбъектПоПользовательскомуИдентификатору(КомпоновщикНастроек.Настройки, ЭлементПользовательскойНастройки.ИдентификаторПользовательскойНастройки,, ПользовательскиеНастройки);

		РежимОтображения = ?(ЭлементНастройки = Неопределено, ЭлементПользовательскойНастройки.РежимОтображения, ЭлементНастройки.РежимОтображения);

		Если РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто Или РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ Тогда
			ДоступныеНастройки.БыстрогоДоступа = ДоступныеНастройки.БыстрогоДоступа + 1;
		ИначеЕсли РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный Тогда
			ДоступныеНастройки.Обычных = ДоступныеНастройки.Обычных + 1;
		КонецЕсли;
	КонецЦикла;

	ДоступныеНастройки.Итог = ДоступныеНастройки.БыстрогоДоступа + ДоступныеНастройки.Обычных;

	Возврат ДоступныеНастройки;
КонецФункции

Функция О_СвойстваЭлементаПользовательскихНастроек(КомпоновщикНастроек, ЭлементПользовательскойНастройки, ЭлементНастройки, ОписаниеНастройки)
	Свойства = О_ПалитраСвойствЭлементаПользовательскихНастроек();

	Свойства.ПользовательскаяНастройкаКД = ЭлементПользовательскойНастройки;
	Свойства.ЭлементКД = ЭлементНастройки;
	Свойства.ДоступнаяНастройкаКД = ОписаниеНастройки;

	Свойства.Идентификатор = ЭлементПользовательскойНастройки.ИдентификаторПользовательскойНастройки;
	Свойства.ИдентификаторКД = КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту(ЭлементПользовательскойНастройки);
	Свойства.ИдентификаторЭлемента = СтрЗаменить(ЭлементПользовательскойНастройки.ИдентификаторПользовательскойНастройки, "-", "");

	ТипЭлементаНастройки = ТипЗнч(ЭлементНастройки);
	Если ТипЭлементаНастройки = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Свойства.ПолеКД		= Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Строка(ЭлементНастройки.Параметр));
		Свойства.Значение	= ЭлементНастройки.Значение;
	ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Свойства.ПолеКД		= ЭлементНастройки.ЛевоеЗначение;
		Свойства.Значение	= ЭлементНастройки.ПравоеЗначение;
	КонецЕсли;

	Свойства.Тип = О_ТипНастройкиСтрокой(ТипЭлементаНастройки);

	Если ОписаниеНастройки = Неопределено Тогда
		Возврат Свойства;
	КонецЕсли;

	Свойства.ОписаниеТипов = ОписаниеНастройки.ТипЗначения;

	Если ОписаниеНастройки.ДоступныеЗначения <> Неопределено Тогда
		Свойства.ЗначенияДляВыбора = ОписаниеНастройки.ДоступныеЗначения;
	КонецЕсли;

	Возврат Свойства;
КонецФункции

Функция О_ПалитраСвойствЭлементаПользовательскихНастроек()
	Свойства = Новый Структура;
	Свойства.Вставить("БыстрыйВыбор",							Ложь);
	Свойства.Вставить("ВводСписком",							Ложь);
	Свойства.Вставить("ВидСравнения",							ВидСравненияКомпоновкиДанных.Равно);
	Свойства.Вставить("Владелец",								Неопределено);
	Свойства.Вставить("ВыборГруппИЭлементов",					ГруппыИЭлементы.Авто);
	Свойства.Вставить("ВыводРазрешен",							Истина);
	Свойства.Вставить("ВыводитьВГруппеОсновныхНастроек",		Ложь);
	Свойства.Вставить("ВыводитьТолькоФлажок",					Ложь);
	Свойства.Вставить("ВыводитьФлажок",							Истина);
	Свойства.Вставить("Глобальная",								Истина);
	Свойства.Вставить("ДоступнаяНастройкаКД",					Неопределено);
	Свойства.Вставить("ЗапросЗначенийВыбора",					Новый Запрос);
	Свойства.Вставить("Значение",								Неопределено);
	Свойства.Вставить("ЗначенияДляВыбора",						Новый СписокЗначений);
	Свойства.Вставить("Идентификатор",							"");
	Свойства.Вставить("ИдентификаторКД",						Неопределено);
	Свойства.Вставить("ИдентификаторЭлемента",					"");
	Свойства.Вставить("ИмяКоллекции",							"");
	Свойства.Вставить("ИнформацияОТипах",						Новый Структура);
	Свойства.Вставить("ОграничениеТипа",						Неопределено);
	Свойства.Вставить("ОграничиватьВыборУказаннымиЗначениями",	Ложь);
	Свойства.Вставить("ОписаниеТипов",							Новый ОписаниеТипов("Неопределено"));
	Свойства.Вставить("ОтмеченныеЗначения",						Неопределено);
	Свойства.Вставить("ПараметрыВыбора",						Новый Массив);
	Свойства.Вставить("Подтип",									"");
	Свойства.Вставить("ПолеКД",									Неопределено);
	Свойства.Вставить("ПользовательскаяНастройка",				Неопределено);
	Свойства.Вставить("ПользовательскаяНастройкаКД",			Неопределено);
	Свойства.Вставить("Представление",							"");
	Свойства.Вставить("ПредставлениеПоУмолчанию",				"");
	Свойства.Вставить("Родитель",								Неопределено);
	Свойства.Вставить("СвязиПараметровВыбора",					Новый Массив);
	Свойства.Вставить("СвязиПоМетаданным",						Новый Массив);
	Свойства.Вставить("СвязьПоТипу",							Неопределено);
	Свойства.Вставить("СобытиеПриИзменении",					Ложь);
	Свойства.Вставить("Состояние",								"");
	Свойства.Вставить("СписокЗначенийПереопределен",			Ложь);
	Свойства.Вставить("СтрокаДерева",							Неопределено);
	Свойства.Вставить("Строки",									Неопределено);
	Свойства.Вставить("Тип",									"");
	Свойства.Вставить("ФормаВыбора",							"");
	Свойства.Вставить("Ширина",									0);
	Свойства.Вставить("ЭлементКД",								Неопределено);

	Возврат Свойства;
КонецФункции

Функция О_СвойстваЭлементовФормыНастроек(ТипФормы, КомпоновщикНастроек, ДополнительныеПараметры) Экспорт
	#Область ПодготовкаСтруктуры

	СвойстваЭлементов			= Новый Структура("Группы, Поля");
	СвойстваЭлементов.Группы	= Новый Структура;

	Поля = О_ПоляЭлементовФормыНастроек();

	ДоступныеРежимы = Новый Массив;
	ДоступныеРежимы.Добавить(РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	Если ТипФормы = ТипФормыОтчета.Настройка Тогда
		ДоступныеРежимы.Добавить(РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
	КонецЕсли;

	НедоступныеЭлементыСтруктуры = Новый Соответствие;
	НедоступныеЭлементыСтруктуры.Вставить(Тип("ГруппировкаКомпоновкиДанных"),			ТипФормыОтчета.Настройка);
	НедоступныеЭлементыСтруктуры.Вставить(Тип("ГруппировкаТаблицыКомпоновкиДанных"),	ТипФормыОтчета.Настройка);
	НедоступныеЭлементыСтруктуры.Вставить(Тип("ГруппировкаДиаграммыКомпоновкиДанных"),	ТипФормыОтчета.Настройка);
	НедоступныеЭлементыСтруктуры.Вставить(Тип("ТаблицаКомпоновкиДанных"),				ТипФормыОтчета.Настройка);
	НедоступныеЭлементыСтруктуры.Вставить(Тип("ДиаграммаКомпоновкиДанных"),				ТипФормыОтчета.Настройка);

	#КонецОбласти

	#Область ЗаполнениеСтруктуры

	Сведения = О_СведенияОПользовательскихНастройках(КомпоновщикНастроек.Настройки);
	ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
	Для Каждого ЭлементПользовательскойНастройки Из ПользовательскиеНастройки.Элементы Цикл
		НайденныеСведения	= Сведения[ЭлементПользовательскойНастройки.ИдентификаторПользовательскойНастройки];
		ЭлементНастройки	= НайденныеСведения.ЭлементНастройки; // ГруппировкаКомпоновкиДанных, ГруппировкаТаблицыКомпоновкиДанных, ГруппировкаДиаграммыКомпоновкиДанных 

		Если ЭлементНастройки = Неопределено Или НедоступныеЭлементыСтруктуры.Получить(ТипЗнч(ЭлементНастройки)) = ТипФормы Или ДоступныеРежимы.Найти(ЭлементНастройки.РежимОтображения) = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ТипЭлемента = ТипЗнч(ЭлементНастройки);
		Если ТипЭлемента = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда
			Представление = ВариантыОтчетовКлиентСервер.О_ПредставлениеЭлементаУсловногоОформления(ЭлементНастройки, Неопределено, "");

			Если Не ЗначениеЗаполнено(ЭлементНастройки.Представление) Тогда
				ЭлементНастройки.Представление = Представление;
			ИначеЕсли Не ЗначениеЗаполнено(ЭлементНастройки.ПредставлениеПользовательскойНастройки) И ЭлементНастройки.Представление <> Представление Тогда
				ЭлементНастройки.ПредставлениеПользовательскойНастройки	= ЭлементНастройки.Представление;
				ЭлементНастройки.Представление							= Представление;
			КонецЕсли;
		КонецЕсли;

		Поле						= Поля.Добавить();
		Поле.ИдентификаторНастройки	= ЭлементПользовательскойНастройки.ИдентификаторПользовательскойНастройки;
		Поле.ИндексНастройки		= ПользовательскиеНастройки.Элементы.Индекс(ЭлементПользовательскойНастройки);
		Поле.Настройки				= НайденныеСведения.Настройки;
		Поле.ЭлементНастройки		= ЭлементНастройки;
		Поле.ОписаниеНастройки		= НайденныеСведения.ОписаниеНастройки;
		Поле.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Авто;

		Если НедоступныеЭлементыСтруктуры.Получить(ТипЗнч(ЭлементНастройки)) <> Неопределено Тогда
			Представление = ЭлементНастройки.ПараметрыВывода.Элементы.Найти("TITLE");
			Если Представление <> Неопределено И ЗначениеЗаполнено(Представление.Значение) Тогда
				Поле.Представление = Представление.Значение;
			КонецЕсли;
		КонецЕсли;

		Если ТипФормы = ТипФормыОтчета.Настройка И ТипЗнч(ЭлементНастройки) = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда
			Поле.ИдентификаторГруппы = "Дополнительно";
		КонецЕсли;
	КонецЦикла;

	Если Поля.Найти("Дополнительно", "ИдентификаторГруппы") <> Неопределено Тогда
		СвойстваЭлементов.Группы.Вставить("Дополнительно", О_СвойстваГруппыЭлементовФормы());
	КонецЕсли;

	Поля.Сортировать("ИндексНастройки");
	СвойстваЭлементов.Поля = Поля;

	Если ДополнительныеПараметры.События.ПриОпределенииСвойствЭлементовФормыНастроек Тогда
		О_ОтчетОбъект(ДополнительныеПараметры.ПолноеИмя).ПриОпределенииСвойствЭлементовФормыНастроек(ТипФормы, СвойстваЭлементов, ПользовательскиеНастройки.Элементы);
	КонецЕсли;

	#КонецОбласти

	Возврат СвойстваЭлементов;
КонецФункции

Функция О_СвойстваГруппыЭлементовФормы() Экспорт
	СвойстваГруппы = Новый Структура;
	СвойстваГруппы.Вставить("Отображение", ОтображениеОбычнойГруппы.Нет);
	СвойстваГруппы.Вставить("Группировка", ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно);

	Возврат СвойстваГруппы;
КонецФункции

Процедура О_ОбновитьЭлементыФормыНастроек(Форма, УзелИерархииЭлементов, ПараметрыОбновления = Неопределено) Экспорт
	О_ПередОбновлениемЭлементовФормыНастроек(Форма, ПараметрыОбновления);

	Если БазоваяПодсистемаСервер.ОН_ЭтоМобильныйКлиент() Тогда
		Форма.СоздатьЭлементыФормыПользовательскихНастроек(УзелИерархииЭлементов);

		Возврат;
	КонецЕсли;

	Элементы = Форма.Элементы;
	НастройкиОтчета = Форма.НастройкиОтчета;

	ВидыСтилизованныхЭлементов	= СтрРазделить("Период, Список, Флажок", ", ", Ложь);
	ИменаРеквизитов				= О_ИменаРеквизитовЭлементовНастроек(Форма, ВидыСтилизованныхЭлементов);

	О_ПодготовитьФормуКПерегруппировкеЭлементов(Форма, УзелИерархииЭлементов, ИменаРеквизитов, ВидыСтилизованныхЭлементов);

	ВременнаяГруппа		= Элементы.Добавить("Временная", Тип("ГруппаФормы"));
	ВременнаяГруппа.Вид	= ВидГруппыФормы.ОбычнаяГруппа;

	Режим = РежимОтображенияНастроекКомпоновкиДанных.БыстрыйДоступ;
	Если Форма.ТипФормыОтчета = ТипФормыОтчета.Настройка Тогда
		Режим = РежимОтображенияНастроекКомпоновкиДанных.Все;
	КонецЕсли;

	Форма.СоздатьЭлементыФормыПользовательскихНастроек(ВременнаяГруппа, Режим, 1);

	СвойстваЭлементов = О_СвойстваЭлементовФормыНастроек(Форма.ТипФормыОтчета, Форма.Отчет.КомпоновщикНастроек, НастройкиОтчета);

	О_ПерегруппироватьЭлементыФормыНастроек(Форма, УзелИерархииЭлементов, СвойстваЭлементов, ИменаРеквизитов, ВидыСтилизованныхЭлементов);

	Элементы.Удалить(ВременнаяГруппа);

	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПослеЗаполненияПанелиБыстрыхНастроек Тогда
		ОтчетОбъект = О_ОтчетОбъект(НастройкиОтчета.ПолноеИмя);
		ОтчетОбъект.ПослеЗаполненияПанелиБыстрыхНастроек(Форма, ПараметрыОбновления);
	КонецЕсли;
КонецПроцедуры

Функция О_ДоступныеНастройки(ПараметрыЗагрузки, НастройкиОтчета) Экспорт
	Настройки					= Неопределено;
	ПользовательскиеНастройки	= Неопределено;
	ФиксированныеНастройки		= Неопределено;

	Если ПараметрыЗагрузки.Свойство("КомпоновщикНастроекКД") Тогда
		Настройки					= ПараметрыЗагрузки.КомпоновщикНастроекКД.Настройки;
		ПользовательскиеНастройки	= ПараметрыЗагрузки.КомпоновщикНастроекКД.ПользовательскиеНастройки;
		ФиксированныеНастройки		= ПараметрыЗагрузки.КомпоновщикНастроекКД.ФиксированныеНастройки;
	Иначе
		Если ПараметрыЗагрузки.Свойство("НастройкиКД") Тогда
			Настройки = ПараметрыЗагрузки.НастройкиКД;
		КонецЕсли;
		Если ПараметрыЗагрузки.Свойство("ПользовательскиеНастройкиКД") Тогда
			ПользовательскиеНастройки = ПараметрыЗагрузки.ПользовательскиеНастройкиКД;
		КонецЕсли;
	КонецЕсли;

	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		НастройкиXML = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(НастройкиОтчета, "НовыеНастройкиXML");
		Если ТипЗнч(НастройкиXML) = Тип("Строка") Тогда
			Попытка
				Настройки = БазоваяПодсистемаСервер.ОН_ЗначениеИзСтрокиXML(НастройкиXML);

				// Устанавливается связь со схемой, для восстановления неиспользовавшихся значений параметров данных,
				//  которые теряются при сериализации настроек (см. синтакс-помощник: ЗначенияПараметровДанныхКомпоновкиДанных).
				КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
				О_ИнициализироватьКомпоновщикНастроек(КомпоновщикНастроек, НастройкиОтчета.АдресСхемы);
				КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);

				Настройки = КомпоновщикНастроек.Настройки;
			Исключение
				Настройки = Неопределено;
			КонецПопытки;
			НастройкиОтчета.НовыеНастройкиXML = Неопределено;
		КонецЕсли;

		ПользовательскиеНастройкиXML = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(НастройкиОтчета, "НовыеПользовательскиеНастройкиXML");
		Если ТипЗнч(ПользовательскиеНастройкиXML) = Тип("Строка") Тогда
			Попытка
				ПользовательскиеНастройки = БазоваяПодсистемаСервер.ОН_ЗначениеИзСтрокиXML(ПользовательскиеНастройкиXML);
			Исключение
				ПользовательскиеНастройки = Неопределено;
			КонецПопытки;
			НастройкиОтчета.НовыеПользовательскиеНастройкиXML = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Возврат Новый Структура("Настройки, ПользовательскиеНастройки, ФиксированныеНастройки", Настройки, ПользовательскиеНастройки, ФиксированныеНастройки);
КонецФункции

Процедура О_СброситьПользовательскиеНастройки(ДоступныеНастройки, ПараметрыЗагрузки) Экспорт
	СброситьПользовательскиеНастройки = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(ПараметрыЗагрузки, "СброситьПользовательскиеНастройки", Ложь);

	Если Не СброситьПользовательскиеНастройки Тогда
		Возврат;
	КонецЕсли;

	Если ДоступныеНастройки.ПользовательскиеНастройки = Неопределено Тогда
		ДополнительныеСвойства = Неопределено;
	Иначе
		ДополнительныеСвойства = ДоступныеНастройки.ПользовательскиеНастройки.ДополнительныеСвойства;
	КонецЕсли;

	ДоступныеНастройки.ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;

	Если ДополнительныеСвойства = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Свойство Из ДополнительныеСвойства Цикл
		ДоступныеНастройки.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить(Свойство.Ключ, Свойство.Значение);
	КонецЦикла;
КонецПроцедуры

Процедура О_ВосстановитьЗначенияОтборов(Форма) Экспорт
	ПутьКДаннымЭлементов = Форма.ПутьКДаннымЭлементов;
	Если ПутьКДаннымЭлементов = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПользовательскиеНастройки = Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;

	КэшЗначенийОтборов = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(ПользовательскиеНастройки.ДополнительныеСвойства, "КэшЗначенийОтборов");

	Если КэшЗначенийОтборов = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Для Каждого ЭлементКэша Из КэшЗначенийОтборов Цикл
		ЗначениеОтбора = ЭлементКэша.Значение;
		Если ЗначениеОтбора.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		ЭлементНастройки = ПользовательскиеНастройки.Элементы.Найти(ЭлементКэша.Ключ);
		Если ЭлементНастройки = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Индекс		= ПользовательскиеНастройки.Элементы.Индекс(ЭлементНастройки);
		ИмяСписка	= ПутьКДаннымЭлементов.ПоИндексу[Индекс];
		Если ИмяСписка = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Список = Форма[ИмяСписка];
		Если Список = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Для Каждого Элемент Из ЗначениеОтбора Цикл
			Если Список.НайтиПоЗначению(Элемент.Значение) = Неопределено Тогда
				Список.Добавить(Элемент.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура О_УстановитьДоступныеЗначения(Отчет, Форма) Экспорт
	КомпоновщикНастроек = Форма.Отчет.КомпоновщикНастроек;

	КоллекцииНастроек = Новый Массив; // массив из ПользовательскиеНастройкиКомпоновкиДанных, ЗначенияПараметровДанныхКомпоновкиДанных, ОтборКомпоновкиДанных
	КоллекцииНастроек.Добавить(КомпоновщикНастроек.ПользовательскиеНастройки);
	КоллекцииНастроек.Добавить(КомпоновщикНастроек.Настройки.ПараметрыДанных);
	КоллекцииНастроек.Добавить(КомпоновщикНастроек.Настройки.Отбор);

	Для Каждого КоллекцияНастроек Из КоллекцииНастроек Цикл
		ЭтоПользовательскиеНастройки = (ТипЗнч(КоллекцияНастроек) = Тип("ПользовательскиеНастройкиКомпоновкиДанных"));

		Для Каждого ЭлементНастройки Из КоллекцияНастроек.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ТипЗнч(ЭлементНастройки) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;

			Если Не ЭтоПользовательскиеНастройки И ЗначениеЗаполнено(ЭлементНастройки.ИдентификаторПользовательскойНастройки) Тогда
				Продолжить;
			КонецЕсли;

			Если ЭтоПользовательскиеНастройки Тогда
				ЭлементПользовательскойНастройки	= ЭлементНастройки;

				ЭлементОсновнойНастройки			= ВариантыОтчетовКлиентСервер.О_ПолучитьОбъектПоПользовательскомуИдентификатору(КомпоновщикНастроек.Настройки, ЭлементПользовательскойНастройки.ИдентификаторПользовательскойНастройки,, КоллекцияНастроек);
			Иначе
				ЭлементПользовательскойНастройки	= ЭлементНастройки;
				ЭлементОсновнойНастройки			= ЭлементНастройки;
			КонецЕсли;

			ОписаниеНастройки = ВариантыОтчетовКлиентСервер.О_НайтиДоступнуюНастройку(КомпоновщикНастроек.Настройки, ЭлементОсновнойНастройки);

			СвойстваНастройки = О_СвойстваЭлементаПользовательскихНастроек(КомпоновщикНастроек, ЭлементПользовательскойНастройки, ЭлементОсновнойНастройки, ОписаниеНастройки);

			// Механизмы расширения.
			ИнтеграцияПодсистемСервер.ПриОпределенииПараметровВыбораВариантыОтчетов(Неопределено, СвойстваНастройки);

			// Локальное переопределение для отчета.
			Если Форма.НастройкиОтчета.События.ПриОпределенииПараметровВыбора Тогда
				Отчет.ПриОпределенииПараметровВыбора(Форма, СвойстваНастройки);
			КонецЕсли;

			// Автоматическое заполнение.
			Если СвойстваНастройки.ЗапросЗначенийВыбора.Текст <> "" Тогда
				ДобавляемыеЗначения = СвойстваНастройки.ЗапросЗначенийВыбора.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
				Для Каждого Элемент Из ДобавляемыеЗначения Цикл
					ВариантыОтчетовКлиентСервер.О_ДобавитьУникальноеЗначениеВСписок(СвойстваНастройки.ЗначенияДляВыбора, Элемент, Неопределено, Ложь);
				КонецЦикла;
				СвойстваНастройки.ЗначенияДляВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
			КонецЕсли;

			Если ТипЗнч(СвойстваНастройки.ЗначенияДляВыбора) = Тип("СписокЗначений") И СвойстваНастройки.ЗначенияДляВыбора.Количество() > 0 Тогда
				ОписаниеНастройки.ДоступныеЗначения = СвойстваНастройки.ЗначенияДляВыбора;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура О_ИнициализироватьПредопределенныеПараметрыВывода(Контекст, Настройки, Сбросить = Ложь) Экспорт
	Если Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Сбросить Тогда
		О_СброситьПредопределенныеПараметрыВывода(Настройки);

		Возврат;
	КонецЕсли;

	ПараметрыВывода = Настройки.ПараметрыВывода.Элементы;

	// Параметр Заголовок всегда доступен и только в форме настроек отчета.
	Объект											= ПараметрыВывода.Найти("TITLE");
	Объект.РежимОтображения							= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	Объект.ИдентификаторПользовательскойНастройки	= "";

	О_УстановитьСтандартныйЗаголовокОтчета(Объект, Контекст);

	// Параметр ВыводитьЗаголовок всегда недоступный. Свойства зависят от параметра Заголовок.
	СвязанныйОбъект											= ПараметрыВывода.Найти("TITLEOUTPUT");
	СвязанныйОбъект.РежимОтображения						= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	СвязанныйОбъект.ИдентификаторПользовательскойНастройки	= "";
	СвязанныйОбъект.Использование							= Истина;

	Если Объект.Использование Тогда
		СвязанныйОбъект.Значение = ТипВыводаТекстаКомпоновкиДанных.Авто;
	Иначе
		СвязанныйОбъект.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	КонецЕсли;

	// Параметр ВыводитьПараметры всегда доступен и только в форме настроек отчета.
	Объект											= ПараметрыВывода.Найти("DATAPARAMETERSOUTPUT");
	Объект.РежимОтображения							= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	Объект.ИдентификаторПользовательскойНастройки	= "";
	Объект.Использование							= Истина;

	Если Объект.Значение <> ТипВыводаТекстаКомпоновкиДанных.НеВыводить Тогда
		Объект.Значение = ТипВыводаТекстаКомпоновкиДанных.Авто;
	КонецЕсли;

	// Параметр ВыводитьОтбор всегда недоступный. Значения свойств те же, что и у параметра ВыводитьПараметрыДанных.
	СвязанныйОбъект											= ПараметрыВывода.Найти("FILTEROUTPUT");
	СвязанныйОбъект.РежимОтображения						= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	СвязанныйОбъект.ИдентификаторПользовательскойНастройки	= "";
	СвязанныйОбъект.Использование							= Истина;

	Если СвязанныйОбъект.Значение <> ТипВыводаТекстаКомпоновкиДанных.НеВыводить Тогда
		СвязанныйОбъект.Значение = ТипВыводаТекстаКомпоновкиДанных.Авто;
	КонецЕсли;

	О_СохранитьСтандартныеЗначенияПредопределенныхПараметровВывода(Настройки);
КонецПроцедуры

Процедура О_УстановитьСтандартныйЗаголовокОтчета(Заголовок, Контекст)
	Если ЗначениеЗаполнено(Заголовок.Значение) Тогда
		Возврат;
	КонецЕсли;

	ИдентификаторОтчета = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(Контекст, "ОтчетСсылка");
	Если ИдентификаторОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЭтоТипДополнительныйОтчетИлиОбработка = Ложь;

	Если ТипЗнч(ИдентификаторОтчета) = Тип("Строка") Или ЭтоТипДополнительныйОтчетИлиОбработка Тогда
		Заголовок.Значение = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(Контекст, "Наименование", "");

		Возврат;
	КонецЕсли;

	Вариант = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(Контекст, "ВариантСсылка");
	Если ЗначениеЗаполнено(Вариант) Тогда
		Заголовок.Значение = Строка(Вариант);
	КонецЕсли;

	Если ЗначениеЗаполнено(Заголовок.Значение) И Заголовок.Значение <> "Основной" Тогда
		Возврат;
	КонецЕсли;

	МетаданныеОтчета = Справочники.ИдентификаторыОбъектовМетаданных.ОбъектМетаданныхПоИдентификатору(ИдентификаторОтчета, Ложь);
	Если ТипЗнч(МетаданныеОтчета) = Тип("ОбъектМетаданных") Тогда
		Заголовок.Значение = МетаданныеОтчета.Представление();
	КонецЕсли;
КонецПроцедуры

Функция О_ИменаРеквизитовЭлементовНастроек(Форма, ВидыЭлементов)
	ИменаРеквизитовПредопределенных	= Новый Структура;
	ИменаРеквизитовСгенерированных	= Новый Структура;

	Для Каждого ВидЭлемента Из ВидыЭлементов Цикл
		ИменаРеквизитовПредопределенных.Вставить(ВидЭлемента,	Новый Массив);
		ИменаРеквизитовСгенерированных.Вставить(ВидЭлемента,	Новый Массив);
	КонецЦикла;

	Реквизиты = Форма.ПолучитьРеквизиты();
	Для Каждого Реквизит Из Реквизиты Цикл
		Для Каждого ВидЭлемента Из ВидыЭлементов Цикл
			Если СтрНачинаетсяС(Реквизит.Имя, ВидЭлемента) И БазоваяПодсистемаКлиентСервер.СФ_ТолькоЦифрыВСтроке(СтрЗаменить(Реквизит.Имя, ВидЭлемента, "")) Тогда
				ИменаРеквизитовПоВидам = ИменаРеквизитовПредопределенных[ВидЭлемента]; // Массив из Строка
				ИменаРеквизитовПоВидам.Добавить(Реквизит.Имя);
			КонецЕсли;

			Если СтрНачинаетсяС(Реквизит.Имя, "КомпоновщикНастроекПользовательскиеНастройкиЭлемент") И СтрЗаканчиваетсяНа(Реквизит.Имя, ВидЭлемента) Тогда
				ИменаРеквизитовПоВидам = ИменаРеквизитовСгенерированных[ВидЭлемента]; // Массив из Строка
				ИменаРеквизитовПоВидам.Добавить(Реквизит.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	ИменаРеквизитов = Новый Структура;
	ИменаРеквизитов.Вставить("Предопределенных",	ИменаРеквизитовПредопределенных);
	ИменаРеквизитов.Вставить("Сгенерированных",		ИменаРеквизитовСгенерированных);

	Возврат ИменаРеквизитов;
КонецФункции

Процедура О_ПодготовитьФормуКПерегруппировкеЭлементов(Форма, УзелИерархииЭлементов, ИменаРеквизитов, ВидыСтилизованныхЭлементов)
	Элементы = Форма.Элементы;

	// Перегруппировка предопределенных элементов формы.
	СвойстваПредопределенныхЭлементов = СтрРазделить("Отступ, Подбор, ВставитьИзБуфера", ", ", Ложь);
	СвойстваПредопределенныхЭлементов.Добавить("");

	Для Каждого ВидЭлемента Из ВидыСтилизованныхЭлементов Цикл
		ИменаПредопределенныхРеквизитов = ИменаРеквизитов.Предопределенных[ВидЭлемента];
		Для Каждого ИмяРеквизита Из ИменаПредопределенныхРеквизитов Цикл
			Для Каждого Свойство Из СвойстваПредопределенныхЭлементов Цикл
				НайденныйЭлемент = Элементы.Найти(ИмяРеквизита + Свойство);
				Если НайденныйЭлемент <> Неопределено Тогда
					Элементы.Переместить(НайденныйЭлемент, Элементы.ПредопределенныеЭлементыНастроек);
					НайденныйЭлемент.Видимость = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	// Удаление динамических элементов формы.
	УзлыИерархииЭлементов = Новый Массив;
	УзлыИерархииЭлементов.Добавить(УзелИерархииЭлементов);

	НайденныйУзел = Элементы.Найти("Дополнительно");
	Если НайденныйУзел <> Неопределено Тогда
		УзлыИерархииЭлементов.Добавить(НайденныйУзел);
	КонецЕсли;

	Исключения = Новый Массив;

	НайденныйУзел = Элементы.Найти("ПредопределенныеНастройки");
	Если НайденныйУзел <> Неопределено Тогда
		Исключения.Добавить(НайденныйУзел);
	КонецЕсли;

	Для Каждого ТекущийУзел Из УзлыИерархииЭлементов Цикл
		ИерархияЭлементов	= ТекущийУзел.ПодчиненныеЭлементы;
		ИндексЭлемента		= ИерархияЭлементов.Количество() - 1;
		Пока ИндексЭлемента >= 0 Цикл
			ЭлементИерархии = ИерархияЭлементов[ИндексЭлемента];
			Если Исключения.Найти(ЭлементИерархии) = Неопределено Тогда
				Элементы.Удалить(ЭлементИерархии);
			КонецЕсли;
			ИндексЭлемента = ИндексЭлемента - 1;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура О_ПерегруппироватьЭлементыФормыНастроек(Форма, Знач УзелИерархииЭлементов, СвойстваЭлементов, ИменаРеквизитов, ВидыСтилизованныхЭлементов)
	ОписаниеНастроек = СвойстваЭлементов.Поля.Скопировать(, "ИндексНастройки, ИдентификаторНастройки, Настройки, ЭлементНастройки, ОписаниеНастройки");

	ЭлементыНастроек = О_ЭлементыФормыНастроек(Форма, ОписаниеНастроек, ИменаРеквизитов);
	О_УстановитьСвойстваЭлементовФормыНастроек(Форма, ЭлементыНастроек, СвойстваЭлементов);

	Если Форма.ТипФормыОтчета <> ТипФормыОтчета.Настройка Тогда
		ЭлементыНастроек.ЗаполнитьЗначения(Ложь, "ЭтоСписок");
	КонецЕсли;

	О_ВынестиСписокВОтдельнуюГруппу(ЭлементыНастроек, СвойстваЭлементов);

	ИдентификаторыГрупп = СвойстваЭлементов.Поля.Скопировать();
	ИдентификаторыГрупп.Свернуть("ИдентификаторГруппы");
	ИдентификаторыГрупп = ИдентификаторыГрупп.ВыгрузитьКолонку("ИдентификаторГруппы");

	Элементы = Форма.Элементы;

	Если ИдентификаторыГрупп.Количество() = 1 Тогда
		УзелИерархииЭлементов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Иначе
		УзелИерархииЭлементов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонецЕсли;

	НомерГруппы = 0;
	Для Каждого ИдентификаторГруппы Из ИдентификаторыГрупп Цикл
		НомерГруппы = НомерГруппы + 1;

		СвойстваГруппы = Неопределено;
		Если Не ЗначениеЗаполнено(ИдентификаторГруппы) Или Не СвойстваЭлементов.Группы.Свойство(ИдентификаторГруппы, СвойстваГруппы) Тогда
			СвойстваГруппы = О_СвойстваГруппыЭлементовФормы();
		КонецЕсли;

		НайденныйУзелИерархии = Элементы.Найти(ИдентификаторГруппы);
		Если НайденныйУзелИерархии <> Неопределено Тогда
			УзелИерархииЭлементов	= НайденныйУзелИерархии;
			НомерГруппы				= 1;
		КонецЕсли;

		ИмяГруппы	= УзелИерархииЭлементов.Имя + "Строка" + НомерГруппы;
		Группа		= ?(ИдентификаторыГрупп.Количество() = 1, УзелИерархииЭлементов, Элементы.Найти(ИмяГруппы));

		Если Группа = Неопределено Тогда
			Группа				= О_ГруппаЭлементовФормыНастроек(Форма, УзелИерархииЭлементов, ИмяГруппы);
			Группа.Заголовок	= СтрШаблон("Строка %1", НомерГруппы);

			ЗаполнитьЗначенияСвойств(Группа, СвойстваГруппы,, "Группировка");
			Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		КонецЕсли;

		ПоискПолейГруппы		= Новый Структура("ИдентификаторГруппы", ИдентификаторГруппы);
		СвойстваПолейГруппы		= СвойстваЭлементов.Поля.НайтиСтроки(ПоискПолейГруппы);
		ЭлементыНастроекГруппы	= О_ЭлементыНастроекГруппы(ЭлементыНастроек, СвойстваПолейГруппы);

		ДополнительныеСвойства	= Форма.Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
		О_ПодготовитьЭлементыФормыНастроекКРаспределению(ЭлементыНастроекГруппы, СвойстваГруппы.Группировка, (Форма.ТипФормыОтчета = ТипФормыОтчета.Основная), ДополнительныеСвойства);

		О_РаспределитьЭлементыФормыНастроек(Форма, Группа, ЭлементыНастроекГруппы);
	КонецЦикла;

	О_ВывестиСтилизованныеЭлементыФормыНастроек(Форма, ЭлементыНастроек, ОписаниеНастроек, ИменаРеквизитов, ВидыСтилизованныхЭлементов);
	О_ДобавитьОтступКолонок(Форма, ЭлементыНастроек, УзелИерархииЭлементов);
КонецПроцедуры

Процедура О_ДобавитьОтступКолонок(Форма, ЭлементыНастроек, УзелИерархииЭлементов)
	Если Не Форма.ТипФормыОтчета = ТипФормыОтчета.Основная Тогда
		Возврат;
	КонецЕсли;

	НастройкиОтчета = Форма.НастройкиОтчета;

	Если НастройкиОтчета.События.ПриОпределенииСвойствЭлементовФормыНастроек Тогда
		Возврат;
	КонецЕсли;

	Элементы = Форма.Элементы;

	Статистика = ЭлементыНастроек.Скопировать();
	Статистика.Свернуть("ИндексНастройки");

	Если Статистика.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;

	ПодчиненныеЭлементы	= УзелИерархииЭлементов.ПодчиненныеЭлементы;
	КоличествоКолонок	= ПодчиненныеЭлементы.Количество();

	Для НомерКолонки = 2 По КоличествоКолонок Цикл
		Колонка = ПодчиненныеЭлементы[НомерКолонки - 1];

		ИмяГруппы						= УзелИерархииЭлементов.Имя + "ПоляКолонки" + НомерКолонки;
		ГруппаПолейКолонки				= О_ГруппаЭлементовФормыНастроек(Форма, УзелИерархииЭлементов, ИмяГруппы);
		ГруппаПолейКолонки.Группировка	= Колонка.Группировка;
		ГруппаПолейКолонки.Заголовок	= СтрШаблон("Поля колонки %1", НомерКолонки);

		ПоляКолонки				= Колонка.ПодчиненныеЭлементы;
		КоличествоПолейКолонки	= ПоляКолонки.Количество();

		Для НомерПоля = 1 По КоличествоПолейКолонки Цикл
			Элементы.Переместить(ПоляКолонки[0], ГруппаПолейКолонки);
		КонецЦикла;

		Колонка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;

		ИмяОтступа			= УзелИерархииЭлементов.Имя + "ОтступПолейКолонки" + НомерКолонки;
		Отступ				= Элементы.Добавить(ИмяОтступа, Тип("ДекорацияФормы"), Колонка);
		Отступ.Заголовок	= "  ";

		Элементы.Переместить(ГруппаПолейКолонки, Колонка);

	КонецЦикла;
КонецПроцедуры

Функция О_ЭлементыФормыНастроек(Форма, ОписаниеНастроек, ИменаРеквизитов)
	Элементы = Форма.Элементы;

	ЭлементыНастроек = О_ПалитраКоллекцииЭлементовНастроек();
	О_НайтиЭлементыФормыНастроек(Форма, Элементы.Временная, ЭлементыНастроек, ОписаниеНастроек);
	О_УдалитьЭлементыЗначенийФлажков(ЭлементыНастроек);

	СводныеСведения = ЭлементыНастроек.Скопировать();
	СводныеСведения.Свернуть("ИндексНастройки", "КонтрольнаяСумма");
	НеполныеЭлементы = СводныеСведения.НайтиСтроки(Новый Структура("КонтрольнаяСумма", 1));

	Поиск			= Новый Структура("ИндексНастройки, СвойствоНастройки");
	ОбщиеСвойства	= "ЭтоПериод, ЭтоФлажок, ЭтоСписок, ТипЗначения, ФормаВыбора, ДоступныеЗначения, ИдентификаторНастройки";

	Для Каждого Запись Из НеполныеЭлементы Цикл
		Элемент							= ЭлементыНастроек.Найти(Запись.ИндексНастройки, "ИндексНастройки");
		Элемент.Поле.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;

		ИсходноеСвойство	= "Значение";
		СвязанноеСвойство	= "Использование";
		Если СтрЗаканчиваетсяНа(Элемент.Поле.Имя, СвязанноеСвойство) Тогда
			ИсходноеСвойство	= "Использование";
			СвязанноеСвойство	= "Значение";
		КонецЕсли;

		ИмяДополнительногоЭлемента = СтрЗаменить(Элемент.Поле.Имя, Элемент.СвойствоНастройки, СвязанноеСвойство);

		ГруппаЭлемента = Элемент.Поле.Родитель;
		Если Элементы.Найти(ИмяДополнительногоЭлемента) <> Неопределено Или ГруппаЭлемента.ПодчиненныеЭлементы.Найти(ИмяДополнительногоЭлемента) <> Неопределено Тогда
			Если Элемент.ЭтоФлажок Тогда
				ИмяДополнительногоЭлемента = ИмяДополнительногоЭлемента + "Дополнительное";
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		ДополнительныйЭлемент							= Элементы.Добавить(ИмяДополнительногоЭлемента, Тип("ДекорацияФормы"), ГруппаЭлемента);
		ДополнительныйЭлемент.Заголовок					= Элемент.Поле.Заголовок;
		ДополнительныйЭлемент.АвтоМаксимальнаяВысота	= Ложь;

		ДополнительнаяЗапись					= ЭлементыНастроек.Добавить();
		ДополнительнаяЗапись.Поле				= ДополнительныйЭлемент;
		ДополнительнаяЗапись.ИндексНастройки	= Запись.ИндексНастройки;
		ДополнительнаяЗапись.СвойствоНастройки	= СвязанноеСвойство;
		ДополнительнаяЗапись.КонтрольнаяСумма	= 1;

		Поиск.ИндексНастройки	= Запись.ИндексНастройки;
		Поиск.СвойствоНастройки	= ИсходноеСвойство;
		СвязанныеЭлементы		= ЭлементыНастроек.НайтиСтроки(Поиск);
		ЗаполнитьЗначенияСвойств(ДополнительнаяЗапись, СвязанныеЭлементы[0], ОбщиеСвойства);
	КонецЦикла;

	О_НайтиЗначенияКакФлажки(Форма, ЭлементыНастроек, ИменаРеквизитов);

	ЭлементыНастроек.Сортировать("ИндексНастройки");

	Возврат ЭлементыНастроек;
КонецФункции

Функция О_ПалитраКоллекцииЭлементовНастроек()
	ОписаниеЧисла		= Новый ОписаниеТипов("Число");
	ОписаниеСтроки		= Новый ОписаниеТипов("Строка");
	ОписаниеПризнака	= Новый ОписаниеТипов("Булево");

	ЭлементыНастроек	= Новый ТаблицаЗначений;
	ЭлементыНастроек.Колонки.Добавить("Порядок",				ОписаниеЧисла);
	ЭлементыНастроек.Колонки.Добавить("ИндексНастройки",		ОписаниеЧисла);
	ЭлементыНастроек.Колонки.Добавить("СвойствоНастройки",		ОписаниеСтроки);
	ЭлементыНастроек.Колонки.Добавить("Поле");
	ЭлементыНастроек.Колонки.Добавить("ИдентификаторНастройки",	ОписаниеСтроки);
	ЭлементыНастроек.Колонки.Добавить("ЭтоПериод",				ОписаниеПризнака);
	ЭлементыНастроек.Колонки.Добавить("ЭтоСписок",				ОписаниеПризнака);
	ЭлементыНастроек.Колонки.Добавить("ЭтоФлажок",				ОписаниеПризнака);
	ЭлементыНастроек.Колонки.Добавить("ЭтоЗначениеКакФлажок",	ОписаниеПризнака);
	ЭлементыНастроек.Колонки.Добавить("ТипЗначения");
	ЭлементыНастроек.Колонки.Добавить("ФормаВыбора",			ОписаниеСтроки);
	ЭлементыНастроек.Колонки.Добавить("ДоступныеЗначения");
	ЭлементыНастроек.Колонки.Добавить("КонтрольнаяСумма",		ОписаниеЧисла);
	ЭлементыНастроек.Колонки.Добавить("НомерКолонки",			ОписаниеЧисла);
	ЭлементыНастроек.Колонки.Добавить("НомерГруппы",			ОписаниеЧисла);

	Возврат ЭлементыНастроек;
КонецФункции

Процедура О_НайтиЭлементыФормыНастроек(Форма, ГруппаЭлементов, ЭлементыНастроек, ОписаниеНастроек)
	ПользовательскиеНастройки = Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;

	ОсновныеСвойства = Новый Структура("Использование, Значение");
	Для Каждого Элемент Из ГруппаЭлементов.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			О_НайтиЭлементыФормыНастроек(Форма, Элемент, ЭлементыНастроек, ОписаниеНастроек);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
			СвойствоНастройки	= Неопределено;
			ИндексНастройки		= ВариантыОтчетовКлиентСервер.О_ИндексЭлементаНастройкиПоПути(Элемент.Имя, СвойствоНастройки);

			ОписаниеНастройкиЭлемента = ОписаниеНастроек.Найти(ИндексНастройки, "ИндексНастройки");
			Если ОписаниеНастройкиЭлемента = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Запись							= ЭлементыНастроек.Добавить();
			Запись.ИндексНастройки			= ИндексНастройки;
			Запись.СвойствоНастройки		= СвойствоНастройки;
			Запись.Поле						= Элемент;
			Запись.ИдентификаторНастройки	= ОписаниеНастройкиЭлемента.ИдентификаторНастройки;

			ЭлементНастройки	= ОписаниеНастройкиЭлемента.ЭлементНастройки;
			ОписаниеНастройки	= ОписаниеНастройкиЭлемента.ОписаниеНастройки;

			Если ОписаниеНастройки <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Запись, ОписаниеНастройки, "ТипЗначения, ФормаВыбора, ДоступныеЗначения");
			КонецЕсли;

			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				Запись.ЭтоПериод = ТипЗнч(ЭлементНастройки.Значение) = Тип("СтандартныйПериод");
				Запись.ЭтоСписок = ОписаниеНастройки <> Неопределено И ОписаниеНастройки.ДоступенСписокЗначений;
			ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Запись.ЭтоПериод = ТипЗнч(ЭлементНастройки.ПравоеЗначение) = Тип("СтандартныйПериод");
				Запись.ЭтоФлажок = ЗначениеЗаполнено(ЭлементНастройки.Представление) Или ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Или ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

				ЭлементПользовательскойНастройки = ПользовательскиеНастройки.Найти(ОписаниеНастройкиЭлемента.ИдентификаторНастройки);

				Запись.ЭтоСписок = Не Запись.ЭтоФлажок И ВариантыОтчетовКлиентСервер.О_ЭтоВидСравненияСписка(ЭлементПользовательскойНастройки.ВидСравнения);
			ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда
				Запись.ЭтоФлажок = ЗначениеЗаполнено(ЭлементНастройки.Представление) Или ЗначениеЗаполнено(ЭлементНастройки.ПредставлениеПользовательскойНастройки);
			КонецЕсли;

			Если ОсновныеСвойства.Свойство(Запись.СвойствоНастройки) Тогда
				Запись.КонтрольнаяСумма = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура О_НайтиЗначенияКакФлажки(Форма, ЭлементыНастроек, ИменаРеквизитов)
	Поиск = Новый Структура;
	Поиск.Вставить("ТипЗначения", Новый ОписаниеТипов("Булево"));
	НайденныеЭлементы = ЭлементыНастроек.Скопировать(Поиск);
	НайденныеЭлементы.Свернуть("ИндексНастройки, ТипЗначения", "КонтрольнаяСумма");

	НайденныеЭлементы = НайденныеЭлементы.НайтиСтроки(Новый Структура("КонтрольнаяСумма", 2));
	Если НайденныеЭлементы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Поиск = Новый Структура("СвойствоНастройки, ИндексНастройки");
	Для Каждого Элемент Из НайденныеЭлементы Цикл
		Поиск.СвойствоНастройки	= "Использование";
		Поиск.ИндексНастройки	= Элемент.ИндексНастройки;

		ЭлементФлажка = ЭлементыНастроек.НайтиСтроки(Поиск);
		Если ЭлементФлажка.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		ЭлементФлажка = ЭлементФлажка[0];

		Если ТипЗнч(ЭлементФлажка.ДоступныеЗначения) = Тип("СписокЗначений") И ЭлементФлажка.ДоступныеЗначения.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(ЭлементФлажка.Поле) <> Тип("ДекорацияФормы") Тогда
			Продолжить;
		КонецЕсли;

		Поиск.СвойствоНастройки = "Значение";

		ЭлементЗначения = ЭлементыНастроек.НайтиСтроки(Поиск);
		Если ЭлементЗначения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		ЭлементФлажка.СвойствоНастройки			= "Значение";
		ЭлементФлажка.ЭтоФлажок					= Истина;
		ЭлементФлажка.ЭтоЗначениеКакФлажок		= Истина;

		ЭлементЗначения							= ЭлементЗначения[0];
		ЭлементЗначения.СвойствоНастройки		= "Использование";
		ЭлементЗначения.ЭтоФлажок				= Истина;
		ЭлементЗначения.ЭтоЗначениеКакФлажок	= Истина;
		ЭлементЗначения.Поле.Видимость			= Ложь;
	КонецЦикла;
КонецПроцедуры

Процедура О_УстановитьСвойстваЭлементовФормыНастроек(Форма, ЭлементыНастроек, СвойстваЭлементов)
	КомпоновщикНастроек = Форма.Отчет.КомпоновщикНастроек;

	#Область УстановкаСвойствЭлементовИспользование

	Исключения = Новый Массив;
	Исключения.Добавить(ВидСравненияКомпоновкиДанных.Равно);
	Исключения.Добавить(ВидСравненияКомпоновкиДанных.Содержит);
	Исключения.Добавить(ВидСравненияКомпоновкиДанных.Заполнено);
	Исключения.Добавить(ВидСравненияКомпоновкиДанных.Подобно);
	Исключения.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
	Исключения.Добавить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);

	НайденныеЭлементы = ЭлементыНастроек.НайтиСтроки(Новый Структура("СвойствоНастройки", "Использование"));
	Для Каждого Элемент Из НайденныеЭлементы Цикл
		Поле			= Элемент.Поле; // ПолеФормы
		СвойстваПоля	= СвойстваЭлементов.Поля.Найти(Элемент.ИндексНастройки, "ИндексНастройки");

		Если ЗначениеЗаполнено(СвойстваПоля.Представление) Тогда
			Поле.Заголовок = СвойстваПоля.Представление;
		КонецЕсли;

		Если ТипЗнч(Поле) = Тип("ПолеФормы") Тогда
			Поле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			Поле.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементНастройки_ПриИзменении");
		ИначеЕсли ТипЗнч(Поле) = Тип("ДекорацияФормы") Тогда
			Поле.Видимость = Истина;
		КонецЕсли;

		Если СтрДлина(Поле.Заголовок) > 40 Тогда
			Поле.ВысотаЗаголовка = 2;
		КонецЕсли;

		ЭлементНастройки = СвойстваПоля.ЭлементНастройки;
		Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Поле.Заголовок = Поле.Заголовок + ":";
		ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Условие = ЭлементНастройки.ВидСравнения;
			Если ЗначениеЗаполнено(ЭлементНастройки.ИдентификаторПользовательскойНастройки) Тогда
				ЭлементПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементНастройки.ИдентификаторПользовательскойНастройки);

				Если ЭлементПользовательскойНастройки <> Неопределено Тогда
					Условие = ЭлементПользовательскойНастройки.ВидСравнения;
				КонецЕсли;
			КонецЕсли;

			Если Исключения.Найти(Условие) <> Неопределено Тогда
				Поле.Заголовок = Поле.Заголовок + ":";
			ИначеЕсли Не ЗначениеЗаполнено(ЭлементНастройки.Представление) Тогда
				Поле.Заголовок = Поле.Заголовок + " (" + НРег(Условие) + "):";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	#КонецОбласти

	#Область УстановкаСвойствЭлементовЭлементыНастроек

	НайденныеЭлементы = ЭлементыНастроек.НайтиСтроки(Новый Структура("СвойствоНастройки", "ВидСравнения"));
	Для Каждого Элемент Из НайденныеЭлементы Цикл
		Поле			= Элемент.Поле; // ПолеФормы
		Поле.Видимость	= Ложь;
	КонецЦикла;

	#КонецОбласти

	#Область УстановкаСвойствЭлементовЗначение

	СвязанныеЭлементы = ЭлементыНастроек.Скопировать(Новый Структура("СвойствоНастройки", "Использование"));

	ПараметрыПодбора			= Новый Соответствие;
	РасширенноеОписаниеТипов	= Новый Соответствие;

	НайденныеЭлементы = ЭлементыНастроек.НайтиСтроки(Новый Структура("СвойствоНастройки", "Значение"));
	Для Каждого Элемент Из НайденныеЭлементы Цикл
		Поле = Элемент.Поле; // ПолеФормы

		СвязанныйЭлемент	= СвязанныеЭлементы.Найти(Элемент.ИндексНастройки, "ИндексНастройки");
		СвязанноеПоле		= СвязанныйЭлемент.Поле; // ПолеФормы

		Если ТипЗнч(Поле) = Тип("ДекорацияФормы") Тогда
			Если СтрЗаканчиваетсяНа(СвязанноеПоле.Заголовок, ":") Тогда
				СвязанноеПоле.Заголовок = Лев(СвязанноеПоле.Заголовок, СтрДлина(СвязанноеПоле.Заголовок) - 1);
			КонецЕсли;

			СвязанноеПоле.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
			Поле.Заголовок						= СвязанноеПоле.Заголовок;
		Иначе // Поле ввода.
			СвойстваПоля = СвойстваЭлементов.Поля.Найти(Элемент.ИндексНастройки, "ИндексНастройки");
			ЗаполнитьЗначенияСвойств(Поле, СвойстваПоля,, "ПоложениеЗаголовка");

			Если Форма.ТипФормыОтчета = ТипФормыОтчета.Основная И Не О_ВыводитьЗаголовкиНастроек(Форма) Тогда
				Если СтрЗаканчиваетсяНа(СвязанноеПоле.Заголовок, ":") Тогда
					Заголовок = Лев(СвязанноеПоле.Заголовок, СтрДлина(СвязанноеПоле.Заголовок) - 1);
				Иначе
					Заголовок = СвязанноеПоле.Заголовок;
				КонецЕсли;

				Поле.ПодсказкаВвода	= Заголовок;
				Поле.Подсказка		= Поле.ПодсказкаВвода;
			Иначе
				Поле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
			КонецЕсли;

			Если ТипЗнч(СвязанноеПоле) = Тип("ДекорацияФормы") Тогда
				СвязанноеПоле.Заголовок = " ";
			Иначе
				СвязанноеПоле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				СвязанноеПоле.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
			КонецЕсли;

			Если Элемент.ЭтоФлажок Тогда
				Поле.Видимость = Ложь;

				Продолжить;
			КонецЕсли;

			Поле.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементНастройки_ПриИзменении");
			Если Элемент.ЭтоСписок Тогда
				Поле.УстановитьДействие("НачалоВыбора", "Подключаемый_ЭлементНастройки_НачалоВыбора");
			КонецЕсли;

			Поле.ФормаВыбора = Элемент.ФормаВыбора;
			Если ЗначениеЗаполнено(Поле.ФормаВыбора) Тогда
				ПараметрыПодбора.Вставить(Элемент.ИндексНастройки, Поле.ФормаВыбора);
			КонецЕсли;

			Результат = ВариантыОтчетовКлиентСервер.О_ДополнитьСписок(Поле.СписокВыбора, Элемент.ДоступныеЗначения, Ложь, Истина);
			Поле.РежимВыбораИзСписка = Не Элемент.ЭтоСписок И Результат <> Неопределено И Результат.Всего > 0;

			Если Поле.РастягиватьПоГоризонтали = Неопределено Тогда
				Поле.РастягиватьПоГоризонтали	= Истина;
				Поле.АвтоМаксимальнаяШирина		= Ложь;
				Поле.МаксимальнаяШирина			= 40;
			КонецЕсли;

			Если Элемент.ТипЗначения = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			РасширенноеОписаниеТипа = О_РасширенноеОписаниеТипов(Элемент.ТипЗначения, Истина, ПараметрыПодбора);
			РасширенноеОписаниеТипов.Вставить(Элемент.ИндексНастройки, РасширенноеОписаниеТипа);

			Поле.ДоступныеТипы		= РасширенноеОписаниеТипа.ОписаниеТиповДляФормы;
			Поле.ОграничениеТипа	= РасширенноеОписаниеТипа.ОписаниеТиповДляФормы;

			Если СтрДлина(Поле.Заголовок) > 40 Тогда
				Поле.ВысотаЗаголовка = 2;
			КонецЕсли;

			Если РасширенноеОписаниеТипа.КоличествоТипов = 1 Тогда
				Если РасширенноеОписаниеТипа.СодержитТипЧисло Тогда
					Поле.КнопкаВыбора = Поле.СписокВыбора.Количество() = 0 Или Элемент.ЭтоСписок;
					Если Поле.РастягиватьПоГоризонтали = Истина Тогда
						Поле.РастягиватьПоГоризонтали = Ложь;
					КонецЕсли;
				ИначеЕсли РасширенноеОписаниеТипа.СодержитТипДата Тогда
					Поле.МаксимальнаяШирина = 25;
				ИначеЕсли РасширенноеОписаниеТипа.СодержитТипБулево Тогда
					Если Поле.СписокВыбора.Количество() = 0 Тогда
						Поле.МаксимальнаяШирина = 5;
					Иначе
						Поле.РастягиватьПоГоризонтали = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ДополнительныеСвойства = КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ПараметрыПодбора",			ПараметрыПодбора);
	ДополнительныеСвойства.Вставить("РасширенноеОписаниеТипов",	РасширенноеОписаниеТипов);

	#КонецОбласти
КонецПроцедуры

Процедура О_ВынестиСписокВОтдельнуюГруппу(ЭлементыНастроек, СвойстваЭлементов)
	Поиск		= Новый Структура("ЭтоСписок", Истина);
	Статистика	= ЭлементыНастроек.Скопировать(Поиск);
	Статистика.Свернуть("ИндексНастройки");

	Если Статистика.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;

	ИндексНастройки	= ЭлементыНастроек.НайтиСтроки(Поиск)[0].ИндексНастройки;
	СвойстваПоля	= СвойстваЭлементов.Поля.Найти(ИндексНастройки, "ИндексНастройки");
	Если ЗначениеЗаполнено(СвойстваПоля.ИдентификаторГруппы) Тогда
		Возврат;
	КонецЕсли;

	ИдентификаторГруппы					= "_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	СвойстваПоля.ИдентификаторГруппы	= ИдентификаторГруппы;
	СвойстваЭлементов.Группы.Вставить(ИдентификаторГруппы, О_СвойстваГруппыЭлементовФормы());
КонецПроцедуры

Функция О_ЭлементыНастроекГруппы(ЭлементыНастроек, СвойстваПолейГруппы)
	ЭлементыНастроекГруппы = ЭлементыНастроек.СкопироватьКолонки();

	Поиск = Новый Структура("ИндексНастройки");
	Для Каждого Свойства Из СвойстваПолейГруппы Цикл
		Поиск.ИндексНастройки = Свойства.ИндексНастройки;
		НайденныеЭлементы = ЭлементыНастроек.НайтиСтроки(Поиск);
		Для Каждого Элемент Из НайденныеЭлементы Цикл
			ЗаполнитьЗначенияСвойств(ЭлементыНастроекГруппы.Добавить(), Элемент);
		КонецЦикла;
	КонецЦикла;

	Возврат ЭлементыНастроекГруппы;
КонецФункции

Процедура О_ПодготовитьЭлементыФормыНастроекКРаспределению(ЭлементыНастроек, Группировка, ЭтоОсновнаяФорма, ДополнительныеСвойства)
	#Область ПередПодготовкой

	Статистика = ЭлементыНастроек.Скопировать();
	Статистика.Свернуть("ИндексНастройки");

	КоличествоКолонок = 1;
	Если Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно Тогда
		КоличествоКолонок = Мин(?(ЭтоОсновнаяФорма, 3, 2), Статистика.Количество());
	ИначеЕсли Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда Тогда
		КоличествоКолонок = Статистика.Количество();
	КонецЕсли;
	КоличествоКолонок = Макс(1, КоличествоКолонок);

	О_УпорядочитьЭлементыФормыНастроек(ЭлементыНастроек, ДополнительныеСвойства);

	#КонецОбласти

	#Область УстановкаНомеровКолонок

	Статистика = ЭлементыНастроек.Скопировать();
	Статистика.Свернуть("Порядок, ИндексНастройки");

	КоличествоЭлементов	= Статистика.Количество();
	Индекс				= 0;
	ГраницаСвойств		= КоличествоЭлементов - 1;

	Шаг				= КоличествоЭлементов / КоличествоКолонок;
	ГраницаРазрыва	= ?(КоличествоЭлементов % КоличествоКолонок = 0, Шаг - 1, Цел(Шаг));
	Шаг				= ?(ГраницаРазрыва = 0, 1, Окр(Шаг));

	Поиск = Новый Структура("ИндексНастройки");
	Для НомерКолонки = 1 По КоличествоКолонок Цикл
		Пока Индекс <= ГраницаРазрыва Цикл
			Поиск.ИндексНастройки = Статистика[Индекс].ИндексНастройки;
			НайденныеЭлементы = ЭлементыНастроек.НайтиСтроки(Поиск);
			Для Каждого Элемент Из НайденныеЭлементы Цикл
				Элемент.НомерКолонки = НомерКолонки;
			КонецЦикла;
			Индекс = Индекс + 1;
		КонецЦикла;

		ГраницаРазрыва = ГраницаРазрыва + Шаг;
		Если ГраницаРазрыва > ГраницаСвойств Тогда
			ГраницаРазрыва = ГраницаСвойств;
		КонецЕсли;
	КонецЦикла;

	О_РаспределитьСпискиПоКолонкамПропорционально(ЭлементыНастроек, КоличествоКолонок);

	#КонецОбласти

	#Область УстановкаНомеровГрупп

	ВариантыПоиска = Новый Массив;
	ВариантыПоиска.Добавить(Новый Структура("НомерГруппы, ЭтоФлажок, ЭтоСписок", 0, Ложь, Ложь));
	ВариантыПоиска.Добавить(Новый Структура("НомерГруппы, ЭтоФлажок, ЭтоСписок", 0, Истина, Ложь));
	ВариантыПоиска.Добавить(Новый Структура("НомерГруппы, ЭтоФлажок, ЭтоСписок", 0, Ложь, Истина));

	НомерГруппы = 1;
	Для Каждого Поиск Из ВариантыПоиска Цикл
		НайденныеЭлементы = ЭлементыНастроек.НайтиСтроки(Поиск);

		ПредыдущийИндекс = Неопределено;
		Для Каждого Элемент Из НайденныеЭлементы Цикл
			Если Элемент.ЭтоФлажок Или Элемент.ЭтоСписок Тогда
				Индекс = Элемент.ИндексНастройки;
			Иначе
				Индекс = ЭлементыНастроек.Индекс(Элемент);
			КонецЕсли;

			Если ПредыдущийИндекс = Неопределено Тогда
				ПредыдущийИндекс = Индекс;
			КонецЕсли;

			Если ((Элемент.ЭтоФлажок Или Элемент.ЭтоСписок) И Индекс <> ПредыдущийИндекс) Или (Не Элемент.ЭтоФлажок И Не Элемент.ЭтоСписок И Индекс > ПредыдущийИндекс + 1) Тогда
				НомерГруппы = НомерГруппы + 1;
			КонецЕсли;

			Элемент.НомерГруппы	= НомерГруппы;
			ПредыдущийИндекс	= Индекс;
		КонецЦикла;

		НомерГруппы = НомерГруппы + 1;
	КонецЦикла;

	#КонецОбласти
КонецПроцедуры

Процедура О_УпорядочитьЭлементыФормыНастроек(ЭлементыНастроек, ДополнительныеСвойства)
	ПорядокЭлементовНастроек = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(ДополнительныеСвойства, "ПорядокЭлементовНастроек", Новый Соответствие);

	Поиск = Новый Структура("ИдентификаторНастройки");

	Если ПорядокЭлементовНастроек.Количество() = 0 Тогда
		НайденныеЭлементы = ЭлементыНастроек.НайтиСтроки(Новый Структура("ЭтоПериод", Истина));

		Для Каждого Элемент Из НайденныеЭлементы Цикл
			Элемент.Порядок = -1;
		КонецЦикла;

		Порядок = 0;
	Иначе
		Для Каждого ПорядокЭлемента Из ПорядокЭлементовНастроек Цикл
			Поиск.ИдентификаторНастройки	= ПорядокЭлемента.Ключ;
			НайденныеЭлементы				= ЭлементыНастроек.НайтиСтроки(Поиск);

			Для Каждого Элемент Из НайденныеЭлементы Цикл
				Элемент.Порядок = ПорядокЭлемента.Значение;
			КонецЦикла;
		КонецЦикла;

		ИндексЭлементовНастроек = ЭлементыНастроек.Скопировать();
		ИндексЭлементовНастроек.Свернуть("Порядок, ИдентификаторНастройки");
		ИндексЭлементовНастроек.Сортировать("Порядок");

		Граница = ИндексЭлементовНастроек.Количество() - 1;
		Порядок = ?(Граница >= 0, ИндексЭлементовНастроек[Граница].Порядок, 0);
	КонецЕсли;

	Для Каждого Элемент Из ЭлементыНастроек Цикл
		Если Элемент.Порядок <> 0 Тогда
			Продолжить;
		КонецЕсли;

		Порядок = Порядок + 1;

		Поиск.ИдентификаторНастройки	= Элемент.ИдентификаторНастройки;
		СвязанныеЭлементы				= ЭлементыНастроек.НайтиСтроки(Поиск);

		Для Каждого СвязанныйЭлемент Из СвязанныеЭлементы Цикл
			СвязанныйЭлемент.Порядок = Порядок;
		КонецЦикла;
	КонецЦикла;

	ЭлементыНастроек.Сортировать("Порядок, ИндексНастройки");

	АктуальныйПорядокЭлементовНастроек = ЭлементыНастроек.Скопировать();
	АктуальныйПорядокЭлементовНастроек.Свернуть("Порядок, ИдентификаторНастройки");

	Для Каждого ПорядокЭлемента Из АктуальныйПорядокЭлементовНастроек Цикл
		ПорядокЭлементовНастроек.Вставить(ПорядокЭлемента.ИдентификаторНастройки, ПорядокЭлемента.Порядок);
	КонецЦикла;

	ДополнительныеСвойства.Вставить("ПорядокЭлементовНастроек", ПорядокЭлементовНастроек);
КонецПроцедуры

Процедура О_РаспределитьСпискиПоКолонкамПропорционально(ЭлементыНастроек, КоличествоКолонок)
	Если КоличествоКолонок <> 2 Или ЭлементыНастроек.Найти(Истина, "ЭтоСписок") = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОписаниеЧисла = Новый ОписаниеТипов("Число");

	Статистика = ЭлементыНастроек.Скопировать();
	Статистика.Свернуть("ИндексНастройки, ЭтоСписок, НомерКолонки");
	Статистика.Колонки.Добавить("Списков", ОписаниеЧисла);

	Для Каждого Элемент Из Статистика Цикл
		Элемент.Списков = Число(Элемент.ЭтоСписок);
	КонецЦикла;

	Статистика.Свернуть("НомерКолонки", "Списков");

	Списков = Статистика.Итог("Списков");
	Если Списков = 1 Тогда
		Возврат;
	КонецЕсли;

	Статистика.Сортировать("Списков");

	Среднее		= Окр(Списков / Статистика.Количество(), 0, РежимОкругления.Окр15как10);
	Приемник	= Статистика[0];
	Источник	= Статистика[Статистика.Количество() - 1];

	Отклонение = Среднее - Приемник.Списков;
	Если Отклонение = 0 Тогда
		Возврат;
	КонецЕсли;

	Поиск				= Новый Структура("ЭтоСписок, НомерКолонки", Истина, Источник.НомерКолонки);
	ЭлементыИсточника	= ЭлементыНастроек.Скопировать(Поиск);
	ЭлементыИсточника.Свернуть("ИндексНастройки");
	Если Приемник.НомерКолонки > Источник.НомерКолонки Тогда
		ЭлементыИсточника.Сортировать("ИндексНастройки Убыв");
	КонецЕсли;

	Отклонение	= Мин(Отклонение, ЭлементыИсточника.Количество());
	Поиск		= Новый Структура("ИндексНастройки");

	Индекс = 0;
	Пока Отклонение > 0 Цикл
		Поиск.ИндексНастройки	= ЭлементыИсточника[Индекс].ИндексНастройки;
		СвязанныеЭлементы		= ЭлементыНастроек.НайтиСтроки(Поиск);
		Для Каждого Элемент Из СвязанныеЭлементы Цикл
			Элемент.НомерКолонки = Приемник.НомерКолонки;
		КонецЦикла;

		Индекс		= Индекс + 1;
		Отклонение	= Отклонение - 1;
	КонецЦикла;
КонецПроцедуры

Процедура О_РаспределитьЭлементыФормыНастроек(Форма, Знач Группа, ЭлементыНастроек)
	КоличествоКолонок = 0;
	Если ЭлементыНастроек.Количество() > 0 Тогда
		КоличествоКолонок = ЭлементыНастроек[ЭлементыНастроек.Количество() - 1].НомерКолонки;
	КонецЕсли;

	Элементы = Форма.Элементы;

	Для НомерКолонки = 1 По КоличествоКолонок Цикл
		ПризнакиЭлементов = ЭлементыНастроек.Скопировать(Новый Структура("НомерКолонки", НомерКолонки));
		ПризнакиЭлементов.Свернуть("ЭтоФлажок, ЭтоСписок, НомерГруппы");

		ТолькоПоляВвода = ПризнакиЭлементов.Найти(Истина, "ЭтоФлажок") = Неопределено И ПризнакиЭлементов.Найти(Истина, "ЭтоСписок") = Неопределено;

		ИмяКолонки	= Группа.Имя + "Колонка" + НомерКолонки;
		Колонка		= ?(КоличествоКолонок = 1, Группа, Элементы.Найти(ИмяКолонки));
		Если Колонка = Неопределено Тогда
			Колонка				= О_ГруппаЭлементовФормыНастроек(Форма, Группа, ИмяКолонки);
			Колонка.Заголовок	= СтрШаблон("Колонка %1", НомерКолонки);

			Если ТолькоПоляВвода Тогда
				Колонка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			КонецЕсли;
		КонецЕсли;

		Если НомерКолонки > 1 Тогда
			Колонка.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		КонецЕсли;

		Если ТолькоПоляВвода Тогда
			О_РаспределитьЭлементыФормыНастроекПоСвойствам(Форма, Колонка, ЭлементыНастроек, НомерКолонки);

			Продолжить;
		КонецЕсли;

		НомерСтроки = 0;
		Для Каждого Признаки Из ПризнакиЭлементов Цикл
			НомерСтроки	= НомерСтроки + 1;
			Родитель	= О_ИерархияЭлементовФормыНастроек(Форма, Колонка, Признаки, НомерСтроки, НомерКолонки);

			О_РаспределитьЭлементыФормыНастроекПоСвойствам(Форма, Родитель, ЭлементыНастроек, НомерКолонки, Признаки.НомерГруппы);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура О_РаспределитьЭлементыФормыНастроекПоСвойствам(Форма, Родитель, ЭлементыНастроек, НомерКолонки, НомерГруппы = Неопределено)
	Элементы = Форма.Элементы;

	СвойстваНастроек = СтрРазделить("Использование, ВидСравнения, Значение", ", ", Ложь);
	Для Каждого СвойствоНастройки Из СвойстваНастроек Цикл
		ИмяГруппы			= Родитель.Имя + СвойствоНастройки;
		Группа				= О_ГруппаЭлементовФормыНастроек(Форма, Родитель, ИмяГруппы);
		Группа.Заголовок	= СвойствоНастройки;
		Группа.Видимость	= (СвойствоНастройки <> "ВидСравнения");

		Поиск = Новый Структура("СвойствоНастройки, НомерКолонки", СвойствоНастройки, НомерКолонки);
		Если НомерГруппы <> Неопределено Тогда
			Поиск.Вставить("НомерГруппы", НомерГруппы);
		КонецЕсли;

		НайденныеЭлементы = ЭлементыНастроек.НайтиСтроки(Поиск);
		Для Каждого Элемент Из НайденныеЭлементы Цикл
			Группа.Объединенная = СвойствоНастройки = "Использование" И Элемент.ЭтоСписок;
			Элементы.Переместить(Элемент.Поле, Группа);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура О_СброситьПредопределенныеПараметрыВывода(Настройки)
	СтандартныеСвойства = О_СтандартныеСвойстваПредопределенныхПараметровВывода(Настройки);

	Если СтандартныеСвойства = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыВывода = Настройки.ПараметрыВывода.Элементы;

	Для Каждого СвойстваПараметра Из СтандартныеСвойства Цикл
		НайденныйПараметр = ПараметрыВывода.Найти(СвойстваПараметра.Идентификатор);

		Если НайденныйПараметр = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(НайденныйПараметр, СвойстваПараметра);
	КонецЦикла;
КонецПроцедуры

Процедура О_СохранитьСтандартныеЗначенияПредопределенныхПараметровВывода(Настройки)
	СтандартныеСвойства = О_СтандартныеСвойстваПредопределенныхПараметровВывода(Настройки);

	Если СтандартныеСвойства <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтандартныеСвойства = Новый Массив;

	ПараметрыВывода					= Настройки.ПараметрыВывода.Элементы;
	ИдентификаторыПараметровВывода	= СтрРазделить("TITLE, TITLEOUTPUT, DATAPARAMETERSOUTPUT, FILTEROUTPUT", ", ", Ложь);

	Для Каждого Идентификатор Из ИдентификаторыПараметровВывода Цикл
		НайденныйПараметр = ПараметрыВывода.Найти(Идентификатор);

		Если НайденныйПараметр = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СвойстваПараметра				= О_СтандартныеСвойстваПредопределенногоПараметраВывода();
		ЗаполнитьЗначенияСвойств(СвойстваПараметра, НайденныйПараметр);
		СвойстваПараметра.Идентификатор	=  Идентификатор;

		СтандартныеСвойства.Добавить(СвойстваПараметра);
	КонецЦикла;

	Если СвойстваПараметра.Количество() > 0 Тогда
		Настройки.ДополнительныеСвойства.Вставить("СтандартныеСвойстваПредопределенныхПараметровВывода", СтандартныеСвойства);
	КонецЕсли;
КонецПроцедуры

Процедура О_УдалитьЭлементыЗначенийФлажков(ЭлементыНастроек)
	Поиск				= Новый Структура("СвойствоНастройки, ЭтоФлажок", "Значение", Истина);
	НайденныеЭлементы	= ЭлементыНастроек.НайтиСтроки(Поиск);

	Для Каждого Элемент Из НайденныеЭлементы Цикл
		ЭлементыНастроек.Удалить(Элемент);
	КонецЦикла;
КонецПроцедуры

Функция О_ИерархияЭлементовФормыНастроек(Форма, Родитель, Признаки, НомерСтроки, НомерКолонки)
	ИмяСтроки			= Родитель.Имя + "Строка" + НомерСтроки;
	Строка				= О_ГруппаЭлементовФормыНастроек(Форма, Родитель, ИмяСтроки);
	Строка.Заголовок	= СтрШаблон("Строка %1.%2", НомерКолонки, НомерСтроки);

	Если Не Признаки.ЭтоСписок Тогда
		Строка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	КонецЕсли;

	Если Признаки.ЭтоФлажок Или Признаки.ЭтоСписок Тогда
		Возврат Строка;
	КонецЕсли;

	ИмяКолонки			= Строка.Имя + "Колонка1";
	Колонка				= О_ГруппаЭлементовФормыНастроек(Форма, Строка, ИмяКолонки);
	Колонка.Заголовок	= СтрШаблон("Колонка %1.%2.1", НомерКолонки, НомерСтроки);

	Колонка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;

	Возврат Колонка;
КонецФункции

Функция О_ВыводитьЗаголовкиНастроек(Форма)
	РеквизитыФормы = Форма.ПолучитьРеквизиты();
	ИмяИскомогоРеквизита = "ВыводитьЗаголовкиНастроек";

	Для Каждого Реквизит Из РеквизитыФормы Цикл
		Если Реквизит.Имя = ИмяИскомогоРеквизита Тогда
			Возврат Форма[ИмяИскомогоРеквизита];
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;
КонецФункции

Функция О_ГруппаЭлементовФормыНастроек(Форма, Родитель, ИмяГруппы)
	Элементы = Форма.Элементы;

	Группа = Элементы.Найти(ИмяГруппы);
	Если Группа <> Неопределено Тогда
		Возврат Группа;
	КонецЕсли;

	Группа						= Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
	Группа.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
	Группа.ОтображатьЗаголовок	= Ложь;
	Группа.Отображение			= ОтображениеОбычнойГруппы.Нет;
	Группа.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;

	Если (Форма.ТипФормыОтчета = ТипФормыОтчета.Основная) И Не О_ВыводитьЗаголовкиНастроек(Форма) Тогда
		Группа.Объединенная = Ложь;
	КонецЕсли;

	Возврат Группа;
КонецФункции

Процедура О_ВывестиСтилизованныеЭлементыФормыНастроек(Форма, ЭлементыНастроек, ОписаниеНастроек, ИменаРеквизитов, ВидыЭлементов)
	// Изменение реквизитов.
	ПутьКДаннымЭлементов = Новый Структура("ПоИмени, ПоИндексу", Новый Соответствие, Новый Соответствие);

	РеквизитыДобавляемые	= О_РеквизитыЭлементовНастроекДобавляемые(ЭлементыНастроек, ВидыЭлементов, ИменаРеквизитов, ПутьКДаннымЭлементов);
	РеквизитыУдаляемые		= О_РеквизитыЭлементовНастроекУдаляемые(ВидыЭлементов, ИменаРеквизитов, ПутьКДаннымЭлементов);

	Форма.ИзменитьРеквизиты(РеквизитыДобавляемые, РеквизитыУдаляемые);
	О_УдалитьКомандыЭлементовНастроек(Форма, РеквизитыУдаляемые);

	Форма.ПутьКДаннымЭлементов = ПутьКДаннымЭлементов;

	// Изменение элементов.
	О_ВывестиПериодыНастроек(Форма, ЭлементыНастроек, ИменаРеквизитов);
	О_ВывестиСпискиНастроек(Форма, ЭлементыНастроек, ОписаниеНастроек, ИменаРеквизитов);
	О_ВывестиЗначенияКакПоляФлажков(Форма, ЭлементыНастроек, ИменаРеквизитов);
КонецПроцедуры

Функция О_РеквизитыЭлементовНастроекДобавляемые(ЭлементыНастроек, ВидыЭлементов, ИменаРеквизитов, ПутьКДаннымЭлементов)
	РеквизитыДобавляемые = Новый Массив;

	ТипыЭлементов = Новый Структура;
	ТипыЭлементов.Вставить("Период", Новый ОписаниеТипов("СтандартныйПериод"));
	ТипыЭлементов.Вставить("Список", Новый ОписаниеТипов("СписокЗначений"));
	ТипыЭлементов.Вставить("Флажок", Новый ОписаниеТипов("Булево"));

	ПризнакиВидовЭлементов = Новый Структура("Период, Список, Флажок", "ЭтоПериод", "ЭтоСписок", "ЭтоЗначениеКакФлажок");
	СвойстваВидовЭлементов = Новый Структура("Период, Список, Флажок", "Значение", "Значение", "Использование");

	Для Каждого ВидЭлемента Из ВидыЭлементов Цикл
		Признак = ПризнакиВидовЭлементов[ВидЭлемента];

		Сгенерированные		= ИменаРеквизитов.Сгенерированных[ВидЭлемента];
		Предопределенные	= ИменаРеквизитов.Предопределенных[ВидЭлемента];

		ИндексПредопределенных	= -1;
		ГраницаПредопределенных	= Предопределенные.ВГраница();

		Поиск = Новый Структура;
		Поиск.Вставить(Признак,				Истина);
		Поиск.Вставить("СвойствоНастройки",	"Значение");

		НайденныеЭлементы = ЭлементыНастроек.Скопировать(Поиск);
		Для Каждого Элемент Из НайденныеЭлементы Цикл
			Если ГраницаПредопределенных >= НайденныеЭлементы.Индекс(Элемент) Тогда
				ИндексПредопределенных = ИндексПредопределенных + 1;
				ПутьКДаннымЭлементов.ПоИмени.Вставить(Предопределенные[ИндексПредопределенных], Элемент.ИндексНастройки);
				ПутьКДаннымЭлементов.ПоИндексу.Вставить(Элемент.ИндексНастройки, Предопределенные[ИндексПредопределенных]);

				Продолжить;
			КонецЕсли;

			Поле				= Элемент.Поле; // ПолеФормы
			ЗаголовокЭлемента	= Поле.Заголовок;
			Если СтрЗаканчиваетсяНа(Поле.Имя, СвойстваВидовЭлементов[ВидЭлемента]) Тогда
				Позиция				= СтрНайти(Поле.Имя, СвойстваВидовЭлементов[ВидЭлемента], НаправлениеПоиска.СКонца);
				ШаблонИмениЭлемента	= Лев(Поле.Имя, Позиция - 1) + "%1";
			Иначе
				ШаблонИмениЭлемента	= Поле.Имя;
			КонецЕсли;

			ИмяРеквизита = СтрШаблон(ШаблонИмениЭлемента, ВидЭлемента);
			Если Сгенерированные.Найти(ИмяРеквизита) = Неопределено Тогда
				ТипЭлемента = Элемент.ТипЗначения;
				ТипыЭлементов.Свойство(ВидЭлемента, ТипЭлемента);

				РеквизитыДобавляемые.Добавить(Новый РеквизитФормы(ИмяРеквизита, ТипЭлемента,, ЗаголовокЭлемента));
			КонецЕсли;

			ПутьКДаннымЭлементов.ПоИмени.Вставить(ИмяРеквизита, Элемент.ИндексНастройки);
			ПутьКДаннымЭлементов.ПоИндексу.Вставить(Элемент.ИндексНастройки, ИмяРеквизита);
		КонецЦикла;
	КонецЦикла;

	Возврат РеквизитыДобавляемые;
КонецФункции

Функция О_СтандартныеСвойстваПредопределенногоПараметраВывода()
	Возврат Новый Структура("Идентификатор, Использование, Значение", "", Ложь, Неопределено);
КонецФункции

Функция О_СтандартныеСвойстваПредопределенныхПараметровВывода(Настройки)
	Возврат БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(Настройки.ДополнительныеСвойства, "СтандартныеСвойстваПредопределенныхПараметровВывода");
КонецФункции

Функция О_РеквизитыЭлементовНастроекУдаляемые(ВидыЭлементов, ИменаРеквизитов, ПутьКДаннымЭлементов)
	РеквизитыУдаляемые = Новый Массив;

	Для Каждого ВидЭлемента Из ВидыЭлементов Цикл
		Сгенерированные = ИменаРеквизитов.Сгенерированных[ВидЭлемента];
		Для Каждого ИмяРеквизита Из Сгенерированные Цикл
			Если ПутьКДаннымЭлементов.ПоИмени[ИмяРеквизита] = Неопределено Тогда
				РеквизитыУдаляемые.Добавить(ИмяРеквизита);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат РеквизитыУдаляемые;
КонецФункции

Процедура О_УдалитьКомандыЭлементовНастроек(Форма, РеквизитыУдаляемые)
	СуффиксыКоманд = СтрРазделить("ВыбратьПериод, Подбор, ВставитьИзБуфера", ", ", ЛОЖЬ);

	Для Каждого ИмяРеквизита Из РеквизитыУдаляемые Цикл
		Для Каждого Суффикс Из СуффиксыКоманд Цикл
			Команда = Форма.Команды.Найти(ИмяРеквизита + Суффикс);
			Если Команда <> Неопределено Тогда
				Форма.Команды.Удалить(Команда);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура О_ВывестиПериодыНастроек(Форма, ЭлементыНастроек, ИменаРеквизитов)
	НайденныеЭлементы = ЭлементыНастроек.НайтиСтроки(Новый Структура("ЭтоПериод, СвойствоНастройки", Истина, "Значение"));
	Если НайденныеЭлементы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Элементы						= Форма.Элементы;
	ИменаРеквизитовПредопределенных	= ИменаРеквизитов.Предопределенных.Период;

	ВариантПредставления		= Форма.НастройкиОтчета.ВариантПредставленияПериода;
	ЭтоСтандартноеПредставление	= (ВариантПредставления = Перечисления.ВариантыПредставленияПериода.Стандартный);

	Для Каждого Элемент Из НайденныеЭлементы Цикл
		СвязанныеЭлементы = ЭлементыНастроек.НайтиСтроки(Новый Структура("ИндексНастройки", Элемент.ИндексНастройки));
		Для Каждого СвязанныйЭлемент Из СвязанныеЭлементы Цикл
			СвязанныйЭлемент.Поле.Видимость = (СвязанныйЭлемент.СвойствоНастройки = "Использование");
		КонецЦикла;

		Период = О_ИнициализироватьПериод(Форма, Элемент.ИндексНастройки);

		Поле		= Элемент.Поле;
		Родитель	= Поле.Родитель; // ГруппаФормы

		СледующийЭлемент	= Неопределено;
		ИндексЭлемента		= Родитель.ПодчиненныеЭлементы.Индекс(Поле);
		Если Родитель.ПодчиненныеЭлементы.Количество() > ИндексЭлемента + 1 Тогда
			СледующийЭлемент = Родитель.ПодчиненныеЭлементы.Получить(ИндексЭлемента + 1);
		КонецЕсли;

		ИмяРеквизита = Форма.ПутьКДаннымЭлементов.ПоИндексу[Элемент.ИндексНастройки];
		Если ИменаРеквизитовПредопределенных.Найти(ИмяРеквизита) <> Неопределено Тогда
			НайденныйЭлемент = Элементы.Найти(ИмяРеквизита);
			Элементы.Переместить(НайденныйЭлемент, Родитель, СледующийЭлемент);
			НайденныйЭлемент.Видимость = Истина;

			Для Каждого ЭлементПериода Из НайденныйЭлемент.ПодчиненныеЭлементы Цикл
				ТипЭлементаПериода = ТипЗнч(ЭлементПериода);

				Если ТипЭлементаПериода = Тип("ПолеФормы") Тогда
					ЭлементПериода.Заголовок		= О_ЗаголовокЭлементаПериода(ЭлементПериода.Имя, Поле.Заголовок);
					ЭлементПериода.Подсказка		= ЭлементПериода.Заголовок;
					ЭлементПериода.ПодсказкаВвода	= ЭлементПериода.Заголовок;
				КонецЕсли;

				Если ЭтоСтандартноеПредставление Тогда
					ЭлементПериода.Видимость = ТипЭлементаПериода <> Тип("КнопкаФормы") Или (ТипЭлементаПериода = Тип("КнопкаФормы") И СтрНачинаетсяС(ЭлементПериода.ИмяКоманды, "ВыбратьПериод"));
				Иначе
					ЭлементПериода.Видимость = (ТипЭлементаПериода = Тип("КнопкаФормы") Или ТипЭлементаПериода = Тип("ГруппаФормы"));
				КонецЕсли;

				О_УстановитьСвойстваКнопкиВыбораПериода(ЭлементПериода, Период, ЭтоСтандартноеПредставление);
			КонецЦикла;

			Продолжить;
		КонецЕсли;

		ШаблонИмениЭлемента = СтрЗаменить(Поле.Имя, "Значение", "%1%2");

		Группа = О_ГруппаЭлементовПериода(Элементы, Родитель, СледующийЭлемент, ШаблонИмениЭлемента, Поле.Заголовок);

		О_ДобавитьКомандуСдвигаПериода(Форма, Группа, ШаблонИмениЭлемента, ЭтоСтандартноеПредставление, -1);
		О_ДобавитьПолеПериода(Элементы, Группа, ШаблонИмениЭлемента, "ДатаНачала", Поле.Заголовок, ЭтоСтандартноеПредставление);

		ИмяЭлемента = СтрШаблон(ШаблонИмениЭлемента, "Разделитель");
		Разделитель = Элементы.Найти(ИмяЭлемента);
		Если Разделитель = Неопределено Тогда
			Разделитель = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), Группа);
		КонецЕсли;
		Разделитель.Вид			= ВидДекорацииФормы.Надпись;
		Разделитель.Заголовок	= Символ(8211); // Среднее тире (en dash).
		Разделитель.Видимость	= ЭтоСтандартноеПредставление;

		О_ДобавитьПолеПериода(Элементы, Группа, ШаблонИмениЭлемента, "ДатаОкончания", Поле.Заголовок, ЭтоСтандартноеПредставление);
		О_ДобавитьКомандуВыбораПериода(Форма, Группа, ШаблонИмениЭлемента, Период, ЭтоСтандартноеПредставление);
		О_ДобавитьКомандуСдвигаПериода(Форма, Группа, ШаблонИмениЭлемента, ЭтоСтандартноеПредставление);
	КонецЦикла;
КонецПроцедуры

Функция О_ГруппаЭлементовПериода(Элементы, Родитель, СледующийЭлемент, ШаблонИмени, Заголовок)
	ИмяЭлемента = СтрШаблон(ШаблонИмени, "", "Период");

	Группа = Элементы.Найти(ИмяЭлемента);
	Если Группа = Неопределено Тогда
		Группа = Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), Родитель);
	КонецЕсли;
	Группа.Вид							= ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Отображение					= ОтображениеОбычнойГруппы.Нет;
	Группа.Группировка					= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Группа.Заголовок					= Заголовок;
	Группа.ОтображатьЗаголовок			= Ложь;
	Группа.РазрешитьИзменениеСостава	= Ложь;

	Если СледующийЭлемент <> Неопределено Тогда
		Элементы.Переместить(Группа, Родитель, СледующийЭлемент);
	КонецЕсли;

	Возврат Группа;
КонецФункции

Процедура О_ДобавитьПолеПериода(Элементы, Группа, ШаблонИмени, Свойство, ЗаголовокЭлементаНастройки, ЭтоСтандартноеПредставление)
	ИмяЭлемента = СтрШаблон(ШаблонИмени, "", Свойство);

	Элемент = Элементы.Найти(ИмяЭлемента);
	Если Элемент = Неопределено Тогда
		Элемент = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Группа);
	КонецЕсли;
	Элемент.Вид							= ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным					= СтрШаблон(ШаблонИмени, "Период.", Свойство);
	Элемент.Ширина						= 9;
	Элемент.РастягиватьПоГоризонтали	= Ложь;
	Элемент.КнопкаВыбора				= Истина;
	Элемент.КнопкаОткрытия				= Ложь;
	Элемент.КнопкаОчистки				= Ложь;
	Элемент.КнопкаРегулирования			= Ложь;
	Элемент.РедактированиеТекста		= Истина;
	Элемент.Заголовок					= О_ЗаголовокЭлементаПериода(Свойство, ЗаголовокЭлементаНастройки);
	Элемент.Подсказка					= Элемент.Заголовок;
	Элемент.ПодсказкаВвода				= Элемент.Заголовок;
	Элемент.ПоложениеЗаголовка			= ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_Период_ПриИзменении");
	Элемент.Видимость					= ЭтоСтандартноеПредставление;
КонецПроцедуры

Функция О_ЗаголовокЭлементаПериода(Свойство, ЗаголовокЭлементаНастройки)
	Возврат СтрШаблон("%1 (дата %2)", ЗаголовокЭлементаНастройки, ?(СтрЗаканчиваетсяНа(НРег(Свойство), НРег("ДатаНачала")), "начала", "окончания"));
КонецФункции

Процедура О_ДобавитьКомандуСдвигаПериода(Форма, Группа, ШаблонИмени, ЭтоСтандартноеПредставление, НаправлениеСдвига = 1)
	ИмяЭлемента = СтрШаблон(ШаблонИмени, "", ?(НаправлениеСдвига > 0, "СдвинутьПериодВперед", "СдвинутьПериодНазад"));

	Команда = Форма.Команды.Найти(ИмяЭлемента);
	Если Команда = Неопределено Тогда
		Команда = Форма.Команды.Добавить(ИмяЭлемента);
	КонецЕсли;

	Если НаправлениеСдвига > 0 Тогда
		Команда.Действие	= "Подключаемый_СдвинутьПериодВперед";
		Команда.Заголовок	= ">";
		Команда.Подсказка	= "Сдвинуть вперед";
	Иначе
		Команда.Действие	= "Подключаемый_СдвинутьПериодНазад";
		Команда.Заголовок	= "<";
		Команда.Подсказка	= "Сдвинуть назад";
	КонецЕсли;

	Кнопка = Форма.Элементы.Найти(ИмяЭлемента);
	Если Кнопка = Неопределено Тогда
		Кнопка = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Группа);
	КонецЕсли;
	Кнопка.ИмяКоманды			= ИмяЭлемента;
	Кнопка.ОтображениеФигуры	= ОтображениеФигурыКнопки.ПриАктивности;
	Кнопка.Шрифт				= Метаданные.ЭлементыСтиля.ВажнаяНадписьШрифт.Значение;
	Кнопка.Видимость			= Не ЭтоСтандартноеПредставление;
КонецПроцедуры

Процедура О_ДобавитьКомандуВыбораПериода(Форма, Группа, ШаблонИмени, Период, ЭтоСтандартноеПредставление)
	ИмяЭлемента = СтрШаблон(ШаблонИмени, "", "ВыбратьПериод");

	Команда = Форма.Команды.Найти(ИмяЭлемента);
	Если Команда = Неопределено Тогда
		Команда = Форма.Команды.Добавить(ИмяЭлемента);
	КонецЕсли;
	Команда.Действие	= "Подключаемый_ВыбратьПериод";
	Команда.Заголовок	= "Выбрать период...";
	Команда.Подсказка	= Команда.Заголовок;
	Команда.Отображение	= ОтображениеКнопки.Картинка;
	Команда.Картинка	= БиблиотекаКартинок.ПолеВводаВыбрать;

	ИмяГруппыКнопки									= СтрЗаменить(ИмяЭлемента, "ВыбратьПериод", "ГруппаВыбратьПериод");
	ГруппаКнопки									= О_ГруппаЭлементовФормыНастроек(Форма, Группа, ИмяГруппыКнопки);
	ГруппаКнопки.ГоризонтальноеПоложениеПодчиненных	= ГоризонтальноеПоложениеЭлемента.Центр;

	Кнопка = Форма.Элементы.Найти(ИмяЭлемента);
	Если Кнопка = Неопределено Тогда
		Кнопка = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), ГруппаКнопки);
	КонецЕсли;
	Кнопка.ИмяКоманды = ИмяЭлемента;

	О_УстановитьСвойстваКнопкиВыбораПериода(ГруппаКнопки, Период, ЭтоСтандартноеПредставление);
КонецПроцедуры

Процедура О_УстановитьСвойстваКнопкиВыбораПериода(ЭлементПериода, Период, ЭтоСтандартноеПредставление)
	Если ТипЗнч(ЭлементПериода) <> Тип("ГруппаФормы") Или ЭлементПериода.ПодчиненныеЭлементы.Количество() = 0 Или СтрНайти(ЭлементПериода.Имя, "ВыбратьПериод") = 0 Тогда
		Возврат;
	КонецЕсли;

	Кнопка				= ЭлементПериода.ПодчиненныеЭлементы[0];
	Кнопка.Заголовок	= БазоваяПодсистемаКлиентСервер.сОН_ПредставлениеПериодаВТексте(Период.ДатаНачала, Период.ДатаОкончания, "", Ложь);
	Кнопка.Шрифт		= Метаданные.ЭлементыСтиля.ВажнаяНадписьШрифт.Значение;

	Если ЭтоСтандартноеПредставление Тогда
		Кнопка.Ширина				= 3;

		Кнопка.Отображение			= ОтображениеКнопки.Картинка;
		Кнопка.Картинка				= БиблиотекаКартинок.ПолеВводаВыбрать;
		Кнопка.ОтображениеФигуры	= ОтображениеФигурыКнопки.Авто;
	Иначе
		ЭлементПериода.Ширина		= 15;

		Кнопка.Отображение			= ОтображениеКнопки.Текст;
		Кнопка.ОтображениеФигуры	= ОтображениеФигурыКнопки.Нет;
	КонецЕсли;
КонецПроцедуры

Функция О_ИнициализироватьПериод(Форма, Индекс)
	ПользовательскиеНастройки	= Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	ЭлементНастройки			= ПользовательскиеНастройки.Элементы[Индекс];

	Путь = Форма.ПутьКДаннымЭлементов.ПоИндексу[Индекс];
	Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Период = ЭлементНастройки.Значение;
	Иначе // Элемент отбора.
		Период = ЭлементНастройки.ПравоеЗначение;
	КонецЕсли;

	Форма[Путь] = Период;

	Возврат Период;
КонецФункции

Процедура О_ВывестиСпискиНастроек(Форма, ЭлементыНастроек, ОписаниеНастроек, ИменаРеквизитов)
	Поиск				= Новый Структура("ЭтоСписок, СвойствоНастройки", Истина, "Значение");
	НайденныеЭлементы	= ЭлементыНастроек.НайтиСтроки(Поиск);
	Если НайденныеЭлементы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Элемент Из НайденныеЭлементы Цикл
		Элемент.Поле.Видимость	= Ложь;
		Описание				= ОписаниеНастроек.Найти(Элемент.ИндексНастройки, "ИндексНастройки");

		ИмяСписка				= Форма.ПутьКДаннымЭлементов.ПоИндексу[Элемент.ИндексНастройки];

		О_ДобавитьЭлементыСписка(Форма, Элемент, Описание, ИмяСписка, ИменаРеквизитов);
		О_ДобавитьКомандыСписка(Форма, Элемент, ЭлементыНастроек, ИмяСписка);
	КонецЦикла;
КонецПроцедуры

Процедура О_ДобавитьЭлементыСписка(Форма, ЭлементНастройки, ОписаниеЭлементаНастройки, ИмяСписка, ИменаРеквизитов)
	Элементы	= Форма.Элементы;
	Поле		= ЭлементНастройки.Поле; // ПолеФормы

	ИменаРеквизитовПредопределенных = ИменаРеквизитов.Предопределенных.Список;

	Если ИменаРеквизитовПредопределенных.Найти(ИмяСписка) = Неопределено Тогда
		Список							= Элементы.Добавить(ИмяСписка, Тип("ТаблицаФормы"), Поле.Родитель);
		Список.ПутьКДанным				= ИмяСписка;
		Список.ПоложениеКоманднойПанели	= ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		Список.Высота					= 3;
		Список.УстановитьДействие("ПриИзменении", "Подключаемый_Список_ПриИзменении");
		Список.УстановитьДействие("ОбработкаВыбора", "Подключаемый_Список_ОбработкаВыбора");

		ПоляСписка						= Элементы.Добавить(Список.Имя + "Колонки", Тип("ГруппаФормы"), Список);
		ПоляСписка.Вид					= ВидГруппыФормы.ГруппаКолонок;
		ПоляСписка.Группировка			= ГруппировкаКолонок.ВЯчейке;
		ПоляСписка.Заголовок			= "Поля";
		ПоляСписка.ОтображатьЗаголовок	= Ложь;

		ПолеПометки						= Элементы.Добавить(ИмяСписка + "Пометка", Тип("ПолеФормы"), ПоляСписка);
		ПолеПометки.Вид					= ВидПоляФормы.ПолеФлажка;
		ПолеПометки.ПутьКДанным			= ИмяСписка + ".Пометка";

		ПолеЗначения					= Элементы.Добавить(ИмяСписка + "Значение", Тип("ПолеФормы"), ПоляСписка);
		ПолеЗначения.Вид				= ВидПоляФормы.ПолеВвода;
		ПолеЗначения.ПутьКДанным		= ИмяСписка + ".Значение";
		ПолеЗначения.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементСписка_ПриИзменении");
		ПолеЗначения.УстановитьДействие("НачалоВыбора", "Подключаемый_ЭлементСписка_НачалоВыбора");
	Иначе
		Список				= Элементы.Найти(ИмяСписка);
		Список.Видимость	= Истина;

		ПоляСписка			= Элементы.Найти(Список.Имя + "Колонки");
		ПолеЗначения		= Элементы.Найти(Список.Имя + "Значение");

		Элементы.Переместить(Список, Поле.Родитель);
	КонецЕсли;

	Список.Заголовок = Поле.Заголовок;

	Свойства = "ДоступныеТипы, ОграничениеТипа, АвтоОтметкаНезаполненного, СвязиПараметровВыбора, СвязьПоТипу";
	ЗаполнитьЗначенияСвойств(ПолеЗначения, Поле, Свойства);

	ВариантыОтчетовКлиентСервер.О_ДополнитьСписок(ПолеЗначения.СписокВыбора, Поле.СписокВыбора, Ложь, Истина);

	ПараметрыРедактирования = Новый Структура("БыстрыйВыбор, ВыборГруппИЭлементов");
	Если ОписаниеЭлементаНастройки.ОписаниеНастройки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыРедактирования, ОписаниеЭлементаНастройки.ОписаниеНастройки);
	КонецЕсли;

	ПолеЗначения.БыстрыйВыбор = ПараметрыРедактирования.БыстрыйВыбор;

	Условие = ВариантыОтчетовКлиентСервер.О_УсловиеЭлементаНастройки(ОписаниеЭлементаНастройки.ЭлементНастройки, ОписаниеЭлементаНастройки.ОписаниеНастройки);
	ПолеЗначения.ВыборГруппИЭлементов = ВариантыОтчетовКлиентСервер.О_ЗначениеТипаГруппыИЭлементы(ПараметрыРедактирования.ВыборГруппИЭлементов, Условие);

	ПолеЗначения.ПараметрыВыбора = ВариантыОтчетовКлиентСервер.О_ПараметрыВыбора(ОписаниеЭлементаНастройки.Настройки, Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы, ОписаниеЭлементаНастройки.ЭлементНастройки);

	О_ИнициализироватьСписок(Форма, ЭлементНастройки.ИндексНастройки, ПолеЗначения, ОписаниеЭлементаНастройки.ЭлементНастройки);

	Если Поле.СписокВыбора.Количество() > 0 Тогда
		Список.ИзменятьСоставСтрок	= Ложь;
		ПолеЗначения.ТолькоПросмотр	= Истина;
	КонецЕсли;
КонецПроцедуры

Процедура О_ДобавитьКомандыСписка(Форма, ЭлементНастройки, ЭлементыНастроек, ИмяСписка)
	Элементы = Форма.Элементы;

	Поиск					= Новый Структура("СвойствоНастройки, ИндексНастройки", "Использование");
	Поиск.ИндексНастройки	= ЭлементНастройки.ИндексНастройки;

	ПолеЗаголовка					= ЭлементыНастроек.НайтиСтроки(Поиск)[0].Поле;
	ГруппаЗаголовка					= ПолеЗаголовка.Родитель;
	ГруппаЗаголовка.Группировка		= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;

	ГруппаСписка				= ГруппаЗаголовка.Родитель;
	ГруппаСписка.Отображение	= ОтображениеОбычнойГруппы.ОбычноеВыделение;

	Если Не Элементы[ИмяСписка].ИзменятьСоставСтрок Тогда
		Возврат;
	КонецЕсли;

	ИмяЭлемента	= ИмяСписка + "Отступ";
	Отступ		= Элементы.Найти(ИмяЭлемента);
	Если Отступ = Неопределено Тогда
		Отступ = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ГруппаЗаголовка);
	ИначеЕсли Отступ.Родитель <> ГруппаЗаголовка Тогда
		Элементы.Переместить(Отступ, ГруппаЗаголовка);
	КонецЕсли;
	Отступ.Вид						= ВидДекорацииФормы.Надпись;
	Отступ.Заголовок				= "     ";
	Отступ.РастягиватьПоГоризонтали	= Истина;
	Отступ.АвтоМаксимальнаяШирина	= Ложь;
	Отступ.Видимость				= Истина;

	ИмяКоманды			= ИмяСписка + "Подбор";
	ЗаголовокКоманды	= "Подбор";
	О_ДобавитьКомандуСписка(Форма, ГруппаЗаголовка, ИмяКоманды, ЗаголовокКоманды, "Подключаемый_Список_Подбор");

	ИмяКоманды			= ИмяСписка + "ВставитьИзБуфера";
	ЗаголовокКоманды	= "Вставить из буфера обмена...";
	О_ДобавитьКомандуСписка(Форма, ГруппаЗаголовка, ИмяКоманды, ЗаголовокКоманды, "Подключаемый_Список_ВставитьИзБуфера", БиблиотекаКартинок.ВставитьИзБуфераОбмена);
КонецПроцедуры

Процедура О_ДобавитьКомандуСписка(Форма, Родитель, ИмяКоманды, Заголовок, Действие, Картинка = Неопределено)
	Команда = Форма.Команды.Найти(ИмяКоманды);
	Если Команда = Неопределено Тогда
		Команда = Форма.Команды.Добавить(ИмяКоманды);
	КонецЕсли;
	Команда.Действие	= Действие;
	Команда.Заголовок	= Заголовок;
	Команда.Подсказка	= Заголовок;

	Если Картинка = Неопределено Тогда
		Команда.Отображение = ОтображениеКнопки.Текст;
	Иначе
		Команда.Отображение	= ОтображениеКнопки.Картинка;
		Команда.Картинка	= БиблиотекаКартинок.ВставитьИзБуфераОбмена;
	КонецЕсли;

	Кнопка = Форма.Элементы.Найти(ИмяКоманды);
	Если Кнопка = Неопределено Тогда
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Родитель);
	ИначеЕсли Кнопка.Родитель <> Родитель Тогда
		Форма.Элементы.Переместить(Кнопка, Родитель);
	КонецЕсли;
	Кнопка.ИмяКоманды	= ИмяКоманды;
	Кнопка.Вид			= ВидКнопкиФормы.Гиперссылка;
	Кнопка.Видимость	= Истина;
КонецПроцедуры

Процедура О_ИнициализироватьСписок(Форма, Индекс, Поле, ЭлементНастройки)
	ПользовательскиеНастройки	= Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	ЭлементНастройки			= ПользовательскиеНастройки.Элементы[Индекс];

	Путь				= Форма.ПутьКДаннымЭлементов.ПоИндексу[Индекс];
	Список				= Форма[Путь];
	Список.ТипЗначения	= Поле.ДоступныеТипы;
	Список.Очистить();

	ИмяПоляЗначения = "ПравоеЗначение";
	Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ИмяПоляЗначения = "Значение";
	КонецЕсли;

	ВыбранныеЗначения = ВариантыОтчетовКлиентСервер.О_ЗначенияСписком(ЭлементНастройки[ИмяПоляЗначения]);
	Если ВыбранныеЗначения.Количество() > 0 Тогда
		ЭлементНастройки[ИмяПоляЗначения] = ВыбранныеЗначения;
	Иначе
		ВыбранныеЗначения = ВариантыОтчетовКлиентСервер.О_ЗначенияСписком(ЭлементНастройки[ИмяПоляЗначения]);
		Если ВыбранныеЗначения.Количество() > 0 Тогда
			// При выполнении метода СоздатьЭлементыФормыПользовательскихНастроек()
			// сбрасывается значение пользовательской настройки.
			ЭлементНастройки[ИмяПоляЗначения] = ВыбранныеЗначения;
		КонецЕсли;
	КонецЕсли;

	ДоступныеЗначения = Новый СписокЗначений;
	Если Поле.БыстрыйВыбор = Истина Тогда
		ПараметрыСписка					= Новый Структура("ПараметрыВыбора, ОписаниеТипов, ВыборГруппИЭлементов, Отбор");
		ЗаполнитьЗначенияСвойств(ПараметрыСписка, Поле);
		ПараметрыСписка.ОписаниеТипов	= Поле.ДоступныеТипы;
		ПараметрыСписка.Отбор			= Новый Структура;

		ДоступныеЗначения = О_ЗначенияДляВыбора(ПараметрыСписка);
	КонецЕсли;

	Если ДоступныеЗначения.Количество() = 0 Тогда
		ДоступныеЗначения = Поле.СписокВыбора;
	КонецЕсли;

	ВариантыОтчетовКлиентСервер.О_ДополнитьСписок(Список, ДоступныеЗначения, Ложь, Истина);
	ВариантыОтчетовКлиентСервер.О_ДополнитьСписок(Список, ВыбранныеЗначения, Ложь, Истина);

	Для Каждого ЭлементСписка Из Список Цикл
		Если Не ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
			Продолжить;
		КонецЕсли;

		НайденныйЭлемент = ДоступныеЗначения.НайтиПоЗначению(ЭлементСписка.Значение);
		Если НайденныйЭлемент <> Неопределено Тогда
			ЭлементСписка.Представление = НайденныйЭлемент.Представление;
		КонецЕсли;

		НайденныйЭлемент		= ВыбранныеЗначения.НайтиПоЗначению(ЭлементСписка.Значение);
		ЭлементСписка.Пометка	= (НайденныйЭлемент <> Неопределено);
	КонецЦикла;

	ПолеСписка = Форма.Элементы[Путь]; // ТаблицаФормы
	Если ЭлементНастройки.Использование Тогда
		ПолеСписка.ЦветТекста = Новый Цвет;
	Иначе
		ПолеСписка.ЦветТекста = Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура О_ВывестиЗначенияКакПоляФлажков(Форма, ЭлементыНастроек, ИменаРеквизитов)
	Поиск				= Новый Структура("ЭтоЗначениеКакФлажок, СвойствоНастройки", Истина, "Использование");
	НайденныеЭлементы	= ЭлементыНастроек.НайтиСтроки(Поиск);
	Если НайденныеЭлементы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Элементы						= Форма.Элементы;
	ИменаРеквизитовПредопределенных	= ИменаРеквизитов.Предопределенных.Флажок;

	Для Каждого Элемент Из НайденныеЭлементы Цикл
		Поле = Элемент.Поле;

		ИмяРеквизита = Форма.ПутьКДаннымЭлементов.ПоИндексу[Элемент.ИндексНастройки];
		Если ИменаРеквизитовПредопределенных.Найти(ИмяРеквизита) = Неопределено Тогда
			ПолеФлажка				= Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Поле.Родитель);
			ПолеФлажка.Вид			= ВидПоляФормы.ПолеФлажка;
			ПолеФлажка.ПутьКДанным	= ИмяРеквизита;
			ПолеФлажка.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементНастройки_ПриИзменении");
		Иначе
			ПолеФлажка				= Элементы.Найти(ИмяРеквизита);
			Элементы.Переместить(ПолеФлажка, Поле.Родитель);
			ПолеФлажка.Видимость	= Истина;
		КонецЕсли;

		ПолеФлажка.Заголовок			= Поле.Заголовок;
		ПолеФлажка.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.Поле					= ПолеФлажка;

		О_ИнициализироватьФлажок(Форма, Элемент.ИндексНастройки);
	КонецЦикла;
КонецПроцедуры

Процедура О_ИнициализироватьФлажок(Форма, Индекс)
	ПользовательскиеНастройки	= Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	ЭлементНастройки			= ПользовательскиеНастройки.Элементы[Индекс];

	Путь = Форма.ПутьКДаннымЭлементов.ПоИндексу[Индекс];
	Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Форма[Путь] = ЭлементНастройки.Значение;
	Иначе // Элемент отбора.
		Форма[Путь] = ЭлементНастройки.ПравоеЗначение;
	КонецЕсли;
КонецПроцедуры

Функция О_ЗапомнитьВыделенныеСтроки(Форма, ИмяТаблицы, КлючевыеКолонки) Экспорт
	ТаблицаРеквизит	= Форма[ИмяТаблицы];
	ТаблицаЭлемент	= Форма.Элементы.Найти(ИмяТаблицы); // ТаблицаФормы

	Результат = Новый Структура;
	Результат.Вставить("Выделенные", Новый Массив);
	Результат.Вставить("Текущая", Неопределено);

	ТекущаяИдентификатор = ТаблицаЭлемент.ТекущаяСтрока;
	Если ТекущаяИдентификатор <> Неопределено Тогда
		СтрокаТаблицы = ТаблицаРеквизит.НайтиПоИдентификатору(ТекущаяИдентификатор);
		Если СтрокаТаблицы <> Неопределено Тогда
			ДанныеСтроки		= Новый Структура(КлючевыеКолонки);
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТаблицы);
			Результат.Текущая	= ДанныеСтроки;
		КонецЕсли;
	КонецЕсли;

	ВыделенныеСтроки = ТаблицаЭлемент.ВыделенныеСтроки;
	Если ВыделенныеСтроки <> Неопределено Тогда
		Для Каждого ВыделеннаяИдентификатор Из ВыделенныеСтроки Цикл
			Если ВыделеннаяИдентификатор = ТекущаяИдентификатор Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы = ТаблицаРеквизит.НайтиПоИдентификатору(ВыделеннаяИдентификатор);
			Если СтрокаТаблицы <> Неопределено Тогда
				ДанныеСтроки = Новый Структура(КлючевыеКолонки);
				ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТаблицы);
				Результат.Выделенные.Добавить(ДанныеСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Процедура О_ВосстановитьВыделенныеСтроки(Форма, ИмяТаблицы, СтрокиТаблицы) Экспорт
	ТаблицаРеквизит	= Форма[ИмяТаблицы];
	ТаблицаЭлемент	= Форма.Элементы[ИмяТаблицы]; // ТаблицаФормы

	ТаблицаЭлемент.ВыделенныеСтроки.Очистить();

	Если СтрокиТаблицы.Текущая <> Неопределено Тогда
		Найденные = ВариантыОтчетовКлиентСервер.О_НайтиСтрокиТаблицы(ТаблицаРеквизит, СтрокиТаблицы.Текущая);
		Если Найденные <> Неопределено И Найденные.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицы Из Найденные Цикл
				Если СтрокаТаблицы <> Неопределено Тогда
					Идентификатор					= СтрокаТаблицы.ПолучитьИдентификатор();
					ТаблицаЭлемент.ТекущаяСтрока	= Идентификатор;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Для Каждого ДанныеСтроки Из СтрокиТаблицы.Выделенные Цикл
		Найденные = ВариантыОтчетовКлиентСервер.О_НайтиСтрокиТаблицы(ТаблицаРеквизит, ДанныеСтроки);
		Если Найденные <> Неопределено И Найденные.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицы Из Найденные Цикл
				Если СтрокаТаблицы <> Неопределено Тогда
					ТаблицаЭлемент.ВыделенныеСтроки.Добавить(СтрокаТаблицы.ПолучитьИдентификатор());
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция О_ЗначенияДляВыбора(ПараметрыНастройки, ТипИлиТипы = Неопределено) Экспорт
	ПараметрыПолученияДанныхВыбора	= Новый Структура("Отбор, ВыборГруппИЭлементов");
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияДанныхВыбора, ПараметрыНастройки);
	О_ДополнитьСтруктуруИзПараметровВыбора(ПараметрыПолученияДанныхВыбора, ПараметрыНастройки.ПараметрыВыбора);

	ЗначенияДляВыбора = Новый СписокЗначений;
	Если ТипЗнч(ТипИлиТипы) = Тип("Тип") Тогда
		Типы = Новый Массив;
		Типы.Добавить(ТипИлиТипы);
	ИначеЕсли ТипЗнч(ТипИлиТипы) = Тип("Массив") Тогда
		Типы = ТипИлиТипы;
	Иначе
		Типы = ПараметрыНастройки.ОписаниеТипов.Типы();
	КонецЕсли;

	Для Каждого Тип Из Типы Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Менеджер = БазоваяПодсистемаСервер.ОН_МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());

		СписокВыбора = Менеджер.ПолучитьДанныеВыбора(ПараметрыПолученияДанныхВыбора);
		Для Каждого ЭлементСписка Из СписокВыбора Цикл
			ЗначениеДляВыбора = ЗначенияДляВыбора.Добавить();
			ЗаполнитьЗначенияСвойств(ЗначениеДляВыбора, ЭлементСписка);

			// Для перечислений значения возвращаются в виде структуры со свойством Значение.
			ЗначениеПеречисления = Неопределено;
			Если ТипЗнч(ЗначениеДляВыбора.Значение) = Тип("Структура") И ЗначениеДляВыбора.Значение.Свойство("Значение", ЗначениеПеречисления) Тогда
				ЗначениеДляВыбора.Значение = ЗначениеПеречисления;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат ЗначенияДляВыбора;
КонецФункции

Процедура О_ДополнитьСтруктуруИзПараметровВыбора(Структура, МассивПараметровВыбора)
	Для Каждого ПараметрВыбора Из МассивПараметровВыбора Цикл
		ТекущаяСтруктура	= Структура;
		МассивСтрок			= СтрРазделить(ПараметрВыбора.Имя, ".");
		Количество			= МассивСтрок.Количество();
		Если Количество > 1 Тогда
			Для Индекс = 0 По Количество-2 Цикл
				Ключ = МассивСтрок[Индекс];
				Если ТекущаяСтруктура.Свойство(Ключ) И ТипЗнч(ТекущаяСтруктура[Ключ]) = Тип("Структура") Тогда
					ТекущаяСтруктура = ТекущаяСтруктура[Ключ];
				Иначе
					ТекущаяСтруктура.Вставить(Ключ, Новый Структура);
					ТекущаяСтруктура = ТекущаяСтруктура[Ключ];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Ключ = МассивСтрок[Количество-1];
		ТекущаяСтруктура.Вставить(Ключ, ПараметрВыбора.Значение);
	КонецЦикла;
КонецПроцедуры

Функция О_ДобавитьВыбранноеПоле(Куда, ИмяИлиПолеКД, Заголовок = "") Экспорт
	Если ТипЗнч(Куда) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоляКД = Куда.Настройки.Выбор;
	ИначеЕсли ТипЗнч(Куда) = Тип("НастройкиКомпоновкиДанных") Тогда
		ВыбранныеПоляКД = Куда.Выбор;
	Иначе
		ВыбранныеПоляКД = Куда;
	КонецЕсли;

	Если ТипЗнч(ИмяИлиПолеКД) = Тип("Строка") Тогда
		ПолеКД = Новый ПолеКомпоновкиДанных(ИмяИлиПолеКД);
	Иначе
		ПолеКД = ИмяИлиПолеКД;
	КонецЕсли;

	ВыбранноеПолеКД			= ВыбранныеПоляКД.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПолеКД.Поле	= ПолеКД;
	Если Заголовок <> "" Тогда
		ВыбранноеПолеКД.Заголовок = Заголовок;
	КонецЕсли;

	Возврат ВыбранноеПолеКД;
КонецФункции

Функция О_ТипНастройкиСтрокой(Тип)
	Если Тип = Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат "Настройки";
	ИначеЕсли Тип = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат "НастройкиВложенногоОбъекта";
	ИначеЕсли Тип = Тип("ОтборКомпоновкиДанных") Тогда
		Возврат "Отбор";
	ИначеЕсли Тип = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Возврат "ЭлементОтбора";
	ИначеЕсли Тип = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		Возврат "ГруппаЭлементовОтбора";
	ИначеЕсли Тип = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Возврат "ЗначениеПараметраНастроек";
	ИначеЕсли Тип = Тип("ГруппировкаКомпоновкиДанных") Тогда
		Возврат "Группировка";
	ИначеЕсли Тип = Тип("ПоляГруппировкиКомпоновкиДанных") Тогда
		Возврат "ПоляГруппировки";
	ИначеЕсли Тип = Тип("КоллекцияПолейГруппировкиКомпоновкиДанных") Тогда
		Возврат "КоллекцияПолейГруппировки";
	ИначеЕсли Тип = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
		Возврат "ПолеГруппировки";
	ИначеЕсли Тип = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
		Возврат "АвтоПолеГруппировки";
	ИначеЕсли Тип = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
		Возврат "ВыбранныеПоля";
	ИначеЕсли Тип = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
		Возврат "ВыбранноеПоле";
	ИначеЕсли Тип = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
		Возврат "ГруппаВыбранныхПолей";
	ИначеЕсли Тип = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
		Возврат "АвтоВыбранноеПоле";
	ИначеЕсли Тип = Тип("ПорядокКомпоновкиДанных") Тогда
		Возврат "Порядок";
	ИначеЕсли Тип = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
		Возврат "ЭлементПорядка";
	ИначеЕсли Тип = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
		Возврат "АвтоЭлементПорядка";
	ИначеЕсли Тип = Тип("УсловноеОформлениеКомпоновкиДанных") Тогда
		Возврат "УсловноеОформление";
	ИначеЕсли Тип = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда
		Возврат "ЭлементУсловногоОформления";
	ИначеЕсли Тип = Тип("СтруктураНастроекКомпоновкиДанных") Тогда
		Возврат "СтруктураНастроек";
	ИначеЕсли Тип = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
		Возврат "КоллекцияЭлементовСтруктурыНастроек";
	ИначеЕсли Тип = Тип("ТаблицаКомпоновкиДанных") Тогда
		Возврат "Таблица";
	ИначеЕсли Тип = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		Возврат "ГруппировкаТаблицы";
	ИначеЕсли Тип = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
		Возврат "КоллекцияЭлементовСтруктурыТаблицы";
	ИначеЕсли Тип = Тип("ДиаграммаКомпоновкиДанных") Тогда
		Возврат "Диаграмма";
	ИначеЕсли Тип = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		Возврат "ГруппировкаДиаграммы";
	ИначеЕсли Тип = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		Возврат "КоллекцияЭлементовСтруктурыДиаграммы";
	ИначеЕсли Тип = Тип("ЗначенияПараметровДанныхКомпоновкиДанных") Тогда
		Возврат "ЗначенияПараметровДанных";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция О_ЗначениеВМассив(Значение) Экспорт
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Возврат Значение;
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(Значение);

		Возврат Массив;
	КонецЕсли;
КонецФункции

Функция О_ЭлементНастроекПоПолномуПути(Знач Настройки, Знач ПолныйПутьКЭлементу) Экспорт
	Индексы			= СтрРазделить(ПолныйПутьКЭлементу, "/", Ложь);
	ЭлементНастроек	= Настройки;

	Для Каждого Индекс Из Индексы Цикл
		Если Индекс = "Строки" Тогда
			ЭлементНастроек = ЭлементНастроек.Строки;
		ИначеЕсли Индекс = "Колонки" Тогда
			ЭлементНастроек = ЭлементНастроек.Колонки;
		ИначеЕсли Индекс = "Серии" Тогда
			ЭлементНастроек = ЭлементНастроек.Серии;
		ИначеЕсли Индекс = "Точки" Тогда
			ЭлементНастроек = ЭлементНастроек.Точки;
		ИначеЕсли Индекс = "Структура" Тогда
			ЭлементНастроек = ЭлементНастроек.Структура;
		ИначеЕсли Индекс = "Настройки" Тогда
			ЭлементНастроек = ЭлементНастроек.Настройки;
		Иначе
			ЭлементНастроек = ЭлементНастроек[Число(Индекс)];
		КонецЕсли;
	КонецЦикла;

	Возврат ЭлементНастроек;
КонецФункции

Процедура О_УстановитьУсловияОтборов(ПараметрыЗагрузки, КомпоновщикНастроек) Экспорт
	УсловияОтборов = БазоваяПодсистемаКлиентСервер.ОН_СвойствоСтруктуры(ПараметрыЗагрузки, "УсловияОтборов");
	Если УсловияОтборов = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Настройки					= КомпоновщикНастроек.Настройки;
	ПользовательскиеНастройки	= КомпоновщикНастроек.ПользовательскиеНастройки;

	Для Каждого Условие Из УсловияОтборов Цикл
		ЭлементПользовательскойНастройки				= ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(Условие.Ключ);
		ЭлементПользовательскойНастройки.ВидСравнения	= Условие.Значение;

		Если ВариантыОтчетовКлиентСервер.О_ЭтоВидСравненияСписка(ЭлементПользовательскойНастройки.ВидСравнения) И ТипЗнч(ЭлементПользовательскойНастройки.ПравоеЗначение) <> Тип("СписокЗначений") Тогда
			ЭлементПользовательскойНастройки.ПравоеЗначение = ВариантыОтчетовКлиентСервер.О_ЗначенияСписком(ЭлементПользовательскойНастройки.ПравоеЗначение);
		КонецЕсли;

		ЭлементНастройки = ВариантыОтчетовКлиентСервер.О_ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки, ЭлементПользовательскойНастройки.ИдентификаторПользовательскойНастройки,, ПользовательскиеНастройки);

		ЗаполнитьЗначенияСвойств(ЭлементНастройки, ЭлементПользовательскойНастройки, "ВидСравнения, ПравоеЗначение");
	КонецЦикла;
КонецПроцедуры

Функция О_ТребуетсяСброситьПредопределенныеПараметрыВывода(ПараметрыЗагрузки) Экспорт
	Если ПараметрыЗагрузки.Свойство("СброситьНастройкиВарианта") И ПараметрыЗагрузки.СброситьНастройкиВарианта = Истина Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ПараметрыЗагрузки.Свойство("ИмяСобытия") И ПараметрыЗагрузки.ИмяСобытия = "НастройкиПоУмолчанию" Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область УправлениеКолонтитулами

Функция УК_НастройкиКолонтитулов() Экспорт
	Перем Настройки;

	Хранилище = Константы.НастройкиКолонтитулов.Получить();
	Если ТипЗнч(Хранилище) = Тип("ХранилищеЗначения") Тогда
		Настройки = Хранилище.Получить();
		Если ТипЗнч(Настройки) = Тип("Структура") Тогда
			Если Не Настройки.Свойство("ВерхнийКолонтитул") Или Не Настройки.Свойство("НижнийКолонтитул") Тогда
				Настройки = Неопределено;
			Иначе
				УК_ДополнитьНастройкиКолонтитула(Настройки.ВерхнийКолонтитул);
				УК_ДополнитьНастройкиКолонтитула(Настройки.НижнийКолонтитул);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Настройки = Неопределено Тогда
		Настройки = УК_ПустыеНастройкиКолонтитулов();
	КонецЕсли;

	Возврат Настройки;
КонецФункции

Процедура УК_СохранитьНастройкиКолонтитулов(Настройки) Экспорт
	Константы.НастройкиКолонтитулов.Установить(Новый ХранилищеЗначения(Настройки));
КонецПроцедуры

Функция УК_ПустыеНастройкиКолонтитулов()
	ВерхнийКолонтитул = Новый Структура;
	ВерхнийКолонтитул.Вставить("ТекстСлева",			"");
	ВерхнийКолонтитул.Вставить("ТекстВЦентре",			"");
	ВерхнийКолонтитул.Вставить("ТекстСправа",			"");
	ВерхнийКолонтитул.Вставить("Шрифт",					Новый Шрифт);
	ВерхнийКолонтитул.Вставить("ВертикальноеПоложение",	ВертикальноеПоложение.Низ);
	ВерхнийКолонтитул.Вставить("НачальнаяСтраница",		0);

	НижнийКолонтитул = Новый Структура;
	НижнийКолонтитул.Вставить("ТекстСлева",				"");
	НижнийКолонтитул.Вставить("ТекстВЦентре",			"");
	НижнийКолонтитул.Вставить("ТекстСправа",			"");
	НижнийКолонтитул.Вставить("Шрифт",					Новый Шрифт);
	НижнийКолонтитул.Вставить("ВертикальноеПоложение",	ВертикальноеПоложение.Верх);
	НижнийКолонтитул.Вставить("НачальнаяСтраница",		0);

	Возврат Новый Структура("ВерхнийКолонтитул, НижнийКолонтитул", ВерхнийКолонтитул, НижнийКолонтитул);
КонецФункции

Процедура УК_ДополнитьНастройкиКолонтитула(НастройкиКолонтитула)
	Если Не НастройкиКолонтитула.Свойство("ТекстСлева") Или ТипЗнч(НастройкиКолонтитула.ТекстСлева) <> Тип("Строка") Тогда
		НастройкиКолонтитула.Вставить("ТекстСлева", "");
	КонецЕсли;
	Если Не НастройкиКолонтитула.Свойство("ТекстВЦентре") Или ТипЗнч(НастройкиКолонтитула.ТекстВЦентре) <> Тип("Строка") Тогда
		НастройкиКолонтитула.Вставить("ТекстВЦентре", "");
	КонецЕсли;
	Если Не НастройкиКолонтитула.Свойство("ТекстСправа") Или ТипЗнч(НастройкиКолонтитула.ТекстСправа) <> Тип("Строка") Тогда
		НастройкиКолонтитула.Вставить("ТекстСправа", "");
	КонецЕсли;
	Если Не НастройкиКолонтитула.Свойство("Шрифт") Или ТипЗнч(НастройкиКолонтитула.Шрифт) <> Тип("Шрифт") Тогда
		НастройкиКолонтитула.Вставить("Шрифт", Новый Шрифт);
	КонецЕсли;
	Если Не НастройкиКолонтитула.Свойство("ВертикальноеПоложение") Или ТипЗнч(НастройкиКолонтитула.ВертикальноеПоложение) <> Тип("ВертикальноеПоложение") Тогда
		НастройкиКолонтитула.Вставить("ВертикальноеПоложение", ВертикальноеПоложение.Центр);
	КонецЕсли;
	Если Не НастройкиКолонтитула.Свойство("НачальнаяСтраница") Или ТипЗнч(НастройкиКолонтитула.НачальнаяСтраница) <> Тип("Число") Или НастройкиКолонтитула.НачальнаяСтраница < 0 Тогда
		НастройкиКолонтитула.Вставить("НачальнаяСтраница", 0);
	КонецЕсли;
КонецПроцедуры

Функция УК_СтатусНастроекКолонтитулов(Настройки) Экспорт
	СтатусНастроек				= Новый Структура("Стандартные, Пустые");
	СтатусНастроек.Стандартные	= БазоваяПодсистемаСервер.ОН_ДанныеСовпадают(Настройки, УК_НастройкиКолонтитулов());
	СтатусНастроек.Пустые		= БазоваяПодсистемаСервер.ОН_ДанныеСовпадают(Настройки, УК_ПустыеНастройкиКолонтитулов());

	Возврат СтатусНастроек;
КонецФункции

#КонецОбласти

#Область КонструкторФормул

Процедура сКФ_ДобавитьСписокПолейНаФорму(Форма, Параметры) Экспорт
	ПараметрыДобавления = сКФ_ПараметрыДобавленияСпискаПолей();
	ЗаполнитьЗначенияСвойств(ПараметрыДобавления, Параметры);

	ДобавляемыеРеквизиты = Новый Массив;

	ЗначенияРеквизитов = Новый Структура("ПодключенныеСпискиПолей");
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Форма);
	ПодключенныеСпискиПолей = ЗначенияРеквизитов.ПодключенныеСпискиПолей;
	Если ПодключенныеСпискиПолей = Неопределено Тогда
		ИмяРеквизитаПодключенныеСпискиПолей = "ПодключенныеСпискиПолей";
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизитаПодключенныеСпискиПолей, Новый ОписаниеТипов("ТаблицаЗначений")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяСпискаПолей", Новый ОписаниеТипов("Строка"), ИмяРеквизитаПодключенныеСпискиПолей));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяСпискаИсточников", Новый ОписаниеТипов("Строка"), ИмяРеквизитаПодключенныеСпискиПолей));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СкобкиИдентификаторов", Новый ОписаниеТипов("Булево"), ИмяРеквизитаПодключенныеСпискиПолей));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СкобкиПредставлений", Новый ОписаниеТипов("Булево"), ИмяРеквизитаПодключенныеСпискиПолей));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИспользоватьИдентификаторыДляФормул", Новый ОписаниеТипов("Булево"), ИмяРеквизитаПодключенныеСпискиПолей));
	КонецЕсли;

	ИмяСпискаПолей = ПараметрыДобавления.ИмяСписка;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяСпискаПолей, Новый ОписаниеТипов("ДеревоЗначений")));
	Для Каждого ОписаниеРеквизита Из сКФ_РеквизитыПодключаемогоСписка() Цикл
		ИмяРеквизита = ОписаниеРеквизита.Ключ;
		ТипРеквизита = ОписаниеРеквизита.Значение;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, ИмяСпискаПолей));
	КонецЦикла;

	ИмяСтрокиПоиска = "СтрокаПоиска" + ИмяСпискаПолей;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяСтрокиПоиска, Новый ОписаниеТипов("Строка")));

	ИмяСпискаИсточников = ИмяСпискаПолей + "Источники";
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяСпискаИсточников, Новый ОписаниеТипов("ТаблицаЗначений")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИсточникДанных", Новый ОписаниеТипов("Строка"), ИмяСпискаИсточников));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("КоллекцияПолей", Новый ОписаниеТипов(), ИмяСпискаИсточников));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Замещать", Новый ОписаниеТипов("Булево"), ИмяСпискаИсточников));

	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	МестоРазмещенияСтрокиПоиска = ПараметрыДобавления.МестоРазмещенияСтрокиПоиска;
	Если Не ЗначениеЗаполнено(МестоРазмещенияСтрокиПоиска) Тогда
		МестоРазмещенияСтрокиПоиска = ПараметрыДобавления.МестоРазмещенияСписка;
	КонецЕсли;

	СтрокаПоиска								= Форма.Элементы.Добавить(ИмяСтрокиПоиска, Тип("ПолеФормы"), МестоРазмещенияСтрокиПоиска);
	СтрокаПоиска.ПутьКДанным					= ИмяСтрокиПоиска;
	СтрокаПоиска.Вид							= ВидПоляФормы.ПолеВвода;
	СтрокаПоиска.ПодсказкаВвода					= ПараметрыДобавления.ПодсказкаВводаСтрокиПоиска;
	СтрокаПоиска.ПоложениеЗаголовка				= ПоложениеЗаголовкаЭлементаФормы.Нет;
	СтрокаПоиска.УстановитьДействие("ИзменениеТекстаРедактирования", "Подключаемый_СтрокаПоискаИзменениеТекстаРедактирования");
	СтрокаПоиска.УстановитьДействие("Очистка", "Подключаемый_СтрокаПоискаОчистка");
	СтрокаПоиска.ОбновлениеТекстаРедактирования	= ОбновлениеТекстаРедактирования.НеИспользовать;
	СтрокаПоиска.АвтоМаксимальнаяШирина			= Ложь;
	СтрокаПоиска.КнопкаОчистки					= Истина;

	СписокПолей								= Форма.Элементы.Добавить(ИмяСпискаПолей, Тип("ТаблицаФормы"), ПараметрыДобавления.МестоРазмещенияСписка);
	СписокПолей.ПутьКДанным					= ИмяСпискаПолей;
	СписокПолей.НачальноеОтображениеДерева	= НачальноеОтображениеДерева.НеРаскрывать;
	СписокПолей.ПоложениеЗаголовка			= ПоложениеЗаголовкаЭлементаФормы.Нет;
	СписокПолей.Шапка						= Ложь;
	СписокПолей.ГоризонтальныеЛинии			= Ложь;
	СписокПолей.ВертикальныеЛинии			= Ложь;
	СписокПолей.ИзменятьСоставСтрок			= Ложь;
	СписокПолей.ИзменятьПорядокСтрок		= Ложь;
	СписокПолей.РежимВыделения				= РежимВыделенияТаблицы.Одиночный;
	СписокПолей.КоманднаяПанель.Видимость	= Ложь;
	СписокПолей.УстановитьДействие("ПередРазворачиванием", "Подключаемый_СписокПолейПередРазворачиванием");
	СписокПолей.УстановитьДействие("НачалоПеретаскивания", "Подключаемый_СписокПолейНачалоПеретаскивания");

	Для Каждого Обработчик Из ПараметрыДобавления.ОбработчикиСписка Цикл
		ИмяСобытия		= Обработчик.Ключ;
		ИмяПроцедуры	= Обработчик.Значение;
		СписокПолей.УстановитьДействие(ИмяСобытия, ИмяПроцедуры);
	КонецЦикла;

	ГруппаКолонок					= Форма.Элементы.Добавить(ИмяСпискаПолей + "КартинкаИПредставление", Тип("ГруппаФормы"), СписокПолей);
	ГруппаКолонок.Группировка		= ГруппировкаКолонок.ВЯчейке;

	КартинкаПоля					= Форма.Элементы.Добавить(ИмяСпискаПолей + "Картинка", Тип("ПолеФормы"), ГруппаКолонок);
	КартинкаПоля.ПутьКДанным		= ИмяСпискаПолей + ".Картинка";
	КартинкаПоля.Вид				= ВидПоляФормы.ПолеКартинки;
	КартинкаПоля.ОтображатьВШапке	= Ложь;

	ПредставлениеПоля					= Форма.Элементы.Добавить(ИмяСпискаПолей + "Представление", Тип("ПолеФормы"), ГруппаКолонок);
	ПредставлениеПоля.ПутьКДанным		= ИмяСпискаПолей + ".Заголовок";
	ПредставлениеПоля.Вид				= ВидПоляФормы.ПолеВвода;
	ПредставлениеПоля.ТолькоПросмотр	= Истина;

	ПредставлениеПоля					= Форма.Элементы.Добавить(ИмяСпискаПолей + "ПредставлениеПутиКДанным", Тип("ПолеФормы"), ГруппаКолонок);
	ПредставлениеПоля.ПутьКДанным		= ИмяСпискаПолей + ".ПредставлениеПутиКДанным";
	ПредставлениеПоля.Вид				= ВидПоляФормы.ПолеНадписи;
	ПредставлениеПоля.ТолькоПросмотр	= Истина;
	ПредставлениеПоля.Видимость			= Ложь;

	ПодключенныеСпискиПолей									= Форма.ПодключенныеСпискиПолей; // ТаблицаЗначений
	ПодключенныйСписок										= ПодключенныеСпискиПолей.Добавить();
	ПодключенныйСписок.ИмяСпискаПолей						= ИмяСпискаПолей;
	ПодключенныйСписок.ИмяСпискаИсточников					= ИмяСпискаИсточников;
	ПодключенныйСписок.СкобкиИдентификаторов				= ПараметрыДобавления.СкобкиИдентификаторов;
	ПодключенныйСписок.СкобкиПредставлений					= ПараметрыДобавления.СкобкиПредставлений;
	ПодключенныйСписок.ИспользоватьИдентификаторыДляФормул	= ПараметрыДобавления.ИспользоватьИдентификаторыДляФормул;

	ИсточникиДоступныхПолей = Форма[ИмяСпискаИсточников]; // ТаблицаЗначений

	Для Каждого КоллекцияПолей Из ПараметрыДобавления.КоллекцииПолей Цикл
		ИсточникДоступныхПолей					= ИсточникиДоступныхПолей.Добавить();
		ИсточникДоступныхПолей.КоллекцияПолей	= КоллекцияПолей;
	КонецЦикла;

	Для Каждого ИсточникДоступныхПолей Из ПараметрыДобавления.ИсточникиДоступныхПолей Цикл
		ЗаполнитьЗначенияСвойств(ИсточникиДоступныхПолей.Добавить(), ИсточникДоступныхПолей);
	КонецЦикла;

	ДеревоПолей			= Форма.РеквизитФормыВЗначение(ИмяСпискаПолей);
	ТаблицаИсточников	= Форма.РеквизитФормыВЗначение(ИмяСпискаИсточников);

	сКФ_ЗаполнитьСписокДоступныхРеквизитов(ДеревоПолей, ТаблицаИсточников);

	Форма.ЗначениеВРеквизитФормы(ДеревоПолей, ИмяСпискаПолей);
	Форма.ЗначениеВРеквизитФормы(ТаблицаИсточников, ИмяСпискаИсточников);

	сКФ_УстановитьУсловноеОформление(Форма, ИмяСпискаПолей);
КонецПроцедуры

Функция сКФ_ПараметрыДобавленияСпискаПолей() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("МестоРазмещенияСписка");
	Результат.Вставить("ИмяСписка",								"ДоступныеПоля");
	Результат.Вставить("КоллекцииПолей",						Новый Массив);
	Результат.Вставить("МестоРазмещенияСтрокиПоиска");
	Результат.Вставить("ПодсказкаВводаСтрокиПоиска",			"Найти...");
	Результат.Вставить("ОбработчикиСписка",						Новый Структура);
	Результат.Вставить("ВключатьГруппыВПутьКДанным",			Истина);
	Результат.Вставить("СкобкиИдентификаторов",					Ложь);
	Результат.Вставить("СкобкиПредставлений",					Истина);
	Результат.Вставить("ИсточникиДоступныхПолей",				сКФ_НоваяКоллекцияИсточниковДоступныхПолей());
	Результат.Вставить("ИспользоватьИдентификаторыДляФормул",	Ложь);

	Возврат Результат;
КонецФункции

Процедура сКФ_РазвернутьРеквизит(ИдентификаторСтроки, ИмяСписка, Форма)
	Отбор = Форма["СтрокаПоиска" + ИмяСписка];
	ТекущиеДанные = Форма[ИмяСписка].НайтиПоИдентификатору(ИдентификаторСтроки);
	КоллекцияРеквизитов = ТекущиеДанные.ПолучитьЭлементы();

	НастройкиСписка						= ВариантыОтчетовКлиентСервер.КФ_НастройкиСпискаПолей(Форма, ИмяСписка);
	ИспользоватьИдентификаторыДляФормул	= НастройкиСписка.ИспользоватьИдентификаторыДляФормул;

	Если КоллекцияРеквизитов.Количество() = 0 Или КоллекцияРеквизитов[0].Поле <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	КоллекцияРеквизитов.Очистить();
	ИсточникиДоступныхПолей = сКФ_СписокИсточниковДоступныхПолей(Форма, ИмяСписка);
	сКФ_ЗаполнитьСписокДоступныхРеквизитов(ТекущиеДанные, ИсточникиДоступныхПолей, Отбор, ИспользоватьИдентификаторыДляФормул);
КонецПроцедуры

Процедура сКФ_УстановитьУсловноеОформление(Форма, ИмяСпискаПолей)
	УсловноеОформление	= Форма.УсловноеОформление;

	ЭлементОформления	= УсловноеОформление.Элементы.Добавить();

	ОформляемоеПоле			= ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле	= Новый ПолеКомпоновкиДанных(ИмяСпискаПолей + "Картинка");
	ОформляемоеПоле			= ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле	= Новый ПолеКомпоновкиДанных(ИмяСпискаПолей + "Представление");
	ОформляемоеПоле			= ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле	= Новый ПолеКомпоновкиДанных(ИмяСпискаПолей + "ПредставлениеПутиКДанным");

	ЭлементОтбора					= ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ИмяСпискаПолей + ".СоответствуетОтбору");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;

	ЭлементОтбора				= ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("СтрокаПоиска" + ИмяСпискаПолей);
	ЭлементОтбора.ВидСравнения	= ВидСравненияКомпоновкиДанных.Заполнено;

	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость",	Ложь);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать",	Ложь);
КонецПроцедуры

Функция сКФ_НайтиТекстВСтроке(Знач Строка, Знач Текст)
	СтрокаПоиска = Строка;

	ФорматированныеСтроки = Новый Массив;
	Для Каждого Подстрока Из СтрРазделить(Текст, " ", Ложь) Цикл
		Позиция = СтрНайти(НРег(СтрокаПоиска), НРег(Подстрока));
		Если Позиция = 0 Тогда
			ФорматированныеСтроки = Неопределено;

			Прервать;
		КонецЕсли;

		ПодстрокаДоВхождения	= Лев(СтрокаПоиска, Позиция - 1);
		ПодстрокаВхождения		= Сред(СтрокаПоиска, Позиция, СтрДлина(Подстрока));
		СтрокаПоиска			= Сред(СтрокаПоиска, Позиция + СтрДлина(Подстрока));

		ФорматированныеСтроки.Добавить(ПодстрокаДоВхождения);
		ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(ПодстрокаВхождения, Новый Шрифт( , , Истина), Новый Цвет(0,128,0)));
	КонецЦикла;

	Если Не ЗначениеЗаполнено(ФорматированныеСтроки) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ФорматированныеСтроки.Добавить(СтрокаПоиска);
	СтрокаСПодсветкой = Новый ФорматированнаяСтрока(ФорматированныеСтроки); // АПК:1356 - можно использовать составную форматированную строку, так как массив строк формируется из переданного в функцию текста.

	Возврат СтрокаСПодсветкой;
КонецФункции

Функция сКФ_СхемаКомпоновкиДанныхИзТаблицыЗначений(ТаблицаЗначений)
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;

	ИсточникДанных						= СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя					= "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных	= "local";

	НаборДанных					= СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных	= "ИсточникДанных1";
	НаборДанных.Имя				= "НаборДанных1";

	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Поле				= НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		Поле.Поле			= СтрокаТаблицы.Идентификатор;
		Поле.ПутьКДанным	= СтрокаТаблицы.Идентификатор;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Представление) Тогда
			Поле.Заголовок = СтрокаТаблицы.Представление;
		КонецЕсли;
		Поле.ТипЗначения	= СтрокаТаблицы.ТипЗначения;

		ДополнительныеПараметры = Новый Структура("Порядок");
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, СтрокаТаблицы);

		ДополнительныеПараметры.Вставить("Картинка",  Base64Строка(СтрокаТаблицы.Картинка.ПолучитьДвоичныеДанные()));

		Поле.ПараметрыРедактирования.УстановитьЗначениеПараметра("Маска", сКФ_ЗначениеВJSON(ДополнительныеПараметры));
	КонецЦикла;

	Возврат СхемаКомпоновкиДанных;
КонецФункции

Функция сКФ_СхемаКомпоновкиДанныхИзДереваЗначений(ДеревоЗначений)
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;

	ИсточникДанных						= СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя					= "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных	= "local";

	НаборДанных					= СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных	= "ИсточникДанных1";
	НаборДанных.Имя				= "НаборДанных1";

	сКФ_ДобавитьГруппуЭлементовВНаборДанных(ДеревоЗначений, НаборДанных);

	Возврат СхемаКомпоновкиДанных;
КонецФункции

Процедура сКФ_ДобавитьГруппуЭлементовВНаборДанных(КоллекцияЭлементов, НаборДанных, Родитель = Неопределено)
	Для Каждого Элемент Из КоллекцияЭлементов.Строки Цикл
		ЭтоГруппа = Элемент.Строки.Количество() > 0 И Не ЗначениеЗаполнено(Элемент.ТипЗначения);

		Поле				= НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		Поле.Поле			= Элемент.Идентификатор;
		Поле.ТипЗначения	= Элемент.ТипЗначения;

		ДополнительныеПараметры = Новый Структура("Порядок,ЭтоГруппа");
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, Элемент);
		ДополнительныеПараметры.ЭтоГруппа = ЭтоГруппа;

		ДополнительныеПараметры.Вставить("Картинка", Base64Строка(Элемент.Картинка.ПолучитьДвоичныеДанные()));

		Поле.ПараметрыРедактирования.УстановитьЗначениеПараметра("Маска", сКФ_ЗначениеВJSON(ДополнительныеПараметры));

		Поле.ПутьКДанным = Элемент.Идентификатор;
		Если Родитель <> Неопределено Тогда
			Поле.ПутьКДанным = Родитель.ПутьКДанным + "." + Поле.ПутьКДанным;
		КонецЕсли;

		Если ЗначениеЗаполнено(Элемент.Представление) Тогда
			Поле.Заголовок = Элемент.Представление;
		КонецЕсли;

		сКФ_ДобавитьГруппуЭлементовВНаборДанных(Элемент, НаборДанных, Поле);
	КонецЦикла;
КонецПроцедуры

Процедура сКФ_ЗаполнитьСписокДоступныхРеквизитов(Знач ТекущийРеквизит, ИсточникиДоступныхПолей, Знач Отбор = "",  ИспользоватьИдентификаторыДляФормул = Ложь)
	ДоступныеРеквизиты = сКФ_НоваяКоллекцияДоступныхРеквизитов();
	ДоступныеРеквизиты.Колонки.Добавить("ЕстьПодчиненные",	Новый ОписаниеТипов("Булево"));
	ДоступныеРеквизиты.Колонки.Добавить("Порядок",			Новый ОписаниеТипов("Число"));

	КоллекцииДоступныхПолей = сКФ_КоллекцииДоступныхПолей(ТекущийРеквизит, ИсточникиДоступныхПолей, ИспользоватьИдентификаторыДляФормул);
	Для Каждого КоллекцияДоступныхПолей Из КоллекцииДоступныхПолей Цикл
		Для Каждого ОписаниеПоля Из КоллекцияДоступныхПолей.Элементы Цикл
			Если ОписаниеПоля.Поле = Новый ПолеКомпоновкиДанных("ДополнительныеРеквизиты") Тогда
				Продолжить;
			КонецЕсли;
			Если ОписаниеПоля.Поле = Новый ПолеКомпоновкиДанных("КонтактнаяИнформация") Тогда
				Продолжить;
			КонецЕсли;

			Реквизит = ДоступныеРеквизиты.Добавить();

			Реквизит.Заголовок = ОписаниеПоля.Заголовок;
			Если ОписаниеПоля.Родитель <> Неопределено И СтрНачинаетсяС(Реквизит.Заголовок, ОписаниеПоля.Родитель.Заголовок) Тогда
				Реквизит.Заголовок = Сред(Реквизит.Заголовок, СтрДлина(ОписаниеПоля.Родитель.Заголовок) + 2);
			КонецЕсли;

			Реквизит.Поле = ОписаниеПоля.Поле;

			ЧастиСтроки		= СтрРазделить(ОписаниеПоля.Поле, ".");
			Реквизит.Имя	= сКФ_ОчиститьКвадратныеСкобки(ЧастиСтроки[ЧастиСтроки.ВГраница()]);

			Реквизит.Тип		= ОписаниеПоля.Тип;
			Реквизит.Папка		= ОписаниеПоля.Папка;
			Реквизит.Таблица	= ОписаниеПоля.Таблица;
			Реквизит.Порядок	= 1;

			ДополнительныеПараметры = Новый Соответствие;
			Если ТипЗнч(ОписаниеПоля) = Тип("ДоступноеПолеОтбораКомпоновкиДанных") И ЗначениеЗаполнено(ОписаниеПоля.Маска) И СтрНачинаетсяС(ОписаниеПоля.Маска, "{") И СтрЗаканчиваетсяНа(ОписаниеПоля.Маска, "}") Тогда
				ДополнительныеПараметры = сКФ_JSONВЗначение(ОписаниеПоля.Маска);
			КонецЕсли;

			Если ДополнительныеПараметры["Картинка"] <> Неопределено Тогда
				Реквизит.Картинка = Новый Картинка(Base64Значение(ДополнительныеПараметры["Картинка"]));
			КонецЕсли;
			Порядок = ДополнительныеПараметры["Порядок"];
			Если ЗначениеЗаполнено(Порядок) Тогда
				Реквизит.Порядок = Порядок;
			КонецЕсли;

			Реквизит.ЭтоГруппа = ДополнительныеПараметры["ЭтоГруппа"];
			Если Реквизит.ЭтоГруппа Тогда
				Реквизит.Папка = Реквизит.ЭтоГруппа;
			КонецЕсли;

			Если Не ЗначениеЗаполнено(Реквизит.Картинка) Тогда
				Реквизит.Картинка = сКФ_КартинкаТипа(ОписаниеПоля.Тип);

				Если Реквизит.Таблица Тогда
					Реквизит.Картинка = БиблиотекаКартинок.ТипСписок;
				ИначеЕсли Реквизит.Папка Тогда
					Реквизит.Картинка = БиблиотекаКартинок.ТипГруппа;
				КонецЕсли;
			КонецЕсли;

			Если ОписаниеПоля.Поле = Новый ПолеКомпоновкиДанных("СистемныеПоля") Тогда
				Реквизит.Порядок = 2;
			КонецЕсли;
			Если ОписаниеПоля.Поле = Новый ПолеКомпоновкиДанных("ПользовательскиеПоля") Тогда
				Реквизит.Заголовок	= "Формулы";
				Реквизит.Картинка	= БиблиотекаКартинок.ТипФункция;
				Реквизит.Порядок	= 3;
			КонецЕсли;
			Если ОписаниеПоля.Поле = Новый ПолеКомпоновкиДанных("ДетальныеЗаписи") Тогда
				Реквизит.Порядок = 4;
			КонецЕсли;

			Реквизит.ПредставлениеПутиКДанным = "";
			Если Не Реквизит.ЭтоГруппа Тогда
				Реквизит.ПутьКДанным				= Реквизит.Имя;
				Реквизит.ПредставлениеПутиКДанным	= Реквизит.Заголовок;
			КонецЕсли;

			Если ОписаниеПоля.Элементы.Количество() > 0 Тогда
				Реквизит.ЕстьПодчиненные = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	ДоступныеРеквизиты.Сортировать("Порядок, Заголовок");

	КоллекцияРеквизитов = сКФ_ПодчиненныеЭлементы(ТекущийРеквизит);
	Для Каждого ДоступныйРеквизит Из ДоступныеРеквизиты Цикл
		Реквизит = КоллекцияРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(Реквизит, ДоступныйРеквизит);

		Если сКФ_Родитель(Реквизит) <> Неопределено Тогда
			Родитель = сКФ_Родитель(Реквизит);
			Если Не Реквизит.ЭтоГруппа Тогда
				Реквизит.ПутьКДанным				= Родитель.ПутьКДанным;
				Реквизит.ПредставлениеПутиКДанным	= Строка(Родитель.ПредставлениеПутиКДанным);;
			Иначе
				Если ЗначениеЗаполнено(Родитель.ПутьКДанным) Тогда
					Реквизит.ПутьКДанным				= Родитель.ПутьКДанным + "." + Реквизит.Имя;
					Реквизит.ПредставлениеПутиКДанным 	= Строка(Родитель.ПредставлениеПутиКДанным) + "." + Реквизит.Заголовок;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ДоступныйРеквизит.ЕстьПодчиненные Или Реквизит.Тип.Типы().Количество() = 1 И Не БазоваяПодсистемаСервер.ОН_ЭтоСсылка(Реквизит.Тип.Типы()[0]) Тогда
			КоллекцииПолейРеквизита = сКФ_КоллекцииДоступныхПолей(Реквизит, ИсточникиДоступныхПолей, ИспользоватьИдентификаторыДляФормул);
			Если ЗначениеЗаполнено(КоллекцииПолейРеквизита) И ЗначениеЗаполнено(КоллекцииПолейРеквизита[0].Элементы)  И Не СтрНайти(Реквизит.ПутьКДанным, Реквизит.Имя + ".") Тогда
				сКФ_ПодчиненныеЭлементы(Реквизит).Добавить();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция сКФ_НоваяКоллекцияДоступныхРеквизитов()
	ДоступныеРеквизиты = Новый ТаблицаЗначений;
	Для Каждого ОписаниеРеквизита Из сКФ_РеквизитыПодключаемогоСписка() Цикл
		ИмяРеквизита	= ОписаниеРеквизита.Ключ;
		ТипРеквизита	= ОписаниеРеквизита.Значение;
		ДоступныеРеквизиты.Колонки.Добавить(ИмяРеквизита, ТипРеквизита);
	КонецЦикла;

	Возврат ДоступныеРеквизиты;
КонецФункции

Функция сКФ_ПодчиненныеЭлементы(Коллекция)
	Если ТипЗнч(Коллекция) = Тип("ДеревоЗначений") Или ТипЗнч(Коллекция) = Тип("СтрокаДереваЗначений") Тогда
		Возврат Коллекция.Строки;
	КонецЕсли;

	Возврат Коллекция.ПолучитьЭлементы();
КонецФункции

Функция сКФ_Родитель(Элемент)
	Если ТипЗнч(Элемент) = Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат Элемент.ПолучитьРодителя();
	ИначеЕсли ТипЗнч(Элемент) = Тип("СтрокаДереваЗначений") Тогда
		Возврат Элемент.Родитель;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

Функция сКФ_КоллекцииДоступныхПолей(Реквизит, ИсточникиДоступныхПолей, ИспользоватьИдентификаторыДляФормул)
	Результат = Новый Массив;

	Если ТипЗнч(Реквизит) = Тип("ДанныеФормыДерево") Или ТипЗнч(Реквизит) = Тип("ДеревоЗначений") Тогда
		Для Каждого ИсточникДоступныхПолей Из сКФ_ИсточникиДоступныхПолей(ИсточникиДоступныхПолей, ИспользоватьИдентификаторыДляФормул) Цикл
			Результат.Добавить(ИсточникДоступныхПолей.КоллекцияПолей);
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;

	Замещать = Ложь;
	Для Каждого ИсточникДоступныхПолей Из сКФ_ИсточникиДоступныхПолей(ИсточникиДоступныхПолей, ИспользоватьИдентификаторыДляФормул, Реквизит) Цикл
		Реквизит.СвойНаборПолей = Истина;
		Результат.Добавить(ИсточникДоступныхПолей.КоллекцияПолей);
		Замещать = Замещать Или ИсточникДоступныхПолей.Замещать;
	КонецЦикла;

	Если Замещать И ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	КонецЕсли;

	Родитель = сКФ_Родитель(Реквизит);
	Пока Родитель <> Неопределено Цикл
		Если Родитель.СвойНаборПолей Тогда
			Прервать;
		Иначе
			Родитель = сКФ_Родитель(Родитель);
			Продолжить;
		КонецЕсли;
	КонецЦикла;

	Если Родитель <> Неопределено Тогда
		Для Каждого ИсточникДоступныхПолей Из сКФ_ИсточникиДоступныхПолей(ИсточникиДоступныхПолей, ИспользоватьИдентификаторыДляФормул, Родитель) Цикл
			Поле = ИсточникДоступныхПолей.КоллекцияПолей.НайтиПоле(Реквизит.Поле);
			Если Поле <> Неопределено Тогда
				Результат.Добавить(Поле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Не Замещать Или Не ЗначениеЗаполнено(Результат) Тогда
		Для Каждого ИсточникДоступныхПолей Из сКФ_ИсточникиДоступныхПолей(ИсточникиДоступныхПолей, ИспользоватьИдентификаторыДляФормул) Цикл
			Поле = ИсточникДоступныхПолей.КоллекцияПолей.НайтиПоле(Реквизит.Поле);
			Если Поле <> Неопределено Тогда
				Результат.Добавить(Поле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция сКФ_ИсточникиДоступныхПолей(ИсточникиДоступныхПолей, ИспользоватьИдентификаторыДляФормул, Реквизит = Неопределено)
	Результат = Новый Массив;

	Если Реквизит = Неопределено Тогда
		Для Каждого ИсточникДоступныхПолей Из ИсточникиДоступныхПолей.НайтиСтроки(Новый Структура("ИсточникДанных", "")) Цикл
			Результат.Добавить(ИсточникДоступныхПолей);
		КонецЦикла;

		Возврат Результат;
	КонецЕсли;

	Для Каждого ИсточникДоступныхПолей Из ИсточникиДоступныхПолей Цикл
		Строка = Реквизит.ПутьКДанным;
		Если Реквизит.Папка Тогда
			Строка = Строка + ?(ЗначениеЗаполнено(Строка), ".", "") + Реквизит.Имя;
		КонецЕсли;
		Если сКФ_СтрокаСоответствуетШаблону(Строка, ИсточникДоступныхПолей.ИсточникДанных) Тогда
			Результат.Добавить(ИсточникДоступныхПолей);
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	КонецЕсли;

	Для Каждого Тип Из Реквизит.Тип.Типы() Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено Или Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		ИсточникДанных = ОбъектМетаданных.ПолноеИмя();

		ИсточникНайден = Ложь;
		Для Каждого ИсточникДоступныхПолей Из ИсточникиДоступныхПолей Цикл
			Если сКФ_СтрокаСоответствуетШаблону(ИсточникДанных, ИсточникДоступныхПолей.ИсточникДанных) Тогда
				Результат.Добавить(ИсточникДоступныхПолей);
				ИсточникНайден = Истина;
			КонецЕсли;
		КонецЦикла;

		Если Не ИсточникНайден И ИспользоватьИдентификаторыДляФормул Тогда
			КомпоновщикНастроек = сКФ_КомпоновщикНастроекОбъекта(ОбъектМетаданных);
			ИсточникДоступныхПолей					= ИсточникиДоступныхПолей.Добавить();
			ИсточникДоступныхПолей.ИсточникДанных	= ИсточникДанных;
			ИсточникДоступныхПолей.КоллекцияПолей	= КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора;
			ИсточникДоступныхПолей.Замещать			= Истина;

			Результат.Добавить(ИсточникДоступныхПолей);

			КоллекцияПолей = сКФ_КоллекцияДопРеквизитов(ОбъектМетаданных.ПолноеИмя());
			Если КоллекцияПолей <> Неопределено Тогда
				ИсточникДоступныхПолей					= ИсточникиДоступныхПолей.Добавить();
				ИсточникДоступныхПолей.ИсточникДанных	= ИсточникДанных;
				ИсточникДоступныхПолей.КоллекцияПолей	= КоллекцияПолей;

				Результат.Добавить(ИсточникДоступныхПолей);
			КонецЕсли;

			КоллекцияПолей = сКФ_КоллекцияПолейКонтактнойИнформации(ОбъектМетаданных.ПолноеИмя());
			Если КоллекцияПолей <> Неопределено Тогда
				ИсточникДоступныхПолей					= ИсточникиДоступныхПолей.Добавить();
				ИсточникДоступныхПолей.ИсточникДанных	= ИсточникДанных;
				ИсточникДоступныхПолей.КоллекцияПолей	= КоллекцияПолей;

				Результат.Добавить(ИсточникДоступныхПолей);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция сКФ_СтрокаСоответствуетШаблону(Знач Строка, Знач Шаблон)
	Если Не ЗначениеЗаполнено(Шаблон) Тогда
		Возврат Ложь;
	КонецЕсли;

	Строка						= СтрСоединить(СтрРазделить(Строка, " " + Символы.ПС + Символы.ВК + Символы.Таб, Ложь), " ");
	СтрокаСоответствуетШаблону	= Истина;

	Для Каждого ЧастиШаблона Из СтрРазделить(Шаблон, "*", Ложь) Цикл
		ФрагментДляПоиска = СтрСоединить(СтрРазделить(ЧастиШаблона, " " + Символы.ПС + Символы.ВК + Символы.Таб, Ложь), " ");

		Позиция = СтрНайти(Строка, ФрагментДляПоиска);
		Если Позиция = 0 Тогда
			СтрокаСоответствуетШаблону = Ложь;

			Прервать;
		КонецЕсли;

		Строка = Сред(Строка, Позиция + СтрДлина(ФрагментДляПоиска));
	КонецЦикла;

	Возврат СтрокаСоответствуетШаблону;
КонецФункции

Функция сКФ_КомпоновщикНастроекОбъекта(ОбъектМетаданных)
	СхемаКомпоновкиДанных = Неопределено;

	Если ТипЗнч(ОбъектМетаданных) = Тип("Строка") Тогда
		СхемаКомпоновкиДанных = ПолучитьОбщийМакет("ДанныеПечати" + ОбъектМетаданных);
	Иначе
		ЕстьДанныеПечати = ОбъектМетаданных.Макеты.Найти("ДанныеПечати") <> Неопределено;
		Если ЕстьДанныеПечати Тогда
			МенеджерОбъекта = БазоваяПодсистемаСервер.ОН_МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
			СхемаКомпоновкиДанных = МенеджерОбъекта.ПолучитьМакет("ДанныеПечати");
		Иначе
			ТекстЗапроса			= сКФ_ТекстЗапроса(ОбъектМетаданных.ПолноеИмя());
			СхемаКомпоновкиДанных	= сКФ_СхемаКомпоновкиДанных(ТекстЗапроса);
		КонецЕсли;
	КонецЕсли;

	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);

	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

	Возврат КомпоновщикНастроек;
КонецФункции

Функция сКФ_СхемаКомпоновкиДанных(ТекстЗапроса)
	СхемаКомпоновкиДанных				= Новый СхемаКомпоновкиДанных;

	ИсточникДанных						= СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя					= "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных	= "local";

	НаборДанных									= СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных					= "ИсточникДанных1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей	= Истина;
	НаборДанных.Запрос							= ТекстЗапроса;
	НаборДанных.Имя								= "НаборДанных1";

	Возврат СхемаКомпоновкиДанных;
КонецФункции

Функция сКФ_ТекстЗапроса(ТипыИзменяемыхОбъектов, ОграничитьВыборку = Ложь)
	ОбъектыМетаданных = Новый Массив;
	Для Каждого ИмяОбъекта Из СтрРазделить(ТипыИзменяемыхОбъектов, ",", Ложь) Цикл
		ОбъектыМетаданных.Добавить(Метаданные.НайтиПоПолномуИмени(ИмяОбъекта));
	КонецЦикла;

	СтруктураОбъектов = сКФ_ОбщиеРеквизитыОбъектов(ТипыИзменяемыхОбъектов);

	Результат = "";
	ПсевдонимТаблицы = "ПсевдонимЗаданнойТаблицы";
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		Если Не ПустаяСтрока(Результат) Тогда
			Результат = Результат + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
		КонецЕсли;

		ТекстЗапроса = "";

		Для Каждого ИмяРеквизита Из СтруктураОбъектов.Реквизиты Цикл
			Если Не ПустаяСтрока(ТекстЗапроса) Тогда
				ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС;
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + ПсевдонимТаблицы + "." + ИмяРеквизита + " КАК " + ИмяРеквизита;
		КонецЦикла;

		Для Каждого ТабличнаяЧасть Из СтруктураОбъектов.ТабличныеЧасти Цикл
			ИмяТабличнойЧасти	= ТабличнаяЧасть.Ключ;
			ТекстЗапроса		= ТекстЗапроса + "," + Символы.ПС + ПсевдонимТаблицы + "." + ИмяТабличнойЧасти + ".(";

			СтрокаРеквизитов = "НомерСтроки";
			РеквизитыТабличнойЧасти = ТабличнаяЧасть.Значение;
			Для Каждого ИмяРеквизита Из РеквизитыТабличнойЧасти Цикл
				Если Не ПустаяСтрока(СтрокаРеквизитов) Тогда
					СтрокаРеквизитов = СтрокаРеквизитов + "," + Символы.ПС;
				КонецЕсли;
				СтрокаРеквизитов = СтрокаРеквизитов + ИмяРеквизита;
			КонецЦикла;
			ТекстЗапроса = ТекстЗапроса + СтрокаРеквизитов +"
			|)";
		КонецЦикла;

		ТекстЗапроса = "ВЫБРАТЬ " + ?(ОграничитьВыборку, "ПЕРВЫЕ 1001 ", "") //@query-part
			+ ТекстЗапроса + Символы.ПС + "
			|ИЗ
			|	"+ ОбъектМетаданных.ПолноеИмя() + " КАК " + ПсевдонимТаблицы;

		Результат = Результат + ТекстЗапроса;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция сКФ_ОбщиеРеквизитыОбъектов(ТипыОбъектов) Экспорт
	ОбъектыМетаданных = Новый Массив;
	Для Каждого ИмяОбъекта Из СтрРазделить(ТипыОбъектов, ",", Ложь) Цикл
		ОбъектыМетаданных.Добавить(Метаданные.НайтиПоПолномуИмени(ИмяОбъекта));
	КонецЦикла;

	Результат = Новый Структура;
	Результат.Вставить("Реквизиты",			Новый Массив);
	Результат.Вставить("ТабличныеЧасти",	Новый Структура);

	Если ОбъектыМетаданных.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;

	ОбщийСписокРеквизитов = сКФ_СписокЭлементов(ОбъектыМетаданных[0].Реквизиты, Ложь);
	Для Индекс = 1 По ОбъектыМетаданных.Количество() - 1 Цикл
		ОбщийСписокРеквизитов = сКФ_ПересечениеРеквизитов(ОбщийСписокРеквизитов, ОбъектыМетаданных[Индекс].Реквизиты);
	КонецЦикла;

	СтандартныеРеквизиты = ОбъектыМетаданных[0].СтандартныеРеквизиты;
	Для Индекс = 1 По ОбъектыМетаданных.Количество() - 1 Цикл
		СтандартныеРеквизиты = сКФ_ПересечениеРеквизитов(СтандартныеРеквизиты, ОбъектыМетаданных[Индекс].СтандартныеРеквизиты);
	КонецЦикла;
	Для Каждого Реквизит Из СтандартныеРеквизиты Цикл
		ОбщийСписокРеквизитов.Добавить(Реквизит);
	КонецЦикла;

	Результат.Реквизиты = сКФ_СписокЭлементов(ОбщийСписокРеквизитов);

	ТабличныеЧасти = сКФ_СписокЭлементов(ОбъектыМетаданных[0].ТабличныеЧасти);
	Для Индекс = 1 По ОбъектыМетаданных.Количество() - 1 Цикл
		ТабличныеЧасти = сКФ_ПересечениеМножеств(ТабличныеЧасти, сКФ_СписокЭлементов(ОбъектыМетаданных[Индекс].ТабличныеЧасти));
	КонецЦикла;

	Для Каждого ИмяТабличнойЧасти Из ТабличныеЧасти Цикл
		РеквизитыТабличнойЧасти = сКФ_СписокЭлементов(ОбъектыМетаданных[0].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты, Ложь);
		Для Индекс = 1 По ОбъектыМетаданных.Количество() - 1 Цикл
			РеквизитыТабличнойЧасти = сКФ_ПересечениеРеквизитов(РеквизитыТабличнойЧасти, ОбъектыМетаданных[Индекс].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты);
		КонецЦикла;
		Если РеквизитыТабличнойЧасти.Количество() > 0 Тогда
			Результат.ТабличныеЧасти.Вставить(ИмяТабличнойЧасти, сКФ_СписокЭлементов(РеквизитыТабличнойЧасти));
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция сКФ_ПересечениеМножеств(Множество1, Множество2) Экспорт
	Результат = Новый Массив;

	Для Каждого Элемент Из Множество2 Цикл
		Индекс = Множество1.Найти(Элемент);
		Если Индекс <> Неопределено Тогда
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция сКФ_ПересечениеРеквизитов(КоллекцияРеквизитов1, КоллекцияРеквизитов2)
	Результат = Новый Массив;

	Для Каждого Реквизит2 Из КоллекцияРеквизитов2 Цикл
		Для Каждого Реквизит1 Из КоллекцияРеквизитов1 Цикл
			Если Реквизит1.Имя = Реквизит2.Имя И (Реквизит1.Тип = Реквизит2.Тип Или Реквизит1.Имя = "Ссылка") Тогда
				Результат.Добавить(Реквизит1);

				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция сКФ_СписокЭлементов(Коллекция, ТолькоИмена = Истина)
	Результат = Новый Массив;
	Для Каждого Элемент Из Коллекция Цикл
		Если ТолькоИмена Тогда
			Результат.Добавить(Элемент.Имя);
		Иначе
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Процедура сКФ_ЗаполнитьСписокДоступныхПолей(Форма, ПараметрыЗаполнения) Экспорт
	ИдентификаторСтроки = ПараметрыЗаполнения.ИдентификаторСтроки;
	ИмяСписка = ПараметрыЗаполнения.ИмяСписка;

	сКФ_РазвернутьРеквизит(ИдентификаторСтроки, ИмяСписка, Форма);
КонецПроцедуры

Функция сКФ_СписокИсточниковДоступныхПолей(Форма, ИмяСпискаПолей)
	ИмяСпискаИсточников = ВариантыОтчетовКлиентСервер.КФ_НастройкиСпискаПолей(Форма, ИмяСпискаПолей).ИмяСпискаИсточников;

	Возврат Форма[ИмяСпискаИсточников];
КонецФункции

Функция сКФ_СписокСвойствДляВидаОбъектов(ВидОбъектов)
	Результат = Новый Массив;

	ВидыСвойств = Новый Массив;
	ВидыСвойств.Добавить("ДополнительныеРеквизиты");
	ВидыСвойств.Добавить("ДополнительныеСведения");

	// Зарезервировано для новых подсистем

	Возврат Результат;
КонецФункции

Функция сКФ_КоллекцияДопРеквизитов(ИмяОбъектаМетаданных)
	СписокСвойств = сКФ_СписокСвойствДляВидаОбъектов(ИмяОбъектаМетаданных);
	Если Не ЗначениеЗаполнено(СписокСвойств) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ЗначенияРеквизитов = БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъектов(СписокСвойств, "Заголовок,ИдентификаторДляФормул,ТипЗначения");

	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;

	ИсточникДанных						= СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя					= "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных	= "local";

	НаборДанных					= СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных	= "ИсточникДанных1";
	НаборДанных.Имя				= "НаборДанных1";

	Для Каждого Элемент Из ЗначенияРеквизитов Цикл
		Свойство			= Элемент.Значение;
		Поле				= НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		Поле.Поле			= Свойство.ИдентификаторДляФормул;
		Поле.ПутьКДанным	= Свойство.ИдентификаторДляФормул;
		Если ЗначениеЗаполнено(Свойство.Заголовок) Тогда
			Поле.Заголовок = Свойство.Заголовок;
		КонецЕсли;
		Поле.ТипЗначения = Свойство.ТипЗначения;
	КонецЦикла;

	АдресСхемы					= ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных);
	ИсточникДоступныхНастроек	= Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);

	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

	Возврат КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора;
КонецФункции

Функция сКФ_КоллекцияПолейКонтактнойИнформации(ИмяОбъектаМетаданных)

	ВидыКонтактнойИнформации = Неопределено;

	// Зарезервировано для новых подсистем

	Если Не ЗначениеЗаполнено(ВидыКонтактнойИнформации) Тогда
		Возврат Неопределено;
	КонецЕсли;

	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;

	ИсточникДанных						= СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя					= "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных	= "local";

	НаборДанных					= СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных	= "ИсточникДанных1";
	НаборДанных.Имя				= "НаборДанных1";

	Для Каждого ВидКонтактнойИнформации Из ВидыКонтактнойИнформации Цикл
		Если Не ЗначениеЗаполнено(ВидКонтактнойИнформации.ИдентификаторДляФормул) Тогда
			Продолжить;
		КонецЕсли;
		Поле				= НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		Поле.Поле			= ВидКонтактнойИнформации.ИдентификаторДляФормул;
		Поле.ПутьКДанным	= ВидКонтактнойИнформации.ИдентификаторДляФормул;
		Если ЗначениеЗаполнено(ВидКонтактнойИнформации.Наименование) Тогда
			Поле.Заголовок = ВидКонтактнойИнформации.Наименование;
		КонецЕсли;
		Поле.ТипЗначения = Новый ОписаниеТипов("Строка");
	КонецЦикла;

	АдресСхемы					= ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных);
	ИсточникДоступныхНастроек	= Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);

	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

	Возврат КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора;
КонецФункции

Процедура сКФ_ВыполнитьПоискВСпискеПолей(Форма) Экспорт
	Для Каждого Элемент Из Форма.ПодключенныеСпискиПолей Цикл
		ИмяСпискаПолей				= Элемент.ИмяСпискаПолей;
		ИмяРеквизитаСтрокиПоиска	= "СтрокаПоиска" + ИмяСпискаПолей;
		Отбор			= Форма[ИмяРеквизитаСтрокиПоиска];
		ОтборУстановлен	= ЗначениеЗаполнено(Отбор);
		Если ЗначениеЗаполнено(Отбор) Тогда
			сКФ_УстановитьОтбор(Форма, ИмяСпискаПолей, Отбор, Форма[ИмяСпискаПолей]);
		КонецЕсли;
		Форма.Элементы[ИмяСпискаПолей + "Представление"].Видимость				= НЕ ОтборУстановлен;
		Форма.Элементы[ИмяСпискаПолей + "ПредставлениеПутиКДанным"].Видимость	= ОтборУстановлен;
		Форма.Элементы[ИмяСпискаПолей].Отображение								= ?(ОтборУстановлен, ОтображениеТаблицы.Список, ОтображениеТаблицы.Дерево);
	КонецЦикла;
КонецПроцедуры

Функция сКФ_УстановитьОтбор(Знач Форма, Знач ИмяСписка, Знач Отбор, Знач КоллекцияРеквизитов = Неопределено, Знач Уровень = 0)
	Уровень								= Уровень + 1;
	ЕстьРеквизитыСоответствующиеОтбору	= Ложь;
	Для Каждого Реквизит Из КоллекцияРеквизитов.ПолучитьЭлементы() Цикл
		Если сКФ_РодительскийРеквизитСоответствуетОтбору(Реквизит) Тогда
			Реквизит.СоответствуетОтбору = Ложь;
		Иначе
			ФорматированнаяСтрока = сКФ_НайтиТекстВСтроке(Реквизит.ПредставлениеПутиКДанным, Отбор);
			Реквизит.СоответствуетОтбору = ФорматированнаяСтрока <> Неопределено;
			Если Реквизит.СоответствуетОтбору Тогда
				Реквизит.ПредставлениеПутиКДанным = ФорматированнаяСтрока;
			КонецЕсли;
		КонецЕсли;
		Если Не Реквизит.СоответствуетОтбору И (Уровень < 2 Или Реквизит.Поле <> Неопределено И СтрНачинаетсяС(Отбор, Реквизит.ПредставлениеПутиКДанным)) Тогда
			сКФ_РазвернутьРеквизит(Реквизит.ПолучитьИдентификатор(), ИмяСписка, Форма);
		КонецЕсли;
		Реквизит.ПодчиненныйЭлементСоответствуетОтбору	= сКФ_УстановитьОтбор(Форма, ИмяСписка, Отбор, Реквизит, Уровень);
		ЕстьРеквизитыСоответствующиеОтбору				= ЕстьРеквизитыСоответствующиеОтбору Или Реквизит.СоответствуетОтбору Или Реквизит.ПодчиненныйЭлементСоответствуетОтбору;
	КонецЦикла;

	Возврат ЕстьРеквизитыСоответствующиеОтбору;
КонецФункции

Функция сКФ_РодительскийРеквизитСоответствуетОтбору(Реквизит)
	Родитель = Реквизит.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		Возврат Родитель.СоответствуетОтбору Или сКФ_РодительскийРеквизитСоответствуетОтбору(Родитель);
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Функция сКФ_ФормулаИзПредставления(Форма, ПредставлениеФормулы) Экспорт
	ЭлементыФормулы	= ВариантыОтчетовКлиентСервер.КФ_ЭлементыФормулы(ПредставлениеФормулы);
	Выражение		= ПредставлениеФормулы;

	Для Каждого Элемент Из Форма.ПодключенныеСпискиПолей Цикл
		ИмяСпискаПолей = Элемент.ИмяСпискаПолей;
		КоллекцияПолей = Форма[ИмяСпискаПолей];
		СкобкиИдентификаторов = Элемент.СкобкиИдентификаторов;

		Для Каждого ПредставлениеОперанда Из ЭлементыФормулы.Операнды Цикл
			ПутьКДанным = сКФ_ОчиститьКвадратныеСкобки(ПредставлениеОперанда);
			Реквизит = сКФ_НайтиРеквизит(Форма, ИмяСпискаПолей, ПутьКДанным, КоллекцияПолей.ПолучитьЭлементы(), Истина);
			Если Реквизит <> Неопределено  Тогда
				Операнд = сКФ_ОчиститьКвадратныеСкобки(Реквизит.ПутьКДанным);
				Если СкобкиИдентификаторов Тогда
					Операнд = сКФ_ОбернутьВКвадратныеСкобки(Операнд);
				КонецЕсли;
				Выражение = СтрЗаменить(Выражение, ПредставлениеОперанда, Операнд);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Выражение;
КонецФункции

Функция сКФ_ПредставлениеФормулы(Форма, Формула) Экспорт
	ЭлементыФормулы	= ВариантыОтчетовКлиентСервер.КФ_ЭлементыФормулы(Формула);
	Выражение		= Формула;

	Для Каждого Элемент Из Форма.ПодключенныеСпискиПолей Цикл
		ИмяСпискаПолей		= Элемент.ИмяСпискаПолей;
		КоллекцияПолей		= Форма[ИмяСпискаПолей];
		СкобкиПредставлений = Элемент.СкобкиПредставлений;

		Для Каждого Операнд Из ЭлементыФормулы.Операнды Цикл
			ПутьКДанным	= сКФ_ОчиститьКвадратныеСкобки(Операнд);
			Реквизит	= сКФ_НайтиРеквизит(Форма, ИмяСпискаПолей, ПутьКДанным, КоллекцияПолей.ПолучитьЭлементы(), Ложь);
			Если Реквизит <> Неопределено Тогда
				ПредставлениеОперанда = Реквизит.ПредставлениеПутиКДанным;
				Если СкобкиПредставлений Тогда
					ПредставлениеОперанда = сКФ_ОбернутьВКвадратныеСкобки(Реквизит.ПредставлениеПутиКДанным);
				КонецЕсли;
				Выражение = СтрЗаменить(Выражение, Операнд, ПредставлениеОперанда);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Выражение;
КонецФункции

Функция сКФ_ВыражениеДляПроверки(Форма, ПредставлениеФормулы, ИмяСпискаОперандов) Экспорт
	ЭлементыФормулы	= ВариантыОтчетовКлиентСервер.КФ_ЭлементыФормулы(ПредставлениеФормулы);
	Выражение		= ПредставлениеФормулы;

	Для Каждого Элемент Из Форма.ПодключенныеСпискиПолей Цикл
		ИмяСпискаПолей			= Элемент.ИмяСпискаПолей;
		КоллекцияПолей			= Форма[ИмяСпискаПолей];
		СкобкиИдентификаторов	= Элемент.СкобкиИдентификаторов;

		Для Каждого ПредставлениеОперанда Из ЭлементыФормулы.Операнды Цикл
			ПутьКДанным	= сКФ_ОчиститьКвадратныеСкобки(ПредставлениеОперанда);
			Реквизит	= сКФ_НайтиРеквизит(Форма, ИмяСпискаПолей, ПутьКДанным, КоллекцияПолей.ПолучитьЭлементы(), Истина);
			Если Реквизит <> Неопределено  Тогда
				Если ИмяСпискаОперандов = ИмяСпискаПолей Тогда
					Операнд = Реквизит.Тип.ПривестиЗначение(1);
					Если ТипЗнч(Операнд) = Тип("Строка") Тогда
						Операнд = """" + Операнд + """";
					КонецЕсли;
					Если ТипЗнч(Операнд) = Тип("Булево") Тогда
						Операнд = Формат(Операнд, "БЛ=Ложь; БИ=Истина"); // Должно быть на языке конфигурации.
					КонецЕсли;
					Если ТипЗнч(Операнд) = Тип("Дата") Тогда
						Операнд = "'" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММддЧЧмм") +  "'"; // Для использования в выражении Вычислить().
					КонецЕсли;
				Иначе
					Операнд = сКФ_ОчиститьКвадратныеСкобки(Реквизит.ПутьКДанным);
					Если СкобкиИдентификаторов Тогда
						Операнд = сКФ_ОбернутьВКвадратныеСкобки(Операнд);
					КонецЕсли;
				КонецЕсли;
				Выражение = СтрЗаменить(Выражение, ПредставлениеОперанда, Операнд);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Выражение;
КонецФункции

Функция сКФ_ОчиститьКвадратныеСкобки(Строка)
	Возврат СокрЛП(СтрСоединить(СтрРазделить(Строка, "[]", Ложь), ""));
КонецФункции

Функция сКФ_ОбернутьВКвадратныеСкобки(Строка)
	Возврат "[" + Строка + "]";
КонецФункции

Функция сКФ_НайтиРеквизит(Форма, ИмяСписка, ПутьКДанным, КоллекцияРеквизитов, ИскатьПоПредставлению)
	ИмяПоляПоиска = "ПутьКДанным";
	Если ИскатьПоПредставлению Тогда
		ИмяПоляПоиска = "ПредставлениеПутиКДанным";
	КонецЕсли;

	Владелец	= Неопределено;
	Папки		= Новый Массив;

	Для Каждого Реквизит Из КоллекцияРеквизитов Цикл
		Если НРег(Реквизит[ИмяПоляПоиска]) = НРег(ПутьКДанным) Тогда
			Возврат Реквизит;
		КонецЕсли;
		Если Реквизит.Папка Тогда
			Папки.Добавить(Реквизит);
		Иначе
			Если СтрНачинаетсяС(НРег(ПутьКДанным), НРег(Реквизит[ИмяПоляПоиска]) + ".") Тогда
				Владелец = Реквизит;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если Владелец <> Неопределено Тогда
		сКФ_РазвернутьРеквизит(Владелец.ПолучитьИдентификатор(), ИмяСписка, Форма);

		Возврат сКФ_НайтиРеквизит(Форма, ИмяСписка, ПутьКДанным, Владелец.ПолучитьЭлементы(), ИскатьПоПредставлению);
	КонецЕсли;

	Для Каждого Папка Из Папки Цикл
		сКФ_РазвернутьРеквизит(Папка.ПолучитьИдентификатор(), ИмяСписка, Форма);
		Реквизит = сКФ_НайтиРеквизит(Форма, ИмяСписка, ПутьКДанным, Папка.ПолучитьЭлементы(), ИскатьПоПредставлению);

		Если Реквизит <> Неопределено Тогда
			Возврат Реквизит;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

Функция сКФ_РеквизитыПодключаемогоСписка()
	Результат = Новый Структура;

	Результат.Вставить("Имя",									Новый ОписаниеТипов("Строка"));
	Результат.Вставить("Заголовок",								Новый ОписаниеТипов("Строка"));
	Результат.Вставить("Поле",									Новый ОписаниеТипов());
	Результат.Вставить("ПутьКДанным",							Новый ОписаниеТипов("Строка"));
	Результат.Вставить("ПредставлениеПутиКДанным",				Новый ОписаниеТипов);
	Результат.Вставить("Тип",									Новый ОписаниеТипов("ОписаниеТипов"));
	Результат.Вставить("Картинка",								Новый ОписаниеТипов("Картинка"));
	Результат.Вставить("Папка",									Новый ОписаниеТипов("Булево"));
	Результат.Вставить("Таблица",								Новый ОписаниеТипов("Булево"));
	Результат.Вставить("СвойНаборПолей",						Новый ОписаниеТипов("Булево"));
	Результат.Вставить("Отступ",								Новый ОписаниеТипов("Строка"));
	Результат.Вставить("СоответствуетОтбору",					Новый ОписаниеТипов("Булево"));
	Результат.Вставить("ПодчиненныйЭлементСоответствуетОтбору",	Новый ОписаниеТипов("Булево"));
	Результат.Вставить("ЭтоГруппа",								Новый ОписаниеТипов("Булево"));

	Возврат Результат;
КонецФункции

Функция сКФ_НоваяКоллекцияИсточниковДоступныхПолей()
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИсточникДанных",	Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("КоллекцияПолей");
	Результат.Колонки.Добавить("Замещать",			Новый ОписаниеТипов("Булево"));

	Возврат Результат;
КонецФункции

Процедура сКФ_ОбновитьКоллекцииПолей(Форма, КоллекцииПолей, ИмяСпискаПолей = "ДоступныеПоля") Экспорт
	ИсточникиДоступныхПолей = сКФ_СписокИсточниковДоступныхПолей(Форма, ИмяСпискаПолей); // ДанныеФормыКоллекция
	Отбор = Новый Структура("ИсточникДанных", "");
	Для Каждого СтрокаТаблицы Из ИсточникиДоступныхПолей.НайтиСтроки(Отбор) Цикл
		ИсточникиДоступныхПолей.Удалить(СтрокаТаблицы);
	КонецЦикла;

	Для Индекс = 0 По КоллекцииПолей.ВГраница() Цикл
		КоллекцияПолей							= КоллекцииПолей[Индекс];
		ИсточникДоступныхПолей					= ИсточникиДоступныхПолей.Вставить(Индекс);
		ИсточникДоступныхПолей.ИсточникДанных	= "";
		ИсточникДоступныхПолей.КоллекцияПолей	= КоллекцияПолей;
	КонецЦикла;

	Форма[ИмяСпискаПолей].ПолучитьЭлементы().Очистить();
	сКФ_ЗаполнитьСписокДоступныхРеквизитов(Форма[ИмяСпискаПолей], ИсточникиДоступныхПолей);
КонецПроцедуры

Функция сКФ_ТаблицаПолей() Экспорт
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор",	Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление",	Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ТипЗначения",	Новый ОписаниеТипов("ОписаниеТипов"));
	Результат.Колонки.Добавить("Картинка",		Новый ОписаниеТипов("Картинка"));
	Результат.Колонки.Добавить("Порядок",		Новый ОписаниеТипов("Число"));

	Возврат Результат;
КонецФункции

Функция сКФ_ДеревоПолей() Экспорт
	Результат = Новый ДеревоЗначений;
	Результат.Колонки.Добавить("Идентификатор",	Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление",	Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ТипЗначения",	Новый ОписаниеТипов("ОписаниеТипов"));
	Результат.Колонки.Добавить("Картинка",		Новый ОписаниеТипов("Картинка"));
	Результат.Колонки.Добавить("Порядок",		Новый ОписаниеТипов("Число"));

	Возврат Результат;
КонецФункции

Функция сКФ_КоллекцияПолей(Знач ИсточникПолей, Форма = Неопределено, Знач ИмяКоллекцииСКД = Неопределено) Экспорт
	КомпоновщикНастроек = сКФ_КомпоновщикНастроекИсточникаПолей(ИсточникПолей, Форма);
	Если КомпоновщикНастроек = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат сКФ_КоллекцияПолейКомпоновщикаНастроек(КомпоновщикНастроек, ИмяКоллекцииСКД);
КонецФункции

Функция сКФ_КомпоновщикНастроекИсточникаПолей(Знач ИсточникПолей, Форма = Неопределено) Экспорт
	Если ЭтоАдресВременногоХранилища(ИсточникПолей) Тогда
		ИсточникПолей = ПолучитьИзВременногоХранилища(ИсточникПолей);
	КонецЕсли;

	СхемаКомпоновкиДанных = ИсточникПолей;
	Если ТипЗнч(ИсточникПолей) = Тип("ТаблицаЗначений") Тогда
		СхемаКомпоновкиДанных = сКФ_СхемаКомпоновкиДанныхИзТаблицыЗначений(ИсточникПолей);
	ИначеЕсли ТипЗнч(ИсточникПолей) = Тип("ДеревоЗначений") Тогда
		СхемаКомпоновкиДанных = сКФ_СхемаКомпоновкиДанныхИзДереваЗначений(ИсточникПолей);
	КонецЕсли;

	Если ТипЗнч(СхемаКомпоновкиДанных) <> Тип("СхемаКомпоновкиДанных") Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Форма <> Неопределено Тогда
		УникальныйИдентификатор = Форма.УникальныйИдентификатор;
	КонецЕсли;
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);

	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

	Возврат КомпоновщикНастроек;
КонецФункции

Функция сКФ_КоллекцияПолейКомпоновщикаНастроек(Знач КомпоновщикНастроек, Знач ИмяКоллекцииСКД = Неопределено)
	Если Не ЗначениеЗаполнено(ИмяКоллекцииСКД) Тогда
		ИмяКоллекцииСКД = "ДоступныеПоляОтбора";
	КонецЕсли;

	ОписаниеИмениКоллекцииПолей	= СтрРазделить(ИмяКоллекцииСКД, ".");
	КоллекцияПолей				= КомпоновщикНастроек.Настройки;

	Для Каждого Элемент Из ОписаниеИмениКоллекцииПолей Цикл
		КоллекцияПолей = КоллекцияПолей[Элемент];
	КонецЦикла;

	Возврат КоллекцияПолей;
КонецФункции

Функция сКФ_ЗначениеВJSON(Значение)
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Значение);

	Возврат ЗаписьJSON.Закрыть();
КонецФункции

Функция сКФ_JSONВЗначение(Строка, ИменаСвойствСоЗначениямиДата = Неопределено)
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);

	Возврат ПрочитатьJSON(ЧтениеJSON, Истина, ИменаСвойствСоЗначениямиДата);
КонецФункции

Функция сКФ_КартинкаТипа(ОписаниеТипов)
	Картинка = БиблиотекаКартинок.ТипНеопределено;
	Если ОписаниеТипов.Типы().Количество() = 1 Тогда
		Тип = ОписаниеТипов.Типы()[0];
		Если Тип = Тип("Число") Тогда
			Картинка = БиблиотекаКартинок.ТипЧисло;
		ИначеЕсли Тип = Тип("Дата") Тогда
			Картинка = БиблиотекаКартинок.ТипДата;
		ИначеЕсли Тип = Тип("Булево") Тогда
			Картинка = БиблиотекаКартинок.ТипБулево;
		ИначеЕсли Тип = Тип("Строка") Тогда
			Картинка = БиблиотекаКартинок.ТипСтрока;
		ИначеЕсли БазоваяПодсистемаСервер.ОН_ЭтоСсылка(Тип) Тогда
			Картинка = БиблиотекаКартинок.ТипСсылка;
		ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда
			Картинка = БиблиотекаКартинок.ТипИдентификатор;
		КонецЕсли;
	ИначеЕсли ОписаниеТипов.Типы().Количество() > 1 Тогда
		Картинка = БиблиотекаКартинок.ТипСоставнойОсновной;
	КонецЕсли;

	Возврат Картинка;
КонецФункции

Функция сКФ_СписокОператоров(ГруппыОператоров = Неопределено) Экспорт
	СписокОператоров =  сКФ_ДеревоПолей();

	Если ГруппыОператоров = Неопределено Тогда
		ГруппыОператоров = "Разделители, Операторы, ЛогическиеОператорыИКонстанты, ЧисловыеФункции, СтроковыеФункции, ПрочиеФункции";
	ИначеЕсли ГруппыОператоров = "ВсеОператорыСКД" Тогда
		ГруппыОператоров = "Операторы, ОперацииНадСтрокамиСКД, ОперацииСравненияСКД, ЛогическиеОперацииСКД, АгрегатныеФункцииСКД";
	КонецЕсли;

	Для Каждого Элемент Из Новый Структура(ГруппыОператоров) Цикл
		ИмяГруппы = Элемент.Ключ;
		Если ИмяГруппы = "Разделители" Тогда
			сКФ_ДобавитьГруппуОператоровРазделители(СписокОператоров);
		ИначеЕсли ИмяГруппы = "Операторы" Тогда
			сКФ_ДобавитьГруппуОператоровОператоры(СписокОператоров);
		ИначеЕсли ИмяГруппы = "ЛогическиеОператорыИКонстанты" Тогда
			сКФ_ДобавитьГруппуОператоровЛогическиеОператорыИКонстанты(СписокОператоров);
		ИначеЕсли ИмяГруппы = "ЧисловыеФункции" Тогда
			сКФ_ДобавитьГруппуОператоровЧисловыеФункции(СписокОператоров);
		ИначеЕсли ИмяГруппы = "СтроковыеФункции" Тогда
			сКФ_ДобавитьГруппуОператоровСтроковыеФункции(СписокОператоров);
		ИначеЕсли ИмяГруппы = "ПрочиеФункции" Тогда
			сКФ_ДобавитьГруппуОператоровПрочиеФункции(СписокОператоров);
		ИначеЕсли ИмяГруппы = "ОперацииНадСтрокамиСКД" Тогда
			сКФ_ДобавитьГруппуОператоровОперацииНадСтроками(СписокОператоров);
		ИначеЕсли ИмяГруппы = "ОперацииСравненияСКД" Тогда
			сКФ_ДобавитьГруппуОператоровОперацииСравнения(СписокОператоров);
		ИначеЕсли ИмяГруппы = "ЛогическиеОперацииСКД" Тогда
			сКФ_ДобавитьГруппуОператоровЛогическиеОперации(СписокОператоров);
		ИначеЕсли ИмяГруппы = "АгрегатныеФункцииСКД" Тогда
			сКФ_ДобавитьГруппуОператоровАгрегатныеФункции(СписокОператоров);
		КонецЕсли;
	КонецЦикла;

	Возврат СписокОператоров;
КонецФункции

Процедура сКФ_ДобавитьГруппуОператоровРазделители(СписокОператоров)
	Группа					= СписокОператоров.Строки.Добавить();
	Группа.Идентификатор	= "Разделители";
	Группа.Представление	= "Разделители";
	Группа.Порядок			= 1;

	Для Каждого Идентификатор Из СтрРазделить("/ | \ _ , . ( ) """, " ", Ложь) Цикл
		сКФ_ДобавитьОператорВГруппу(Группа, Идентификатор, , Новый ОписаниеТипов("Строка"));
	КонецЦикла;

	сКФ_ДобавитьОператорВГруппу(Группа, " ", "Пробел", Новый ОписаниеТипов("Строка"));
КонецПроцедуры

Процедура сКФ_ДобавитьГруппуОператоровОператоры(СписокОператоров)
	Группа					= СписокОператоров.Строки.Добавить();
	Группа.Идентификатор	= "Операторы";
	Группа.Представление	= "Операторы";
	Группа.Порядок			= 2;

	Для Каждого Идентификатор Из СтрРазделить("+ - * / %", " ", Ложь) Цикл
		сКФ_ДобавитьОператорВГруппу(Группа, Идентификатор, , Новый ОписаниеТипов("Число"));
	КонецЦикла;
КонецПроцедуры

Процедура сКФ_ДобавитьГруппуОператоровЛогическиеОператорыИКонстанты(СписокОператоров)
	Группа					= СписокОператоров.Строки.Добавить();
	Группа.Идентификатор	= "ЛогическиеОператорыИКонстанты";
	Группа.Представление	= "Логические операторы и константы";
	Группа.Порядок			= 3;

	Тип = Новый ОписаниеТипов("Булево");

	Для Каждого Идентификатор Из СтрРазделить("<,>,<=,>=,=,<>", ",", Ложь) Цикл
		сКФ_ДобавитьОператорВГруппу(Группа, Идентификатор, , Тип);
	КонецЦикла;

	сКФ_ДобавитьОператорВГруппу(Группа, "И", "И", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "Или", "Или", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "Не", "Не", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "Истина", "Истина", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "Ложь", "Ложь", Тип);
КонецПроцедуры

Процедура сКФ_ДобавитьГруппуОператоровЧисловыеФункции(СписокОператоров)
	Группа					= СписокОператоров.Строки.Добавить();
	Группа.Идентификатор	= "ЧисловыеФункции";
	Группа.Представление	= "Числовые функции";
	Группа.Порядок			= 4;
	Группа.Картинка 		= БиблиотекаКартинок.ТипФункция;

	Тип = Новый ОписаниеТипов("Число");

	сКФ_ДобавитьОператорВГруппу(Группа, "Макс", "Максимум", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "Мин", "Минимум", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "Окр", "Округлить", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "Цел", "ЦелаяЧасть", Тип);
КонецПроцедуры

Процедура сКФ_ДобавитьГруппуОператоровСтроковыеФункции(СписокОператоров)
	Группа					= СписокОператоров.Строки.Добавить();
	Группа.Идентификатор	= "СтроковыеФункции";
	Группа.Представление	= "Строковые функции";
	Группа.Порядок			= 5;
	Группа.Картинка 		= БиблиотекаКартинок.ТипФункция;

	Тип = Новый ОписаниеТипов("Строка");

	сКФ_ДобавитьОператорВГруппу(Группа, "Строка", "ПреобразоватьВСтроку", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "ВРег", "ВсеПрописные", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "НРег", "ВсеСтрочные", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "ТРег", "КаждоеСловоСПрописной", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "Лев", "СимволыСлева", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "Прав", "СимволыСправа", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "СокрЛ", "УбратьПробелыСлева", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "СокрЛП", "УбратьПробелыСлеваИСправа", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "СокрП", "УбратьПробелыСправа", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "СтрЗаменить", "ЗаменитьСимволыВСтроке", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "СтрДлина", "ДлинаСтроки", Новый ОписаниеТипов("Число"));
КонецПроцедуры

Процедура сКФ_ДобавитьГруппуОператоровПрочиеФункции(СписокОператоров)
	Группа					= СписокОператоров.Строки.Добавить();
	Группа.Идентификатор	= "ПрочиеФункции";
	Группа.Представление	= "Прочие функции";
	Группа.Порядок			= 6;
	Группа.Картинка 		= БиблиотекаКартинок.ТипФункция;

	сКФ_ДобавитьОператорВГруппу(Группа, "?", "Условие", Новый ОписаниеТипов("Булево"));
	сКФ_ДобавитьОператорВГруппу(Группа, "ПредопределенноеЗначение", "ПредопределенноеЗначение", Новый ОписаниеТипов);
	сКФ_ДобавитьОператорВГруппу(Группа, "ЗначениеЗаполнено", "ЗначениеЗаполнено", Новый ОписаниеТипов("Булево"));
	сКФ_ДобавитьОператорВГруппу(Группа, "Формат", "Формат", Новый ОписаниеТипов("Строка"));
КонецПроцедуры

Процедура сКФ_ДобавитьОператорВГруппу(Группа, Идентификатор, Знач Представление = Неопределено, Тип = Неопределено)
	Если Представление = Неопределено Тогда
		Представление = Идентификатор;
	КонецЕсли;

	Оператор				= Группа.Строки.Добавить();
	Оператор.Идентификатор	= Идентификатор;
	Оператор.Представление	= Представление;
	Оператор.ТипЗначения	= Тип;
	Оператор.Картинка		= БиблиотекаКартинок.Пустая;
КонецПроцедуры

Процедура сКФ_ДобавитьГруппуОператоровОперацииНадСтроками(СписокОператоров)
	Группа					= СписокОператоров.Строки.Добавить();
	Группа.Идентификатор	= "ОперацииНадСтроками";
	Группа.Представление	= "Операции над строками";
	Группа.Порядок			= 2;

	Тип = Новый ОписаниеТипов("Строка");

	сКФ_ДобавитьОператорВГруппу(Группа, "+", , Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "ПОДОБНО", "ПОДОБНО", Тип);
КонецПроцедуры

Процедура сКФ_ДобавитьГруппуОператоровОперацииСравнения(СписокОператоров)
	Группа					= СписокОператоров.Строки.Добавить();
	Группа.Идентификатор	= "ОперацииСравнения";
	Группа.Представление	= "Операции сравнения";
	Группа.Порядок			= 3;

	Тип = Новый ОписаниеТипов("Булево");

	Для Каждого Идентификатор Из СтрРазделить("<,>,<=,>=,=,<>", ",", Ложь) Цикл
		сКФ_ДобавитьОператорВГруппу(Группа, Идентификатор, , Тип);
	КонецЦикла;

	сКФ_ДобавитьОператорВГруппу(Группа, "В", "В", Тип);
КонецПроцедуры

Процедура сКФ_ДобавитьГруппуОператоровЛогическиеОперации(СписокОператоров)
	Группа					= СписокОператоров.Строки.Добавить();
	Группа.Идентификатор	= "ЛогическиеОперации";
	Группа.Представление	= "Логические операции";
	Группа.Порядок			= 4;

	Тип = Новый ОписаниеТипов("Булево");

	сКФ_ДобавитьОператорВГруппу(Группа, "НЕ", "НЕ", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "И", "И", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "ИЛИ", "ИЛИ", Тип);
КонецПроцедуры

Процедура сКФ_ДобавитьГруппуОператоровАгрегатныеФункции(СписокОператоров)
	Группа					= СписокОператоров.Строки.Добавить();
	Группа.Идентификатор	= "АгрегатныеФункции";
	Группа.Представление	= "Агрегатные функции";
	Группа.Порядок			= 5;
	Группа.Картинка			= БиблиотекаКартинок.ТипФункция;

	Тип = Новый ОписаниеТипов("Число");

	сКФ_ДобавитьОператорВГруппу(Группа, "СУММА", "СУММА", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "КОЛИЧЕСТВО", "КОЛИЧЕСТВО", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "МАКСИМУМ", "МАКСИМУМ", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "МИНИМУМ", "МИНИМУМ", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "СРЕДНЕЕ", "СРЕДНЕЕ", Тип);
КонецПроцедуры

#КонецОбласти
