///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбщегоНазначения

Процедура ОН_Проверить(Знач Условие, Знач Сообщение = "", Знач КонтекстПроверки = "") Экспорт
	Если Условие <> Истина Тогда
		Если ПустаяСтрока(Сообщение) Тогда
			ТекстИсключения = "Недопустимая операция"; // Assertion failed
		Иначе
			ТекстИсключения = Сообщение;
		КонецЕсли;

		Если Не ПустаяСтрока(КонтекстПроверки) Тогда
			ТекстИсключения = СтрШаблон(
				"%1 в %2",
				ТекстИсключения,
				КонтекстПроверки);
		КонецЕсли;

		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
КонецПроцедуры

Процедура ОН_ПроверитьПараметр(Знач ИмяПроцедурыИлиФункции, Знач ИмяПараметра, Знач ЗначениеПараметра,
	Знач ОжидаемыеТипы, Знач ОжидаемыеТипыСвойств = Неопределено) Экспорт

	Контекст = "БазоваяПодсистемаКлиентСервер.ПроверитьПараметр";

	ОН_Проверить(
		ТипЗнч(ИмяПроцедурыИлиФункции) = Тип("Строка"),
		"Недопустимое значение параметра ИмяПроцедурыИлиФункции",
		Контекст);

	ОН_Проверить(
		ТипЗнч(ИмяПараметра) = Тип("Строка"),
		"Недопустимое значение параметра ИмяПараметра",
		Контекст);

	ЭтоКорректныйТип = ОН_ЗначениеОжидаемогоТипа(ЗначениеПараметра, ОжидаемыеТипы);

	ОН_Проверить(
		ЭтоКорректныйТип <> Неопределено,
		"Недопустимое значение параметра ОжидаемыеТипы",
		Контекст);

	ОН_Проверить(
		ЭтоКорректныйТип,
		СтрШаблон(
			"Недопустимое значение параметра %1 в %2.
				|Ожидалось: %3; передано значение: %4 (тип %5).",
			ИмяПараметра,
			ИмяПроцедурыИлиФункции,
			ОН_ПредставлениеТипов(ОжидаемыеТипы),
			?(ЗначениеПараметра <> Неопределено,
				ЗначениеПараметра,
				"Неопределено"),
		ТипЗнч(ЗначениеПараметра)));

	Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") И ОжидаемыеТипыСвойств <> Неопределено Тогда
		ОН_Проверить(
			ТипЗнч(ОжидаемыеТипыСвойств) = Тип("Структура"),
			"Недопустимое значение параметра ИмяПроцедурыИлиФункции",
			Контекст);

		Для каждого Свойство Из ОжидаемыеТипыСвойств Цикл
			ОжидаемоеИмяСвойства = Свойство.Ключ;
			ОжидаемыйТипСвойства = Свойство.Значение;
			ЗначениеСвойства = Неопределено;

			ОН_Проверить(
				ЗначениеПараметра.Свойство(ОжидаемоеИмяСвойства, ЗначениеСвойства),
				СтрШаблон(
					"Недопустимое значение параметра %1 (Структура) в %2.
						|В структуре ожидалось свойство %3 (тип %4).",
					ИмяПараметра,
					ИмяПроцедурыИлиФункции,
					ОжидаемоеИмяСвойства,
					ОжидаемыйТипСвойства));

			ЭтоКорректныйТип = ОН_ЗначениеОжидаемогоТипа(ЗначениеСвойства, ОжидаемыйТипСвойства);

			ОН_Проверить(
				ЭтоКорректныйТип,
				СтрШаблон(
					"Недопустимое значение свойства %1 в параметре %2 (Структура) в %3.
						|Ожидалось: %4; передано значение: %5 (тип %6).",
					ОжидаемоеИмяСвойства,
					ИмяПараметра,
					ИмяПроцедурыИлиФункции,
					ОН_ПредставлениеТипов(ОжидаемыеТипы),
					?(ЗначениеСвойства <> Неопределено,
						ЗначениеСвойства,
						"Неопределено"),
				ТипЗнч(ЗначениеСвойства)));
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ОН_ЗначениеОжидаемогоТипа(Значение, ОжидаемыеТипы)
	ТипЗначения = ТипЗнч(Значение);

	Если ТипЗнч(ОжидаемыеТипы) = Тип("ОписаниеТипов") Тогда
		Возврат ОжидаемыеТипы.СодержитТип(ТипЗначения);
	ИначеЕсли ТипЗнч(ОжидаемыеТипы) = Тип("Тип") Тогда
		Возврат ТипЗначения = ОжидаемыеТипы;
	ИначеЕсли ТипЗнч(ОжидаемыеТипы) = Тип("Массив")
		Или ТипЗнч(ОжидаемыеТипы) = Тип("ФиксированныйМассив") Тогда

		Возврат ОжидаемыеТипы.Найти(ТипЗначения) <> Неопределено;
	ИначеЕсли ТипЗнч(ОжидаемыеТипы) = Тип("Соответствие")
		Или ТипЗнч(ОжидаемыеТипы) = Тип("ФиксированноеСоответствие") Тогда

		Возврат ОжидаемыеТипы.Получить(ТипЗначения) <> Неопределено;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

Функция ОН_ПредставлениеТипов(ОжидаемыеТипы)
	Если ТипЗнч(ОжидаемыеТипы) = Тип("Массив")
		Или ТипЗнч(ОжидаемыеТипы) = Тип("ФиксированныйМассив")
		Или ТипЗнч(ОжидаемыеТипы) = Тип("Соответствие")
		Или ТипЗнч(ОжидаемыеТипы) = Тип("ФиксированноеСоответствие") Тогда

		Результат	= "";
		Индекс		= 0;
		Для Каждого Элемент Из ОжидаемыеТипы Цикл
			Если ТипЗнч(ОжидаемыеТипы) = Тип("Соответствие")
				Или ТипЗнч(ОжидаемыеТипы) = Тип("ФиксированноеСоответствие") Тогда

				Тип = Элемент.Ключ;
			Иначе
				Тип = Элемент;
			КонецЕсли;

			Если Не ПустаяСтрока(Результат) Тогда
				Результат = Результат + ", ";
			КонецЕсли;

			Результат	= Результат + ОН_ПредставлениеТипа(Тип);
			Индекс	= Индекс + 1;
			Если Индекс > 10 Тогда
				Результат = СтрШаблон(
					"%1,... (всего %2 типов)",
					Результат,
					ОжидаемыеТипы.Количество());
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Возврат Результат;
	Иначе
		Возврат ОН_ПредставлениеТипа(ОжидаемыеТипы);
	КонецЕсли;
КонецФункции

Функция ОН_ПредставлениеТипа(Тип)
	Если Тип = Неопределено Тогда
		Возврат "Неопределено";
	ИначеЕсли ТипЗнч(Тип) = Тип("ОписаниеТипов") Тогда
		ТипСтрокой = Строка(Тип);
		Возврат
			?(СтрДлина(ТипСтрокой) > 150,
				СтрШаблон(
					"%1,... (всего %2 типов)",
					Лев(ТипСтрокой, 150),
					Тип.Типы().Количество()),
				ТипСтрокой);
	Иначе
		ТипСтрокой = Строка(Тип);

		Возврат
			?(СтрДлина(ТипСтрокой) > 150,
				Лев(ТипСтрокой, 150) + "...",
				ТипСтрокой);
	КонецЕсли;
КонецФункции

Процедура ОН_ДополнитьСтруктуру(Приемник, Источник, Заменять = Неопределено) Экспорт
	Для Каждого Элемент Из Источник Цикл
		Если Заменять <> Истина И Приемник.Свойство(Элемент.Ключ) Тогда
			Если Заменять = Ложь Тогда
				Продолжить;
			Иначе
				ВызватьИсключение СтрШаблон("Пересечение ключей источника и приемника: ""%1"".", Элемент.Ключ);
			КонецЕсли
		КонецЕсли;
		Приемник.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
КонецПроцедуры

Процедура ОН_ДополнитьСоответствие(Приемник, Источник, Заменять = Неопределено) Экспорт
	Для Каждого Элемент Из Источник Цикл
		Если Заменять <> Истина И Приемник[Элемент.Ключ] <> Неопределено Тогда
			Если Заменять = Ложь Тогда
				Продолжить;
			Иначе
				ВызватьИсключение СтрШаблон("Пересечение ключей источника и приемника: ""%1"".", Элемент.Ключ);
			КонецЕсли
		КонецЕсли;

		Приемник.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
КонецПроцедуры

Функция ОН_СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию = Неопределено) Экспорт
	Если Структура = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;

	Результат = ЗначениеПоУмолчанию;
	Если Структура.Свойство(Ключ, Результат) Тогда
		Возврат Результат;
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
КонецФункции

Функция ОН_ИмяCOMСоединителя() Экспорт
	СистемнаяИнфо	= Новый СистемнаяИнформация;
	ПодстрокиВерсии	= СтрРазделить(СистемнаяИнфо.ВерсияПриложения, ".");

	Возврат "v" + ПодстрокиВерсии[0] + ПодстрокиВерсии[1] + ".COMConnector";
КонецФункции

Функция ОН_СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);
	Версия1 = СтрРазделить(Строка1, ".");
	Если Версия1.Количество() <> 4 Тогда
		ВызватьИсключение СтрШаблон(
			"Неправильный формат параметра СтрокаВерсии1: %1", СтрокаВерсии1);
	КонецЕсли;
	Версия2 = СтрРазделить(Строка2, ".");
	Если Версия2.Количество() <> 4 Тогда
		ВызватьИсключение СтрШаблон(
			"Неправильный формат параметра СтрокаВерсии2: %1", СтрокаВерсии2);
	КонецЕсли;

	Результат = 0;
	Для Разряд = 0 По 3 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция ОН_СравнитьВерсииБезНомераСборки(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0", СтрокаВерсии2);
	Версия1 = СтрРазделить(Строка1, ".");
	Если Версия1.Количество() <> 3 Тогда
		ВызватьИсключение СтрШаблон(
			"Неправильный формат параметра СтрокаВерсии1: %1", СтрокаВерсии1);
	КонецЕсли;
	Версия2 = СтрРазделить(Строка2, ".");
	Если Версия2.Количество() <> 3 Тогда
		ВызватьИсключение СтрШаблон(
			"Неправильный формат параметра СтрокаВерсии2: %1", СтрокаВерсии2);
	КонецЕсли;

	Результат = 0;
	Для Разряд = 0 По 2 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция ОН_ВерсияКонфигурацииБезНомераСборки(Знач Версия) Экспорт
	Массив = СтрРазделить(Версия, ".");

	Если Массив.Количество() < 3 Тогда
		Возврат Версия;
	КонецЕсли;

	Результат = "[Редакция].[Подредакция].[Релиз]";
	Результат = СтрЗаменить(Результат, "[Редакция]",    Массив[0]);
	Результат = СтрЗаменить(Результат, "[Подредакция]", Массив[1]);
	Результат = СтрЗаменить(Результат, "[Релиз]",       Массив[2]);

	Возврат Результат;
КонецФункции

Функция ОН_ЗначениеВМассиве(Значение) Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Значение);

	Возврат Массив;
КонецФункции

Процедура ОН_УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля, ПравоеЗначение = Неопределено, ВидСравнения = Неопределено, Представление = Неопределено, Использование = Неопределено, РежимОтображения = Неопределено, ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	Если РежимОтображения = Неопределено Тогда
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;

	Если РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		ОтборДинамическогоСписка = ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	Иначе
		ОтборДинамическогоСписка = ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор;
	КонецЕсли;

	ОН_УстановитьЭлементОтбора(ОтборДинамическогоСписка, ИмяПоля, ПравоеЗначение, ВидСравнения, Представление, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);
КонецПроцедуры

Функция ОН_РазложитьПолноеИмяФайла(Знач ПолноеИмяФайла, ЭтоКаталог = Ложь) Экспорт
	СтруктураИмениФайла = Новый Структура("ПолноеИмя,Путь,Имя,Расширение,ИмяБезРасширения");
	ЗаполнитьЗначенияСвойств(СтруктураИмениФайла, Новый Файл(ПолноеИмяФайла));

	Возврат СтруктураИмениФайла;
КонецФункции

Функция ОН_ПолучитьРасширениеИмениФайла(Знач ИмяФайла) Экспорт
	РасширениеФайла	= "";
	МассивСтрок		= СтрРазделить(ИмяФайла, ".", Ложь);
	Если МассивСтрок.Количество() > 1 Тогда
		РасширениеФайла = МассивСтрок[МассивСтрок.Количество() - 1];
	КонецЕсли;

	Возврат РасширениеФайла;
КонецФункции

Функция ОН_РасширениеБезТочки(Знач Расширение) Экспорт
	Расширение = НРег(СокрЛП(Расширение));

	Если Сред(Расширение, 1, 1) = "." Тогда
		Расширение = Сред(Расширение, 2);
	КонецЕсли;

	Возврат Расширение;
КонецФункции

Процедура ОН_УстановитьЭлементОтбора(ОбластьПоискаДобавления, Знач ИмяПоля, Знач ПравоеЗначение = Неопределено, Знач ВидСравнения = Неопределено, Знач Представление = Неопределено, Знач Использование = Неопределено, Знач РежимОтображения = Неопределено, Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	ЧислоИзмененных = ОН_ИзменитьЭлементыОтбора(ОбластьПоискаДобавления, ИмяПоля, Представление, ПравоеЗначение, ВидСравнения, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);

	Если ЧислоИзмененных = 0 Тогда
		Если ВидСравнения = Неопределено Тогда
			Если ТипЗнч(ПравоеЗначение) = Тип("Массив")
				Или ТипЗнч(ПравоеЗначение) = Тип("ФиксированныйМассив")
				Или ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений") Тогда
				ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
		КонецЕсли;
		Если РежимОтображения = Неопределено Тогда
			РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		ОН_ДобавитьЭлементКомпоновки(ОбластьПоискаДобавления, ИмяПоля, ВидСравнения, ПравоеЗначение, Представление, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);
	КонецЕсли;
КонецПроцедуры

Функция ОН_ИзменитьЭлементыОтбора(ОбластьПоиска, Знач ИмяПоля = Неопределено, Знач Представление = Неопределено, Знач ПравоеЗначение = Неопределено, Знач ВидСравнения = Неопределено, Знач Использование = Неопределено, Знач РежимОтображения = Неопределено, Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;

	МассивЭлементов = Новый Массив;

	ОН_НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);

	Для Каждого Элемент Из МассивЭлементов Цикл
		Если ИмяПоля <> Неопределено Тогда
			Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		КонецЕсли;
		Если Представление <> Неопределено Тогда
			Элемент.Представление = Представление;
		КонецЕсли;
		Если Использование <> Неопределено Тогда
			Элемент.Использование = Использование;
		КонецЕсли;
		Если ВидСравнения <> Неопределено Тогда
			Элемент.ВидСравнения = ВидСравнения;
		КонецЕсли;
		Если ПравоеЗначение <> Неопределено Тогда
			Элемент.ПравоеЗначение = ПравоеЗначение;
		КонецЕсли;
		Если РежимОтображения <> Неопределено Тогда
			Элемент.РежимОтображения = РежимОтображения;
		КонецЕсли;
		Если ИдентификаторПользовательскойНастройки <> Неопределено Тогда
			Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
		КонецЕсли;
	КонецЦикла;

	Возврат МассивЭлементов.Количество();
КонецФункции

Функция ОН_ДобавитьЭлементКомпоновки(ОбластьДобавления, Знач ИмяПоля, Знач ВидСравнения, Знач ПравоеЗначение = Неопределено, Знач Представление  = Неопределено, Знач Использование  = Неопределено,Знач РежимОтображения = Неопределено, Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	Элемент					= ОбластьДобавления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Элемент.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных(ИмяПоля);
	Элемент.ВидСравнения	= ВидСравнения;

	Если РежимОтображения = Неопределено Тогда
		Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Иначе
		Элемент.РежимОтображения = РежимОтображения;
	КонецЕсли;

	Если ПравоеЗначение <> Неопределено Тогда
		Элемент.ПравоеЗначение = ПравоеЗначение;
	КонецЕсли;

	Если Представление <> Неопределено Тогда
		Элемент.Представление = Представление;
	КонецЕсли;

	Если Использование <> Неопределено Тогда
		Элемент.Использование = Использование;
	КонецЕсли;

	// Важно: установка идентификатора должна выполняться
	// в конце настройки элемента, иначе он будет скопирован
	// в пользовательские настройки частично заполненным.
	Если ИдентификаторПользовательскойНастройки <> Неопределено Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
	ИначеЕсли Элемент.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИмяПоля;
	КонецЕсли;

	Возврат Элемент;
КонецФункции

Процедура ОН_НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, СпособПоиска, ЗначениеПоиска)
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если СпособПоиска = 1 Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			ИначеЕсли СпособПоиска = 2 Тогда
				Если ЭлементОтбора.Представление = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОН_НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);

			Если СпособПоиска = 2 И ЭлементОтбора.Представление = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОН_УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение) Экспорт
	ЭлементФормы = ЭлементыФормы.Найти(ИмяЭлемента);
	Если ЭлементФормы <> Неопределено И ЭлементФормы[ИмяСвойства] <> Значение Тогда
		ЭлементФормы[ИмяСвойства] = Значение;
	КонецЕсли;
КонецПроцедуры

Процедура ОН_ДобавитьОшибкуПользователю(Ошибки, ПолеОшибки, ТекстДляОднойОшибки, ГруппаОшибок = Неопределено, НомерСтроки = 0, ТекстДляНесколькихОшибок = "", ИндексСтроки = Неопределено) Экспорт
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Структура;
		Ошибки.Вставить("СписокОшибок", Новый Массив);
		Ошибки.Вставить("ГруппыОшибок", Новый Соответствие);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ГруппаОшибок) Тогда
		// При незаполненной группе ошибок используется текст для одной ошибки.
	Иначе
		Если Ошибки.ГруппыОшибок[ГруппаОшибок] = Неопределено Тогда
			// Группа ошибок использовалась один раз, используется текст для одной ошибки.
			Ошибки.ГруппыОшибок.Вставить(ГруппаОшибок, Ложь);
		Иначе
			// Группа ошибок использовалась несколько раз, используется текст для нескольких ошибок.
			Ошибки.ГруппыОшибок.Вставить(ГруппаОшибок, Истина);
		КонецЕсли;
	КонецЕсли;

	Ошибка = Новый Структура;
	Ошибка.Вставить("ПолеОшибки",				ПолеОшибки);
	Ошибка.Вставить("ТекстДляОднойОшибки",		ТекстДляОднойОшибки);
	Ошибка.Вставить("ГруппаОшибок",				ГруппаОшибок);
	Ошибка.Вставить("НомерСтроки",				НомерСтроки);
	Ошибка.Вставить("ТекстДляНесколькихОшибок",	ТекстДляНесколькихОшибок);
	Ошибка.Вставить("ИндексСтроки",				ИндексСтроки);

	Ошибки.СписокОшибок.Добавить(Ошибка);
КонецПроцедуры

Процедура ОН_СообщитьОшибкиПользователю(Ошибки, Отказ = Ложь) Экспорт
	Если Ошибки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Отказ = Истина;

	Для каждого Ошибка Из Ошибки.СписокОшибок Цикл
		Если Ошибка.ИндексСтроки = Неопределено Тогда
			ИндексСтроки = Ошибка.НомерСтроки;
		Иначе
			ИндексСтроки = Ошибка.ИндексСтроки;
		КонецЕсли;

		Если Ошибки.ГруппыОшибок[Ошибка.ГруппаОшибок] <> Истина Тогда
			сОН_СообщитьПользователю(Ошибка.ТекстДляОднойОшибки, Неопределено, СтрЗаменить(Ошибка.ПолеОшибки, "%1", Формат(ИндексСтроки, "ЧН=0; ЧГ=")));
		Иначе
			сОН_СообщитьПользователю(СтрЗаменить(Ошибка.ТекстДляНесколькихОшибок, "%1", Формат(Ошибка.НомерСтроки + 1, "ЧН=0; ЧГ=")), Неопределено, СтрЗаменить(Ошибка.ПолеОшибки, "%1", Формат(ИндексСтроки, "ЧН=0; ЧГ=")));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ОН_СпискиЗначенийИдентичны(Список1, Список2) Экспорт
	СпискиИдентичны = Истина;

	Для Каждого ЭлементСписка1 Из Список1 Цикл
		Если ОН_НайтиВСписке(Список2, ЭлементСписка1) = Неопределено Тогда
			СпискиИдентичны = Ложь;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если СпискиИдентичны Тогда
		Для Каждого ЭлементСписка2 Из Список2 Цикл
			Если ОН_НайтиВСписке(Список1, ЭлементСписка2) = Неопределено Тогда
				СпискиИдентичны = Ложь;

				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СпискиИдентичны;
КонецФункции

Функция ОН_НайтиВСписке(Список, Элемент)
	Перем ЭлементВСписке;

	Если ТипЗнч(Список) = Тип("СписокЗначений") Тогда
		Если ТипЗнч(Элемент) = Тип("ЭлементСпискаЗначений") Тогда
			ЭлементВСписке = Список.НайтиПоЗначению(Элемент.Значение);
		Иначе
			ЭлементВСписке = Список.НайтиПоЗначению(Элемент);
		КонецЕсли;
	КонецЕсли;

	Если ТипЗнч(Список) = Тип("Массив") Тогда
		ЭлементВСписке = Список.Найти(Элемент);
	КонецЕсли;

	Возврат ЭлементВСписке;
КонецФункции

Процедура ОН_УстановитьСостояниеПоляТабличногоДокумента(ПолеТабличногоДокумента, Состояние = "НеИспользовать") Экспорт
	Если ТипЗнч(ПолеТабличногоДокумента) = Тип("ПолеФормы") И ПолеТабличногоДокумента.Вид = ВидПоляФормы.ПолеТабличногоДокумента Тогда
		ОтображениеСостояния = ПолеТабличногоДокумента.ОтображениеСостояния;
		Если ВРег(Состояние) = "НЕИСПОЛЬЗОВАТЬ" Тогда
			ОтображениеСостояния.Видимость                      = Ложь;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
			ОтображениеСостояния.Картинка                       = Новый Картинка;
			ОтображениеСостояния.Текст                          = "";
		ИначеЕсли ВРег(Состояние) = "НЕАКТУАЛЬНОСТЬ" Тогда
			ОтображениеСостояния.Видимость                      = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			ОтображениеСостояния.Картинка                       = Новый Картинка;
			ОтображениеСостояния.Текст                          = "Отчет не сформирован. Нажмите ""Сформировать"" для получения отчета.";
		ИначеЕсли ВРег(Состояние) = "ФОРМИРОВАНИЕОТЧЕТА" Тогда
			ОтображениеСостояния.Видимость                      = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация48;
			ОтображениеСостояния.Текст                          = "Отчет формируется...";
		Иначе
			ВызватьИсключение("Недопустимое значение параметра (параметр номер ''2'')");
		КонецЕсли;
	Иначе
		ВызватьИсключение("Недопустимое значение параметра (параметр номер ''1'')");
	КонецЕсли;
КонецПроцедуры

Функция ОН_КаталогФайловойИнформационнойБазы() Экспорт
	ПараметрыСоединения = СФ_ПараметрыИзСтроки(СтрокаСоединенияИнформационнойБазы());

	Если ПараметрыСоединения.Свойство("File") Тогда
		Возврат ПараметрыСоединения.File;
	КонецЕсли;

	Возврат "";
КонецФункции

Функция ОН_ЗначениеСвойстваЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства) Экспорт
	ЭлементФормы = ЭлементыФормы.Найти(ИмяЭлемента);

	Возврат ?(ЭлементФормы <> Неопределено, ЭлементФормы[ИмяСвойства], Неопределено);
КонецФункции

Функция ОН_НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление) Экспорт
	ВозвращаемоеЗначение = Неопределено;

	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ЭлементОтбора.Представление = Представление Тогда
			ВозвращаемоеЗначение = ЭлементОтбора;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат ВозвращаемоеЗначение;
КонецФункции

Функция ОН_НайтиЭлементыИГруппыОтбора(Знач ОбластьПоиска, Знач ИмяПоля = Неопределено, Знач Представление = Неопределено) Экспорт
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска	= Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска	= 1;
	Иначе
		СпособПоиска	= 2;
		ЗначениеПоиска	= Представление;
	КонецЕсли;

	МассивЭлементов = Новый Массив;

	ОН_НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);

	Возврат МассивЭлементов;
КонецФункции

Функция ОН_СоздатьГруппуЭлементовОтбора(Знач КоллекцияЭлементов, Представление, ТипГруппы) Экспорт
	Если ТипЗнч(КоллекцияЭлементов) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Или ТипЗнч(КоллекцияЭлементов) = Тип("ОтборКомпоновкиДанных") Тогда
		КоллекцияЭлементов = КоллекцияЭлементов.Элементы;
	КонецЕсли;

	ГруппаЭлементовОтбора = ОН_НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление);
	Если ГруппаЭлементовОтбора = Неопределено Тогда
		ГруппаЭлементовОтбора = КоллекцияЭлементов.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Иначе
		ГруппаЭлементовОтбора.Элементы.Очистить();
	КонецЕсли;

	ГруппаЭлементовОтбора.Представление    = Представление;
	ГруппаЭлементовОтбора.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	ГруппаЭлементовОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаЭлементовОтбора.ТипГруппы        = ТипГруппы;
	ГруппаЭлементовОтбора.Использование    = Истина;

	Возврат ГруппаЭлементовОтбора;
КонецФункции

Процедура ОН_ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения = Ложь) Экспорт
	Если ТолькоУникальныеЗначения Тогда
		УникальныеЗначения = Новый Соответствие;

		Для Каждого Значение Из МассивПриемник Цикл
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЦикла;

		Для Каждого Значение Из МассивИсточник Цикл
			Если УникальныеЗначения[Значение] = Неопределено Тогда
				МассивПриемник.Добавить(Значение);
				УникальныеЗначения.Вставить(Значение, Истина);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого Значение Из МассивИсточник Цикл
			МассивПриемник.Добавить(Значение);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОН_ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник) Экспорт
	Для Каждого СтрокаТаблицыИсточник Из ТаблицаИсточник Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаТаблицыИсточник);
	КонецЦикла;
КонецПроцедуры

Функция ОН_СвернутьМассив(Знач Массив) Экспорт
	Результат	= Новый Массив;
	ОН_ДополнитьМассив(Результат, Массив, Истина);

	Возврат Результат;
КонецФункции

Функция ОН_ДобавитьКонечныйРазделительПути(Знач ПутьКаталога, Знач Платформа = Неопределено) Экспорт
	Если ПустаяСтрока(ПутьКаталога) Тогда
		Возврат ПутьКаталога;
	КонецЕсли;

	ДобавляемыйСимвол = ПолучитьРазделительПути();

	Если СтрЗаканчиваетсяНа(ПутьКаталога, ДобавляемыйСимвол) Тогда
		Возврат ПутьКаталога;
	Иначе
		Возврат ПутьКаталога + ДобавляемыйСимвол;
	КонецЕсли;
КонецФункции

Функция ОН_НовоеЗащищенноеСоединение(СертификатКлиента = Неопределено, СертификатыУдостоверяющихЦентров = Неопределено) Экспорт
#Если ВебКлиент Тогда
	Возврат Неопределено;
#ИначеЕсли МобильныйКлиент Тогда
	Возврат Новый ЗащищенноеСоединениеOpenSSL;
#Иначе
	Возврат Новый ЗащищенноеСоединениеOpenSSL(СертификатКлиента, СертификатыУдостоверяющихЦентров);
#КонецЕсли
КонецФункции

Функция ОН_ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Экспорт
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);

	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
КонецФункции

Функция ОН_РасчетныеПоказателиЯчеек(Знач ТабличныйДокумент, Знач ПолеТабличногоДокумента) Экспорт
	ПараметрыРасчета = сОН_ПараметрыРасчетаПоказателейЯчеек(ПолеТабличногоДокумента);

	Если ПараметрыРасчета.РассчитатьНаСервере Тогда
		Возврат БазоваяПодсистемаВызовСервера.СП_РасчетныеПоказателиЯчеек(ТабличныйДокумент, ПараметрыРасчета.ВыделенныеОбласти);
	КонецЕсли;

	Возврат сОН_РасчетныеПоказателиЯчеек(ТабличныйДокумент, ПараметрыРасчета.ВыделенныеОбласти);
КонецФункции

Функция ОН_ЭтоЧисло(Знач ПроверяемоеЗначение) Экспорт
	Если ПроверяемоеЗначение = "0" Тогда
		Возврат Истина;
	КонецЕсли;

	ОписаниеЧисла = Новый ОписаниеТипов("Число");

	Возврат ОписаниеЧисла.ПривестиЗначение(ПроверяемоеЗначение) <> 0;
КонецФункции

Функция ОН_СтрокаВДату(Знач Значение) Экспорт
	ПустаяДата = Дата(1, 1, 1);

	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат ПустаяДата;
	КонецЕсли;

	ОписаниеДаты	= Новый ОписаниеТипов("Дата");
	Дата			= ОписаниеДаты.ПривестиЗначение(Значение);

	Если ТипЗнч(Дата) = Тип("Дата") И ЗначениеЗаполнено(Дата) Тогда
		Возврат Дата;
	КонецЕсли;

	#Область ПодготовкаЧастейДаты

	КоличествоСимволов = СтрДлина(Значение);

	Если КоличествоСимволов > 25 Тогда
		Возврат ПустаяДата;
	КонецЕсли;

	ЧастиЗначения = Новый Массив;
	ЧастьЗначения = "";

	Для НомерСимвола = 1 По КоличествоСимволов Цикл
		Символ = Сред(Значение, НомерСимвола, 1);

		Если ОН_ЭтоЧисло(Символ) Тогда
			ЧастьЗначения = ЧастьЗначения + Символ;
		Иначе
			Если Не ПустаяСтрока(ЧастьЗначения) Тогда
				ЧастиЗначения.Добавить(ЧастьЗначения);
			КонецЕсли;

			ЧастьЗначения = "";
		КонецЕсли;

		Если НомерСимвола = КоличествоСимволов И Не ПустаяСтрока(ЧастьЗначения) Тогда
			ЧастиЗначения.Добавить(ЧастьЗначения);
		КонецЕсли;
	КонецЦикла;

	Если ЧастиЗначения.Количество() < 3 Тогда
		Возврат ПустаяДата;
	КонецЕсли;

	Если ЧастиЗначения.Количество() < 4 Тогда
		ЧастиЗначения.Добавить("00");
	КонецЕсли;

	Если ЧастиЗначения.Количество() < 5 Тогда
		ЧастиЗначения.Добавить("00");
	КонецЕсли;

	Если ЧастиЗначения.Количество() < 6 Тогда
		ЧастиЗначения.Добавить("00");
	КонецЕсли;

	#КонецОбласти

	// Если формат ггггММддЧЧммсс:
	НормализованноеЗначение = ЧастиЗначения[2] + ЧастиЗначения[1] + ЧастиЗначения[0] + ЧастиЗначения[3] + ЧастиЗначения[4] + ЧастиЗначения[5];

	Дата = ОписаниеДаты.ПривестиЗначение(НормализованноеЗначение);

	Если ТипЗнч(Дата) = Тип("Дата") И ЗначениеЗаполнено(Дата) Тогда
		Возврат Дата;
	КонецЕсли;

	// Если формат ггггддММЧЧммсс
	НормализованноеЗначение = ЧастиЗначения[2] + ЧастиЗначения[0] + ЧастиЗначения[1] + ЧастиЗначения[3] + ЧастиЗначения[4] + ЧастиЗначения[5];

	Дата = ОписаниеДаты.ПривестиЗначение(НормализованноеЗначение);

	Если ТипЗнч(Дата) = Тип("Дата") И ЗначениеЗаполнено(Дата) Тогда
		Возврат Дата;
	КонецЕсли;

	Возврат ПустаяДата;
КонецФункции

Функция сОН_РасчетныеПоказателиЯчеек(Знач ТабличныйДокумент, ВыделенныеОбласти) Экспорт
	#Область КонструкторРезультата

	РасчетныеПоказатели = Новый Структура;
	РасчетныеПоказатели.Вставить("Количество",			0);
	РасчетныеПоказатели.Вставить("КоличествоНеПустых",	0);
	РасчетныеПоказатели.Вставить("КоличествоЧисловых",	0);
	РасчетныеПоказатели.Вставить("Сумма",				0);
	РасчетныеПоказатели.Вставить("Среднее",				0);
	РасчетныеПоказатели.Вставить("Минимум",				0);
	РасчетныеПоказатели.Вставить("Максимум",			0);

	#КонецОбласти

	ПроверенныеЯчейки = Новый Соответствие;

	Для Каждого ВыделеннаяОбласть Из ВыделенныеОбласти Цикл
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") И ТипЗнч(ВыделеннаяОбласть) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;

		#Область ОпределениеГраницВыделеннойОбласти

		ВыделеннаяОбластьВерх  = ВыделеннаяОбласть.Верх;
		ВыделеннаяОбластьНиз   = ВыделеннаяОбласть.Низ;
		ВыделеннаяОбластьЛево  = ВыделеннаяОбласть.Лево;
		ВыделеннаяОбластьПраво = ВыделеннаяОбласть.Право;

		Если ВыделеннаяОбластьВерх = 0 Тогда
			ВыделеннаяОбластьВерх = 1;
		КонецЕсли;

		Если ВыделеннаяОбластьНиз = 0 Тогда
			ВыделеннаяОбластьНиз = ТабличныйДокумент.ВысотаТаблицы;
		КонецЕсли;

		Если ВыделеннаяОбластьЛево = 0 Тогда
			ВыделеннаяОбластьЛево = 1;
		КонецЕсли;

		Если ВыделеннаяОбластьПраво = 0 Тогда
			ВыделеннаяОбластьПраво = ТабличныйДокумент.ШиринаТаблицы;
		КонецЕсли;

		Если ВыделеннаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда
			ВыделеннаяОбластьВерх	= ВыделеннаяОбласть.Низ;
			ВыделеннаяОбластьНиз	= ТабличныйДокумент.ВысотаТаблицы;
		КонецЕсли;

		ВыделеннаяОбластьВысота = ВыделеннаяОбластьНиз   - ВыделеннаяОбластьВерх + 1;
		ВыделеннаяОбластьШирина = ВыделеннаяОбластьПраво - ВыделеннаяОбластьЛево + 1;

		#КонецОбласти

		РасчетныеПоказатели.Количество = РасчетныеПоказатели.Количество + ВыделеннаяОбластьШирина * ВыделеннаяОбластьВысота;

		Для НомерКолонки = ВыделеннаяОбластьЛево По ВыделеннаяОбластьПраво Цикл
			Для НомерСтроки = ВыделеннаяОбластьВерх По ВыделеннаяОбластьНиз Цикл
				Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);

				Если ПроверенныеЯчейки.Получить(Ячейка.Имя) = Неопределено Тогда
					ПроверенныеЯчейки.Вставить(Ячейка.Имя, Истина);
				Иначе
					Продолжить;
				КонецЕсли;

				Если Ячейка.Видимость = Истина Тогда
					#Область ОпределениеЗначенияЯчейки

					Если Ячейка.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Колонки И Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
						Число = Ячейка.Значение;
					ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
						ТекстЯчейки = СтрЗаменить(Ячейка.Текст, " ", "");

						Если сОН_ТекстЯчейкиВидаЭкспоненциальнойЗаписи(ТекстЯчейки) Тогда
							Число = 0;
						Иначе
							ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");

							Если СтрНачинаетсяС(ТекстЯчейки, "(") И СтрЗаканчиваетсяНа(ТекстЯчейки, ")") Тогда
								ТекстЯчейки = СтрЗаменить(ТекстЯчейки, "(", "");
								ТекстЯчейки = СтрЗаменить(ТекстЯчейки, ")", "");

								Число = ОписаниеТипаЧисло.ПривестиЗначение(ТекстЯчейки);
								Если Число > 0 Тогда
									Число = -Число;
								КонецЕсли;
							Иначе
								Число = ОписаниеТипаЧисло.ПривестиЗначение(ТекстЯчейки);
							КонецЕсли;
						КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;

					#КонецОбласти

					РасчетныеПоказатели.КоличествоНеПустых = РасчетныеПоказатели.КоличествоНеПустых + 1;
					#Область РасчетПоказателей

					Если ТипЗнч(Число) = Тип("Число") Тогда
						РасчетныеПоказатели.КоличествоЧисловых	= РасчетныеПоказатели.КоличествоЧисловых + 1;
						РасчетныеПоказатели.Сумма				= РасчетныеПоказатели.Сумма + Число;

						Если РасчетныеПоказатели.КоличествоЧисловых = 1 Тогда
							РасчетныеПоказатели.Минимум  = Число;
							РасчетныеПоказатели.Максимум = Число;
						Иначе
							РасчетныеПоказатели.Минимум  = Мин(Число,  РасчетныеПоказатели.Минимум);
							РасчетныеПоказатели.Максимум = Макс(Число, РасчетныеПоказатели.Максимум);
						КонецЕсли;
					КонецЕсли;

					#КонецОбласти
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Если РасчетныеПоказатели.КоличествоЧисловых > 0 Тогда
		РасчетныеПоказатели.Среднее = РасчетныеПоказатели.Сумма / РасчетныеПоказатели.КоличествоЧисловых;
	КонецЕсли;

	Возврат РасчетныеПоказатели;
КонецФункции

Функция сОН_ИспользоватьСтандартнуюФункциюПолученияПредопределенного(ПолноеИмяПредопределенного) Экспорт
	// Используется стандартная функция платформы для получения:
	//  - пустых ссылок;
	//  - значений перечислений;
	//  - точек маршрута бизнес-процессов.

	Возврат ".ПУСТАЯССЫЛКА" = ВРег(Прав(ПолноеИмяПредопределенного, 13))
		Или "ПЕРЕЧИСЛЕНИЕ." = ВРег(Лев(ПолноеИмяПредопределенного, 13))
		Или "БИЗНЕСПРОЦЕСС." = ВРег(Лев(ПолноеИмяПредопределенного, 14));
КонецФункции

Функция сОН_ИмяПредопределенногоПоПолям(ПолноеИмяПредопределенного) Экспорт
	ЧастиПолногоИмени = СтрРазделить(ПолноеИмяПредопределенного, ".");
	Если ЧастиПолногоИмени.Количество() <> 3 Тогда
		ВызватьИсключение СтрШаблон("Предопределенное значение ""%1"" не существует.", ПолноеИмяПредопределенного);
	КонецЕсли;

	ПолноеИмяОбъектаМетаданных	= ВРег(ЧастиПолногоИмени[0] + "." + ЧастиПолногоИмени[1]);
	ИмяПредопределенного		= ЧастиПолногоИмени[2];

	Результат = Новый Структура;
	Результат.Вставить("ПолноеИмяОбъектаМетаданных",	ПолноеИмяОбъектаМетаданных);
	Результат.Вставить("ИмяПредопределенного",			ИмяПредопределенного);

	Возврат Результат;
КонецФункции

Функция сОН_ПредопределенныйЭлемент(ПолноеИмяПредопределенного, ПоляПредопределенного, ПредопределенныеЗначения) Экспорт
	// Если ошибка в имени метаданных.
	Если ПредопределенныеЗначения = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Предопределенное значение ""%1"" не существует.", ПолноеИмяПредопределенного);
	КонецЕсли;

	// Получение результата из кэша.
	Результат = ПредопределенныеЗначения.Получить(ПоляПредопределенного.ИмяПредопределенного);

	// Если предопределенного нет в метаданных.
	Если Результат = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Предопределенное значение ""%1"" не существует.", ПолноеИмяПредопределенного);
	КонецЕсли;

	// Если предопределенный есть в метаданных, но не создан в ИБ.
	Если Результат = Null Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Процедура сОН_СообщитьПользователю(Знач ТекстСообщенияПользователю, Знач КлючДанных, Знач Поле, Знач ПутьКДанным = "", Отказ = Ложь, ЭтоОбъект = Ложь) Экспорт
	Сообщение		= Новый СообщениеПользователю;
	Сообщение.Текст	= ТекстСообщенияПользователю;
	Сообщение.Поле	= Поле;

	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;

	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;

	Сообщение.Сообщить();

	Отказ = Истина;
КонецПроцедуры

Функция сОН_ПараметрыРасчетаПоказателейЯчеек(ПолеТабличногоДокумента) Экспорт
	ПараметрыРасчетаПоказателей = Новый Структура;
	ПараметрыРасчетаПоказателей.Вставить("ВыделенныеОбласти",	Новый Массив);
	ПараметрыРасчетаПоказателей.Вставить("РассчитатьНаСервере",	Ложь);

	ВыделенныеОбласти			= ПараметрыРасчетаПоказателей.ВыделенныеОбласти;
	ВыделенныеОбластиДокумента	= ПолеТабличногоДокумента.ПолучитьВыделенныеОбласти();

	Для Каждого ВыделеннаяОбласть Из ВыделенныеОбластиДокумента Цикл
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;

		ГраницыОбласти = Новый Структура("Верх, Низ, Лево, Право, ТипОбласти");
		ЗаполнитьЗначенияСвойств(ГраницыОбласти, ВыделеннаяОбласть);
		ВыделенныеОбласти.Добавить(ГраницыОбласти);
	КонецЦикла;

	ВыделеноВсе = Ложь;

	Если ВыделенныеОбласти.Количество() = 1 Тогда

		ВыделеннаяОбласть = ВыделенныеОбласти[0];
		ВыделеноВсе = Не Булево(ВыделеннаяОбласть.Верх + ВыделеннаяОбласть.Низ + ВыделеннаяОбласть.Лево + ВыделеннаяОбласть.Право);
	КонецЕсли;

	ПараметрыРасчетаПоказателей.РассчитатьНаСервере = (ВыделеноВсе Или ВыделенныеОбласти.Количество() >= 100);

	Возврат ПараметрыРасчетаПоказателей;
КонецФункции

Функция сОН_ТекстЯчейкиВидаЭкспоненциальнойЗаписи(Знач ТекстЯчейки)
	ЧислоВхождений	= 0;
	ТекстЯчейки		= СтрЗаменить(ВРег(ТекстЯчейки), Символы.НПП, "");

	// Замена символов разделителей дробной части.
	ТекстЯчейки = СтрЗаменить(ТекстЯчейки, Символ(44), ""); // Запятая ','
	ТекстЯчейки = СтрЗаменить(ТекстЯчейки, Символ(46), ""); // Точка '.'

	КодыСимволовЭкспоненты = Новый Массив;
	КодыСимволовЭкспоненты.Добавить(1045); // Кириллическая 'E'
	КодыСимволовЭкспоненты.Добавить(69);   // Латинская 'E'

	Для Каждого Код Из КодыСимволовЭкспоненты Цикл
		СимволЭкспоненты	= Символ(Код);
		ЧислоВхождений		= ЧислоВхождений + СтрЧислоВхождений(ТекстЯчейки, СимволЭкспоненты);
		ТекстЯчейки			= СтрЗаменить(ТекстЯчейки, СимволЭкспоненты, "");
	КонецЦикла;

	Возврат ЧислоВхождений = 1 И СФ_ТолькоЦифрыВСтроке(ТекстЯчейки);
КонецФункции

Функция сОН_ПредставлениеПериодаВТексте(ДатаНачала, ДатаОкончания, ФорматнаяСтрока, СЗаглавнойБуквы) Экспорт
	Если ДатаНачала > ДатаОкончания Тогда
		Возврат "";
	КонецЕсли;

	ПредставлениеПериода = НРег(ПредставлениеПериода(ДатаНачала, ДатаОкончания, ФорматнаяСтрока));

	сОН_ОтформатироватьПредставлениеПериода(ПредставлениеПериода, ДатаНачала, ДатаОкончания, ФорматнаяСтрока);

	Если СЗаглавнойБуквы Тогда
		ПредставлениеПериода = ВРег(Сред(ПредставлениеПериода, 1, 1)) + Сред(ПредставлениеПериода, 2);
	КонецЕсли;

	Возврат ПредставлениеПериода;
КонецФункции

Процедура сОН_ОтформатироватьПредставлениеПериода(ПредставлениеПериода, ДатаНачала, ДатаОкончания, ФорматнаяСтрока)
	Если ЗначениеЗаполнено(ФорматнаяСтрока) Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ПредставлениеПериода) Тогда
		ПредставлениеПериода = "за все время";

		Возврат;
	КонецЕсли;

	Если Месяц(ДатаНачала) > 1 Или Год(ДатаНачала) <> Год(ДатаОкончания) Или ДатаНачала <> НачалоМесяца(ДатаНачала) Или ДатаОкончания <> КонецМесяца(ДатаОкончания) Тогда
		Возврат;
	КонецЕсли;

	Если Месяц(ДатаОкончания) = 6 Тогда
		ПредставлениеПериода = СтрШаблон("1 полугодие %1 г.", Формат(Год(ДатаНачала), "ЧГ=0"));
	ИначеЕсли Месяц(ДатаОкончания) = 9 Тогда
		ПредставлениеПериода = СтрШаблон("9 месяцев %1 г.", Формат(Год(ДатаНачала), "ЧГ=0"));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СтроковыеФункции

Функция СФ_СократитьДвойныеКавычки(Знач Значение) Экспорт
	Пока СтрНачинаетсяС(Значение, """") Цикл
		Значение = Сред(Значение, 2);
	КонецЦикла;

	Пока СтрЗаканчиваетсяНа(Значение, """") Цикл
		Значение = Лев(Значение, СтрДлина(Значение) - 1);
	КонецЦикла;

	Возврат Значение;
КонецФункции

Функция СФ_СформироватьФорматированнуюСтроку(ШаблонСтроки, ЭлементыСтиля, Знач Параметр1, Знач Параметр2, Знач Параметр3, Знач Параметр4, Знач Параметр5) Экспорт
	HTMLСтрока		= СтрШаблон(ШаблонСтроки, Параметр1, Параметр2, Параметр3, Параметр4, Параметр5);

	НаборСтрок		= Новый Массив;

	ТекущийШрифт	= Неопределено;
	ТекущийЦвет		= Неопределено;
	ТекущийФон		= Неопределено;
	ТекущаяСсылка	= Неопределено;

	ФрагментыСтроки = СтрРазделить(HTMLСтрока, "<", Истина);
	Для каждого Фрагмент Из ФрагментыСтроки Цикл
		ТелоСтроки = "";
		ПозицияТэг = СтрНайти(Фрагмент, ">");

		Если ПозицияТэг = 0 Тогда
			ТелоСтроки = Фрагмент;
		ИначеЕсли СтрНачинаетсяС(Фрагмент, "/") Тогда
			ТелоСтроки		= Сред(Фрагмент, ПозицияТэг + 1);

			ТекущийШрифт	= Неопределено;
			ТекущийЦвет		= Неопределено;
			ТекущийФон		= Неопределено;
			ТекущаяСсылка	= Неопределено;
		Иначе
			ОписаниеТэга = Лев(Фрагмент, ПозицияТэг - 1);
			ПервыйПробел = СтрНайти(ОписаниеТэга, " ");

			Если ПервыйПробел > 0 Тогда
				ИмяТега = СокрЛП(Лев(ОписаниеТэга, ПервыйПробел));

				ОписаниеАтрибутов = Сред(ОписаниеТэга, ПервыйПробел + 1);
				ОписаниеАтрибутов = СтрЗаменить(ОписаниеАтрибутов , """", "'");

				ПозицияРавно = СтрНайти(ОписаниеАтрибутов, "=");
				Пока ПозицияРавно > 0 Цикл
					ИмяАтрибута				= СокрЛП(Лев(ОписаниеАтрибутов, ПозицияРавно - 1));
					ПозицияПерваяКавычка	= СтрНайти(ОписаниеАтрибутов, "'",, ПозицияРавно + 1);
					Если ПозицияПерваяКавычка = 0 Тогда
						ПозицияПерваяКавычка = ПозицияРавно;
					КонецЕсли;
					ПозицияВтораяКавычка		= СтрНайти(ОписаниеАтрибутов, "'",, ПозицияПерваяКавычка + 1);
					Если ПозицияВтораяКавычка	= 0 Тогда
						ПозицияВтораяКавычка = СтрДлина(ОписаниеАтрибутов) + 1;
					КонецЕсли;
					ЗначениеАтрибута  = СокрЛП(Сред(ОписаниеАтрибутов, ПозицияПерваяКавычка + 1,  ПозицияВтораяКавычка - ПозицияПерваяКавычка - 1));

					Если СтрСравнить(ИмяАтрибута, "style") = 0 Тогда
						СФ_УстановитьСтилиПоЗначениюАтрибута(ЗначениеАтрибута, ЭлементыСтиля, ТекущийФон, ТекущийЦвет, ТекущийШрифт);
					ИначеЕсли СтрСравнить(ИмяАтрибута, "href") = 0 И СтрСравнить(ИмяТега, "a") = 0 Тогда
						ТекущаяСсылка = ЗначениеАтрибута;
					ИначеЕсли СтрСравнить(ИмяАтрибута, "src") = 0 И СтрСравнить(ИмяТега, "img") = 0 Тогда
						НаборСтрок.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок[ЗначениеАтрибута], ТекущийШрифт, ТекущийЦвет, ТекущийФон, ТекущаяСсылка));
					КонецЕсли;

					ОписаниеАтрибутов	= Сред(ОписаниеАтрибутов, ПозицияВтораяКавычка + 1);
					ПозицияРавно		= СтрНайти(ОписаниеАтрибутов, "=");
				КонецЦикла;
			Иначе
				ИмяТега = ОписаниеТэга;
			КонецЕсли;

			Если ИмяТега = "b" Тогда
				ТекущийШрифт = ЭлементыСтиля["ВажнаяНадписьШрифт"];
			КонецЕсли;

			ТелоСтроки = Сред(Фрагмент, ПозицияТэг + 1);
		КонецЕсли;

		ТелоСтроки = СтрЗаменить(ТелоСтроки, "&lt;", "<");
		Если СтрДлина(ТелоСтроки) > 0 Тогда
			НаборСтрок.Добавить(Новый ФорматированнаяСтрока(ТелоСтроки, ТекущийШрифт, ТекущийЦвет, ТекущийФон, ТекущаяСсылка));
		КонецЕсли;
	КонецЦикла;

	Возврат Новый ФорматированнаяСтрока(НаборСтрок);
КонецФункции

Процедура СФ_УстановитьСтилиПоЗначениюАтрибута(Знач ОписаниеСтиля, ЭлементыСтиля, ТекущийФон, ТекущийЦвет, ТекущийШрифт)
	Стили = СтрРазделить(ОписаниеСтиля, ";");

	Для каждого Стиль Из Стили Цикл
		ЗначенияСтиля = СтрРазделить(стиль, ":");
		ИмяСтиля      = СокрЛП(ЗначенияСтиля[0]);
		ЗначениеСтиля = СокрЛП(ЗначенияСтиля[1]);

		Если СтрСравнить(ИмяСтиля, "color") = 0  Тогда
			ТекущийЦвет = ЭлементыСтиля[ЗначениеСтиля];
		ИначеЕсли СтрСравнить(ИмяСтиля, "background-color") = 0 Тогда
			ТекущийФон = ЭлементыСтиля[ЗначениеСтиля];
		ИначеЕсли СтрСравнить(ИмяСтиля, "font") = 0 Тогда
			ТекущийШрифт = ЭлементыСтиля[ЗначениеСтиля];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция СФ_ПараметрыИзСтроки(Знач СтрокаПараметров, Знач Разделитель = ";") Экспорт
	Результат = Новый Структура;

	ОписаниеПараметра		= "";
	НайденоНачалоСтроки		= Ложь;
	НомерПоследнегоСимвола	= СтрДлина(СтрокаПараметров);
	Для НомерСимвола = 1 По НомерПоследнегоСимвола Цикл
		Символ =Сред(СтрокаПараметров, НомерСимвола, 1);
		Если Символ = """" Тогда
			НайденоНачалоСтроки = Не НайденоНачалоСтроки;
		КонецЕсли;
		Если Символ <> Разделитель Или НайденоНачалоСтроки Тогда
			ОписаниеПараметра = ОписаниеПараметра + Символ;
		КонецЕсли;
		Если Символ = Разделитель И Не НайденоНачалоСтроки Или НомерСимвола = НомерПоследнегоСимвола Тогда
			Позиция = СтрНайти(ОписаниеПараметра, "=");
			Если Позиция > 0 Тогда
				ИмяПараметра		= СокрЛП(Лев(ОписаниеПараметра, Позиция - 1));
				ЗначениеПараметра	= СокрЛП(Сред(ОписаниеПараметра, Позиция + 1));
				ЗначениеПараметра	= СФ_СократитьДвойныеКавычки(ЗначениеПараметра);
				Результат.Вставить(ИмяПараметра, ЗначениеПараметра);
			КонецЕсли;
			ОписаниеПараметра = "";
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция СФ_ТолькоЦифрыВСтроке(Знач Значение, Знач Устаревший = Истина, Знач ПробелыЗапрещены = Истина) Экспорт
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Не ПробелыЗапрещены Тогда
		Значение = СтрЗаменить(Значение, " ", "");
	КонецЕсли;

	Если СтрДлина(Значение) = 0 Тогда
		Возврат Истина;
	КонецЕсли;

	// Если содержит только цифры, то в результате замен должна быть получена пустая строка.
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы.
	Возврат СтрДлина(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
			Значение, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")) = 0;
КонецФункции

Функция СФ_СтрокаВЧисло(Знач Значение) Экспорт
	Значение  = СтрЗаменить(Значение, " ", "");
	Если СтрНачинаетсяС(Значение, "(") Тогда
		Значение = СтрЗаменить(Значение, "(", "-");
		Значение = СтрЗаменить(Значение, ")", "");
	КонецЕсли;

	СтрокаБезНулей = СтрЗаменить(Значение, "0", "");
	Если ПустаяСтрока(СтрокаБезНулей) Или СтрокаБезНулей = "-" Тогда
		Возврат 0;
	КонецЕсли;

	ТипЧисло	= Новый ОписаниеТипов("Число");
	Результат	= ТипЧисло.ПривестиЗначение(Значение);

	Возврат ?(Результат <> 0 И Не ПустаяСтрока(СтрокаБезНулей), Результат, Неопределено);
КонецФункции

Функция СФ_СтрокаВДату(Знач Значение, ЧастьДаты = Неопределено) Экспорт
	НаборЦифр = "1234567890";

	Если ТипЗнч(ЧастьДаты) <> Тип("ЧастиДаты") Тогда
		ЧастьДаты = ЧастиДаты.Дата;
	КонецЕсли;

	ПараметрыДаты		= Новый КвалификаторыДаты(ЧастьДаты);
	ОписаниеТипаДата	= Новый ОписаниеТипов("Дата",,, ПараметрыДаты);

	Значение	= ВРег(СтрСоединить(СтрРазделить(СокрЛП(Значение), Символы.НПП + Символы.ПС + Символы.Таб), " "));
	Результат	= ОписаниеТипаДата.ПривестиЗначение(Значение);

	Для НомерМесяца = 1 По 12 Цикл
		Значение = СтрЗаменить(Значение, ВРег(Формат(Дата(1, НомерМесяца, 2), "ДФ=MMММ")), Формат(НомерМесяца, "ЧЦ=2; ЧВН="));
		Значение = СтрЗаменить(Значение, ВРег(Формат(Дата(1, НомерМесяца, 2), "ДФ=MMM")), Формат(НомерМесяца, "ЧЦ=2; ЧВН="));
	КонецЦикла;

	МассивНеЦифр = СтрРазделить(Значение, НаборЦифр);
	Если МассивНеЦифр.Количество() < 2 Тогда
		Возврат Результат;
	КонецЕсли;

	ПозицияПервойЦифры		= СтрДлина(МассивНеЦифр[0]);
	ПозицияПоследнейЦифры	= СтрДлина(Значение) - СтрДлина(МассивНеЦифр[МассивНеЦифр.ВГраница()]);
	Значение = Сред(Значение, ПозицияПервойЦифры, ПозицияПоследнейЦифры - ПозицияПервойЦифры);
	Если ПустаяСтрока(Значение) Тогда
		Возврат Результат;
	КонецЕсли;

	ЗначениеМассивом	= СтрРазделить(Значение, " ");
	Элемент				= ЗначениеМассивом[ЗначениеМассивом.ВГраница()];
	Если ЗначениеМассивом.Количество() > 1 Тогда
		Если СтрДлина(Элемент) = 2 Или СтрДлина(Элемент) = 4 Тогда
			ЭтоТолькоЦифры = СтрРазделить(Элемент, НаборЦифр, Ложь).Количество() = 0;
			Если ЭтоТолькоЦифры Тогда
				ЗначениеДата	= Значение;
				ЗначениеВремя	= "";
			Иначе
				ЗначениеВремя	= Элемент;
				ЗначениеМассивом.Удалить(ЗначениеМассивом.ВГраница());
				ЗначениеДата	= СтрСоединить(ЗначениеМассивом, " ");
			КонецЕсли;
		Иначе
			ЗначениеВремя	= Элемент;
			ЗначениеМассивом.Удалить(ЗначениеМассивом.ВГраница());
			ЗначениеДата	= СтрСоединить(ЗначениеМассивом, " ");
		КонецЕсли;
	Иначе
		ЭтоТолькоЦифры = СтрРазделить(Элемент, НаборЦифр, Ложь).Количество() = 0;
		Если ЭтоТолькоЦифры Тогда
			Результат = ОписаниеТипаДата.ПривестиЗначение(Элемент);
			Если Не ЗначениеЗаполнено(Результат) Тогда
				Если СтрДлина(Элемент) = 6 Тогда
					ПеревернутаяДата	= Сред(Элемент, 5) + Сред(Элемент, 3, 2) + Лев(Элемент, 2);
					Год					= СФ_СтрокаВЧисло(Лев(ПеревернутаяДата, 2));
					Если Год <> Неопределено Тогда
						ПеревернутаяДата	= ?(Год > 29, "19", "20") + ПеревернутаяДата;
						Результат			= ОписаниеТипаДата.ПривестиЗначение(ПеревернутаяДата);
					КонецЕсли;
				ИначеЕсли СтрДлина(Элемент) > 7 Тогда
					ПеревернутаяДата	= Сред(Элемент, 5) + Сред(Элемент, 3, 2) + Лев(Элемент, 2);
					Результат			= ОписаниеТипаДата.ПривестиЗначение(ПеревернутаяДата);
				КонецЕсли;
			КонецЕсли;

			Возврат Результат;
		ИначеЕсли СтрНайти(Элемент, ":") > 0 Тогда
			ЗначениеДата	= "";
			ЗначениеВремя	= Элемент;
		Иначе
			ЗначениеДата	= Элемент;
			ЗначениеВремя	= "";
		КонецЕсли;
	КонецЕсли;

	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");

	Если ЗначениеЗаполнено(ЗначениеДата) И ЧастьДаты <> ЧастиДаты.Время Тогда
		НаборРазделителей		= СтрСоединить(СтрРазделить(ЗначениеДата, НаборЦифр, Ложь), "");
		ЗначениеДатаМассивом	= СтрРазделить(ЗначениеДата, НаборРазделителей, Ложь);

		ЭтоТолькоЦифры = СтрРазделить(ЗначениеДата, НаборЦифр, Ложь).Количество() = 0;
		Если НЕ ЭтоТолькоЦифры Тогда
			Год   = 1;
			Месяц = 1;
			День  = 1;

			Если СтрДлина(ЗначениеДатаМассивом[0]) = 4 Тогда
				Год			= ОписаниеТипаЧисло.ПривестиЗначение(ЗначениеДатаМассивом[0]);
				ГодВНачале	= Истина;
			Иначе
				День		= ОписаниеТипаЧисло.ПривестиЗначение(ЗначениеДатаМассивом[0]);
				ГодВНачале	= Ложь;
			КонецЕсли;

			Если ЗначениеДатаМассивом.Количество() = 2 Тогда
				Месяц = ОписаниеТипаЧисло.ПривестиЗначение(ЗначениеДатаМассивом[1]);;
			ИначеЕсли ЗначениеДатаМассивом.Количество() > 2 Тогда
				Месяц = ОписаниеТипаЧисло.ПривестиЗначение(ЗначениеДатаМассивом[1]);
				Если ГодВНачале Тогда
					День = ОписаниеТипаЧисло.ПривестиЗначение(ЗначениеДатаМассивом[2]);
				Иначе
					Год = ОписаниеТипаЧисло.ПривестиЗначение(ЗначениеДатаМассивом[2]);
				КонецЕсли;
			КонецЕсли;

			Если СтрДлина(Год) < 3 Тогда
				ГодЧислом = ОписаниеТипаЧисло.ПривестиЗначение(Год);
				Год = ?(ГодЧислом < 30, 2000, 1900) + ГодЧислом;
			Иначе
				Год = ОписаниеТипаЧисло.ПривестиЗначение(Год);
			КонецЕсли;

			ЗначениеДата = Формат(Год, "ЧЦ=4; ЧН=0001; ЧВН=; ЧГ=0") + Формат(Месяц, "ЧЦ=2; ЧН=01; ЧВН=; ЧГ=0") + Формат(День, "ЧЦ=2; ЧН=01; ЧВН=; ЧГ=0");
		Иначе
			Если СтрДлина(ЗначениеДата) = 6 Тогда
				Год				= Прав(ЗначениеДата, 2);
				ГодЧислом		= ОписаниеТипаЧисло.ПривестиЗначение(Год);
				ЗначениеДата	= ?(ГодЧислом < 30, 2000, 1900) + Год + Сред(ЗначениеДата, 3, 2) + Лев(ЗначениеДата, 2) ;
			ИначеЕсли СтрДлина(ЗначениеДата) = 8 Тогда
				Результат = ОписаниеТипаДата.ПривестиЗначение(ЗначениеДата);

				Если Не ЗначениеЗаполнено(Результат) Тогда
					ПеревернутаяДата	= Сред(ЗначениеДата, 5) + Сред(ЗначениеДата, 3, 2) + Лев(ЗначениеДата, 2);
					Результат			= ОписаниеТипаДата.ПривестиЗначение(ПеревернутаяДата);
					Если ЗначениеЗаполнено(Результат) Тогда
						ЗначениеДата = ПеревернутаяДата;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗначениеДата = "00010101";
	КонецЕсли;

	Если ЗначениеЗаполнено(ЗначениеВремя) И ЧастьДаты <> ЧастиДаты.Дата Тогда
		ЭтоТолькоЦифры = СтрРазделить(ЗначениеВремя, НаборЦифр, Ложь).Количество() = 0;
		Если НЕ ЭтоТолькоЦифры Тогда
			НаборРазделителей		= СтрСоединить(СтрРазделить(ЗначениеВремя, НаборЦифр, Ложь), "");
			ЗначениеВремяМассивом	= СтрРазделить(ЗначениеВремя, НаборРазделителей, Ложь);

			Час     = ОписаниеТипаЧисло.ПривестиЗначение(ЗначениеВремяМассивом[0]);
			Минута  = 0;
			Секунда = 0;

			Если ЗначениеВремяМассивом.Количество() = 2 Тогда
				Минута		= ОписаниеТипаЧисло.ПривестиЗначение(ЗначениеВремяМассивом[1]);
			ИначеЕсли ЗначениеВремяМассивом.Количество() > 2 Тогда
				Минута		= ОписаниеТипаЧисло.ПривестиЗначение(ЗначениеВремяМассивом[1]);
				Секунда		= ОписаниеТипаЧисло.ПривестиЗначение(ЗначениеВремяМассивом[2]);
			КонецЕсли;

			ШаблонФормата = "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=0";
			ЗначениеВремя = Формат(Час, ШаблонФормата) + Формат(Минута, ШаблонФормата) + Формат(Секунда, ШаблонФормата);
		КонецЕсли;
	Иначе
		ЗначениеВремя = "000000";
	КонецЕсли;

	Результат = ОписаниеТипаДата.ПривестиЗначение(ЗначениеДата + ЗначениеВремя);

	Возврат Результат;
КонецФункции

#КонецОбласти
