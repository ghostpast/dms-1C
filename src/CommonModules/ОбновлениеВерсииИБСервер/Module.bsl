///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбновлениеИнформационнойБазы

Процедура ОИБ_ЗаписатьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено, Знач ВключитьБизнесЛогику = Ложь) Экспорт
	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Данные.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", РегистрироватьНаУзлахПлановОбмена);

	Если РегистрироватьНаУзлахПлановОбмена = Неопределено
		Или Не РегистрироватьНаУзлахПлановОбмена Тогда

		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;

	Данные.Записать();

	ОИБ_ОтметитьВыполнениеОбработки(Данные);
КонецПроцедуры

Процедура ОИБ_УдалитьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено, Знач ВключитьБизнесЛогику = Ложь) Экспорт
	Данные.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", РегистрироватьНаУзлахПлановОбмена);

	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Если РегистрироватьНаУзлахПлановОбмена = Неопределено Или Не РегистрироватьНаУзлахПлановОбмена Тогда
		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;

	Данные.Удалить();
КонецПроцедуры

Процедура ОИБ_ЗаписатьНаборЗаписей(Знач НаборЗаписей, Замещать = Истина, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено, Знач ВключитьБизнесЛогику = Ложь) Экспорт
	НаборЗаписей.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", РегистрироватьНаУзлахПлановОбмена);
	НаборЗаписей.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;

	Если РегистрироватьНаУзлахПлановОбмена = Неопределено
		Или Не РегистрироватьНаУзлахПлановОбмена Тогда
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;

	НаборЗаписей.Записать(Замещать);

	ОИБ_ОтметитьВыполнениеОбработки(НаборЗаписей);
КонецПроцедуры

Процедура ОИБ_ОтметитьВыполнениеОбработки(Данные, ДополнительныеПараметры = Неопределено, Очередь = Неопределено) Экспорт
	Если Очередь = Неопределено Тогда
		Если ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполнения <> "Отложенно"
			Или ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполненияОтложенныхОбработчиков <> "Параллельно" Тогда
			Возврат;
		КонецЕсли;
		Очередь = ПараметрыСеанса.ПараметрыОбработчикаОбновления.ОчередьОтложеннойОбработки;
	КонецЕсли;

	Если Не ПараметрыСеанса.ПараметрыОбработчикаОбновления.ЕстьОбработанныеОбъекты Тогда
		НовыеПараметрыСеанса = сОИБ_НовыеПараметрыОбработчикаОбновления();

		ЗаполнитьЗначенияСвойств(НовыеПараметрыСеанса, ПараметрыСеанса.ПараметрыОбработчикаОбновления);
		НовыеПараметрыСеанса.ЕстьОбработанныеОбъекты = Истина;

		ПараметрыСеанса.ПараметрыОбработчикаОбновления = Новый ФиксированнаяСтруктура(НовыеПараметрыСеанса);
	КонецЕсли;

	КопияДанных = Данные;
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ОИБ_ДополнительныеПараметрыОтметкиОбработки();
	КонецЕсли;

	Если (ТипЗнч(Данные) = Тип("Массив")
		Или ТипЗнч(Данные) = Тип("ТаблицаЗначений"))
		И Данные.Количество() = 0 Тогда

		ТекстИсключения = "В процедуру ОбновлениеВерсииИБСервер.ОИБ_ОтметитьВыполнениеОбработки передан пустой массив. Не возможно отметить выполнение обработки.";
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	Узел = ПланыОбмена.ОбновлениеИнформационнойБазы.УзелПоОчереди(Очередь);

	Если ДополнительныеПараметры.ЭтоДвижения Тогда
		Набор = БазоваяПодсистемаСервер.ОН_МенеджерОбъектаПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра).СоздатьНаборЗаписей();

		Если ТипЗнч(Данные) = Тип("Массив") Тогда
			Для Каждого СтрокаМассива Из Данные Цикл
				Набор.Отбор.Регистратор.Установить(СтрокаМассива);
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Набор);
			КонецЦикла;
		Иначе
			Набор.Отбор.Регистратор.Установить(Данные);
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Набор);
		КонецЕсли;
	ИначеЕсли ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений Тогда
		Набор				= БазоваяПодсистемаСервер.ОН_МенеджерОбъектаПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра).СоздатьНаборЗаписей();
		МетаданныеОбъекта	= Метаданные.НайтиПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра);

		ОИБ_УстановитьНедостающиеОтборыВНаборе(Набор, МетаданныеОбъекта, Данные);

		Для Каждого СтрокаТаблицы Из Данные Цикл
			Для Каждого Колонка Из Данные.Колонки Цикл
				Набор.Отбор[Колонка.Имя].Значение		= СтрокаТаблицы[Колонка.Имя];
				Набор.Отбор[Колонка.Имя].Использование	= Истина;
			КонецЦикла;

			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Набор);
		КонецЦикла;
	Иначе
		Если ТипЗнч(Данные) = Тип("ОбъектМетаданных") Тогда
			ТекстИсключения = "Не поддерживается отметка выполнения обработки обновления целиком объекта метаданных. Нужно отмечать обработку конкретных данных.";

			ВызватьИсключение ТекстИсключения;
		КонецЕсли;

		Если ТипЗнч(Данные) <> Тип("Массив") Тогда

			ТипЗначенияОбъекта = ТипЗнч(Данные);
			МетаданныеОбъекта  = Метаданные.НайтиПоТипу(ТипЗначенияОбъекта);

			Если Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта)
				И МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
				Набор = БазоваяПодсистемаСервер.ОН_МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя()).СоздатьНаборЗаписей();
				Для Каждого ЭлементОтбора Из Данные.Отбор Цикл
					Набор.Отбор[ЭлементОтбора.Имя].Значение			= ЭлементОтбора.Значение;
					Набор.Отбор[ЭлементОтбора.Имя].Использование	= ЭлементОтбора.Использование;
				КонецЦикла;
				ОИБ_УстановитьНедостающиеОтборыВНаборе(Набор, МетаданныеОбъекта, Данные.Отбор);
			ИначеЕсли БазоваяПодсистемаСервер.ОН_ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта)
				И Не БазоваяПодсистемаСервер.ОН_ЭтоСсылка(ТипЗначенияОбъекта)
				И Данные.ЭтоНовый() Тогда

				Возврат;
			ИначеЕсли Метаданные.Константы.Содержит(МетаданныеОбъекта) Тогда
				Возврат;
			Иначе
				Набор = Данные;
			КонецЕсли;

			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Набор);
			КопияДанных = Набор;
		Иначе
			Для Каждого ЭлементМассива Из Данные Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ЭлементМассива);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если Не БазоваяПодсистемаСервер.ОН_ЭтоПодчиненныйУзелРИБ() Тогда
		РегистрыСведений.ДанныеОбработанныеВЦентральномУзлеРИБ.ОтметитьВыполнениеОбработки(Очередь, КопияДанных, ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

Процедура ОИБ_УстановитьНедостающиеОтборыВНаборе(Набор, МетаданныеНабора, УстанавливаемыеОтборы)
	Для Каждого Измерение Из МетаданныеНабора.Измерения Цикл
		ЕстьОтборПоИзмерению = Ложь;

		Если ТипЗнч(УстанавливаемыеОтборы) = Тип("ТаблицаЗначений") Тогда
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы.Колонки.Найти(Измерение.Имя) <> Неопределено;
		Иначе //Отбор
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы[Измерение.Имя].Использование;
		КонецЕсли;

		Если Не ЕстьОтборПоИзмерению Тогда
			ПустоеЗначение = Измерение.Тип.ПривестиЗначение();
			Набор.Отбор[Измерение.Имя].Установить(ПустоеЗначение);
		КонецЕсли;
	КонецЦикла;

	Если МетаданныеНабора.ОсновнойОтборПоПериоду Тогда
		Если ТипЗнч(УстанавливаемыеОтборы) = Тип("ТаблицаЗначений") Тогда
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы.Колонки.Найти("Период") <> Неопределено;
		Иначе //Отбор
			//@skip-warning
			ЕстьОтборПоИзмерению = УстанавливаемыеОтборы.Период.Использование;
		КонецЕсли;

		Если Не ЕстьОтборПоИзмерению Тогда
			ПустоеЗначение = '00010101';
			Набор.Отбор.Период.Установить(ПустоеЗначение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ОИБ_ДополнительныеПараметрыОтметкиОбработки() Экспорт
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭтоДвижения",						Ложь);
	ДополнительныеПараметры.Вставить("ОтметитьВсеРегистраторы",			Ложь);
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений",	Ложь);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра",				"");

	Возврат ДополнительныеПараметры;
КонецФункции

Функция ОИБ_ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(Очередь, ПолноеИмяОбъекта, ДополнительныеПараметры = Неопределено) Экспорт
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ОИБ_ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	КонецЕсли;

	ИмяОбъекта					= СтрРазделить(ПолноеИмяОбъекта,".",Ложь)[1];
	МетаданныеОбъекта			= Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	ПараметрыПостроения			= ОИБ_ПараметрыПостроенияВыборки(ДополнительныеПараметры, "ТаблицаИзменений");
	ЗаданыПоляУпорядочивания	= ДополнительныеПараметры.ПоляУпорядочивания.Количество() > 0;
	НеобходимоУпорядочивание	= ЗаданыПоляУпорядочивания Или ПараметрыПостроения.ПостраничнаяВыборка;

	Запрос = Новый Запрос;
	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 10000
		|	&ВыбираемыеПоля
		|ИЗ
		|	#ТаблицаОбъектаИзменения КАК ТаблицаИзменений
		|ГДЕ
		|	ТаблицаИзменений.Узел = &ТекущаяОчередь
		|	И &ТекстУсловияПоОтборуНезаблокированных
		|	И &УсловиеПоДопИсточникамСсылкам
		|	И &УсловиеПоСтраницам";

	Если НеобходимоУпорядочивание Тогда
		ОИБ_УстановитьПоляУпорядочиванияНезависимогоРегистраСведений(ПараметрыПостроения);
		ТекстЗапроса = ТекстЗапроса + "
			|УПОРЯДОЧИТЬ ПО
			|	&ПорядокВыборки
			|";
	КонецЕсли;

	ИзмеренияСОсновнымОтбором = Новый Массив;
	Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
		Если Не Измерение.ОсновнойОтбор Тогда
			Продолжить;
		КонецЕсли;

		Если ПараметрыПостроения.ИспользуемыеПоляУпорядочивания[Измерение.Имя] = Неопределено Тогда
			ПараметрыПостроения.ПоляВыборки.Добавить(Измерение.Имя);
			ЗаданыПоляУпорядочивания = ПараметрыПостроения.ДополнительныеПараметры.ПоляУпорядочивания.Количество() > 0;

			Если ЗаданыПоляУпорядочивания Или ПараметрыПостроения.ПостраничнаяВыборка Тогда
				ПараметрыПостроения.Направления.Добавить("");
			КонецЕсли;
		КонецЕсли;
		ИзмеренияСОсновнымОтбором.Добавить(Измерение.Имя);

		Запрос.УстановитьПараметр("ПустоеЗначениеИзмерения"+ Измерение.Имя, Измерение.Тип.ПривестиЗначение());
	КонецЦикла;

	ПризнакНепериодический = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
	Если МетаданныеОбъекта.ПериодичностьРегистраСведений <> ПризнакНепериодический
		И МетаданныеОбъекта.ОсновнойОтборПоПериоду Тогда

		ПараметрыПостроения.ПоляВыборки.Вставить(0, "Период");
		ПараметрыПостроения.Направления.Вставить(0, "");
	КонецЕсли;

	Если ПараметрыПостроения.ПоляВыборки.Количество() = 0 Тогда
		Для Каждого Ресурс Из МетаданныеОбъекта.Ресурсы Цикл
			Если ПараметрыПостроения.ИспользуемыеПоляУпорядочивания[Ресурс.Имя] = Неопределено Тогда
				ПараметрыПостроения.ПоляВыборки.Добавить(Ресурс.Имя);
				ПараметрыПостроения.Направления.Добавить("");
			КонецЕсли;
		КонецЦикла;
		Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			Если ПараметрыПостроения.ИспользуемыеПоляУпорядочивания[Реквизит.Имя] = Неопределено Тогда
				ПараметрыПостроения.ПоляВыборки.Добавить(Реквизит.Имя);
				ПараметрыПостроения.Направления.Добавить("");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ТекстУсловияПоОтборуНезаблокированных	= ОИБ_УсловиеОтбораНезаблокированныхИзмерений(ИзмеренияСОсновнымОтбором);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловияПоОтборуНезаблокированных", ТекстУсловияПоОтборуНезаблокированных);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаОбъектаИзменения", ПолноеИмяОбъекта + ".Изменения");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВТЗаблокированоИзмерения","ВТЗаблокировано" + ИмяОбъекта);
	ОИБ_УстановитьРазмерВыборки(ТекстЗапроса, ДополнительныеПараметры);

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	ОИБ_СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);

	ОИБ_ДобавитьПроверкуБлокировкиДополнительныхИсточниковДляНезависимогоРегистра(Очередь,
																				ТекстЗапроса,
																				ПолноеИмяОбъекта,
																				МенеджерВременныхТаблиц,
																				ДополнительныеПараметры);

	Запрос.Текст					= ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц	= МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекущаяОчередь", ПланыОбмена.ОбновлениеИнформационнойБазы.УзелПоОчереди(Очередь));

	ОИБ_УстановитьПоляПоСтраницам(Запрос, ПараметрыПостроения);
	Если НеобходимоУпорядочивание Тогда
		ОИБ_УстановитьПорядокПоСтраницам(Запрос, ПараметрыПостроения);
	КонецЕсли;

	Возврат ОИБ_ВыбратьДанныеДляОбработки(Запрос, ПараметрыПостроения);
КонецФункции

Процедура ОИБ_УстановитьПорядокПоСтраницам(Запрос, ПараметрыПостроения)
	ПоляВыборки = ПараметрыПостроения.ПоляВыборки;
	ИмяТаблицы = ПараметрыПостроения.ИмяТаблицы;
	Направления = ПараметрыПостроения.Направления;

	Если Направления.Количество() = 0 Тогда
		Направления.Добавить("УБЫВ");

		Если ПараметрыПостроения.ПостраничнаяВыборка Тогда
			Для Индекс = 1 По ПоляВыборки.Количество() - 1 Цикл
				Направления.Добавить("");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	ПорядокВыборки	= ОИБ_УпорядочиванияДляЗапроса(ПоляВыборки, Направления, ИмяТаблицы);
	Запрос.Текст	= СтрЗаменить(Запрос.Текст, "&ПорядокВыборки", ПорядокВыборки);
КонецПроцедуры

Функция ОИБ_УпорядочиванияДляЗапроса(ИменаПолей, Направления = Неопределено, ИмяТаблицы = "", Дополнительные = Ложь)
	КоличествоПолей = ИменаПолей.Количество();

	Если КоличествоПолей = 0 Тогда
		Возврат "";
	КонецЕсли;

	ПолноеИмяТаблицы	= ?(ПустаяСтрока(ИмяТаблицы), "", ИмяТаблицы + ".");
	ЕстьНаправления		= Направления <> Неопределено И Направления.Количество() = КоличествоПолей;
	Упорядочивание		= Новый Массив;

	Для Индекс = 0 По КоличествоПолей - 1 Цикл
		ИмяПоля = ИменаПолей[Индекс];

		Если ЕстьНаправления Тогда
			ТекущееНаправление	= Направления[Индекс];
			Направление			= ?(ПустаяСтрока(ТекущееНаправление), "", " " + ТекущееНаправление);
		Иначе
			Направление = "";
		КонецЕсли;

		Порядок = ПолноеИмяТаблицы + ИмяПоля + Направление;
		Упорядочивание.Добавить(Порядок);
	КонецЦикла;

	Разделитель = ",
		|	";

	Возврат ?(Дополнительные, Разделитель, "") + СтрСоединить(Упорядочивание, Разделитель);
КонецФункции

Процедура ОИБ_УстановитьПоляПоСтраницам(Запрос, ПараметрыПостроения)
	ВыбираемыеПоля = ОИБ_ПоляДляЗапроса(ПараметрыПостроения.ПоляВыборки,
		ПараметрыПостроения.Псевдонимы,
		ПараметрыПостроения.ИмяТаблицы);

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВыбираемыеПоля", ВыбираемыеПоля);
КонецПроцедуры

Функция ОИБ_ПоляДляЗапроса(ИменаПолей, Псевдонимы = Неопределено, ИмяТаблицы = "", Дополнительные = Ложь)
	КоличествоПолей = ИменаПолей.Количество();

	Если КоличествоПолей = 0 Тогда
		Возврат "";
	КонецЕсли;

	ЕстьПсевдонимы			= Псевдонимы <> Неопределено И Псевдонимы.Количество() = КоличествоПолей;
	ПолноеИмяТаблицы		= ?(ПустаяСтрока(ИмяТаблицы), "", ИмяТаблицы + ".");
	ИспользуемыеПсевдонимы	= Новый Соответствие;
	Поля					= Новый Массив;

	Для Индекс = 0 По КоличествоПолей - 1 Цикл
		ИмяПоля = ИменаПолей[Индекс];

		Если ЕстьПсевдонимы Тогда
			Псевдоним = Псевдонимы[Индекс];
		Иначе
			Состав					= СтрРазделить(ИмяПоля, ".");
			Псевдоним				= Состав[Состав.Количество() - 1];
			ИспользуемыйПсевдоним	= ИспользуемыеПсевдонимы[Псевдоним];

			Если ИспользуемыйПсевдоним = Неопределено Тогда
				ИспользуемыеПсевдонимы[Псевдоним]	= 1;
			Иначе
				ИспользуемыеПсевдонимы[Псевдоним]	= ИспользуемыеПсевдонимы[Псевдоним] + 1;
				Псевдоним							= Псевдоним + Формат(ИспользуемыеПсевдонимы[Псевдоним], "ЧГ=0");
			КонецЕсли;
		КонецЕсли;

		Если ОИБ_ИмяСоответствуетТребованиямИменованияСвойств(Псевдоним) Тогда
			Псевдоним = " КАК " + Псевдоним;
		Иначе
			Псевдоним = "";
		КонецЕсли;

		Имя = ПолноеИмяТаблицы + ИмяПоля + Псевдоним;
		Поля.Добавить(Имя);
	КонецЦикла;

	Разделитель = ",
		|	";

	Возврат ?(Дополнительные, Разделитель, "") + СтрСоединить(Поля, Разделитель);
КонецФункции

Функция ОИБ_ДополнительныеПараметрыВыборкиДанныхДляОбработки() Экспорт
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбиратьПорциями",				Истина);
	ДополнительныеПараметры.Вставить("ИмяВременнойТаблицы",				"");
	ДополнительныеПараметры.Вставить("ДополнительныеИсточникиДанных",	Новый Соответствие);
	ДополнительныеПараметры.Вставить("ПоляУпорядочивания",				Новый Массив);
	ДополнительныеПараметры.Вставить("МаксимумВыборки",					10000);
	ДополнительныеПараметры.Вставить("ИмяИзмеренияДляОтбора",			"Регистратор");

	Возврат ДополнительныеПараметры;
КонецФункции

Функция ОИБ_ПараметрыПостроенияВыборки(ДополнительныеПараметры, ИмяТаблицы = Неопределено)
	ОИБ_ПроверитьПараметрыВыборки(ДополнительныеПараметры);

	ПараметрыПостроения = Новый Структура;
	ПараметрыПостроения.Вставить("ДополнительныеПараметры",			ДополнительныеПараметры);
	ПараметрыПостроения.Вставить("ПостраничнаяВыборка",				(ДополнительныеПараметры.Свойство("СпособВыборки") И ДополнительныеПараметры.ВыбиратьПорциями));
	ПараметрыПостроения.Вставить("ИмяТаблицы",						ИмяТаблицы);
	ПараметрыПостроения.Вставить("ПоляВыборки",						Новый Массив);
	ПараметрыПостроения.Вставить("ПоляУпорядочивания",				Новый Массив);
	ПараметрыПостроения.Вставить("ИспользуемыеПоляУпорядочивания",	Новый Соответствие);
	ПараметрыПостроения.Вставить("Псевдонимы",						Новый Массив);
	ПараметрыПостроения.Вставить("Направления",						Новый Массив);

	Возврат ПараметрыПостроения;
КонецФункции

Процедура ОИБ_ПроверитьПараметрыВыборки(Параметры)
	Если Не Параметры.ВыбиратьПорциями И (Параметры.Свойство("СпособВыборки") И Параметры.ВыбиратьПорциями) Тогда
		ВызватьИсключение "Многопоточный обработчик обновления обязан выбирать данные порциями.";
	КонецЕсли;
КонецПроцедуры

Процедура ОИБ_УстановитьПоляУпорядочиванияНезависимогоРегистраСведений(ПараметрыПостроения)
	Разделители			= " " + Символы.Таб + Символы.ПС;
	ПоляУпорядочивания	= ПараметрыПостроения.ДополнительныеПараметры.ПоляУпорядочивания;

	Для ИндексПоля = 0 По ПоляУпорядочивания.ВГраница() Цикл
		Поле														= ПоляУпорядочивания[ИндексПоля];
		Состав														= СтрРазделить(Поле, Разделители, Ложь);
		ИмяПоля														= Состав[0];
		ПараметрыПостроения.ПоляВыборки.Добавить(ИмяПоля);
		ПараметрыПостроения.ИспользуемыеПоляУпорядочивания[ИмяПоля]	= Истина;

		Если Состав.Количество() > 1 Тогда
			ПараметрыПостроения.Направления.Добавить(Состав[1]);
		Иначе
			ПараметрыПостроения.Направления.Добавить(?(ИндексПоля = 0, "УБЫВ", ""));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОИБ_УстановитьРазмерВыборки(ТекстЗапроса, Параметры)
	РазмерВыборки = ?(Параметры.ВыбиратьПорциями, Параметры.МаксимумВыборки, Неопределено);
	ОИБ_ИзменитьМаксимумВыборки(ТекстЗапроса, 10000, РазмерВыборки);
КонецПроцедуры

Процедура ОИБ_ИзменитьМаксимумВыборки(ТекстЗапроса, ТекущееКоличество, НовоеКоличество)
	ТекстПоиска = "ПЕРВЫЕ " + Формат(ТекущееКоличество, "ЧН=0; ЧГ=0");

	Если НовоеКоличество = Неопределено Тогда
		ТекстЗамены = "";
	Иначе
		ТекстЗамены = "ПЕРВЫЕ " + Формат(НовоеКоличество, "ЧН=0; ЧГ=0");
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);
КонецПроцедуры

Функция ОИБ_СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц, ДополнительныеПараметры = Неопределено) Экспорт
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ОИБ_ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	КонецЕсли;

	Запрос							= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц	= МенеджерВременныхТаблиц;
	МетаданныеОбъекта				= Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	ИмяИзмеренияДляОтбора			= ДополнительныеПараметры.ИмяИзмеренияДляОтбора;

	Если БазоваяПодсистемаСервер.ОН_ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта) Тогда
		Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	&ПустоеЗначение КАК Ссылка
			|ПОМЕСТИТЬ #ИмяВременнойТаблицы
			|ГДЕ
			|	ЛОЖЬ";

			Запрос.УстановитьПараметр("ПустоеЗначение", МетаданныеОбъекта.СтандартныеРеквизиты.Ссылка.Тип.ПривестиЗначение());
		Иначе
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаИзменений.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ #ИмяВременнойТаблицы
			|ИЗ
			|	#ТаблицаИзменений КАК ТаблицаИзменений
			|ГДЕ
			|	&УсловиеОтбораУзла
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка";
		КонецЕсли;
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта)
		И МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый
		И ИмяИзмеренияДляОтбора = "Регистратор" Тогда
		ИменаИзмерений		= Новый Массив;
		ПсевдонимыИзмерений	= Новый Массив;

		Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	&ТекстВыборкиИзмерений
			|ПОМЕСТИТЬ #ИмяВременнойТаблицы
			|ГДЕ
			|	ЛОЖЬ";
			Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
				Если Не Измерение.ОсновнойОтбор Тогда
					Продолжить;
				КонецЕсли;

				ИменаИзмерений.Добавить("&ПустоеЗначениеИзмерения" + Измерение.Имя);
				ПсевдонимыИзмерений.Добавить(Измерение.Имя);
				Запрос.УстановитьПараметр("ПустоеЗначениеИзмерения" + Измерение.Имя, Измерение.Тип.ПривестиЗначение());
			КонецЦикла;
		Иначе
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	&ТекстВыборкиИзмерений
			|ПОМЕСТИТЬ #ИмяВременнойТаблицы
			|ИЗ
			|	#ТаблицаИзменений КАК ТаблицаИзменений
			|ГДЕ
			|	&УсловиеОтбораУзла
			|ИНДЕКСИРОВАТЬ ПО
			|	&ИндексируемыеИзмерения";
			Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
				Если Не Измерение.ОсновнойОтбор Тогда
					Продолжить;
				КонецЕсли;

				ИменаИзмерений.Добавить("ТаблицаИзменений." + Измерение.Имя);
				ПсевдонимыИзмерений.Добавить(Измерение.Имя);
			КонецЦикла;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИндексируемыеИзмерения", ОИБ_УпорядочиванияДляЗапроса(ПсевдонимыИзмерений));
		КонецЕсли;

		ПризнакНепериодический = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
		Если МетаданныеОбъекта.ПериодичностьРегистраСведений <> ПризнакНепериодический
			И МетаданныеОбъекта.ОсновнойОтборПоПериоду Тогда
			ИменаИзмерений.Добавить("ТаблицаИзменений.Период");
			ПсевдонимыИзмерений.Добавить("Период");
		КонецЕсли;

		Если ИменаИзмерений.Количество() = 0 Тогда
			ТекстВыборкиИзмерений = "*";
		Иначе
			ТекстВыборкиИзмерений = ОИБ_ПоляДляЗапроса(ИменаИзмерений, ПсевдонимыИзмерений);
		КонецЕсли;

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборкиИзмерений", ТекстВыборкиИзмерений);
	ИначеЕсли БазоваяПодсистемаСервер.ОН_ЭтоРегистр(МетаданныеОбъекта) Тогда
		Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	&ПустоеЗначение КАК Регистратор
			|ПОМЕСТИТЬ #ИмяВременнойТаблицы
			|ГДЕ
			|	ЛОЖЬ";

			Запрос.УстановитьПараметр("ПустоеЗначение", МетаданныеОбъекта.СтандартныеРеквизиты.Регистратор.Тип.ПривестиЗначение());

		Иначе
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаИзменений.Регистратор КАК Регистратор
			|ПОМЕСТИТЬ #ИмяВременнойТаблицы
			|ИЗ
			|	#ТаблицаИзменений КАК ТаблицаИзменений
			|ГДЕ
			|	&УсловиеОтбораУзла
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Регистратор";
		КонецЕсли;

		Если ИмяИзмеренияДляОтбора <> "Регистратор" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Регистратор", ИмяИзмеренияДляОтбора);
		КонецЕсли;
	Иначе
		ТекстИсключения = "Для этого типа метаданных не поддерживается проверка в функции ОбновлениеВерсииИБСервер.ОИБ_СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных.";
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	Если Не ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		Если Очередь = Неопределено Тогда
			УсловиеОтбораУзла = "	ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы ";
		Иначе
			УсловиеОтбораУзла = "	ТаблицаИзменений.Узел В (&Узлы) ";
			Запрос.УстановитьПараметр("Узлы", ПланыОбмена.ОбновлениеИнформационнойБазы.УзлыМеньшейОчереди(Очередь));
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораУзла", УсловиеОтбораУзла);

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаИзменений", ПолноеИмяОбъекта + ".Изменения");
	КонецЕсли;

	ИмяОбъекта = СтрРазделить(ПолноеИмяОбъекта, ".")[1];

	Если ПустаяСтрока(ДополнительныеПараметры.ИмяВременнойТаблицы) Тогда
		ИмяВременнойТаблицы =  "ВТЗаблокировано"+ИмяОбъекта;
	Иначе
		ИмяВременнойТаблицы = ДополнительныеПараметры.ИмяВременнойТаблицы;
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяВременнойТаблицы", ИмяВременнойТаблицы);

	Запрос.Текст = ТекстЗапроса;

	РезультатЗапроса = Запрос.Выполнить();

	Результат = Новый Структура("ЕстьЗаписиВоВременнойТаблице,ИмяВременнойТаблицы", Ложь, "");
	Результат.ИмяВременнойТаблицы = ИмяВременнойТаблицы;
	Результат.ЕстьЗаписиВоВременнойТаблице = РезультатЗапроса.Выгрузить()[0].Количество <> 0;

	Возврат Результат;
КонецФункции

Процедура ОИБ_ДобавитьПроверкуБлокировкиДополнительныхИсточниковДляНезависимогоРегистра(Очередь, ТекстЗапроса, ПолноеИмяРегистра, МенеджерВременныхТаблиц, ДополнительныеПараметры)
	Если ДополнительныеПараметры.ДополнительныеИсточникиДанных.Количество() = 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстЗапросаСоединениеСДопИсточниками", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДопИсточникамСсылкам", "ИСТИНА");
	Иначе
		МетаданныеРегистра						= Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра);
		УсловияПоДопИсточникамСсылкам			= Новый Массив;
		ШаблонУсловияПоДопИсточникамСсылкам		=
			"	НЕ ИСТИНА В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			%1 КАК %1
			|		ГДЕ
			|			ТаблицаИзменений.%2 = %1.Ссылка)";

		Для Каждого КлючЗначение Из ДополнительныеПараметры.ДополнительныеИсточникиДанных Цикл
			ИсточникДанных = КлючЗначение.Ключ;

			ТипыИсточника				= МетаданныеРегистра.Измерения[ИсточникДанных].Тип.Типы();
			МассивОбъектовМетаданных	= Новый Массив;

			Для Каждого ТипИсточника Из ТипыИсточника Цикл
				Если ОИБ_ЭтоПримитивныйТип(ТипИсточника) Или Перечисления.ТипВсеСсылки().СодержитТип(ТипИсточника) Тогда
					Продолжить;
				КонецЕсли;

				МассивОбъектовМетаданных.Добавить(Метаданные.НайтиПоТипу(ТипИсточника));
			КонецЦикла;

			ДополнительныеПараметрыСозданияВТ						= ОИБ_ДополнительныеПараметрыВыборкиДанныхДляОбработки();
			ИмяВременнойТаблицы										= "ВТЗаблокировано" + ИсточникДанных;
			ДополнительныеПараметрыСозданияВТ.ИмяВременнойТаблицы	= ИмяВременнойТаблицы;

			ОИБ_СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияСсылок(Очередь, МассивОбъектовМетаданных, МенеджерВременныхТаблиц, ДополнительныеПараметрыСозданияВТ);

			УсловиеПоДопИсточникамСсылкам	= СтрШаблон(ШаблонУсловияПоДопИсточникамСсылкам, ИмяВременнойТаблицы, ИсточникДанных);
			УсловияПоДопИсточникамСсылкам.Добавить(УсловиеПоДопИсточникамСсылкам);
		КонецЦикла;

		РазделительИ =
			"
			|	И ";
		УсловиеПоДопИсточникамСсылкам	= СтрСоединить(УсловияПоДопИсточникамСсылкам, РазделительИ);
		ТекстЗапроса					= СтрЗаменить(ТекстЗапроса, "&УсловиеПоДопИсточникамСсылкам", УсловиеПоДопИсточникамСсылкам);
	КонецЕсли;
КонецПроцедуры

Функция ОИБ_СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияСсылок(Очередь, ПолныеИменаОбъектов, МенеджерВременныхТаблиц, ДополнительныеПараметры = Неопределено) Экспорт
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ОИБ_ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	КонецЕсли;

	Запрос							= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц	= МенеджерВременныхТаблиц;

	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Ссылка
		|ПОМЕСТИТЬ #ИмяВременнойТаблицы
		|ГДЕ
		|	ЛОЖЬ";
	Иначе
		Если ТипЗнч(ПолныеИменаОбъектов) = Тип("Строка") Тогда
			ПолныеИменаОбъектовМассив = СтрРазделить(ПолныеИменаОбъектов,",",Ложь);
		ИначеЕсли ТипЗнч(ПолныеИменаОбъектов) = Тип("Массив") Тогда
			ПолныеИменаОбъектовМассив = ПолныеИменаОбъектов;
		Иначе
			ПолныеИменаОбъектовМассив = Новый Массив;
			ПолныеИменаОбъектовМассив.Добавить(ПолныеИменаОбъектов);
		КонецЕсли;

		МассивТекстовЗапросов = Новый Массив;

		ЕстьРегистры = Ложь;

		Для Каждого ОбрабатываемыйТип Из ПолныеИменаОбъектовМассив Цикл
			Если ТипЗнч(ОбрабатываемыйТип) = Тип("ОбъектМетаданных") Тогда
				МетаданныеОбъекта = ОбрабатываемыйТип;
				ПолноеИмяОбъекта  = ОбрабатываемыйТип.ПолноеИмя();
			Иначе
				МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ОбрабатываемыйТип);
				ПолноеИмяОбъекта  = ОбрабатываемыйТип;
			КонецЕсли;

			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);

			Если БазоваяПодсистемаСервер.ОН_ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта) Тогда
				Если МассивТекстовЗапросов.Количество() = 0 Тогда
					ТекстЗапроса =
					"ВЫБРАТЬ
					|	ТаблицаИзменений.Ссылка КАК Ссылка
					|ПОМЕСТИТЬ #ИмяВременнойТаблицыПервогоЗапроса
					|ИЗ
					|	#ТаблицаИзменений КАК ТаблицаИзменений
					|ГДЕ
					|	&УсловиеОтбораУзла";
				Иначе
					ТекстЗапроса =
					"ВЫБРАТЬ
					|	ТаблицаИзменений.Ссылка КАК Ссылка
					|ИЗ
					|	#ТаблицаИзменений КАК ТаблицаИзменений
					|ГДЕ
					|	&УсловиеОтбораУзла";
				КонецЕсли;
			ИначеЕсли БазоваяПодсистемаСервер.ОН_ЭтоРегистр(МетаданныеОбъекта) Тогда
				Если МассивТекстовЗапросов.Количество() = 0 Тогда
					ТекстЗапроса =
					"ВЫБРАТЬ
					|	ТаблицаИзменений.Регистратор КАК Ссылка
					|ПОМЕСТИТЬ #ИмяВременнойТаблицыПервогоЗапроса
					|ИЗ
					|	#ТаблицаИзменений КАК ТаблицаИзменений
					|ГДЕ
					|	&УсловиеОтбораУзла";
				Иначе
					ТекстЗапроса =
					"ВЫБРАТЬ
					|	ТаблицаИзменений.Регистратор КАК Ссылка
					|ИЗ
					|	#ТаблицаИзменений КАК ТаблицаИзменений
					|ГДЕ
					|	&УсловиеОтбораУзла";
				КонецЕсли;

				ЕстьРегистры = Истина;
			Иначе
				ТекстИсключения = "Для типа метаданных ""%МетаданныеОбъекта%"" не поддерживается проверка в функции ОбновлениеВерсииИБСервер.ОИБ_СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияСсылок";
				ТекстИсключения = СтрЗаменить(ТекстИсключения, "%МетаданныеОбъекта%", Строка(МетаданныеОбъекта));

				ВызватьИсключение ТекстИсключения;
			КонецЕсли;

			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаИзменений", ПолноеИмяОбъекта + ".Изменения");

			МассивТекстовЗапросов.Добавить(ТекстЗапроса);
		КонецЦикла;

		Соединитель = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|";

		ТекстЗапроса = СтрСоединить(МассивТекстовЗапросов, Соединитель);

		Если ЕстьРегистры И МассивТекстовЗапросов.Количество() > 1 Тогда
			ШаблонЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВложенныйЗапрос.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ #ИмяВременнойТаблицы
			|ИЗ
			|	#ТекстЗапроса КАК ВложенныйЗапрос
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка";
			ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "#ТекстЗапроса", "(" + ТекстЗапроса + ")");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ #ИмяВременнойТаблицыПервогоЗапроса", "");
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяВременнойТаблицыПервогоЗапроса", "#ИмяВременнойТаблицы");
		КонецЕсли;

		Если Очередь = Неопределено Тогда
			УсловиеОтбораУзла = "	ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы ";
		Иначе
			УсловиеОтбораУзла = "	ТаблицаИзменений.Узел В (&Узлы) ";
			Запрос.УстановитьПараметр("Узлы", ПланыОбмена.ОбновлениеИнформационнойБазы.УзлыМеньшейОчереди(Очередь));
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораУзла", УсловиеОтбораУзла);
	КонецЕсли;

	Если ПустаяСтрока(ДополнительныеПараметры.ИмяВременнойТаблицы) Тогда
		ИмяВременнойТаблицы =  "ВТЗаблокировано";
	Иначе
		ИмяВременнойТаблицы = ДополнительныеПараметры.ИмяВременнойТаблицы;
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяВременнойТаблицы", ИмяВременнойТаблицы);

	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();

	Результат = Новый Структура("ЕстьЗаписиВоВременнойТаблице, ИмяВременнойТаблицы", Ложь, "");
	Результат.ИмяВременнойТаблицы = ИмяВременнойТаблицы;
	Результат.ЕстьЗаписиВоВременнойТаблице = РезультатЗапроса.Выгрузить()[0].Количество <> 0;

	Возврат Результат;
КонецФункции

Функция ОИБ_ЭтоПримитивныйТип(ПроверяемыйТип)
	Если ПроверяемыйТип = Тип("Неопределено")
		Или ПроверяемыйТип = Тип("Булево")
		Или ПроверяемыйТип = Тип("Строка")
		Или ПроверяемыйТип = Тип("Число")
		Или ПроверяемыйТип = Тип("Дата")
		Или ПроверяемыйТип = Тип("УникальныйИдентификатор") Тогда

		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ОИБ_ИмяСоответствуетТребованиямИменованияСвойств(Имя)
	Цифры = "1234567890";
	Если Имя = "" Или СтрНайти(Цифры, Лев(Имя, 1)) > 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	НедопустимыеСимволы	= """/\[]:;|=-?*<>,.()+№@!%^&~" + " ";
	НовоеИмя			= СтрСоединить(СтрРазделить(Имя, НедопустимыеСимволы, Истина));

	Возврат (НовоеИмя = Имя);
КонецФункции

Функция ОИБ_ВыбратьДанныеДляОбработки(Запрос, ПараметрыПостроения)
	Если ПараметрыПостроения.ПостраничнаяВыборка Тогда
		Возврат ОИБ_ВыбратьДанныеПостранично(Запрос, ПараметрыПостроения);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСтраницам", "ИСТИНА");

		Возврат Запрос.Выполнить().Выбрать();
	КонецЕсли;
КонецФункции

Функция ОИБ_ВыбратьДанныеПостранично(Запрос, ПараметрыПостроения)
	ПоляВыборки					= ПараметрыПостроения.ПоляВыборки;
	Параметры					= ПараметрыПостроения.ДополнительныеПараметры;
	ТаблицаИзменений			= ПараметрыПостроения.ИмяТаблицы;
	Направления					= ПараметрыПостроения.Направления;
	ПоследняяВыбраннаяЗапись	= Параметры.ПоследняяВыбраннаяЗапись;
	ПерваяЗапись				= Параметры.ПерваяЗапись;
	ПоследняяЗапись				= Параметры.ПоследняяЗапись;
	ВыбратьПервые				= ПоследняяВыбраннаяЗапись = Неопределено
	              И ПерваяЗапись = Неопределено
	              И ПоследняяЗапись = Неопределено;

	Если ВыбратьПервые Тогда
		ОИБ_ИзменитьМаксимумВыборки(Запрос.Текст, 10000, Параметры.МаксимумВыборки);
		Запрос.Текст	= СтрЗаменить(Запрос.Текст, "&УсловиеПоСтраницам", "ИСТИНА");
		Результат		= Запрос.Выполнить().Выгрузить();
	Иначе
		ВыбратьДиапазон		= ПерваяЗапись <> Неопределено И ПоследняяЗапись <> Неопределено;
		БазовыйТекстЗапроса	= Запрос.Текст;

		Если ВыбратьДиапазон Тогда
			Условия = ОИБ_УсловияДляДиапазонаСтраницы(ПоляВыборки, Параметры, Направления);
		Иначе
			Условия = ОИБ_УсловияДляСледующейСтраницы(ПоляВыборки, Параметры, Направления);
		КонецЕсли;

		Если Параметры.ОптимизироватьВыборкуПоСтраницам Тогда
			Результат							= Неопределено;
			ИндексПоследнегоУсловия				= Условия.Количество() - 1;
			ОтложитьУничтожениеВременныхТаблиц	= Условия.Количество() > 1;

			Если ОтложитьУничтожениеВременныхТаблиц Тогда
				ТекстЗапросаУничтоженияВременныхТаблиц = ОИБ_ВырезатьУничтожениеВременныхТаблиц(БазовыйТекстЗапроса);
			КонецЕсли;

			Для Индекс = 0 По ИндексПоследнегоУсловия Цикл
				Если Результат = Неопределено Тогда
					Количество = Параметры.МаксимумВыборки;
				Иначе
					Количество = Параметры.МаксимумВыборки - Результат.Количество();
				КонецЕсли;

				Запрос.Текст = Строка(БазовыйТекстЗапроса);
				ОИБ_ИзменитьМаксимумВыборки(Запрос.Текст, 10000, Количество);
				ОИБ_УстановитьУсловияВыборкиПоСтраницам(Запрос, Условия, ТаблицаИзменений, Параметры, Истина, Индекс);

				Если ОтложитьУничтожениеВременныхТаблиц И Индекс = ИндексПоследнегоУсловия Тогда
					Запрос.Текст = Запрос.Текст + ТекстЗапросаУничтоженияВременныхТаблиц;
				КонецЕсли;

				Выгрузка = Запрос.Выполнить().Выгрузить();

				Если Результат = Неопределено Тогда
					Результат = Выгрузка;
				Иначе
					Для Каждого СтрокаВыгрузки Из Выгрузка Цикл
						СтрокаРезультата = Результат.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаВыгрузки);
					КонецЦикла;
				КонецЕсли;

				Если Результат.Количество() = Параметры.МаксимумВыборки Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ОИБ_ИзменитьМаксимумВыборки(Запрос.Текст, 10000, Параметры.МаксимумВыборки);
			ОИБ_УстановитьУсловияВыборкиПоСтраницам(Запрос, Условия, ТаблицаИзменений, Параметры, Истина);
			Результат = Запрос.Выполнить().Выгрузить();
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Процедура ОИБ_УстановитьУсловияВыборкиПоСтраницам(Запрос, Условия, Таблица, Параметры, Первые, НомерУсловия = Неопределено)
	ПерваяЗапись	= Параметры.ПерваяЗапись;
	ПоследняяЗапись	= Параметры.ПоследняяЗапись;
	ВыбратьДиапазон	= ПерваяЗапись <> Неопределено
	                И ПоследняяЗапись <> Неопределено;

	Если Не ВыбратьДиапазон Тогда
		ПерваяЗапись = Параметры.ПоследняяВыбраннаяЗапись;
	КонецЕсли;

	Колонки					= Условия.Колонки;
	КоличествоКолонок		= Колонки.Количество();
	УсловияИ				= Новый Массив;
	УсловияИли				= Новый Массив;
	ЕстьУсловияИли			= (НомерУсловия = Неопределено);
	ЕстьТаблица				= Не ПустаяСтрока(Таблица);
	ШаблонУсловияИ			= ?(ЕстьТаблица, Таблица + ".%1 %2 &%3", "%1 %2 &%3");
	ШаблонУсловияИли		= "(%1)";
	РазделительУсловийИ		=
		"
		|	И ";
	РазделительУсловийИли	=
		"
		|	) ИЛИ (
		|	";

	Если ЕстьУсловияИли Тогда
		ИндексНачала	= 0;
		ИндексОкончания	= Условия.Количество() - 1;
	Иначе
		ИндексНачала	= НомерУсловия;
		ИндексОкончания	= НомерУсловия;
	КонецЕсли;

	Для ИндексСтроки = ИндексНачала По ИндексОкончания Цикл
		УсловияИ.Очистить();

		Для ИндексКолонки = 0 По КоличествоКолонок - 1 Цикл
			Оператор	= Условия[ИндексСтроки][ИндексКолонки];
			ИндексПоля	= ?(ВыбратьДиапазон, Цел(ИндексКолонки / 2), ИндексКолонки) + 2;

			Если Не ПустаяСтрока(Оператор) Тогда
				Колонка			= Колонки[ИндексКолонки];
				ИмяПоляПолное	= Колонка.Заголовок;
				ИмяПараметра	= Колонка.Имя + "Значение";
				ИмяПоля			= ОИБ_ИмяКолонкиДляЗапроса(ИмяПоляПолное);
				Условие			= СтрШаблон(ШаблонУсловияИ, ИмяПоля, Оператор, ИмяПараметра);
				УсловияИ.Добавить(Условие);

				Если Прав(ИмяПоляПолное, 1) = "_" Тогда
					ЗначениеПараметра = ПоследняяЗапись[ИндексПоля].Значение;
				Иначе
					ЗначениеПараметра = ПерваяЗапись[ИндексПоля].Значение;
				КонецЕсли;

				Запрос.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра);
			КонецЕсли;
		КонецЦикла;

		ТекстУсловий = СтрСоединить(УсловияИ, РазделительУсловийИ);

		Если ЕстьУсловияИли Тогда
			УсловияИли.Добавить(ТекстУсловий);
		КонецЕсли;
	КонецЦикла;

	Если ЕстьУсловияИли Тогда
		ТекстУсловийИли	= СтрСоединить(УсловияИли, РазделительУсловийИли);
		ТекстУсловий	= СтрШаблон(ШаблонУсловияИли, ТекстУсловийИли);
	КонецЕсли;

	Если Не Первые Тогда
		ТекстУсловий = "	И " + ТекстУсловий;
	КонецЕсли;

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСтраницам", ТекстУсловий);
КонецПроцедуры

Функция ОИБ_ВырезатьУничтожениеВременныхТаблиц(ТекстЗапроса)
	ЗапросыУничтожения	= Новый Массив;
	ПозицияУничтожить	= СтрНайти(ТекстЗапроса, "УНИЧТОЖИТЬ");

	Пока ПозицияУничтожить > 0 Цикл
		ПозицияРазделителя = СтрНайти(ТекстЗапроса, ";",, ПозицияУничтожить);

		Если ПозицияРазделителя > 0 Тогда
			ЗапросУничтожения = Сред(ТекстЗапроса, ПозицияУничтожить, ПозицияРазделителя - ПозицияУничтожить + 1);
		Иначе
			ЗапросУничтожения = Сред(ТекстЗапроса, ПозицияУничтожить);
		КонецЕсли;

		Если ЗапросыУничтожения.Количество() = 0 Тогда
			ЗапросыУничтожения.Добавить(Символы.ПС);
		КонецЕсли;

		ЗапросыУничтожения.Добавить(ЗапросУничтожения);
		ТекстЗапроса		= СтрЗаменить(ТекстЗапроса, ЗапросУничтожения, "");
		ПозицияУничтожить	= СтрНайти(ТекстЗапроса, "УНИЧТОЖИТЬ");
	КонецЦикла;

	Возврат СтрСоединить(ЗапросыУничтожения, Символы.ПС);
КонецФункции

Функция ОИБ_УсловияДляСледующейСтраницы(ПоляВыборки, Параметры, Направления)
	ВсеУсловия		= ОИБ_НовыеУсловияПостраничнойВыборки(ПоляВыборки);
	КоличествоПолей	= ПоляВыборки.Количество();

	Пока КоличествоПолей > 0 Цикл
		НовыеУсловия = ВсеУсловия.Добавить();

		Для НомерУсловия = 1 По КоличествоПолей Цикл
			ИмяКолонкиПоля = ПоляВыборки[НомерУсловия - 1];

			Если НомерУсловия < КоличествоПолей Тогда
				Оператор = "=";
			Иначе
				Оператор = ?(ОИБ_УпорядочиваниеПоВозрастанию(Направления[НомерУсловия - 1]), ">", "<");
			КонецЕсли;

			НовыеУсловия[ОИБ_ИмяКолонкиИзПоляВыборки(ИмяКолонкиПоля)] = Оператор;
		КонецЦикла;

		КоличествоПолей = КоличествоПолей - 1;
	КонецЦикла;

	Возврат ВсеУсловия;
КонецФункции

Функция ОИБ_УсловияДляДиапазонаСтраницы(ПоляВыборки, Параметры, Направления)
	ВсеУсловия		= ОИБ_НовыеУсловияПостраничнойВыборки(ПоляВыборки, Истина);
	ПерваяЗапись	= Параметры.ПерваяЗапись;
	ПоследняяЗапись	= Параметры.ПоследняяЗапись;
	КоличествоПолей	= ПоляВыборки.Количество();
	ВсегоПолей		= ПоляВыборки.Количество();
	ПозицияВставки	= 0;

	Пока КоличествоПолей > 0 Цикл
		ТекущиеПоляРавны = ОИБ_ЗаписиРавны(ПерваяЗапись, ПоследняяЗапись, КоличествоПолей);

		Если ТекущиеПоляРавны И КоличествоПолей <> ВсегоПолей Тогда
			Прервать;
		КонецЕсли;

		ПервыеУсловия		= ВсеУсловия.Вставить(ПозицияВставки);
		ПозицияВставки		= ПозицияВставки + 1;
		ПредыдущиеПоляРавны	= ОИБ_ЗаписиРавны(ПерваяЗапись, ПоследняяЗапись, КоличествоПолей - 1);

		Если Не ПредыдущиеПоляРавны Тогда
			ПоследниеУсловия = ВсеУсловия.Вставить(ПозицияВставки);
		КонецЕсли;

		Для НомерУсловия = 1 По КоличествоПолей Цикл
			ИмяКолонкиПоля				= ОИБ_ИмяКолонкиИзПоляВыборки(ПоляВыборки[НомерУсловия - 1]);
			ИмяКолонкиПоляПоДиапазону	= ИмяКолонкиПоля + "_";

			Если НомерУсловия < КоличествоПолей Или ТекущиеПоляРавны И КоличествоПолей = ВсегоПолей Тогда
				ОператорПервый		= "=";
				ОператорПоследний	= "=";
			Иначе
				Направление = Направления[НомерУсловия - 1];

				Если КоличествоПолей = ВсегоПолей Тогда
					ОператорПервый		= ?(ОИБ_УпорядочиваниеПоВозрастанию(Направление), ">=", "<=");
					ОператорПоследний	= ?(ОИБ_УпорядочиваниеПоВозрастанию(Направление), "<=", ">=");
				Иначе
					ОператорПервый		= ?(ОИБ_УпорядочиваниеПоВозрастанию(Направление), ">", "<");
					ОператорПоследний	= ?(ОИБ_УпорядочиваниеПоВозрастанию(Направление), "<", ">");
				КонецЕсли;

				// Ограничение по диапазону
				Если ПредыдущиеПоляРавны Тогда
					ПервыеУсловия[ИмяКолонкиПоляПоДиапазону] = ОператорПоследний;
				КонецЕсли;
			КонецЕсли;

			// Выборка по первой записи
			ПервыеУсловия[ИмяКолонкиПоля] = ОператорПервый;

			// Выборка по последней записи
			Если Не ПредыдущиеПоляРавны Тогда
				ПоследниеУсловия[ИмяКолонкиПоляПоДиапазону] = ОператорПоследний;
			КонецЕсли;
		КонецЦикла;

		КоличествоПолей = КоличествоПолей - 1;
	КонецЦикла;

	Возврат ВсеУсловия;
КонецФункции

Функция ОИБ_НовыеУсловияПостраничнойВыборки(ПоляВыборки, ДляДиапазона = Ложь)
	Условия = Новый ТаблицаЗначений;
	Колонки = Условия.Колонки;

	Для Каждого ПолеВыборки Из ПоляВыборки Цикл
		Имя = ОИБ_ИмяКолонкиИзПоляВыборки(ПолеВыборки);
		Колонки.Добавить(Имя,, ПолеВыборки);

		Если ДляДиапазона Тогда
			Колонки.Добавить(Имя + "_",, ПолеВыборки);
		КонецЕсли;
	КонецЦикла;

	Возврат Условия;
КонецФункции

Функция ОИБ_ИмяКолонкиИзПоляВыборки(Имя)
	ЗаменяемыеСимволы	= ".,() ";
	ИмяКолонки			= Строка(Имя);

	Для Индекс = 1 По СтрДлина(ЗаменяемыеСимволы) Цикл
		Символ		= Сред(ЗаменяемыеСимволы, Индекс, 1);
		ИмяКолонки	= СтрЗаменить(ИмяКолонки, Символ, "_");
	КонецЦикла;

	Возврат ИмяКолонки;
КонецФункции

Функция ОИБ_УпорядочиваниеПоВозрастанию(Направление)
	Если Направление = Неопределено Тогда
		Возврат Истина;
	Иначе
		ПорядокВРег = ВРег(Направление);

		// НеПереводить: "УБЫВ".
		Возврат НЕ (ПорядокВРег = "УБЫВ" Или ПорядокВРег = "DESC");
	КонецЕсли;
КонецФункции


Функция ОИБ_ЗаписиРавны(ПерваяЗапись, ПоследняяЗапись, КоличествоПолей)
	Для Индекс = 2 По КоличествоПолей + 2 - 1 Цикл
		Если ПерваяЗапись[Индекс].Значение <> ПоследняяЗапись[Индекс].Значение Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;
КонецФункции

Функция ОИБ_ИмяКолонкиДляЗапроса(ИмяПоля)
	Если Прав(ИмяПоля, 1) = "_" Тогда
		Возврат Лев(ИмяПоля, СтрДлина(ИмяПоля) - 1);
	Иначе
		Возврат ИмяПоля;
	КонецЕсли;
КонецФункции

Функция ОИБ_ВыбратьРегистраторыРегистраДляОбработки(Очередь, ПолноеИмяДокумента, ПолноеИмяРегистра, ДополнительныеПараметры = Неопределено) Экспорт
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ОИБ_ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	КонецЕсли;

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОИБ_ПроверитьПараметрыВыборки(ДополнительныеПараметры);
	ПараметрыПостроения = ОИБ_ПараметрыПостроенияВыборки(ДополнительныеПараметры);

	Если ПолноеИмяДокумента = Неопределено Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 10000
		|	&ВыбираемыеПоля
		|ИЗ
		|	#ТаблицаРегистраИзменения КАК ТаблицаРегистраИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ #ТаблицаДвиженийРегистра КАК ТаблицаРегистра
		|		ПО ТаблицаРегистраИзменения.Регистратор = ТаблицаРегистра.Регистратор
		|ГДЕ
		|	ТаблицаРегистраИзменения.Узел = &ТекущаяОчередь
		|	И НЕ ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			ВТЗаблокированоРегистратор КАК ВТЗаблокированоРегистратор
		|		ГДЕ
		|			ТаблицаРегистраИзменения.Регистратор = ВТЗаблокированоРегистратор.Регистратор)
		|	И &УсловиеПоДопИсточникамРегистрам
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаРегистраИзменения.Регистратор";

		Если ПараметрыПостроения.ПостраничнаяВыборка Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|
				|ИМЕЮЩИЕ
				|	&УсловиеПоСтраницам"
		КонецЕсли;

		ТекстЗапроса = ТекстЗапроса + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	&ПорядокВыборки";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаДвиженийРегистра", ПолноеИмяРегистра);
		ОИБ_УстановитьПоляУпорядочиванияРегистра(ПараметрыПостроения);
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 10000
		|	&ВыбираемыеПоля
		|ИЗ
		|	#ТаблицаРегистраИзменения КАК ТаблицаРегистраИзменения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ПолноеИмяДокумента КАК ТаблицаДокумента
		|		ПО ТаблицаРегистраИзменения.Регистратор = ТаблицаДокумента.Ссылка
		|
		|ГДЕ
		|	ТаблицаРегистраИзменения.Узел = &ТекущаяОчередь
		|	И НЕ ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			ВТЗаблокированоРегистратор КАК ВТЗаблокированоРегистратор
		|		ГДЕ
		|			ТаблицаРегистраИзменения.Регистратор = ВТЗаблокированоРегистратор.Регистратор)
		|	И НЕ ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			ВТЗаблокированоСсылка КАК ВТЗаблокированоСсылка
		|		ГДЕ
		|			ТаблицаРегистраИзменения.Регистратор = ВТЗаблокированоСсылка.Ссылка)
		|	И &УсловиеПоДопИсточникамСсылкам
		|	И &УсловиеПоДопИсточникамРегистрам
		|	И &УсловиеПоСтраницам
		|
		|УПОРЯДОЧИТЬ ПО
		|	&ПорядокВыборки";
		ДополнительныеПараметрыСозданияВТ						= ОИБ_ДополнительныеПараметрыВыборкиДанныхДляОбработки();
		ДополнительныеПараметрыСозданияВТ.ИмяВременнойТаблицы	= "ВТЗаблокированоСсылка";
		ОИБ_СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяДокумента, МенеджерВременныхТаблиц, ДополнительныеПараметрыСозданияВТ);
		ОИБ_УстановитьПоляУпорядочиванияРегистраПоДокументу(ПараметрыПостроения);
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаРегистраИзменения", ПолноеИмяРегистра + ".Изменения");

	ДополнительныеПараметрыСозданияВТ						= ОИБ_ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметрыСозданияВТ.ИмяВременнойТаблицы	= "ВТЗаблокированоРегистратор";
	ИмяИзмеренияДляОтбора									= ДополнительныеПараметры.ИмяИзмеренияДляОтбора;

	Если ИмяИзмеренияДляОтбора <> "Регистратор" Тогда
		ДополнительныеПараметрыСозданияВТ.ИмяИзмеренияДляОтбора	= ИмяИзмеренияДляОтбора;
		Измерение												= СтрШаблон(".%1", ИмяИзмеренияДляОтбора);
		ТекстЗапроса											= СтрЗаменить(ТекстЗапроса, ".Регистратор", Измерение);
	КонецЕсли;

	ОИБ_СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяРегистра, МенеджерВременныхТаблиц, ДополнительныеПараметрыСозданияВТ);
	ОИБ_УстановитьРазмерВыборки(ТекстЗапроса, ДополнительныеПараметры);
	ОИБ_ДобавитьПроверкуБлокировкиДополнительныхИсточников(Очередь, ТекстЗапроса, ПолноеИмяДокумента, ПолноеИмяРегистра, МенеджерВременныхТаблиц, Ложь, ДополнительныеПараметры);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПолноеИмяДокумента", ПолноеИмяДокумента);

	Запрос							= Новый Запрос;
	Запрос.Текст					= ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц	= МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекущаяОчередь", ПланыОбмена.ОбновлениеИнформационнойБазы.УзелПоОчереди(Очередь));

	ОИБ_УстановитьПоляПоСтраницам(Запрос, ПараметрыПостроения);
	ОИБ_УстановитьПорядокПоСтраницам(Запрос, ПараметрыПостроения);

	Возврат ОИБ_ВыбратьДанныеДляОбработки(Запрос, ПараметрыПостроения);
КонецФункции

Процедура ОИБ_УстановитьПоляУпорядочиванияРегистраПоДокументу(ПараметрыПостроения)
	ПоляВыборки			= ПараметрыПостроения.ПоляВыборки;
	Псевдонимы			= ПараметрыПостроения.Псевдонимы;
	ПоляУпорядочивания	= ПараметрыПостроения.ПоляУпорядочивания;
	ПоляУпорядочивания.Добавить("ТаблицаДокумента.Дата");
	ИмяИзмеренияДляОтбора	= ПараметрыПостроения.ДополнительныеПараметры.ИмяИзмеренияДляОтбора;
	ПолеРегистратора		= СтрШаблон("ТаблицаРегистраИзменения.%1", ИмяИзмеренияДляОтбора);

	Если ПараметрыПостроения.ПостраничнаяВыборка Тогда
		ПоляВыборки.Добавить("ТаблицаДокумента.Дата");
		Псевдонимы.Добавить("Дата");
		ПоляУпорядочивания.Добавить(ПолеРегистратора);
	КонецЕсли;

	ПоляВыборки.Добавить(ПолеРегистратора);
	Псевдонимы.Добавить(ИмяИзмеренияДляОтбора);
КонецПроцедуры

Процедура ОИБ_УстановитьПоляУпорядочиванияСсылок(ПараметрыПостроения, ЭтоДокумент)
	ПоляВыборки			= ПараметрыПостроения.ПоляВыборки;
	ПоляУпорядочивания	= ПараметрыПостроения.ПоляУпорядочивания;
	ПостраничнаяВыборка	= ПараметрыПостроения.ПостраничнаяВыборка;

	Если ЭтоДокумент Тогда
		Если ПостраничнаяВыборка Тогда
			ПоляВыборки.Добавить("ТаблицаОбъекта.Дата");
		КонецЕсли;

		ПоляУпорядочивания.Добавить("ТаблицаОбъекта.Дата");
	КонецЕсли;

	ПоляВыборки.Добавить("ТаблицаИзменений.Ссылка");

	Если ПостраничнаяВыборка Тогда
		ПоляУпорядочивания.Добавить("ТаблицаИзменений.Ссылка");
	КонецЕсли;
КонецПроцедуры

Процедура ОИБ_УстановитьПоляУпорядочиванияРегистра(ПараметрыПостроения)
	ПоляВыборки			= ПараметрыПостроения.ПоляВыборки;
	Псевдонимы			= ПараметрыПостроения.Псевдонимы;
	ПоляУпорядочивания	= ПараметрыПостроения.ПоляУпорядочивания;
	ИмяИзмеренияДляОтбора	= ПараметрыПостроения.ДополнительныеПараметры.ИмяИзмеренияДляОтбора;
	ПолеРегистратора		= СтрШаблон("ТаблицаРегистраИзменения.%1", ИмяИзмеренияДляОтбора);

	ПоляВыборки.Добавить(ПолеРегистратора);
	Псевдонимы.Добавить(ИмяИзмеренияДляОтбора);

	Если ПараметрыПостроения.ПостраничнаяВыборка Тогда
		ПоляУпорядочивания.Добавить(ПолеРегистратора);
	Иначе
		Если ИмяИзмеренияДляОтбора = "Регистратор" Тогда
			ПоляВыборки.Добавить("МАКСИМУМ(ЕСТЬNULL(ТаблицаРегистра.Период, ДАТАВРЕМЯ(3000, 1, 1)))");
			Псевдонимы.Добавить("Период");
			ПоляУпорядочивания.Добавить("МАКСИМУМ(ЕСТЬNULL(ТаблицаРегистра.Период, ДАТАВРЕМЯ(3000, 1, 1)))");
		Иначе
			ПолеДаты = СтрШаблон("%1.Дата", ПолеРегистратора);
			ПоляВыборки.Добавить(ПолеДаты);
			Псевдонимы.Добавить("Период");
			ПоляУпорядочивания.Добавить(ПолеДаты);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОИБ_ДобавитьПроверкуБлокировкиДополнительныхИсточников(Очередь, ТекстЗапроса, ПолноеИмяОбъекта, ПолноеИмяРегистра, МенеджерВременныхТаблиц, ЭтоСозданиеВременнойТаблицы, ДополнительныеПараметры)
	Если ДополнительныеПараметры.ДополнительныеИсточникиДанных.Количество() = 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДопИсточникамСсылкам",						"ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДопИсточникамРегистрам",					"ИСТИНА");
	Иначе
		ДополнительныеИсточникиСсылки	= Новый Массив;
		ДополнительныеИсточникиРегистры	= Новый Массив;

		Для Каждого КлючЗначение Из ДополнительныеПараметры.ДополнительныеИсточникиДанных Цикл
			ИсточникДанных = КлючЗначение.Ключ;

			Если БазоваяПодсистемаСервер.СП_ЭтоТаблицаРегистра(ИсточникДанных) И СтрНайти(ИсточникДанных,".") <> 0 Тогда
				ДополнительныеИсточникиРегистры.Добавить(ИсточникДанных);
			Иначе
				ДополнительныеИсточникиСсылки.Добавить(ИсточникДанных);
			КонецЕсли;

		КонецЦикла;

		#Область ДополнительныеИсточникиСсылки

		Если ДополнительныеИсточникиСсылки.Количество() > 0 Тогда
			Если ПолноеИмяОбъекта = Неопределено Тогда
				ТекстИсключения = "Ошибка вызова функции %ИмяФункции%: не передано имя документа, но переданы дополнительные источники данных.";
				ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяФункции%", "ОбновлениеВерсииИБСервер.ОИБ_ДобавитьПроверкуБлокировкиДополнительныхИсточников");

				ВызватьИсключение ТекстИсключения;
			КонецЕсли;

			МетаданныеДокумента = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);

			ВременныеТаблицыЗаблокированныхДопИсточников	= Новый Соответствие;
			РеквизитыШапки									= Новый Соответствие;
			РеквизитыТЧ										= Новый Соответствие;

			Для Каждого ИсточникДанных Из ДополнительныеИсточникиСсылки Цикл
				СоставИсточникаДанных	= ОИБ_СоставСсылочногоИсточникаДанных(ИсточникДанных);
				ИмяТЧ					= СоставИсточникаДанных.ТабличнаяЧасть;
				ИмяРеквизита			= СоставИсточникаДанных.Реквизит;

				Если ЗначениеЗаполнено(ИмяТЧ) Тогда
					ТипыИсточника = МетаданныеДокумента.ТабличныеЧасти[ИмяТЧ].Реквизиты[ИмяРеквизита].Тип.Типы();
				Иначе
					ТипыИсточника = МетаданныеДокумента.Реквизиты[ИмяРеквизита].Тип.Типы();
				КонецЕсли;

				Для Каждого ТипИсточника Из ТипыИсточника Цикл
					Если ОИБ_ЭтоПримитивныйТип(ТипИсточника) Или Перечисления.ТипВсеСсылки().СодержитТип(ТипИсточника) Тогда
						Продолжить;
					КонецЕсли;

					МетаданныеИсточника = Метаданные.НайтиПоТипу(ТипИсточника);

					Если ЗначениеЗаполнено(ИмяТЧ) Тогда
						МетаданныеРеквизитов	= ОИБ_ЗначениеПоКлючу(РеквизитыТЧ, ИмяТЧ);
						Реквизиты				= ОИБ_ЗначениеПоКлючу(МетаданныеРеквизитов, МетаданныеИсточника);
						Реквизиты[ИмяРеквизита]	= Истина;
					Иначе
						Реквизиты				= ОИБ_ЗначениеПоКлючу(РеквизитыШапки, МетаданныеИсточника);
						Реквизиты[ИмяРеквизита]	= Истина;
					КонецЕсли;

					ИмяВТЗаблокированногоДопИсточника = ВременныеТаблицыЗаблокированныхДопИсточников[МетаданныеИсточника];

					Если ИмяВТЗаблокированногоДопИсточника = Неопределено Тогда
						ПолноеИмяИсточника													= МетаданныеИсточника.ПолноеИмя();
						ИмяВТЗаблокированногоДопИсточника									= "ВТЗаблокировано" + СтрЗаменить(ПолноеИмяИсточника,".","_");
						ВременныеТаблицыЗаблокированныхДопИсточников[МетаданныеИсточника]	= ИмяВТЗаблокированногоДопИсточника;

						ДополнительныеПараметрыСозданияВТ						= ОИБ_ДополнительныеПараметрыВыборкиДанныхДляОбработки();
						ДополнительныеПараметрыСозданияВТ.ИмяВременнойТаблицы	= ИмяВТЗаблокированногоДопИсточника;
						ОИБ_СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяИсточника, МенеджерВременныхТаблиц, ДополнительныеПараметрыСозданияВТ)
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;

			УсловияПоДопИсточникамСсылкам				= Новый Массив;
			РазделительУсловийПоДопИсточникамСсылкам	=
				"
				|	И ";

			Если РеквизитыТЧ.Количество() > 0 Тогда
				Запрос							= Новый Запрос;
				Запрос.Текст					= ОИБ_ТекстЗапросаВТЗаблокированныхПоТЧ(РеквизитыТЧ, ПолноеИмяОбъекта, ПолноеИмяРегистра, ВременныеТаблицыЗаблокированныхДопИсточников);;
				Запрос.МенеджерВременныхТаблиц	= МенеджерВременныхТаблиц;
				Запрос.Выполнить();

				УсловияПоДопИсточникамСсылкам.Добавить(ОИБ_ТекстУсловияЗаблокированныхПоТЧ(ПолноеИмяОбъекта, ПолноеИмяРегистра));
				ВременныеТаблицыЗаблокированныхДопИсточников["ЗаблокированныеПоТЧ"] = "ЗаблокированныеПоТЧ";
			КонецЕсли;

			Если РеквизитыШапки.Количество() > 0 Тогда
				УсловияЗаблокированныхПоШапке = ОИБ_ТекстУсловияЗаблокированныхПоШапке(РеквизитыШапки, ПолноеИмяРегистра, ВременныеТаблицыЗаблокированныхДопИсточников);
				УсловияПоДопИсточникамСсылкам.Добавить(УсловияЗаблокированныхПоШапке);
			КонецЕсли;

			УсловиеПоДопИсточникамСсылкам = СтрСоединить(УсловияПоДопИсточникамСсылкам, РазделительУсловийПоДопИсточникамСсылкам);

			ТекстыЗапроса = Новый Массив;
			ТекстыЗапроса.Добавить(ТекстЗапроса);
			ОИБ_ДобавитьЗапросыУничтоженияВТ(ТекстыЗапроса, ВременныеТаблицыЗаблокированныхДопИсточников);
			ТекстЗапроса = ОИБ_ОбъединитьЗапросыВПакет(ТекстыЗапроса);

			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДопИсточникамСсылкам",					УсловиеПоДопИсточникамСсылкам);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПолноеИмяДокумента",								ПолноеИмяОбъекта);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДопИсточникамСсылкам",					"ИСТИНА");
		КонецЕсли;
		#КонецОбласти

		#Область ДополнительныеИсточникиРегистры

		Если ДополнительныеИсточникиРегистры.Количество() > 0 Тогда
			УсловиеПоДопИсточникамРегистрам					= "ИСТИНА";

			ВременныеТаблицыЗаблокированныхДопИсточников = Новый Соответствие;

			Для Каждого ИсточникДанных Из ДополнительныеИсточникиРегистры Цикл
				МетаданныеИсточника = Метаданные.НайтиПоПолномуИмени(ИсточникДанных);

				Если Метаданные.РегистрыСведений.Содержит(МетаданныеИсточника)
					И МетаданныеИсточника.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда

					ТекстИсключения = "Регистр %ИсточникДанных% независимый. Поддерживается проверка только по регистрам, подчиненным регистраторам.";
					ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИсточникДанных%",ИсточникДанных);

					ВызватьИсключение ТекстИсключения;
				КонецЕсли;

				ИмяВТЗаблокированногоДопИсточника = ВременныеТаблицыЗаблокированныхДопИсточников.Получить(МетаданныеИсточника);

				Если ИмяВТЗаблокированногоДопИсточника = Неопределено Тогда
					ИмяВТЗаблокированногоДопИсточника = "ВТЗаблокировано" + СтрЗаменить(ИсточникДанных,".","_");

					ДополнительныеПараметрыСозданияВТ						= ОИБ_ДополнительныеПараметрыВыборкиДанныхДляОбработки();
					ДополнительныеПараметрыСозданияВТ.ИмяВременнойТаблицы	= ИмяВТЗаблокированногоДопИсточника;
					ОИБ_СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ИсточникДанных, МенеджерВременныхТаблиц, ДополнительныеПараметрыСозданияВТ);

					ВременныеТаблицыЗаблокированныхДопИсточников.Вставить(МетаданныеИсточника, ИмяВТЗаблокированногоДопИсточника);
				КонецЕсли;
			КонецЦикла;

			ТекстыЗапроса = Новый Массив;
			ТекстыЗапроса.Добавить(ТекстЗапроса);
			ОИБ_ДобавитьЗапросыУничтоженияВТ(ТекстыЗапроса, ВременныеТаблицыЗаблокированныхДопИсточников);
			ТекстЗапроса = ОИБ_ОбъединитьЗапросыВПакет(ТекстыЗапроса);

			УсловиеПоДопИсточникамРегистрам = ОИБ_ТекстУсловияЗаблокированныхПоРегистрам(ПолноеИмяРегистра, ВременныеТаблицыЗаблокированныхДопИсточников);

			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДопИсточникамРегистрам", УсловиеПоДопИсточникамРегистрам);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДопИсточникамРегистрам", "ИСТИНА");
		КонецЕсли;
		#КонецОбласти
	КонецЕсли;
КонецПроцедуры

Функция ОИБ_ВыбратьСсылкиДляОбработки(Очередь, ПолноеИмяОбъекта, ДополнительныеПараметры = Неопределено) Экспорт
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ОИБ_ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	КонецЕсли;

	ИмяОбъекта			= СтрРазделить(ПолноеИмяОбъекта,".",Ложь)[1];
	МетаданныеОбъекта	= Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	ЭтоДокумент			= Метаданные.Документы.Содержит(МетаданныеОбъекта) Или Метаданные.Задачи.Содержит(МетаданныеОбъекта);

	ОИБ_ПроверитьПараметрыВыборки(ДополнительныеПараметры);
	ПараметрыПостроения = ОИБ_ПараметрыПостроенияВыборки(ДополнительныеПараметры);

	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 10000
	|	&ВыбираемыеПоля
	|ИЗ
	|	#ТаблицаОбъектаИзменения КАК ТаблицаИзменений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаОбъекта КАК ТаблицаОбъекта
	|		ПО ТаблицаИзменений.Ссылка = ТаблицаОбъекта.Ссылка
	|ГДЕ
	|	ТаблицаИзменений.Узел = &ТекущаяОчередь
	|	И НЕ ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			#ВТЗаблокированоСсылка КАК ВТЗаблокированоСсылка
	|		ГДЕ
	|			ТаблицаИзменений.Ссылка = ВТЗаблокированоСсылка.Ссылка)
	|	И &УсловиеПоДопИсточникамСсылкам
	|	И &УсловиеПоДопИсточникамРегистрам
	|	И &УсловиеПоСтраницам";
	Если ЭтоДокумент Или ПараметрыПостроения.ПостраничнаяВыборка Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	&ПорядокВыборки";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|УНИЧТОЖИТЬ
	|	#ВТЗаблокированоСсылка";
	ОИБ_УстановитьПоляУпорядочиванияСсылок(ПараметрыПостроения, ЭтоДокумент);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВТЗаблокированоСсылка","ВТЗаблокировано" + ИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#ТаблицаОбъектаИзменения", ПолноеИмяОбъекта + ".Изменения");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#ТаблицаОбъекта", ПолноеИмяОбъекта);
	ОИБ_УстановитьРазмерВыборки(ТекстЗапроса, ДополнительныеПараметры);
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ОИБ_СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);

	ОИБ_ДобавитьПроверкуБлокировкиДополнительныхИсточников(Очередь, ТекстЗапроса, ПолноеИмяОбъекта, Неопределено, МенеджерВременныхТаблиц, Ложь, ДополнительныеПараметры);

	Запрос							= Новый Запрос;
	Запрос.Текст					= ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц	= МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекущаяОчередь", ПланыОбмена.ОбновлениеИнформационнойБазы.УзелПоОчереди(Очередь));

	ОИБ_УстановитьПоляПоСтраницам(Запрос, ПараметрыПостроения);
	Если ЭтоДокумент Или ПараметрыПостроения.ПостраничнаяВыборка Тогда
		ОИБ_УстановитьПорядокПоСтраницам(Запрос, ПараметрыПостроения);
	КонецЕсли;

	Возврат ОИБ_ВыбратьДанныеДляОбработки(Запрос, ПараметрыПостроения);
КонецФункции

Функция ОИБ_ЕстьДанныеДляОбработки(Очередь, ПолноеИмяМетаданныеОбъекта, Отбор = Неопределено) Экспорт
	Если ОИБ_ОтложенноеОбновлениеЗавершено() Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(ПолноеИмяМетаданныеОбъекта) = Тип("Строка") Тогда
		ПолныеИменаОбрабатываемыхОбъектов = СтрРазделить(ПолноеИмяМетаданныеОбъекта, ",");
	ИначеЕсли ТипЗнч(ПолноеИмяМетаданныеОбъекта) = Тип("Массив") Тогда
		ПолныеИменаОбрабатываемыхОбъектов = ПолноеИмяМетаданныеОбъекта;
	ИначеЕсли ТипЗнч(ПолноеИмяМетаданныеОбъекта) = Тип("ОбъектМетаданных") Тогда
		ПолныеИменаОбрабатываемыхОбъектов = Новый Массив;
		ПолныеИменаОбрабатываемыхОбъектов.Добавить(ПолноеИмяМетаданныеОбъекта.ПолноеИмя());
	Иначе
		ТекстИсключения = "Передан неправильный тип параметра ""ПолноеИмяМетаданныеОбъекта"" в функцию ОбновлениеВерсииИБСервер.ОИБ_ЕстьДанныеДляОбработки";

		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	Запрос			= Новый Запрос;

	ТекстыЗапроса	= Новый Массив;
	ОтборУстановлен	= Ложь;

	Для Каждого ОбрабатываемыйТип Из ПолныеИменаОбрабатываемыхОбъектов Цикл
		Если ТипЗнч(ОбрабатываемыйТип) = Тип("ОбъектМетаданных") Тогда
			МетаданныеОбъекта = ОбрабатываемыйТип;
			ПолноеИмяОбъекта  = ОбрабатываемыйТип.ПолноеИмя();
		Иначе
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ОбрабатываемыйТип);
			ПолноеИмяОбъекта  = ОбрабатываемыйТип;
		КонецЕсли;

		ИмяОбъекта = СтрРазделить(ПолноеИмяОбъекта,".",Ложь)[1];

		УсловиеОтбораДанных			= "ИСТИНА";
		УсловиеПроверкиРегистратора	= "ИСТИНА";

		Если БазоваяПодсистемаСервер.ОН_ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта) Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаИзменений.Ссылка КАК Ссылка
			|ИЗ
			|	#ТаблицаИзменений КАК ТаблицаИзменений
			|ГДЕ
			|	&УсловиеОтбораУзла
			|	И &УсловиеОтбораДанных
			|	И ИСТИНА В (
			|		ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			#ТаблицаОбъекта КАК Таблица
			|		ГДЕ
			|			Таблица.Ссылка = ТаблицаИзменений.Ссылка)";

			Запрос.УстановитьПараметр("Ссылка", Отбор);

			Если Отбор <> Неопределено Тогда
				УсловиеОтбораДанных = "ТаблицаИзменений.Ссылка В (&Отбор)";
			КонецЕсли;
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта)
			И МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда

			Если ПолныеИменаОбрабатываемыхОбъектов.Количество() > 1 Тогда
				ТекстИсключения = "В массиве имен в параметре ""ПолноеИмяМетаданныеОбъекта"" в функцию ОбновлениеВерсииИБСервер.ОИБ_ЕстьДанныеДляОбработки передан независимый регистр сведений.";
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;

			ОтборУстановлен = Истина;

			ТекстЗапроса =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	&ТекстВыборкиИзмерений
			|ИЗ
			|	#ТаблицаИзменений КАК ТаблицаИзменений
			|ГДЕ
			|	&УсловиеОтбораУзла
			|	И &УсловиеОтбораДанных";

			ТекстВыборкиИзмерений = "";
			Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
				Если Не Измерение.ОсновнойОтбор Тогда
					Продолжить;
				КонецЕсли;

				ТекстВыборкиИзмерений = ТекстВыборкиИзмерений + "
				|	ТаблицаИзменений." + Измерение.Имя + " КАК " + Измерение.Имя + ",";

				Если Отбор <> Неопределено Тогда
					УсловиеОтбораДанных = УсловиеОтбораДанных + "
					|	И (ТаблицаИзменений." + Измерение.Имя + " В (&ЗначениеОтбора" + Измерение.Имя + ")
					|		ИЛИ ТаблицаИзменений." + Измерение.Имя + " = &ПустоеЗначение" + Измерение.Имя + ")";

					Если Отбор.Свойство(Измерение.Имя) Тогда
						Запрос.УстановитьПараметр("ЗначениеОтбора" + Измерение.Имя, Отбор[Измерение.Имя]);
					Иначе
						Запрос.УстановитьПараметр("ЗначениеОтбора" + Измерение.Имя, Измерение.Тип.ПривестиЗначение());
					КонецЕсли;

					Запрос.УстановитьПараметр("ПустоеЗначение" + Измерение.Имя, Измерение.Тип.ПривестиЗначение());
				КонецЕсли;
			КонецЦикла;

			Если ПустаяСтрока(ТекстВыборкиИзмерений) Тогда
				ТекстВыборкиИзмерений = "*";
			Иначе
				ТекстВыборкиИзмерений = Лев(ТекстВыборкиИзмерений, СтрДлина(ТекстВыборкиИзмерений) - 1);
			КонецЕсли;

			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборкиИзмерений", ТекстВыборкиИзмерений);

		ИначеЕсли БазоваяПодсистемаСервер.ОН_ЭтоРегистр(МетаданныеОбъекта) Тогда
			ШаблонЗапросаПроверки = "ИСТИНА В (ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИСТИНА
				|ИЗ
				|	#ИмяТаблицы КАК ПроверяемаяТаблица
				|ГДЕ
				|	ТаблицаИзменений.Регистратор = ПроверяемаяТаблица.Ссылка)";

			КоллекцияЗапросов	= Новый Массив;
			ТипыРегистратора	= МетаданныеОбъекта.СтандартныеРеквизиты.Регистратор.Тип;
			ТипыРегистратора	= ТипыРегистратора.Типы();
			Для Каждого ТипРегистратора Из ТипыРегистратора Цикл
				МетаданныеРегистратора = Метаданные.НайтиПоТипу(ТипРегистратора);
				Если МетаданныеРегистратора = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ПолноеИмяРегистратора	= МетаданныеРегистратора.ПолноеИмя();
				ТекстЗапросаПроверки	= СтрЗаменить(ШаблонЗапросаПроверки, "#ИмяТаблицы", ПолноеИмяРегистратора);
				КоллекцияЗапросов.Добавить(ТекстЗапросаПроверки);
			КонецЦикла;

			УсловиеПроверкиРегистратора = СтрСоединить(КоллекцияЗапросов, Символы.ПС + "ИЛИ ");

			ТекстЗапроса =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаИзменений.Регистратор КАК Ссылка
			|ИЗ
			|	#ТаблицаИзменений КАК ТаблицаИзменений
			|ГДЕ
			|	&УсловиеОтбораУзла
			|	И &УсловиеОтбораДанных
			|	И (&УсловиеПоРегистраторам)";

			Если Отбор <> Неопределено Тогда
				УсловиеОтбораДанных = "ТаблицаИзменений.Регистратор В (&Отбор)";
			КонецЕсли;
		Иначе
			ТекстИсключения = "Для типа метаданных ""%МетаданныеОбъекта%"" не поддерживается проверка в функции ОбновлениеВерсииИБСервер.ОИБ_ЕстьДанныеДляОбработки";
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "%МетаданныеОбъекта%", Строка(МетаданныеОбъекта));
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаИзменений", ПолноеИмяОбъекта + ".Изменения");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаОбъекта", ПолноеИмяОбъекта);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяОбъекта", ИмяОбъекта);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораДанных", УсловиеОтбораДанных);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоРегистраторам", УсловиеПроверкиРегистратора);

		ТекстыЗапроса.Добавить(ТекстЗапроса);
	КонецЦикла;

	Соединитель = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";

	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, Соединитель);

	Если Очередь = Неопределено Тогда
		УсловиеОтбораУзла = "	ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы ";
	Иначе
		УсловиеОтбораУзла = "	ТаблицаИзменений.Узел В (&Узлы) ";
		Если ТипЗнч(Очередь) = Тип("Массив") Тогда
			Запрос.УстановитьПараметр("Узлы", Очередь);
		Иначе
			Запрос.УстановитьПараметр("Узлы", ПланыОбмена.ОбновлениеИнформационнойБазы.УзелПоОчереди(Очередь));
		КонецЕсли;
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораУзла", УсловиеОтбораУзла);

	Если Не ОтборУстановлен Тогда
		Запрос.УстановитьПараметр("Отбор", Отбор);
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;

	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);

	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

Функция ОИБ_ОтложенноеОбновлениеЗавершено(Знач ИменаПодсистем = Неопределено) Экспорт
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		ЭтоПодчиненныйУзелРИБ = БазоваяПодсистемаСервер.ОН_ЭтоПодчиненныйУзелРИБ();
		Если Не ЭтоПодчиненныйУзелРИБ Тогда
			Возврат Истина;
		Иначе
			Возврат ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно");
		КонецЕсли;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ИменаПодсистем) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(ИменаПодсистем) = Тип("Строка") Тогда
		ИменаПодсистем = СтрРазделить(ИменаПодсистем, ",");
	КонецЕсли;

	Запрос			= Новый Запрос;
	Запрос.Текст	=
		"ВЫБРАТЬ
		|	ОбработчикиОбновления.ИмяОбработчика КАК ИмяОбработчика
		|ИЗ
		|	РегистрСведений.ОбработчикиОбновления КАК ОбработчикиОбновления
		|ГДЕ
		|	ОбработчикиОбновления.ИмяБиблиотеки В (&Подсистемы)
		|	И ОбработчикиОбновления.Статус <> &Статус";
	Запрос.УстановитьПараметр("Подсистемы",	ИменаПодсистем);
	Запрос.УстановитьПараметр("Статус",		Перечисления.СтатусыОбработчиковОбновления.Выполнен);

	Возврат Запрос.Выполнить().Выгрузить().Количество() = 0;
КонецФункции

Функция ОИБ_ИсточникиДанных(ДополнительныеИсточникиДанных, Объект = "", Регистр = "") Экспорт
	Если ОИБ_ЭтоПростойИсточникДанных(ДополнительныеИсточникиДанных) Тогда
		Возврат ДополнительныеИсточникиДанных;
	Иначе
		ИмяОбъекта	= ОИБ_ИмяОбъектаМетаданных(Объект);
		ИмяРегистра	= ОИБ_ИмяОбъектаМетаданных(Регистр);
		РегистрыОбъекта = ДополнительныеИсточникиДанных[ИмяОбъекта];
		ТипСоответствие = Тип("Соответствие");

		Если ТипЗнч(РегистрыОбъекта) = ТипСоответствие Тогда
			ИсточникиДанных = РегистрыОбъекта[ИмяРегистра];

			Если ТипЗнч(ИсточникиДанных) = ТипСоответствие Тогда
				Возврат ИсточникиДанных;
			КонецЕсли;
		КонецЕсли;

		Возврат Новый Соответствие;
	КонецЕсли;
КонецФункции

Функция ОИБ_ЭтоПростойИсточникДанных(ДополнительныеИсточникиДанных)
	ПростойИсточник = Ложь;
	СложныйИсточник = Ложь;
	ТипСоответствие = Тип("Соответствие");
	Для Каждого КлючИЗначение Из ДополнительныеИсточникиДанных Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = ТипСоответствие Тогда
			СложныйИсточник = Истина;
		Иначе
			ПростойИсточник = Истина;
		КонецЕсли;
	КонецЦикла;

	Если ПростойИсточник И СложныйИсточник Тогда
		Ошибка = "Источник данных задан неверно (см. ОИБ_ДополнительныеПараметрыВыборкиДанныхДляОбработки()).";
		ВызватьИсключение Ошибка;
	Иначе
		Возврат ПростойИсточник;
	КонецЕсли;
КонецФункции

Функция ОИБ_ИмяОбъектаМетаданных(ПолноеИмя)
	Позиция = СтрНайти(ПолноеИмя, ".", НаправлениеПоиска.СКонца);

	Если Позиция > 0  Тогда
		Возврат Сред(ПолноеИмя, Позиция + 1);
	Иначе
		Возврат ПолноеИмя;
	КонецЕсли;
КонецФункции

Процедура ОИБ_ПроверитьОбъектОбработан(Данные, Форма = Неопределено, ИмяОтложенногоОбработчика = "", ИмяПроцедурыПрограммногоИнтерфейса = "") Экспорт
	Если Не ОИБ_ЭтоВызовИзОбработчикаОбновления() Тогда
		Результат	= ОИБ_ОбъектОбработан(Данные);
		Если Результат.Обработан Тогда
			Возврат;
		КонецЕсли;

		Если Форма = Неопределено Тогда
			ВызватьИсключение Результат.ТекстИсключения;
		КонецЕсли;

		Форма.ТолькоПросмотр = Истина;
		БазоваяПодсистемаСервер.ОН_СообщитьПользователю(Результат.ТекстИсключения);

		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ИмяОтложенногоОбработчика) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяОтложенногоОбработчика = ПараметрыСеанса.ПараметрыОбработчикаОбновления.ИмяОбработчика Тогда
		Возврат;
	КонецЕсли;

	ОчередьТребуемогоОбработчика	= ОИБ_ОчередьОтложенногоОбработчикаОбновления(ИмяОтложенногоОбработчика);
	ОчередьТекущегоОбработчика		= ПараметрыСеанса.ПараметрыОбработчикаОбновления.ОчередьОтложеннойОбработки;
	Если ОчередьТекущегоОбработчика > ОчередьТребуемогоОбработчика Тогда
		Возврат;
	КонецЕсли;

	ВызватьИсключение СтрШаблон("Недопустимо вызывать %1
		           |из обработчика обновления
		           |%2
		           |так как его номер очереди меньше или равен номеру очереди обработчика обновления
		           |%3",
		ИмяПроцедурыПрограммногоИнтерфейса,
		ПараметрыСеанса.ПараметрыОбработчикаОбновления.ИмяОбработчика,
		ИмяОтложенногоОбработчика);
КонецПроцедуры

Функция ОИБ_ОбъектОбработан(Данные) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Обработан",							Истина);
	Результат.Вставить("ТекстИсключения",					"");
	Результат.Вставить("НевыполненныеОбработчикиСтрокой",	"");

	Если Данные = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	Если ОИБ_ОтложенноеОбновлениеЗавершено() Тогда
		Возврат Результат;
	КонецЕсли;

	СведенияОБлокируемыхОбъектах = сОИБ_СведенияОБлокируемыхОбъектах();

	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		ПолноеИмя			= Данные;
	Иначе
		МетаданныеИОтбор	= ОИБ_МетаданныеИОтборПоДанным(Данные);
		ПолноеИмя			= МетаданныеИОтбор.Метаданные.ПолноеИмя();
	КонецЕсли;

	ПроверяемыйОбъект	= СтрЗаменить(ПолноеИмя, ".", "");

	ОбработчикиОбъекта	= СведенияОБлокируемыхОбъектах.БлокируемыеОбъекты[ПроверяемыйОбъект];
	Если ОбработчикиОбъекта = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	Обработан = Истина;
	НезавершенныеОбработчики = Новый Массив;
	Для Каждого Обработчик Из ОбработчикиОбъекта Цикл
		СвойстваОбработчика = СведенияОБлокируемыхОбъектах.Обработчики[Обработчик];
		Если СвойстваОбработчика.Выполнен Тогда
			Обработан = Истина;
		ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
			Обработан = Ложь;
		Иначе
			// АПК:488-выкл безопасный режим не требуется
			Обработан = Вычислить(СвойстваОбработчика.ПроцедураПроверки + "(МетаданныеИОтбор)");
			// АПК:488-вкл
		КонецЕсли;

		Результат.Обработан = Обработан И Результат.Обработан;

		Если Не Обработан Тогда
			НезавершенныеОбработчики.Добавить(Обработчик);
		КонецЕсли;
	КонецЦикла;

	Если НезавершенныеОбработчики.Количество() > 0 Тогда
		ТекстИсключения = "Действия с объектом временно запрещены, так как не завершен переход на новую версию программы.
			|Это плановый процесс, который скоро завершится.
			|Остались следующие процедуры обработки данных:";

		НевыполненныеОбработчикиСтрокой = "";
		Для Каждого НезавершенныйОбработчик Из НезавершенныеОбработчики Цикл
			НевыполненныеОбработчикиСтрокой = НевыполненныеОбработчикиСтрокой + Символы.ПС + НезавершенныйОбработчик;
		КонецЦикла;
		Результат.ТекстИсключения					= ТекстИсключения + НевыполненныеОбработчикиСтрокой;
		Результат.НевыполненныеОбработчикиСтрокой	= НевыполненныеОбработчикиСтрокой;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ОИБ_ОчередьОтложенногоОбработчикаОбновления(ИмяИлиИдентификатор) Экспорт
	Результат = ОбновлениеВерсииИБСерверПовтИсп.сОИБ_ОчередьОтложенногоОбработчикаОбновления();

	Если ТипЗнч(ИмяИлиИдентификатор) = Тип("УникальныйИдентификатор") Тогда
		ОчередьПоИдентификатору = Результат["ПоИдентификатору"];

		Возврат ОчередьПоИдентификатору[ИмяИлиИдентификатор];
	Иначе
		ОчередьПоИмени = Результат["ПоИмени"];

		Возврат ОчередьПоИмени[ИмяИлиИдентификатор];
	КонецЕсли;
КонецФункции

Функция ОИБ_ЭтоВызовИзОбработчикаОбновления(РежимВыполненияОбработчика = "") Экспорт
	РежимВыполнения = ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполнения;
	Если Не ЗначениеЗаполнено(РежимВыполнения) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(РежимВыполненияОбработчика) Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат (СтрНайти(РежимВыполненияОбработчика, РежимВыполнения) > 0);
КонецФункции

Функция ОИБ_НоваяТаблицаОбработчиковОбновления() Экспорт
	Обработчики	= Новый ТаблицаЗначений;

	// Общие свойства.
	Обработчики.Колонки.Добавить("НачальноеЗаполнение",						Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("Версия",									Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("Процедура",								Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("РежимВыполнения",							Новый ОписаниеТипов("Строка"));
	// Для библиотек.
	Обработчики.Колонки.Добавить("ВыполнятьВГруппеОбязательных",			Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("Приоритет",								Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)));
	// Для модели сервиса.
	Обработчики.Колонки.Добавить("ОбщиеДанные",								Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("УправлениеОбработчиками",					Новый ОписаниеТипов("Булево"));
	// Для отложенных обработчиков обновления.
	Обработчики.Колонки.Добавить("Комментарий",								Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("Идентификатор",							Новый ОписаниеТипов("УникальныйИдентификатор"));
	Обработчики.Колонки.Добавить("ПроцедураПроверки",						Новый ОписаниеТипов("Строка"));
	Обработчики.Колонки.Добавить("БлокируемыеОбъекты",						Новый ОписаниеТипов("Строка"));
	// Для параллельного режима отложенного обновления.
	Обработчики.Колонки.Добавить("ПроцедураЗаполненияДанныхОбновления",		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("ОчередьОтложеннойОбработки",				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4)));
	Обработчики.Колонки.Добавить("ЗапускатьТолькоВГлавномУзле",				Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("ЗапускатьИВПодчиненномУзлеРИБСФильтрами",	Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("ЧитаемыеОбъекты",							Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("ИзменяемыеОбъекты",						Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("ПриоритетыВыполнения");
	Обработчики.Колонки.Добавить("Многопоточный",							Новый ОписаниеТипов("Булево"));

	// Устарело. Обратная совместимость с редакцией "2.2".
	Обработчики.Колонки.Добавить("Опциональный");
	Обработчики.Колонки.Добавить("МонопольныйРежим");

	Возврат Обработчики;
КонецФункции

Функция ОИБ_ОсновныеПараметрыОтметкиКОбработке() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("Очередь", 0);
	Параметры.Вставить("ПовторнаяРегистрация", Ложь);
	Параметры.Вставить("ПараметрыВыборки");

	// Зарезервировано для новых подсистем

	Возврат Параметры;
КонецФункции

Функция ОИБ_ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки() Экспорт
	ДополнительныеПараметры = ОИБ_ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.Вставить("ПолныеИменаОбъектов");
	ДополнительныеПараметры.Вставить("ПолныеИменаРегистров");
	ДополнительныеПараметры.Вставить("ПоляУпорядочиванияПриРаботеПользователей",	Новый Массив);
	ДополнительныеПараметры.Вставить("ПоляУпорядочиванияПриОбработкеДанных",		Новый Массив);
	ДополнительныеПараметры.Вставить("СпособВыборки");
	ДополнительныеПараметры.Вставить("ПоследняяВыбраннаяЗапись");
	ДополнительныеПараметры.Вставить("ПерваяЗапись");
	ДополнительныеПараметры.Вставить("ПоследняяЗапись");
	ДополнительныеПараметры.Вставить("ОптимизироватьВыборкуПоСтраницам",			Истина);

	Возврат ДополнительныеПараметры;
КонецФункции

Процедура ОИБ_ЗаписатьОбъект(Знач Объект, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено, Знач ВключитьБизнесЛогику = Ложь, ДокументРежимЗаписи = Неопределено) Экспорт
	Объект.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", РегистрироватьНаУзлахПлановОбмена);
	Объект.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;

	Если РегистрироватьНаУзлахПлановОбмена = Неопределено Или Не РегистрироватьНаУзлахПлановОбмена И Не Объект.ЭтоНовый() Тогда
		Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;

	Если ДокументРежимЗаписи <> Неопределено Тогда
		Если ТипЗнч(ДокументРежимЗаписи) <> Тип("РежимЗаписиДокумента") Тогда
			ТекстИсключения = "Неправильный тип параметра ДокументРежимЗаписи";

			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		Объект.ОбменДанными.Загрузка = Объект.ОбменДанными.Загрузка И Не ДокументРежимЗаписи = РежимЗаписиДокумента.Проведение И Не ДокументРежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		Объект.Записать(ДокументРежимЗаписи);
	Иначе
		Объект.Записать();
	КонецЕсли;

	ОИБ_ОтметитьВыполнениеОбработки(Объект);
КонецПроцедуры

Функция ОИБ_ПриоритетыВыполненияОбработчика() Экспорт
	Приоритеты = Новый ТаблицаЗначений;
	Приоритеты.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0)));
	Приоритеты.Колонки.Добавить("Идентификатор");
	Приоритеты.Колонки.Добавить("Процедура", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0)));

	Возврат Приоритеты;
КонецФункции

Функция ОИБ_ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор) Экспорт
	Возврат ОИБ_МожноЧитатьИМенять(Неопределено, МетаданныеИОтбор.Данные,,МетаданныеИОтбор);
КонецФункции

Функция ОИБ_МожноЧитатьИМенять(Очередь, Данные, ДополнительныеПараметры = Неопределено, МетаданныеИОтбор = Неопределено) Экспорт
	Если ОИБ_ОтложенноеОбновлениеЗавершено() Тогда
		Возврат Истина;
	КонецЕсли;

	Если МетаданныеИОтбор = Неопределено Тогда
		МетаданныеИОтбор = ОИБ_МетаданныеИОтборПоДанным(Данные, ДополнительныеПараметры);
	КонецЕсли;

	Если МетаданныеИОтбор.ЭтоНовый Тогда
		Возврат Истина;
	КонецЕсли;

	Если Очередь = Неопределено Тогда
		Возврат Не ОИБ_ЕстьДанныеДляОбработки(Неопределено, МетаданныеИОтбор.Метаданные, МетаданныеИОтбор.Отбор);
	Иначе
		Возврат Не ОИБ_ЕстьДанныеДляОбработки(ПланыОбмена.ОбновлениеИнформационнойБазы.УзлыМеньшейОчереди(Очередь), МетаданныеИОтбор.Метаданные, МетаданныеИОтбор.Отбор);
	КонецЕсли;
КонецФункции

Функция ОИБ_МетаданныеИОтборПоДанным(Данные, ДополнительныеПараметры = Неопределено) Экспорт
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ОИБ_ДополнительныеПараметрыОтметкиОбработки();
	КонецЕсли;

	Если ДополнительныеПараметры.ЭтоДвижения Тогда
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра);
	Иначе
		МетаданныеОбъекта = Неопределено;
	КонецЕсли;

	Отбор		= Неопределено;
	ТипДанных	= ТипЗнч(Данные);
	ЭтоНовый	= Ложь;

	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(Данные);
	ИначеЕсли ТипДанных = Тип("ДанныеФормыСтруктура") Тогда
		Если БазоваяПодсистемаКлиентСервер.ОН_ЕстьРеквизитИлиСвойствоОбъекта(Данные, "Ссылка") Тогда
			Если МетаданныеОбъекта = Неопределено Тогда
				МетаданныеОбъекта = Данные.Ссылка.Метаданные();
			КонецЕсли;

			Отбор = Данные.Ссылка;

			Если Не ЗначениеЗаполнено(Отбор) Тогда
				ЭтоНовый = Истина;
			КонецЕсли;
		ИначеЕсли БазоваяПодсистемаКлиентСервер.ОН_ЕстьРеквизитИлиСвойствоОбъекта(Данные, "ИсходныйКлючЗаписи") Тогда
			Если МетаданныеОбъекта = Неопределено Тогда
				МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Данные.ИсходныйКлючЗаписи)); // ОбъектМетаданныхРегистрСведений
			КонецЕсли;
			Отбор = Новый Структура;
			Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
				Отбор.Вставить(Измерение.Имя, Данные[Измерение.Имя]);
			КонецЦикла;
		Иначе
			ТекстИсключения = "Процедура ОбновлениеВерсииИБСервер.ОИБ_МетаданныеИОтборПоДанным не может быть использована для этой формы.";
		КонецЕсли;
	Иначе
		Если МетаданныеОбъекта = Неопределено Тогда
			МетаданныеОбъекта = Данные.Метаданные();
		КонецЕсли;

		Если БазоваяПодсистемаСервер.ОН_ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта) Тогда
			Если БазоваяПодсистемаСервер.ОН_ЭтоСсылка(ТипДанных) Тогда
				Отбор = Данные;
			Иначе
				Отбор = Данные.Ссылка;

				Если Данные.ЭтоНовый() Тогда
					ЭтоНовый = Истина;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) И МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
			Отбор = Новый Структура;
			Для Каждого ЭлементОтбора Из Данные.Отбор Цикл
				Если ЭлементОтбора.Использование Тогда
					Отбор.Вставить(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли БазоваяПодсистемаСервер.ОН_ЭтоРегистр(МетаданныеОбъекта) Тогда
			Если ДополнительныеПараметры.ЭтоДвижения Тогда
				Отбор = Данные;
			Иначе
				Отбор = Данные.Отбор.Регистратор.Значение;
			КонецЕсли;
		Иначе
			ТекстИсключения = "Для этого типа метаданных не поддерживается анализ в функции ОбновлениеВерсииИБСервер.ОИБ_МетаданныеИОтборПоДанным.";

			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("Данные",		Данные);
	Результат.Вставить("Метаданные",	МетаданныеОбъекта);
	Результат.Вставить("ПолноеИмя",		МетаданныеОбъекта.ПолноеИмя());
	Результат.Вставить("Отбор",			Отбор);
	Результат.Вставить("ЭтоНовый",		ЭтоНовый);

	Возврат Результат;
КонецФункции

Функция ОИБ_УсловиеОтбораНезаблокированныхИзмерений(Измерения)
	УсловияНаИзмерения			= Новый Массив;
	ШаблонУсловияНаИзмерение	=
		"(ТаблицаИзменений.%1 = ВТЗаблокированоИзмерения.%1
		|				ИЛИ ТаблицаИзменений.%1 = &ПустоеЗначениеИзмерения%1
		|				ИЛИ ВТЗаблокированоИзмерения.%1 = &ПустоеЗначениеИзмерения%1)";
	ШаблонУсловияПоОтборуНезаблокированных =
		"	НЕ ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			#ВТЗаблокированоИзмерения КАК ВТЗаблокированоИзмерения
		|		ГДЕ
		|			%1)";
	РазделительИ =
		"
		|			И ";

	Для Каждого Измерение Из Измерения Цикл
		Условие = СтрШаблон(ШаблонУсловияНаИзмерение, Измерение);
		УсловияНаИзмерения.Добавить(Условие);
	КонецЦикла;

	УсловияПоВсемИзмерениям = СтрСоединить(УсловияНаИзмерения, РазделительИ);

	Возврат СтрШаблон(ШаблонУсловияПоОтборуНезаблокированных, УсловияПоВсемИзмерениям);
КонецФункции

Функция ОИБ_СоставСсылочногоИсточникаДанных(Источник)
	Состав		= СтрРазделить(Источник, ".");
	Описание	= Новый Структура("ТабличнаяЧасть, Реквизит");

	Если Состав.Количество() > 1 Тогда
		Описание.ТабличнаяЧасть = СокрЛП(Состав[0]);
		Описание.Реквизит = СокрЛП(Состав[1]);
	Иначе
		Описание.Реквизит = СокрЛП(Состав[0]);
	КонецЕсли;

	Возврат Описание;
КонецФункции

Функция ОИБ_ЗначениеПоКлючу(Коллекция, Ключ, Тип = "Соответствие")
	Значение = Коллекция[Ключ];

	Если Значение = Неопределено Тогда
		Значение		= Новый(Тип);
		Коллекция[Ключ]	= Значение;
	КонецЕсли;

	Возврат Значение;
КонецФункции

Функция ОИБ_ТекстЗапросаВТЗаблокированныхПоТЧ(РеквизитыТЧ, ПолноеИмяОбъекта, ПолноеИмяРегистра, ВременныеТаблицы)
	ШаблонЗапроса =
		"ВЫБРАТЬ
		|	&Реквизит КАК Ссылка
		|ПОМЕСТИТЬ ЗаблокированныеПоТЧ
		|ИЗ
		|	&ТаблицаИзменений КАК ТаблицаИзменений
		|ГДЕ
		|	&Условие
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
	ШаблонУсловия =
		"ИСТИНА В " + "(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			#Таблица КАК ТЧДокументаПолноеИмяОбъекта
		|		ГДЕ
		|			&УсловиеПоПолюТаблицы
		|			И (&ТекстУсловийПоЗаблокированным))";
	ШаблонУсловияПоЗаблокированным =
		"ИСТИНА В " + "(
		|					ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						#Таблица КАК ВТЗаблокированоТаблица
		|					ГДЕ
		|						&УсловиеПоЗаблокированным)";
	ШаблонУсловияПоРеквизиту = "ТЧДокумента%1.%2 = %3.Ссылка"; // @query-part
	РазделительУсловий =
		"
		|	ИЛИ ";
	РазделительУсловийПоЗаблокированным =
		"
		|				ИЛИ ";
	РазделительУсловийПоРеквизитам =
		"
		|						ИЛИ ";

	Если ПолноеИмяРегистра <> Неопределено Тогда
		ПолеТаблицы	= "Регистратор";
		Таблица		= ПолноеИмяРегистра;
	Иначе
		ПолеТаблицы	= "Ссылка";
		Таблица	= ПолноеИмяОбъекта;
	КонецЕсли;

	Условия = Новый Массив;

	Для Каждого ОписаниеТабличнойЧасти Из РеквизитыТЧ Цикл
		ТабличнаяЧасть				= ОписаниеТабличнойЧасти.Ключ;
		МетаданныеРеквизитов		= ОписаниеТабличнойЧасти.Значение;
		УсловияПоЗаблокированным	= Новый Массив;

		Для Каждого ОписаниеМетаданных Из МетаданныеРеквизитов Цикл
			МетаданныеИсточника		= ОписаниеМетаданных.Ключ;
			Реквизиты				= ОписаниеМетаданных.Значение;
			ТаблицаЗаблокированных	= ВременныеТаблицы[МетаданныеИсточника];
			УсловияПоРеквизитам		= Новый Массив;

			Для Каждого ОписаниеРеквизита Из Реквизиты Цикл
				Реквизит			= ОписаниеРеквизита.Ключ;
				УсловиеПоРеквизиту	= СтрШаблон(ШаблонУсловияПоРеквизиту, ТабличнаяЧасть, Реквизит, ТаблицаЗаблокированных);
				УсловияПоРеквизитам.Добавить(УсловиеПоРеквизиту);
			КонецЦикла;

			ТекстУсловийПоРеквизитам = СтрСоединить(УсловияПоРеквизитам, РазделительУсловийПоРеквизитам);
			УсловиеПоЗаблокированным = СтрЗаменить(ШаблонУсловияПоЗаблокированным, "#Таблица", ТаблицаЗаблокированных);
			УсловиеПоЗаблокированным = СтрЗаменить(УсловиеПоЗаблокированным, "ВТЗаблокированоТаблица", ТаблицаЗаблокированных);
			УсловиеПоЗаблокированным = СтрЗаменить(УсловиеПоЗаблокированным, "&УсловиеПоЗаблокированным", ТекстУсловийПоРеквизитам);
			УсловияПоЗаблокированным.Добавить(УсловиеПоЗаблокированным);
		КонецЦикла;

		ТекстУсловийПоЗаблокированным = СтрСоединить(УсловияПоЗаблокированным, РазделительУсловийПоЗаблокированным);
		Условие = СтрЗаменить(ШаблонУсловия, "#Таблица", ПолноеИмяОбъекта + "." + ТабличнаяЧасть);
		Условие = СтрЗаменить(Условие, "ТЧДокументаПолноеИмяОбъекта", "ТЧДокумента" + ТабличнаяЧасть);
		Условие = СтрЗаменить(Условие, "&УсловиеПоПолюТаблицы", "ТаблицаИзменений." + ПолеТаблицы + " = ТЧДокумента"+ ТабличнаяЧасть + ".Ссылка");
		Условие = СтрЗаменить(Условие, "&ТекстУсловийПоЗаблокированным", ТекстУсловийПоЗаблокированным);
		Условия.Добавить(Условие);
	КонецЦикла;

	ТекстУсловий = СтрСоединить(Условия, РазделительУсловий);
	ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "&Реквизит", ПолеТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаИзменений", Таблица + ".Изменения");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", ТекстУсловий);

	Возврат ТекстЗапроса;
КонецФункции

Функция ОИБ_ТекстУсловияЗаблокированныхПоТЧ(ПолноеИмяОбъекта, ПолноеИмяРегистра)
	Поле = ?(ПолноеИмяРегистра <> Неопределено, "ТаблицаРегистраИзменения.Регистратор", "ТаблицаИзменений.Ссылка");
	ШаблонУсловия =
		"НЕ ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			ЗаблокированныеПоТЧ КАК ЗаблокированныеПоТЧ
		|		ГДЕ
		|			%1 = ЗаблокированныеПоТЧ.Ссылка)";

	Возврат СтрШаблон(ШаблонУсловия, Поле);
КонецФункции

Функция ОИБ_ТекстУсловияЗаблокированныхПоШапке(РеквизитыШапки, ПолноеИмяРегистра, ВременныеТаблицы)
	ШаблонУсловия =
		"НЕ ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			%1 КАК %1
		|		ГДЕ
		|			%2)";
	ШаблонУсловияПоРеквизиту	= "Таблица%1.%2 = %3.Ссылка";
	РазделительУсловий			=
		"
		|	И ";
	РазделительУсловийПоРеквизитам =
		"
		|			ИЛИ ";
	Таблица = ?(ПолноеИмяРегистра <> Неопределено, "Документа", "Объекта");
	Условия = Новый Массив;

	Для Каждого ОписаниеМетаданных Из РеквизитыШапки Цикл
		МетаданныеИсточника		= ОписаниеМетаданных.Ключ;
		ТаблицаЗаблокированных	= ВременныеТаблицы[МетаданныеИсточника];
		Реквизиты				= ОписаниеМетаданных.Значение;
		УсловияПоРеквизитам		= Новый Массив;

		Для Каждого ОписаниеРеквизита Из Реквизиты Цикл
			Реквизит			= ОписаниеРеквизита.Ключ;
			УсловиеПоРеквизиту	= СтрШаблон(ШаблонУсловияПоРеквизиту, Таблица, Реквизит, ТаблицаЗаблокированных);
			УсловияПоРеквизитам.Добавить(УсловиеПоРеквизиту);
		КонецЦикла;

		ТекстУсловийПоРеквизитам = СтрСоединить(УсловияПоРеквизитам, РазделительУсловийПоРеквизитам);
		Условие = СтрШаблон(ШаблонУсловия, ТаблицаЗаблокированных, ТекстУсловийПоРеквизитам);
		Условия.Добавить(Условие);
	КонецЦикла;

	Возврат СтрСоединить(Условия, РазделительУсловий);
КонецФункции

Процедура ОИБ_ДобавитьЗапросыУничтоженияВТ(Запросы, ВременныеТаблицы)
	ШаблонЗапроса =
		"УНИЧТОЖИТЬ
		|	%1";

	Для Каждого ВременнаяТаблица Из ВременныеТаблицы Цикл
		ТекстЗапроса = СтрШаблон(ШаблонЗапроса, ВременнаяТаблица.Значение);
		Запросы.Добавить(ТекстЗапроса);
	КонецЦикла;
КонецПроцедуры

Функция ОИБ_ОбъединитьЗапросыВПакет(Запросы, РазделительЗапросов = Неопределено)
	Если РазделительЗапросов = Неопределено Тогда
		Разделитель =
			"
			|;
			|
			|";
	Иначе
		Разделитель = РазделительЗапросов;
	КонецЕсли;

	Возврат СтрСоединить(Запросы, Разделитель);
КонецФункции

Функция ОИБ_ТекстУсловияЗаблокированныхПоРегистрам(ПолноеИмяРегистра, ВременныеТаблицы)
	ШаблонУсловия =
		"НЕ ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			%1 КАК %1
		|		ГДЕ
		|			%2 = %1.Регистратор)";
	РазделительУсловий =
		"
		|	И ";
	Поле	= ?(ПолноеИмяРегистра <> Неопределено, "ТаблицаРегистраИзменения.Регистратор", "ТаблицаОбъекта.Ссылка");
	Условия	= Новый Массив;

	Для Каждого ОписаниеВременнойТаблицы Из ВременныеТаблицы Цикл
		ВременнаяТаблица	= ОписаниеВременнойТаблицы.Значение;
		Условие				= СтрШаблон(ШаблонУсловия, ВременнаяТаблица, Поле);
		Условия.Добавить(Условие);
	КонецЦикла;

	Возврат СтрСоединить(Условия, РазделительУсловий);
КонецФункции

Процедура ОИБ_ОтметитьКОбработке(ОсновныеПараметры, Данные, ДополнительныеПараметры = Неопределено) Экспорт
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ОИБ_ДополнительныеПараметрыОтметкиОбработки();
	КонецЕсли;

	Если (ТипЗнч(Данные) = Тип("Массив") Или ТипЗнч(Данные) = Тип("ТаблицаЗначений")) И Данные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если ОсновныеПараметры.Свойство("ПараметрыВыборки") И ТипЗнч(ОсновныеПараметры.ПараметрыВыборки) = Тип("Структура") Тогда
		ПолныеИменаОбъектов  = Неопределено;
		ПолныеИменаРегистров = Неопределено;
		ОсновныеПараметры.ПараметрыВыборки.Свойство("ПолныеИменаОбъектов",	ПолныеИменаОбъектов);
		ОсновныеПараметры.ПараметрыВыборки.Свойство("ПолныеИменаРегистров",	ПолныеИменаРегистров);

		МассивИмен = СтрРазделить(ПолныеИменаОбъектов, ",", Ложь);
		БазоваяПодсистемаКлиентСервер.ОН_ДополнитьМассив(МассивИмен, СтрРазделить(ПолныеИменаРегистров, ",", Ложь));

		Несуществующие = Новый Массив;
		Для Каждого ПолноеИмяОбъекта Из МассивИмен Цикл
			ПолноеИмяОбъекта	= СокрЛП(ПолноеИмяОбъекта);
			ОбъектСуществует	= (Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта) <> Неопределено);
			Если Не ОбъектСуществует Тогда
				Несуществующие.Добавить(ПолноеИмяОбъекта);
			КонецЕсли;
		КонецЦикла;

		Если Несуществующие.Количество() <> 0 Тогда
			ТекстИсключения = "В свойстве ПараметрыВыборки процедуры заполнения данных отложенного обработчика указаны несуществующие объекты:
				|%1.";
			ТекстИсключения = СтрШаблон(ТекстИсключения, СтрСоединить(Несуществующие, ", "));

			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	КонецЕсли;

	Узел = ПланыОбмена.ОбновлениеИнформационнойБазы.УзелПоОчереди(ОсновныеПараметры.Очередь);

	Если ДополнительныеПараметры.ЭтоДвижения Тогда
		Набор = БазоваяПодсистемаСервер.ОН_МенеджерОбъектаПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра).СоздатьНаборЗаписей();

		Если ДополнительныеПараметры.ОтметитьВсеРегистраторы Тогда
			Если ТипЗнч(Данные) = Тип("ОбъектМетаданных") Тогда
				МетаданныеДокумента = Данные;
			ИначеЕсли БазоваяПодсистемаСервер.ОН_ЭтоСсылка(ТипЗнч(Данные)) Тогда
				МетаданныеДокумента = Данные.Метаданные();
			Иначе
				ТекстИсключения = "Для регистрации всех регистраторов регистра необходимо в параметре ""Данные"" передать ОбъектМетаданных:Документ или ДокументСсылка.";

				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			ПолноеИмяДокумента = МетаданныеДокумента.ПолноеИмя();

			Запрос			= Новый Запрос;
			Запрос.Текст	=
			"ВЫБРАТЬ
			|	ТаблицаДокумента.Ссылка КАК Ссылка
			|ИЗ
			|	#ТаблицаДокумента КАК ТаблицаДокумента
			|ГДЕ
			|	ТаблицаДокумента.Проведен";

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаДокумента", ПолноеИмяДокумента);

			МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

			Для Каждого ЭлементМассива Из МассивСсылок Цикл
				Набор.Отбор.Регистратор.Установить(ЭлементМассива);
				ОИБ_ЗарегистрироватьИзменения(ОсновныеПараметры, Узел, Набор, "ПодчиненныйРегистр", ДополнительныеПараметры.ПолноеИмяРегистра);
			КонецЦикла;
		Иначе
			Если ТипЗнч(Данные) = Тип("Массив") Тогда
				Итератор = 0;
				Попытка
					Для Каждого ЭлементМассива Из Данные Цикл
						Если Итератор = 0 Тогда
							НачатьТранзакцию();
						КонецЕсли;
						Набор.Отбор.Регистратор.Установить(ЭлементМассива);
						ОИБ_ЗарегистрироватьИзменения(ОсновныеПараметры, Узел, Набор, "ПодчиненныйРегистр", ДополнительныеПараметры.ПолноеИмяРегистра);
						Итератор = Итератор + 1;
						Если Итератор = 1000 Тогда
							Итератор = 0;
							ЗафиксироватьТранзакцию();
						КонецЕсли;
					КонецЦикла;

					Если Итератор <> 0 Тогда
						ЗафиксироватьТранзакцию();
					КонецЕсли;
				Исключение
					ОтменитьТранзакцию();

					ВызватьИсключение;
				КонецПопытки
			Иначе
				Набор.Отбор.Регистратор.Установить(Данные);
				ОИБ_ЗарегистрироватьИзменения(ОсновныеПараметры, Узел, Набор, "ПодчиненныйРегистр", ДополнительныеПараметры.ПолноеИмяРегистра);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений Тогда
		Набор				= БазоваяПодсистемаСервер.ОН_МенеджерОбъектаПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра).СоздатьНаборЗаписей();
		МетаданныеОбъекта	= Метаданные.НайтиПоПолномуИмени(ДополнительныеПараметры.ПолноеИмяРегистра);
		ОИБ_УстановитьНедостающиеОтборыВНаборе(Набор, МетаданныеОбъекта, Данные);

		Для Каждого СтрокаТаблицы Из Данные Цикл
			Для Каждого Колонка Из Данные.Колонки Цикл
				Набор.Отбор[Колонка.Имя].Значение		= СтрокаТаблицы[Колонка.Имя];
				Набор.Отбор[Колонка.Имя].Использование	= Истина;
			КонецЦикла;

			ОИБ_ЗарегистрироватьИзменения(ОсновныеПараметры, Узел, Набор, "НезависимыйРегистр", ДополнительныеПараметры.ПолноеИмяРегистра);
		КонецЦикла;
	Иначе
		Если ТипЗнч(Данные) = Тип("Массив") Тогда
			Итератор = 0;
			Попытка
				Для Каждого ЭлементМассива Из Данные Цикл
					Если Итератор = 0 Тогда
						НачатьТранзакцию();
					КонецЕсли;
					ОИБ_ЗарегистрироватьИзменения(ОсновныеПараметры, Узел, ЭлементМассива, "Ссылка");
					Итератор = Итератор + 1;
					Если Итератор = 1000 Тогда
						Итератор = 0;
						ЗафиксироватьТранзакцию();
					КонецЕсли;
				КонецЦикла;

				Если Итератор <> 0 Тогда
					ЗафиксироватьТранзакцию();
				КонецЕсли;
			Исключение
				ОтменитьТранзакцию();

				ВызватьИсключение;
			КонецПопытки
		ИначеЕсли БазоваяПодсистемаСервер.ОН_ЭтоСсылка(ТипЗнч(Данные)) Тогда
			ОИБ_ЗарегистрироватьИзменения(ОсновныеПараметры, Узел, Данные, "Ссылка");
		Иначе
			Если ТипЗнч(Данные) = Тип("ОбъектМетаданных") Тогда
				ТекстИсключения = "Не поддерживается регистрация к обновлению целиком объекта метаданных. Нужно обновлять конкретные данные.";

				ВызватьИсключение ТекстИсключения;
			КонецЕсли;

			МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Данные));

			Если Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) И МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
				ОИБ_УстановитьНедостающиеОтборыВНаборе(Данные, МетаданныеОбъекта, Данные.Отбор);
			КонецЕсли;
			ОИБ_ЗарегистрироватьИзменения(ОсновныеПараметры, Узел, Данные, "НезависимыйРегистр", МетаданныеОбъекта.ПолноеИмя());
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОИБ_ЗарегистрироватьИзменения(Параметры, Узел, Данные, ВидДанных, ПолноеИмяОбъекта = "")
	ПланыОбмена.ЗарегистрироватьИзменения(Узел, Данные);

	Если Параметры.Свойство("ДанныеОбработчика") Тогда
		Если Не ЗначениеЗаполнено(ПолноеИмяОбъекта) Тогда
			ПолноеИмя = Данные.Метаданные().ПолноеИмя();
		Иначе
			ПолноеИмя = ПолноеИмяОбъекта;
		КонецЕсли;

		ДанныеПоОбъекту = Параметры.ДанныеОбработчика[ПолноеИмя];
		Если ДанныеПоОбъекту = Неопределено Тогда
			ДанныеПоОбъекту = Новый Структура;
			ДанныеПоОбъекту.Вставить("Количество", 1);
			ДанныеПоОбъекту.Вставить("Очередь", Параметры.Очередь);
			Параметры.ДанныеОбработчика.Вставить(ПолноеИмя, ДанныеПоОбъекту);
		Иначе
			Параметры.ДанныеОбработчика[ПолноеИмя].Количество = ДанныеПоОбъекту.Количество + 1;
		КонецЕсли;
	КонецЕсли;

	// Зарезервировано для новых подсистем
КонецПроцедуры

Функция сОИБ_НастройкиПодсистемы() Экспорт
	ПараметрыСообщенияОНевыполненныхОтложенныхОбработчиках = Новый Структура;
	ПараметрыСообщенияОНевыполненныхОтложенныхОбработчиках.Вставить("ТекстСообщения",		"");
	ПараметрыСообщенияОНевыполненныхОтложенныхОбработчиках.Вставить("КартинкаСообщения",	Неопределено);
	ПараметрыСообщенияОНевыполненныхОтложенныхОбработчиках.Вставить("ЗапрещатьПродолжение",	Ложь);

	Настройки = Новый Структура;
	Настройки.Вставить("ПоясненияДляРезультатовОбновления",							"");
	Настройки.Вставить("РасположениеОписанияИзмененийПрограммы",					"");
	Настройки.Вставить("ПараметрыСообщенияОНевыполненныхОтложенныхОбработчиках",	ПараметрыСообщенияОНевыполненныхОтложенныхОбработчиках);
	Настройки.Вставить("МногопоточноеОбновление",									Ложь);
	Настройки.Вставить("КоличествоПотоковОбновленияИнформационнойБазыПоУмолчанию",	1);

	Настройки.Вставить("ОбъектыСНачальнымЗаполнением", Новый Массив);
	ИнтеграцияПодсистемСервер.ПриОпределенииОбъектовСНачальнымЗаполнением(Настройки.ОбъектыСНачальнымЗаполнением);

	Возврат Настройки;
КонецФункции

Функция сОИБ_СведенияОбОбновленииИнформационнойБазы() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	СведенияОбОбновленииИБ = Константы.СведенияОбОбновленииИБ.Получить().Получить();
	Если ТипЗнч(СведенияОбОбновленииИБ) <> Тип("Структура") Тогда
		Возврат сОИБ_НовыеСведенияОбОбновлении();
	КонецЕсли;
	Если СведенияОбОбновленииИБ.Количество() = 1 Тогда
		Возврат сОИБ_НовыеСведенияОбОбновлении();
	КонецЕсли;

	СведенияОбОбновленииИБ = сОИБ_НовыеСведенияОбОбновлении(СведенияОбОбновленииИБ);

	Возврат СведенияОбОбновленииИБ;
КонецФункции

Функция сОИБ_НовыеСведенияОбОбновлении(СтарыеСведения = Неопределено)
	СведенияОбОбновлении = Новый Структура;
	СведенияОбОбновлении.Вставить("ВремяНачалаОбновления");
	СведенияОбОбновлении.Вставить("ВремяОкончанияОбновления");
	СведенияОбОбновлении.Вставить("ПродолжительностьОбновления");
	СведенияОбОбновлении.Вставить("ВремяНачалаОтложенногоОбновления");
	СведенияОбОбновлении.Вставить("ВремяОкончаниеОтложенногоОбновления");
	СведенияОбОбновлении.Вставить("НомерСеанса", Новый СписокЗначений());
	СведенияОбОбновлении.Вставить("ОтложенноеОбновлениеЗавершеноУспешно");
	СведенияОбОбновлении.Вставить("ДеревоОбработчиков", Новый ДеревоЗначений());
	СведенияОбОбновлении.Вставить("ВерсияДереваОбработчиков", "");
	СведенияОбОбновлении.Вставить("ВыводитьОписаниеОбновлений", Ложь);
	СведенияОбОбновлении.Вставить("ЛегальнаяВерсия", "");
	СведенияОбОбновлении.Вставить("НовыеПодсистемы", Новый Массив);
	СведенияОбОбновлении.Вставить("УправлениеОтложеннымОбновлением", Новый Структура);
	СведенияОбОбновлении.Вставить("ТекущаяИтерацияОбновления", 1);
	СведенияОбОбновлении.Вставить("СеансОбновления");
	СведенияОбОбновлении.Вставить("ВерсияУдалениеПатчей");
	СведенияОбОбновлении.Вставить("ЗависимостьГруппОбработчиков", Новый Соответствие);

	Если ТипЗнч(СтарыеСведения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СведенияОбОбновлении, СтарыеСведения);
	КонецЕсли;

	Возврат СведенияОбОбновлении;
КонецФункции

Процедура сОИБ_ЗаписатьСведенияОбОбновленииИнформационнойБазы(Знач СведенияОбОбновлении) Экспорт
	Если СведенияОбОбновлении = Неопределено Тогда
		НовоеЗначение = сОИБ_НовыеСведенияОбОбновлении();
	Иначе
		НовоеЗначение = СведенияОбОбновлении;
	КонецЕсли;

	МенеджерКонстанты			= Константы.СведенияОбОбновленииИБ.СоздатьМенеджерЗначения();
	МенеджерКонстанты.Значение	= Новый ХранилищеЗначения(НовоеЗначение);
	ОИБ_ЗаписатьДанные(МенеджерКонстанты);
КонецПроцедуры

Функция сОИБ_НовыеПараметрыОбработчикаОбновления() Экспорт
	ПараметрыОбработчикаОбновления = Новый Структура;
	ПараметрыОбработчикаОбновления.Вставить("ЗапускатьТолькоВГлавномУзле",				Ложь);
	ПараметрыОбработчикаОбновления.Вставить("ЗапускатьИВПодчиненномУзлеРИБСФильтрами",	Ложь);
	ПараметрыОбработчикаОбновления.Вставить("ОчередьОтложеннойОбработки",				0);
	ПараметрыОбработчикаОбновления.Вставить("РежимВыполнения",							"");
	ПараметрыОбработчикаОбновления.Вставить("РежимВыполненияОтложенныхОбработчиков",	"");
	ПараметрыОбработчикаОбновления.Вставить("ЕстьОбработанныеОбъекты",					Ложь);
	ПараметрыОбработчикаОбновления.Вставить("ИмяОбработчика",							"");

	Возврат ПараметрыОбработчикаОбновления;
КонецФункции

Функция сОИБ_НовыеСведенияОБлокируемыхОбъектах(СтарыеСведения = Неопределено)
	СведенияОБлокируемыхОбъектах = Новый Структура;
	СведенияОБлокируемыхОбъектах.Вставить("БлокируемыеОбъекты",	Новый Соответствие);
	СведенияОБлокируемыхОбъектах.Вставить("Обработчики",		Новый Соответствие);

	Если ТипЗнч(СтарыеСведения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СведенияОБлокируемыхОбъектах, СтарыеСведения);
	КонецЕсли;

	Возврат СведенияОБлокируемыхОбъектах;
КонецФункции

Процедура сОИБ_ЗаписатьСведенияОБлокируемыхОбъектах(Сведения) Экспорт
	Если Сведения = Неопределено Тогда
		НовоеЗначение = сОИБ_НовыеСведенияОБлокируемыхОбъектах();
	Иначе
		НовоеЗначение = Сведения;
	КонецЕсли;

	МенеджерКонстанты = Константы.СведенияОБлокируемыхОбъектах.СоздатьМенеджерЗначения();
	МенеджерКонстанты.Значение = Новый ХранилищеЗначения(НовоеЗначение);
	ОИБ_ЗаписатьДанные(МенеджерКонстанты);
КонецПроцедуры

Процедура сОИБ_ПриВключенииОтложенногоОбновления(Использование) Экспорт
	ОтборЗаданий = Новый Структура;
	ОтборЗаданий.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОтложенноеОбновлениеИБ);
	Задания = РегламентныеЗаданияСервер.РЗ_НайтиЗадания(ОтборЗаданий);

	Для Каждого Задание Из Задания Цикл
		Если Задание.Использование = Использование Тогда
			Продолжить;
		КонецЕсли;

		ПараметрыЗадания = Новый Структура("Использование", Использование);
		РегламентныеЗаданияСервер.РЗ_ИзменитьЗадание(Задание.УникальныйИдентификатор, ПараметрыЗадания);
	КонецЦикла;
КонецПроцедуры

Процедура сОИБ_ВыполнитьОтложенноеОбновлениеСейчас(ПараметрыОбновления = Неопределено) Экспорт
	СведенияОбОбновлении = сОИБ_СведенияОбОбновленииИнформационнойБазы();

	Если СведенияОбОбновлении.ВремяОкончаниеОтложенногоОбновления <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если СведенияОбОбновлении.ВремяНачалаОтложенногоОбновления = Неопределено Тогда
		СведенияОбОбновлении.ВремяНачалаОтложенногоОбновления = ТекущаяДатаСеанса();
	КонецЕсли;

	Если ТипЗнч(СведенияОбОбновлении.НомерСеанса) <> Тип("СписокЗначений") Тогда
		СведенияОбОбновлении.НомерСеанса = Новый СписокЗначений;
	КонецЕсли;
	СведенияОбОбновлении.НомерСеанса.Добавить(НомерСеансаИнформационнойБазы());
	сОИБ_ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);

	ОбработчикиВыполнялись = Истина;
	Пока ОбработчикиВыполнялись Цикл
		ОбработчикиВыполнялись = сОИБ_ВыполнитьОтложенныйОбработчикОбновления(ПараметрыОбновления);
		Если ОбработчикиВыполнялись Тогда
			СведенияОбОбновлении = сОИБ_СведенияОбОбновленииИнформационнойБазы();
			Если СведенияОбОбновлении.ОтложенноеОбновлениеЗавершеноУспешно <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция сОИБ_ВыполнитьОтложенныйОбработчикОбновления(ПараметрыОбновления = Неопределено)
	КонтекстОбработчика		= сОИБ_НовыйКонтекстОбработчика();
	ОбработчикОбновления	= сОИБ_НайтиОбработчикОбновления(КонтекстОбработчика, ПараметрыОбновления);

	Если ТипЗнч(ОбработчикОбновления) = Тип("СтрокаТаблицыЗначений") Тогда
		АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено);

		Попытка
			ОбработчикВыполнилсяБезОшибок = Ложь;
			Если ОбработчикОбновления.Многопоточный Тогда
				КонтекстОбработчика.Параметры.Вставить("ОбновляемыеДанные");
				ОбрабатываемыеДанные						= ОбработчикОбновления.ОбрабатываемыеДанные.Получить();
				ПараметрыВыборки							= ОбрабатываемыеДанные.ПараметрыВыборки;
				ПараметрыВыборки.МаксимумВыборки			= 10000;
				ПараметрыПоиска								= сОИБ_НовыеПараметрыПоискаПорции();
				ПараметрыПоиска.ПараметрыВыборки			= ПараметрыВыборки;
				ПараметрыПоиска.ПоследняяВыбраннаяЗапись	= ОбрабатываемыеДанные.ПоследняяВыбраннаяЗапись;
				ПараметрыОбхода								= сОИБ_ПараметрыОбходаДанныхДляОбновления(ПараметрыПоиска);
				Очередь										= КонтекстОбработчика.Параметры.Очередь;
				ИтераторОбхода								= сОИБ_ТекущиеПараметрыОбхода(ПараметрыОбхода);
				ДополнительныеИсточникиДанных				= ПараметрыВыборки.ДополнительныеИсточникиДанных;

				Пока ИтераторОбхода <> Неопределено Цикл
					ОбработчикВыполнилсяБезОшибок	= Ложь;
					СсылочныйОбъект					= ИтераторОбхода.СсылочныйОбъект;
					ТабличныйОбъект					= ИтераторОбхода.ТабличныйОбъект;
					НаборДанных						= сОИБ_НовыйНаборДанныхДляОбновления();
					ЗаписьДанных					= НаборДанных.Добавить();
					ПараметрыВыборки.ДополнительныеИсточникиДанных = ОИБ_ИсточникиДанных(ДополнительныеИсточникиДанных, СсылочныйОбъект,ТабличныйОбъект);
					ЗаписьДанных.Данные				= сОИБ_ВыбратьДанныеПорции(ПараметрыВыборки, Очередь, СсылочныйОбъект, ТабличныйОбъект);
					ЗаписьДанных.СсылочныйОбъект	= СсылочныйОбъект;
					ЗаписьДанных.ТабличныйОбъект	= ТабличныйОбъект;
					ОбновляемыеДанные				= сОИБ_НоваяПорцияДляОбновления();
					ОбновляемыеДанные.НаборДанных	= НаборДанных;

					Если ЗаписьДанных.Данные.Количество() > 0 Тогда
						ОбновляемыеДанные.ПерваяЗапись		= сОИБ_НовыйКлючЗаписиИзТаблицыДанных(
							НаборДанных[0].СсылочныйОбъект,
							НаборДанных[0].ТабличныйОбъект,
							НаборДанных[0].Данные,
							0);

						ОбновляемыеДанные.ПоследняяЗапись	= сОИБ_НовыйКлючЗаписиИзТаблицыДанных(
							НаборДанных[НаборДанных.Количество() - 1].СсылочныйОбъект,
							НаборДанных[НаборДанных.Количество() - 1].ТабличныйОбъект,
							НаборДанных[НаборДанных.Количество() - 1].Данные,
							НаборДанных[НаборДанных.Количество() - 1].Данные.Количество() - 1)
					КонецЕсли;

					КонтекстОбработчика.Параметры.ОбновляемыеДанные	= ОбновляемыеДанные;
					Количество										= ЗаписьДанных.Данные.Количество();
					Если КонтекстОбработчика.ВыполнитьОбработчик Тогда
						сОИБ_ВыполнитьОтложенныйОбработчик(КонтекстОбработчика, АдресРезультата);
					КонецЕсли;
					ОбработчикВыполнилсяБезОшибок = Истина;
					сОИБ_ЗавершитьВыполнениеОтложенногоОбработчика(КонтекстОбработчика, АдресРезультата);

					Если Количество > 0 Тогда
						ОбрабатываемыеДанные.ПоследняяВыбраннаяЗапись = сОИБ_НовыйКлючЗаписиИзТаблицыДанных(
							НаборДанных[НаборДанных.Количество() - 1].СсылочныйОбъект,
							НаборДанных[НаборДанных.Количество() - 1].ТабличныйОбъект,
							НаборДанных[НаборДанных.Количество() - 1].Данные,
							НаборДанных[НаборДанных.Количество() - 1].Данные.Количество() - 1)
					Иначе
						ОбрабатываемыеДанные.ПоследняяВыбраннаяЗапись = Неопределено;
					КонецЕсли;

					сОИБ_СледующиеПараметрыОбхода(ПараметрыОбхода, Количество = ПараметрыВыборки.МаксимумВыборки);
					ИтераторОбхода = сОИБ_ТекущиеПараметрыОбхода(ПараметрыОбхода);
				КонецЦикла;

				ПараметрыВыборки.ДополнительныеИсточникиДанных = ДополнительныеИсточникиДанных;
			Иначе
				Если КонтекстОбработчика.ВыполнитьОбработчик Тогда
					сОИБ_ВыполнитьОтложенныйОбработчик(КонтекстОбработчика, АдресРезультата);
				КонецЕсли;
				ОбработчикВыполнилсяБезОшибок = Истина;
				сОИБ_ЗавершитьВыполнениеОтложенногоОбработчика(КонтекстОбработчика, АдресРезультата);
			КонецЕсли;
		Исключение
			// Если обработчик вызвал исключение, то вызываем процедуру завершения обработчика.
			Если Не ОбработчикВыполнилсяБезОшибок Тогда
				сОИБ_ЗавершитьВыполнениеОтложенногоОбработчика(КонтекстОбработчика, АдресРезультата);
			КонецЕсли;
			сОИБ_ОбработатьИсключениеОбработчика(КонтекстОбработчика, ОбработчикОбновления, ИнформацияОбОшибке());
		КонецПопытки;
	ИначеЕсли ОбработчикОбновления = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Процедура сОИБ_СледующиеПараметрыОбхода(ПараметрыОбхода, ПолнаяВыборка)
	Если Не ПолнаяВыборка Тогда
		Если ПараметрыОбхода.СсылочныйИндекс = 0 Тогда
			ТабличныеОбъекты = ПараметрыОбхода.ТабличныеОбъектыНачало;
		Иначе
			ТабличныеОбъекты = ПараметрыОбхода.ТабличныеОбъектыВсе;
		КонецЕсли;

		Если ПараметрыОбхода.ТабличныйИндекс = ТабличныеОбъекты.ВГраница() Тогда
			ПараметрыОбхода.ТабличныйИндекс = 0;
			ПараметрыОбхода.СсылочныйИндекс = ПараметрыОбхода.СсылочныйИндекс + 1;
		Иначе
			ПараметрыОбхода.ТабличныйИндекс = ПараметрыОбхода.ТабличныйИндекс + 1;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура сОИБ_ЗавершитьВыполнениеОтложенногоОбработчика(КонтекстОбработчика, АдресРезультата) Экспорт
	ОбработчикОбновления	= сОИБ_ОбработчикОбновления(КонтекстОбработчика.ИмяОбработчика);
	сОИБ_УстановитьСвойствоОбработчика(ОбработчикОбновления.ИмяОбработчика, "ОбработкаПорцииЗавершена", Истина);

	сОИБ_ЗагрузитьРезультатВыполненияОбработчика(КонтекстОбработчика, АдресРезультата);
	ПараметрыСеанса.ПараметрыОбработчикаОбновления = КонтекстОбработчика.ПараметрыОбработчикаОбновления;

	Если КонтекстОбработчика.ЗапускВыполненБезОшибок Тогда
		сОИБ_ПослеЗапускаПроцедурыОбработкиДанных(КонтекстОбработчика, КонтекстОбработчика.ИмяОбработчика);
	КонецЕсли;

	сОИБ_ЗавершитьПроцедуруОбработкиДанных(КонтекстОбработчика, КонтекстОбработчика.ИмяОбработчика);
	ПараметрыСеанса.ПараметрыОбработчикаОбновления = Новый ФиксированнаяСтруктура(сОИБ_НовыеПараметрыОбработчикаОбновления());

	Если ОбработчикОбновления.Многопоточный Тогда
		сОИБ_ЗавершитьВыполнениеМногопоточногоОбработчика(КонтекстОбработчика, КонтекстОбработчика.ИмяОбработчика);
	КонецЕсли;

	сОИБ_ЗавершитьВыполнениеОтложенногоОбработчикаОбновления(КонтекстОбработчика);
	сОИБ_РассчитатьВремяВыполненияПроцедурыОбработчика(КонтекстОбработчика, КонтекстОбработчика.ИмяОбработчика)
КонецПроцедуры

Процедура сОИБ_РассчитатьВремяВыполненияПроцедурыОбработчика(КонтекстОбработчика, ИмяОбработчика)
	ОбработчикОбновления				= сОИБ_ОбработчикОбновления(ИмяОбработчика);

	НачалоПроцедурыОбработчика			= ?(КонтекстОбработчика.НачалоПроцедурыОбработчика = Неопределено, 0, КонтекстОбработчика.НачалоПроцедурыОбработчика);
	ЗавершениеПроцедурыОбработчика		= ?(КонтекстОбработчика.ЗавершениеПроцедурыОбработчика = Неопределено, 0, КонтекстОбработчика.ЗавершениеПроцедурыОбработчика);
	ПереданоДанныхДляОбработки			= ?(КонтекстОбработчика.ПереданоДанныхДляОбработки = Неопределено, 0, КонтекстОбработчика.ПереданоДанныхДляОбработки);
	ДлительностьПроцедурыОбработчика	= ЗавершениеПроцедурыОбработчика - НачалоПроцедурыОбработчика;
	НачалоВыполнения					= '00010101' + НачалоПроцедурыОбработчика / 1000;
	ЗавершениеВыполнения				= '00010101' + ЗавершениеПроцедурыОбработчика / 1000;
	СтатистикаВыполнения				= ОбработчикОбновления.СтатистикаВыполнения.Получить();
	СтатистикаНачало					= СтатистикаВыполнения["НачалоПроцедурыОбработчика"];
	СтатистикаЗавершение				= СтатистикаВыполнения["ЗавершениеПроцедурыОбработчика"];
	СтатистикаДанныхДляОбработки		= СтатистикаВыполнения["ПереданоДанныхДляОбработки"];
	СтатистикаДлительность				= СтатистикаВыполнения["ДлительностьПроцедурыОбработчика"];

	Если СтатистикаНачало = Неопределено Тогда
		СтатистикаНачало											= Новый Массив;
		СтатистикаВыполнения["НачалоПроцедурыОбработчика"]			= СтатистикаНачало;
	КонецЕсли;

	Если СтатистикаЗавершение = Неопределено Тогда
		СтатистикаЗавершение										= Новый Массив;
		СтатистикаВыполнения["ЗавершениеПроцедурыОбработчика"]		= СтатистикаЗавершение;
	КонецЕсли;

	Если СтатистикаДанныхДляОбработки = Неопределено Тогда
		СтатистикаДанныхДляОбработки								= Новый Массив;
		СтатистикаВыполнения["ПереданоДанныхДляОбработки"]			= СтатистикаДанныхДляОбработки;
	КонецЕсли;

	Если СтатистикаДлительность = Неопределено Тогда
		СтатистикаДлительность										= Новый Массив;
		СтатистикаВыполнения["ДлительностьПроцедурыОбработчика"]	= СтатистикаДлительность;
	КонецЕсли;

	СтатистикаНачало.Добавить(НачалоВыполнения);
	СтатистикаЗавершение.Добавить(ЗавершениеВыполнения);
	СтатистикаДанныхДляОбработки.Добавить(ПереданоДанныхДляОбработки);
	СтатистикаДлительность.Добавить(ДлительностьПроцедурыОбработчика);

	сОИБ_УстановитьСвойствоОбработчика(ОбработчикОбновления.ИмяОбработчика, "СтатистикаВыполнения", Новый ХранилищеЗначения(СтатистикаВыполнения));
КонецПроцедуры

Процедура сОИБ_ЗавершитьВыполнениеМногопоточногоОбработчика(КонтекстОбработчика, ИмяОбработчика)
	ОбработчикОбновления		= сОИБ_ОбработчикОбновления(ИмяОбработчика);

	ОписаниеПроцедурыЗаполнения	= ОбработчикОбновления.ОбрабатываемыеДанные.Получить();
	ПорцииДляОбновления			= ОписаниеПроцедурыЗаполнения.ПорцииДляОбновления;

	Если ПорцииДляОбновления <> Неопределено Тогда
		ОбновляемыеДанные = КонтекстОбработчика.Параметры.ОбновляемыеДанные;

		Если ОбновляемыеДанные <> Неопределено Тогда
			Порция = ПорцииДляОбновления.Найти(ОбновляемыеДанные.Идентификатор, "Идентификатор");

			Если Порция <> Неопределено Тогда
				ПорцииДляОбновления.Удалить(Порция);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	сОИБ_УстановитьСвойствоОбработчика(ОбработчикОбновления.ИмяОбработчика, "ОбрабатываемыеДанные", Новый ХранилищеЗначения(ОписаниеПроцедурыЗаполнения));
КонецПроцедуры

Процедура сОИБ_ЗавершитьВыполнениеОтложенногоОбработчикаОбновления(КонтекстОбработчика)
	ПараллельныйРежим			= КонтекстОбработчика.ПараллельныйРежим;
	ТекущаяИтерацияОбновления	= КонтекстОбработчика.ТекущаяИтерацияОбновления;

	ОбработчикОбновления		= сОИБ_ОбработчикОбновления(КонтекстОбработчика.ИмяОбработчика);
	УстанавливаемыеСвойства		= Новый Структура;

	Если ОбработчикОбновления.Статус = Перечисления.СтатусыОбработчиковОбновления.Выполнен Тогда
		СведенияОБлокируемыхОбъектах	= сОИБ_СведенияОБлокируемыхОбъектах();
		СведенияОбОбработчике			= СведенияОБлокируемыхОбъектах.Обработчики[ОбработчикОбновления.ИмяОбработчика];
		Если СведенияОбОбработчике <> Неопределено Тогда
			СведенияОбОбработчике.Выполнен = Истина;
			сОИБ_ЗаписатьСведенияОБлокируемыхОбъектах(СведенияОБлокируемыхОбъектах);
		КонецЕсли;
		УстанавливаемыеСвойства.Вставить("ИнформацияОбОшибке", "");

	ИначеЕсли ОбработчикОбновления.Статус = Перечисления.СтатусыОбработчиковОбновления.Выполняется Тогда
		// Если у обработчика стоит высокий приоритет,
		// то он вызывается пять раз, после чего вызывается следующий обработчик.
		ЗапускиСПриоритетом = Неопределено;
		Если ОбработчикОбновления.Приоритет = "ЖелательноБыстрее" Тогда
			СтатистикаВыполнения	= ОбработчикОбновления.СтатистикаВыполнения.Получить();
			ЗапускиСПриоритетом		= СтатистикаВыполнения["ЗапускиСПриоритетом"];
			ЗапускиСПриоритетом		= ?(ЗапускиСПриоритетом = Неопределено, 1, ?(ЗапускиСПриоритетом = 4, 0, ЗапускиСПриоритетом + 1));
			СтатистикаВыполнения.Вставить("ЗапускиСПриоритетом",		ЗапускиСПриоритетом);
			УстанавливаемыеСвойства.Вставить("СтатистикаВыполнения",	Новый ХранилищеЗначения(СтатистикаВыполнения));
		КонецЕсли;

		Если ЗапускиСПриоритетом = Неопределено Или ЗапускиСПриоритетом = 0 Тогда
			УстанавливаемыеСвойства.Вставить("ИтерацияЗапуска", ТекущаяИтерацияОбновления);
		КонецЕсли;
	Иначе
		УстанавливаемыеСвойства.Вставить("ИтерацияЗапуска", ТекущаяИтерацияОбновления);
	КонецЕсли;

	сОИБ_УстановитьСвойстваОбработчика(ОбработчикОбновления.ИмяОбработчика, УстанавливаемыеСвойства);

	// В параллельном режиме обновление нужно останавливать, если обработчик не удалось выполнить,
	// т.к. от данных, которые он обрабатывает, могут зависеть другие обработчики.
	Если ПараллельныйРежим И ОбработчикОбновления.Статус = Перечисления.СтатусыОбработчиковОбновления.Ошибка И ОбработчикОбновления.ЧислоПопыток >= сОИБ_МаксимумПопытокОбновления(ОбработчикОбновления) Тогда
		СведенияОбОбновлении										= сОИБ_СведенияОбОбновленииИнформационнойБазы();
		СведенияОбОбновлении.ВремяОкончаниеОтложенногоОбновления	= ТекущаяДатаСеанса();
		СведенияОбОбновлении.ОтложенноеОбновлениеЗавершеноУспешно	= Ложь;
		сОИБ_ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
		Константы.ОтложенноеОбновлениеЗавершеноУспешно.Установить(Ложь);
		Если Не БазоваяПодсистемаСервер.ОН_ЭтоПодчиненныйУзелРИБ() Тогда
			Константы.ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно.Установить(Ложь);
		КонецЕсли;

		ШаблонОшибки = "Не удалось выполнить обработчик обновления ""%1"". Подробнее в журнале регистрации.";

		ВызватьИсключение СтрШаблон(ШаблонОшибки, КонтекстОбработчика.ИмяОбработчика);
	КонецЕсли;
КонецПроцедуры

Функция сОИБ_СведенияОБлокируемыхОбъектах() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	СведенияОБлокируемыхОбъектах = Константы.СведенияОБлокируемыхОбъектах.Получить().Получить();
	Если ТипЗнч(СведенияОБлокируемыхОбъектах) <> Тип("Структура") Тогда
		Возврат сОИБ_НовыеСведенияОБлокируемыхОбъектах();
	КонецЕсли;

	СведенияОБлокируемыхОбъектах = сОИБ_НовыеСведенияОБлокируемыхОбъектах(СведенияОБлокируемыхОбъектах);

	Возврат СведенияОБлокируемыхОбъектах;
КонецФункции

Процедура сОИБ_ЗагрузитьРезультатВыполненияОбработчика(КонтекстОбработчика, АдресРезультата)
	Если АдресРезультата <> Неопределено Тогда
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Иначе
		Результат = Неопределено;
	КонецЕсли;

	Если Результат <> Неопределено Тогда
		Если КонтекстОбработчика.ЗаписыватьВЖурнал Тогда
			КонтекстОбработчика.ДетальноеОписаниеОбработчика.Параметры = Результат.Параметры;
		КонецЕсли;

		КонтекстОбработчика.ЕстьНеЗакрытыеТранзакции		= Результат.ЕстьНеЗакрытыеТранзакции;
		КонтекстОбработчика.ЗавершениеПроцедурыОбработчика	= Результат.ЗавершениеПроцедурыОбработчика;
		КонтекстОбработчика.ИнформацияОбОшибке				= Результат.ИнформацияОбОшибке;
		КонтекстОбработчика.НачалоПроцедурыОбработчика		= Результат.НачалоПроцедурыОбработчика;
		КонтекстОбработчика.ПереданоДанныхДляОбработки		= Результат.ПереданоДанныхДляОбработки;
		КонтекстОбработчика.Параметры						= Результат.Параметры;
		КонтекстОбработчика.ПараметрыОбработчикаОбновления	= Результат.ПараметрыОбработчикаОбновления;
	КонецЕсли;
КонецПроцедуры

Процедура сОИБ_ПослеЗапускаПроцедурыОбработкиДанных(КонтекстОбработчика, ИмяОбработчика)
	ОбработчикОбновления	= сОИБ_ОбработчикОбновления(ИмяОбработчика);
	Параметры				= КонтекстОбработчика.Параметры;
	ПараметрыОбновления		= КонтекстОбработчика.ПараметрыОбновления;
	УстанавливаемыеСвойства	= Новый Структура;

	Попытка
		ЗавершениеОбработкиДанных = ТекущаяУниверсальнаяДатаВМиллисекундах();

		Если Параметры.ОбработкаЗавершена = Неопределено Тогда
			ТекстОшибки = "Обработчик обновления не инициализировал параметр ОбработкаЗавершена.
			|Выполнение прервано из-за явной ошибки в коде обработчика.";

			ВызватьИсключение ТекстОшибки;
		КонецЕсли;

		СтатистикаВыполнения		= ОбработчикОбновления.СтатистикаВыполнения.Получить();
		ДобавитьКоличествоЗапусков	= Истина;
		Если Параметры.ОбработкаЗавершена Тогда
			СтатистикаВыполнения.Вставить("ЗавершениеОбработкиДанных",	ТекущаяДатаСеанса());

			УстанавливаемыеСвойства.Вставить("Статус",					Перечисления.СтатусыОбработчиковОбновления.Выполнен);
			УстанавливаемыеСвойства.Вставить("Приоритет",				"ВПлановомПорядке");

			// Запись прогресса обновления.
			Если ПараметрыОбновления.Свойство("ВФоне")
				И ПараметрыОбновления.ВФоне Тогда
				ХодВыполненияОбработчиков						= ПараметрыОбновления.ХодВыполненияОбработчиков;
				ХодВыполненияОбработчиков.ВыполненоОбработчиков	= ХодВыполненияОбработчиков.ВыполненоОбработчиков + 1;
				Прогресс										= 10 + ХодВыполненияОбработчиков.ВыполненоОбработчиков / ХодВыполненияОбработчиков.ВсегоОбработчиков * 90;
				БазоваяПодсистемаСервер.ДО_СообщитьПрогресс(Прогресс);
			КонецЕсли;
		ИначеЕсли ПараметрыОбновления.ПараллельныйРежим И Не КонтекстОбработчика.ПропуститьПроверкуОбработанныхДанных Тогда
			ЕстьОбработанныеОбъекты	= ПараметрыСеанса.ПараметрыОбработчикаОбновления.ЕстьОбработанныеОбъекты;
			ОчередьОбработчика		= ОбработчикОбновления.ОчередьОтложеннойОбработки;

			МинимальнаяОчередь = 0;
			Если Не ЕстьОбработанныеОбъекты Тогда
				МинимальнаяОчередь = сОИБ_МинимальнаяОчередьОтложеннойОбработки();
			КонецЕсли;

			ДобавитьКоличествоЗапусков = (ЕстьОбработанныеОбъекты Или ОчередьОбработчика = МинимальнаяОчередь);

			Если Не ЕстьОбработанныеОбъекты
				И ОчередьОбработчика = МинимальнаяОчередь Тогда
				ЧислоПопыток = ОбработчикОбновления.ЧислоПопыток;
				МаксимумПопыток = сОИБ_МаксимумПопытокОбновления(ОбработчикОбновления) - 1;
				Если ЧислоПопыток >= МаксимумПопыток Тогда
					ТекстИсключения = "Произошло зацикливание процедуры обработки данных. Выполнение прервано.";
					ВызватьИсключение ТекстИсключения;
				Иначе
					ДобавляемоеЧислоПопыток = сОИБ_ДобавляемоеЧислоПопыток(ОбработчикОбновления, КонтекстОбработчика);
					УстанавливаемыеСвойства.Вставить("ЧислоПопыток", ЧислоПопыток + ДобавляемоеЧислоПопыток);
				КонецЕсли;
			Иначе
				УстанавливаемыеСвойства.Вставить("ЧислоПопыток", 0);
			КонецЕсли;
		КонецЕсли;

		// Сохранение данных по процедуре обработки данных.
		Если ОбработчикОбновления.Многопоточный Тогда
			ПрогрессВыполнения = СтатистикаВыполнения["ПрогрессВыполнения"];
			Если ПрогрессВыполнения = Неопределено Тогда
				СтатистикаВыполнения.Вставить("ПрогрессВыполнения", Параметры.ПрогрессВыполнения);
			Иначе
				ОбработаноОбъектов						= Параметры.ПрогрессВыполнения.ОбработаноОбъектов;
				ПрогрессВыполнения.ОбработаноОбъектов	= ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
			КонецЕсли;
		Иначе
			СтатистикаВыполнения.Вставить("ПрогрессВыполнения", Параметры.ПрогрессВыполнения);
		КонецЕсли;

		Если ДобавитьКоличествоЗапусков Тогда
			КоличествоЗапусковПроцедурыОбновления = сОИБ_КоличествоЗапусковПроцедурыОбновления(СтатистикаВыполнения) + 1;
		Иначе
			КоличествоЗапусковПроцедурыОбновления = сОИБ_КоличествоЗапусковПроцедурыОбновления(СтатистикаВыполнения);
		КонецЕсли;

		ДлительностьВыполнения					= ЗавершениеОбработкиДанных - КонтекстОбработчика.НачалоОбработкиДанных;
		Если СтатистикаВыполнения["ДлительностьВыполнения"] <> Неопределено Тогда
			ДлительностьВыполнения = ДлительностьВыполнения + СтатистикаВыполнения["ДлительностьВыполнения"];
		КонецЕсли;
		СтатистикаВыполнения.Вставить("ДлительностьВыполнения",	ДлительностьВыполнения);
		СтатистикаВыполнения.Вставить("КоличествоЗапусков",		КоличествоЗапусковПроцедурыОбновления);

		УстанавливаемыеСвойства.Вставить("СтатистикаВыполнения",			Новый ХранилищеЗначения(СтатистикаВыполнения));
		УстанавливаемыеСвойства.Вставить("ДлительностьОбработки",			ДлительностьВыполнения);
		сОИБ_УстановитьСвойстваОбработчика(ОбработчикОбновления.ИмяОбработчика,	УстанавливаемыеСвойства);
	Исключение
		сОИБ_ОбработатьИсключениеОбработчика(КонтекстОбработчика, ОбработчикОбновления, ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

Процедура сОИБ_ВыполнитьОтложенныйОбработчик(КонтекстОбработчика, АдресРезультата) Экспорт
	ПараметрыСеанса.ПараметрыОбработчикаОбновления = КонтекстОбработчика.ПараметрыОбработчикаОбновления;

	// Зарезервировано для новых подсистем
	Попытка
		ПараметрыВызова	= Новый Массив;
		ПараметрыВызова.Добавить(КонтекстОбработчика.Параметры);
		Результат		= сОИБ_НовыйРезультатВыполненияОтложенногоОбработчика();

		Если КонтекстОбработчика.Параметры.Свойство("ОбновляемыеДанные") Тогда
			ВсегоДанных = 0;
			Для Каждого СтрокаОбновляемыйОбъект Из КонтекстОбработчика.Параметры.ОбновляемыеДанные.НаборДанных Цикл
				ВсегоДанных = ВсегоДанных + СтрокаОбновляемыйОбъект.Данные.Количество();
			КонецЦикла;
			Результат.ПереданоДанныхДляОбработки = ВсегоДанных;
		КонецЕсли;

		Результат.НачалоПроцедурыОбработчика		= ТекущаяУниверсальнаяДатаВМиллисекундах();
		БазоваяПодсистемаСервер.ОН_ВыполнитьМетодКонфигурации(КонтекстОбработчика.ИмяОбработчика, ПараметрыВызова);
		Результат.ЗавершениеПроцедурыОбработчика	= ТекущаяУниверсальнаяДатаВМиллисекундах();

		Результат.Параметры							= КонтекстОбработчика.Параметры;
		Результат.ПараметрыОбработчикаОбновления	= ПараметрыСеанса.ПараметрыОбработчикаОбновления;

		Попытка
			сОИБ_ПроверитьВложеннуюТранзакцию(КонтекстОбработчика.ТранзакцияАктивнаНаНачалоВыполнения,
				КонтекстОбработчика.ИмяОбработчика);
		Исключение
			Результат.ИнформацияОбОшибке		= ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Результат.ЕстьНеЗакрытыеТранзакции	= Истина;

			Пока ТранзакцияАктивна() Цикл
				ОтменитьТранзакцию();
			КонецЦикла;
		КонецПопытки;

		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		// Зарезервировано для новых подсистем
		ПараметрыСеанса.ПараметрыОбработчикаОбновления = Новый ФиксированнаяСтруктура(сОИБ_НовыеПараметрыОбработчикаОбновления());
	Исключение
		// Зарезервировано для новых подсистем
		ПараметрыСеанса.ПараметрыОбработчикаОбновления = Новый ФиксированнаяСтруктура(сОИБ_НовыеПараметрыОбработчикаОбновления());

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Процедура сОИБ_ПроверитьВложеннуюТранзакцию(ТранзакцияАктивнаНаНачалоВыполнения, НазваниеОбработчика)
	ИмяСобытия = "Обновление информационной базы.Выполнение обработчиков";
	Если ТранзакцияАктивнаНаНачалоВыполнения Тогда

		Если ТранзакцияАктивна() Тогда
			// Проверка поглощенных исключений в обработчиках.
			Попытка
				Константы.РаботаВМоделиСервиса.Получить();
			Исключение
				ШаблонКомментария = "Ошибка выполнения обработчика обновления %1:
				|Обработчиком обновления было поглощено исключение при активной внешней транзакции.
				|При активных транзакциях, открытых выше по стеку, исключение также необходимо пробрасывать выше по стеку.";
				Комментарий = СтрШаблон(ШаблонКомментария, НазваниеОбработчика);

				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

				ВызватьИсключение(Комментарий);
			КонецПопытки;
		Иначе
			ШаблонКомментария = "Ошибка выполнения обработчика обновления %1:
			|Обработчиком обновления была закрыта лишняя транзакция, открытая ранее (выше по стеку).";
			Комментарий = СтрШаблон(ШаблонКомментария, НазваниеОбработчика);

			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

			ВызватьИсключение(Комментарий);
		КонецЕсли;
	Иначе
		Если ТранзакцияАктивна() Тогда
			ШаблонКомментария = "Ошибка выполнения обработчика обновления %1:
			|Открытая внутри обработчика обновления транзакция осталась активной (не была закрыта или отменена).";
			Комментарий = СтрШаблон(ШаблонКомментария, НазваниеОбработчика);

			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

			ВызватьИсключение(Комментарий);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция сОИБ_НовыйРезультатВыполненияОтложенногоОбработчика()
	Результат = Новый Структура;
	Результат.Вставить("ЕстьНеЗакрытыеТранзакции", Ложь);
	Результат.Вставить("ЗавершениеПроцедурыОбработчика");
	Результат.Вставить("ИнформацияОбОшибке");
	Результат.Вставить("НачалоПроцедурыОбработчика");
	Результат.Вставить("ПереданоДанныхДляОбработки");
	Результат.Вставить("Параметры");
	Результат.Вставить("ПараметрыОбработчикаОбновления");

	Возврат Результат;
КонецФункции

Функция сОИБ_НовыйКонтекстОбработчика()
	КонтекстОбработчика = Новый Структура;

	КонтекстОбработчика.Вставить("ВыполнитьОбработчик", Ложь);
	КонтекстОбработчика.Вставить("ДетальноеОписаниеОбработчика");
	КонтекстОбработчика.Вставить("ЕстьНеЗакрытыеТранзакции", Ложь);
	КонтекстОбработчика.Вставить("ЗавершениеПроцедурыОбработчика");
	КонтекстОбработчика.Вставить("ЗаписыватьВЖурнал");
	КонтекстОбработчика.Вставить("ЗапускВыполненБезОшибок", Ложь);
	КонтекстОбработчика.Вставить("ИдентификаторОбработчика");
	КонтекстОбработчика.Вставить("ИмяОбработчика");
	КонтекстОбработчика.Вставить("ИндексОписанияЦиклаОбновления");
	КонтекстОбработчика.Вставить("ИндексТекущегоЦиклаОбновления");
	КонтекстОбработчика.Вставить("ИнформацияОбОшибке");
	КонтекстОбработчика.Вставить("НачалоОбработкиДанных");
	КонтекстОбработчика.Вставить("НачалоПроцедурыОбработчика");
	КонтекстОбработчика.Вставить("ПереданоДанныхДляОбработки");
	КонтекстОбработчика.Вставить("ПараллельныйРежим");
	КонтекстОбработчика.Вставить("Параметры");
	КонтекстОбработчика.Вставить("ПараметрыОбновления");
	КонтекстОбработчика.Вставить("ПараметрыОбработчикаОбновления");
	КонтекстОбработчика.Вставить("ПропуститьПроверкуОбработанныхДанных", Ложь);
	КонтекстОбработчика.Вставить("ТекущаяИтерацияОбновления");
	КонтекстОбработчика.Вставить("ТранзакцияАктивнаНаНачалоВыполнения");

	Возврат КонтекстОбработчика;
КонецФункции

Функция сОИБ_НайтиОбработчикОбновления(КонтекстОбработчика, ПараметрыОбновления = Неопределено)
	СведенияОбОбновлении = сОИБ_СведенияОбОбновленииИнформационнойБазы();

	// Получение групп, по которым еще не выполнены все обработчики обновления.
	Запрос			= Новый Запрос;
	Запрос.Текст	=
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбработчикиОбновления.ГруппаОбновления КАК ГруппаОбновления
		|ИЗ
		|	РегистрСведений.ОбработчикиОбновления КАК ОбработчикиОбновления
		|ГДЕ
		|	ОбработчикиОбновления.Статус <> &Статус
		|	И ОбработчикиОбновления.РежимВыполнения = &РежимВыполнения";
	Запрос.УстановитьПараметр("Статус",				Перечисления.СтатусыОбработчиковОбновления.Выполнен);
	Запрос.УстановитьПараметр("РежимВыполнения",	Перечисления.РежимыВыполненияОбработчиков.Отложенно);
	ГруппыОбработчиковИЗависимость	= Запрос.Выполнить().Выгрузить();

	// Выбор невыполненных обработчиков обновления.
	Запрос			= Новый Запрос;
	Запрос.Текст	=
		"ВЫБРАТЬ
		|	ОбработчикиОбновления.ИмяОбработчика КАК ИмяОбработчика,
		|	ОбработчикиОбновления.Статус КАК Статус,
		|	ОбработчикиОбновления.Версия КАК Версия,
		|	ОбработчикиОбновления.ИмяБиблиотеки КАК ИмяБиблиотеки,
		|	ОбработчикиОбновления.ДлительностьОбработки КАК ДлительностьОбработки,
		|	ОбработчикиОбновления.РежимВыполнения КАК РежимВыполнения,
		|	ОбработчикиОбновления.ВерсияРегистрации КАК ВерсияРегистрации,
		|	ОбработчикиОбновления.ВерсияПорядок КАК ВерсияПорядок,
		|	ОбработчикиОбновления.Идентификатор КАК Идентификатор,
		|	ОбработчикиОбновления.ЧислоПопыток КАК ЧислоПопыток,
		|	ОбработчикиОбновления.ИнформацияОбОшибке КАК ИнформацияОбОшибке,
		|	ОбработчикиОбновления.Комментарий КАК Комментарий,
		|	ОбработчикиОбновления.Приоритет КАК Приоритет,
		|	ОбработчикиОбновления.ПроцедураПроверки КАК ПроцедураПроверки,
		|	ОбработчикиОбновления.ПроцедураЗаполненияДанныхОбновления КАК ПроцедураЗаполненияДанныхОбновления,
		|	ОбработчикиОбновления.ОчередьОтложеннойОбработки КАК ОчередьОтложеннойОбработки,
		|	ОбработчикиОбновления.ЗапускатьТолькоВГлавномУзле КАК ЗапускатьТолькоВГлавномУзле,
		|	ОбработчикиОбновления.ЗапускатьИВПодчиненномУзлеРИБСФильтрами КАК ЗапускатьИВПодчиненномУзлеРИБСФильтрами,
		|	ОбработчикиОбновления.Многопоточный КАК Многопоточный,
		|	ОбработчикиОбновления.ОбработкаПорцииЗавершена КАК ОбработкаПорцииЗавершена,
		|	ОбработчикиОбновления.ГруппаОбновления КАК ГруппаОбновления,
		|	ОбработчикиОбновления.ИтерацияЗапуска КАК ИтерацияЗапуска,
		|	ОбработчикиОбновления.ОбрабатываемыеДанные КАК ОбрабатываемыеДанные,
		|	ОбработчикиОбновления.СтатистикаВыполнения КАК СтатистикаВыполнения,
		|	ОбработчикиОбновления.РежимВыполненияОтложенногоОбработчика КАК РежимВыполненияОтложенногоОбработчика
		|ИЗ
		|	РегистрСведений.ОбработчикиОбновления КАК ОбработчикиОбновления
		|ГДЕ
		|	ОбработчикиОбновления.РежимВыполнения = &РежимВыполнения
		|	И ОбработчикиОбновления.Статус <> &Статус
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГруппаОбновления,
		|	ОчередьОтложеннойОбработки";
	Запрос.УстановитьПараметр("Статус",				Перечисления.СтатусыОбработчиковОбновления.Выполнен);
	Запрос.УстановитьПараметр("РежимВыполнения",	Перечисления.РежимыВыполненияОбработчиков.Отложенно);
	Обработчики	= Запрос.Выполнить().Выгрузить();

	Пока Истина Цикл
		Результат = сОИБ_ОбработчикДляВыполнения(Обработчики, ГруппыОбработчиковИЗависимость, СведенияОбОбновлении);
		Если Результат.ОбработчикДляВыполнения = Неопределено И Результат.ЕстьНевыполненные Тогда
			СведенияОбОбновлении.ТекущаяИтерацияОбновления = СведенияОбОбновлении.ТекущаяИтерацияОбновления + 1;
			сОИБ_ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;

	ОбработчикДляВыполнения = Результат.ОбработчикДляВыполнения;
	Если ОбработчикДляВыполнения = Неопределено Тогда
		Если Результат.ЕстьВыполняющиеся Тогда
			Возврат Истина;
		Иначе
			СведенияОбОбновлении.ВремяОкончаниеОтложенногоОбновления	= ТекущаяДатаСеанса();
			СведенияОбОбновлении.ОтложенноеОбновлениеЗавершеноУспешно	= Результат.ЗавершеноУспешно;
			сОИБ_ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
			Константы.ОтложенноеОбновлениеЗавершеноУспешно.Установить(Результат.ЗавершеноУспешно);
			Если Не БазоваяПодсистемаСервер.ОН_ЭтоПодчиненныйУзелРИБ() Тогда
				Константы.ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно.Установить(Результат.ЗавершеноУспешно);
			КонецЕсли;

			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	ПараллельныйРежим = (ОбработчикДляВыполнения.РежимВыполненияОтложенногоОбработчика = Перечисления.РежимыВыполненияОтложенныхОбработчиков.Параллельно);
	ПараметрыОбновления = ?(ПараметрыОбновления = Неопределено, Новый Структура, ПараметрыОбновления);
	ПараметрыОбновления.Вставить("ПараллельныйРежим", ПараллельныйРежим);
	Если ПараллельныйРежим Тогда
		ПараметрыОбновления.Вставить("ОчередьОбработчиков",			сОИБ_ОчередьОбработчиковГруппыОбновления(ОбработчикДляВыполнения.ГруппаОбновления));
		ПараметрыОбновления.Вставить("ЕстьОбработчикиГлавногоУзла",	сОИБ_ЕстьОбработчикиТолькоГлавногоУзла());
	КонецЕсли;

	сОИБ_УстановитьПараметрыОбработчикаОбновления(ОбработчикДляВыполнения, Истина, ПараллельныйРежим);
	сОИБ_ПередЗапускомПроцедурыОбработкиДанных(КонтекстОбработчика, ОбработчикДляВыполнения, ПараметрыОбновления, СведенияОбОбновлении);

	КонтекстОбработчика.ИдентификаторОбработчика		= ОбработчикДляВыполнения.Идентификатор;
	КонтекстОбработчика.ИмяОбработчика					= ОбработчикДляВыполнения.ИмяОбработчика;
	КонтекстОбработчика.ПараллельныйРежим				= ПараллельныйРежим;
	КонтекстОбработчика.ПараметрыОбновления				= ПараметрыОбновления;
	КонтекстОбработчика.ПараметрыОбработчикаОбновления	= ПараметрыСеанса.ПараметрыОбработчикаОбновления;
	КонтекстОбработчика.ТекущаяИтерацияОбновления		= СведенияОбОбновлении.ТекущаяИтерацияОбновления;

	сОИБ_УстановитьПараметрыОбработчикаОбновления(Неопределено);

	Возврат ОбработчикДляВыполнения;
КонецФункции

Функция сОИБ_ЕстьПорцииДляОбновления(ОбработчикОбновления)
	Описание = ОбработчикОбновления.ОбрабатываемыеДанные.Получить();

	Если Описание.ВыполняетсяПоискПорции Тогда
		Возврат Ложь;
	Иначе
		Если Описание.ПорцииДляОбновления <> Неопределено И Описание.ПорцииДляОбновления.Количество() > 0 Тогда
			Для каждого Порция Из Описание.ПорцииДляОбновления Цикл
				Если Не Порция.Обрабатывается Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;

			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Процедура сОИБ_ОтметитьЗациклившиесяОбработчики()
	Запрос			= Новый Запрос;
	Запрос.Текст	=
		"ВЫБРАТЬ
		|	ОбработчикиОбновления.ИмяОбработчика КАК ИмяОбработчика,
		|	ОбработчикиОбновления.Статус КАК Статус,
		|	ОбработчикиОбновления.ЧислоПопыток КАК ЧислоПопыток,
		|	ОбработчикиОбновления.Многопоточный,
		|	ОбработчикиОбновления.ОбрабатываемыеДанные
		|ИЗ
		|	РегистрСведений.ОбработчикиОбновления КАК ОбработчикиОбновления
		|ГДЕ
		|	ОбработчикиОбновления.РежимВыполнения = &РежимВыполнения
		|	И ОбработчикиОбновления.Статус = &Статус";
	Запрос.УстановитьПараметр("РежимВыполнения",	Перечисления.РежимыВыполненияОбработчиков.Отложенно);
	Запрос.УстановитьПараметр("Статус",				Перечисления.СтатусыОбработчиковОбновления.Выполняется);
	Выполняющиеся = Запрос.Выполнить().Выгрузить();

	Для каждого ОбработчикОбновления Из Выполняющиеся Цикл
		МаксимумПопыток = сОИБ_МаксимумПопытокОбновления(ОбработчикОбновления) - 1;

		Если ОбработчикОбновления.ЧислоПопыток >= МаксимумПопыток Тогда
			ИнформацияОбОшибке	= "Произошло зацикливание процедуры обработки данных. Выполнение прервано.";
			сОИБ_УстановитьСтатусОбработчика(ОбработчикОбновления.ИмяОбработчика, "Ошибка", ИнформацияОбОшибке);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция сОИБ_ВсеОбработчикиЗациклились()
	Запрос			= Новый Запрос;
	Запрос.Текст	=
		"ВЫБРАТЬ
		|	ОбработчикиОбновления.ИмяОбработчика КАК ИмяОбработчика,
		|	ОбработчикиОбновления.Многопоточный КАК Многопоточный,
		|	ОбработчикиОбновления.ОбрабатываемыеДанные КАК ОбрабатываемыеДанные,
		|	ОбработчикиОбновления.Статус КАК Статус,
		|	ОбработчикиОбновления.ЧислоПопыток КАК ЧислоПопыток
		|ИЗ
		|	РегистрСведений.ОбработчикиОбновления КАК ОбработчикиОбновления
		|ГДЕ
		|	ОбработчикиОбновления.РежимВыполнения = &РежимВыполнения
		|	И ОбработчикиОбновления.Статус = &Статус";
	Запрос.УстановитьПараметр("РежимВыполнения",	Перечисления.РежимыВыполненияОбработчиков.Отложенно);
	Запрос.УстановитьПараметр("Статус",				Перечисления.СтатусыОбработчиковОбновления.Выполняется);
	Выполняющиеся	= Запрос.Выполнить().Выгрузить();

	Запрос			= Новый Запрос;
	Запрос.Текст	=
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ОбработчикиОбновления КАК ОбработчикиОбновления
		|ГДЕ
		|	ОбработчикиОбновления.РежимВыполнения = &РежимВыполнения
		|	И ОбработчикиОбновления.Статус = &Статус";
	Запрос.УстановитьПараметр("РежимВыполнения",	Перечисления.РежимыВыполненияОбработчиков.Отложенно);
	Запрос.УстановитьПараметр("Статус",				Перечисления.СтатусыОбработчиковОбновления.Ошибка);
	СОшибками = Запрос.Выполнить().Выгрузить();

	Если Выполняющиеся.Количество() > 0 Тогда
		ЕстьПревысившие = Ложь;
		ЕстьНормальные = Ложь;

		Для каждого ОбработчикОбновления Из Выполняющиеся Цикл
			МаксимумПопыток = сОИБ_МаксимумПопытокОбновления(ОбработчикОбновления) - 1;

			Если ОбработчикОбновления.ЧислоПопыток < МаксимумПопыток Тогда
				ЕстьНормальные = Истина;
			Иначе
				ЕстьПревысившие = Истина;
			КонецЕсли;

			Если ЕстьНормальные И ЕстьПревысившие Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если ЕстьПревысившие Тогда
			Если ЕстьНормальные Тогда
				Возврат СОшибками.Количество() > 0;
			Иначе
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Процедура сОИБ_УстановитьПараметрыОбработчикаОбновления(ОбработчикОбновления, Отложенно = Ложь, Параллельно = Ложь)
	Если ОбработчикОбновления = Неопределено Тогда
		ПараметрыСеанса.ПараметрыОбработчикаОбновления = Новый ФиксированнаяСтруктура(сОИБ_НовыеПараметрыОбработчикаОбновления());

		Возврат;
	КонецЕсли;

	Если Отложенно Тогда
		РежимВыполнения	= "Отложенно";
		ИмяОбработчика	= ОбработчикОбновления.ИмяОбработчика;
	Иначе
		РежимВыполнения	= "Монопольно";
		ИмяОбработчика	= ОбработчикОбновления.Процедура;
	КонецЕсли;

	Если Параллельно Тогда
		РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	Иначе
		РежимВыполненияОтложенныхОбработчиков = "Последовательно";
	КонецЕсли;

	ПараметрыОбработчикаОбновления											= сОИБ_НовыеПараметрыОбработчикаОбновления();
	ПараметрыОбработчикаОбновления.ЗапускатьТолькоВГлавномУзле				= ОбработчикОбновления.ЗапускатьТолькоВГлавномУзле;
	ПараметрыОбработчикаОбновления.ЗапускатьИВПодчиненномУзлеРИБСФильтрами	= ОбработчикОбновления.ЗапускатьИВПодчиненномУзлеРИБСФильтрами;
	ПараметрыОбработчикаОбновления.ОчередьОтложеннойОбработки				= ОбработчикОбновления.ОчередьОтложеннойОбработки;
	ПараметрыОбработчикаОбновления.РежимВыполнения							= РежимВыполнения;
	ПараметрыОбработчикаОбновления.РежимВыполненияОтложенныхОбработчиков	= РежимВыполненияОтложенныхОбработчиков;
	ПараметрыОбработчикаОбновления.ЕстьОбработанныеОбъекты					= Ложь;
	ПараметрыОбработчикаОбновления.ИмяОбработчика							= ИмяОбработчика;

	ПараметрыСеанса.ПараметрыОбработчикаОбновления = Новый ФиксированнаяСтруктура(ПараметрыОбработчикаОбновления);
КонецПроцедуры

Процедура сОИБ_ПередЗапускомПроцедурыОбработкиДанных(КонтекстОбработчика, ОбработчикОбновления, ПараметрыОбновления, СведенияОбОбновлении)
	КонтекстОбработчика.ЗаписыватьВЖурнал					= Константы.ДетализироватьОбновлениеИБВЖурналеРегистрации.Получить();
	КонтекстОбработчика.ТранзакцияАктивнаНаНачалоВыполнения	= ТранзакцияАктивна();
	ИмяОбработчика											= ОбработчикОбновления.ИмяОбработчика;

	Попытка
		КонтекстОбработчика.ЗапускВыполненБезОшибок	= Истина;
		СообщениеОЗапущенномОбработчике				= СтрШаблон("Выполняется процедура обновления ""%1"".", ИмяОбработчика);
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация,,, СообщениеОЗапущенномОбработчике, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

		// Прогресс выполнения процедуры обработки данных.
		ПрогрессВыполнения = Новый Структура;
		ПрогрессВыполнения.Вставить("ВсегоОбъектов", 0);
		ПрогрессВыполнения.Вставить("ОбработаноОбъектов", 0);
		СтатистикаВыполнения = ОбработчикОбновления.СтатистикаВыполнения.Получить();
		Если СтатистикаВыполнения["ПрогрессВыполнения"] <> Неопределено И ТипЗнч(СтатистикаВыполнения["ПрогрессВыполнения"]) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ПрогрессВыполнения, СтатистикаВыполнения["ПрогрессВыполнения"]);
		КонецЕсли;

		// Инициализация параметров обработчика.
		Параметры = СтатистикаВыполнения["ПараметрыОбработчика"];
		Если Параметры = Неопределено Тогда
			Параметры = Новый Структура;
		КонецЕсли;

		КонтекстОбработчика.Параметры = Параметры;

		Если ПараметрыОбновления.ПараллельныйРежим Тогда
			Параметры.Вставить("ОбработкаЗавершена", Неопределено);
		Иначе
			Параметры.Вставить("ОбработкаЗавершена", Истина);
		КонецЕсли;

		Параметры.Вставить("ПрогрессВыполнения",	ПрогрессВыполнения);
		Параметры.Вставить("Очередь",				ОбработчикОбновления.ОчередьОтложеннойОбработки);

		Если КонтекстОбработчика.ЗаписыватьВЖурнал Тогда
			КонтекстОбработчика.ДетальноеОписаниеОбработчика = сОИБ_ПодготовитьДетальнуюИнформациюОХодеОбновления(ОбработчикОбновления,
				Параметры,
				ОбработчикОбновления.ИмяБиблиотеки,
				Истина);
		КонецЕсли;

		КоличествоЗапусковПроцедурыОбновления = сОИБ_КоличествоЗапусковПроцедурыОбновления(СтатистикаВыполнения);

		Если КоличествоЗапусковПроцедурыОбновления > 10000 Тогда // Защита от зацикливания.
			Если ПараметрыОбновления.ПараллельныйРежим
				И БазоваяПодсистемаСервер.ОН_ЭтоПодчиненныйУзелРИБ()
				И ПараметрыОбновления.ЕстьОбработчикиГлавногоУзла Тогда
				ТекстОшибки = "Превышено допустимое количество запусков процедуры обновления.
					|Убедитесь, что дополнительные процедуры обработки данных в главном узле
					|полностью завершились, выполните синхронизацию данных и повторно
					|запустите выполнение процедур обработки данных в данном узле.";
			Иначе
				ТекстОшибки = "Превышено допустимое количество запусков процедуры обновления.
					|Выполнение прервано для предотвращения зацикливания механизма обработки данных.";
			КонецЕсли;

			МинимальнаяОчередь = сОИБ_МинимальнаяОчередьОтложеннойОбработки();

			Если Не ПараметрыОбновления.ПараллельныйРежим Или МинимальнаяОчередь = ОбработчикОбновления.ОчередьОтложеннойОбработки Тогда
				ЧислоПопыток	= сОИБ_МаксимумПопытокОбновления(ОбработчикОбновления);
				сОИБ_УстановитьСвойствоОбработчика(ОбработчикОбновления.ИмяОбработчика, "ЧислоПопыток", ЧислоПопыток);

				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
		КонецЕсли;

		// Запуск отложенного обработчика обновления.
		Если СтатистикаВыполнения["НачалоОбработкиДанных"] = Неопределено Тогда
			СтатистикаВыполнения.Вставить("НачалоОбработкиДанных", ТекущаяДатаСеанса());
		КонецЕсли;

		Свойства = Новый Структура;
		Свойства.Вставить("Статус",						Перечисления.СтатусыОбработчиковОбновления.Выполняется);
		Свойства.Вставить("ОбработкаПорцииЗавершена",	Ложь);
		Свойства.Вставить("СтатистикаВыполнения",		Новый ХранилищеЗначения(СтатистикаВыполнения));
		сОИБ_УстановитьСвойстваОбработчика(ОбработчикОбновления.ИмяОбработчика, Свойства);

		КонтекстОбработчика.НачалоОбработкиДанных = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Если ПараметрыОбновления.ПараллельныйРежим
			И БазоваяПодсистемаСервер.ОН_ЭтоПодчиненныйУзелРИБ()
			И ОбработчикОбновления.ЗапускатьТолькоВГлавномУзле Тогда
			// В подчиненном узле РИБ только проверяем, что обрабатываемые обработчиком данные
			// пришли из главного узла и обновляем статус обработчика.
			КонтекстОбработчика.ПропуститьПроверкуОбработанныхДанных	= Истина;
			ОписаниеОбрабатываемыхДанных								= ОбработчикОбновления.ОбрабатываемыеДанные.Получить();
			ДанныеОбработчика											= ОписаниеОбрабатываемыхДанных.ДанныеОбработчика;

			Если ДанныеОбработчика.Количество() = 0 Тогда
				Параметры.ОбработкаЗавершена = Истина;
			Иначе
				Для Каждого ОбрабатываемыйОбъект Из ДанныеОбработчика Цикл
					Параметры.ОбработкаЗавершена = Не ОИБ_ЕстьДанныеДляОбработки(
						ОбработчикОбновления.ОчередьОтложеннойОбработки,
						ОбрабатываемыйОбъект.Ключ,
						Неопределено);
					Если Не Параметры.ОбработкаЗавершена Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			КонтекстОбработчика.ВыполнитьОбработчик = Истина;
			Возврат;
		КонецЕсли;
	Исключение
		сОИБ_ОбработатьИсключениеОбработчика(КонтекстОбработчика, ОбработчикОбновления, ИнформацияОбОшибке());
		КонтекстОбработчика.ЗапускВыполненБезОшибок = Ложь;
	КонецПопытки;

	сОИБ_ЗавершитьПроцедуруОбработкиДанных(КонтекстОбработчика, ОбработчикОбновления.ИмяОбработчика);
КонецПроцедуры

Процедура сОИБ_ЗавершитьПроцедуруОбработкиДанных(КонтекстОбработчика, ИмяОбработчика)
	ОбработчикОбновления = сОИБ_ОбработчикОбновления(ИмяОбработчика);

	Параметры = КонтекстОбработчика.Параметры;

	// Если обработчик обновления передал параметры, их нужно сохранить.
	ПереданныеПараметры		= сОИБ_ПереданныеПараметрыОбработчикаОбновления(Параметры);
	СтатистикаВыполнения	= ОбработчикОбновления.СтатистикаВыполнения.Получить();
	СтатистикаВыполнения.Вставить("ПараметрыОбработчика", ПереданныеПараметры);
	сОИБ_УстановитьСвойствоОбработчика(ОбработчикОбновления.ИмяОбработчика, "СтатистикаВыполнения", Новый ХранилищеЗначения(СтатистикаВыполнения));

	Если КонтекстОбработчика.ЕстьНеЗакрытыеТранзакции Тогда
		// В случае нахождения вложенной транзакции обработчик обновления повторно не вызывается.
		ОбработчикОбновления.Статус				= Перечисления.СтатусыОбработчиковОбновления.Ошибка;
		ОбработчикОбновления.ИнформацияОбОшибке = Строка(ОбработчикОбновления.ИнформацияОбОшибке)
			+ Символы.ПС + КонтекстОбработчика.ИнформацияОбОшибке;

		ОбработчикОбновления.ЧислоПопыток = сОИБ_МаксимумПопытокОбновления(ОбработчикОбновления);

		Свойства = Новый Структура;
		Свойства.Вставить("ЧислоПопыток",		ОбработчикОбновления.ЧислоПопыток);
		Свойства.Вставить("Статус",				ОбработчикОбновления.Статус);
		Свойства.Вставить("ИнформацияОбОшибке",	ОбработчикОбновления.ИнформацияОбОшибке);
		сОИБ_УстановитьСвойстваОбработчика(ОбработчикОбновления.ИмяОбработчика, Свойства);
	КонецЕсли;

	Если КонтекстОбработчика.ЗаписыватьВЖурнал Тогда
		сОИБ_ЗаписатьДетальнуюИнформациюОХодеОбновления(КонтекстОбработчика.ДетальноеОписаниеОбработчика);
	КонецЕсли;
КонецПроцедуры

Функция сОИБ_ПодготовитьДетальнуюИнформациюОХодеОбновления(Обработчик, Параметры, ИдентификаторБиблиотеки, ОбработчикОтложенный = Ложь)
	ОписаниеОбработчика = Новый Структура;
	ОписаниеОбработчика.Вставить("Библиотека", ИдентификаторБиблиотеки);
	Если ОбработчикОтложенный Тогда
		ОписаниеОбработчика.Вставить("Версия",		Обработчик.Версия);
		ОписаниеОбработчика.Вставить("Процедура",	Обработчик.ИмяОбработчика);
	Иначе
		ОписаниеОбработчика.Вставить("Версия",		Обработчик.Версия);
		ОписаниеОбработчика.Вставить("Процедура",	Обработчик.Процедура);
	КонецЕсли;
	ОписаниеОбработчика.Вставить("ВерсияРегистрации",	Обработчик.ВерсияРегистрации);
	ОписаниеОбработчика.Вставить("Параметры",			Параметры);

	Если ОбработчикОтложенный Тогда
		ОписаниеОбработчика.Вставить("РежимВыполнения",	"Отложенно");
	ИначеЕсли ЗначениеЗаполнено(Обработчик.РежимВыполнения) Тогда
		ОписаниеОбработчика.Вставить("РежимВыполнения",	Обработчик.РежимВыполнения);
	Иначе
		ОписаниеОбработчика.Вставить("РежимВыполнения",	"Монопольно");
	КонецЕсли;

	ОписаниеОбработчика.Вставить("ОбластьДанныхЗначение",		-1);
	ОписаниеОбработчика.Вставить("ОбластьДанныхИспользование",	Ложь);
	ОписаниеОбработчика.Вставить("ЗначениеНаНачало",			ТекущаяУниверсальнаяДатаВМиллисекундах());

	Возврат ОписаниеОбработчика;
КонецФункции

Функция сОИБ_КоличествоЗапусковПроцедурыОбновления(СтатистикаВыполнения)
	КоличествоЗапусковПроцедурыОбновления = СтатистикаВыполнения["КоличествоЗапусков"];

	Если КоличествоЗапусковПроцедурыОбновления = Неопределено Тогда
		КоличествоЗапусковПроцедурыОбновления = 0;
	КонецЕсли;

	Возврат КоличествоЗапусковПроцедурыОбновления;
КонецФункции

Функция сОИБ_МинимальнаяОчередьОтложеннойОбработки()
	Запрос			= Новый Запрос;
	Запрос.Текст	=
		"ВЫБРАТЬ
		|	МИНИМУМ(ОбработчикиОбновления.ОчередьОтложеннойОбработки) КАК Очередь
		|ИЗ
		|	РегистрСведений.ОбработчикиОбновления КАК ОбработчикиОбновления
		|ГДЕ
		|	ОбработчикиОбновления.РежимВыполнения = &РежимВыполнения
		|	И ОбработчикиОбновления.РежимВыполненияОтложенногоОбработчика = &РежимВыполненияОтложенногоОбработчика
		|	И ОбработчикиОбновления.Статус <> &Статус";
	Запрос.УстановитьПараметр("РежимВыполнения",						Перечисления.РежимыВыполненияОбработчиков.Отложенно);
	Запрос.УстановитьПараметр("Статус",									Перечисления.СтатусыОбработчиковОбновления.Выполнен);
	Запрос.УстановитьПараметр("РежимВыполненияОтложенногоОбработчика",	Перечисления.РежимыВыполненияОтложенныхОбработчиков.Параллельно);

	Результат = Запрос.Выполнить().Выгрузить();

	Возврат Результат[0].Очередь;
КонецФункции

Функция сОИБ_МаксимумПопытокОбновления(ОбработчикОбновления)
	Если ОбработчикОбновления.Многопоточный Тогда
		ОбрабатываемыеДанные	= ОбработчикОбновления.ОбрабатываемыеДанные.Получить();
		ПараметрыВыборки		= ОбрабатываемыеДанные.ПараметрыВыборки;
		ПолныеИменаОбъектов		= ПараметрыВыборки.ПолныеИменаОбъектов;
		ПолныеИменаРегистров	= ПараметрыВыборки.ПолныеИменаРегистров;
		СоставОбъектов			= СтрРазделить(ПолныеИменаОбъектов, ",");
		СоставРегистров			= СтрРазделить(ПолныеИменаРегистров, ",");
		ПорцииДляОбновления		= ОбрабатываемыеДанные.ПорцииДляОбновления;
		КоличествоПорций		= ?(ПорцииДляОбновления <> Неопределено, ПорцииДляОбновления.Количество(), 0);
		Множитель				= СоставОбъектов.Количество() * СоставРегистров.Количество() + КоличествоПорций;
	Иначе
		Множитель				= 1;
	КонецЕсли;

	Возврат 3 * Множитель;
КонецФункции

Процедура сОИБ_ОбработатьИсключениеОбработчика(КонтекстОбработчика, ОбработчикОбновления, ИнформацияОбОшибке)
	Если КонтекстОбработчика.ЗаписыватьВЖурнал Тогда
		сОИБ_ЗаписатьДетальнуюИнформациюОХодеОбновления(КонтекстОбработчика.ДетальноеОписаниеОбработчика);
	КонецЕсли;

	// АПК:325-выкл откат незакрытых транзакций после выполнения обработчика.
	Пока ТранзакцияАктивна() Цикл
		ОтменитьТранзакцию();
	КонецЦикла;
	// АПК:325-вкл

	ДобавляемоеЧислоПопыток				= сОИБ_ДобавляемоеЧислоПопыток(ОбработчикОбновления, КонтекстОбработчика, Истина);
	ЧислоПопыток						= ОбработчикОбновления.ЧислоПопыток + ДобавляемоеЧислоПопыток;
	ПодробноеПредставлениеОшибки		= ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);

	МаксимумПопытокОбновления = сОИБ_МаксимумПопытокОбновления(ОбработчикОбновления);

	Если ЧислоПопыток < МаксимумПопытокОбновления Тогда
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Предупреждение,,, ПодробноеПредставлениеОшибки, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	Иначе
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	КонецЕсли;

	Свойства = Новый Структура;
	Свойства.Вставить("ЧислоПопыток",		ЧислоПопыток);
	Свойства.Вставить("Статус",				Перечисления.СтатусыОбработчиковОбновления.Ошибка);
	Свойства.Вставить("ИнформацияОбОшибке",	ПодробноеПредставлениеОшибки);
	сОИБ_УстановитьСвойстваОбработчика(ОбработчикОбновления.ИмяОбработчика, Свойства);
КонецПроцедуры

Процедура сОИБ_ЗаписатьДетальнуюИнформациюОХодеОбновления(ОписаниеОбработчика)
	Длительность = ТекущаяУниверсальнаяДатаВМиллисекундах() - ОписаниеОбработчика.ЗначениеНаНачало;

	ОписаниеОбработчика.Вставить("Выполнен", Ложь);
	ОписаниеОбработчика.Вставить("Длительность", Длительность / 1000); // В секундах

	ЗаписьЖурналаРегистрации(
		"Обновление информационной базы.Протокол выполнения",
		УровеньЖурналаРегистрации.Информация,
		,
		,
		БазоваяПодсистемаСервер.ОН_ЗначениеВСтрокуXML(ОписаниеОбработчика));
КонецПроцедуры

Функция сОИБ_ДобавляемоеЧислоПопыток(ОбработчикОбновления, КонтекстОбработчика, Ошибка = Ложь)
	Если ОбработчикОбновления.Многопоточный Тогда
		ОбновляемыеДанные = КонтекстОбработчика.Параметры.ОбновляемыеДанные;

		// Проверяется по полям ОбновляемыеДанные.ПерваяЗапись и ОбновляемыеДанные.ПоследняяЗапись, а не по полю
		// ОбновляемыеДанные.НаборДанных, т.к. оно очищается в ОбработатьФрагментДанныхВПотоке() для экономии памяти.
		// ОбновляемыеДанные может быть Неопределено, если обработчик выбросил исключение.
		Если ОбновляемыеДанные <> Неопределено Тогда
			ЕстьДанные = ОбновляемыеДанные.ПерваяЗапись <> Неопределено Или ОбновляемыеДанные.ПоследняяЗапись <> Неопределено;
			Если Не ЕстьДанные И Не Ошибка Тогда
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат 1;
КонецФункции

Функция сОИБ_НовыеПараметрыПоискаПорции()
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ИдентификаторПорции");
	ПараметрыПоиска.Вставить("ИмяОбработчика");
	ПараметрыПоиска.Вставить("КонтекстОбработчика");
	ПараметрыПоиска.Вставить("ПоследняяВыбраннаяЗапись");
	ПараметрыПоиска.Вставить("ПерваяЗапись");
	ПараметрыПоиска.Вставить("ПоследняяЗапись");
	ПараметрыПоиска.Вставить("ПараметрыВыборки");
	ПараметрыПоиска.Вставить("Очередь");
	ПараметрыПоиска.Вставить("ФорсироватьОбновление", Ложь);

	Возврат ПараметрыПоиска;
КонецФункции

Функция сОИБ_ПараметрыОбходаДанныхДляОбновления(ПараметрыПоиска)
	ПоследняяВыбраннаяЗапись	= ПараметрыПоиска.ПоследняяВыбраннаяЗапись;
	ПерваяЗапись				= ПараметрыПоиска.ПерваяЗапись;
	ПараметрыВыборки			= ПараметрыПоиска.ПараметрыВыборки;
	ПолныеИменаОбъектов			= ПараметрыВыборки.ПолныеИменаОбъектов;
	ПолныеИменаРегистров		= ПараметрыВыборки.ПолныеИменаРегистров;
	ПолныеИменаРегистровНачало	= ПолныеИменаРегистров;

	Если ПоследняяВыбраннаяЗапись <> Неопределено Тогда // Продолжение выборки по страницам.
		ПерваяСсылочная = ПоследняяВыбраннаяЗапись[0].Значение;
		ПерваяТабличная = ПоследняяВыбраннаяЗапись[1].Значение;
	ИначеЕсли ПерваяЗапись <> Неопределено Тогда // Повтор выборки (завершившейся аварийно).
		ПерваяСсылочная = ПерваяЗапись[0].Значение;
		ПерваяТабличная = ПерваяЗапись[1].Значение;
	Иначе // Начало выборки (выборка первой страницы).
		ПерваяСсылочная = Неопределено;
		ПерваяТабличная = Неопределено;
	КонецЕсли;

	Если Не ПустаяСтрока(ПолныеИменаОбъектов) И Не ПустаяСтрока(ПерваяСсылочная) Тогда // Есть ссылочные объекты.
		// Установить ссылочную часть начала выборки на место, на котором она остановилась в последний раз.
		Начало = СтрНайти(ПолныеИменаОбъектов, ПерваяСсылочная);
		ПолныеИменаОбъектов = Сред(ПолныеИменаОбъектов, Начало);
	КонецЕсли;

	Если Не ПустаяСтрока(ПолныеИменаРегистровНачало) И Не ПустаяСтрока(ПерваяТабличная) Тогда // Есть табличные объекты.
		// Установить табличную часть начала выборки на место, на котором она остановилась в последний раз.
		Начало = СтрНайти(ПолныеИменаРегистровНачало, ПерваяТабличная);
		ПолныеИменаРегистровНачало = Сред(ПолныеИменаРегистровНачало, Начало);
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("СсылочныеОбъекты",			сОИБ_СтрРазделитьСокрЛП(ПолныеИменаОбъектов, ","));
	Результат.Вставить("ТабличныеОбъектыВсе",		сОИБ_СтрРазделитьСокрЛП(ПолныеИменаРегистров, ","));
	Результат.Вставить("ТабличныеОбъектыНачало",	сОИБ_СтрРазделитьСокрЛП(ПолныеИменаРегистровНачало, ","));
	Результат.Вставить("СсылочныйИндекс",			0);
	Результат.Вставить("ТабличныйИндекс",			0);

	Возврат Результат;
КонецФункции

Функция сОИБ_ТекущиеПараметрыОбхода(ПараметрыОбхода)
	Если ПараметрыОбхода.СсылочныйИндекс < ПараметрыОбхода.СсылочныеОбъекты.Количество() Тогда
		Если ПараметрыОбхода.СсылочныйИндекс = 0 Тогда
			ТабличныеОбъекты = ПараметрыОбхода.ТабличныеОбъектыНачало;
		Иначе
			ТабличныеОбъекты = ПараметрыОбхода.ТабличныеОбъектыВсе;
		КонецЕсли;

		Если ПараметрыОбхода.ТабличныйИндекс < ТабличныеОбъекты.Количество() Тогда
			СсылочныйОбъект = ПараметрыОбхода.СсылочныеОбъекты[ПараметрыОбхода.СсылочныйИндекс];
			ТабличныйОбъект = ТабличныеОбъекты[ПараметрыОбхода.ТабличныйИндекс];

			Результат = Новый Структура;
			Результат.Вставить("СсылочныйОбъект", СсылочныйОбъект);
			Результат.Вставить("ТабличныйОбъект", ТабличныйОбъект);
			Результат.Вставить("СсылочныйИндекс", ПараметрыОбхода.СсылочныйИндекс);
			Результат.Вставить("ТабличныйИндекс", ПараметрыОбхода.ТабличныйИндекс);

			Возврат Результат;
		КонецЕсли;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

Функция сОИБ_НовыйНаборДанныхДляОбновления()
	НаборДанных	= Новый ТаблицаЗначений;
	Колонки		= НаборДанных.Колонки;
	Колонки.Добавить("СсылочныйОбъект",	Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ТабличныйОбъект",	Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("Данные",			Новый ОписаниеТипов("ТаблицаЗначений"));

	Возврат НаборДанных;
КонецФункции

Функция сОИБ_ВыбратьДанныеПорции(ПараметрыВыборки, Очередь, СсылочныйОбъект, ТабличныйОбъект)
	СпособВыборки = ПараметрыВыборки.СпособВыборки;

	Если СпособВыборки = "ИзмеренияНезависимогоРегистраСведений" Тогда
		Данные = ОИБ_ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(
			Очередь,
			ТабличныйОбъект,
			ПараметрыВыборки);
	ИначеЕсли СпособВыборки = "РегистраторыРегистра" Тогда
		Данные = ОИБ_ВыбратьРегистраторыРегистраДляОбработки(
			Очередь,
			?(ПустаяСтрока(СсылочныйОбъект), Неопределено, СсылочныйОбъект),
			ТабличныйОбъект,
			ПараметрыВыборки);
	ИначеЕсли СпособВыборки = "Ссылки" Тогда
		Данные = ОИБ_ВыбратьСсылкиДляОбработки(
			Очередь,
			СсылочныйОбъект,
			ПараметрыВыборки);
	КонецЕсли;

	Возврат Данные;
КонецФункции

Функция сОИБ_СтрРазделитьСокрЛП(Строка, Разделитель, ВключатьПустые = Истина)
	Массив = СтрРазделить(Строка, Разделитель, ВключатьПустые);

	Для Индекс = 0 По Массив.ВГраница() Цикл
		Массив[Индекс] = СокрЛП(Массив[Индекс]);
	КонецЦикла;

	Возврат Массив;
КонецФункции

Функция сОИБ_ПереданныеПараметрыОбработчикаОбновления(Параметры)
	ПереданныеПараметры = Новый Структура;
	Для Каждого Параметр Из Параметры Цикл
		Если Параметр.Ключ <> "ОбработкаЗавершена"
			И Параметр.Ключ <> "ПрогрессВыполнения"
			И Параметр.Ключ <> "Очередь" Тогда

			ПереданныеПараметры.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;

	Возврат ПереданныеПараметры;
КонецФункции

Функция сОИБ_НоваяПорцияДляОбновления()
	Порция = Новый Структура;
	Порция.Вставить("Идентификатор");
	Порция.Вставить("ПерваяЗапись");
	Порция.Вставить("ПоследняяЗапись");
	Порция.Вставить("НаборДанных");

	Возврат Порция;
КонецФункции

Функция сОИБ_НовыйКлючЗаписиИзТаблицыДанных(СсылочныйОбъект, ТабличныйОбъект, Данные, Индекс)
	КлючЗаписи	= Новый СписокЗначений;
	КлючЗаписи.Добавить(СсылочныйОбъект);
	КлючЗаписи.Добавить(ТабличныйОбъект);

	Строка		= Данные[Индекс];

	Для каждого Колонка Из Данные.Колонки Цикл
		ИмяКолонки = Колонка.Имя;
		КлючЗаписи.Добавить(Строка[ИмяКолонки], ИмяКолонки);
	КонецЦикла;

	Возврат КлючЗаписи;
КонецФункции

Функция сОИБ_КоличествоПотоковОбновленияИнформационнойБазы() Экспорт
	Если сОИБ_РазрешеноМногопоточноеОбновление() Тогда
		Количество			= 0;
		ИмяПараметра		= "ЧислоПотоковОбновления=";
		Параметры			= ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
		ПозицияПараметра	= СтрНайти(Параметры, ИмяПараметра);

		Если ПозицияПараметра > 0 Тогда
			ПозицияРазделителя	= СтрНайти(Параметры, ";",, ПозицияПараметра + СтрДлина(ИмяПараметра));
			Длина				= ?(ПозицияРазделителя > 0, ПозицияРазделителя, СтрДлина(Параметры) + 1) - ПозицияПараметра;
			ПотокиОбновления	= СтрРазделить(Сред(Параметры, ПозицияПараметра, Длина), "=");

			Попытка
				Количество = Число(ПотокиОбновления[1]);
			Исключение
				ТекстИсключения = "Параметр запуска программы ""ЧислоПотоковОбновления"" необходимо указать в формате
					|""ЧислоПотоковОбновления=Х"", где ""Х"" - максимальное количество потоков обновления.";
				ВызватьИсключение ТекстИсключения;
			КонецПопытки;
		КонецЕсли;

		Если Количество = 0 Тогда
			Количество = Константы.КоличествоПотоковОбновленияИнформационнойБазы.Получить();

			Если Количество = 0 Тогда
				Количество = сОИБ_КоличествоПотоковОбновленияИнформационнойБазыПоУмолчанию();
			КонецЕсли;
		КонецЕсли;

		Возврат Количество;
	Иначе
		Возврат 1;
	КонецЕсли;
КонецФункции

Функция сОИБ_РазрешеноМногопоточноеОбновление() Экспорт
	Параметры = сОИБ_НастройкиПодсистемы();

	Возврат Параметры.МногопоточноеОбновление;
КонецФункции

Функция сОИБ_КоличествоПотоковОбновленияИнформационнойБазыПоУмолчанию()
	Параметры = сОИБ_НастройкиПодсистемы();

	Возврат Параметры.КоличествоПотоковОбновленияИнформационнойБазыПоУмолчанию;
КонецФункции

Процедура сОИБ_УстановитьЗапускОбновленияИнформационнойБазы(Запуск) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ТекущиеПараметры = Новый Соответствие(ПараметрыСеанса.ПараметрыКлиентаНаСервере);

	Если Запуск = Истина Тогда
		ТекущиеПараметры.Вставить("ЗапуститьОбновлениеИнформационнойБазы", Истина);
	ИначеЕсли ТекущиеПараметры.Получить("ЗапуститьОбновлениеИнформационнойБазы") <> Неопределено Тогда
		ТекущиеПараметры.Удалить("ЗапуститьОбновлениеИнформационнойБазы");
	КонецЕсли;

	ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ТекущиеПараметры);
КонецПроцедуры

Функция сОИБ_ВерсияИБ(Знач ИдентификаторБиблиотеки) Экспорт
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);

	Запрос			= Новый Запрос;
	Запрос.Текст	=
		"ВЫБРАТЬ
		|	ВерсииПодсистем.Версия
		|ИЗ
		|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
		|ГДЕ
		|	ВерсииПодсистем.ИмяПодсистемы = &ИмяПодсистемы";

	Запрос.УстановитьПараметр("ИмяПодсистемы", ИдентификаторБиблиотеки);
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	Результат = "";
	Если ТаблицаЗначений.Количество() > 0 Тогда
		Результат = СокрЛП(ТаблицаЗначений[0].Версия);
	КонецЕсли;

	Возврат ?(ПустаяСтрока(Результат), "0.0.0.0", Результат);
КонецФункции

Функция сОИБ_ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	Параметры.Вставить("ВерсияДанныхОсновнойКонфигурации", сОИБ_ВерсияИБ(Метаданные.Имя));

	// Проверка продолжения работы.
	ЭтоВызовПередНачаломРаботыСистемы = Параметры.ПолученныеПараметрыКлиента <> Неопределено;
	ОписаниеОшибки = сОИБ_ИнформационнаяБазаЗаблокированаДляОбновления(, ЭтоВызовПередНачаломРаботыСистемы);
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Параметры.Вставить("ИнформационнаяБазаЗаблокированаДляОбновления", ОписаниеОшибки);
		// Работа будет завершена.
		Возврат Ложь;
	КонецЕсли;

	// Зарезервировано для новых подсистем

	Возврат Истина;
КонецФункции

Функция сОИБ_ИнформационнаяБазаЗаблокированаДляОбновления(УчитыватьПривилегированныйРежим = Истина, ПриЗапуске = Неопределено) Экспорт
	Сообщение = "";

	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();

	// Для входа в заблокированную базу достаточно только одного права администрирования.
	Если УчитыватьПривилегированныйРежим Тогда
		ЕстьПравоАдминистрирование = ПравоДоступа("Администрирование", Метаданные);
	Иначе
		ЕстьПравоАдминистрирование = ПравоДоступа("Администрирование", Метаданные, ТекущийПользовательИБ);
	КонецЕсли;

	СообщениеАдминистраторуСистемы =
		"Вход в программу временно невозможен в связи с обновлением на новую версию.
		           |Для завершения обновления версии программы требуются административные права
		           |(роли ""Администратор системы"" и ""Полные права"").";

	УстановитьПривилегированныйРежим(Истина);
	УстановитьПривилегированныйРежим(Ложь);

	Если ПользователиСервер.П_ЭтоПолноправныйПользователь(, Истина, УчитыватьПривилегированныйРежим)Тогда
		Если ОбновлениеВерсииИБСерверПовтИсп.сОИБ_НеобходимоОбновлениеИнформационнойБазы()
			И ПриЗапуске = Истина Тогда
			Результат = сОИБ_ОтметкаНачалаОбновления();
			Если Не Результат.МожноВыполнятьОбновление Тогда
				Сообщение = "Вход в программу временно невозможен в связи с обновлением на новую версию.
					|Обновление уже выполняется:
					|  компьютер - %1
					|  пользователь - %2
					|  сеанс - %3
					|  начат - %4
					|  приложение - %5";

				Сообщение = СтрШаблон(Сообщение,
					Результат.СеансОбновления.ИмяКомпьютера,
					Результат.СеансОбновления.Пользователь,
					Результат.СеансОбновления.НомерСеанса,
					Результат.СеансОбновления.НачалоСеанса,
					Результат.СеансОбновления.ИмяПриложения);
				Возврат Сообщение;
			КонецЕсли;
		КонецЕсли;
		Возврат "";
	КонецЕсли;

	ТребуетсяПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском = Ложь;
	// Зарезервировано для новых подсистем

	// В этих случаях запуск не блокируется.
	Если Не ОбновлениеВерсииИБСерверПовтИсп.сОИБ_НеобходимоОбновлениеИнформационнойБазы()
	   // Зарезервировано для новых подсистем
	   И Не ТребуетсяПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском Тогда
		Возврат "";
	КонецЕсли;

	// Во всех остальных случаях запуск блокируется.
	Если ЕстьПравоАдминистрирование Тогда
		Возврат СообщениеАдминистраторуСистемы;
	КонецЕсли;


	// Сообщение пользователю локального режима.
	Сообщение = "Вход в программу временно невозможен в связи с обновлением на новую версию.
			           |Обратитесь к администратору за подробностями.";

	Возврат Сообщение;
КонецФункции

Функция сОИБ_ВыполненаРегистрацияОтложенныхОбработчиковОбновления() Экспорт
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииПодсистем.ИмяПодсистемы
		|ИЗ
		|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
		|ГДЕ
		|	ВерсииПодсистем.ВыполненаРегистрацияОтложенныхОбработчиков = ЛОЖЬ";

	Результат = Запрос.Выполнить().Выгрузить();

	Возврат Результат.Количество() = 0;
КонецФункции

Функция сОИБ_ОтметкаНачалаОбновления()
	ОписаниеСеанса = Новый Структура;
	ОписаниеСеанса.Вставить("ИмяКомпьютера");
	ОписаниеСеанса.Вставить("ИмяПриложения");
	ОписаниеСеанса.Вставить("НачалоСеанса");
	ОписаниеСеанса.Вставить("НомерСеанса");
	ОписаниеСеанса.Вставить("НомерСоединения");
	ОписаниеСеанса.Вставить("Пользователь");
	ЗаполнитьЗначенияСвойств(ОписаниеСеанса, ПолучитьТекущийСеансИнформационнойБазы());
	Пользователь				= ОписаниеСеанса.Пользователь; // ПользовательИнформационнойБазы
	ОписаниеСеанса.Пользователь	= Пользователь.Имя;

	ИмяПараметра = "СтандартныеПодсистемы.ОбновлениеВерсииИБ.СеансОбновленияИнформационнойБазы";

	МожноВыполнятьОбновление = Истина;

	Блокировка			= Новый БлокировкаДанных;
	ЭлементБлокировки	= Блокировка.Добавить("РегистрСведений.ПараметрыРаботыПрограммы");
	ЭлементБлокировки.УстановитьЗначение("ИмяПараметра", ИмяПараметра);

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		СохраненныеПараметры = РегистрыСведений.ПараметрыРаботыПрограммы.ПараметрРаботыПрограммы(ИмяПараметра);

		Если СохраненныеПараметры = Неопределено Тогда
			СеансыСовпадают = Ложь;
		Иначе
			СеансыСовпадают = сОИБ_ДанныеСовпадают(ОписаниеСеанса, СохраненныеПараметры);
		КонецЕсли;

		Если Не СеансыСовпадают Тогда
			СеансОбновленияАктивен = сОИБ_СеансАктивен(СохраненныеПараметры);
			Если СеансОбновленияАктивен Тогда
				СеансОбновления = СохраненныеПараметры;
				МожноВыполнятьОбновление = Ложь;
			Иначе
				РегистрыСведений.ПараметрыРаботыПрограммы.УстановитьПараметрРаботыПрограммы(ИмяПараметра, ОписаниеСеанса);
				СеансОбновления = ОписаниеСеанса;
			КонецЕсли;
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Результат = Новый Структура;
	Результат.Вставить("МожноВыполнятьОбновление",	МожноВыполнятьОбновление);
	Результат.Вставить("СеансОбновления",			СеансОбновления);

	Возврат Результат;
КонецФункции

Функция сОИБ_ДанныеСовпадают(Данные1, Данные2)
	Совпадают = Истина;
	Для Каждого КлючИЗначение Из Данные1 Цикл
		Если КлючИЗначение.Ключ = "Пользователь" Тогда
			Продолжить;
		КонецЕсли;

		Если Данные2[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
			Совпадают = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Совпадают;
КонецФункции

Функция сОИБ_СеансАктивен(ОписаниеСеанса)
	Если ОписаниеСеанса = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	СеансыИнформационнойБазы = ПолучитьСеансыИнформационнойБазы();

	Для Каждого Сеанс Из СеансыИнформационнойБазы Цикл
		Совпадают = сОИБ_ДанныеСовпадают(ОписаниеСеанса, Сеанс);
		Если Совпадают Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Совпадают;
КонецФункции

Функция сОИБ_СтатусНевыполненныхОбработчиков(ПриОбновлении = Ложь) Экспорт
	СведенияОбОбновлении = сОИБ_СведенияОбОбновленииИнформационнойБазы();

	Если ПриОбновлении Тогда
		ВерсияДанных					= сОИБ_ВерсияИБ(Метаданные.Имя);
		ВерсияДанныхБезНомераСборки		= БазоваяПодсистемаКлиентСервер.ОН_ВерсияКонфигурацииБезНомераСборки(ВерсияДанных);
		ВерсияМетаданныхБезНомераСборки	= БазоваяПодсистемаКлиентСервер.ОН_ВерсияКонфигурацииБезНомераСборки(Метаданные.Версия);
		ПодредакцииРавны				= (ВерсияДанныхБезНомераСборки = ВерсияМетаданныхБезНомераСборки);

		Если ВерсияДанных = "0.0.0.0" Или ПодредакцииРавны Тогда
			// В пределах четвертой цифры можно обновляться при наличии невыполненных
			// отложенных обработчиков обновления.
			Возврат "";
		КонецЕсли;

		ВерсияДереваОбработчиков = СведенияОбОбновлении.ВерсияДереваОбработчиков;
		Если ВерсияДереваОбработчиков <> "" И БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсии(ВерсияДереваОбработчиков, ВерсияДанных) > 0 Тогда
			// Если в основном цикле обновления произошла ошибка, то при перезапуске не надо
			// проверять дерево отложенных обработчиков, т.к. там будут еще невыполненные
			// отложенные обработчики на текущую версию.
			Возврат "";
		КонецЕсли;
	КонецЕсли;

	Запрос			= Новый Запрос;
	Запрос.Текст	=
		"ВЫБРАТЬ
		|	ОбработчикиОбновления.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.ОбработчикиОбновления КАК ОбработчикиОбновления
		|ГДЕ
		|	ОбработчикиОбновления.РежимВыполнения = &РежимВыполнения
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбработчикиОбновления.Статус";
	Запрос.УстановитьПараметр("РежимВыполнения", Перечисления.РежимыВыполненияОбработчиков.Отложенно);
	СтатусыОбработчиков = Запрос.Выполнить().Выгрузить();

	Если СтатусыОбработчиков.Найти(Перечисления.СтатусыОбработчиковОбновления.НеВыполнялся) <> Неопределено Тогда
		Возврат "СтатусНеВыполнено";
	ИначеЕсли СтатусыОбработчиков.Найти(Перечисления.СтатусыОбработчиковОбновления.Ошибка) <> Неопределено Тогда
		Возврат "СтатусОшибка";
	ИначеЕсли СтатусыОбработчиков.Найти(Перечисления.СтатусыОбработчиковОбновления.Приостановлен) <> Неопределено Тогда
		Возврат "СтатусПриостановлен";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Процедура сОИБ_УстановитьФлагОтображенияОписанийДляНовогоПользователя(Знач ИмяПользователя) Экспорт
	Если сОИБ_ПоследняяВерсияОтображенияИзмененийСистемы(ИмяПользователя) = Неопределено Тогда
		сОИБ_УстановитьФлагОтображенияОписанийПоТекущуюВерсию(ИмяПользователя);
	КонецЕсли;
КонецПроцедуры

Функция сОИБ_ПоследняяВерсияОтображенияИзмененийСистемы(Знач ИмяПользователя = Неопределено) Экспорт
	Если ИмяПользователя = Неопределено Тогда
		ИмяПользователя = ИмяПользователя();
	КонецЕсли;

	ПоследняяВерсия = БазоваяПодсистемаСервер.ОН_ХранилищеЗагрузить(
		ХранилищеОбщихНастроек,
		"ОбновлениеИБ",
		"ПоследняяВерсияОтображенияИзмененийСистемы",
		Неопределено,
		Неопределено,
		ИмяПользователя);

	Возврат ПоследняяВерсия;
КонецФункции

Процедура сОИБ_УстановитьФлагОтображенияОписанийПоТекущуюВерсию(Знач ИмяПользователя = Неопределено) Экспорт
	БазоваяПодсистемаСервер.ОН_ХранилищеСохранить(
		ХранилищеОбщихНастроек,
		"ОбновлениеИБ",
		"ПоследняяВерсияОтображенияИзмененийСистемы",
		Метаданные.Версия,
		Неопределено,
		ИмяПользователя,
		Ложь);

	Если ИмяПользователя = Неопределено И ПользователиСервер.П_ЭтоПолноправныйПользователь() Тогда
		БазоваяПодсистемаСервер.ОН_ХранилищеУдалить(
			ХранилищеОбщихНастроек,
			"ОбновлениеИБ",
			"ВывестиОписаниеИзмененийДляАдминистратора",
			ИмяПользователя());
	КонецЕсли;
КонецПроцедуры

Функция сОИБ_РежимОбновленияДанных() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	СтандартнаяОбработка	= Истина;
	РежимОбновленияДанных	= "";

	ИмяОсновнойКонфигурации = Метаданные.Имя;
	ОписанияПодсистем  = БазоваяПодсистемаСерверПовтИсп.СП_ОписанияПодсистем();
	Для каждого ИмяПодсистемы Из ОписанияПодсистем.Порядок Цикл
		ОписаниеПодсистемы = ОписанияПодсистем.ПоИменам.Получить(ИмяПодсистемы);
		Если НЕ ЗначениеЗаполнено(ОписаниеПодсистемы.ОсновнойСерверныйМодуль) Тогда
			Продолжить;
		КонецЕсли;

		Если ОписаниеПодсистемы.Имя <> ИмяОсновнойКонфигурации Тогда
			Продолжить;
		КонецЕсли;

		Модуль = БазоваяПодсистемаСервер.ОН_ОбщийМодуль(ОписаниеПодсистемы.ОсновнойСерверныйМодуль);
		Модуль.ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка);
	КонецЦикла;

	Если НЕ СтандартнаяОбработка Тогда
		БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр("ПриОпределенииРежимаОбновленияДанных", "РежимОбновленияДанных",
			РежимОбновленияДанных, Тип("Строка"));
		Сообщение = СтрШаблон("Недопустимое значение параметра %1 в %2.
			|Ожидалось: %3; передано значение: %4 (тип %5).",
			"РежимОбновленияДанных", "ПриОпределенииРежимаОбновленияДанных",
			"НачальноеЗаполнение, ОбновлениеВерсии или ПереходСДругойПрограммы",
			РежимОбновленияДанных, ТипЗнч(РежимОбновленияДанных));
		БазоваяПодсистемаКлиентСервер.ОН_Проверить(РежимОбновленияДанных = "НачальноеЗаполнение"
			Или РежимОбновленияДанных = "ОбновлениеВерсии" Или РежимОбновленияДанных = "ПереходСДругойПрограммы", Сообщение);

		Возврат РежимОбновленияДанных;
	КонецЕсли;

	Результат = Неопределено;

	Если НЕ СтандартнаяОбработка Тогда
		Возврат ?(Результат = Истина, "НачальноеЗаполнение", "ОбновлениеВерсии");
	КонецЕсли;

	Возврат сОИБ_РежимОбновленияДанныхВЛокальномРежимеРаботы();
КонецФункции

Функция сОИБ_РежимОбновленияДанныхВЛокальномРежимеРаботы()
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	1 КАК ЕстьВерсииПодсистем
		|ИЗ
		|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем";

	РезультатВыполненияПакета = Запрос.ВыполнитьПакет();
	Если РезультатВыполненияПакета[0].Пустой() Тогда
		Возврат "НачальноеЗаполнение";
	КонецЕсли;

	Запрос			= Новый Запрос;
	Запрос.Текст	=
		"ВЫБРАТЬ
		|	1 КАК ЕстьВерсииПодсистем
		|ИЗ
		|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
		|ГДЕ
		|	ВерсииПодсистем.ЭтоОсновнаяКонфигурация = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	1 КАК ЕстьВерсииПодсистем
		|ИЗ
		|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
		|ГДЕ
		|	ВерсииПодсистем.ИмяПодсистемы = &ИмяОсновнойКонфигурации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	1 КАК ЕстьВерсииПодсистем
		|ИЗ
		|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
		|ГДЕ
		|	ВерсииПодсистем.ЭтоОсновнаяКонфигурация = ИСТИНА
		|	И ВерсииПодсистем.ИмяПодсистемы = &ИмяОсновнойКонфигурации";
	Запрос.УстановитьПараметр("ИмяОсновнойКонфигурации", Метаданные.Имя);
	РезультатВыполненияПакета = Запрос.ВыполнитьПакет();
	Если РезультатВыполненияПакета[0].Пустой() И Не РезультатВыполненияПакета[1].Пустой() Тогда
		Возврат "ОбновлениеВерсии"; // Признак ЭтоОсновнаяКонфигурация еще не был заполнен.
	КонецЕсли;

	// Определяем по ранее заполненному признаку ЭтоОсновнаяКонфигурация.
	Возврат ?(РезультатВыполненияПакета[2].Пустой(), "ПереходСДругойПрограммы", "ОбновлениеВерсии");
КонецФункции

Функция сОИБ_ПоказатьОписаниеИзмененийСистемы() Экспорт
	СведенияОбОбновлении = сОИБ_СведенияОбОбновленииИнформационнойБазы();
	Если СведенияОбОбновлении.ВыводитьОписаниеОбновлений = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		// Анонимным пользователям новое в версии не показываем.
		Возврат Ложь;
	КонецЕсли;

	Если Не ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.ОписаниеИзмененийПрограммы) Тогда
		Возврат Ложь;
	КонецЕсли;

	ВывестиОписаниеИзмененийДляАдминистратора = БазоваяПодсистемаСервер.ОН_ХранилищеЗагрузить(
		ХранилищеОбщихНастроек,
		"ОбновлениеИБ",
		"ВывестиОписаниеИзмененийДляАдминистратора",
		Неопределено,
		Неопределено,
		ИмяПользователя());
	Если ВывестиОписаниеИзмененийДляАдминистратора = Истина Тогда
		Возврат Истина;
	КонецЕсли;

	ПоследняяВерсия = сОИБ_ПоследняяВерсияОтображенияИзмененийСистемы();
	Если ПоследняяВерсия = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	Разделы = сОИБ_РазделыОписанияИзменений();

	Если Разделы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат сОИБ_ПолучитьВерсииБольшеЗаданной(Разделы, ПоследняяВерсия).Количество() > 0;
КонецФункции

Функция сОИБ_ПолучитьВерсииБольшеЗаданной(Разделы, Версия)
	Результат = Новый Массив;

	Если Разделы = Неопределено Тогда
		Разделы = сОИБ_РазделыОписанияИзменений();
	КонецЕсли;

	ВесВерсии = сОИБ_ВесВерсии(Версия);
	Для каждого ЭлементСписка Из Разделы Цикл
		Если ЭлементСписка.Значение <= ВесВерсии Тогда
			Продолжить;
		КонецЕсли;

		Результат.Добавить(ЭлементСписка.Представление);
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция сОИБ_РазделыОписанияИзменений() Экспорт
	Разделы				= Новый СписокЗначений;
	ВесВерсииМетаданных	= сОИБ_ВесВерсии(Метаданные.Версия);

	МакетОписаниеОбновлений = Метаданные.ОбщиеМакеты.Найти("ОписаниеИзмененийСистемы");
	Если МакетОписаниеОбновлений <> Неопределено Тогда
		ПредикатВерсии = "Версия";
		ПредикатШапки = "Шапка";
		Макет = ПолучитьОбщийМакет(МакетОписаниеОбновлений);

		Для каждого Область Из Макет.Области Цикл
			Если СтрНайти(Область.Имя, ПредикатВерсии) = 0 Тогда
				Продолжить;
			КонецЕсли;

			ВерсияВФорматеОписания = Сред(Область.Имя, СтрДлина(ПредикатВерсии) + 1);

			Если Макет.Области.Найти(ПредикатШапки + ВерсияВФорматеОписания) = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			РазрядыВерсииСтроками = СтрРазделить(ВерсияВФорматеОписания, "_");
			Если РазрядыВерсииСтроками.Количество() <> 4 Тогда
				Продолжить;
			КонецЕсли;

			ВесВерсии = сОИБ_ВесВерсииИзМассиваСтрок(РазрядыВерсииСтроками);

			Версия = ""
				+ Число(РазрядыВерсииСтроками[0]) + "."
				+ Число(РазрядыВерсииСтроками[1]) + "."
				+ Число(РазрядыВерсииСтроками[2]) + "."
				+ Число(РазрядыВерсииСтроками[3]);

			Если ВесВерсии > ВесВерсииМетаданных Тогда
				ТекстИсключения = "rВ общем макете ОписаниеИзмененийСистемы для одного из разделов изменений
					|установлена версия выше, чем в метаданных. (%1, должна быть %2)";
				ТекстИсключения = СтрШаблон(ТекстИсключения, Версия, Метаданные.Версия);

				ВызватьИсключение ТекстИсключения;
			КонецЕсли;

			Разделы.Добавить(ВесВерсии, Версия);
		КонецЦикла;

		Разделы.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	КонецЕсли;

	Возврат Разделы;
КонецФункции

Функция сОИБ_НеотображавшиесяРазделыОписанияИзменений() Экспорт
	Разделы = сОИБ_РазделыОписанияИзменений();

	ПоследняяВерсия = сОИБ_ПоследняяВерсияОтображенияИзмененийСистемы();

	Если ПоследняяВерсия = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;

	Возврат сОИБ_ПолучитьВерсииБольшеЗаданной(Разделы, ПоследняяВерсия);
КонецФункции

Функция сОИБ_ДокументОписаниеОбновлений(Знач Разделы) Экспорт
	ДокументОписаниеОбновлений = Новый ТабличныйДокумент;
	Если Разделы.Количество() = 0 Тогда
		Возврат ДокументОписаниеОбновлений;
	КонецЕсли;

	МакетОписаниеОбновлений = Метаданные.ОбщиеМакеты.Найти("ОписаниеИзмененийСистемы");
	Если МакетОписаниеОбновлений <> Неопределено Тогда
		МакетОписаниеОбновлений = ПолучитьОбщийМакет(МакетОписаниеОбновлений);
	Иначе
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;

	Для Каждого Версия Из Разделы Цикл
		сОИБ_ВывестиОписаниеИзменений(Версия, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	КонецЦикла;

	Возврат ДокументОписаниеОбновлений;
КонецФункции

Процедура сОИБ_ВывестиОписаниеИзменений(Знач НомерВерсии, ДокументОписаниеОбновлений, МакетОписаниеОбновлений)
	Номер = СтрЗаменить(НомерВерсии, ".", "_");

	Если МакетОписаниеОбновлений.Области.Найти("Шапка" + Номер) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Шапка" + Номер));
	ДокументОписаниеОбновлений.НачатьГруппуСтрок("Версия" + Номер);
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Версия" + Номер));
	ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
КонецПроцедуры

Функция сОИБ_ВесВерсии(Знач Версия) Экспорт
	Если Версия = "" Или СтрНачинаетсяС(Версия, "ОтладкаОбработчика") Тогда
		Возврат 0;
	КонецЕсли;

	Возврат сОИБ_ВесВерсииИзМассиваСтрок(СтрРазделить(Версия, "."));
КонецФункции

Функция сОИБ_ВесВерсииИзМассиваСтрок(РазрядыВерсииСтроками)
	Возврат 0
		+ Число(РазрядыВерсииСтроками[0]) * 1000000000
		+ Число(РазрядыВерсииСтроками[1]) * 1000000
		+ Число(РазрядыВерсииСтроками[2]) * 1000
		+ Число(РазрядыВерсииСтроками[3]);
КонецФункции

Процедура сОИБ_ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	Параметры.Вставить("НачальноеЗаполнениеДанных",			сОИБ_РежимОбновленияДанных() = "НачальноеЗаполнение");
	Параметры.Вставить("ПоказатьОписаниеИзмененийСистемы",	сОИБ_ПоказатьОписаниеИзмененийСистемы());

	// Зарезервировано для новых подсистем

	СтатусОбработчиков = сОИБ_СтатусНевыполненныхОбработчиков();
	Если СтатусОбработчиков = "" Тогда
		Возврат;
	КонецЕсли;
	Если СтатусОбработчиков = "СтатусОшибка"
		И ПользователиСервер.П_ЭтоПолноправныйПользователь(, Истина) Тогда
		Параметры.Вставить("ПоказатьСообщениеОбОшибочныхОбработчиках");
	Иначе
		Параметры.Вставить("ПоказатьОповещениеОНевыполненныхОбработчиках");
	КонецЕсли;
КонецПроцедуры

Процедура сОИБ_ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	Обработчики.Вставить("ВыполняетсяОбновлениеИБ",			"ОбновлениеВерсииИБСервер.сОИБ_УстановкаПараметровСеанса");
	Обработчики.Вставить("ПараметрыОбработчикаОбновления",	"ОбновлениеВерсииИБСервер.сОИБ_УстановкаПараметровСеанса");
	Обработчики.Вставить("ОтмененныеДлительныеОперации",	"БазоваяПодсистемаСервер.ДО_УстановкаПараметровСеанса");
КонецПроцедуры

Процедура сОИБ_УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	Если ИмяПараметра = "ВыполняетсяОбновлениеИБ" Тогда
		ПараметрыСеанса.ВыполняетсяОбновлениеИБ = ОбновлениеВерсииИБСерверПовтИсп.сОИБ_НеобходимоОбновлениеИнформационнойБазы();
		УстановленныеПараметры.Добавить("ВыполняетсяОбновлениеИБ");
	ИначеЕсли ИмяПараметра = "ПараметрыОбработчикаОбновления" Тогда
		ПараметрыСеанса.ПараметрыОбработчикаОбновления = Новый ФиксированнаяСтруктура(сОИБ_НовыеПараметрыОбработчикаОбновления());
		УстановленныеПараметры.Добавить("ПараметрыОбработчикаОбновления");
	КонецЕсли;
КонецПроцедуры

Процедура сОИБ_ВыполнитьОтложенноеОбновление() Экспорт
	БазоваяПодсистемаСервер.ОН_ПриНачалеВыполненияРегламентногоЗадания();

	Если ОбновлениеВерсииИБСерверПовтИсп.сОИБ_НеобходимоОбновлениеИнформационнойБазы() Тогда
		Возврат;
	КонецЕсли;

	СведенияОбОбновлении = сОИБ_СведенияОбОбновленииИнформационнойБазы();

	Если СведенияОбОбновлении.ВремяОкончаниеОтложенногоОбновления <> Неопределено Тогда
		сОИБ_ПриВключенииОтложенногоОбновления(Ложь);

		Возврат;
	КонецЕсли;

	Если СведенияОбОбновлении.ВремяНачалаОтложенногоОбновления = Неопределено Тогда
		СведенияОбОбновлении.ВремяНачалаОтложенногоОбновления = ТекущаяДатаСеанса();
	КонецЕсли;
	Если ТипЗнч(СведенияОбОбновлении.НомерСеанса) <> Тип("СписокЗначений") Тогда
		СведенияОбОбновлении.НомерСеанса = Новый СписокЗначений;
	КонецЕсли;
	СведенияОбОбновлении.НомерСеанса.Добавить(НомерСеансаИнформационнойБазы());
	сОИБ_ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);

	// Зарезервировано для новых подсистем

	ОбработчикиВыполнялись = Истина;

	Попытка
		Если сОИБ_ФорсироватьОбновление(СведенияОбОбновлении) Тогда
			Группы	= сОИБ_НовоеОписаниеГруппПотоковОбработчиковОтложенногоОбновления();
			сОИБ_ОтменитьВыполнениеВсехПотоков(Группы);

			Пока ОбработчикиВыполнялись Цикл
				Поток = сОИБ_ДобавитьПотокОбработчикаОтложенногоОбновления(СведенияОбОбновлении);

				Если ТипЗнч(Поток) = Тип("СтрокаТаблицыЗначений") Тогда
					сОИБ_ВыполнитьПоток(Группы, Поток);
					сОИБ_ОжидатьСвободныйПоток(Группы);
				ИначеЕсли Поток = Истина Тогда
					сОИБ_ОжидатьЗавершениеЛюбогоПотока(Группы);
				ИначеЕсли Поток = Ложь Тогда
					ОбработчикиВыполнялись = Ложь;
					сОИБ_ОжидатьЗавершениеВсехПотоков(Группы);

					Прервать;
				КонецЕсли;

				Задание				= РегламентныеЗаданияСервер.РЗ_Задание(Метаданные.РегламентныеЗадания.ОтложенноеОбновлениеИБ);
				ТребуетсяВыполнение	= Задание.Расписание.ТребуетсяВыполнение(ТекущаяДатаСеанса());

				Если Не ТребуетсяВыполнение Или Не сОИБ_ФорсироватьОбновление(СведенияОбОбновлении) Тогда
					сОИБ_ОжидатьЗавершениеВсехПотоков(Группы);
					сОИБ_УдалитьВсеПотокиОбновления();

					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ОбработчикиВыполнялись = сОИБ_ВыполнитьОтложенныйОбработчикОбновления();
		КонецЕсли;
	Исключение
		БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		сОИБ_ОтменитьВыполнениеВсехПотоков(Группы);
		сОИБ_УдалитьВсеПотокиОбновления();
	КонецПопытки;

	Если Не ОбработчикиВыполнялись Или сОИБ_ВыполненыВсеОтложенныеОбработчики(СведенияОбОбновлении) Тогда
		сОИБ_УдалитьВсеПотокиОбновления();
		сОИБ_ПриВключенииОтложенногоОбновления(Ложь);
	КонецЕсли;
КонецПроцедуры

Функция сОИБ_ФорсироватьОбновление(СведенияОбОбновлении)
	ПараметрЗапускаКлиента = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	Если СтрНайти(НРег(ПараметрЗапускаКлиента), НРег("ФорсироватьОтложенноеОбновление")) > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат СведенияОбОбновлении.УправлениеОтложеннымОбновлением.Свойство("ФорсироватьОбновление");
	КонецЕсли;
КонецФункции

Процедура сОИБ_ОтменитьВыполнениеВсехПотоков(Группы) Экспорт
	Потоки	= сОИБ_ПотокиОбновления();
	Для Каждого Поток Из Потоки Цикл
		ОписаниеПотока = Группы[Поток.Группа];

		Если ЗначениеЗаполнено(Поток.ИдентификаторЗадания) Тогда
			БазоваяПодсистемаСервер.ДО_ОтменитьВыполнениеЗадания(Поток.ИдентификаторЗадания);
		КонецЕсли;

		Если ОписаниеПотока.ПриОтменеПотока <> Неопределено Тогда
			ПараметрыВызова = Новый Массив;
			ПараметрыВызова.Добавить(Поток);
			БазоваяПодсистемаСервер.ОН_ВыполнитьМетодКонфигурации(ОписаниеПотока.ПриОтменеПотока, ПараметрыВызова);
		КонецЕсли;

		сОИБ_УдалитьПотокОбновления(Поток.ИдентификаторПотока);
	КонецЦикла;
КонецПроцедуры

Функция сОИБ_НовоеОписаниеГруппыПотоков()
	Описание = Новый Структура;
	Описание.Вставить("Процедура");
	Описание.Вставить("ПроцедураЗавершения");
	Описание.Вставить("ПриАварийномЗавершении");
	Описание.Вставить("ПриОтменеПотока");

	Возврат Описание;
КонецФункции

Функция сОИБ_НовоеОписаниеПотоков()
	Потоки		= Новый ТаблицаЗначений;
	Колонки		= Потоки.Колонки;
	Колонки.Добавить("Наименование");
	Колонки.Добавить("Группа");
	Колонки.Добавить("ПриоритетЗавершения", Новый ОписаниеТипов("Число"));
	Колонки.Добавить("ИдентификаторЗадания");
	Колонки.Добавить("ИдентификаторПотока");
	Колонки.Добавить("ПараметрыПроцедуры");
	Колонки.Добавить("ПараметрыПроцедурыЗавершения");
	Колонки.Добавить("АдресРезультата");

	Возврат Потоки;
КонецФункции

Процедура сОИБ_ПриАварийномЗавершенииПотокаОтложенногоОбработчика(Поток, ИнформацияОбОшибке) Экспорт
	ОбработчикОбновления = сОИБ_ОбработчикОбновления(Поток.ПараметрыПроцедуры.ИмяОбработчика);
	сОИБ_УстановитьСвойствоОбработчика(ОбработчикОбновления.ИмяОбработчика, "ОбработкаПорцииЗавершена", Истина);
	сОИБ_ОбработатьИсключениеОбработчика(Поток.ПараметрыПроцедуры, ОбработчикОбновления, ИнформацияОбОшибке);

	Если ОбработчикОбновления.Многопоточный Тогда
		сОИБ_ОтменитьОбработкуДанныхМногопоточногоОбработчика(Поток, ОбработчикОбновления);
	КонецЕсли;

	КонтекстОбработчика	= Поток.ПараметрыПроцедурыЗавершения;
	сОИБ_ЗавершитьВыполнениеОтложенногоОбработчикаОбновления(КонтекстОбработчика);
КонецПроцедуры

Процедура сОИБ_ПриОтменеПотокаОтложенногоОбработчика(Поток) Экспорт
	ОбработчикОбновления = сОИБ_ОбработчикОбновления(Поток.ПараметрыПроцедуры.ИмяОбработчика);
	сОИБ_УстановитьСвойствоОбработчика(ОбработчикОбновления.ИмяОбработчика, "ОбработкаПорцииЗавершена", Истина);

	Если ОбработчикОбновления.Статус = Перечисления.СтатусыОбработчиковОбновления.Выполняется Тогда
		сОИБ_УстановитьСтатусОбработчика(ОбработчикОбновления.ИмяОбработчика, "НеВыполнялся");
	КонецЕсли;

	Если ОбработчикОбновления.Многопоточный Тогда
		сОИБ_ОтменитьОбработкуДанныхМногопоточногоОбработчика(Поток, ОбработчикОбновления);
	КонецЕсли;
КонецПроцедуры

Процедура сОИБ_НайтиПорциюДляОбновления(ПараметрыПоиска, АдресРезультата) Экспорт
	ПараметрыВыборки									= ПараметрыПоиска.ПараметрыВыборки;
	сОИБ_ПроверитьПараметрыВыборки(ПараметрыВыборки);
	ПараметрыВыборки.МаксимумВыборки					= 10000;
	ПоляУпорядочивания									= ?(ПараметрыПоиска.ФорсироватьОбновление, ПараметрыПоиска.ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных, ПараметрыПоиска.ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей);
	ПараметрыВыборки.ПоляУпорядочивания					= ПоляУпорядочивания;
	ПараметрыВыборки.ОптимизироватьВыборкуПоСтраницам	= Не сОИБ_ЕстьУпорядочиваниеПоВнешнимТаблицам(ПоляУпорядочивания);
	Максимум											= 10000;
	ПараметрыОбхода										= сОИБ_ПараметрыОбходаДанныхДляОбновления(ПараметрыПоиска);
	ИтераторОбхода										= сОИБ_ТекущиеПараметрыОбхода(ПараметрыОбхода);
	РезультатПоиска										= сОИБ_НовыйРезультатПоискаПорции();
	НаборДанных											= сОИБ_НовыйНаборДанныхДляОбновления();
	РезультатПоиска.НаборДанных							= НаборДанных;
	ПараметрыВыборки									= ПараметрыПоиска.ПараметрыВыборки;
	ДополнительныеИсточникиДанных						= ПараметрыВыборки.ДополнительныеИсточникиДанных;
	Очередь												= ПараметрыПоиска.Очередь;

	Пока ИтераторОбхода <> Неопределено Цикл
		СсылочныйОбъект									= ИтераторОбхода.СсылочныйОбъект;
		ТабличныйОбъект									= ИтераторОбхода.ТабличныйОбъект;
		сОИБ_УстановитьГраницуНачалаВыборки(ПараметрыПоиска, ИтераторОбхода.СсылочныйИндекс, ИтераторОбхода.ТабличныйИндекс);
		сОИБ_УстановитьГраницуКонцаВыборки(ПараметрыПоиска, СсылочныйОбъект, ТабличныйОбъект);
		МаксимумВыборки									= ПараметрыВыборки.МаксимумВыборки;
		ПараметрыВыборки.ДополнительныеИсточникиДанных	= ОИБ_ИсточникиДанных(ДополнительныеИсточникиДанных, СсылочныйОбъект, ТабличныйОбъект);
		Данные											= сОИБ_ВыбратьДанныеПорции(ПараметрыВыборки, Очередь, СсылочныйОбъект, ТабличныйОбъект);
		Количество										= Данные.Количество();
		РезультатПоиска.Количество						= РезультатПоиска.Количество + Количество;
		ПараметрыВыборки.МаксимумВыборки				= ПараметрыВыборки.МаксимумВыборки - Количество;

		Если Количество > 0 Тогда
			ЗаписьНабора					= НаборДанных.Добавить();
			ЗаписьНабора.СсылочныйОбъект	= СсылочныйОбъект;
			ЗаписьНабора.ТабличныйОбъект	= ТабличныйОбъект;
			ЗаписьНабора.Данные				= Данные;
		КонецЕсли;

		Если РезультатПоиска.Количество < Максимум Тогда
			сОИБ_СледующиеПараметрыОбхода(ПараметрыОбхода, Количество = МаксимумВыборки);
			ИтераторОбхода = сОИБ_ТекущиеПараметрыОбхода(ПараметрыОбхода);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;

	ПараметрыВыборки.ДополнительныеИсточникиДанных = ДополнительныеИсточникиДанных;
	РезультатПоиска.ПоискЗавершен = (ИтераторОбхода = Неопределено);
	ПоместитьВоВременноеХранилище(РезультатПоиска, АдресРезультата);
КонецПроцедуры

Процедура сОИБ_ПроверитьПараметрыВыборки(ПараметрыВыборки)
	СпособВыборки	= ПараметрыВыборки.СпособВыборки;
	ИзвестныйСпособ	= (СпособВыборки = "ИзмеренияНезависимогоРегистраСведений") Или (СпособВыборки = "РегистраторыРегистра") Или (СпособВыборки = "Ссылки");
	Если Не ИзвестныйСпособ Тогда
		ШаблонСообщения = "Укажите способ выборки в процедуре регистрации данных к обновлению.
			|Указывается в ""Параметры.ПараметрыВыборки.СпособВыборки"".
			|Сейчас указан неизвестный способ выборки ""%1"".";
		ВызватьИсключение СтрШаблон(ШаблонСообщения, СпособВыборки);
	КонецЕсли;

	ТаблицыУказаны = Не ПустаяСтрока(ПараметрыВыборки.ПолныеИменаОбъектов) Или Не ПустаяСтрока(ПараметрыВыборки.ПолныеИменаРегистров);
	Если Не ТаблицыУказаны Тогда
		ВызватьИсключение "Укажите обрабатываемые таблицы в процедуре регистрации данных к обновлению.
			|Указывается в ""Параметры.ПараметрыВыборки.ПолныеИменаОбъектов"" и/или
			|""Параметры.ПараметрыВыборки.ПолныеИменаРегистров"".";
	КонецЕсли;
КонецПроцедуры

Функция сОИБ_ЕстьУпорядочиваниеПоВнешнимТаблицам(ПоляУпорядочивания)
	Для каждого ПолеУпорядочивания Из ПоляУпорядочивания Цикл
		Если СтрНайти(ПолеУпорядочивания, ".") > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

Функция сОИБ_НовыйРезультатПоискаПорции()
	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить("Количество",		0);
	РезультатПоиска.Вставить("НаборДанных");
	РезультатПоиска.Вставить("ПоискЗавершен",	Ложь);

	Возврат РезультатПоиска;
КонецФункции

Процедура сОИБ_УстановитьГраницуНачалаВыборки(ПараметрыПоиска, СсылочныйИндекс, ТабличныйИндекс)
	ПараметрыВыборки			= ПараметрыПоиска.ПараметрыВыборки;
	ПоследняяВыбраннаяЗапись	= ПараметрыПоиска.ПоследняяВыбраннаяЗапись;
	ПерваяЗапись				= ПараметрыПоиска.ПерваяЗапись;

	Если СсылочныйИндекс = 0 И ТабличныйИндекс = 0 Тогда // Выбирается первая страница в цикле выборки.
		ПараметрыВыборки.ПоследняяВыбраннаяЗапись	= ПоследняяВыбраннаяЗапись;
		ПараметрыВыборки.ПерваяЗапись				= ПерваяЗапись;
	Иначе // Выбираются последующие страницы в цикле выборки (всегда в новом объекте, поэтому сначала).
		ПараметрыВыборки.ПоследняяВыбраннаяЗапись	= Неопределено;
		ПараметрыВыборки.ПерваяЗапись				= Неопределено;
	КонецЕсли;
КонецПроцедуры

Процедура сОИБ_УстановитьГраницуКонцаВыборки(ПараметрыПоиска, СсылочныйОбъект, ТабличныйОбъект)
	ПараметрыВыборки	= ПараметрыПоиска.ПараметрыВыборки;
	ПоследняяЗапись		= ПараметрыПоиска.ПоследняяЗапись;
	ЭтоПоследнийОбъект	= ПоследняяЗапись <> Неопределено И СсылочныйОбъект = ПоследняяЗапись[0].Значение И ТабличныйОбъект = ПоследняяЗапись[1].Значение;

	Если ЭтоПоследнийОбъект Тогда // Последний объект в цикле обхода метаданных (конец выборки).
		ПараметрыВыборки.ПоследняяЗапись = ПоследняяЗапись;
	Иначе // Промежуточная выборка.
		ПараметрыВыборки.ПоследняяЗапись = Неопределено;
	КонецЕсли;
КонецПроцедуры

Функция сОИБ_ДобавитьПотокОбработчикаОтложенногоОбновления(СведенияОбОбновлении)
	Поток = Неопределено;

	Пока Поток = Неопределено Цикл
		КонтекстОбработчика		= сОИБ_НовыйКонтекстОбработчика();
		ОбработчикОбновления	= сОИБ_НайтиОбработчикОбновления(КонтекстОбработчика);

		Если ТипЗнч(ОбработчикОбновления) = Тип("СтрокаТаблицыЗначений") Тогда
			Если КонтекстОбработчика.ВыполнитьОбработчик Тогда
				Поток = сОИБ_НовыйПоток();

				Если ОбработчикОбновления.Многопоточный Тогда
					КонтекстОбработчика.Параметры.Вставить("ОбновляемыеДанные");
					Добавлен = сОИБ_ДобавитьПотокПоискаДанныхДляОбновления(Поток, ОбработчикОбновления, КонтекстОбработчика, СведенияОбОбновлении);

					Если Не Добавлен Тогда
						Поток = Истина;
					КонецЕсли;
				Иначе
					сОИБ_ДобавитьПотокОбработчикаОбновления(Поток, КонтекстОбработчика);
				КонецЕсли;
			Иначе
				сОИБ_ЗавершитьВыполнениеОтложенногоОбработчика(КонтекстОбработчика, Неопределено);
				Поток = Неопределено;
			КонецЕсли;
		Иначе
			Поток = ОбработчикОбновления;
		КонецЕсли;
	КонецЦикла;

	Возврат Поток;
КонецФункции

Функция сОИБ_ДобавитьПотокПоискаДанныхДляОбновления(Поток, Обработчик, КонтекстОбработчика, СведенияОбОбновлении)
	ИмяОбработчика	= Обработчик.ИмяОбработчика;
	Описание		= Обработчик.ОбрабатываемыеДанные.Получить();

	Если Не Описание.ВыполняетсяПоискПорции Тогда
		ПорцииДляОбновления = Описание.ПорцииДляОбновления;

		Если Описание.ПоискЗавершен И (ПорцииДляОбновления = Неопределено Или ПорцииДляОбновления.Количество() = 0) Тогда
			ПорцииДляОбновления					= Неопределено;
			Описание.ПоследняяВыбраннаяЗапись	= Неопределено;
			Описание.ПоискЗавершен				= Ложь;
		КонецЕсли;

		ШаблонНаименования			= "Поиск данных для обработчика обновления ""%1""";
		Поток.Наименование			= СтрШаблон(ШаблонНаименования, ИмяОбработчика);
		Поток.Группа				= "Поиск";
		Поток.ПриоритетЗавершения	= 1;

		ПараметрыПоиска							= сОИБ_НовыеПараметрыПоискаПорции();
		ПараметрыПоиска.ИмяОбработчика			= ИмяОбработчика;
		ПараметрыПоиска.КонтекстОбработчика		= КонтекстОбработчика;
		ПараметрыПоиска.ПараметрыВыборки		= Описание.ПараметрыВыборки;
		ПараметрыПоиска.Очередь					= КонтекстОбработчика.Параметры.Очередь;
		ПараметрыПоиска.ФорсироватьОбновление	= сОИБ_ФорсироватьОбновление(СведенияОбОбновлении);

		НеобработаннаяПорция = сОИБ_ПерваяНеобработаннаяПорция(ПорцииДляОбновления);

		Если НеобработаннаяПорция <> Неопределено Тогда
			ПараметрыПоиска.ИдентификаторПорции			= НеобработаннаяПорция.Идентификатор;
			ПараметрыПоиска.ПерваяЗапись				= НеобработаннаяПорция.ПерваяЗапись;
			ПараметрыПоиска.ПоследняяЗапись				= НеобработаннаяПорция.ПоследняяЗапись;
		ИначеЕсли Описание.ПоследняяВыбраннаяЗапись <> Неопределено Тогда
			ПараметрыПоиска.ПоследняяВыбраннаяЗапись	= Описание.ПоследняяВыбраннаяЗапись;
		КонецЕсли;

		Поток.ПараметрыПроцедуры			= ПараметрыПоиска;
		Поток.ПараметрыПроцедурыЗавершения	= ПараметрыПоиска;
		Описание.ВыполняетсяПоискПорции		= Истина;
		НачатьТранзакцию();
		Попытка
			сОИБ_УстановитьСвойствоОбработчика(ИмяОбработчика, "ОбрабатываемыеДанные", Новый ХранилищеЗначения(Описание));
			сОИБ_СохранитьПотокОбновления(Поток);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();

			ВызватьИсключение;
		КонецПопытки;

		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция сОИБ_ПерваяНеобработаннаяПорция(ПорцииДляОбновления)
	Если ПорцииДляОбновления <> Неопределено Тогда
		Для каждого Порция Из ПорцииДляОбновления Цикл
			Если Не Порция.Обрабатывается Тогда
				Возврат Порция;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

Процедура сОИБ_ДобавитьПотокОбработчикаОбновления(Поток, КонтекстОбработчика)
	ИмяОбработчика						= КонтекстОбработчика.ИмяОбработчика;
	ШаблонНаименования					= "Выполнение обработчика обновления ""%1""";
	Поток.Наименование					= СтрШаблон(ШаблонНаименования, ИмяОбработчика);
	Поток.Группа						= "Обновление";
	Поток.ПараметрыПроцедуры			= КонтекстОбработчика;
	Поток.ПараметрыПроцедурыЗавершения	= КонтекстОбработчика;

	сОИБ_СохранитьПотокОбновления(Поток);
КонецПроцедуры

Процедура сОИБ_ВыполнитьПоток(Группы, Поток, ИдентификаторФормы = Неопределено)
	ОписаниеПотока = Группы[Поток.Группа];

	Если Не ПустаяСтрока(ОписаниеПотока.Процедура) И Поток.ПараметрыПроцедуры <> Неопределено Тогда
		ПараметрыВыполнения								= БазоваяПодсистемаСервер.ДО_ПараметрыВыполненияВФоне(ИдентификаторФормы);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания	= Поток.Наименование;
		ПараметрыВыполнения.ОжидатьЗавершение			= 0;

		Если ИдентификаторФормы = Неопределено Тогда
			ПараметрыВыполнения.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
		КонецЕсли;

		РезультатЗапуска		= БазоваяПодсистемаСервер.ДО_ВыполнитьВФоне(ОписаниеПотока.Процедура, Поток.ПараметрыПроцедуры, ПараметрыВыполнения);

		Поток.АдресРезультата	= РезультатЗапуска.АдресРезультата;
		Статус					= РезультатЗапуска.Статус;

		Если Статус = "Выполняется" Тогда
			Поток.ИдентификаторЗадания = РезультатЗапуска.ИдентификаторЗадания;
		ИначеЕсли Статус <> "Выполняется" И Статус <> "Выполнено" Тогда
			ВызватьИсключение РезультатЗапуска.КраткоеПредставлениеОшибки;
		КонецЕсли;
	КонецЕсли;

	сОИБ_СохранитьПотокОбновления(Поток);
КонецПроцедуры

Процедура сОИБ_ОжидатьСвободныйПоток(Группы)
	МаксимумПотоков	= сОИБ_КоличествоПотоковОбновленияИнформационнойБазы();
	Потоки			= сОИБ_ПотокиОбновления();

	Пока Потоки.Количество() >= МаксимумПотоков Цикл
		Если сОИБ_ЗавершитьПотокиВыполнившиеФЗ(Потоки, Группы) Тогда
			Продолжить;
		КонецЕсли;

		сОИБ_ОжидатьЗавершениеПотока(Потоки[0]);
		МаксимумПотоков = сОИБ_КоличествоПотоковОбновленияИнформационнойБазы();
	КонецЦикла;
КонецПроцедуры

Функция сОИБ_ЗавершитьПотокиВыполнившиеФЗ(Потоки, Группы)
	ЕстьЗавершенныеПотоки	= Ложь;
	Потоки.Сортировать("ПриоритетЗавершения Убыв");
	Индекс					= Потоки.Количество() - 1;

	Пока Индекс >= 0 Цикл
		Поток					= Потоки[Индекс];
		ОписаниеПотока			= Группы[Поток.Группа];
		ИдентификаторЗадания	= Поток.ИдентификаторЗадания;

		Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			Попытка
				ЗаданиеВыполнено = БазоваяПодсистемаСервер.ДО_ЗаданиеВыполнено(ИдентификаторЗадания);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаданиеВыполнено = Неопределено;

				Если Не ПустаяСтрока(ОписаниеПотока.ПриАварийномЗавершении) Тогда
					ПараметрыВызова = Новый Массив;
					ПараметрыВызова.Добавить(Поток);
					ПараметрыВызова.Добавить(ИнформацияОбОшибке);

					БазоваяПодсистемаСервер.ОН_ВыполнитьМетодКонфигурации(ОписаниеПотока.ПриАварийномЗавершении, ПараметрыВызова);
				Иначе
					ВызватьИсключение;
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Или ЗаданиеВыполнено <> Ложь Тогда
			Выполнять = Не ПустаяСтрока(ОписаниеПотока.ПроцедураЗавершения) И Поток.ПараметрыПроцедурыЗавершения <> Неопределено И (Не ЗначениеЗаполнено(ИдентификаторЗадания) Или ЗаданиеВыполнено = Истина);

			Если Выполнять Тогда
				ПараметрыВызова = Новый Массив;
				ПараметрыВызова.Добавить(Поток.ПараметрыПроцедурыЗавершения);
				ПараметрыВызова.Добавить(Поток.АдресРезультата);

				БазоваяПодсистемаСервер.ОН_ВыполнитьМетодКонфигурации(ОписаниеПотока.ПроцедураЗавершения, ПараметрыВызова);
			КонецЕсли;

			УдалитьИзВременногоХранилища(Поток.АдресРезультата);
			сОИБ_УдалитьПотокОбновления(Поток.ИдентификаторПотока);
			Потоки.Удалить(Поток);
			ЕстьЗавершенныеПотоки = Истина;
		КонецЕсли;

		Индекс = Индекс - 1;
	КонецЦикла;

	Возврат ЕстьЗавершенныеПотоки;
КонецФункции

Функция сОИБ_ОжидатьЗавершениеПотока(Поток, Длительность = 1)
	Если ЗначениеЗаполнено(Поток.ИдентификаторЗадания) Тогда
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Поток.ИдентификаторЗадания);

		Если Задание <> Неопределено Тогда
			Задание				= Задание.ОжидатьЗавершенияВыполнения(Длительность);
			ЗаданиеЗавершено	= (Задание.Состояние <> СостояниеФоновогоЗадания.Активно);

			Возврат ЗаданиеЗавершено;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Процедура сОИБ_ОжидатьЗавершениеЛюбогоПотока(Группы)
	Потоки				= сОИБ_ПотокиОбновления();
	КоличествоПотоков	= Потоки.Количество();

	Пока КоличествоПотоков > 0 И Потоки.Количество() >= КоличествоПотоков Цикл
		Если Не сОИБ_ЗавершитьПотокиВыполнившиеФЗ(Потоки, Группы) Тогда
			сОИБ_ОжидатьЗавершениеПотока(Потоки[0]);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура сОИБ_ОжидатьЗавершениеВсехПотоков(Группы)
	Потоки = сОИБ_ПотокиОбновления();

	Пока Потоки.Количество() > 0 Цикл
		Если Не сОИБ_ЗавершитьПотокиВыполнившиеФЗ(Потоки, Группы) Тогда
			сОИБ_ОжидатьЗавершениеПотока(Потоки[0]);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция сОИБ_ВыполненыВсеОтложенныеОбработчики(СведенияОбОбновлении)
	Запрос			= Новый Запрос;
	Запрос.Текст	=
		"ВЫБРАТЬ
		|	ОбработчикиОбновления.ИмяОбработчика КАК ИмяОбработчика,
		|	ОбработчикиОбновления.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.ОбработчикиОбновления КАК ОбработчикиОбновления
		|ГДЕ
		|	ОбработчикиОбновления.РежимВыполнения = &РежимВыполнения
		|	И ОбработчикиОбновления.Статус <> &Статус";
	Запрос.УстановитьПараметр("РежимВыполнения",	Перечисления.РежимыВыполненияОбработчиков.Отложенно);
	Запрос.УстановитьПараметр("Статус",				Перечисления.СтатусыОбработчиковОбновления.Выполнен);
	НевыполненныеОбработчики	= Запрос.Выполнить().Выгрузить();

	Если НевыполненныеОбработчики.Количество() = 0 Тогда
		СведенияОбОбновлении.ВремяОкончаниеОтложенногоОбновления	= ТекущаяДатаСеанса();
		СведенияОбОбновлении.ОтложенноеОбновлениеЗавершеноУспешно	= Истина;
		сОИБ_ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
		Константы.ОтложенноеОбновлениеЗавершеноУспешно.Установить(Истина);
		Если Не БазоваяПодсистемаСервер.ОН_ЭтоПодчиненныйУзелРИБ() Тогда
			Константы.ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно.Установить(Истина);
		КонецЕсли;

		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Процедура сОИБ_ОтменитьОбработкуДанныхМногопоточногоОбработчика(Поток, ОбработчикОбновления)
	ОписаниеПроцедурыЗаполнения	= ОбработчикОбновления.ОбрабатываемыеДанные.Получить();
	ПорцииДляОбновления			= ОписаниеПроцедурыЗаполнения.ПорцииДляОбновления;

	Если ПорцииДляОбновления <> Неопределено Тогда
		ОбновляемыеДанные = Поток.ПараметрыПроцедуры.Параметры.ОбновляемыеДанные;

		Если ОбновляемыеДанные <> Неопределено Тогда
			Порция = ПорцииДляОбновления.Найти(ОбновляемыеДанные.Идентификатор, "Идентификатор");
			Если Порция <> Неопределено Тогда
				Порция.Обрабатывается = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	сОИБ_УстановитьСвойствоОбработчика(ОбработчикОбновления.ИмяОбработчика, "ОбрабатываемыеДанные", Новый ХранилищеЗначения(ОписаниеПроцедурыЗаполнения));
КонецПроцедуры

Функция сОИБ_ОбработчикОбновления(ИмяОбработчика)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбработчикиОбновления.ИмяОбработчика КАК ИмяОбработчика,
		|	ОбработчикиОбновления.Статус КАК Статус,
		|	ОбработчикиОбновления.Версия КАК Версия,
		|	ОбработчикиОбновления.ИмяБиблиотеки КАК ИмяБиблиотеки,
		|	ОбработчикиОбновления.ДлительностьОбработки КАК ДлительностьОбработки,
		|	ОбработчикиОбновления.РежимВыполнения КАК РежимВыполнения,
		|	ОбработчикиОбновления.ВерсияРегистрации КАК ВерсияРегистрации,
		|	ОбработчикиОбновления.ВерсияПорядок КАК ВерсияПорядок,
		|	ОбработчикиОбновления.Идентификатор КАК Идентификатор,
		|	ОбработчикиОбновления.ЧислоПопыток КАК ЧислоПопыток,
		|	ОбработчикиОбновления.СтатистикаВыполнения КАК СтатистикаВыполнения,
		|	ОбработчикиОбновления.ИнформацияОбОшибке КАК ИнформацияОбОшибке,
		|	ОбработчикиОбновления.Комментарий КАК Комментарий,
		|	ОбработчикиОбновления.Приоритет КАК Приоритет,
		|	ОбработчикиОбновления.ПроцедураПроверки КАК ПроцедураПроверки,
		|	ОбработчикиОбновления.ПроцедураЗаполненияДанныхОбновления КАК ПроцедураЗаполненияДанныхОбновления,
		|	ОбработчикиОбновления.ОчередьОтложеннойОбработки КАК ОчередьОтложеннойОбработки,
		|	ОбработчикиОбновления.ЗапускатьТолькоВГлавномУзле КАК ЗапускатьТолькоВГлавномУзле,
		|	ОбработчикиОбновления.ЗапускатьИВПодчиненномУзлеРИБСФильтрами КАК ЗапускатьИВПодчиненномУзлеРИБСФильтрами,
		|	ОбработчикиОбновления.Многопоточный КАК Многопоточный,
		|	ОбработчикиОбновления.ОбработкаПорцииЗавершена КАК ОбработкаПорцииЗавершена,
		|	ОбработчикиОбновления.ГруппаОбновления КАК ГруппаОбновления,
		|	ОбработчикиОбновления.ИтерацияЗапуска КАК ИтерацияЗапуска,
		|	ОбработчикиОбновления.ОбрабатываемыеДанные КАК ОбрабатываемыеДанные,
		|	ОбработчикиОбновления.РежимВыполненияОтложенногоОбработчика КАК РежимВыполненияОтложенногоОбработчика
		|ИЗ
		|	РегистрСведений.ОбработчикиОбновления КАК ОбработчикиОбновления
		|ГДЕ
		|	ОбработчикиОбновления.ИмяОбработчика = &ИмяОбработчика";
	Запрос.УстановитьПараметр("ИмяОбработчика", ИмяОбработчика);

	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат[0];
	КонецЕсли;
КонецФункции

Процедура сОИБ_УстановитьСтатусОбработчика(ИмяОбработчика, Статус, ТекстОшибки = "")
	НаборЗаписей = РегистрыСведений.ОбработчикиОбновления.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИмяОбработчика.Установить(ИмяОбработчика);
	НаборЗаписей.Прочитать();

	Если НаборЗаписей = Неопределено Или НаборЗаписей.Количество() = 0 Тогда
		НаборЗаписей = РегистрыСведений.ОбработчикиОбновленияОбщихДанных.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИмяОбработчика.Установить(ИмяОбработчика);
		НаборЗаписей.Прочитать();
	КонецЕсли;

	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Запись						= НаборЗаписей[0];
	Запись.Статус				= Перечисления.СтатусыОбработчиковОбновления[Статус];
	Запись.ИнформацияОбОшибке	= ТекстОшибки;

	НаборЗаписей.Записать();

КонецПроцедуры

Процедура сОИБ_УстановитьСвойствоОбработчика(ИмяОбработчика, Свойство, Значение) Экспорт
	Свойства = Новый Структура;
	Свойства.Вставить(Свойство, Значение);
	сОИБ_УстановитьСвойстваОбработчика(ИмяОбработчика, Свойства);
КонецПроцедуры

Процедура сОИБ_УстановитьСвойстваОбработчика(ИмяОбработчика, Свойства)
	Если Свойства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	НаборЗаписей = РегистрыСведений.ОбработчикиОбновления.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИмяОбработчика.Установить(ИмяОбработчика);
	НаборЗаписей.Прочитать();

	Если НаборЗаписей = Неопределено Или НаборЗаписей.Количество() = 0 Тогда
		НаборЗаписей = РегистрыСведений.ОбработчикиОбновленияОбщихДанных.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИмяОбработчика.Установить(ИмяОбработчика);
		НаборЗаписей.Прочитать();
	КонецЕсли;

	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Запись = НаборЗаписей[0];
	Для Каждого Свойство Из Свойства Цикл
		Запись[Свойство.Ключ] = Свойство.Значение;
	КонецЦикла;

	НаборЗаписей.Записать();
КонецПроцедуры

Функция сОИБ_ОбработчикДляВыполнения(Обработчики, ГруппыОбработчиковИЗависимость, СведенияОбОбновлении)
	ЗависимостьГруппОбработчиков	= СведенияОбОбновлении.ЗависимостьГруппОбработчиков;
	ТекущаяИтерация					= СведенияОбОбновлении.ТекущаяИтерацияОбновления;

	ТекущаяГруппаОбновления					= Неопределено;
	ОбработчикДляВыполнения					= Неопределено;
	ПропускаемыеГруппы						= Новый Массив;
	ЗавершеноУспешно						= Истина;
	ЕстьВыполняющиеся						= Ложь;
	ЕстьОшибки								= Ложь;
	ЕстьНевыполненные						= Ложь;
	ВыполняющийсяМногопоточныйОбработчик	= Неопределено;
	Для Каждого Обработчик Из Обработчики Цикл
		Если Обработчик.ИтерацияЗапуска = ТекущаяИтерация Тогда
			// Обработчик в этой итерации обновления уже запускался.
			ЕстьНевыполненные = Истина;

			Продолжить;
		КонецЕсли;

		Если ПропускаемыеГруппы.Найти(Обработчик.ГруппаОбновления) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Обработчик.ГруппаОбновления <> 1 И ЗависимостьГруппОбработчиков[Обработчик.ГруппаОбновления] = Истина Тогда
			НайденнаяСтрока = ГруппыОбработчиковИЗависимость.Найти(Обработчик.ГруппаОбновления - 1, "ГруппаОбновления");
			Если НайденнаяСтрока <> Неопределено Тогда
				ПропускаемыеГруппы.Добавить(Обработчик.ГруппаОбновления);

				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если ТекущаяГруппаОбновления = Неопределено Тогда
			ТекущаяГруппаОбновления = Обработчик.ГруппаОбновления;
		ИначеЕсли ТекущаяГруппаОбновления <> Обработчик.ГруппаОбновления Тогда
			// При переходе к следующей группе обновления делается проверка ошибок по предыдущей группе
			// и наличия многопоточных обработчиков, для которых есть порция обновления.
			Если ВыполняющийсяМногопоточныйОбработчик = Неопределено Тогда
				Если ЕстьОшибки Тогда
					ЗавершеноУспешно = Ложь;
				КонецЕсли;
			Иначе
				ОбработчикДляВыполнения = ВыполняющийсяМногопоточныйОбработчик;
				Прервать;
			КонецЕсли;
			ТекущаяГруппаОбновления = Обработчик.ГруппаОбновления;
		КонецЕсли;

		Если Обработчик.Статус = Перечисления.СтатусыОбработчиковОбновления.Выполняется И Не Обработчик.ОбработкаПорцииЗавершена Тогда
			Если Обработчик.Многопоточный Тогда
				Если сОИБ_ЕстьПорцииДляОбновления(Обработчик) Тогда
					ВыполняющийсяМногопоточныйОбработчик = Обработчик;
				КонецЕсли;
			ИначеЕсли сОИБ_ПотокиОбновления().Количество() = 0 Тогда
				ОбработчикДляВыполнения = Обработчик;
			КонецЕсли;
			ЕстьВыполняющиеся = Истина;

			Продолжить;
		КонецЕсли;

		Если Обработчик.Статус = Перечисления.СтатусыОбработчиковОбновления.Приостановлен Тогда
			Продолжить;
		КонецЕсли;

		МаксимумПопытокОбновления = сОИБ_МаксимумПопытокОбновления(Обработчик);
		Если Обработчик.ЧислоПопыток >= МаксимумПопытокОбновления Тогда
			Если Обработчик.Статус = Перечисления.СтатусыОбработчиковОбновления.Ошибка Тогда
				ЕстьОшибки = Истина;

				Продолжить;
			ИначеЕсли сОИБ_ВсеОбработчикиЗациклились() Тогда
				сОИБ_ОтметитьЗациклившиесяОбработчики();
				ЕстьОшибки = Истина;

				Продолжить;
			КонецЕсли;
		КонецЕсли;

		ОбработчикДляВыполнения = Обработчик;

		Прервать;
	КонецЦикла;

	Если ОбработчикДляВыполнения = Неопределено И ВыполняющийсяМногопоточныйОбработчик <> Неопределено Тогда
		ОбработчикДляВыполнения = ВыполняющийсяМногопоточныйОбработчик;
	КонецЕсли;

	Если ЕстьОшибки Тогда
		ЗавершеноУспешно = Ложь;
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("ОбработчикДляВыполнения",	ОбработчикДляВыполнения);
	Результат.Вставить("ЗавершеноУспешно",			ЗавершеноУспешно);
	Результат.Вставить("ЕстьВыполняющиеся",			ЕстьВыполняющиеся);
	Результат.Вставить("ЕстьНевыполненные",			ЕстьНевыполненные);

	Возврат Результат;
КонецФункции

Функция сОИБ_ОчередьОбработчиковГруппыОбновления(ГруппаОбновления)
	Запрос			= Новый Запрос;
	Запрос.Текст	=
		"ВЫБРАТЬ
		|	ОбработчикиОбновления.ОчередьОтложеннойОбработки КАК Очередь,
		|	ОбработчикиОбновления.Идентификатор КАК Идентификатор,
		|	ОбработчикиОбновления.ИмяОбработчика КАК Обработчик
		|ИЗ
		|	РегистрСведений.ОбработчикиОбновления КАК ОбработчикиОбновления
		|ГДЕ
		|	ОбработчикиОбновления.ГруппаОбновления = &ГруппаОбновления";
	Запрос.УстановитьПараметр("ГруппаОбновления", ГруппаОбновления);

	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция сОИБ_ЕстьОбработчикиТолькоГлавногоУзла()
	Запрос			= Новый Запрос;
	Запрос.Текст	=
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ОбработчикиОбновления КАК ОбработчикиОбновления
		|ГДЕ
		|	ОбработчикиОбновления.ЗапускатьТолькоВГлавномУзле = ИСТИНА";

	Возврат Запрос.Выполнить().Выгрузить().Количество() > 0;
КонецФункции

Функция сОИБ_НовоеОписаниеГруппПотоковОбработчиковОтложенногоОбновления()
	ГруппаОбновления						= сОИБ_НовоеОписаниеГруппыПотоков();
	ГруппаОбновления.Процедура				= "ОбновлениеВерсииИБСервер.сОИБ_ВыполнитьОтложенныйОбработчик";
	ГруппаОбновления.ПроцедураЗавершения	= "ОбновлениеВерсииИБСервер.сОИБ_ЗавершитьВыполнениеОтложенногоОбработчика";
	ГруппаОбновления.ПриАварийномЗавершении	= "ОбновлениеВерсииИБСервер.сОИБ_ПриАварийномЗавершенииПотокаОтложенногоОбработчика";
	ГруппаОбновления.ПриОтменеПотока		= "ОбновлениеВерсииИБСервер.сОИБ_ПриОтменеПотокаОтложенногоОбработчика";

	ГруппаПоиска							= сОИБ_НовоеОписаниеГруппыПотоков();
	ГруппаПоиска.Процедура					= "ОбновлениеВерсииИБСервер.сОИБ_НайтиПорциюДляОбновления";
	ГруппаПоиска.ПроцедураЗавершения		= "ОбновлениеВерсииИБСервер.сОИБ_ЗавершитьПоискПорцииДляОбновления";
	ГруппаПоиска.ПриАварийномЗавершении		= "ОбновлениеВерсииИБСервер.сОИБ_ПриАварийномЗавершенииПотокаПоискаПорцииДляОбновления";
	ГруппаПоиска.ПриОтменеПотока			= "ОбновлениеВерсииИБСервер.сОИБ_ПриОтменеПотокаПоискаПорцииДляОбновления";

	Группы					= Новый Соответствие;
	Группы["Обновление"]	= ГруппаОбновления;
	Группы["Поиск"]			= ГруппаПоиска;

	Возврат Группы;
КонецФункции

Процедура сОИБ_СохранитьПотокОбновления(Поток)
	НаборЗаписей	= РегистрыСведений.ПотокиОбновления.СоздатьНаборЗаписей();
	Идентификатор	= Поток.ИдентификаторПотока;
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	НаборЗаписей.Отбор.ИдентификаторПотока.Установить(Идентификатор);
	НаборЗаписей.Прочитать();

	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
	Иначе
		Запись = НаборЗаписей[0];
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(Запись, Поток, , "ИдентификаторПотока,ПараметрыПроцедуры,ПараметрыПроцедурыЗавершения");
	Запись.ИдентификаторПотока			= Идентификатор;
	Запись.ПараметрыПроцедуры			= Новый ХранилищеЗначения(Поток.ПараметрыПроцедуры);
	Запись.ПараметрыПроцедурыЗавершения	= Новый ХранилищеЗначения(Поток.ПараметрыПроцедурыЗавершения);

	НаборЗаписей.Записать();
КонецПроцедуры

Процедура сОИБ_УдалитьВсеПотокиОбновления()
	НаборЗаписей = РегистрыСведений.ПотокиОбновления.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
КонецПроцедуры

Процедура сОИБ_УдалитьПотокОбновления(ИдентификаторПотока)
	НаборЗаписей = РегистрыСведений.ПотокиОбновления.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторПотока.Установить(ИдентификаторПотока);
	НаборЗаписей.Записать();
КонецПроцедуры

Функция сОИБ_ПотокиОбновления()
	ТаблицаПотоков = сОИБ_НовоеОписаниеПотоков();

	Запрос			= Новый Запрос;
	Запрос.Текст	=
		"ВЫБРАТЬ
		|	ПотокиОбновления.АдресРезультата КАК АдресРезультата,
		|	ПотокиОбновления.Группа КАК Группа,
		|	ПотокиОбновления.Наименование КАК Наименование,
		|	ПотокиОбновления.ПараметрыПроцедуры КАК ПараметрыПроцедуры,
		|	ПотокиОбновления.ПараметрыПроцедурыЗавершения КАК ПараметрыПроцедурыЗавершения,
		|	ПотокиОбновления.ПриоритетЗавершения КАК ПриоритетЗавершения,
		|	ПотокиОбновления.ИдентификаторЗадания КАК ИдентификаторЗадания,
		|	ПотокиОбновления.ИдентификаторПотока КАК ИдентификаторПотока
		|ИЗ
		|	РегистрСведений.ПотокиОбновления КАК ПотокиОбновления";
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого Поток Из Результат Цикл
		Строка = ТаблицаПотоков.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Поток, , "ПараметрыПроцедуры,ПараметрыПроцедурыЗавершения");
		Если Не ЗначениеЗаполнено(Строка.АдресРезультата) Тогда
			Строка.АдресРезультата = Неопределено;
		КонецЕсли;
		Строка.ПараметрыПроцедурыЗавершения	= Поток.ПараметрыПроцедурыЗавершения.Получить();
		Строка.ПараметрыПроцедуры			= Поток.ПараметрыПроцедуры.Получить();
	КонецЦикла;

	Возврат ТаблицаПотоков;
КонецФункции

Функция сОИБ_НовыйПоток()
	Потоки						= сОИБ_НовоеОписаниеПотоков();
	Поток						= Потоки.Добавить();
	Поток.ИдентификаторПотока	= Новый УникальныйИдентификатор;

	Возврат Поток;
КонецФункции

Функция сОИБ_ОбновитьИнформационнуюБазуВФоне(УникальныйИдентификаторФормы, БлокировкаИБ) Экспорт
	// Запуск фонового задания
	ПараметрыОбновленияИБ = Новый Структура;
	ПараметрыОбновленияИБ.Вставить("ИсключениеПриНевозможностиБлокировкиИБ",	Ложь);
	ПараметрыОбновленияИБ.Вставить("БлокировкаИБ",								БлокировкаИБ);
	ПараметрыОбновленияИБ.Вставить("ПараметрыКлиентаНаСервере",					ПараметрыСеанса.ПараметрыКлиентаНаСервере);

	// Установка монопольного режима до запуска фонового выполнения обновления.
	Попытка
		сОИБ_ЗаблокироватьИБ(ПараметрыОбновленияИБ.БлокировкаИБ, Ложь);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();

		Результат = Новый Структура;
		Результат.Вставить("Статус",						"Ошибка");
		Результат.Вставить("БлокировкаИБ",					ПараметрыОбновленияИБ.БлокировкаИБ);
		Результат.Вставить("КраткоеПредставлениеОшибки",	ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Результат.Вставить("ПодробноеПредставлениеОшибки",	ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));

		Возврат Результат;
	КонецПопытки;

	ПараметрыОбновленияИБ.Вставить("ВФоне", Не ПараметрыОбновленияИБ.БлокировкаИБ.РежимОтладки);

	Если Не ПараметрыОбновленияИБ.ВФоне Тогда
		ПараметрыОбновленияИБ.Удалить("ПараметрыКлиентаНаСервере");
	КонецЕсли;

	ПараметрыВыполнения								= БазоваяПодсистемаСервер.ДО_ПараметрыВыполненияВФоне(УникальныйИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение			= 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания	= "Фоновое обновление информационной базы";

	Результат = БазоваяПодсистемаСервер.ДО_ВыполнитьВФоне("ОбновлениеВерсииИБСервер.сОИБ_ВыполнитьОбновлениеИнформационнойБазыВФоне", ПараметрыОбновленияИБ, ПараметрыВыполнения);

	Результат.Вставить("БлокировкаИБ", ПараметрыОбновленияИБ.БлокировкаИБ);

	// Если обновление ИБ уже выполнилось - разблокируем ИБ.
	Если Результат.Статус <> "Выполняется" Тогда
		сОИБ_РазблокироватьИБ(ПараметрыОбновленияИБ.БлокировкаИБ);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Процедура сОИБ_ВыполнитьОбновлениеИнформационнойБазыВФоне(ПараметрыОбновленияИБ, АдресХранилища) Экспорт
	Если ПараметрыОбновленияИБ.ВФоне Тогда
		ПараметрыСеанса.ПараметрыКлиентаНаСервере = ПараметрыОбновленияИБ.ПараметрыКлиентаНаСервере;
	КонецЕсли;

	ИнформацияОбОшибке = Неопределено;
	Попытка
		ПараметрыОбновления											= сОИБ_ПараметрыОбновления();
		ПараметрыОбновления.ИсключениеПриНевозможностиБлокировкиИБ	= ПараметрыОбновленияИБ.ИсключениеПриНевозможностиБлокировкиИБ;
		ПараметрыОбновления.ПриЗапускеКлиентскогоПриложения			= Истина;
		ПараметрыОбновления.Перезапустить							= Ложь;
		ПараметрыОбновления.УстановленнаяБлокировкаИБ				= ПараметрыОбновленияИБ.БлокировкаИБ;
		ПараметрыОбновления.ВФоне									= ПараметрыОбновленияИБ.ВФоне;

		Результат = сОИБ_ВыполнитьОбновлениеИнформационнойБазы(ПараметрыОбновления);
	Исключение
		ИнформацияОбОшибке	= ИнформацияОбОшибке();
		// Переход в режим открытия формы повторной синхронизации данных перед запуском
		// с двумя вариантами "Синхронизировать и продолжить" и "Продолжить".

		// Зарезервировано для новых подсистем
	КонецПопытки;

	Если ИнформацияОбОшибке <> Неопределено Тогда
		РезультатОбновления = Новый Структура;
		РезультатОбновления.Вставить("КраткоеПредставлениеОшибки",		ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		РезультатОбновления.Вставить("ПодробноеПредставлениеОшибки",	ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИначеЕсли Не ПараметрыОбновленияИБ.ВФоне Тогда
		РезультатОбновления = Результат;
	Иначе
		РезультатОбновления = Новый Структура;
		РезультатОбновления.Вставить("ПараметрыКлиентаНаСервере",		ПараметрыСеанса.ПараметрыКлиентаНаСервере);
		РезультатОбновления.Вставить("Результат",						Результат);
	КонецЕсли;
	ПоместитьВоВременноеХранилище(РезультатОбновления, АдресХранилища);
КонецПроцедуры

Функция сОИБ_ВыполнитьОбновлениеИнформационнойБазы(ПараметрыОбновления) Экспорт
	ДополнительныеПараметры = сОИБ_ДействияПередОбновлениемИнформационнойБазы(ПараметрыОбновления);
	Если ЗначениеЗаполнено(ДополнительныеПараметры.Возврат) Тогда
		Возврат ДополнительныеПараметры.Возврат;
	КонецЕсли;

	ПараметрЗапускаКлиента					= ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	ОтладкаОтложенногоОбновления			= СтрНайти(НРег(ПараметрЗапускаКлиента), НРег("ОтладкаОтложенногоОбновления")) > 0;
	РежимВыполненияОтложенногоОбновления	= сОИБ_РежимВыполненияОтложенногоОбновления(ПараметрыОбновления);
	ВыполнитьОтложенноеОбновлениеСейчас		= Не ОтладкаОтложенногоОбновления И РежимВыполненияОтложенногоОбновления = "Монопольно";

	ДополнительныеПараметры.Вставить("ВыполнитьОтложенноеОбновлениеСейчас", ВыполнитьОтложенноеОбновлениеСейчас);
	ДополнительныеПараметры.Вставить("РежимВыполненияОтложенногоОбновления", РежимВыполненияОтложенногоОбновления);

	сОИБ_ВыполнитьДействияПриОбновленииИнформационнойБазы(ПараметрыОбновления, ДополнительныеПараметры);
	сОИБ_ВыполнитьДействияПослеОбновленияИнформационнойБазы(ДополнительныеПараметры);

	Возврат "Успешно";
КонецФункции

Функция сОИБ_ОпределитьДанныеЗаполнения(Знач ПредопределенныеДанные, Знач СтрокаТаблицы, Знач ПоляИсключения)
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из ПредопределенныеДанные.Колонки Цикл
		ИмяПоля = Колонка.Имя;
		Если ПоляИсключения[ИмяПоля] = Истина Тогда
			Продолжить;
		КонецЕсли;

		Значение = СтрокаТаблицы[ИмяПоля];
		Если Колонка.ТипЗначения.Типы().Количество() > 1 Тогда
			Заполнено = Значение <> Неопределено;
		ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
			Заполнено = Значение;
		Иначе
			Заполнено = ЗначениеЗаполнено(Значение);
		КонецЕсли;

		Если Заполнено Тогда
			ДанныеЗаполнения.Вставить(ИмяПоля, Значение);
		КонецЕсли;
	КонецЦикла;

	Возврат ДанныеЗаполнения;
КонецФункции

Функция сОИБ_ДействияПередОбновлениемИнформационнойБазы(ПараметрыОбновления)
	Если Не ПараметрыОбновления.ПриЗапускеКлиентскогоПриложения Тогда
		// Зарезервировано для новых подсистем

		Попытка
			РегистрыСведений.ПараметрыРаботыПрограммы.ЗагрузитьОбновитьПараметрыРаботыПрограммы();
		Исключение
			БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("Возврат", "");

	// Определяем факт смены имени конфигурации.

	РежимОбновленияДанных	= сОИБ_РежимОбновленияДанных();
	ВерсияМетаданных		= Метаданные.Версия;
	Если ПустаяСтрока(ВерсияМетаданных) Тогда
		ВерсияМетаданных = "0.0.0.0";
	КонецЕсли;
	ВерсияДанных	= сОИБ_ВерсияИБ(Метаданные.Имя);

	// Загрузка и выгрузка сообщения обмена после перезапуска в связи с получением изменений конфигурации.
	// Зарезервировано для новых подсистем

	Если НЕ ОбновлениеВерсииИБСерверПовтИсп.сОИБ_НеобходимоОбновлениеИнформационнойБазы() Тогда
		Результат.Возврат = "НеТребуется";

		Возврат Результат;
	КонецЕсли;

	Если ПараметрыОбновления.ВФоне Тогда
		БазоваяПодсистемаСервер.ДО_СообщитьПрогресс(1);
	КонецЕсли;

	ОписанияПодсистем	= БазоваяПодсистемаСерверПовтИсп.СП_ОписанияПодсистем();
	Для каждого ИмяПодсистемы Из ОписанияПодсистем.Порядок Цикл
		ОписаниеПодсистемы = ОписанияПодсистем.ПоИменам.Получить(ИмяПодсистемы);
		Если НЕ ЗначениеЗаполнено(ОписаниеПодсистемы.ОсновнойСерверныйМодуль) Тогда
			Продолжить;
		КонецЕсли;
		Модуль = БазоваяПодсистемаСервер.ОН_ОбщийМодуль(ОписаниеПодсистемы.ОсновнойСерверныйМодуль);
		Модуль.ПередОбновлениемИнформационнойБазы();
	КонецЦикла;

	// Проверка наличия прав для обновления информационной базы.
	Если НЕ ПользователиСервер.П_ЭтоПолноправныйПользователь(, Истина, Истина) Тогда
		Сообщение = "Недостаточно прав для обновления версии программы.";
		БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, Сообщение);

		ВызватьИсключение Сообщение;
	КонецЕсли;

	Если РежимОбновленияДанных = "ПереходСДругойПрограммы" Тогда
		Сообщение = СтрШаблон("Изменилось имя конфигурации на ""%1"".
			|Будет выполнен переход с другой программы.",
			Метаданные.Имя);
	ИначеЕсли РежимОбновленияДанных = "ОбновлениеВерсии" Тогда
		Сообщение = СтрШаблон("Изменился номер версии конфигурации: с ""%1"" на ""%2"".
			|Будет выполнено обновление информационной базы.",
			ВерсияДанных, ВерсияМетаданных);
	Иначе
		Сообщение = СтрШаблон("Выполняется начальное заполнение данных до версии ""%1"".",
		ВерсияМетаданных);
	КонецЕсли;
	БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация,,, Сообщение);

	// Установка блокировки информационной базы.
	БлокировкаУстановленаРанее = ПараметрыОбновления.УстановленнаяБлокировкаИБ <> Неопределено И ПараметрыОбновления.УстановленнаяБлокировкаИБ.Установлена;
	Если БлокировкаУстановленаРанее Тогда
		ИтерацииОбновления	= сОИБ_ИтерацииОбновления();
		БлокировкаИБ		= ПараметрыОбновления.УстановленнаяБлокировкаИБ;
	Иначе
		БлокировкаИБ		= Неопределено;
		ИтерацииОбновления	= сОИБ_ЗаблокироватьИБ(БлокировкаИБ, ПараметрыОбновления.ИсключениеПриНевозможностиБлокировкиИБ);
		Если БлокировкаИБ.Ошибка <> Неопределено Тогда
			Результат.Возврат = БлокировкаИБ.Ошибка;

			Возврат Результат;
		КонецЕсли;
	КонецЕсли;

	Результат.Вставить("РежимОбновленияДанных",			РежимОбновленияДанных);
	Результат.Вставить("ИтерацииОбновления",			ИтерацииОбновления);
	Результат.Вставить("БлокировкаИБ",					БлокировкаИБ);
	Результат.Вставить("БлокировкаУстановленаРанее",	БлокировкаУстановленаРанее);
	Результат.Вставить("ВерсияДанных",					ВерсияДанных);
	Результат.Вставить("ВерсияМетаданных",				ВерсияМетаданных);

	Возврат Результат;
КонецФункции

Функция сОИБ_ЗаблокироватьИБ(БлокировкаИБ, ИсключениеПриНевозможностиБлокировкиИБ)
	ИтерацииОбновления = Неопределено;
	Если БлокировкаИБ = Неопределено Тогда
		БлокировкаИБ = сОИБ_БлокировкаИБ();
	КонецЕсли;

	БлокировкаИБ.Установлена	= Истина;
	БлокировкаИБ.РежимОтладки	= БазоваяПодсистемаСервер.ОН_РежимОтладки();

	ИтерацииОбновления					= сОИБ_ИтерацииОбновления();
	БлокировкаИБ.ОперативноеОбновление	= Ложь;

	Если БлокировкаИБ.РежимОтладки Тогда
		Возврат ИтерацииОбновления;
	КонецЕсли;

	// Установка монопольного режима для обновления информационной базы.
	ИнформацияОбОшибке = Неопределено;
	Попытка
		Если НЕ МонопольныйРежим() Тогда
			УстановитьМонопольныйРежим(Истина);
		КонецЕсли;
		Возврат ИтерацииОбновления;
	Исключение
		Если сОИБ_ВозможноОперативноеОбновление(ИтерацииОбновления) Тогда
			БлокировкаИБ.ОперативноеОбновление = Истина;

			Возврат ИтерацииОбновления;
		КонецЕсли;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;

	// Обработка неудачной попытки установки монопольного режима.
	Сообщение = СтрШаблон("Невозможно выполнить обновление информационной базы:
			|- Невозможно установить монопольный режим
			|- Версия конфигурации не предусматривает обновление без установки монопольного режима
			|
			|Подробности ошибки:
			|%1",
		ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));

	БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, Сообщение);

	// Зарезервировано для новых подсистем

	ВызватьИсключение Сообщение;
КонецФункции

Процедура сОИБ_РазблокироватьИБ(БлокировкаИБ) Экспорт
	Если БлокировкаИБ.РежимОтладки Тогда
		Возврат;
	КонецЕсли;

	Если МонопольныйРежим() Тогда
		Пока ТранзакцияАктивна() Цикл
			ОтменитьТранзакцию();
		КонецЦикла;

		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры

Функция сОИБ_БлокировкаИБ()
	Результат	= Новый Структура;
	Результат.Вставить("Установлена",			Ложь);
	Результат.Вставить("Ошибка",				Неопределено);
	Результат.Вставить("ОперативноеОбновление",	Неопределено);
	Результат.Вставить("КлючЗаписи",			Неопределено);
	Результат.Вставить("РежимОтладки",			Неопределено);

	Возврат Результат;
КонецФункции

Функция сОИБ_ПараметрыОбновления() Экспорт
	Результат	= Новый Структура;
	Результат.Вставить("ИсключениеПриНевозможностиБлокировкиИБ",	Истина);
	Результат.Вставить("ПриЗапускеКлиентскогоПриложения",			Ложь);
	Результат.Вставить("Перезапустить",								Ложь);
	Результат.Вставить("УстановленнаяБлокировкаИБ",					Неопределено);
	Результат.Вставить("ВФоне",										Ложь);
	Результат.Вставить("ВыполнятьОтложенныеОбработчики",			Ложь);

	Возврат Результат;
КонецФункции

Функция сОИБ_НоваяТаблицаОбработчиковПереходаСДругойПрограммы()
	Обработчики	= Новый ТаблицаЗначений;
	Обработчики.Колонки.Добавить("ПредыдущееИмяКонфигурации",	Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("Процедура",					Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));

	Возврат Обработчики;
КонецФункции

Функция сОИБ_ОбработчикиПереходаСДругойПрограммы(ПредыдущееИмяКонфигурации)
	ОбработчикиПерехода		= сОИБ_НоваяТаблицаОбработчиковПереходаСДругойПрограммы();
	ИмяОсновнойКонфигурации	= Метаданные.Имя;

	ОписанияПодсистем	= БазоваяПодсистемаСерверПовтИсп.СП_ОписанияПодсистем();
	Для каждого ИмяПодсистемы Из ОписанияПодсистем.Порядок Цикл
		ОписаниеПодсистемы = ОписанияПодсистем.ПоИменам.Получить(ИмяПодсистемы); // см. СтандартныеПодсистемыПовтИсп.НовоеОписаниеПодсистемы
		Если НЕ ЗначениеЗаполнено(ОписаниеПодсистемы.ОсновнойСерверныйМодуль) Тогда
			Продолжить;
		КонецЕсли;

		Если ОписаниеПодсистемы.Имя <> ИмяОсновнойКонфигурации Тогда
			Продолжить;
		КонецЕсли;

		Модуль = БазоваяПодсистемаСервер.ОН_ОбщийМодуль(ОписаниеПодсистемы.ОсновнойСерверныйМодуль);
		Модуль.ПриДобавленииОбработчиковПереходаСДругойПрограммы(ОбработчикиПерехода);
	КонецЦикла;

	ПриДобавленииОбработчиковПереходаСДругойПрограммы(ОбработчикиПерехода);

	Отбор		= Новый Структура("ПредыдущееИмяКонфигурации", "*");
	Результат	= ОбработчикиПерехода.НайтиСтроки(Отбор);

	Отбор.ПредыдущееИмяКонфигурации = ПредыдущееИмяКонфигурации;
	БазоваяПодсистемаКлиентСервер.ОН_ДополнитьМассив(Результат, ОбработчикиПерехода.НайтиСтроки(Отбор), Истина);

	Возврат Результат;
КонецФункции

Процедура сОИБ_ПерейтиСДругойПрограммы()
	// Предыдущее имя конфигурации, с которой нужно выполнить переход.
	Запрос			= Новый Запрос;
	Запрос.Текст	=
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВерсииПодсистем.ИмяПодсистемы КАК ИмяПодсистемы,
	|	ВерсииПодсистем.Версия КАК Версия
	|ИЗ
	|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
	|ГДЕ
	|	ВерсииПодсистем.ЭтоОсновнаяКонфигурация = ИСТИНА";
	РезультатЗапроса = Запрос.Выполнить();
	// Если по каким-то причинам не отработал обработчик обновления ЗаполнитьРеквизитЭтоОсновнаяКонфигурация.
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	РезультатЗапроса				= Запрос.Выполнить().Выгрузить()[0];
	ПредыдущееИмяКонфигурации		= РезультатЗапроса.ИмяПодсистемы;
	ПредыдущаяВерсияКонфигурации	= РезультатЗапроса.Версия;

	Запрос			= Новый Запрос;
	Запрос.Текст	=
		"ВЫБРАТЬ
		|	ОбработчикиОбновления.ИмяОбработчика КАК ИмяОбработчика
		|ИЗ
		|	РегистрСведений.ОбработчикиОбновления КАК ОбработчикиОбновления
		|ГДЕ
		|	ОбработчикиОбновления.ИмяБиблиотеки = &ИмяБиблиотеки
		|	И ОбработчикиОбновления.Статус <> &Статус";
	Запрос.УстановитьПараметр("ИмяБиблиотеки",	ПредыдущееИмяКонфигурации);
	Запрос.УстановитьПараметр("Статус",			Перечисления.СтатусыОбработчиковОбновления.Выполнен);
	Результат	= Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из Результат Цикл
		НаборЗаписей					= РегистрыСведений.ОбработчикиОбновления.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИмяОбработчика.Установить(Строка.ИмяОбработчика);
		НаборЗаписей.Прочитать();

		НаборЗаписей[0].ИмяБиблиотеки	= Метаданные.Имя;

		НаборЗаписей.Записать();
	КонецЦикла;

	Обработчики = сОИБ_ОбработчикиПереходаСДругойПрограммы(ПредыдущееИмяКонфигурации);

	// Зарезервировано для новых подсистем
	ПодсистемаСуществует = Ложь;
	// Выполняем все обработчики перехода.
	Для Каждого Обработчик Из Обработчики Цикл
		ТранзакцияАктивнаНаНачалоВыполнения = ТранзакцияАктивна();
		сОИБ_ОтключитьОбновлениеКлючейДоступа(Истина, ПодсистемаСуществует);
		Попытка
			БазоваяПодсистемаСервер.ОН_ВыполнитьМетодКонфигурации(Обработчик.Процедура);
			сОИБ_ОтключитьОбновлениеКлючейДоступа(Ложь, ПодсистемаСуществует);
		Исключение
			сОИБ_ОтключитьОбновлениеКлючейДоступа(Ложь, ПодсистемаСуществует);
			ИмяОбработчика = Обработчик.Процедура;
			БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, СтрШаблон("При вызове обработчика перехода с другой программы
				           |""%1""
				           |произошла ошибка:
				           |""%2"".",
				ИмяОбработчика,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));

			ВызватьИсключение;
		КонецПопытки;
		сОИБ_ПроверитьВложеннуюТранзакцию(ТранзакцияАктивнаНаНачалоВыполнения, Обработчик.Процедура);
	КонецЦикла;

	Параметры	= Новый Структура;
	Параметры.Вставить("ВыполнитьОбновлениеСВерсии",				Истина);
	Параметры.Вставить("ВерсияКонфигурации",						Метаданные.Версия);
	Параметры.Вставить("ОчиститьСведенияОПредыдущейКонфигурации",	Истина);
	сОИБ_ПриЗавершенииПереходаСДругойПрограммы(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Параметры);

	// Установка текущих имени и версии конфигурации.
	НачатьТранзакцию();
	Попытка
		Если Параметры.ОчиститьСведенияОПредыдущейКонфигурации Тогда
			НаборЗаписей = РегистрыСведений.ВерсииПодсистем.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИмяПодсистемы.Установить(ПредыдущееИмяКонфигурации);
			НаборЗаписей.Записать();
		КонецЕсли;

		НаборЗаписей = РегистрыСведений.ВерсииПодсистем.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИмяПодсистемы.Установить(Метаданные.Имя);

		ВерсияКонфигурации = Метаданные.Версия;
		Если Параметры.ВыполнитьОбновлениеСВерсии Тогда
			ВерсияКонфигурации = Параметры.ВерсияКонфигурации;
		КонецЕсли;
		НоваяЗапись							= НаборЗаписей.Добавить();
		НоваяЗапись.ИмяПодсистемы			= Метаданные.Имя;
		НоваяЗапись.Версия					= ВерсияКонфигурации;
		НоваяЗапись.ПланОбновления			= Неопределено;
		НоваяЗапись.ЭтоОсновнаяКонфигурация	= Истина;

		НаборЗаписей.Записать();

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

Процедура сОИБ_ПриЗавершенииПереходаСДругойПрограммы(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Параметры)
	ИмяКонфигурации		= Метаданные.Имя;
	ОписанияПодсистем	= БазоваяПодсистемаСерверПовтИсп.СП_ОписанияПодсистем();
	Для каждого ИмяПодсистемы Из ОписанияПодсистем.Порядок Цикл
		ОписаниеПодсистемы = ОписанияПодсистем.ПоИменам.Получить(ИмяПодсистемы); // см. СтандартныеПодсистемыПовтИсп.НовоеОписаниеПодсистемы
		Если НЕ ЗначениеЗаполнено(ОписаниеПодсистемы.ОсновнойСерверныйМодуль) Тогда
			Продолжить;
		КонецЕсли;

		Если ОписаниеПодсистемы.Имя <> ИмяКонфигурации Тогда
			Продолжить;
		КонецЕсли;

		Модуль = БазоваяПодсистемаСервер.ОН_ОбщийМодуль(ОписаниеПодсистемы.ОсновнойСерверныйМодуль);
		Модуль.ПриЗавершенииПереходаСДругойПрограммы(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Параметры);
	КонецЦикла;
КонецПроцедуры

Функция сОИБ_РежимВыполненияОтложенногоОбновления(ПараметрыОбновления)
	ИнформационнаяБазаФайловая				= БазоваяПодсистемаСервер.ОН_ИнформационнаяБазаФайловая();
	ВыполнятьОтложенныеОбработчики			= ПараметрыОбновления.ВыполнятьОтложенныеОбработчики;
	ПараметрЗапускаКлиента					= ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");

	Если ИнформационнаяБазаФайловая Или СтрНайти(НРег(ПараметрЗапускаКлиента), НРег("ВыполнитьОтложенноеОбновлениеСейчас")) > 0 Или ВыполнятьОтложенныеОбработчики Тогда
		Возврат "Монопольно";
	Иначе
		Возврат "Отложенно";
	КонецЕсли;
КонецФункции

Процедура сОИБ_ВыполнитьДействияПриОбновленииИнформационнойБазы(ПараметрыОбновления, ДополнительныеПараметры)
	РежимОбновленияДанных					= ДополнительныеПараметры.РежимОбновленияДанных;
	ИтерацииОбновления						= ДополнительныеПараметры.ИтерацииОбновления;
	БлокировкаИБ							= ДополнительныеПараметры.БлокировкаИБ;
	БлокировкаУстановленаРанее				= ДополнительныеПараметры.БлокировкаУстановленаРанее;
	РежимВыполненияОтложенногоОбновления	= ДополнительныеПараметры.РежимВыполненияОтложенногоОбновления;
	ВыполнитьОтложенноеОбновлениеСейчас		= ДополнительныеПараметры.ВыполнитьОтложенноеОбновлениеСейчас;

	ОперативноеОбновление					= БлокировкаИБ.ОперативноеОбновление;

	Попытка
		Если РежимОбновленияДанных = "ПереходСДругойПрограммы" Тогда
			сОИБ_ПерейтиСДругойПрограммы();

			РежимОбновленияДанных	= сОИБ_РежимОбновленияДанных();
			ОперативноеОбновление	= Ложь;
			ИтерацииОбновления		= сОИБ_ИтерацииОбновления();
		КонецЕсли;
	Исключение
		Если Не БлокировкаУстановленаРанее Тогда
			сОИБ_РазблокироватьИБ(БлокировкаИБ);
		КонецЕсли;

		ВызватьИсключение;
	КонецПопытки;

	Обработки.ОписаниеОбработчиковОбновления.ЗаполнитьНомерОчереди(ИтерацииОбновления);
	сОИБ_ОбновитьСписокВыполняемыхОбработчиковОбновления(ИтерацииОбновления);

	Если ПараметрыОбновления.ВФоне Тогда
		БазоваяПодсистемаСервер.ДО_СообщитьПрогресс(10);
	КонецЕсли;

	Параметры = Новый Структура;
	Параметры.Вставить("ХодВыполненияОбработчиков",				сОИБ_КоличествоОбработчиковНаТекущуюВерсию(ИтерацииОбновления, РежимВыполненияОтложенногоОбновления));
	Параметры.Вставить("ОперативноеОбновление",					ОперативноеОбновление);
	Параметры.Вставить("ВФоне",									ПараметрыОбновления.ВФоне);
	Параметры.Вставить("ПриЗапускеКлиентскогоПриложения",		ПараметрыОбновления.ПриЗапускеКлиентскогоПриложения);
	Параметры.Вставить("РежимВыполненияОтложенногоОбновления",	РежимВыполненияОтложенногоОбновления);

	Сообщение = "Для обновления программы на новую версию будут выполнены обработчики: %1";
	Сообщение = СтрШаблон(Сообщение, Параметры.ХодВыполненияОбработчиков.ВсегоОбработчиков);
	БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация,,, Сообщение);

	Попытка
		// Выполняем все обработчики обновления для подсистем конфигурации.
		Для Каждого ИтерацияОбновления Из ИтерацииОбновления Цикл
			ИтерацияОбновления.ВыполненныеОбработчики = сОИБ_ВыполнитьИтерациюОбновления(ИтерацияОбновления, Параметры);
		КонецЦикла;

		// Очистка списка новых подсистем.
		СведенияОбОбновлении					= сОИБ_СведенияОбОбновленииИнформационнойБазы();
		СведенияОбОбновлении.НовыеПодсистемы	= Новый Массив;
		сОИБ_ЗаполнитьДанныеДляПараллельногоОтложенногоОбновления(Параметры);
		сОИБ_ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);

		// Для файловой базы отложенные обработчики выполняются в основном цикле обновления.
		Если ВыполнитьОтложенноеОбновлениеСейчас Тогда
			сОИБ_ВыполнитьОтложенноеОбновлениеСейчас(Параметры);
		КонецЕсли;
	Исключение
		Если Не БлокировкаУстановленаРанее Тогда
			сОИБ_РазблокироватьИБ(БлокировкаИБ);
		КонецЕсли;

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Процедура сОИБ_ВыполнитьДействияПослеОбновленияИнформационнойБазы(ДополнительныеПараметры)
	РежимОбновленияДанных					= ДополнительныеПараметры.РежимОбновленияДанных;
	ИтерацииОбновления						= ДополнительныеПараметры.ИтерацииОбновления;
	БлокировкаИБ							= ДополнительныеПараметры.БлокировкаИБ;
	ОперативноеОбновление					= ДополнительныеПараметры.БлокировкаИБ.ОперативноеОбновление;
	ВерсияДанных							= ДополнительныеПараметры.ВерсияДанных;
	ВерсияМетаданных						= ДополнительныеПараметры.ВерсияМетаданных;
	БлокировкаУстановленаРанее				= ДополнительныеПараметры.БлокировкаУстановленаРанее;
	РежимВыполненияОтложенногоОбновления	= ДополнительныеПараметры.РежимВыполненияОтложенногоОбновления;
	ВыполнитьОтложенноеОбновлениеСейчас		= ДополнительныеПараметры.ВыполнитьОтложенноеОбновлениеСейчас;

	// Отключение монопольного режима.
	Если Не БлокировкаУстановленаРанее Тогда
		сОИБ_РазблокироватьИБ(БлокировкаИБ);
	КонецЕсли;

	Сообщение = СтрШаблон("Обновление информационной базы на версию ""%1"" выполнено успешно.", ВерсияМетаданных);
	БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация,,, Сообщение);

	ВыводитьОписаниеОбновлений = (РежимОбновленияДанных <> "НачальноеЗаполнение");

	ОбновитьПовторноИспользуемыеЗначения();

	// После обновления информационной базы.
	сОИБ_ВыполнитьОбработчикиПослеОбновленияИнформационнойБазы(ИтерацииОбновления, Константы.ДетализироватьОбновлениеИБВЖурналеРегистрации.Получить(), ВыводитьОписаниеОбновлений, ОперативноеОбновление);

	// Зарезервировано для новых подсистем

	// Для клиент-серверной базы запланировать выполнение отложенных обработчиков обновления.
	Если РежимВыполненияОтложенногоОбновления <> Неопределено И РежимВыполненияОтложенногоОбновления = "Отложенно" Тогда
		сОИБ_ЗапланироватьОтложенноеОбновление();
	КонецЕсли;

	сОИБ_ОпределитьВыводОписанияОбновлений(ВыводитьОписаниеОбновлений);

	// Зарезервировано для новых подсистем

	ОбновитьПовторноИспользуемыеЗначения();

	УстановитьПривилегированныйРежим(Истина);
	ПараметрЗапускаКлиента = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	Если СтрНайти(НРег(ПараметрЗапускаКлиента), НРег("ЗапуститьОбновлениеИнформационнойБазы")) > 0 Тогда
		БазоваяПодсистемаСервер.СП_ЗарегистрироватьИзменениеПриоритетныхДанныхДляПодчиненныхУзловРИБ();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

	// Зарезервировано для новых подсистем

	сОИБ_УстановитьЗапускОбновленияИнформационнойБазы(Ложь);
	ПараметрыСеанса.ВыполняетсяОбновлениеИБ = Ложь;
КонецПроцедуры

Процедура сОИБ_ОбновитьСписокВыполняемыхОбработчиковОбновления(ИтерацииОбновления, ПервыйОбменВРИБ = Ложь) Экспорт
	СведенияОбОбновлении				= сОИБ_СведенияОбОбновленииИнформационнойБазы();
	НезавершенныеОтложенныеОбработчики	= сОИБ_НезавершенныеОтложенныеОбработчики(СведенияОбОбновлении);
	НачатьТранзакцию();
	Попытка
		сОИБ_СброситьСведенияОбОбновлении(СведенияОбОбновлении);

		НаборРазделенныхОбработчиков   = РегистрыСведений.ОбработчикиОбновления.СоздатьНаборЗаписей();
		НаборРазделенныхОбработчиков.Записать();

		НаборНеразделенныхОбработчиков = РегистрыСведений.ОбработчикиОбновленияОбщихДанных.СоздатьНаборЗаписей();
		НаборНеразделенныхОбработчиков.Записать();

		сОИБ_ПроверитьУникальностьИдентификаторовОтложенныхОбработчиков(ИтерацииОбновления);

		ОписанияБиблиотек		= БазоваяПодсистемаСерверПовтИсп.СП_ОписанияПодсистем().ПоИменам;
		ГруппаОбновления		= 1;
		ТекстОшибок				= "";
		ДобавленныеОбработчики	= Новый Массив;
		Для Каждого ИтерацияОбновления Из ИтерацииОбновления Цикл
			// Добавление монопольных и оперативных обработчиков обновления.
			ИмяБиблиотеки = ИтерацияОбновления.Подсистема;
			Если Не ПервыйОбменВРИБ Тогда
				ПредыдущаяВерсия = ИтерацияОбновления.ПредыдущаяВерсия;
				ВерсияМетаданных = ИтерацияОбновления.Версия;
				Если ПустаяСтрока(ВерсияМетаданных) Тогда
					ВерсияМетаданных = "0.0.0.0";
				КонецЕсли;

				ОбработчикиПоВерсиям = Неопределено;

				Если ОбработчикиПоВерсиям = Неопределено Тогда
					ОбработчикиПоВерсиям = сОИБ_ОбработчикиОбновленияВИнтервале(ИтерацияОбновления.Обработчики, ПредыдущаяВерсия, ИтерацияОбновления.Версия);
				КонецЕсли;

				Если ОбработчикиПоВерсиям.Строки.Количество() <> 0 Тогда
					ОбработчикиПоВерсиям.Колонки.Процедура.Имя = "ИмяОбработчика";
					сОИБ_ДобавитьОбработчики(ИмяБиблиотеки, ОбработчикиПоВерсиям.Строки, ДобавленныеОбработчики);
				КонецЕсли;
			КонецЕсли;

			// Добавление отложенных обработчиков обновления.

			// Обработка сценария получения первого сообщения обмена от подчиненного узла после обновления.
			ПредыдущаяВерсия						= ?(ПервыйОбменВРИБ, "1.0.0.0", ИтерацияОбновления.ПредыдущаяВерсия);
			РежимВыполненияОтложенныхОбработчиков	= ОписанияБиблиотек[ИмяБиблиотеки].РежимВыполненияОтложенныхОбработчиков;
			ПараллельноСВерсии						= ОписанияБиблиотек[ИмяБиблиотеки].ПараллельноеОтложенноеОбновлениеСВерсии;
			Если ПервыйОбменВРИБ И РежимВыполненияОтложенныхОбработчиков = "Последовательно" Тогда
				Продолжить;
			КонецЕсли;

			ПараметрыОтбора								= сОИБ_ПараметрыОтбораОбработчиков();
			ПараметрыОтбора.ПолучатьРазделенные			= Истина;
			ПараметрыОтбора.РежимОбновления				= "Отложенно";
			ПараметрыОтбора.УчитыватьПервыйОбменВРИБ	= (РежимВыполненияОтложенныхОбработчиков = "Параллельно");
			ПараметрыОтбора.ПервыйОбменВРИБ				= ПервыйОбменВРИБ;

			ОбработчикиПоВерсиям						= сОИБ_ОбработчикиОбновленияВИнтервале(ИтерацияОбновления.Обработчики, ПредыдущаяВерсия, ИтерацияОбновления.Версия, ПараметрыОтбора);
			ОбработчикиПоВерсиям.Колонки.Процедура.Имя	= "ИмяОбработчика";
				сОИБ_ДобавитьНезавершенныеОтложенныеОбработчики(ИтерацияОбновления, ИмяБиблиотеки, НезавершенныеОтложенныеОбработчики, ОбработчикиПоВерсиям.Строки);

				Если ПервыйОбменВРИБ Тогда
					УдаляемыеСтроки = Новый Массив;
					Для Каждого СтрокаВерсия Из ОбработчикиПоВерсиям.Строки Цикл
						Если СтрокаВерсия.Версия = "*" Или (ЗначениеЗаполнено(ПараллельноСВерсии) И БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсии(СтрокаВерсия.Версия, ПараллельноСВерсии) < 0) Тогда
							УдаляемыеСтроки.Добавить(СтрокаВерсия);
						КонецЕсли;
					КонецЦикла;

					Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
						ОбработчикиПоВерсиям.Строки.Удалить(УдаляемаяСтрока);
					КонецЦикла;
				КонецЕсли;

				Если ОбработчикиПоВерсиям.Строки.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;

				сОИБ_УпорядочитьВерсииОбработчиков(ОбработчикиПоВерсиям);

				сОИБ_ДобавитьОтложенныеОбработчики(ИмяБиблиотеки, ОбработчикиПоВерсиям.Строки, ГруппаОбновления, ТекстОшибок);
		КонецЦикла;

		Если ЗначениеЗаполнено(ТекстОшибок) Тогда
			ВызватьИсключение ТекстОшибок;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Функция сОИБ_ИтерацияОбновления(ИмяКонфигурацииИлиБиблиотеки, Версия, Обработчики, ЭтоОсновнаяКонфигурация = Неопределено) Экспорт
	ИтерацияОбновления	= Новый Структура;
	ИтерацияОбновления.Вставить("Подсистема",					ИмяКонфигурацииИлиБиблиотеки);
	ИтерацияОбновления.Вставить("Версия",						Версия);
	ИтерацияОбновления.Вставить("ЭтоОсновнаяКонфигурация",		?(ЭтоОсновнаяКонфигурация <> Неопределено, ЭтоОсновнаяКонфигурация, ИмяКонфигурацииИлиБиблиотеки = Метаданные.Имя));
	ИтерацияОбновления.Вставить("Обработчики",					Обработчики);
	ИтерацияОбновления.Вставить("ВыполненныеОбработчики",		Неопределено);
	ИтерацияОбновления.Вставить("ИмяОсновногоСерверногоМодуля",	"");
	ИтерацияОбновления.Вставить("ОсновнойСерверныйМодуль",		"");
	ИтерацияОбновления.Вставить("ПредыдущаяВерсия",				"");

	Возврат ИтерацияОбновления;
КонецФункции

Функция сОИБ_ИтерацииОбновления() Экспорт
	ИмяОсновнойКонфигурации					= Метаданные.Имя;

	ИтерацииОбновления	= Новый Массив;
	ОписанияПодсистем	= БазоваяПодсистемаСерверПовтИсп.СП_ОписанияПодсистем();
	Для каждого ИмяПодсистемы Из ОписанияПодсистем.Порядок Цикл
		ОписаниеПодсистемы = ОписанияПодсистем.ПоИменам.Получить(ИмяПодсистемы);
		Если НЕ ЗначениеЗаполнено(ОписаниеПодсистемы.ОсновнойСерверныйМодуль) Тогда
			Продолжить;
		КонецЕсли;
		Модуль											= БазоваяПодсистемаСервер.ОН_ОбщийМодуль(ОписаниеПодсистемы.ОсновнойСерверныйМодуль);

		ИтерацияОбновления								= сОИБ_ИтерацияОбновления(ОписаниеПодсистемы.Имя, ОписаниеПодсистемы.Версия, ОИБ_НоваяТаблицаОбработчиковОбновления(), ОписаниеПодсистемы.Имя = ИмяОсновнойКонфигурации);
		ИтерацияОбновления.ИмяОсновногоСерверногоМодуля	= ОписаниеПодсистемы.ОсновнойСерверныйМодуль;
		ИтерацияОбновления.ОсновнойСерверныйМодуль		= Модуль;
		ИтерацияОбновления.ПредыдущаяВерсия				= сОИБ_ВерсияИБ(ОписаниеПодсистемы.Имя);
		ИтерацииОбновления.Добавить(ИтерацияОбновления);

		Модуль.ПриДобавленииОбработчиковОбновления(ИтерацияОбновления.Обработчики);

		сОИБ_ПроверитьСвойстваОбработчиков(ИтерацияОбновления);
	КонецЦикла;

	Возврат ИтерацииОбновления;
КонецФункции

Процедура сОИБ_ОтключитьОбновлениеКлючейДоступа(Значение, ПодсистемаСуществует)
	// Зарезервировано для новых подсистем
КонецПроцедуры

Функция сОИБ_ВозможноОперативноеОбновление(ПроверяемыеИтерацииОбновления = Неопределено) Экспорт
	Если ПроверяемыеИтерацииОбновления = Неопределено Тогда
		// Режим вызова для определения полного состава процедур обработчиков обновления,
		// требующих монопольный режим (без записи сообщений в журнал регистрации).
		ИтерацииОбновления = сОИБ_ИтерацииОбновления();
	Иначе
		ИтерацииОбновления = ПроверяемыеИтерацииОбновления;
	КонецЕсли;

	ФильтрыРазделенностиОбработчиков = Новый Массив;
	ФильтрыРазделенностиОбработчиков.Добавить(Истина);

	// В режиме проверки параметр не используется.
	ОбязательныеРазделенныеОбработчики	= ОИБ_НоваяТаблицаОбработчиковОбновления();

	ЗаписыватьВЖурнал		= Константы.ДетализироватьОбновлениеИБВЖурналеРегистрации.Получить();
	ПроцедурыОбработчиков	= Новый Массив;

	// Проверяем обработчики обновления с флагом МонопольныйРежим для подсистем конфигурации.
	Для каждого ИтерацияОбновления Из ИтерацииОбновления Цикл
		ПараметрыОтбора					= сОИБ_ПараметрыОтбораОбработчиков();
		ПараметрыОтбора.РежимОбновления	= "Оперативно";

		Для каждого ФлагРазделенности Из ФильтрыРазделенностиОбработчиков Цикл
			ПараметрыОтбора.ПолучатьРазделенные = ФлагРазделенности;

			ДеревоОбработчиков	= сОИБ_ОбработчикиОбновленияВИнтервале(ИтерацияОбновления.Обработчики, ИтерацияОбновления.ПредыдущаяВерсия, ИтерацияОбновления.Версия, ПараметрыОтбора);
			Если ДеревоОбработчиков.Строки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;

			Если ДеревоОбработчиков.Строки.Количество() > 1 ИЛИ ДеревоОбработчиков.Строки[0].Версия <> "*" Тогда
				Для Каждого СтрокаВерсия Из ДеревоОбработчиков.Строки Цикл
					Если СтрокаВерсия.Версия = "*" Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого Обработчик Из СтрокаВерсия.Строки Цикл
						ПроцедурыОбработчиков.Добавить(Обработчик.Процедура);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;

			НайденныеОбработчики = ДеревоОбработчиков.Строки[0].Строки.НайтиСтроки(Новый Структура("МонопольныйРежим", Неопределено));
			Для Каждого Обработчик Из НайденныеОбработчики Цикл
				ПроцедурыОбработчиков.Добавить(Обработчик.Процедура);
			КонецЦикла;

			// Вызов обязательных обработчиков обновления в режиме проверки.
			Для каждого Обработчик Из ДеревоОбработчиков.Строки[0].Строки Цикл
				Если Обработчик.ВерсияРегистрации <> "*" Тогда
					ПроцедурыОбработчиков.Добавить(Обработчик.Процедура);

					Продолжить;
				КонецЕсли;

				ПараметрыОбработчика = Новый Структура;
				ПараметрыОбработчика.Вставить("МонопольныйРежим", Ложь);

				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ЗаписыватьВЖурнал",			ЗаписыватьВЖурнал);
				ДополнительныеПараметры.Вставить("ИдентификаторБиблиотеки",		ИтерацияОбновления.Подсистема);
				ДополнительныеПараметры.Вставить("ХодВыполненияОбработчиков",	Неопределено);
				ДополнительныеПараметры.Вставить("ВФоне",						Ложь);

				сОИБ_ВыполнитьОбработчикОбновления(Обработчик, ПараметрыОбработчика, ДополнительныеПараметры);

				Если ПараметрыОбработчика.МонопольныйРежим = Истина Тогда
					ПроцедурыОбработчиков.Добавить(Обработчик.Процедура);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Если ПроверяемыеИтерацииОбновления = Неопределено Тогда
		ПроверяемыеИтерацииОбновления = ПроцедурыОбработчиков;

		Возврат ПроцедурыОбработчиков.Количество() = 0;
	КонецЕсли;

	Если ПроцедурыОбработчиков.Количество() <> 0 Тогда
		ТекстСообщения = "Следующие обработчики не поддерживают обновление без установки монопольного режима:" + Символы.ПС;
		Для Каждого ПроцедураОбработчика Из ПроцедурыОбработчиков Цикл
			ТекстСообщения = ТекстСообщения + Символы.ПС + ПроцедураОбработчика;
		КонецЦикла;
		БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецЕсли;

	Возврат ПроцедурыОбработчиков.Количество() = 0;
КонецФункции

Функция сОИБ_КоличествоОбработчиковНаТекущуюВерсию(ИтерацииОбновления, РежимВыполненияОтложенногоОбновления)
	Запрос			= Новый Запрос;
	Запрос.УстановитьПараметр("РежимВыполнения",						Перечисления.РежимыВыполненияОбработчиков.Отложенно);
	Запрос.УстановитьПараметр("РежимВыполненияОтложенногоОбработчика",	Перечисления.РежимыВыполненияОтложенныхОбработчиков.Параллельно);

	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбработчикиОбновления.ИмяОбработчика КАК ИмяОбработчика
		|ИЗ
		|	РегистрСведений.ОбработчикиОбновления КАК ОбработчикиОбновления
		|ГДЕ
		|	ОбработчикиОбновления.РежимВыполнения <> &РежимВыполнения";
	КоличествоРазделенныхОбработчиков = Запрос.Выполнить().Выгрузить().Количество();

	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбработчикиОбновленияОбщихДанных.ИмяОбработчика КАК ИмяОбработчика
		|ИЗ
		|	РегистрСведений.ОбработчикиОбновленияОбщихДанных КАК ОбработчикиОбновленияОбщихДанных";
	КоличествоНеразделенныхОбработчиков = Запрос.Выполнить().Выгрузить().Количество();

	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбработчикиОбновления.ИмяОбработчика КАК ИмяОбработчика
		|ИЗ
		|	РегистрСведений.ОбработчикиОбновления КАК ОбработчикиОбновления
		|ГДЕ
		|	ОбработчикиОбновления.РежимВыполнения = &РежимВыполнения";
	КоличествоОтложенныхОбработчиков = Запрос.Выполнить().Выгрузить().Количество();

	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбработчикиОбновления.ИмяОбработчика КАК ИмяОбработчика
		|ИЗ
		|	РегистрСведений.ОбработчикиОбновления КАК ОбработчикиОбновления
		|ГДЕ
		|	ОбработчикиОбновления.РежимВыполненияОтложенногоОбработчика = &РежимВыполненияОтложенногоОбработчика";
	КоличествоПроцедурРегистрации = Запрос.Выполнить().Выгрузить().Количество();

	КоличествоОбработчиков = КоличествоРазделенныхОбработчиков + КоличествоНеразделенныхОбработчиков + КоличествоПроцедурРегистрации;
	Если РежимВыполненияОтложенногоОбновления = "Монопольно" Тогда
		КоличествоОбработчиков = КоличествоОбработчиков + КоличествоОтложенныхОбработчиков;
	КонецЕсли;

	Возврат Новый Структура("ВсегоОбработчиков, ВыполненоОбработчиков", КоличествоОбработчиков, 0);
КонецФункции

Функция сОИБ_ВыполнитьИтерациюОбновления(Знач ИтерацияОбновления, Знач Параметры) Экспорт
	ИдентификаторБиблиотеки	= ИтерацияОбновления.Подсистема;
	ВерсияМетаданныхИБ		= ИтерацияОбновления.Версия;
	ОбработчикиОбновления	= ИтерацияОбновления.Обработчики;

	ТекущаяВерсияИБ			= ИтерацияОбновления.ПредыдущаяВерсия;

	НоваяВерсияИБ			= ТекущаяВерсияИБ;
	ВерсияМетаданных		= ВерсияМетаданныхИБ;
	Если ПустаяСтрока(ВерсияМетаданных) Тогда
		ВерсияМетаданных = "0.0.0.0";
	КонецЕсли;

	ВыполняемыеОбработчики	= сОИБ_ОбработчикиОбновленияВИнтервале(ОбработчикиОбновления, ТекущаяВерсияИБ, ВерсияМетаданных);

	ОбязательныеРазделенныеОбработчики	= ОИБ_НоваяТаблицаОбработчиковОбновления();
	ИсходнаяВерсияИБ					= ТекущаяВерсияИБ;
	ЗаписыватьВЖурнал					= Константы.ДетализироватьОбновлениеИБВЖурналеРегистрации.Получить();

	Для Каждого Версия Из ВыполняемыеОбработчики.Строки Цикл
		Если Версия.Версия = "*" Тогда
			Сообщение	= "Выполняются обязательные процедуры обновления информационной базы.";
		Иначе
			НоваяВерсияИБ	= Версия.Версия;
			Если ТекущаяВерсияИБ = "0.0.0.0" Тогда
				Сообщение = "Выполняется начальное заполнение данных.";
			ИначеЕсли ИтерацияОбновления.ЭтоОсновнаяКонфигурация Тогда
				Сообщение = СтрШаблон("Выполняется обновление информационной базы с версии %1 на версию %2.", ТекущаяВерсияИБ, НоваяВерсияИБ);
			Иначе
				Сообщение = СтрШаблон("Выполняется обновление данных библиотеки %3 с версии %1 на версию %2.", ТекущаяВерсияИБ, НоваяВерсияИБ, ИдентификаторБиблиотеки);
			КонецЕсли;
		КонецЕсли;
		БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация,,, Сообщение);

		Для Каждого Обработчик Из Версия.Строки Цикл
			ПараметрыОбработчика = Неопределено;
			Если Обработчик.ВерсияРегистрации = "*" Тогда
				Если Обработчик.УправлениеОбработчиками Тогда
					ПараметрыОбработчика = Новый Структура;
					ПараметрыОбработчика.Вставить("РазделенныеОбработчики", ОбязательныеРазделенныеОбработчики);
				КонецЕсли;

				Если Обработчик.МонопольныйРежим = Истина Или Обработчик.РежимВыполнения = "Монопольно" Тогда
					Если Параметры.ОперативноеОбновление Тогда
						// Проверки выполняются в ВозможноОперативноеОбновление, а само обновление для таких
						// обработчиков выполняется только при неоперативном обновлении.
						Продолжить;
					КонецЕсли;

					Если ПараметрыОбработчика = Неопределено Тогда
						ПараметрыОбработчика = Новый Структура;
					КонецЕсли;
					ПараметрыОбработчика.Вставить("МонопольныйРежим", Истина);
				КонецЕсли;
			КонецЕсли;

			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ЗаписыватьВЖурнал",			ЗаписыватьВЖурнал);
			ДополнительныеПараметры.Вставить("ИдентификаторБиблиотеки",		ИдентификаторБиблиотеки);
			ДополнительныеПараметры.Вставить("ХодВыполненияОбработчиков",	Параметры.ХодВыполненияОбработчиков);
			ДополнительныеПараметры.Вставить("ВФоне",						Параметры.ВФоне);

			сОИБ_ВыполнитьОбработчикОбновления(Обработчик, ПараметрыОбработчика, ДополнительныеПараметры);
		КонецЦикла;

		Если Версия.Версия = "*" Тогда
			Сообщение = "Выполнены обязательные процедуры обновления информационной базы.";
		ИначеЕсли СтрНачинаетсяС(Версия.Версия, "ОтладкаОбработчика") Тогда
			Сообщение = "Выполнены отлаживаемые процедуры обновления информационной базы.";
		Иначе
			Если ИтерацияОбновления.ЭтоОсновнаяКонфигурация Тогда
				Сообщение = СтрШаблон("Выполнено обновление информационной базы с версии %1 на версию %2.", ТекущаяВерсияИБ, НоваяВерсияИБ);
			Иначе
				Сообщение = СтрШаблон("Выполнено обновление данных библиотеки %3 с версии %1 на версию %2.", ТекущаяВерсияИБ, НоваяВерсияИБ, ИдентификаторБиблиотеки);
			КонецЕсли;
		КонецЕсли;
		БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация,,, Сообщение);

		Если Версия.Версия <> "*" И Не СтрНачинаетсяС(Версия.Версия, "ОтладкаОбработчика") Тогда
			// Установка номера версии информационной базы.
			сОИБ_УстановитьВерсиюИБ(ИдентификаторБиблиотеки, НоваяВерсияИБ, ИтерацияОбновления.ЭтоОсновнаяКонфигурация);
			ТекущаяВерсияИБ = НоваяВерсияИБ;
		КонецЕсли;
	КонецЦикла;

	// Установка номера версии информационной базы.
	Если сОИБ_ВерсияИБ(ИдентификаторБиблиотеки) <> ВерсияМетаданныхИБ Тогда
		сОИБ_УстановитьВерсиюИБ(ИдентификаторБиблиотеки, ВерсияМетаданныхИБ, ИтерацияОбновления.ЭтоОсновнаяКонфигурация);
	КонецЕсли;

	Возврат ВыполняемыеОбработчики;
КонецФункции

Процедура сОИБ_ЗаполнитьДанныеДляПараллельногоОтложенногоОбновления(Параметры)
	Если Параметры.ПриЗапускеКлиентскогоПриложения И Параметры.РежимВыполненияОтложенногоОбновления = "Отложенно" Тогда
		КлиентСервер  = Не БазоваяПодсистемаСервер.ОН_ИнформационнаяБазаФайловая();

		Если КлиентСервер Тогда
			// Регистрация данных выполняется позже.
			Возврат;
		КонецЕсли;
	КонецЕсли;

	сОИБ_УдалитьВсеПотокиОбновления();

	Если Не (БазоваяПодсистемаСерверПовтИсп.СП_ИспользуетсяРИБ("СФильтром") И БазоваяПодсистемаСервер.ОН_ЭтоПодчиненныйУзелРИБ()) Тогда
		Запрос			= Новый Запрос;
		Запрос.Текст	=
		"ВЫБРАТЬ
		|	ОбновлениеИнформационнойБазы.Ссылка КАК Узел
		|ИЗ
		|	ПланОбмена.ОбновлениеИнформационнойБазы КАК ОбновлениеИнформационнойБазы
		|ГДЕ
		|	НЕ ОбновлениеИнформационнойБазы.ЭтотУзел";

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.Узел);
		КонецЦикла;
	КонецЕсли;

	// Зарезервировано для новых подсистем

	ПараметрыИнициализированы	= Ложь;

	Обработчики	= сОИБ_ОбработчикиДляОтложеннойРегистрацииДанных();
	Для Каждого Обработчик Из Обработчики Цикл
		Если Не ПараметрыИнициализированы Тогда
			ПараметрыОбработчикаСтруктура	= ОИБ_ОсновныеПараметрыОтметкиКОбработке();
			ПараметрыИнициализированы		= Истина;

			// Зарезервировано для новых подсистем
		КонецЕсли;

		ПараметрыОбработчикаСтруктура.Очередь = Обработчик.ОчередьОтложеннойОбработки;
		ПараметрыОбработчикаСтруктура.Вставить("ДанныеОбработчика", Новый Соответствие);

		Если Обработчик.Многопоточный Тогда
			ПараметрыОбработчикаСтруктура.ПараметрыВыборки	= ОИБ_ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки();
		Иначе
			ПараметрыОбработчикаСтруктура.ПараметрыВыборки	= Неопределено;
		КонецЕсли;

		ПараметрыОбработчика = Новый Массив;
		ПараметрыОбработчика.Добавить(ПараметрыОбработчикаСтруктура);
		Попытка
			Сообщение = "Выполняется процедура заполнения данных
				                   |""%1""
				                   |отложенного обработчика обновления
				                   |""%2"".";
			Сообщение = СтрШаблон(Сообщение, Обработчик.ПроцедураЗаполненияДанныхОбновления, Обработчик.ИмяОбработчика);
			БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация,,, Сообщение);

			БазоваяПодсистемаСервер.ОН_ВыполнитьМетодКонфигурации(Обработчик.ПроцедураЗаполненияДанныхОбновления, ПараметрыОбработчика);

			// Запись прогресса обновления.
			Если Параметры.ВФоне Тогда
				ХодВыполненияОбработчиков						= Параметры.ХодВыполненияОбработчиков;
				ХодВыполненияОбработчиков.ВыполненоОбработчиков	= ХодВыполненияОбработчиков.ВыполненоОбработчиков + 1;
				Прогресс										= 10 + ХодВыполненияОбработчиков.ВыполненоОбработчиков / ХодВыполненияОбработчиков.ВсегоОбработчиков * 90;
				БазоваяПодсистемаСервер.ДО_СообщитьПрогресс(Прогресс);
			КонецЕсли;
		Исключение
			сОИБ_ОтметитьРегистрациюОтложенныхОбработчиковОбновления(Обработчик.ИмяБиблиотеки, Ложь);
			БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, СтрШаблон(
				"ru = 'При вызове процедуры заполнения данных
						   |""%1""
						   |отложенного обработчика обновления
						   |""%2""
						   |произошла ошибка:
						   |""%3"".",
				Обработчик.ПроцедураЗаполненияДанныхОбновления,
				Обработчик.ИмяОбработчика,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			ВызватьИсключение;
		КонецПопытки;

		ОписаниеОбрабатываемыхДанных					= сОИБ_НовоеОписаниеОбрабатываемыхДанных(Обработчик.Многопоточный);
		ОписаниеОбрабатываемыхДанных.ДанныеОбработчика 	= ПараметрыОбработчикаСтруктура.ДанныеОбработчика;
		ОписаниеОбрабатываемыхДанных.ИмяОбработчика		= Обработчик.ИмяОбработчика;

		Если Обработчик.Многопоточный Тогда
			ОписаниеОбрабатываемыхДанных.ПараметрыВыборки = ПараметрыОбработчикаСтруктура.ПараметрыВыборки;
		КонецЕсли;

		ОписаниеОбрабатываемыхДанных = Новый ХранилищеЗначения(ОписаниеОбрабатываемыхДанных, Новый СжатиеДанных(9));
		сОИБ_УстановитьСвойствоОбработчика(Обработчик.ИмяОбработчика, "ОбрабатываемыеДанные", ОписаниеОбрабатываемыхДанных);
	КонецЦикла;

	сОИБ_ОтметитьРегистрациюОтложенныхОбработчиковОбновления();

	// Зарезервировано для новых подсистем
КонецПроцедуры

Процедура сОИБ_ВыполнитьОбработчикиПослеОбновленияИнформационнойБазы(Знач ИтерацииОбновления, Знач ЗаписыватьВЖурнал, ВыводитьОписаниеОбновлений, Знач ОперативноеОбновление)
	Для Каждого ИтерацияОбновления Из ИтерацииОбновления Цикл
		Если ЗаписыватьВЖурнал Тогда
			Обработчик = Новый Структура;
			Обработчик.Вставить("Версия",				"*");
			Обработчик.Вставить("ВерсияРегистрации",	"*");
			Обработчик.Вставить("РежимВыполнения",		"Оперативно");
			Обработчик.Вставить("Процедура",			ИтерацияОбновления.ИмяОсновногоСерверногоМодуля + ".ПослеОбновленияИнформационнойБазы");
			ОписаниеОбработчика	=  сОИБ_ПодготовитьДетальнуюИнформациюОХодеОбновления(Обработчик, Неопределено, ИтерацияОбновления.Подсистема);
		КонецЕсли;

		Попытка
			ИтерацияОбновления.ОсновнойСерверныйМодуль.ПослеОбновленияИнформационнойБазы(ИтерацияОбновления.ПредыдущаяВерсия, ИтерацияОбновления.Версия, ИтерацияОбновления.ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, НЕ ОперативноеОбновление);
		Исключение
			Если ЗаписыватьВЖурнал Тогда
				сОИБ_ЗаписатьДетальнуюИнформациюОХодеОбновления(ОписаниеОбработчика);
			КонецЕсли;

			ВызватьИсключение;
		КонецПопытки;

		Если ЗаписыватьВЖурнал Тогда
			сОИБ_ЗаписатьДетальнуюИнформациюОХодеОбновления(ОписаниеОбработчика);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура сОИБ_ЗапланироватьОтложенноеОбновление()
	// Планирование выполнения регламентного задания.
	// При работе в модели сервиса - добавляется регламентное задание в очередь.
	Если Не БазоваяПодсистемаСервер.ОН_ИнформационнаяБазаФайловая() Тогда
		сОИБ_ПриВключенииОтложенногоОбновления(Истина);
	КонецЕсли;
КонецПроцедуры

Процедура сОИБ_ОпределитьВыводОписанияОбновлений(ВыводитьОписаниеОбновлений)
	Если ВыводитьОписаниеОбновлений Тогда
		БазоваяПодсистемаСервер.ОН_ХранилищеСохранить(ХранилищеОбщихНастроек,"ОбновлениеИБ", "ВывестиОписаниеИзмененийДляАдминистратора", Истина, Неопределено, ИмяПользователя(), Ложь);
	КонецЕсли;

	СведенияОбОбновленииИБ = сОИБ_СведенияОбОбновленииИнформационнойБазы();
	СведенияОбОбновленииИБ.ВыводитьОписаниеОбновлений = ВыводитьОписаниеОбновлений;

	сОИБ_ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновленииИБ);
КонецПроцедуры

Функция сОИБ_НезавершенныеОтложенныеОбработчики(СведенияОбОбновлении)
	Запрос			= Новый Запрос;
	Запрос.Текст	=
		"ВЫБРАТЬ
		|	ОбработчикиОбновления.ИмяОбработчика КАК ИмяОбработчика,
		|	ОбработчикиОбновления.Статус КАК Статус,
		|	ОбработчикиОбновления.Версия КАК Версия,
		|	ОбработчикиОбновления.ИмяБиблиотеки КАК ИмяБиблиотеки,
		|	ОбработчикиОбновления.ДлительностьОбработки КАК ДлительностьОбработки,
		|	ОбработчикиОбновления.РежимВыполнения КАК РежимВыполнения,
		|	ОбработчикиОбновления.ВерсияРегистрации КАК ВерсияРегистрации,
		|	ОбработчикиОбновления.Идентификатор КАК Идентификатор,
		|	ОбработчикиОбновления.ЧислоПопыток КАК ЧислоПопыток,
		|	ОбработчикиОбновления.СтатистикаВыполнения КАК СтатистикаВыполнения,
		|	ОбработчикиОбновления.ИнформацияОбОшибке КАК ИнформацияОбОшибке,
		|	ОбработчикиОбновления.Комментарий КАК Комментарий,
		|	ОбработчикиОбновления.Приоритет КАК Приоритет,
		|	ОбработчикиОбновления.ПроцедураПроверки КАК ПроцедураПроверки,
		|	ОбработчикиОбновления.ПроцедураЗаполненияДанныхОбновления КАК ПроцедураЗаполненияДанныхОбновления,
		|	ОбработчикиОбновления.ОчередьОтложеннойОбработки КАК ОчередьОтложеннойОбработки,
		|	ОбработчикиОбновления.ЗапускатьТолькоВГлавномУзле КАК ЗапускатьТолькоВГлавномУзле,
		|	ОбработчикиОбновления.ЗапускатьИВПодчиненномУзлеРИБСФильтрами КАК ЗапускатьИВПодчиненномУзлеРИБСФильтрами,
		|	ОбработчикиОбновления.Многопоточный КАК Многопоточный,
		|	ОбработчикиОбновления.ОбработкаПорцииЗавершена КАК ОбработкаПорцииЗавершена,
		|	ОбработчикиОбновления.ГруппаОбновления КАК ГруппаОбновления,
		|	ОбработчикиОбновления.ИтерацияЗапуска КАК ИтерацияЗапуска,
		|	ОбработчикиОбновления.ОбрабатываемыеДанные КАК ОбрабатываемыеДанные
		|ИЗ
		|	РегистрСведений.ОбработчикиОбновления КАК ОбработчикиОбновления
		|ГДЕ
		|	ОбработчикиОбновления.РежимВыполнения = &РежимВыполнения
		|	И ОбработчикиОбновления.Статус <> &Статус";
	Запрос.УстановитьПараметр("РежимВыполнения", Перечисления.РежимыВыполненияОбработчиков.Отложенно);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыОбработчиковОбновления.Выполнен);
	Обработчики	= Запрос.Выполнить().Выгрузить();

	ДеревоОбработчиков = СведенияОбОбновлении.ДеревоОбработчиков.Строки;
	Если ДеревоОбработчиков.Количество() > 0 Тогда
		СведенияОбОбновлении.ДеревоОбработчиков.Колонки.НомерВерсии.Имя = "Версия";
		Отбор		= Новый Структура;
		Отбор.Вставить("Статус", "Выполняется");
		Выполняются	= ДеревоОбработчиков.НайтиСтроки(Отбор, Истина);
		сОИБ_ПеренестиОбработчикиИзКонстанты(Обработчики, Выполняются);

		Отбор.Статус	= "НеВыполнено";
		НеВыполнены		= ДеревоОбработчиков.НайтиСтроки(Отбор, Истина);
		сОИБ_ПеренестиОбработчикиИзКонстанты(Обработчики, НеВыполнены);

		Отбор.Статус		= "Ошибка";
		ЗавершилисьСОшибкой	= ДеревоОбработчиков.НайтиСтроки(Отбор, Истина);
		сОИБ_ПеренестиОбработчикиИзКонстанты(Обработчики, ЗавершилисьСОшибкой);

		СведенияОбОбновлении.ДеревоОбработчиков = Новый ДеревоЗначений;
	КонецЕсли;

	Возврат Обработчики
КонецФункции

Процедура сОИБ_СброситьСведенияОбОбновлении(СведенияОбОбновлении)
	Константы.ОтложенноеОбновлениеЗавершеноУспешно.Установить(Ложь);

	СведенияОбОбновлении.Вставить("ВремяНачалаОбновления");
	СведенияОбОбновлении.Вставить("ВремяОкончанияОбновления");
	СведенияОбОбновлении.Вставить("ПродолжительностьОбновления");
	СведенияОбОбновлении.Вставить("ВремяНачалаОтложенногоОбновления");
	СведенияОбОбновлении.Вставить("ВремяОкончаниеОтложенногоОбновления");
	СведенияОбОбновлении.Вставить("НомерСеанса",							Новый СписокЗначений);
	СведенияОбОбновлении.Вставить("ОтложенноеОбновлениеЗавершеноУспешно");
	СведенияОбОбновлении.Вставить("ВыводитьОписаниеОбновлений",				Ложь);
	СведенияОбОбновлении.Вставить("ПриостановленныеПроцедурыОбновления",	Новый Массив);
	СведенияОбОбновлении.Вставить("ЗапущенныеПроцедурыОбновления",			Новый Массив);
	Если СведенияОбОбновлении.УправлениеОтложеннымОбновлением.Свойство("ФорсироватьОбновление") Тогда
		СведенияОбОбновлении.Вставить("УправлениеОтложеннымОбновлением", Новый Структура("ФорсироватьОбновление"));
	Иначе
		СведенияОбОбновлении.Вставить("УправлениеОтложеннымОбновлением", Новый Структура);
	КонецЕсли;
	СведенияОбОбновлении.Вставить("ТекущаяИтерацияОбновления", 1);
	СведенияОбОбновлении.Вставить("ЗависимостьГруппОбработчиков", Новый Соответствие);
	СведенияОбОбновлении.ВерсияДереваОбработчиков = Метаданные.Версия;

	сОИБ_ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);

	сОИБ_ЗаписатьСведенияОБлокируемыхОбъектах(сОИБ_НовыеСведенияОБлокируемыхОбъектах());
КонецПроцедуры

Процедура сОИБ_ПроверитьУникальностьИдентификаторовОтложенныхОбработчиков(ИтерацииОбновления)
	ТаблицаПроверкиУникальности	= Новый ТаблицаЗначений;
	ТаблицаПроверкиУникальности.Колонки.Добавить("Идентификатор");
	ТаблицаПроверкиУникальности.Колонки.Добавить("Индекс");

	Для Каждого ИтерацияОбновления Из ИтерацииОбновления Цикл
		ПараметрыОтбора		= Новый Структура;
		ПараметрыОтбора.Вставить("РежимВыполнения", "Отложенно");
		ТаблицаОбработчиков	= ИтерацияОбновления.Обработчики;

		Обработчики = ТаблицаОбработчиков.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Обработчик Из Обработчики Цикл
			Если Не ЗначениеЗаполнено(Обработчик.Идентификатор) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы				= ТаблицаПроверкиУникальности.Добавить();
			СтрокаТаблицы.Идентификатор	= Строка(Обработчик.Идентификатор);
			СтрокаТаблицы.Индекс		= 1;
		КонецЦикла;
	КонецЦикла;

	ИсходноеКоличествоСтрок = ТаблицаПроверкиУникальности.Количество();
	ТаблицаПроверкиУникальности.Свернуть("Идентификатор", "Индекс");
	ИтоговоеКоличествоСтрок = ТаблицаПроверкиУникальности.Количество();

	// Быстрая проверка.
	Если ИсходноеКоличествоСтрок = ИтоговоеКоличествоСтрок Тогда
		Возврат; // Все идентификаторы уникальны.
	КонецЕсли;

	ТаблицаПроверкиУникальности.Сортировать("Индекс Убыв");
	ТекстСообщения = "Обнаружены отложенные обработчики обновления,
		|у которых совпадают уникальные идентификаторы. Следующие идентификаторы не уникальны:";
	Для Каждого СтрокаИдентификатор Из ТаблицаПроверкиУникальности Цикл
		Если СтрокаИдентификатор.Индекс = 1 Тогда
			Прервать;
		Иначе
			ТекстСообщения = ТекстСообщения + Символы.ПС + СтрокаИдентификатор.Идентификатор;
		КонецЕсли;
	КонецЦикла;

	ВызватьИсключение ТекстСообщения;
КонецПроцедуры

Функция сОИБ_ОбработчикиОбновленияВИнтервале(Знач ИсходнаяТаблицаОбработчиков, Знач ВерсияОт, Знач ВерсияДо, Знач ПараметрыОтбораОбработчиков = Неопределено) Экспорт
	ПараметрыОтбора = ПараметрыОтбораОбработчиков;
	Если ПараметрыОтбора = Неопределено Тогда
		ПараметрыОтбора = сОИБ_ПараметрыОтбораОбработчиков();
	КонецЕсли;
	// Добавление номера в таблицу, для упорядочивания в порядке добавления.
	ВсеОбработчики = ИсходнаяТаблицаОбработчиков.Скопировать();

	ВсеОбработчики.Колонки.Добавить("НомерПоПорядку", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	Для Индекс = 0 По ВсеОбработчики.Количество() - 1 Цикл
		СтрокаОбработчика					= ВсеОбработчики[Индекс];
		СтрокаОбработчика.НомерПоПорядку	= Индекс + 1;
	КонецЦикла;

	сОИБ_ОтметитьОбработчикиНовыхПодсистем(ВсеОбработчики);

	// Подготовка параметров
	ВыбиратьРазделенныеОбработчики		= Истина;
	ВыбиратьНеразделенныеОбработчики	= Истина;

	// Формирование дерева обработчиков.
	Схема																= ПолучитьОбщийМакет("ПолучениеДереваОбработчиковОбновления");
	Схема.Параметры.Найти("ВыбиратьРазделенныеОбработчики").Значение	= ВыбиратьРазделенныеОбработчики;
	Схема.Параметры.Найти("ВыбиратьНеразделенныеОбработчики").Значение	= ВыбиратьНеразделенныеОбработчики;
	Схема.Параметры.Найти("ВерсияОт").Значение							= ВерсияОт;
	Схема.Параметры.Найти("ВерсияДо").Значение							= ВерсияДо;
	Схема.Параметры.Найти("ВесВерсииОт").Значение						= сОИБ_ВесВерсии(Схема.Параметры.Найти("ВерсияОт").Значение);
	Схема.Параметры.Найти("ВесВерсииДо").Значение						= сОИБ_ВесВерсии(Схема.Параметры.Найти("ВерсияДо").Значение);
	Схема.Параметры.Найти("ОперативноеОбновление").Значение				= (ПараметрыОтбора.РежимОбновления = "Оперативно");
	Схема.Параметры.Найти("ОтложенноеОбновление").Значение				= (ПараметрыОтбора.РежимОбновления = "Отложенно");
	Если ПараметрыОтбора.УчитыватьПервыйОбменВРИБ Тогда
		Схема.Параметры.Найти("ПервыйОбменВРИБ").Значение				= ПараметрыОтбора.ПервыйОбменВРИБ;
		Схема.Параметры.Найти("ЭтоРИБСФильтром").Значение				= БазоваяПодсистемаСерверПовтИсп.СП_ИспользуетсяРИБ("СФильтром");
	КонецЕсли;

	Компоновщик	= Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет		= Компоновщик.Выполнить(Схема, Схема.НастройкиПоУмолчанию, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, Новый Структура("Обработчики", ВсеОбработчики), , Истина);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Новый ДеревоЗначений);

	ВыполняемыеОбработчики = ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	КолонкаВерсия			= ВыполняемыеОбработчики.Колонки.Версия; // КоллекцияКолонокТаблицыЗначений
	КолонкаВерсия.Имя		= "ВерсияРегистрации";
	КолонкаГруппаВерсии		= ВыполняемыеОбработчики.Колонки.ГруппаВерсии;  // КоллекцияКолонокТаблицыЗначений
	КолонкаГруппаВерсии.Имя	= "Версия";

	// Сортировка обработчиков по признаку "ОбщиеДанные".
	Для Каждого Версия Из ВыполняемыеОбработчики.Строки Цикл
		Версия.Строки.Сортировать("ОбщиеДанные Убыв", Истина);
	КонецЦикла;

	Возврат ВыполняемыеОбработчики;
КонецФункции

Процедура сОИБ_ДобавитьОбработчики(ИмяБиблиотеки, ОбработчикиПоВерсиям, ДобавленныеОбработчики)
	НаборРазделенныхОбработчиков   = РегистрыСведений.ОбработчикиОбновления.СоздатьНаборЗаписей();
	НаборРазделенныхОбработчиков.Прочитать();

	НаборНеразделенныхОбработчиков = РегистрыСведений.ОбработчикиОбновленияОбщихДанных.СоздатьНаборЗаписей();
	НаборНеразделенныхОбработчиков.Прочитать();

	Для Каждого Версия Из ОбработчикиПоВерсиям Цикл
		Для Каждого Обработчик Из Версия.Строки Цикл
			Если ДобавленныеОбработчики.Найти(Обработчик.ИмяОбработчика) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Если Обработчик.ОбщиеДанные = Истина Тогда
				Запись = НаборНеразделенныхОбработчиков.Добавить();
			Иначе
				Запись = НаборРазделенныхОбработчиков.Добавить();
			КонецЕсли;

			ЗаполнитьЗначенияСвойств(Запись, Обработчик, , "РежимВыполнения");

			Если Не ЗначениеЗаполнено(Обработчик.РежимВыполнения) И (Обработчик.МонопольныйРежим = Истина Или Обработчик.МонопольныйРежим = Неопределено) Тогда
				РежимВыполнения = Перечисления.РежимыВыполненияОбработчиков.Монопольно;
			ИначеЕсли Не ЗначениеЗаполнено(Обработчик.РежимВыполнения) И Обработчик.МонопольныйРежим = Ложь Тогда
				РежимВыполнения = Перечисления.РежимыВыполненияОбработчиков.Оперативно;
			Иначе
				РежимВыполнения = Перечисления.РежимыВыполненияОбработчиков[Обработчик.РежимВыполнения];
			КонецЕсли;

			Запись.РежимВыполнения	= РежимВыполнения;
			Запись.Статус			= Перечисления.СтатусыОбработчиковОбновления.НеВыполнялся;
			Запись.ИмяБиблиотеки	= ИмяБиблиотеки;

			ДобавленныеОбработчики.Добавить(Обработчик.ИмяОбработчика);
		КонецЦикла;
	КонецЦикла;

	НаборРазделенныхОбработчиков.Записать();
	НаборНеразделенныхОбработчиков.Записать();
КонецПроцедуры

Функция сОИБ_ПараметрыОтбораОбработчиков() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ПолучатьРазделенные",		Ложь);
	Результат.Вставить("РежимОбновления",			"Монопольно");
	Результат.Вставить("УчитыватьПервыйОбменВРИБ",	Ложь);
	Результат.Вставить("ПервыйОбменВРИБ",			Ложь);

	Возврат Результат;
КонецФункции

Процедура сОИБ_ДобавитьНезавершенныеОтложенныеОбработчики(ИтерацияОбновления, ИмяБиблиотеки, НезавершенныеОтложенныеОбработчики, Обработчики)
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяБиблиотеки", ИмяБиблиотеки);
	НезавершенныеОбработчикиБиблиотеки = НезавершенныеОтложенныеОбработчики.НайтиСтроки(Отбор);
	Для Каждого Обработчик Из НезавершенныеОбработчикиБиблиотеки Цикл
		НайденныйОбработчик = Обработчики.Найти(Обработчик.ИмяОбработчика, "ИмяОбработчика", Истина);
		Если НайденныйОбработчик <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если ЗначениеЗаполнено(Обработчик.Идентификатор) Тогда
			НайденныйОбработчик = Обработчики.Найти(Обработчик.Идентификатор, "Идентификатор", Истина);
			Если НайденныйОбработчик <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		// Проверка, что обработчик не был удален.
		НайденныйОбработчик = ИтерацияОбновления.Обработчики.Найти(Обработчик.ИмяОбработчика, "Процедура");
		Если НайденныйОбработчик = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		// Необходимо запланировать выполнение незавершенного обработчика.
		СтрокаВерсия = Обработчики.Найти(НайденныйОбработчик.Версия, "Версия");
		Если СтрокаВерсия = Неопределено Тогда
			СтрокаВерсия		= Обработчики.Добавить();
			СтрокаВерсия.Версия	= НайденныйОбработчик.Версия;
		КонецЕсли;

		НовыйОбработчик = СтрокаВерсия.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйОбработчик, НайденныйОбработчик, , "РежимВыполнения");
		НовыйОбработчик.ИмяОбработчика	= НайденныйОбработчик.Процедура;
		НовыйОбработчик.РежимВыполнения = "Отложенно";
	КонецЦикла;
КонецПроцедуры

Процедура сОИБ_УпорядочитьВерсииОбработчиков(ОбработчикиПоВерсиям)
	ОбработчикиПоВерсиям.Колонки.Добавить("ВерсияПорядок", Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаВерсия Из ОбработчикиПоВерсиям.Строки Цикл
		Версия = СтрокаВерсия.Версия;
		Если Версия = "*" Или Не ЗначениеЗаполнено(Версия) Тогда
			СтрокаВерсия.ВерсияПорядок = 0;
		ИначеЕсли СтрНачинаетсяС(Версия, "ОтладкаОбработчика") Тогда
			СтрокаВерсия.ВерсияПорядок = 99000000000;
		Иначе
			СтрокаВерсия.ВерсияПорядок = сОИБ_ВесВерсииИзМассиваСтрок(СтрРазделить(Версия, "."));
		КонецЕсли;
	КонецЦикла;

	ОбработчикиПоВерсиям.Строки.Сортировать("ВерсияПорядок Возр");
КонецПроцедуры

Процедура сОИБ_ДобавитьОтложенныеОбработчики(ИмяБиблиотеки, ОбработчикиПоВерсиям, ГруппаОбновления, ТекстОшибок)
	ЭтоПодчиненныйУзелРИБ			= БазоваяПодсистемаСервер.ОН_ЭтоПодчиненныйУзелРИБ();
	ЭтоПодчиненныйУзелРИБСФильтром	= БазоваяПодсистемаСервер.ОН_ЭтоПодчиненныйУзелРИБСФильтром();
	ОписанияПодсистем				= БазоваяПодсистемаСерверПовтИсп.СП_ОписанияПодсистем();

	ОписаниеПодсистемы						= ОписанияПодсистем.ПоИменам[ИмяБиблиотеки];
	ПараллельноСВерсии						= ОписаниеПодсистемы.ПараллельноеОтложенноеОбновлениеСВерсии;
	РежимВыполненияОтложенныхОбработчиков	= ОписаниеПодсистемы.РежимВыполненияОтложенныхОбработчиков;

	НаборРазделенныхОбработчиков	= РегистрыСведений.ОбработчикиОбновления.СоздатьНаборЗаписей();
	НаборРазделенныхОбработчиков.Прочитать();

	СведенияОбОбновлении			= сОИБ_СведенияОбОбновленииИнформационнойБазы();
	ЗависимостьГруппОбработчиков	= СведенияОбОбновлении.ЗависимостьГруппОбработчиков;

	ПропуститьПроверку					= Ложь;
	ТекущийРежимВыполнения				= "";
	СоздаватьНовуюИтерацию				= Истина;
	Итерация							= 1;
	ЕстьОбработчикиТолькоГлавногоУзла	= Ложь;
	СведенияОБлокируемыхОбъектах		= сОИБ_СведенияОБлокируемыхОбъектах();
	Для Каждого СтрокаВерсия Из ОбработчикиПоВерсиям Цикл
		сОИБ_ЗаполнитьБлокируемыеОбъекты(СтрокаВерсия, СведенияОБлокируемыхОбъектах);

		Если РежимВыполненияОтложенныхОбработчиков = "Последовательно" Тогда
			ЗависимостьГруппОбработчиков.Вставить(ГруппаОбновления, Итерация <> 1);
			ТекущийРежимВыполнения = "Последовательно";
		ИначеЕсли РежимВыполненияОтложенныхОбработчиков = "Параллельно" И Не ЗначениеЗаполнено(ПараллельноСВерсии) Тогда
			ЗависимостьГруппОбработчиков.Вставить(ГруппаОбновления, Ложь);
			ТекущийРежимВыполнения = "Параллельно";
			СоздаватьНовуюИтерацию = Ложь;
		ИначеЕсли РежимВыполненияОтложенныхОбработчиков = "Параллельно" И ЗначениеЗаполнено(ПараллельноСВерсии) И Не ПропуститьПроверку Тогда
			НомерВерсии = СтрокаВерсия.Версия;
			Если НомерВерсии = "*" Тогда
				Результат = -1;
			ИначеЕсли СтрНачинаетсяС(НомерВерсии, "ОтладкаОбработчика") Тогда
				Результат = 1;
			Иначе
				Результат = БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсии(НомерВерсии, ПараллельноСВерсии);
			КонецЕсли;

			Если Результат < 0 Тогда
				ЗависимостьГруппОбработчиков.Вставить(ГруппаОбновления, Итерация <> 1);
				ТекущийРежимВыполнения = "Последовательно";
			Иначе
				ЗависимостьГруппОбработчиков.Вставить(ГруппаОбновления, Итерация <> 1);
				ПропуститьПроверку		= Истина;
				ТекущийРежимВыполнения	= "Параллельно";
				СоздаватьНовуюИтерацию	= Ложь;
			КонецЕсли;
		КонецЕсли;

		Для Каждого Обработчик Из СтрокаВерсия.Строки Цикл
			сОИБ_ПроверитьСвойстваОтложенногоОбработчика(Обработчик, ТекущийРежимВыполнения, ТекстОшибок);

			Запись = НаборРазделенныхОбработчиков.Добавить();

			ЗаполнитьЗначенияСвойств(Запись, Обработчик, , "РежимВыполнения,ВерсияПорядок");
			РежимВыполнения = Перечисления.РежимыВыполненияОбработчиков[Обработчик.РежимВыполнения];

			Запись.ВерсияПорядок		= СтрокаВерсия.ВерсияПорядок;
			Запись.РежимВыполнения		= РежимВыполнения;
			Запись.Статус				= Перечисления.СтатусыОбработчиковОбновления.НеВыполнялся;
			Запись.ИмяБиблиотеки		= ИмяБиблиотеки;
			Запись.ГруппаОбновления		= ГруппаОбновления;
			Запись.СтатистикаВыполнения	= Новый ХранилищеЗначения(Новый Соответствие);
			Если ТекущийРежимВыполнения = "Параллельно" Тогда
				Запись.РежимВыполненияОтложенногоОбработчика = Перечисления.РежимыВыполненияОтложенныхОбработчиков.Параллельно;
			Иначе
				Запись.РежимВыполненияОтложенногоОбработчика = Перечисления.РежимыВыполненияОтложенныхОбработчиков.Последовательно;
			КонецЕсли;

			// Определение значения константы ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно.
			Если ТекущийРежимВыполнения = "Параллельно" И Не ЭтоПодчиненныйУзелРИБ И Обработчик.ЗапускатьТолькоВГлавномУзле = Истина Тогда
				ЕстьОбработчикиТолькоГлавногоУзла = Истина;
			КонецЕсли;
			Если ТекущийРежимВыполнения = "Параллельно" И ЭтоПодчиненныйУзелРИБСФильтром И Не Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами Тогда
				ЕстьОбработчикиТолькоГлавногоУзла = Истина;
				// В подчиненном узле РИБ обработчики главного узла не выполняются.
				Запись.Статус = Перечисления.СтатусыОбработчиковОбновления.Выполнен;
			КонецЕсли;
		КонецЦикла;

		Если СоздаватьНовуюИтерацию Тогда
			ГруппаОбновления = ГруппаОбновления + 1;
		КонецЕсли;
		Итерация = Итерация + 1;
	КонецЦикла;

	// Обработчики обновления следующей библиотеки добавляются в новую группу.
	ГруппаОбновления = ГруппаОбновления + 1;

	сОИБ_ЗаписатьСведенияОБлокируемыхОбъектах(СведенияОБлокируемыхОбъектах);
	ТекущееЗначение = Константы.ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно.Получить();
	Константы.ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно.Установить(ТекущееЗначение И Не ЕстьОбработчикиТолькоГлавногоУзла);

	НаборРазделенныхОбработчиков.Записать();
	сОИБ_ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
КонецПроцедуры

Процедура сОИБ_ПроверитьСвойстваОбработчиков(ИтерацияОбновления)
	Для каждого Обработчик Из ИтерацияОбновления.Обработчики Цикл
		ОписаниеОшибки = "";
		Если ПустаяСтрока(Обработчик.Версия) Тогда
			Если Обработчик.НачальноеЗаполнение <> Истина Тогда
				ОписаниеОшибки = "У обработчика не заполнено свойство Версия или свойство НачальноеЗаполнение.";
			КонецЕсли;
		ИначеЕсли Обработчик.Версия <> "*" И Не СтрНачинаетсяС(Обработчик.Версия, "ОтладкаОбработчика") Тогда
			Попытка
				НулеваяВерсия = БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсии(Обработчик.Версия, "0.0.0.0") = 0;
			Исключение
				НулеваяВерсия	= Ложь;
				ОписаниеОшибки	= СтрШаблон("У обработчика неправильно заполнено свойство Версия: ""%1"".
					           |Правильный формат, например: ""2.1.3.70"".",
					Обработчик.Версия);
			КонецПопытки;

			Если НулеваяВерсия Тогда
				ОписаниеОшибки = СтрШаблон("У обработчика неправильно заполнено свойство Версия: ""%1"".
					           |Версия не может быть нулевой.",
					Обработчик.Версия);
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) И Обработчик.ВыполнятьВГруппеОбязательных <> Истина И Обработчик.Приоритет <> 0 Тогда
				ОписаниеОшибки = "У обработчика неправильно заполнено свойство Приоритет или
				                            |свойство ВыполнятьВГруппеОбязательных.";
			КонецЕсли;
		КонецЕсли;

		Если Обработчик.РежимВыполнения <> "" И Обработчик.РежимВыполнения <> "Монопольно" И Обработчик.РежимВыполнения <> "Оперативно" И Обработчик.РежимВыполнения <> "Отложенно" Тогда
			ОписаниеОшибки = СтрШаблон("У обработчика ""%1"" неправильно заполнено свойство РежимВыполнения.
				           |Допустимое значение: ""Монопольно"", ""Отложенно"", ""Оперативно"".",
				Обработчик.Процедура);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) И Обработчик.Опциональный = Истина И Обработчик.НачальноеЗаполнение = Истина Тогда
			ОписаниеОшибки = "У обработчика не правильно заполнено свойство Опциональный или
			                            |свойство НачальноеЗаполнение.";
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			Продолжить;
		КонецЕсли;

		Если ИтерацияОбновления.ЭтоОсновнаяКонфигурация Тогда
			ЗаголовокОшибки = "Ошибка в свойстве обработчика обновления конфигурации";
		Иначе
			ЗаголовокОшибки = СтрШаблон("Ошибка в свойстве обработчика обновления библиотеки %1 версии %2", ИтерацияОбновления.Подсистема, ИтерацияОбновления.Версия);
		КонецЕсли;

		ОписаниеОшибки = СтрШаблон(ЗаголовокОшибки + Символы.ПС + "(%1)." + Символы.ПС + Символы.ПС + ОписаниеОшибки, Обработчик.Процедура);

		БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);

		ВызватьИсключение ОписаниеОшибки;
	КонецЦикла;
КонецПроцедуры

Процедура сОИБ_ВыполнитьОбработчикОбновления(Обработчик, Параметры, ДополнительныеПараметры)
	сОИБ_ЗаписатьИнформациюОХодеОбновления(Обработчик, ДополнительныеПараметры.ХодВыполненияОбработчиков, ДополнительныеПараметры.ВФоне);
	ОписаниеОбработчика = сОИБ_ПодготовитьДетальнуюИнформациюОХодеОбновления(Обработчик, Параметры, ДополнительныеПараметры.ИдентификаторБиблиотеки);

	// Зарезервировано для новых подсистем

	Если Параметры <> Неопределено Тогда
		ПараметрыОбработчика = Новый Массив;
		ПараметрыОбработчика.Добавить(Параметры);
	Иначе
		ПараметрыОбработчика = Неопределено;
	КонецЕсли;

	ТранзакцияАктивнаНаНачалоВыполнения = ТранзакцияАктивна();

	// Зарезервировано для новых подсистем
	ПодсистемаСуществует = Ложь;
	сОИБ_ОтключитьОбновлениеКлючейДоступа(Истина, ПодсистемаСуществует);
	Попытка
		сОИБ_УстановитьПараметрыОбработчикаОбновления(Обработчик);
		сОИБ_УстановитьСтатусОбработчика(Обработчик.Процедура, "Выполняется");

		НачалоОбработки	= ТекущаяУниверсальнаяДатаВМиллисекундах();
		БазоваяПодсистемаСервер.ОН_ВыполнитьМетодКонфигурации(Обработчик.Процедура, ПараметрыОбработчика);
		КонецОбработки	= ТекущаяУниверсальнаяДатаВМиллисекундах();

		сОИБ_УстановитьПараметрыОбработчикаОбновления(Неопределено);

		УстанавливаемыеСвойства = Новый Структура;
		УстанавливаемыеСвойства.Вставить("Статус",					Перечисления.СтатусыОбработчиковОбновления.Выполнен);
		УстанавливаемыеСвойства.Вставить("ДлительностьОбработки",	КонецОбработки - НачалоОбработки);
		сОИБ_УстановитьСвойстваОбработчика(Обработчик.Процедура, УстанавливаемыеСвойства);

		сОИБ_ОтключитьОбновлениеКлючейДоступа(Ложь, ПодсистемаСуществует);
	Исключение
		сОИБ_ОтключитьОбновлениеКлючейДоступа(Ложь, ПодсистемаСуществует);
		Если ДополнительныеПараметры.ЗаписыватьВЖурнал Тогда
			сОИБ_ЗаписатьДетальнуюИнформациюОХодеОбновления(ОписаниеОбработчика);
		КонецЕсли;

		ИмяОбработчика = Обработчик.Процедура + "(" + ?(ПараметрыОбработчика = Неопределено, "", "Параметры") + ")";
		ТекстОшибки = СтрШаблон("При вызове обработчика обновления:
					   |""%1""
					   |произошла ошибка:
					   |""%2"".",
			ИмяОбработчика,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		сОИБ_УстановитьСтатусОбработчика(Обработчик.Процедура, "Ошибка", ТекстОшибки);

		ВызватьИсключение;
	КонецПопытки;

	сОИБ_ПроверитьВложеннуюТранзакцию(ТранзакцияАктивнаНаНачалоВыполнения, Обработчик.Процедура);

	Если ДополнительныеПараметры.ЗаписыватьВЖурнал Тогда
		сОИБ_ЗаписатьДетальнуюИнформациюОХодеОбновления(ОписаниеОбработчика);
	КонецЕсли;

	// Зарезервировано для новых подсистем
КонецПроцедуры

Процедура сОИБ_УстановитьВерсиюИБ(Знач ИдентификаторБиблиотеки, Знач НомерВерсии, Знач ЭтоОсновнаяКонфигурация) Экспорт
	НаборЗаписей	= РегистрыСведений.ВерсииПодсистем.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИмяПодсистемы.Установить(ИдентификаторБиблиотеки);

	НоваяЗапись							= НаборЗаписей.Добавить();
	НоваяЗапись.ИмяПодсистемы			= ИдентификаторБиблиотеки;
	НоваяЗапись.Версия					= НомерВерсии;
	НоваяЗапись.ЭтоОсновнаяКонфигурация	= ЭтоОсновнаяКонфигурация;
	НаборЗаписей.Записать();
КонецПроцедуры

Функция сОИБ_ОбработчикиДляОтложеннойРегистрацииДанных(БезФильтра = Ложь) Экспорт
	Запрос			= Новый Запрос;
	Запрос.Текст	=
		"ВЫБРАТЬ
		|	ОбработчикиОбновления.ИмяОбработчика КАК ИмяОбработчика,
		|	ОбработчикиОбновления.ИмяБиблиотеки КАК ИмяБиблиотеки,
		|	ОбработчикиОбновления.Версия КАК Версия,
		|	ОбработчикиОбновления.ПроцедураЗаполненияДанныхОбновления КАК ПроцедураЗаполненияДанныхОбновления,
		|	ОбработчикиОбновления.ОчередьОтложеннойОбработки КАК ОчередьОтложеннойОбработки,
		|	ОбработчикиОбновления.Многопоточный КАК Многопоточный,
		|	ОбработчикиОбновления.ОбрабатываемыеДанные КАК ОбрабатываемыеДанные
		|ИЗ
		|	РегистрСведений.ОбработчикиОбновления КАК ОбработчикиОбновления
		|ГДЕ
		|	ОбработчикиОбновления.РежимВыполнения = &РежимВыполнения
		|	И (ОбработчикиОбновления.РежимВыполненияОтложенногоОбработчика = &РежимВыполненияОбработчика
		|			ИЛИ &БезФильтра)";
	Запрос.УстановитьПараметр("РежимВыполненияОбработчика",	Перечисления.РежимыВыполненияОтложенныхОбработчиков.Параллельно);
	Запрос.УстановитьПараметр("РежимВыполнения",			Перечисления.РежимыВыполненияОбработчиков.Отложенно);
	Запрос.УстановитьПараметр("БезФильтра",					БезФильтра);

	Обработчики	= Запрос.Выполнить().Выгрузить();

	Возврат Обработчики;
КонецФункции

Процедура сОИБ_ОтметитьРегистрациюОтложенныхОбработчиковОбновления(ИмяПодсистемы = Неопределено, Значение = Истина) Экспорт
	НаборЗаписей = РегистрыСведений.ВерсииПодсистем.СоздатьНаборЗаписей();
	Если ИмяПодсистемы <> Неопределено Тогда
		НаборЗаписей.Отбор.ИмяПодсистемы.Установить(ИмяПодсистемы);
	КонецЕсли;
	НаборЗаписей.Прочитать();

	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
		ЗаписьРегистра.ВыполненаРегистрацияОтложенныхОбработчиков = Значение;
	КонецЦикла;
	НаборЗаписей.Записать();
КонецПроцедуры

Функция сОИБ_НовоеОписаниеОбрабатываемыхДанных(Многопоточное = Ложь, Фоновое = Ложь) Экспорт
	Описание = Новый Структура;
	Описание.Вставить("ДанныеОбработчика");
	Описание.Вставить("ИмяОбработчика");

	Если Многопоточное Тогда
		Описание.Вставить("ВыполняетсяПоискПорции", Ложь);
		Описание.Вставить("ПараметрыВыборки");
		Описание.Вставить("ПорцииДляОбновления");
		Описание.Вставить("ПоследняяВыбраннаяЗапись");
		Описание.Вставить("ПоискЗавершен", Ложь);
	КонецЕсли;

	Если Фоновое Тогда
		Описание.Вставить("Очередь");
		Описание.Вставить("ПроцедураЗаполнения");
		Описание.Вставить("Статус");
	КонецЕсли;

	Возврат Описание;
КонецФункции

Процедура сОИБ_ПеренестиОбработчикиИзКонстанты(Приемник, Источник)
	Для Каждого Обработчик Из Источник Цикл
		НовыйОбработчик					= Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйОбработчик, Обработчик);
		НовыйОбработчик.РежимВыполнения	= Перечисления.РежимыВыполненияОбработчиков.Отложенно;
	КонецЦикла;
КонецПроцедуры

Процедура сОИБ_ОтметитьОбработчикиНовыхПодсистем(ВсеОбработчики)
	// Список объектов новых подсистем.
	ОбъектыНовыхПодсистем = Новый Массив;
	Для Каждого ИмяПодсистемы Из сОИБ_СведенияОбОбновленииИнформационнойБазы().НовыеПодсистемы Цикл
		Подсистема = Метаданные.НайтиПоПолномуИмени(ИмяПодсистемы);
		Если Подсистема = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ОбъектМетаданных Из Подсистема.Состав Цикл
			ОбъектыНовыхПодсистем.Добавить(ОбъектМетаданных.ПолноеИмя());
		КонецЦикла;
	КонецЦикла;

	// Определение обработчиков новых подсистем.
	ВсеОбработчики.Колонки.Добавить("ЭтоНоваяПодсистема", Новый ОписаниеТипов("Булево"));
	Для Каждого ОписаниеОбработчика Из ВсеОбработчики Цикл
		Позиция			= СтрНайти(ОписаниеОбработчика.Процедура, ".", НаправлениеПоиска.СКонца);
		ИмяМенеджера	= Лев(ОписаниеОбработчика.Процедура, Позиция - 1);
		Если ОбъектыНовыхПодсистем.Найти(сОИБ_ИмяОбъектаМетаданныхПоИмениМенеджера(ИмяМенеджера)) <> Неопределено Тогда
			ОписаниеОбработчика.ЭтоНоваяПодсистема = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура сОИБ_ЗаполнитьБлокируемыеОбъекты(СтрокаВерсия, СведенияОБлокируемыхОбъектах)
	Для Каждого Обработчик Из СтрокаВерсия.Строки Цикл
		ПроцедураПроверки	= Обработчик.ПроцедураПроверки;
		БлокируемыеОбъекты	= Обработчик.БлокируемыеОбъекты;
		Если ЗначениеЗаполнено(ПроцедураПроверки) И ЗначениеЗаполнено(БлокируемыеОбъекты) Тогда
			СвойстваОбработчика = Новый Структура;
			СвойстваОбработчика.Вставить("Выполнен",			Ложь);
			СвойстваОбработчика.Вставить("ПроцедураПроверки",	ПроцедураПроверки);

			СведенияОБлокируемыхОбъектах.Обработчики.Вставить(Обработчик.ИмяОбработчика, СвойстваОбработчика);
			МассивБлокируемыхОбъектов = СтрРазделить(БлокируемыеОбъекты, ",");
			Для Каждого БлокируемыйОбъект Из МассивБлокируемыхОбъектов Цикл
				БлокируемыйОбъект	= СтрЗаменить(СокрЛП(БлокируемыйОбъект), ".", "");
				ИнформацияОбОбъекте	= СведенияОБлокируемыхОбъектах.БлокируемыеОбъекты[БлокируемыйОбъект];
				Если ИнформацияОбОбъекте = Неопределено Тогда
					МассивОбработчиков = Новый Массив;
					МассивОбработчиков.Добавить(Обработчик.ИмяОбработчика);
					СведенияОБлокируемыхОбъектах.БлокируемыеОбъекты.Вставить(БлокируемыйОбъект, МассивОбработчиков);
				Иначе
					СведенияОБлокируемомОбъекте = СведенияОБлокируемыхОбъектах.БлокируемыеОбъекты[БлокируемыйОбъект]; // Массив
					СведенияОБлокируемомОбъекте.Добавить(Обработчик.ИмяОбработчика);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЗначениеЗаполнено(БлокируемыеОбъекты) И Не ЗначениеЗаполнено(ПроцедураПроверки) Тогда
			ТекстИсключения = "У отложенного обработчика обновления ""%1""
				|заполнен список блокируемых объектов, но не задано свойство ""ПроцедураПроверки"".";

			ВызватьИсключение СтрШаблон(ТекстИсключения, Обработчик.ИмяОбработчика);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура сОИБ_ПроверитьСвойстваОтложенногоОбработчика(Знач Обработчик, Знач РежимВыполненияОтложенныхОбработчиков, ТекстОшибок)
	Если РежимВыполненияОтложенныхОбработчиков = "Параллельно" И Не ЗначениеЗаполнено(Обработчик.ПроцедураЗаполненияДанныхОбновления) Тогда
		ТекстОшибки = СтрШаблон("Не указана процедура заполнения данных
					   |отложенного обработчика обновления
					   |""%1"".",
			Обработчик.ИмяОбработчика);

		БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ТекстОшибок = ТекстОшибок + ТекстОшибки + Символы.ПС;
	КонецЕсли;

	Если Обработчик.МонопольныйРежим = Истина Тогда
		ТекстОшибки = СтрШаблон("У отложенного обработчика ""%1""
			|не должен быть установлен признак ""МонопольныйРежим"".",
			Обработчик.ИмяОбработчика);
		БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ТекстОшибок = ТекстОшибок + ТекстОшибки + Символы.ПС;
	КонецЕсли;

	Если РежимВыполненияОтложенныхОбработчиков = "Параллельно" И Обработчик.ЗапускатьТолькоВГлавномУзле И Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами Тогда
		ТекстОшибки = СтрШаблон("У отложенного обработчика ""%1""
			|некорректно заполнены значения свойств:
			| - ""ЗапускатьТолькоВГлавномУзле""
			| - ""ЗапускатьИВПодчиненномУзлеРИБСФильтрами"".
			|
			|Данные свойства не могут одновременно принимать значение ""Истина"".",
			Обработчик.ИмяОбработчика);
		БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ТекстОшибок = ТекстОшибок + ТекстОшибки + Символы.ПС;
	КонецЕсли;

	Если Обработчик.ОбщиеДанные = Истина Тогда
		ТекстОшибки = СтрШаблон("У отложенного обработчика ""%1""
			|указано недопустимое значение свойства ""ОбщиеДанные"".
			|
			|Данное свойство не может принимать значение ""Истина"" у отложенного обработчика.",
			Обработчик.ИмяОбработчика);
		БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ТекстОшибок = ТекстОшибок + ТекстОшибки + Символы.ПС;
	КонецЕсли;
КонецПроцедуры

Процедура сОИБ_ЗаписатьИнформациюОХодеОбновления(Обработчик, ХодВыполненияОбработчиков, ВФоне)
	Если ХодВыполненияОбработчиков = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ХодВыполненияОбработчиков.ВыполненоОбработчиков = ХодВыполненияОбработчиков.ВыполненоОбработчиков + 1;

	Сообщение = "Выполняется обработчик обновления %1 (%2 из %3).";
	Сообщение = СтрШаблон(Сообщение, Обработчик.Процедура, ХодВыполненияОбработчиков.ВыполненоОбработчиков, ХодВыполненияОбработчиков.ВсегоОбработчиков);
	БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация,,, Сообщение);

	Если ВФоне Тогда
		Прогресс = 10 + ХодВыполненияОбработчиков.ВыполненоОбработчиков / ХодВыполненияОбработчиков.ВсегоОбработчиков * 90;
		БазоваяПодсистемаСервер.ДО_СообщитьПрогресс(Прогресс);
	КонецЕсли;
КонецПроцедуры

Функция сОИБ_ИмяОбъектаМетаданныхПоИмениМенеджера(ИмяМенеджера)
	Позиция = СтрНайти(ИмяМенеджера, ".");
	Если Позиция = 0 Тогда
		Возврат "ОбщийМодуль." + ИмяМенеджера;
	КонецЕсли;
	ТипМенеджера = Лев(ИмяМенеджера, Позиция - 1);

	ИменаТипов = Новый Соответствие;
	ИменаТипов.Вставить("Справочники",				"Справочник");
	ИменаТипов.Вставить("Документы",				"Документ");
	ИменаТипов.Вставить("Обработки",				"Обработка");
	ИменаТипов.Вставить("ПланыВидовХарактеристик",	"ПланВидовХарактеристик");
	ИменаТипов.Вставить("РегистрыБухгалтерии",		"РегистрБухгалтерии");
	ИменаТипов.Вставить("РегистрыНакопления",		"РегистрНакопления");
	ИменаТипов.Вставить("РегистрыРасчета",			"РегистрРасчета");
	ИменаТипов.Вставить("РегистрыСведений",			"РегистрСведений");
	ИменаТипов.Вставить("БизнесПроцессы",			"БизнесПроцесс");
	ИменаТипов.Вставить("ЖурналыДокументов",		"ЖурналДокументов");
	ИменаТипов.Вставить("Задачи",					"Задача");
	ИменаТипов.Вставить("Отчеты",					"Отчет");
	ИменаТипов.Вставить("Константы",				"Константа");
	ИменаТипов.Вставить("Перечисления",				"Перечисление");
	ИменаТипов.Вставить("ПланыВидовРасчета",		"ПланВидовРасчета");
	ИменаТипов.Вставить("ПланыОбмена",				"ПланОбмена");
	ИменаТипов.Вставить("ПланыСчетов",				"ПланСчетов");

	ИмяТипа = ИменаТипов[ТипМенеджера];
	Если ИмяТипа = Неопределено Тогда
		Возврат ИмяМенеджера;
	КонецЕсли;

	Возврат ИмяТипа + Сред(ИмяМенеджера, Позиция);
КонецФункции

Процедура сОИБ_ЗаписатьВремяВыполненияОбновления(ВремяНачалаОбновления, ВремяОкончанияОбновления) Экспорт
	СведенияОбОбновлении							= сОИБ_СведенияОбОбновленииИнформационнойБазы();
	СведенияОбОбновлении.ВремяНачалаОбновления		= ВремяНачалаОбновления;
	СведенияОбОбновлении.ВремяОкончанияОбновления	= ВремяОкончанияОбновления;

	ВремяВСекундах = ВремяОкончанияОбновления - ВремяНачалаОбновления;

	Часы	= Цел(ВремяВСекундах/3600);
	Минуты	= Цел((ВремяВСекундах - Часы * 3600) / 60);
	Секунды	= ВремяВСекундах - Часы * 3600 - Минуты * 60;

	ПродолжительностьЧасы								= ?(Часы = 0, "",		СтрШаблон("%1 час", Часы));
	ПродолжительностьМинуты								= ?(Минуты = 0, "",		СтрШаблон("%1 мин", Минуты));
	ПродолжительностьСекунды							= ?(Секунды = 0, "",	СтрШаблон("%1 сек", Секунды));
	ПродолжительностьОбновления							= ПродолжительностьЧасы + " " + ПродолжительностьМинуты + " " + ПродолжительностьСекунды;
	СведенияОбОбновлении.ПродолжительностьОбновления	= СокрЛП(ПродолжительностьОбновления);

	сОИБ_ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
КонецПроцедуры

Функция сОИБ_НовоеОписаниеГруппПотоковРегистрацииДанныхОтложенногоОбновления() Экспорт
	ГруппаРегистрации						= сОИБ_НовоеОписаниеГруппыПотоков();
	ГруппаРегистрации.Процедура				= "ОбновлениеВерсииИБСервер.сОИБ_ЗаполнитьДанныеОтложенногоОбработчика";
	ГруппаРегистрации.ПроцедураЗавершения	= "ОбновлениеВерсииИБСервер.сОИБ_ЗавершитьРегистрациюДанныхОтложенногоОбновления";

	Группы					= Новый Соответствие;
	Группы["Регистрация"]	= ГруппаРегистрации;

	Возврат Группы;
КонецФункции

Процедура сОИБ_ЗаполнитьДанныеОтложенногоОбработчика(ОписаниеОбрабатываемыхДанных, АдресРезультата) Экспорт
	ПараметрыОтметкиКОбработке	= ОИБ_ОсновныеПараметрыОтметкиКОбработке();
	// Зарезервировано для новых подсистем
	ЕстьПодсистемаОбменаДанными	= Ложь;

	// Зарезервировано для новых подсистем

	ПараметрыОтметкиКОбработке.Очередь	= ОписаниеОбрабатываемыхДанных.Очередь;
	ПараметрыОтметкиКОбработке.Вставить("ДанныеОбработчика", Новый Соответствие);
	МногопоточныйРежим					= ОписаниеОбрабатываемыхДанных.Свойство("ПорцииДляОбновления");

	Если МногопоточныйРежим Тогда
		ПараметрыОтметкиКОбработке.ПараметрыВыборки = ОИБ_ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки();
	Иначе
		ПараметрыОтметкиКОбработке.ПараметрыВыборки = Неопределено;
	КонецЕсли;

	ПараметрыОбработчика = Новый Массив;
	ПараметрыОбработчика.Добавить(ПараметрыОтметкиКОбработке);

	ШаблонСообщения = "Выполняется процедура заполнения данных
		|""%1""
		|отложенного обработчика обновления
		|""%2"".";
	ТекстСообщения = СтрШаблон(ШаблонСообщения, ОписаниеОбрабатываемыхДанных.ПроцедураЗаполнения, ОписаниеОбрабатываемыхДанных.ИмяОбработчика);
	БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация,,, ТекстСообщения);

	Попытка
		БазоваяПодсистемаСервер.ОН_ВыполнитьМетодКонфигурации(ОписаниеОбрабатываемыхДанных.ПроцедураЗаполнения, ПараметрыОбработчика);
	Исключение
		ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонОшибки = "ru = 'При вызове процедуры заполнения данных
			|""%1""
			|отложенного обработчика обновления
			|""%2""
			|произошла ошибка:
			|""%3"".";
		ТекстСообщения = СтрШаблон(ШаблонОшибки, ОписаниеОбрабатываемыхДанных.ПроцедураЗаполнения, ОписаниеОбрабатываемыхДанных.ИмяОбработчика, ИнформацияОбОшибке);
		БазоваяПодсистемаСервер.ЖР_ДобавитьСообщениеДляЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);

		ВызватьИсключение;
	КонецПопытки;

	Результат = Новый Структура;
	Результат.Вставить("ДанныеОбработчика", ПараметрыОтметкиКОбработке.ДанныеОбработчика);

	Если МногопоточныйРежим Тогда
		Результат.Вставить("ПараметрыВыборки", ПараметрыОтметкиКОбработке.ПараметрыВыборки);
	КонецЕсли;

	// Зарезервировано для новых подсистем

	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
КонецПроцедуры

Процедура сОИБ_ЗавершитьРегистрациюДанныхОтложенногоОбновления(ОписаниеОбрабатываемыхДанных, АдресРезультата) Экспорт
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);

	ЗаполнитьЗначенияСвойств(ОписаниеОбрабатываемыхДанных, Результат);
	ОписаниеОбрабатываемыхДанных.Статус = "Выполнено";

	ОбрабатываемыеДанные = Новый ХранилищеЗначения(ОписаниеОбрабатываемыхДанных, Новый СжатиеДанных(9));
	сОИБ_УстановитьСвойствоОбработчика(ОписаниеОбрабатываемыхДанных.ИмяОбработчика, "ОбрабатываемыеДанные", ОбрабатываемыеДанные);

	// Зарезервировано для новых подсистем
КонецПроцедуры

Процедура сОИБ_ЗавершитьПоискПорцииДляОбновления(ПараметрыПоиска, АдресРезультата) Экспорт
	РезультатПоиска		= ПолучитьИзВременногоХранилища(АдресРезультата);
	Группы				= сОИБ_НовоеОписаниеГруппПотоковОбработчиковОтложенногоОбновления();
	КонтекстОбработчика	= ПараметрыПоиска.КонтекстОбработчика;

	ОбработчикОбновления		= сОИБ_ОбработчикОбновления(КонтекстОбработчика.ИмяОбработчика);
	ОписаниеПроцедурыЗаполнения	= ОбработчикОбновления.ОбрабатываемыеДанные.Получить();
	ПорцииДляОбновления			= ОписаниеПроцедурыЗаполнения.ПорцииДляОбновления; // см. НоваяТаблицаПорцийДляОбновления
	ИдентификаторПорции			= ПараметрыПоиска.ИдентификаторПорции;
	ЕстьИдентификатор			= ИдентификаторПорции <> Неопределено;
	СтараяПорция				= ?(ЕстьИдентификатор, ПорцииДляОбновления.Найти(ИдентификаторПорции, "Идентификатор"), Неопределено);
	ЭтоПервыйПоиск				= ПараметрыПоиска.ПоследняяВыбраннаяЗапись = Неопределено И ПараметрыПоиска.ПерваяЗапись = Неопределено И ПараметрыПоиска.ПоследняяЗапись = Неопределено;
	ЭтоПовторныйПоиск			= ПараметрыПоиска.ПерваяЗапись <> Неопределено И ПараметрыПоиска.ПоследняяЗапись <> Неопределено;

	Если ЭтоПервыйПоиск Тогда
		сОИБ_СохранитьРезультатПервогоПоиска(РезультатПоиска, ОписаниеПроцедурыЗаполнения);
		ПорцииДляОбновления = ОписаниеПроцедурыЗаполнения.ПорцииДляОбновления;
	ИначеЕсли ЭтоПовторныйПоиск Тогда
		сОИБ_СохранитьРезультатПовторногоПоиска(РезультатПоиска, ОписаниеПроцедурыЗаполнения, ИдентификаторПорции);
	Иначе
		сОИБ_СохранитьРезультатПоиска(РезультатПоиска, ОписаниеПроцедурыЗаполнения);
	КонецЕсли;

	Если РезультатПоиска.Количество > 0 Тогда
		МаксимумПотоков		= сОИБ_КоличествоПотоковОбновленияИнформационнойБазы();
		ПотокиОбновления	= сОИБ_ПотокиОбновления();
		СвободныхПотоков	= МаксимумПотоков - ПотокиОбновления.Количество() + 1;
		Если СвободныхПотоков = 0 Тогда
			СвободныхПотоков = 1;
		КонецЕсли;
		Фрагменты				= сОИБ_РазбитьРезультатПоискаНаФрагменты(РезультатПоиска, СвободныхПотоков);
		КоличествоФрагментов	= Фрагменты.Количество();

		Для НомерФрагмента = 0 По КоличествоФрагментов - 1 Цикл
			Фрагмент			= Фрагменты[НомерФрагмента];
			ЕстьСтараяПорция	= (НомерФрагмента = 0 И СтараяПорция <> Неопределено);

			Если ЕстьСтараяПорция Тогда
				Порция					= СтараяПорция;
				Фрагмент.Идентификатор	= Порция.Идентификатор;
			Иначе
				Порция					= ПорцииДляОбновления.Добавить();
				Порция.Идентификатор	= Фрагмент.Идентификатор;
			КонецЕсли;

			Порция.ПерваяЗапись		= Фрагмент.ПерваяЗапись;
			Порция.ПоследняяЗапись	= Фрагмент.ПоследняяЗапись;
			Порция.Обрабатывается	= Истина;

			сОИБ_ОбработатьФрагментДанныхВПотоке(Фрагмент, Группы, КонтекстОбработчика);
		КонецЦикла;
	Иначе
		Фрагмент				= сОИБ_НоваяПорцияДляОбновления();
		Фрагмент.НаборДанных	= сОИБ_НовыйНаборДанныхДляОбновления();
		сОИБ_ОбработатьФрагментДанныхВПотоке(Фрагмент, Группы, КонтекстОбработчика);
	КонецЕсли;

	ОписаниеПроцедурыЗаполнения.ВыполняетсяПоискПорции = Ложь;
	сОИБ_УстановитьСвойствоОбработчика(ОбработчикОбновления.ИмяОбработчика, "ОбрабатываемыеДанные", Новый ХранилищеЗначения(ОписаниеПроцедурыЗаполнения));
КонецПроцедуры

Процедура сОИБ_СохранитьРезультатПервогоПоиска(РезультатПоиска, ОписаниеПроцедурыЗаполнения)
	Если РезультатПоиска.Количество > 0 Тогда
		ПоследняяВыбраннаяЗапись								= сОИБ_КлючЗаписиПоследнейСтрокиНабораДанных(РезультатПоиска.НаборДанных);
		ОписаниеПроцедурыЗаполнения.ПоследняяВыбраннаяЗапись	= ПоследняяВыбраннаяЗапись;

		Если ОписаниеПроцедурыЗаполнения.ПорцииДляОбновления = Неопределено Тогда
			ОписаниеПроцедурыЗаполнения.ПорцииДляОбновления	= сОИБ_НоваяТаблицаПорцийДляОбновления();
		КонецЕсли;
	Иначе
		ОписаниеПроцедурыЗаполнения.ПоследняяВыбраннаяЗапись	= Неопределено;
	КонецЕсли;

	ОписаниеПроцедурыЗаполнения.ПоискЗавершен = РезультатПоиска.ПоискЗавершен;
КонецПроцедуры

Процедура сОИБ_СохранитьРезультатПовторногоПоиска(РезультатПоиска, ОписаниеПроцедурыЗаполнения, ИдентификаторПорции)
	Если РезультатПоиска.Количество = 0 Тогда
		ПорцииДляОбновления	= ОписаниеПроцедурыЗаполнения.ПорцииДляОбновления;
		Порция				= ПорцииДляОбновления.Найти(ИдентификаторПорции, "Идентификатор");
		ПорцииДляОбновления.Удалить(Порция);
	КонецЕсли;

	ОписаниеПроцедурыЗаполнения.ПоискЗавершен = РезультатПоиска.ПоискЗавершен;
КонецПроцедуры

Процедура сОИБ_СохранитьРезультатПоиска(РезультатПоиска, ОписаниеПроцедурыЗаполнения)
	Если РезультатПоиска.Количество > 0 Тогда
		ПоследняяВыбраннаяЗапись								= сОИБ_КлючЗаписиПоследнейСтрокиНабораДанных(РезультатПоиска.НаборДанных);
		ОписаниеПроцедурыЗаполнения.ПоследняяВыбраннаяЗапись	= ПоследняяВыбраннаяЗапись;
	КонецЕсли;

	ОписаниеПроцедурыЗаполнения.ПоискЗавершен = РезультатПоиска.ПоискЗавершен;

	Если ОписаниеПроцедурыЗаполнения.Свойство("ИмяОбработчика") Тогда
		сОИБ_УстановитьСвойствоОбработчика(ОписаниеПроцедурыЗаполнения.ИмяОбработчика, "ОбрабатываемыеДанные", Новый ХранилищеЗначения(ОписаниеПроцедурыЗаполнения));
	КонецЕсли;
КонецПроцедуры

Функция сОИБ_РазбитьРезультатПоискаНаФрагменты(РезультатПоиска, Знач КоличествоФрагментов)
	Фрагменты					= Новый Массив;
	НайденныйНаборДанных		= РезультатПоиска.НаборДанных;
	КоличествоНайденных			= РезультатПоиска.Количество;
	КоличествоФрагментов		= ?(КоличествоНайденных < КоличествоФрагментов, 1, КоличествоФрагментов);
	МаксимальныйРазмерПорции	= Цел(КоличествоНайденных / КоличествоФрагментов);
	КоличествоОбработанных		= 0;

	Для НомерФрагмента = 1 По КоличествоФрагментов Цикл // Разбивка идет с конца найденного набора данных.
		Фрагмент					= сОИБ_НоваяПорцияДляОбновления();
		Фрагмент.Идентификатор		= Новый УникальныйИдентификатор;
		Фрагмент.НаборДанных		= сОИБ_НовыйНаборДанныхДляОбновления();
		Фрагмент.ПоследняяЗапись	= сОИБ_КлючЗаписиПоследнейСтрокиНабораДанных(НайденныйНаборДанных);
		Фрагменты.Вставить(0, Фрагмент);
		ИндексНабораДанных	= НайденныйНаборДанных.Количество() - 1;
		КоличествоСвободных	= ?(НомерФрагмента = КоличествоФрагментов, КоличествоНайденных - КоличествоОбработанных, МаксимальныйРазмерПорции);

		Пока ИндексНабораДанных >= 0 Цикл
			ТекущаяСтрокаДанных	= НайденныйНаборДанных[ИндексНабораДанных];
			ТекущиеДанные		= ТекущаяСтрокаДанных.Данные;
			ТекущееКоличество	= ТекущиеДанные.Количество();
			ДанныеФрагмента		= Фрагмент.НаборДанных.Добавить();

			Если ТекущееКоличество <= КоличествоСвободных Тогда
				ЗаполнитьЗначенияСвойств(ДанныеФрагмента, ТекущаяСтрокаДанных);
				НайденныйНаборДанных.Удалить(ИндексНабораДанных);
				КоличествоСвободных		= КоличествоСвободных - ТекущееКоличество;
				КоличествоОбработанных	= КоличествоОбработанных + ТекущееКоличество;
			Иначе
				ЗаполнитьЗначенияСвойств(ДанныеФрагмента, ТекущаяСтрокаДанных, "СсылочныйОбъект, ТабличныйОбъект");
				НачалоВырезки			= ТекущееКоличество - КоличествоСвободных;
				ДанныеФрагмента.Данные	= сОИБ_ВырезатьСтрокиИзТаблицыЗначений(ТекущиеДанные, НачалоВырезки, КоличествоСвободных);
				КоличествоОбработанных	= КоличествоОбработанных + КоличествоСвободных;
				КоличествоСвободных		= 0;
			КонецЕсли;

			Если КоличествоСвободных = 0 Тогда
				Прервать;
			Иначе
				ИндексНабораДанных = ИндексНабораДанных - 1;
			КонецЕсли;
		КонецЦикла;

		Фрагмент.ПерваяЗапись = сОИБ_КлючЗаписиПервойСтрокиНабораДанных(Фрагмент.НаборДанных);
	КонецЦикла;

	Возврат Фрагменты;
КонецФункции

Процедура сОИБ_ОбработатьФрагментДанныхВПотоке(Фрагмент, Группы, КонтекстОбработчика)
	КонтекстОбработчикаДляПотока								= БазоваяПодсистемаСервер.ОН_СкопироватьРекурсивно(КонтекстОбработчика); // см. НовыйКонтекстОбработчика
	КонтекстОбработчикаДляПотока.Параметры.ОбновляемыеДанные	= Фрагмент;
	Поток														= сОИБ_НовыйПоток();
	сОИБ_ДобавитьПотокОбработчикаОбновления(Поток, КонтекстОбработчикаДляПотока);
	сОИБ_ВыполнитьПоток(Группы, Поток);
	КонтекстОбработчикаДляПотока.Параметры.ОбновляемыеДанные.НаборДанных = Неопределено;
КонецПроцедуры

Функция сОИБ_КлючЗаписиПоследнейСтрокиНабораДанных(НаборДанных)
	ПоследняяСтрокаДанных = НаборДанных[НаборДанных.Количество() - 1];

	Возврат сОИБ_НовыйКлючЗаписиИзТаблицыДанных(ПоследняяСтрокаДанных.СсылочныйОбъект, ПоследняяСтрокаДанных.ТабличныйОбъект, ПоследняяСтрокаДанных.Данные, ПоследняяСтрокаДанных.Данные.Количество() - 1);
КонецФункции

Функция сОИБ_КлючЗаписиПервойСтрокиНабораДанных(НаборДанных)
	ПерваяСтрокаДанных	= НаборДанных[0];

	Возврат сОИБ_НовыйКлючЗаписиИзТаблицыДанных(ПерваяСтрокаДанных.СсылочныйОбъект, ПерваяСтрокаДанных.ТабличныйОбъект, ПерваяСтрокаДанных.Данные, 0);
КонецФункции

Функция сОИБ_НоваяТаблицаПорцийДляОбновления()
	Таблица = Новый ТаблицаЗначений;
	Колонки = Таблица.Колонки;
	Колонки.Добавить("Идентификатор",	Новый ОписаниеТипов("УникальныйИдентификатор"));
	Колонки.Добавить("ПерваяЗапись",	Новый ОписаниеТипов("СписокЗначений"));
	Колонки.Добавить("ПоследняяЗапись",	Новый ОписаниеТипов("СписокЗначений"));
	Колонки.Добавить("Обрабатывается",	Новый ОписаниеТипов("Булево"));
	Таблица.Индексы.Добавить("Идентификатор");

	Возврат Таблица;
КонецФункции

Функция сОИБ_ВырезатьСтрокиИзТаблицыЗначений(Таблица, Начало, Количество)
	НоваяТаблица	= Таблица.СкопироватьКолонки();
	Индекс			= Начало + Количество - 1;

	Пока Индекс >= Начало Цикл
		НоваяСтрока		= НоваяТаблица.Добавить();
		СтараяСтрока	= Таблица[Индекс];
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтараяСтрока);
		Таблица.Удалить(СтараяСтрока);
		Индекс			= Индекс - 1;
	КонецЦикла;

	Возврат НоваяТаблица;
КонецФункции

Процедура сОИБ_ПриАварийномЗавершенииПотокаПоискаПорцииДляОбновления(Поток, ИнформацияОбОшибке) Экспорт
	ОбработчикОбновления			= сОИБ_ОбработчикОбновления(Поток.ПараметрыПроцедуры.ИмяОбработчика);
	Описание						= ОбработчикОбновления.ОбрабатываемыеДанные.Получить();
	Описание.ВыполняетсяПоискПорции	= Ложь;
	сОИБ_УстановитьСвойствоОбработчика(Поток.ПараметрыПроцедуры.ИмяОбработчика, "ОбрабатываемыеДанные", Новый ХранилищеЗначения(Описание));
КонецПроцедуры

Процедура сОИБ_ПриОтменеПотокаПоискаПорцииДляОбновления(Поток) Экспорт
	ОбработчикОбновления			= сОИБ_ОбработчикОбновления(Поток.ПараметрыПроцедуры.ИмяОбработчика);
	Описание						= ОбработчикОбновления.ОбрабатываемыеДанные.Получить();
	Описание.ВыполняетсяПоискПорции	= Ложь;
	сОИБ_УстановитьСвойствоОбработчика(Поток.ПараметрыПроцедуры.ИмяОбработчика,"ОбрабатываемыеДанные", Новый ХранилищеЗначения(Описание));
КонецПроцедуры

Процедура сОИБ_НачальноеЗаполнениеПредопределенныхДанных(ОбновитьМультиязычныеСтроки = Ложь, ДополнительныеПараметры = Неопределено) Экспорт
	ОбъектыСНачальнымЗаполнением	= сОИБ_ОбъектыСНачальнымЗаполнением();
	ПараметрыЗаполнения				= Новый Структура;

	Для Каждого МетаданныеОбъекта Из ОбъектыСНачальнымЗаполнением Цикл
		ЛокализуемыеРеквизитыОбъекта	= Новый Соответствие;

		ПараметрыЗаполнения.Вставить("ЛокализуемыеРеквизитыОбъекта", ЛокализуемыеРеквизитыОбъекта);

		МенеджерОбъекта						= БазоваяПодсистемаСервер.ОН_МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя());
		ПредопределенныеДанные				= сОИБ_ПредопределенныеДанныеОбъекта(МетаданныеОбъекта, МенеджерОбъекта, ЛокализуемыеРеквизитыОбъекта);
		НастройкиПредопределенныхЭлементов	= сОИБ_НастройкиПредопределенныхЭлементов(МенеджерОбъекта, ПредопределенныеДанные);

		ТабличныеЧасти = Новый Массив;
		ОбъектМетаданныхТабличныеЧасти = МетаданныеОбъекта.ТабличныеЧасти; // КоллекцияОбъектовМетаданных из ОбъектМетаданныхТабличнаяЧасть
		Для Каждого ТабличнаяЧасть Из ОбъектМетаданныхТабличныеЧасти Цикл
			Если ПредопределенныеДанные.Колонки.Найти(ТабличнаяЧасть.Имя) <> Неопределено Тогда
				ТабличныеЧасти.Добавить(ТабличнаяЧасть.Имя);
			КонецЕсли;
		КонецЦикла;

		РеквизитыИсключения = Новый Соответствие;
		Если СтрНачинаетсяС(МетаданныеОбъекта.ПолноеИмя(), "ПланВидовХарактеристик") Тогда
			РеквизитыИсключения.Вставить("ТипЗначения", Истина);
		КонецЕсли;

		ПоддерживаетсяИерархия	= ПредопределенныеДанные.Колонки.Найти("ЭтоГруппа") <> Неопределено;

		РеквизитыИсключенияСЭлементами = Новый Соответствие;
		Если ПоддерживаетсяИерархия Тогда
			БазоваяПодсистемаКлиентСервер.ОН_ДополнитьСоответствие(РеквизитыИсключенияСЭлементами, РеквизитыИсключения);

			ДляЭлемента = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента;
			Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
				Если Реквизит.Использование = ДляЭлемента Тогда
					РеквизитыИсключенияСЭлементами.Вставить(Реквизит.Имя, Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		НачатьТранзакцию();
		Попытка
			Для каждого СтрокаТаблицы Из ПредопределенныеДанные Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы.ИмяПредопределенныхДанных) Тогда
					СсылкаНаОбъект	= МенеджерОбъекта[СтрокаТаблицы.ИмяПредопределенныхДанных];

					БлокировкаДанных		= Новый БлокировкаДанных;
					ЭлементБлокировкиДанных	= БлокировкаДанных.Добавить(МетаданныеОбъекта.ПолноеИмя());
					ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", СсылкаНаОбъект);
					БлокировкаДанных.Заблокировать();

					ЗаполняемыйЭлемент		= СсылкаНаОбъект.ПолучитьОбъект();
				ИначеЕсли Не ОбновитьМультиязычныеСтроки Тогда
					Если ПоддерживаетсяИерархия И СтрокаТаблицы.ЭтоГруппа = Истина Тогда
						ЗаполняемыйЭлемент = МенеджерОбъекта.СоздатьГруппу();
					Иначе
						ЗаполняемыйЭлемент = МенеджерОбъекта.СоздатьЭлемент();
					КонецЕсли;
				Иначе
					Продолжить;
				КонецЕсли;

				Если Не ОбновитьМультиязычныеСтроки Тогда
					ПоляИсключения		=?(ПоддерживаетсяИерархия И ЗаполняемыйЭлемент.ЭтоГруппа, РеквизитыИсключенияСЭлементами, РеквизитыИсключения);
					ДанныеЗаполнения	= сОИБ_ОпределитьДанныеЗаполнения(ПредопределенныеДанные, СтрокаТаблицы, ПоляИсключения);

					ЗаполнитьЗначенияСвойств(ЗаполняемыйЭлемент, ДанныеЗаполнения);

					Если НЕ (ПоддерживаетсяИерархия И ЗаполняемыйЭлемент.ЭтоГруппа) Тогда
						Для Каждого ИмяТабличнойЧасти Из ТабличныеЧасти Цикл
							Если СтрокаТаблицы[ИмяТабличнойЧасти].Количество() > 0 Тогда
								ЗаполняемыйЭлемент[ИмяТабличнойЧасти].Загрузить(СтрокаТаблицы[ИмяТабличнойЧасти]);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;

				Если ОбновитьМультиязычныеСтроки И ПредопределенныеДанные.Колонки.Найти("Наименование") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы["Наименование"]) Тогда
					ЗаполняемыйЭлемент["Наименование"] = СтрокаТаблицы["Наименование"];
				КонецЕсли;

				Если Не ОбновитьМультиязычныеСтроки И НастройкиПредопределенныхЭлементов.ПриНачальномЗаполненииЭлемента Тогда
					МенеджерОбъекта.ПриНачальномЗаполненииЭлемента(ЗаполняемыйЭлемент, СтрокаТаблицы, НастройкиПредопределенныхЭлементов.ДополнительныеПараметры);
				КонецЕсли;

				ОИБ_ЗаписатьОбъект(ЗаполняемыйЭлемент);

				СтрокаТаблицы.Ссылка = ЗаполняемыйЭлемент.Ссылка;
			КонецЦикла;

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;

	Если ОбновитьМультиязычныеСтроки Тогда
		// Зарезервировано для новых подсистем
	КонецЕсли;
КонецПроцедуры

Функция сОИБ_ОбъектыСНачальнымЗаполнением() Экспорт
	НастройкиПодсистемы				= сОИБ_НастройкиПодсистемы();
	ОбъектыСНачальнымЗаполнением	= НастройкиПодсистемы.ОбъектыСНачальнымЗаполнением;

	Возврат ОбъектыСНачальнымЗаполнением;
КонецФункции

Функция сОИБ_ПредопределенныеДанныеОбъекта(Знач МетаданныеОбъекта, МенеджерОбъекта, ЛокализуемыеРеквизитыОбъекта) Экспорт
	Языки = БазоваяПодсистемаСервер.СП_ЯзыкиКонфигурации();

	// Таблица с предопределенными данными
	ПредопределенныеДанные = Новый ТаблицаЗначений;
	ТабличныеЧасти         = Новый Структура;

	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		сОИБ_ДобавитьКолонкуТаблицыПредопределенныхДанных(ПредопределенныеДанные, Реквизит, ЛокализуемыеРеквизитыОбъекта, Языки);
	КонецЦикла;

	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		сОИБ_ДобавитьКолонкуТаблицыПредопределенныхДанных(ПредопределенныеДанные, Реквизит, ЛокализуемыеРеквизитыОбъекта, Языки);
	КонецЦикла;

	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		ПредопределенныеДанные.Колонки.Добавить(ТабличнаяЧасть.Имя, Новый ОписаниеТипов("ТаблицаЗначений"));
		Таблица = Новый ТаблицаЗначений;
		Для Каждого Реквизит Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
			сОИБ_ДобавитьКолонкуТаблицыПредопределенныхДанных(Таблица, Реквизит, ЛокализуемыеРеквизитыОбъекта, Языки);
		КонецЦикла;

		Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
			сОИБ_ДобавитьКолонкуТаблицыПредопределенныхДанных(Таблица, Реквизит, ЛокализуемыеРеквизитыОбъекта, Языки);
		КонецЦикла;
		ТабличныеЧасти.Вставить(ТабличнаяЧасть.Имя, Таблица);
	КонецЦикла;

	Если Метаданные.ПланыСчетов.Содержит(МетаданныеОбъекта) Или Метаданные.ПланыВидовРасчета.Содержит(МетаданныеОбъекта) Тогда
		Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.СтандартныеТабличныеЧасти Цикл
			ПредопределенныеДанные.Колонки.Добавить(ТабличнаяЧасть.Имя, Новый ОписаниеТипов("ТаблицаЗначений"));
			Таблица = Новый ТаблицаЗначений;
			Для Каждого Реквизит Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
				сОИБ_ДобавитьКолонкуТаблицыПредопределенныхДанных(Таблица, Реквизит, ЛокализуемыеРеквизитыОбъекта, Языки);
			КонецЦикла;

			ТабличныеЧасти.Вставить(ТабличнаяЧасть.Имя, Таблица);
		КонецЦикла;
	КонецЕсли;

	Если ПредопределенныеДанные.Колонки.Найти("ИмяПредопределенныхДанных") <> Неопределено Тогда
		ПредопределенныеДанные.Индексы.Добавить("ИмяПредопределенныхДанных");
	КонецЕсли;

	МенеджерОбъекта.ПриНачальномЗаполненииЭлементов(Языки, ПредопределенныеДанные, ТабличныеЧасти);

	Возврат ПредопределенныеДанные;
КонецФункции

Процедура сОИБ_ДобавитьКолонкуТаблицыПредопределенныхДанных(ПредопределенныеДанные, Реквизит, ЛокализуемыеРеквизиты, Языки)
	ПредопределенныеДанные.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	Если ЛокализуемыеРеквизиты[Реквизит.Имя] = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Возврат;
КонецПроцедуры

Функция сОИБ_НастройкиПредопределенныхЭлементов(МенеджерОбъекта, ПредопределенныеДанные) Экспорт
	НастройкиЗаполненияЭлементов	= Новый Структура;
	НастройкиЗаполненияЭлементов.Вставить("ПриНачальномЗаполненииЭлемента",	Ложь);
	НастройкиЗаполненияЭлементов.Вставить("ДополнительныеПараметры",		Новый Структура);
	НастройкиЗаполненияЭлементов.ДополнительныеПараметры.Вставить("ПредопределенныеДанные",	ПредопределенныеДанные);

	МенеджерОбъекта.ПриНастройкеНачальногоЗаполненияЭлементов(НастройкиЗаполненияЭлементов);

	Возврат НастройкиЗаполненияЭлементов;
КонецФункции

Процедура сОИБ_УстановитьКлючРегламентногоЗадания() Экспорт
	Отбор	= Новый Структура;
	Отбор.Вставить("Метаданные",		Метаданные.РегламентныеЗадания.ОтложенноеОбновлениеИБ);
	Отбор.Вставить("Предопределенное",	Истина);
	Задания	= РегламентныеЗаданияСервер.РЗ_НайтиЗадания(Отбор);
	Для Каждого Задание Из Задания Цикл
		Если ЗначениеЗаполнено(Задание.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		Задание.Ключ	= Метаданные.РегламентныеЗадания.ОтложенноеОбновлениеИБ.Ключ;
		Задание.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура сОИБ_ЗапускРегистрацииДанныхОтложенногоОбновления(ИдентификаторФормы, АдресРезультата) Экспорт
	Группы = сОИБ_НовоеОписаниеГруппПотоковРегистрацииДанныхОтложенногоОбновления();

	Обработчики = сОИБ_ОбработчикиДляОтложеннойРегистрацииДанных();
	сОИБ_УдалитьВсеПотокиОбновления();

	Попытка
		Для Каждого Обработчик Из Обработчики Цикл
			ОписаниеОбрабатываемыхДанных = Обработчик.ОбрабатываемыеДанные.Получить();

			Поток = сОИБ_ДобавитьПотокРегистрацииДанныхОтложенногоОбновления(ОписаниеОбрабатываемыхДанных);
			сОИБ_ВыполнитьПоток(Группы, Поток, ИдентификаторФормы);
			сОИБ_ОжидатьСвободныйПоток(Группы);
		КонецЦикла;

		сОИБ_ОжидатьЗавершениеВсехПотоков(Группы);
		сОИБ_УдалитьВсеПотокиОбновления();
	Исключение
		сОИБ_ОтменитьВыполнениеВсехПотоков(Группы);
		сОИБ_УдалитьВсеПотокиОбновления();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Функция сОИБ_ДобавитьПотокРегистрацииДанныхОтложенногоОбновления(ОписаниеОбрабатываемыхДанных)
	ШаблонНаименования					= "Регистрация данных обработчика обновления ""%1""";
	ОписаниеОбрабатываемыхДанных.Статус	= "Выполняется";

	Поток								= сОИБ_НовыйПоток();
	Поток.ПараметрыПроцедуры			= ОписаниеОбрабатываемыхДанных;
	Поток.ПараметрыПроцедурыЗавершения	= ОписаниеОбрабатываемыхДанных;
	Поток.Группа						= "Регистрация";
	Поток.Наименование					= СтрШаблон(ШаблонНаименования, ОписаниеОбрабатываемыхДанных.ИмяОбработчика);

	сОИБ_СохранитьПотокОбновления(Поток);

	Возврат Поток;
КонецФункции

Процедура сОИБ_ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	// Зарезервировано для новых подсистем

	Обработчик					= Обработчики.Добавить();
	Обработчик.Версия			= "3.0.2.160";
	Обработчик.Процедура		= "ОбновлениеВерсииИБСервер.сОИБ_УстановитьКлючРегламентногоЗадания";
	Обработчик.РежимВыполнения	= "Оперативно";
КонецПроцедуры

Процедура сОИБ_ПриНастройкеВариантовОтчетов(Настройки) Экспорт
	ВариантыОтчетовСервер.ВО_НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ПрогрессОтложенногоОбновления);
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазыБСП

Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	Описание.Имя										= "СтандартныеПодсистемы";
	Описание.Версия										= "3.1.5.146";
	Описание.ИдентификаторИнтернетПоддержки				= "SSL";
	Описание.РежимВыполненияОтложенныхОбработчиков		= "Параллельно";
	Описание.ПараллельноеОтложенноеОбновлениеСВерсии	= "2.3.3.0";
КонецПроцедуры

Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт

КонецПроцедуры

Процедура ПередОбновлениемИнформационнойБазы() Экспорт

КонецПроцедуры

Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия, Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, Знач МонопольныйРежим) Экспорт
	ИнтеграцияПодсистемСервер.ПослеОбновленияИнформационнойБазы(ПредыдущаяВерсия, ТекущаяВерсия, ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим);	
КонецПроцедуры

Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	ИнтеграцияПодсистемСервер.ПриДобавленииОбработчиковОбновления(Обработчики);
КонецПроцедуры

Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	ИнтеграцияПодсистемСервер.ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики);
КонецПроцедуры

Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт

КонецПроцедуры

#КонецОбласти
