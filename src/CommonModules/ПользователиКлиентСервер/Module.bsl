///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПользователиКлиентСервер

Функция сП_ПолучитьКраткоеИмяПользователяИБ(Знач ПолноеИмя) Экспорт
	Разделители = Новый Массив;
	Разделители.Добавить(" ");
	Разделители.Добавить(".");

	КраткоеИмя = "";
	Для Счетчик = 1 По 3 Цикл
		Если Счетчик <> 1 Тогда
			КраткоеИмя = КраткоеИмя + ВРег(Лев(ПолноеИмя, 1));
		КонецЕсли;

		ПозицияРазделителя = 0;
		Для каждого Разделитель Из Разделители Цикл
			ПозицияТекущегоРазделителя = СтрНайти(ПолноеИмя, Разделитель);
			Если ПозицияТекущегоРазделителя > 0
			   И (    ПозицияРазделителя = 0
			      ИЛИ ПозицияРазделителя > ПозицияТекущегоРазделителя ) Тогда
				ПозицияРазделителя = ПозицияТекущегоРазделителя;
			КонецЕсли;
		КонецЦикла;

		Если ПозицияРазделителя = 0 Тогда
			Если Счетчик = 1 Тогда
				КраткоеИмя = ПолноеИмя;
			КонецЕсли;

			Прервать;
		КонецЕсли;

		Если Счетчик = 1 Тогда
			КраткоеИмя = Лев(ПолноеИмя, ПозицияРазделителя - 1);
		КонецЕсли;

		ПолноеИмя = Прав(ПолноеИмя, СтрДлина(ПолноеИмя) - ПозицияРазделителя);
		Пока Разделители.Найти(Лев(ПолноеИмя, 1)) <> Неопределено Цикл
			ПолноеИмя = Сред(ПолноеИмя, 2);
		КонецЦикла;
	КонецЦикла;

	Возврат КраткоеИмя;
КонецФункции

Процедура сП_УстановитьНаличиеПароля(Форма, ПарольУстановлен, АвторизованныйПользователь) Экспорт
	Элементы = Форма.Элементы;

	Если ПарольУстановлен Тогда
		Элементы.НадписьНаличиеПароля.Заголовок				= "Пароль установлен";
		Элементы.ПотребоватьСменуПароляПриВходе.Заголовок	= "Потребовать смену пароля при входе";
	Иначе
		Элементы.НадписьНаличиеПароля.Заголовок				= "Пустой пароль";
		Элементы.ПотребоватьСменуПароляПриВходе.Заголовок	= "Потребовать установку пароля при входе";
	КонецЕсли;

	Если ПарольУстановлен И Форма.Объект.Ссылка = АвторизованныйПользователь Тогда
		Элементы.СменитьПароль.Заголовок = "Сменить пароль...";
	Иначе
		Элементы.СменитьПароль.Заголовок = "Установить пароль...";
	КонецЕсли;
КонецПроцедуры

Процедура сП_ОбновитьОграничениеСрокаДействия(Форма) Экспорт
	Элементы												= Форма.Элементы;

	Элементы.ИзменитьОграничениеНаВходВПрограмму.Видимость	= Элементы.СвойстваПользователяИБ.Видимость И Форма.УровеньДоступа.УправлениеСписком;

	Если Не Элементы.СвойстваПользователяИБ.Видимость Тогда
		Элементы.ВходВПрограммуРазрешен.Заголовок = "";

		Возврат;
	КонецЕсли;

	Элементы.ИзменитьОграничениеНаВходВПрограмму.Доступность = Форма.УровеньДоступа.НастройкиДляВхода;

	ЗаголовокСОграничением = "";

	Если Форма.СрокДействияНеОграничен Тогда
		ЗаголовокСОграничением = "Вход в программу разрешен (без ограничения срока)";
	ИначеЕсли ЗначениеЗаполнено(Форма.СрокДействия) Тогда
		ЗаголовокСОграничением = СтрШаблон("Вход в программу разрешен (до %1)", Формат(Форма.СрокДействия, "ДЛФ=D"));
	ИначеЕсли ЗначениеЗаполнено(Форма.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода) Тогда
		ЗаголовокСОграничением = СтрШаблон("Вход в программу разрешен (запретить, если не работает более %1)", СтрокаСЧислом("; день; ; дня; дней; дня", Форма.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода, ВидЧисловогоЗначения.Количественное,"L=ru"));
	КонецЕсли;

	Если ЗначениеЗаполнено(ЗаголовокСОграничением) Тогда
		Элементы.ВходВПрограммуРазрешен.Заголовок				= ЗаголовокСОграничением;
		Элементы.ИзменитьОграничениеНаВходВПрограмму.Заголовок	= "Изменить ограничение";
	Иначе
		Элементы.ВходВПрограммуРазрешен.Заголовок				= "";
		Элементы.ИзменитьОграничениеНаВходВПрограмму.Заголовок	= "Установить ограничение";
	КонецЕсли;
КонецПроцедуры

Функция сП_ТекущийПользователь(АвторизованныйПользователь) Экспорт
	Если ТипЗнч(АвторизованныйПользователь) <> Тип("СправочникСсылка.Пользователи") Тогда
		ВызватьИсключение "Невозможно получить текущего пользователя
			           |в сеансе внешнего пользователя.";
	КонецЕсли;

	Возврат АвторизованныйПользователь;
КонецФункции


#КонецОбласти
