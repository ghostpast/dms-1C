///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область УправлениеКонтактнойИнформацией

Процедура УКИ_ПриСозданииНаСервере(Форма, Объект, ДополнительныеПараметры = Неопределено, УдалитьПоложениеЗаголовкаКИ = "", Знач УдалитьИсключаемыеВиды = Неопределено, УдалитьОтложеннаяИнициализация = Ложь) Экспорт
	ТипПомещения = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("ТипПомещения", ТипПомещения);
		ОтложеннаяИнициализация  = ?(ДополнительныеПараметры.Свойство("ОтложеннаяИнициализация"), ДополнительныеПараметры.ОтложеннаяИнициализация, Ложь);
		ПоложениеЗаголовкаКИ     = ?(ДополнительныеПараметры.Свойство("ПоложениеЗаголовкаКИ"), ДополнительныеПараметры.ПоложениеЗаголовкаКИ, "");
		ИсключаемыеВиды          = ?(ДополнительныеПараметры.Свойство("ИсключаемыеВиды"), ДополнительныеПараметры.ИсключаемыеВиды, Неопределено);
		СкрываемыеВиды           = ?(ДополнительныеПараметры.Свойство("СкрываемыеВиды"), ДополнительныеПараметры.СкрываемыеВиды, Неопределено);
		ИмяЭлементаДляРазмещения = ?(ДополнительныеПараметры.Свойство("ИмяЭлементаДляРазмещения"), ДополнительныеПараметры.ИмяЭлементаДляРазмещения, "ГруппаКонтактнаяИнформация");
		ОбработкаНавигационнойСсылки = ?(ДополнительныеПараметры.Свойство("ОбработкаНавигационнойСсылки"), ДополнительныеПараметры.ОбработкаНавигационнойСсылки, Ложь);
	Иначе
		ИмяЭлементаДляРазмещения = ?(ДополнительныеПараметры = Неопределено, "ГруппаКонтактнаяИнформация", ДополнительныеПараметры);
		ОтложеннаяИнициализация  = УдалитьОтложеннаяИнициализация;
		ИсключаемыеВиды          = УдалитьИсключаемыеВиды;
		СкрываемыеВиды           = Неопределено;
		ПоложениеЗаголовкаКИ     = УдалитьПоложениеЗаголовкаКИ;
		ОбработкаНавигационнойСсылки = Ложь;
	КонецЕсли;

	Если ИсключаемыеВиды = Неопределено Тогда
		ИсключаемыеВиды = Новый Массив;
	КонецЕсли;

	Если СкрываемыеВиды = Неопределено Тогда
		СкрываемыеВиды = Новый Массив;
	КонецЕсли;

	ДобавляемыеРеквизиты = Новый Массив;
	УКИ_ПроверитьНаличиеРеквизитовКонтактнойИнформации(Форма, ДобавляемыеРеквизиты);

	// Кэширование часто используемых значений
	СсылкаНаОбъект				= Объект.Ссылка;
	МетаданныеОбъекта			= СсылкаНаОбъект.Метаданные();
	ПолноеИмяОбъектаМетаданных	= МетаданныеОбъекта.ПолноеИмя();
	ИмяОбъекта					= МетаданныеОбъекта.Имя;
	ЭтоОсновнойЯзык				= СтрСравнить(Метаданные.ОсновнойЯзык.КодЯзыка, ТекущийЯзык().КодЯзыка) = 0;

	ГруппаВидовКонтактнойИнформации		= УКИ_ВидКонтактнойИнформацииПоИмени(СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", ""));
	ИспользуетсяКонтактнаяИнформация	= БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(ГруппаВидовКонтактнойИнформации, "Используется");
	Если ИспользуетсяКонтактнаяИнформация = Ложь Тогда
		ПараметрыВыводаКонтактнойИнформации = Новый Структура;
		ПараметрыВыводаКонтактнойИнформации.Вставить("ИмяЭлементаДляРазмещения",	ИмяЭлементаДляРазмещения);
		ПараметрыВыводаКонтактнойИнформации.Вставить("ПоложениеЗаголовкаКИ",		ПоложениеЗаголовкаКИ);
		ПараметрыВыводаКонтактнойИнформации.Вставить("ОтложеннаяИнициализация",		ОтложеннаяИнициализация);
		ПараметрыВыводаКонтактнойИнформации.Вставить("ИсключаемыеВиды",				ИсключаемыеВиды);
		ПараметрыВыводаКонтактнойИнформации.Вставить("СкрываемыеВиды",				СкрываемыеВиды);
		ПараметрыВыводаКонтактнойИнформации.Вставить("СсылкаНаОбъект",				СсылкаНаОбъект);

		УКИ_СкрытьКонтактнуюИнформацию(Форма, ДобавляемыеРеквизиты, ПараметрыВыводаКонтактнойИнформации);

		Возврат;
	КонецЕсли;

	СодержитДействуетС								= КонтактнаяИнформацияСерверПовтИсп.сУКИ_КонтактнаяИнформацияОбъектаСодержитКолонкуДействуетС(СсылкаНаОбъект);
	РеквизитыОбъекта								= МетаданныеОбъекта.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты;
	ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти	= (РеквизитыОбъекта.Найти("ИдентификаторСтрокиТабличнойЧасти") <> Неопределено);

	Если БазоваяПодсистемаСервер.ОН_ЭтоСсылка(ТипЗнч(Объект)) Тогда
		Запрос			= Новый Запрос;
		Запрос.Текст	= "ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление КАК Представление,
		|	КонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	ЕСТЬNULL(ВидыКонтактнойИнформации.ХранитьИсториюИзменений, ЛОЖЬ) КАК ХранитьИсториюИзменений,
		|	КонтактнаяИнформация.ЗначенияПолей,
		|	КонтактнаяИнформация.Значение,
		|	"""" КАК ДействуетС,
		|	0 КАК ИдентификаторСтрокиТабличнойЧасти,
		|	ЛОЖЬ КАК ЭтоИсторическаяКонтактнаяИнформация
		|ИЗ
		|	&ПутьКТаблицеКонтактнойИнформации КАК КонтактнаяИнформация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|			ПО (КонтактнаяИнформация.Вид = ВидыКонтактнойИнформации.Ссылка)
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Ссылка УПОРЯДОЧИТЬ ПО Вид, ДействуетС";

		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПутьКТаблицеКонтактнойИнформации", ПолноеИмяОбъектаМетаданных + ".КонтактнаяИнформация");

		Если ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "0 КАК ИдентификаторСтрокиТабличнойЧасти", "ЕСТЬNULL(КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти, 0) КАК ИдентификаторСтрокиТабличнойЧасти");
		КонецЕсли;

		Если СодержитДействуетС Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, """"" КАК ДействуетС", "КонтактнаяИнформация.ДействуетС КАК ДействуетС");
		КонецЕсли;

		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
		КонтактнаяИнформация = Запрос.Выполнить().Выгрузить();
	Иначе
		КонтактнаяИнформация = Объект.КонтактнаяИнформация.Выгрузить();

		Если СодержитДействуетС Тогда
			ТипБулево = Новый ОписаниеТипов("Булево");
			КонтактнаяИнформация.Колонки.Добавить("ХранитьИсториюИзменений", ТипБулево);
			КонтактнаяИнформация.Колонки.Добавить("ЭтоИсторическаяКонтактнаяИнформация", ТипБулево);
			КонтактнаяИнформация.Сортировать("Вид, ДействуетС");
			Для каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформация Цикл
				СтрокаКонтактнойИнформации.ХранитьИсториюИзменений = СтрокаКонтактнойИнформации.Вид.ХранитьИсториюИзменений;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если СодержитДействуетС Тогда
		ПредыдущийВид = Неопределено;
		Для каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформация Цикл
			Если СтрокаКонтактнойИнформации.ХранитьИсториюИзменений И (ПредыдущийВид = Неопределено ИЛИ ПредыдущийВид <> СтрокаКонтактнойИнформации.Вид) Тогда
				Отбор			= Новый Структура("Вид", СтрокаКонтактнойИнформации.Вид);
				НайденныеСтроки	= КонтактнаяИнформация.НайтиСтроки(Отбор);
				ПоследняяДата	= НайденныеСтроки.Получить(НайденныеСтроки.Количество() - 1).ДействуетС;
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если НайденнаяСтрока.ДействуетС < ПоследняяДата Тогда
						НайденнаяСтрока.ЭтоИсторическаяКонтактнаяИнформация = Истина;
					КонецЕсли;
				КонецЦикла;
				ПредыдущийВид = СтрокаКонтактнойИнформации.Вид;
			КонецЕсли;
		КонецЦикла;
		ЕстьИсторическаяИнформация = Истина;
	Иначе
		ЕстьИсторическаяИнформация = Ложь;
	КонецЕсли;

	Запрос			= Новый Запрос;
	Запрос.Текст	= УКИ_СформироватьТекстЗапроса(ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти, ЕстьИсторическаяИнформация, ЭтоОсновнойЯзык);
	Запрос.УстановитьПараметр("ТаблицаКонтактнойИнформации", КонтактнаяИнформация);
	Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКонтактнойИнформации);
	Запрос.УстановитьПараметр("Владелец", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("СкрываемыеВиды", СкрываемыеВиды);
	Если Не ЭтоОсновнойЯзык Тогда
		Запрос.УстановитьПараметр("ЭтоОсновнойЯзык", ЭтоОсновнойЯзык);
		Запрос.УстановитьПараметр("КодЯзыка", ТекущийЯзык().КодЯзыка);
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	КонтактнаяИнформация = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией).Строки;
	УстановитьПривилегированныйРежим(Ложь);

	УКИ_КонвертацияКонтактнойИнформацииВJSON(КонтактнаяИнформация);

	КонтактнаяИнформация.Сортировать("РеквизитДопУпорядочивания, НомерСтроки");
	УКИ_СоздатьРеквизитыКонтактнойИнформации(Форма, ДобавляемыеРеквизиты, ИмяОбъекта, ИсключаемыеВиды, КонтактнаяИнформация, ОтложеннаяИнициализация, ОбработкаНавигационнойСсылки);

	ПараметрыКонтактнойИнформации								= УКИ_ПараметрыВыводаКонтактнойИнформации(Форма, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ, ОтложеннаяИнициализация, ИсключаемыеВиды, СкрываемыеВиды);
	ПараметрыКонтактнойИнформации.Владелец						= СсылкаНаОбъект;
	ПараметрыКонтактнойИнформации.ПараметрыАдреса.ТипПомещения	= ТипПомещения;
	ПараметрыКонтактнойИнформации.ОбработкаНавигационнойСсылки	= ОбработкаНавигационнойСсылки;

	Отбор				= Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	КоличествоАдресов	= КонтактнаяИнформация.НайтиСтроки(Отбор).Количество();

	// Создадим элементы на форме и заполним значения реквизитов.
	СозданныеЭлементы	= БазоваяПодсистемаСервер.ОН_СкопироватьРекурсивно(ИсключаемыеВиды);
	ПредыдущийВид		= Неопределено;

	Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
		ДанныеВидаКонтактнойИнформации = БазоваяПодсистемаСервер.ОН_СтрокаТаблицыЗначенийВСтруктуру(СтрокаКИ);

		Если СтрокаКИ.ЭтоРеквизитТабличнойЧасти Тогда
			УКИ_СоздатьЭлементыТабличнойЧасти(Форма, ИмяОбъекта, ИмяЭлементаДляРазмещения, СтрокаКИ, ДанныеВидаКонтактнойИнформации);

			Продолжить;
		КонецЕсли;

		Если СтрокаКИ.ПометкаУдаления И ПустаяСтрока(СтрокаКИ.ЗначенияПолей) И ПустаяСтрока(СтрокаКИ.Значение) Тогда
			Продолжить;
		КонецЕсли;

		ИндексЭлемента     = СозданныеЭлементы.Найти(СтрокаКИ.Вид);
		СтатическийЭлемент = ИндексЭлемента <> Неопределено;
		ЭтоНовыйВидКИ      = (СтрокаКИ.Вид <> ПредыдущийВид);

		Если ОтложеннаяИнициализация Тогда
			УКИ_ДобавитьРеквизитВОписание(Форма, СтрокаКИ, ДанныеВидаКонтактнойИнформации, ЭтоНовыйВидКИ,, СтатическийЭлемент, ИмяЭлементаДляРазмещения);
			Если СтатическийЭлемент Тогда
				УКИ_ПодготовитьСтатическийЭлемент(Форма, СтрокаКИ, СозданныеЭлементы, ИндексЭлемента);
			КонецЕсли;

			Продолжить;
		КонецЕсли;

		УКИ_ДобавитьРеквизитВОписание(Форма, СтрокаКИ, ДанныеВидаКонтактнойИнформации, ЭтоНовыйВидКИ,, НЕ СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация, ИмяЭлементаДляРазмещения);

		Если СтатическийЭлемент Тогда
			УКИ_ПодготовитьСтатическийЭлемент(Форма, СтрокаКИ, СозданныеЭлементы, ИндексЭлемента);
		Иначе
			СледующаяСтрока = ?(СозданныеЭлементы.Количество() = 0, Неопределено, УКИ_ОпределитьСледующуюСтроку(Форма, КонтактнаяИнформация, СтрокаКИ));

			Если НЕ СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация Тогда
				УКИ_ДобавитьСтрокуКонтактнойИнформации(Форма, СтрокаКИ, ИмяЭлементаДляРазмещения, ЭтоНовыйВидКИ, КоличествоАдресов, СледующаяСтрока);
			КонецЕсли;
		КонецЕсли;

		Если НЕ СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация  Тогда
			ПредыдущийВид = СтрокаКИ.Вид;
		КонецЕсли;
	КонецЦикла;

	УКИ_ОбновитьКонтекстноеМеню(Форма, ИмяЭлементаДляРазмещения);

	Если Не ОтложеннаяИнициализация И Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения].СписокДобавляемыхЭлементов.Количество() > 0 Тогда
		УКИ_ДобавитьКнопкуДополнительногоПоляКонтактнойИнформации(Форма, ИмяЭлементаДляРазмещения);
	Иначе
		УКИ_ДобавитьПояснениеПоСбросуНастроекФормы(Форма, ИмяЭлементаДляРазмещения, ОтложеннаяИнициализация);
	КонецЕсли;
КонецПроцедуры

Процедура УКИ_ДобавитьПояснениеПоСбросуНастроекФормы(Знач Форма, Знач ИмяЭлементаДляРазмещения, Знач ОтложеннаяИнициализация)
	ГруппаДляРазмещения = Форма.Элементы[ИмяЭлементаДляРазмещения];
	// Если отложенная инициализация и на странице нет элементов, то платформа скрывает страницу,
	// поэтому надо создавать временный элемент, который при переходе на страницу удаляется.
	Если ОтложеннаяИнициализация И ГруппаДляРазмещения.Вид = ВидГруппыФормы.Страница И Форма.Элементы.Найти("КонтактнаяИнформацияЗаглушка") = Неопределено Тогда
		ГруппаСтраниц			= ГруппаДляРазмещения.Родитель; // ГруппаФормы
		ЗаголовокСтраницы		= ?(ЗначениеЗаполнено(ГруппаДляРазмещения.Заголовок), ГруппаДляРазмещения.Заголовок, ГруппаДляРазмещения.Имя);
		ЗаголовокГруппыСтраниц	= ?(ЗначениеЗаполнено(ГруппаСтраниц.Заголовок), ГруппаСтраниц.Заголовок, ГруппаСтраниц.Имя);

		ПредупреждениеОРазмещении	= "Для отображения контактной информации разместите группу ""%1"" не первым элементом (после любой другой группы) в группе ""%2"" (меню Еще - Изменить форму).";
		ПредупреждениеОРазмещении	= СтрШаблон(ПредупреждениеОРазмещении, ЗаголовокСтраницы, ЗаголовокГруппыСтраниц);
		ТекстПодсказки				= "Также можно установить стандартные настройки формы:
		|   • в меню Еще выбрать пункт Изменить форму...;
		|   • в открывшейся форме ""Настройка формы"" в меню Еще выбрать пункт ""Установить стандартные настройки"".";

		Декорация							= Форма.Элементы.Добавить("КонтактнаяИнформацияЗаглушка", Тип("ДекорацияФормы"), ГруппаДляРазмещения);
		Декорация.Заголовок					= ПредупреждениеОРазмещении;
		Декорация.ОтображениеПодсказки		= ОтображениеПодсказки.Кнопка;
		Декорация.Подсказка					= ТекстПодсказки;
		Декорация.ЦветТекста				= ЦветаСтиля.ПоясняющийОшибкуТекст;
		Декорация.АвтоМаксимальнаяВысота	= Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура УКИ_ДобавитьКнопкуДополнительногоПоляКонтактнойИнформации(Знач Форма, Знач ИмяЭлементаДляРазмещения)
	Описание					= "Добавить дополнительное поле контактной информации";
	ГруппаКоманды				= УКИ_Группа("ГруппаКонтактнаяИнформацияДобавитьПолеВвода" + ИмяЭлементаДляРазмещения, Форма, Описание, ИмяЭлементаДляРазмещения);
	ГруппаКоманды.Отображение	= ОтображениеОбычнойГруппы.ОбычноеВыделение;

	ИмяКоманды          = "КонтактнаяИнформацияДобавитьПолеВвода" + ИмяЭлементаДляРазмещения;
	Команда             = Форма.Команды.Добавить(ИмяКоманды);
	Команда.Подсказка   = Описание;
	Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
	Команда.Картинка    = БиблиотекаКартинок.ДобавитьЭлементСписка;
	Команда.Действие    = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";

	ПараметрыКонтактнойИнформацииЭлемента = Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения]; // см. ПараметрыВыводаКонтактнойИнформации
	ПараметрыКонтактнойИнформацииЭлемента.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);

	Кнопка								= Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаКоманды);
	Кнопка.Доступность					= НЕ Форма.Элементы[ИмяЭлементаДляРазмещения].ТолькоПросмотр;
	Кнопка.Заголовок					= "Добавить";
	Команда.ИзменяетСохраняемыеДанные	= Истина;
	Кнопка.ИмяКоманды					= ИмяКоманды;
	ПараметрыКонтактнойИнформацииЭлемента.ДобавленныеЭлементы.Добавить(ИмяКоманды, 2, Ложь);
КонецПроцедуры

Процедура УКИ_ОбновитьКонтекстноеМеню(Форма, ИмяЭлементаДляРазмещения)
	ПараметрыКонтактнойИнформации	= Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения];  // см. ПараметрыВыводаКонтактнойИнформации
	ВсеСтроки						= Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	НайденныеСтроки					= ВсеСтроки.НайтиСтроки(Новый Структура("Тип, ЭтоРеквизитТабличнойЧасти", Перечисления.ТипыКонтактнойИнформации.Адрес, Ложь));

	ОбщееКоличествоКоманд = 0;
	Для Каждого СтрокаКИ Из ВсеСтроки Цикл
		Если ОбщееКоличествоКоманд > 50 Тогда // Ограничение для большого количества адресов на форме
			Прервать;
		КонецЕсли;

		Если СтрокаКИ.Тип <> Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			Продолжить;
		КонецЕсли;

		ПодменюКопироватьАдреса				= Форма.Элементы.Найти("ПодменюКопироватьАдреса" + СтрокаКИ.ИмяРеквизита);
		КонтекстноеПодменюКопироватьАдреса	= Форма.Элементы.Найти("КонтекстноеПодменюКопироватьАдреса" + СтрокаКИ.ИмяРеквизита);
		Если ПодменюКопироватьАдреса <> Неопределено И КонтекстноеПодменюКопироватьАдреса = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		КоличествоКомандВПодменю	= 0;
		СписокАдресовВПодменю		= Новый Соответствие;
		СписокАдресовВПодменю.Вставить(ВРег(СтрокаКИ.Представление), Истина);

		Для Каждого Адрес Из НайденныеСтроки Цикл
			Если КоличествоКомандВПодменю > 7 Тогда // Ограничение для большого количества адресов на форме
				Прервать;
			КонецЕсли;

			Если Адрес.ЭтоИсторическаяКонтактнаяИнформация Или Адрес.ИмяРеквизита = СтрокаКИ.ИмяРеквизита Тогда
				Продолжить;
			КонецЕсли;

			ИмяКоманды	= "МенюПодменюАдрес" + СтрокаКИ.ИмяРеквизита + "_" + Адрес.ИмяРеквизита;
			Команда		= Форма.Команды.Найти(ИмяКоманды);
			Если Команда = Неопределено Тогда
				Команда								= Форма.Команды.Добавить(ИмяКоманды);
				Команда.Подсказка					= "Скопировать адрес";
				Команда.Действие					= "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
				Команда.ИзменяетСохраняемыеДанные	= Истина;

				ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
				КоличествоКомандВПодменю			= КоличествоКомандВПодменю + 1;
			КонецЕсли;

			ПредставлениеАдреса = ?(СтрокаКИ.МеждународныйФорматАдреса, БазоваяПодсистемаСервер.СФ_СтрокаЛатиницей(Адрес.Представление), Адрес.Представление);

			Если СписокАдресовВПодменю[ВРег(Адрес.Представление)] <> Неопределено Тогда
				ПредставлениеАдреса = "";
			Иначе
				СписокАдресовВПодменю.Вставить(ВРег(Адрес.Представление), Истина);
			КонецЕсли;

			Если ПодменюКопироватьАдреса <> Неопределено Тогда
				УКИ_ДобавитьКнопкуСкопироватьАдрес(Форма, ИмяКоманды, ПредставлениеАдреса, ПараметрыКонтактнойИнформации, ПодменюКопироватьАдреса);
			КонецЕсли;

			Если КонтекстноеПодменюКопироватьАдреса <> Неопределено Тогда
				УКИ_ДобавитьКнопкуСкопироватьАдрес(Форма, ИмяКоманды, ПредставлениеАдреса, ПараметрыКонтактнойИнформации, КонтекстноеПодменюКопироватьАдреса);
			КонецЕсли;
		КонецЦикла;
		ОбщееКоличествоКоманд = ОбщееКоличествоКоманд + КоличествоКомандВПодменю;
	КонецЦикла;
КонецПроцедуры

Процедура УКИ_ДобавитьКнопкуСкопироватьАдрес(Форма, ИмяКоманды, ЗаголовокЭлемента, ПараметрыКонтактнойИнформации, Подменю)
	ИмяЭлемента	= Подменю.Имя + "_" + ИмяКоманды;
	Кнопка		= Форма.Элементы.Найти(ИмяЭлемента);
	Если Кнопка = Неопределено Тогда
		Кнопка				= Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Подменю);
		Кнопка.ИмяКоманды	= ИмяКоманды;
		ДобавленныеЭлементы	= ПараметрыКонтактнойИнформации.ДобавленныеЭлементы; // СписокЗначений
		ДобавленныеЭлементы.Добавить(ИмяЭлемента, 1);
	КонецЕсли;
	Кнопка.Заголовок = ЗаголовокЭлемента;
	Кнопка.Видимость = ЗначениеЗаполнено(ЗаголовокЭлемента);
КонецПроцедуры

Процедура УКИ_ДобавитьСтрокуКонтактнойИнформации(Форма, Результат, ИмяЭлементаДляРазмещения, ЭтоНовыйВидКИ = Ложь, КоличествоАдресов = Неопределено, СледующаяСтрока = Неопределено)
	ДобавлениеНовогоЗначения = ТипЗнч(Результат) = Тип("Структура");

	Если ДобавлениеНовогоЗначения Тогда
		Результат.Свойство("ИмяЭлементаДляРазмещения", ИмяЭлементаДляРазмещения);

		ДобавляемыйВид = Результат.ДобавляемыйВид;
		Если ТипЗнч(ДобавляемыйВид)= Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
			ИнформацияОВидеКИ = БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта(ДобавляемыйВид, "Тип, Наименование, ВидРедактирования, ВидПоляДругое, ВводитьНомерПоМаске, МаскаНомераТелефона");
		Иначе
			ИнформацияОВидеКИ = ДобавляемыйВид;
			ДобавляемыйВид    = ДобавляемыйВид.Ссылка;
		КонецЕсли;
	Иначе
		ИнформацияОВидеКИ = Результат;
		ДобавляемыйВид    = Результат.Вид;
	КонецЕсли;

	ТаблицаКонтактнойИнформации	= Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	ОтборПоВиду					= Новый Структура("Вид, ЭтоИсторическаяКонтактнаяИнформация", ДобавляемыйВид, Ложь);

	Если ДобавлениеНовогоЗначения Тогда
		НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(ОтборПоВиду);

		КоличествоСтрокВида = НайденныеСтроки.Количество();
		Если КоличествоСтрокВида > 0 Тогда
			ПоследняяСтрока			= НайденныеСтроки.Получить(КоличествоСтрокВида - 1);
			ИндексДобавляемойСтроки	= ТаблицаКонтактнойИнформации.Индекс(ПоследняяСтрока) + 1;
		Иначе
			ИндексДобавляемойСтроки = 0;
		КонецЕсли;

		ЭтоПоследняяСтрока = Ложь;
		Если ИндексДобавляемойСтроки = ТаблицаКонтактнойИнформации.Количество() Тогда
			ЭтоПоследняяСтрока = Истина;
		КонецЕсли;

		НоваяСтрока								= ТаблицаКонтактнойИнформации.Вставить(ИндексДобавляемойСтроки);
		ИмяРеквизита							= СтрШаблон("%1%2%3", "КонтактнаяИнформацияПоле", СтрЗаменить(ДобавляемыйВид.УникальныйИдентификатор(), "-", "x"), КоличествоСтрокВида + 1);
		НоваяСтрока.ИмяРеквизита				= ИмяРеквизита;
		НоваяСтрока.Вид							= ДобавляемыйВид;
		НоваяСтрока.Тип							= ИнформацияОВидеКИ.Тип;
		НоваяСтрока.ИмяЭлементаДляРазмещения	= ИмяЭлементаДляРазмещения;
		НоваяСтрока.ЭтоРеквизитТабличнойЧасти	= Ложь;

		ПараметрыКонтактнойИнформации	= УКИ_ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
		ОбработкаНавигационнойСсылки	= ПараметрыКонтактнойИнформации.ОбработкаНавигационнойСсылки;

		Если ОбработкаНавигационнойСсылки = Истина И ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			ОписаниеТипаРеквизита = Новый ОписаниеТипов("ФорматированнаяСтрока");
		Иначе
			ОписаниеТипаРеквизита = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
		КонецЕсли;

		МассивДобавляемыхРеквизитов = Новый Массив;
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипаРеквизита,, ИнформацияОВидеКИ.Наименование, Истина));
		Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);

		ЕстьКомментарий			= Ложь;
		ОбязательноеЗаполнение	= Ложь;
	Иначе
		ЭтоПоследняяСтрока		= СледующаяСтрока = Неопределено;
		ИмяРеквизита			= ИнформацияОВидеКИ.ИмяРеквизита;
		ЕстьКомментарий			= ЗначениеЗаполнено(ИнформацияОВидеКИ.Комментарий);
		ОбязательноеЗаполнение	= ИнформацияОВидеКИ.ОбязательноеЗаполнение;
	КонецЕсли;

	// Отрисовка на форме
	ГруппаСтроки = УКИ_Группа("Группа" + ИмяРеквизита, Форма, ДобавляемыйВид.Наименование, ИмяЭлементаДляРазмещения);

	Если БазоваяПодсистемаСервер.ОН_ЭтоМобильныйКлиент() Тогда
		ГруппаСтроки.ОтображатьЗаголовок = Истина;
	КонецЕсли;

	Родитель = ?(ПустаяСтрока(ИмяЭлементаДляРазмещения), Форма, Форма.Элементы[ИмяЭлементаДляРазмещения]);
	Если Не ЭтоПоследняяСтрока Тогда
		Если СледующаяСтрока = Неопределено Тогда
			ИмяСледующейГруппы = "Группа" + ПоследняяСтрока.ИмяРеквизита;
			Если Форма.Элементы.Найти(ИмяСледующейГруппы) <> Неопределено Тогда
				ИндексСледующейГруппы	= Родитель.ПодчиненныеЭлементы.Индекс(Форма.Элементы[ИмяСледующейГруппы]) + 1;
				СледующаяГруппа			= Родитель.ПодчиненныеЭлементы.Получить(ИндексСледующейГруппы);
			КонецЕсли;
		Иначе
			ИмяГруппы = "Группа" + СледующаяСтрока.ИмяРеквизита;
			Если Форма.Элементы.Найти(ИмяГруппы) <> Неопределено Тогда
				СледующаяГруппа			= Форма.Элементы[ИмяГруппы];
			КонецЕсли;
		КонецЕсли;
		Форма.Элементы.Переместить(ГруппаСтроки, Родитель, СледующаяГруппа);
	ИначеЕсли ДобавлениеНовогоЗначения Тогда
		СледующаяГруппа = Форма.Элементы[Результат.ИмяКоманды].Родитель;
		Форма.Элементы.Переместить(ГруппаСтроки, Родитель, СледующаяГруппа);
	КонецЕсли;

	// Обработка ситуации, когда на форме выводится одновременно множественная динамическая и статическая контактная информация.
	ИмяСледующейГруппыТекущегоВида = "Группа" + ИмяРеквизита;
	Если Форма.Элементы.Найти(ИмяСледующейГруппыТекущегоВида) <> Неопределено Тогда
		Отбор						= Новый Структура("ИмяРеквизита", ИмяРеквизита);
		НайденныеСтрокиТекущегоВида	= ТаблицаКонтактнойИнформации.НайтиСтроки(Отбор);
		Если НайденныеСтрокиТекущегоВида.Количество() > 0 Тогда
			ТекущийВид = НайденныеСтрокиТекущегоВида[0].Вид;
		КонецЕсли;

		ИндексПредыдущейГруппыВида = Родитель.ПодчиненныеЭлементы.Индекс(Форма.Элементы[ИмяСледующейГруппыТекущегоВида]) - 1;
		Если ИндексПредыдущейГруппыВида >= 0 Тогда
			ПредыдущаяГруппаВида = Родитель.ПодчиненныеЭлементы.Получить(ИндексПредыдущейГруппыВида);

			Если ПредыдущаяГруппаВида <> Неопределено Тогда
				Отбор = Новый Структура("ИмяРеквизита", СтрЗаменить(ПредыдущаяГруппаВида.Имя, "Группа", ""));
				НайденныеСтрокиПредыдущегоВида = ТаблицаКонтактнойИнформации.НайтиСтроки(Отбор);
				Если НайденныеСтрокиПредыдущегоВида.Количество() > 0 Тогда
					ПредыдущийВид = НайденныеСтрокиПредыдущегоВида[0].Вид;
				КонецЕсли;

				Если ТекущийВид <> ПредыдущийВид Тогда
					ЭтоНовыйВидКИ = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЭтоНовыйВидКИ = Истина;
		КонецЕсли;
	КонецЕсли;

	ПолеВвода = УКИ_СоздатьПолеВвода(Форма, ГруппаСтроки, ИнформацияОВидеКИ, ИмяРеквизита, ИмяЭлементаДляРазмещения, ЭтоНовыйВидКИ, ОбязательноеЗаполнение);

	Если БазоваяПодсистемаСервер.ОН_ЭтоМобильныйКлиент() Тогда
		ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КонецЕсли;

	Если ЕстьКомментарий Тогда
		ПолеВвода.РасширеннаяПодсказка.Заголовок              = ИнформацияОВидеКИ.Комментарий;
		ПолеВвода.РасширеннаяПодсказка.АвтоМаксимальнаяШирина = Ложь;
		ПолеВвода.РасширеннаяПодсказка.МаксимальнаяШирина     = ПолеВвода.Ширина;
		ПолеВвода.РасширеннаяПодсказка.Ширина                 = ПолеВвода.Ширина;
	КонецЕсли;

	Если КоличествоАдресов = Неопределено Тогда
		ОтборПоТипу = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
		КоличествоАдресов = ТаблицаКонтактнойИнформации.НайтиСтроки(ОтборПоТипу).Количество();
	КонецЕсли;

	УКИ_СоздатьДействие(Форма, ИнформацияОВидеКИ, ИмяРеквизита, ГруппаСтроки, КоличествоАдресов, ЕстьКомментарий, ИмяЭлементаДляРазмещения);

	Если Не ЭтоНовыйВидКИ Тогда
		Если ТаблицаКонтактнойИнформации.Количество() > 1 И ТаблицаКонтактнойИнформации[0].Свойство("ЭтоИсторическаяКонтактнаяИнформация") Тогда
			УКИ_ПунктКонтекстногоМенюПеремещения(ПолеВвода, Форма, 1, ИмяЭлементаДляРазмещения);
			НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(ОтборПоВиду);
			Если НайденныеСтроки.Количество() > 1 Тогда
				ПредыдущаяСтрока = НайденныеСтроки.Получить(НайденныеСтроки.Количество() - 2);
				УКИ_ПунктКонтекстногоМенюПеремещения(Форма.Элементы[ПредыдущаяСтрока.ИмяРеквизита], Форма, - 1, ИмяЭлементаДляРазмещения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ДобавлениеНовогоЗначения Тогда
		Форма.ТекущийЭлемент = Форма.Элементы[ИмяРеквизита];
		Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес И ИнформацияОВидеКИ.ВидРедактирования = "Диалог" Тогда
			Результат.Вставить("ЭлементФормыАдреса", ИмяРеквизита);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура УКИ_ПунктКонтекстногоМенюПеремещения(ПредыдущийЭлемент, Форма, Направление, ИмяЭлементаДляРазмещения)
	Если Направление > 0 Тогда
		ИмяКоманды = "КонтекстноеМенюВверх" + ПредыдущийЭлемент.Имя;
	Иначе
		ИмяКоманды = "КонтекстноеМенюВниз" + ПредыдущийЭлемент.Имя;
	КонецЕсли;

	Кнопка	= Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ПредыдущийЭлемент.КонтекстноеМеню);
	Если Направление > 0 Тогда
		ТекстКоманды	= "Переместить вверх";
		Кнопка.Картинка	= БиблиотекаКартинок.ПереместитьВверх;
	Иначе
		ТекстКоманды	= "Переместить вниз";
		Кнопка.Картинка	= БиблиотекаКартинок.ПереместитьВниз;
	КонецЕсли;
	Кнопка.Заголовок	= ТекстКоманды;
	Кнопка.Доступность	= Истина;
	Команда								= Форма.Команды.Добавить(ИмяКоманды);
	Команда.Действие					= "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
	Команда.Подсказка					= ТекстКоманды;
	Команда.ИзменяетСохраняемыеДанные	= Истина;
	Кнопка.ИмяКоманды	= ИмяКоманды;

	ПараметрыКонтактнойИнформации	= УКИ_ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 1);
	ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
КонецПроцедуры

Процедура УКИ_СоздатьДействие(Форма, ВидКонтактнойИнформации, ИмяРеквизита, ГруппаДействий, КоличествоАдресов, ЕстьКомментарий = Ложь, ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация")
	ПараметрыКонтактнойИнформации	= УКИ_ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	ОбработкаНавигационнойСсылки	= ПараметрыКонтактнойИнформации.ОбработкаНавигационнойСсылки;

	Тип = ВидКонтактнойИнформации.Тип;
	СоздаватьДействиеДляТипа = Новый Соответствие;
	Если Не ОбработкаНавигационнойСсылки Тогда
		СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.ВебСтраница, Истина);
	КонецЕсли;

	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,	Истина);
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон,				Истина);
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.Адрес,					?(КоличествоАдресов > 1, Истина, Ложь));
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.Skype,					Истина);

	Если Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		// Зарезервировано для новых подсистем

		СоздаватьДействиеДляТипа[Тип] = Ложь;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Адрес И ВидКонтактнойИнформации.ВидРедактирования = "Диалог" Тогда
		СоздаватьДействиеДляТипа[Тип] = Ложь;
	КонецЕсли;

	Если СоздаватьДействиеДляТипа[Тип] = Истина Тогда
		Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			ГруппаПодменюВерхнийУровень		= Форма.Элементы.Добавить("КоманднаяПанель" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаДействий);
			ГруппаПодменюВерхнийУровень.Вид	= ВидГруппыФормы.КоманднаяПанель;

			ГруппаПодменю							= Форма.Элементы.Добавить("Подменю" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаПодменюВерхнийУровень);
			ГруппаПодменю.Заголовок					= "Контактная информация";
			ГруппаПодменю.Вид						= ВидГруппыФормы.Подменю;
			ГруппаПодменю.Картинка					= БиблиотекаКартинок.МенюДополнительныеФункции;
			ГруппаПодменю.Отображение				= ОтображениеКнопки.Картинка;
			ГруппаПодменю.РастягиватьПоГоризонтали	= Ложь;

			Если БазоваяПодсистемаСервер.ОН_ЭтоМобильныйКлиент() Тогда
				ГруппаДействий.ОтображатьЗаголовок	= Истина;

				ГруппаПодменюВерхнийУровень.РастягиватьПоГоризонтали		= Ложь;
				ГруппаПодменюВерхнийУровень.Ширина							= 5;
				ГруппаПодменюВерхнийУровень.ГоризонтальноеПоложение			= ГоризонтальноеПоложениеЭлемента.Право;
				ГруппаПодменюВерхнийУровень.ВертикальноеПоложениеВГруппе	= ВертикальноеПоложениеЭлемента.Центр;
			КонецЕсли;
		Иначе
			ГруппаПодменю = ГруппаДействий;

			// Есть действие
			ИмяКоманды	= "Команда" + ИмяРеквизита;
			Команда		= Форма.Команды.Добавить(ИмяКоманды);

			ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
			Команда.Отображение	= ОтображениеКнопки.Картинка;
			Команда.Действие	= "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";

			Элемент = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаПодменю);

			Если БазоваяПодсистемаСервер.ОН_ЭтоМобильныйКлиент() Тогда
				Элемент.ВертикальноеПоложениеВГруппе	= ВертикальноеПоложениеЭлемента.Центр;
				Элемент.Ширина							= 5;
			КонецЕсли;

			ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 2);
			Элемент.ИмяКоманды = ИмяКоманды;
		КонецЕсли;

		Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			Если Не ВидКонтактнойИнформации.ПометкаУдаления Тогда
				// Ввод комментария через контекстное меню.
				ИмяКоманды	= "КонтекстноеМенюПодменю" + ИмяРеквизита;
				Кнопка				= Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаПодменю);
				Кнопка.Заголовок	= "Ввести комментарий";
				Команда								= Форма.Команды.Добавить(ИмяКоманды);
				Команда.Подсказка					= "Ввести комментарий";
				Команда.Картинка					= БиблиотекаКартинок.Комментарий;
				Команда.Действие					= "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
				Команда.ИзменяетСохраняемыеДанные	= Истина;
				Кнопка.ИмяКоманды	= ИмяКоманды;

				ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 1);
				ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
			КонецЕсли;

			// История изменений
			Если ВидКонтактнойИнформации.ХранитьИсториюИзменений И Не ВидКонтактнойИнформации.ПометкаУдаления Тогда
				ИмяКоманды	= "КонтекстноеМенюПодменюИстория" + ИмяРеквизита;
				Кнопка				= Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаПодменю);
				Кнопка.Заголовок	= "История изменений...";
				Команда								= Форма.Команды.Добавить(ИмяКоманды);
				Команда.Картинка					= БиблиотекаКартинок.ИсторияИзменений;
				Команда.Подсказка					= "Показывает историю изменения контактной информации";
				Команда.Действие					= "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
				Команда.ИзменяетСохраняемыеДанные	= Ложь;
				Кнопка.ИмяКоманды	= ИмяКоманды;

				ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 1);
				ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
			КонецЕсли;

			// Устанавливаем свойства поля ввода.
			ГруппаРазделитель		= Форма.Элементы.Добавить("ПодменюРазделительАдрес" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаПодменю);
			ГруппаРазделитель.Вид	= ВидГруппыФормы.ГруппаКнопок;

			ИмяКоманды	= "КартаЯндексМеню" + ИмяРеквизита;
			Кнопка				= Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаРазделитель);
			Кнопка.Заголовок	= "Адрес на Яндекс.Картах";
			Команда				= Форма.Команды.Добавить(ИмяКоманды);
			Команда.Картинка	= БиблиотекаКартинок.ЯндексКарты;
			Команда.Подсказка	= "Показывает адрес на картах Яндекс.Карты";
			Команда.Действие	= "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
			Кнопка.ИмяКоманды	= ИмяКоманды;

			ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 1);
			ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);

			ИмяКоманды	= "КартаGoogleМеню" + ИмяРеквизита;
			Кнопка				= Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаРазделитель);
			Кнопка.Заголовок	= "Адрес на Google Maps";
			Команда				= Форма.Команды.Добавить(ИмяКоманды);
			Команда.Картинка	= БиблиотекаКартинок.GoogleMaps;
			Команда.Подсказка	= "Показывает адрес на карте Google Maps";
			Команда.Действие	= "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
			Кнопка.ИмяКоманды	= ИмяКоманды;

			ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 1);
			ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);

			Если Не ВидКонтактнойИнформации.ПометкаУдаления Тогда
				ГруппаРазделитель		= Форма.Элементы.Добавить("ПодменюРазделитель" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаРазделитель);
				ГруппаРазделитель.Вид	= ВидГруппыФормы.ГруппаКнопок;

				ГруппаПодменюАдреса				= Форма.Элементы.Добавить("ПодменюКопироватьАдреса" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаРазделитель);
				ГруппаПодменюАдреса.Вид			= ВидГруппыФормы.Подменю;
				ГруппаПодменюАдреса.Отображение	= ОтображениеКнопки.Текст;
				ГруппаПодменюАдреса.Заголовок	= "Заполнить";
			КонецЕсли;
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			Элемент.Заголовок	= "Написать письмо";
			Команда.Подсказка	= "Написать письмо";
			Команда.Картинка	= БиблиотекаКартинок.ОтправитьЭлектронноеПисьмо;
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			Элемент.Заголовок	= "Перейти";
			Команда.Подсказка	= "Перейти по ссылке";
			Команда.Картинка	= БиблиотекаКартинок.КонтактнаяИнформацияПерейтиПоСсылке;
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			Если Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения].МожноОтправлятьSMS Тогда
				Элемент.Заголовок	= "Позвонить или отправить SMS";
				Команда.Подсказка	= "Позвонить или отправить SMS";
				Команда.Картинка	= БиблиотекаКартинок.ПозвонитьИлиОтправитьSMS;
			Иначе
				Элемент.Заголовок	= "Позвонить";
				Команда.Подсказка	= "Позвонить по телефону";
				Команда.Картинка	= БиблиотекаКартинок.Позвонить;
			КонецЕсли;
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Skype Тогда
			Элемент.Заголовок	= "Skype";
			Команда.Подсказка	= "Skype";
			Команда.Картинка	= БиблиотекаКартинок.Skype;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция УКИ_СоздатьПолеВвода(Форма, Родитель, ИнформацияОВидеКИ, ИмяРеквизита, ИмяЭлементаДляРазмещения,ЭтоНовыйВидКИ = Ложь, ОбязательноеЗаполнение = Ложь)
	ПараметрыКонтактнойИнформации	= УКИ_ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	ОбработкаНавигационнойСсылки	= ПараметрыКонтактнойИнформации.ОбработкаНавигационнойСсылки;

	ЗаголовокСлева		= УКИ_ЗаголовокСлева(ПараметрыКонтактнойИнформации.ПоложениеЗаголовка);
	Элемент				= Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Родитель); // ПолеФормы, РасширениеПоляФормыДляПоляВвода, РасширениеПоляФормыДляПоляНадписи
	Элемент.ПутьКДанным	= ИмяРеквизита;

	Если ИнформацияОВидеКИ.ВидРедактирования = "Диалог" И ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			Элемент.Вид			= ВидПоляФормы.ПолеНадписи;
			Элемент.Гиперссылка	= Истина;
			Элемент.УстановитьДействие("Нажатие", "Подключаемый_КонтактнаяИнформацияПриНажатии");
			Если ПустаяСтрока(Форма[ИмяРеквизита]) Тогда
				Форма[ИмяРеквизита] = "Заполнить";
			КонецЕсли;
	ИначеЕсли ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница И ОбработкаНавигационнойСсылки Тогда
		Элемент.Вид = ВидПоляФормы.ПолеНадписи;
		Элемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_КонтактнаяИнформацияОбработкаНавигационнойСсылки");

		Если ТипЗнч(ИнформацияОВидеКИ) <> Тип("Структура") И ТипЗнч(ИнформацияОВидеКИ.Значение) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(ИнформацияОВидеКИ.Значение), "{") Тогда
			КонтактнаяИнформация	= сУКИ_JSONВКонтактнуюИнформациюПоПолям(ИнформацияОВидеКИ.Значение, Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
			АдресСайта				= КонтактнаяИнформация.value;
			Представление			= ?(КонтактнаяИнформация.Свойство("name") И ЗначениеЗаполнено(КонтактнаяИнформация.name), КонтактнаяИнформация.name, ИнформацияОВидеКИ.Представление);
		Иначе
			АдресСайта				= "";
			Представление			= "Заполнить";
		КонецЕсли;

		Форма[ИмяРеквизита] = КонтактнаяИнформацияКлиентСервер.УКИ_АдресСайта(Представление, АдресСайта, Форма.ТолькоПросмотр);
	Иначе
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Если ИнформацияОВидеКИ.ВидРедактирования = "Диалог" И ИнформацияОВидеКИ.Тип <> Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			Элемент.РедактированиеТекста = Ложь;
		КонецЕсли;

		Элемент.УстановитьДействие("Очистка", "Подключаемый_КонтактнаяИнформацияОчистка");

		Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			Элемент.УстановитьДействие("Автоподбор",      "Подключаемый_КонтактнаяИнформацияАвтоподбор");
			Элемент.УстановитьДействие("ОбработкаВыбора", "Подключаемый_КонтактнаяИнформацияОбработкаВыбора");
		КонецЕсли;
		Если БазоваяПодсистемаСервер.ОН_ЭтоМобильныйКлиент() Тогда
			Элемент.МногострочныйРежим = Истина;
		КонецЕсли;
	КонецЕсли;

	Элемент.ОтображениеПодсказки		= ОтображениеПодсказки.ОтображатьСнизу;
	Элемент.РастягиватьПоГоризонтали	= Ложь;
	Элемент.РастягиватьПоВертикали		= Ложь;

	Элемент.ВысотаЗаголовка = ?(БазоваяПодсистемаСервер.ОН_ЭтоМобильныйКлиент(), 1, 2);

	Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Если ИнформацияОВидеКИ.ВидРедактирования = "ПолеВвода" Тогда
			Элемент.Ширина = 72;
		Иначе
			Элемент.Ширина = 70;
		КонецЕсли;
	ИначеЕсли ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Или ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Если ИнформацияОВидеКИ.ВводитьНомерПоМаске Тогда
			Если ПустаяСтрока(Форма[ИмяРеквизита]) Тогда
				Элемент.Маска = ИнформацияОВидеКИ.МаскаНомераТелефона;
			КонецЕсли;

			ТаблицаКонтактнойИнформации	= Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
			НайденныеСтроки				= ТаблицаКонтактнойИнформации.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденныеСтроки[0].Маска = ИнформацияОВидеКИ.МаскаНомераТелефона;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Если ИнформацияОВидеКИ.ВидПоляДругое = "МногострочноеШирокое" Тогда
			Элемент.Высота				= 3;
			Элемент.Ширина				= 70;
			Элемент.МногострочныйРежим	= Истина;
		ИначеЕсли ИнформацияОВидеКИ.ВидПоляДругое = "ОднострочноеШирокое" Тогда
			Элемент.Высота				= 1;
			Элемент.Ширина				= 70;
			Элемент.МногострочныйРежим	= Ложь;
		Иначе // ОднострочноеУзкое
			Элемент.Высота				= 1;
			Элемент.Ширина				= 35;
			Элемент.МногострочныйРежим	= Ложь;
		КонецЕсли;
	Иначе
		Элемент.Ширина = 35;
	КонецЕсли;

	Если Не ЭтоНовыйВидКИ Тогда
		Элемент.ГоризонтальноеПоложениеВГруппе	= ГоризонтальноеПоложениеЭлемента.Право;
		Элемент.ЦветТекстаЗаголовка				= ЦветаСтиля.ЦветФонаФормы;
	КонецЕсли;

	Элемент.ПоложениеЗаголовка = ?(ЗаголовокСлева, ПоложениеЗаголовкаЭлементаФормы.Лево, ПоложениеЗаголовкаЭлементаФормы.Верх);
	Если ЗаголовокСлева Тогда
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	Иначе
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	КонецЕсли;

	ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяРеквизита, 2, Ложь);

	// Устанавливаем свойства поля ввода.
	Если ИнформацияОВидеКИ.Тип <> Перечисления.ТипыКонтактнойИнформации.Другое И Не ИнформацияОВидеКИ.ПометкаУдаления Тогда
		// Ввод комментария через контекстное меню.
		ИмяКоманды 	= "КонтекстноеМеню" + ИмяРеквизита;
		Кнопка				= Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
		Кнопка.Заголовок	= "Ввести комментарий";
		Команда								= Форма.Команды.Добавить(ИмяКоманды);
		Команда.Подсказка					= "Ввести комментарий";
		Команда.Картинка					= БиблиотекаКартинок.Комментарий;
		Команда.Действие					= "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Команда.ИзменяетСохраняемыеДанные	= Истина;
		Кнопка.ИмяКоманды	= ИмяКоманды;

		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 1);
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
	КонецЕсли;

	Если ИнформацияОВидеКИ.ХранитьИсториюИзменений И Не ИнформацияОВидеКИ.ПометкаУдаления Тогда
		// Вывод истории контактной информации через контекстное меню.
		ИмяКоманды	= "КонтекстноеМенюИстория" + ИмяРеквизита;
		Кнопка				= Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
		Кнопка.Заголовок	= "История изменений...";
		Команда								= Форма.Команды.Добавить(ИмяКоманды);
		Команда.Картинка					= БиблиотекаКартинок.ИсторияИзменений;
		Команда.Подсказка					= "Показывает историю изменения контактной информации";
		Команда.Действие					= "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Команда.ИзменяетСохраняемыеДанные	= Ложь;
		Кнопка.ИмяКоманды	= ИмяКоманды;

		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 1);
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
	КонецЕсли;

	Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ГруппаРазделительКарты		= Форма.Элементы.Добавить("ПодменюРазделительКонтекстКарты" + ИмяРеквизита, Тип("ГруппаФормы"), Элемент.КонтекстноеМеню);
		ГруппаРазделительКарты.Вид	= ВидГруппыФормы.ГруппаКнопок;

		ИмяКоманды			= "КонтекстноеМенюКартаЯндекс" + ИмяРеквизита;
		Кнопка				= Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаРазделительКарты);
		Кнопка.Заголовок	= "Адрес на Яндекс.Картах";
		Команда				= Форма.Команды.Добавить(ИмяКоманды);
		Команда.Картинка	= БиблиотекаКартинок.ЯндексКарты;
		Команда.Подсказка	= "Показывает адрес на картах Яндекс.Карты";
		Команда.Действие	= "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Кнопка.ИмяКоманды	= ИмяКоманды;

		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 1);
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);

		ИмяКоманды	= "КонтекстноеМенюКартаGoogle" + ИмяРеквизита;
		Кнопка				= Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаРазделительКарты);
		Кнопка.Заголовок	= "Адрес на Google Maps";
		Команда				= Форма.Команды.Добавить(ИмяКоманды);
		Команда.Картинка	= БиблиотекаКартинок.GoogleMaps;
		Команда.Подсказка	= "Показывает адрес на карте Google Maps";
		Команда.Действие	= "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Кнопка.ИмяКоманды	= ИмяКоманды;

		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 1);
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);

		ГруппКнопокРазделитель		= Форма.Элементы.Добавить("ПодменюРазделительКарты" + ИмяРеквизита, Тип("ГруппаФормы"), Элемент.КонтекстноеМеню);
		ГруппКнопокРазделитель.Вид	= ВидГруппыФормы.ГруппаКнопок;

		Если Не ИнформацияОВидеКИ.ПометкаУдаления Тогда
			// Заполнить
			ГруппаПодменюАдреса				= Форма.Элементы.Добавить("КонтекстноеПодменюКопироватьАдреса" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппКнопокРазделитель);
			ГруппаПодменюАдреса.Вид			= ВидГруппыФормы.Подменю;
			ГруппаПодменюАдреса.Отображение	= ОтображениеКнопки.Текст;
			ГруппаПодменюАдреса.Заголовок	= "Заполнить";
		КонецЕсли;
	КонецЕсли;

	Если ОбязательноеЗаполнение И ЭтоНовыйВидКИ И Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
		Элемент.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;

	// Редактирование в диалоге
	Если УКИ_ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(ИнформацияОВидеКИ.Тип) И Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
		ДоступенВыбор = Не ИнформацияОВидеКИ.ПометкаУдаления И ИнформацияОВидеКИ.ВидРедактирования <> "ПолеВвода";

		Если ДоступенВыбор И Не Форма.ТолькоПросмотр Тогда
			Элемент.КнопкаВыбора = Истина;
			Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
		Иначе
			Элемент.КнопкаВыбора   = Ложь;
			Если ЗначениеЗаполнено(Форма[ИмяРеквизита]) Тогда
				Элемент.КнопкаОткрытия = Истина;
				Элемент.УстановитьДействие("Открытие", "Подключаемый_КонтактнаяИнформацияПриНажатии");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");

	Если ИнформацияОВидеКИ.ПометкаУдаления Тогда
		Элемент.ШрифтЗаголовка = ШрифтыСтиля.ЗаголовокУдаленногоРеквизитаШрифт;
		Если Не ИнформацияОВидеКИ.ВидРедактирования = "Диалог" Тогда
			Элемент.КнопкаОчистки        = Истина;
			Элемент.РедактированиеТекста = Ложь;
		Иначе
			Элемент.ТолькоПросмотр       = Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Элемент;
КонецФункции

Функция УКИ_ЗаголовокСлева(Знач ПоложениеЗаголовкаКИ = Неопределено)
	Если ЗначениеЗаполнено(ПоложениеЗаголовкаКИ) Тогда
		ПоложениеЗаголовкаКИ = ПредопределенноеЗначение(ПоложениеЗаголовкаКИ);
	Иначе
		ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Лево;
	КонецЕсли;

	Возврат (ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Лево);
КонецФункции

Функция УКИ_Группа(ИмяГруппы, Форма, Заголовок, ИмяЭлементаДляРазмещения)
	Группа = Форма.Элементы.Найти(ИмяГруппы);

	Если Группа = Неопределено Тогда
		Родитель = ?(ПустаяСтрока(ИмяЭлементаДляРазмещения), Форма, Форма.Элементы[ИмяЭлементаДляРазмещения]);
		Если БазоваяПодсистемаСервер.ОН_ЭтоМобильныйКлиент() Тогда
			Родитель.ШрифтЗаголовка = ШрифтыСтиля.ВажнаяНадписьШрифт;
		КонецЕсли;
		Группа								= Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
		Группа.Вид							= ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Заголовок					= Заголовок;
		Группа.ОтображатьЗаголовок			= Ложь;
		Группа.РазрешитьИзменениеСостава	= Ложь;
		Группа.Отображение					= ОтображениеОбычнойГруппы.Нет;
		Группа.Группировка					= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ПараметрыКонтактнойИнформации		= УКИ_ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяГруппы, 5);
	КонецЕсли;

	Возврат Группа;
КонецФункции

Функция УКИ_ОпределитьСледующуюСтроку(Форма, КонтактнаяИнформация, СтрокаКИ)
	Позиция = КонтактнаяИнформация.Индекс(СтрокаКИ) + 1;
	Пока Позиция < КонтактнаяИнформация.Количество() Цикл
		СледующаяСтрока = КонтактнаяИнформация.Получить(Позиция);
		Если СледующаяСтрока = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если Форма.Элементы.Найти(СледующаяСтрока.ИмяРеквизита) <> Неопределено Тогда
			Возврат СледующаяСтрока;
		КонецЕсли;
		Позиция = Позиция + 1;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

Процедура УКИ_ПодготовитьСтатическийЭлемент(Форма, СтрокаКИ, СозданныеЭлементы, ИндексЭлемента)
	СозданныеЭлементы.Удалить(ИндексЭлемента);

	Если Форма.ТолькоПросмотр Тогда
		ЭлементНаФорме = Форма.Элементы[СтрокаКИ.ИмяРеквизита];
		Если ЭлементНаФорме.Вид = ВидПоляФормы.ПолеВвода Тогда
			Если УКИ_ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(СтрокаКИ.Тип) Тогда
				ЭлементНаФорме.КнопкаВыбора = Ложь;
				Если ЗначениеЗаполнено(Форма[СтрокаКИ.ИмяРеквизита]) Тогда
					ЭлементНаФорме.КнопкаОткрытия = Истина;
					ЭлементНаФорме.УстановитьДействие("Открытие", "Подключаемый_КонтактнаяИнформацияПриНажатии");
				КонецЕсли;
			Иначе
				ЭлементНаФорме.ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура УКИ_СоздатьРеквизитыКонтактнойИнформации(Знач Форма, Знач ДобавляемыеРеквизиты, Знач ИмяОбъекта, Знач ИсключаемыеВиды, Знач КонтактнаяИнформация, Знач ОтложеннаяИнициализация, Знач ОбработкаНавигационнойСсылки)
	Строка1500           = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1500));
	ФорматированнаяСтрока = Новый ОписаниеТипов("ФорматированнаяСтрока");

	СозданныеРеквизиты = БазоваяПодсистемаСервер.ОН_СкопироватьРекурсивно(ИсключаемыеВиды);
	ПредыдущийВид      = Неопределено;
	ПорядковыйНомер    = 1;

	Для Каждого ОбъектКонтактнойИнформации Из КонтактнаяИнформация Цикл
		Если ОбъектКонтактнойИнформации.ПометкаУдаления И ПустаяСтрока(ОбъектКонтактнойИнформации.Значение) Тогда
			Продолжить;
		КонецЕсли;

		Если ОбъектКонтактнойИнформации.ЭтоРеквизитТабличнойЧасти Тогда
			ИмяВидаКИ			= ОбъектКонтактнойИнформации.ИмяПредопределенногоВида;
			Позиция				= СтрНайти(ИмяВидаКИ, ИмяОбъекта);
			ИмяТабличнойЧасти	= Сред(ИмяВидаКИ, Позиция + СтрДлина(ИмяОбъекта));

			ПредыдущийВид	= Неопределено;
			ИмяРеквизита	= "";

			ОбъектКонтактнойИнформации.Строки.Сортировать("РеквизитДопУпорядочивания");
			Для Каждого СтрокаКИ Из ОбъектКонтактнойИнформации.Строки Цикл
				ТекущийВид = СтрокаКИ.Вид;
				Если ТекущийВид <> ПредыдущийВид Тогда
					ИмяРеквизита	= "КонтактнаяИнформацияПоле" + ИмяТабличнойЧасти + СтрЗаменить(ТекущийВид.УникальныйИдентификатор(), "-", "x") + ОбъектКонтактнойИнформации.Строки.Индекс(СтрокаКИ);
					ПутьРеквизитов	= "Объект." + ИмяТабличнойЧасти;

					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, Строка1500, ПутьРеквизитов, СтрокаКИ.Наименование, Истина));
					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита + "Значение", Новый ОписаниеТипов("Строка"), ПутьРеквизитов,, Истина));
					ПредыдущийВид = ТекущийВид;
				КонецЕсли;

				СтрокаКИ.ИмяРеквизита = ИмяРеквизита;
			КонецЦикла;
		Иначе
			Если ОбъектКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация Тогда
				УКИ_СкорректироватьКонтактнуюИнформацию(Форма, ОбъектКонтактнойИнформации);

				Продолжить;
			КонецЕсли;

			ТекущийВид = ОбъектКонтактнойИнформации.Вид;

			Если ТекущийВид <> ПредыдущийВид Тогда
				ПредыдущийВид	= ТекущийВид;
				ПорядковыйНомер	= 1;
			Иначе
				ПорядковыйНомер = ПорядковыйНомер + 1;
			КонецЕсли;

			Индекс = СозданныеРеквизиты.Найти(ТекущийВид);
			Если Индекс = Неопределено Тогда
				ОбъектКонтактнойИнформации.ИмяРеквизита = "КонтактнаяИнформацияПоле" + СтрЗаменить(ТекущийВид.УникальныйИдентификатор(), "-", "x") + ПорядковыйНомер;
				Если Не ОтложеннаяИнициализация Тогда
					ТипРеквизита = Строка1500;
					Если ОбъектКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница И ОбработкаНавигационнойСсылки Тогда
						ТипРеквизита = ФорматированнаяСтрока;
					КонецЕсли;

					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ОбъектКонтактнойИнформации.ИмяРеквизита, ТипРеквизита,, ОбъектКонтактнойИнформации.Наименование, Истина));
				КонецЕсли;
			Иначе
				ОбъектКонтактнойИнформации.ИмяРеквизита = "КонтактнаяИнформацияПоле" + ОбъектКонтактнойИнформации.ИмяПредопределенногоВида;
				СозданныеРеквизиты.Удалить(Индекс);
			КонецЕсли;

			УКИ_СкорректироватьКонтактнуюИнформацию(Форма, ОбъектКонтактнойИнформации);
		КонецЕсли;
	КонецЦикла;

	// Добавим новые реквизиты
	Если ДобавляемыеРеквизиты.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
КонецПроцедуры

Процедура УКИ_СоздатьЭлементыТабличнойЧасти(Знач Форма, Знач ИмяОбъекта, ИмяЭлементаДляРазмещения, Знач СтрокаКонтактнойИнформации, Знач ДанныеВидаКонтактнойИнформации)
	ВидыКонтактнойИнформацииТЧ = Новый Массив;
	Для Каждого СтрокаТабличнойЧасти Из СтрокаКонтактнойИнформации.Строки Цикл
		ВидыКонтактнойИнформацииТЧ.Добавить(СтрокаТабличнойЧасти.Вид);
	КонецЦикла;
	ДанныеВидовКонтактнойИнформацииТЧ = сУКИ_ДанныеВидовКонтактнойИнформации(ВидыКонтактнойИнформацииТЧ);

	ИмяВидаКонтактнойИнформации = ДанныеВидаКонтактнойИнформации.ИмяПредопределенногоВида;
	Если ПустаяСтрока(ИмяВидаКонтактнойИнформации) Тогда
		ИмяВидаКонтактнойИнформации = ДанныеВидаКонтактнойИнформации.ИмяПредопределенныхДанных;
	КонецЕсли;
	Позиция				= СтрНайти(ИмяВидаКонтактнойИнформации, ИмяОбъекта);
	ИмяТабличнойЧасти	= Сред(ИмяВидаКонтактнойИнформации, Позиция + СтрДлина(ИмяОбъекта));
	ПредыдущийВидТЧ		= Неопределено;

	Для Каждого СтрокаТабличнойЧасти Из СтрокаКонтактнойИнформации.Строки Цикл
		ВидКонтактнойИнформацииТЧ = СтрокаТабличнойЧасти.Вид;
		Если ВидКонтактнойИнформацииТЧ <> ПредыдущийВидТЧ Тогда
			ГруппаТабличнойЧасти = Форма.Элементы[ИмяТабличнойЧасти + "ГруппаКонтактнаяИнформация"];

			Элемент				= Форма.Элементы.Добавить(СтрокаТабличнойЧасти.ИмяРеквизита, Тип("ПолеФормы"), ГруппаТабличнойЧасти);
			Элемент.Вид			= ВидПоляФормы.ПолеВвода;
			Элемент.ПутьКДанным	= "Объект." + ИмяТабличнойЧасти + "." + СтрокаТабличнойЧасти.ИмяРеквизита;

			Если УКИ_ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(СтрокаТабличнойЧасти.Тип) Тогда
				Элемент.КнопкаВыбора = Не СтрокаТабличнойЧасти.ПометкаУдаления;
				Если ВидКонтактнойИнформацииТЧ.ВидРедактирования = "Диалог" Тогда
					Элемент.РедактированиеТекста = Ложь;
				КонецЕсли;

				Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
			КонецЕсли;
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");

			Если СтрокаТабличнойЧасти.ПометкаУдаления Тогда
				Элемент.Шрифт					= ШрифтыСтиля.ЗаголовокУдаленногоРеквизитаШрифт;
				Элемент.РедактированиеТекста	= Ложь;
			КонецЕсли;

			Если ВидКонтактнойИнформацииТЧ.ОбязательноеЗаполнение Тогда
				Элемент.АвтоОтметкаНезаполненного = Не СтрокаТабличнойЧасти.ПометкаУдаления;
			КонецЕсли;

			ПараметрыКонтактнойИнформацииЭлемента = Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения]; // см. ПараметрыВыводаКонтактнойИнформации
			ПараметрыКонтактнойИнформацииЭлемента.ДобавленныеЭлементы.Добавить(СтрокаТабличнойЧасти.ИмяРеквизита, 2, Ложь);

			УКИ_ДобавитьРеквизитВОписание(Форма, СтрокаТабличнойЧасти, ДанныеВидовКонтактнойИнформацииТЧ, Ложь, Истина,, ИмяЭлементаДляРазмещения);
			ПредыдущийВидТЧ = ВидКонтактнойИнформацииТЧ;
		КонецЕсли;

		Отбор = Новый Структура;
		Отбор.Вставить("ИдентификаторСтрокиТабличнойЧасти", СтрокаТабличнойЧасти.ИдентификаторСтрокиТабличнойЧасти);

		СтрокиТаблицы = Форма.Объект[ИмяТабличнойЧасти].НайтиСтроки(Отбор);

		Если СтрокиТаблицы.Количество() = 1 Тогда
			СтрокаТаблицы = СтрокиТаблицы[0];
			СтрокаТаблицы[СтрокаТабличнойЧасти.ИмяРеквизита]                   = СтрокаТабличнойЧасти.Представление;
			СтрокаТаблицы[СтрокаТабличнойЧасти.ИмяРеквизита + "Значение"]      = СтрокаТабличнойЧасти.Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УКИ_ДобавитьРеквизитВОписание(Форма, СтрокаКонтактнойИнформации, ДанныеВидаКонтактнойИнформации, ЭтоНовыйВидКИ,
	ЭтоРеквизитТабличнойЧасти = Ложь, ЗаполнятьЗначениеРеквизита = Истина, ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация")

	ТаблицаОписанияДополнительныхРеквизитов	= Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	НоваяСтрока								= ТаблицаОписанияДополнительныхРеквизитов.Добавить();
	НоваяСтрока.ИмяРеквизита				= СтрокаКонтактнойИнформации.ИмяРеквизита;
	НоваяСтрока.Вид							= СтрокаКонтактнойИнформации.Вид;
	НоваяСтрока.Тип							= СтрокаКонтактнойИнформации.Тип;
	НоваяСтрока.ИмяЭлементаДляРазмещения	= ИмяЭлементаДляРазмещения;
	НоваяСтрока.ЭтоРеквизитТабличнойЧасти	= ЭтоРеквизитТабличнойЧасти;

	Если НоваяСтрока.Свойство("ЭтоИсторическаяКонтактнаяИнформация") Тогда
		НоваяСтрока.ЭтоИсторическаяКонтактнаяИнформация = СтрокаКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация;
	КонецЕсли;

	Если НоваяСтрока.Свойство("ДействуетС") Тогда
		НоваяСтрока.ДействуетС = СтрокаКонтактнойИнформации.ДействуетС;
	КонецЕсли;

	Если НоваяСтрока.Свойство("ХранитьИсториюИзменений") Тогда
		НоваяСтрока.ХранитьИсториюИзменений = СтрокаКонтактнойИнформации.ХранитьИсториюИзменений;
	КонецЕсли;

	Если НоваяСтрока.Свойство("МеждународныйФорматАдреса") Тогда
		НоваяСтрока.МеждународныйФорматАдреса = СтрокаКонтактнойИнформации.МеждународныйФорматАдреса;
	КонецЕсли;

	НоваяСтрока.Значение      = СтрокаКонтактнойИнформации.Значение;
	НоваяСтрока.Представление = СтрокаКонтактнойИнформации.Представление;
	НоваяСтрока.Комментарий   = СтрокаКонтактнойИнформации.Комментарий;

	Если ЗаполнятьЗначениеРеквизита И Не ЭтоРеквизитТабличнойЧасти Тогда
		Если Форма.Элементы.Найти(СтрокаКонтактнойИнформации.ИмяРеквизита) <> Неопределено И Форма.Элементы[СтрокаКонтактнойИнформации.ИмяРеквизита].Вид = ВидПоляФормы.ПолеНадписи Тогда
			ЭтоПолеНадписи = Истина;
		Иначе
			ЭтоПолеНадписи = Ложь;
		КонецЕсли;

		Если СтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес И (СтрокаКонтактнойИнформации.ВидРедактирования = "Диалог" ИЛИ ЭтоПолеНадписи) И ПустаяСтрока(СтрокаКонтактнойИнформации.Представление) Тогда
			Форма[СтрокаКонтактнойИнформации.ИмяРеквизита] = "Заполнить";
		Иначе
			Форма[СтрокаКонтактнойИнформации.ИмяРеквизита] = СтрокаКонтактнойИнформации.Представление;
		КонецЕсли;
	КонецЕсли;

	ДанныеВидаКонтактнойИнформации.Вставить("Ссылка", СтрокаКонтактнойИнформации.Вид);

	Если ЭтоНовыйВидКИ И ДанныеВидаКонтактнойИнформации.РазрешитьВводНесколькихЗначений И Не ЭтоРеквизитТабличнойЧасти И Не ДанныеВидаКонтактнойИнформации.ПометкаУдаления Тогда
		ПараметрыКонтактнойИнформации	= УКИ_ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
		Вид								= СтрокаКонтактнойИнформации.Вид; // СправочникСсылка.ВидыКонтактнойИнформации
		ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов.Добавить(ДанныеВидаКонтактнойИнформации, Строка(Вид));
	КонецЕсли;
КонецПроцедуры

Функция УКИ_ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(Тип)
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Процедура УКИ_СкорректироватьКонтактнуюИнформацию(Форма, СтрокаКИ)
	РезультатПреобразования = Новый Структура;

	Если ПустаяСтрока(СтрокаКИ.Значение) Тогда
		Если ПустаяСтрока(СтрокаКИ.Представление) И ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) Тогда
			СтрокаКИ.Представление = сУКИ_ПредставлениеКонтактнойИнформации(СтрокаКИ.ЗначенияПолей);
		КонецЕсли;

		Результат				= сУКИ_КонтактнаяИнформацияИзXML(СтрокаКИ.ЗначенияПолей, СтрокаКИ.Вид, РезультатПреобразования, СтрокаКИ.Представление);
		СтрокаКИ.Комментарий	= ?(ЗначениеЗаполнено(Результат.Комментарий), Результат.Комментарий, "");

		Если РезультатПреобразования.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		Если Не РезультатПреобразования.Свойство("СведенияИсправлены") ИЛИ РезультатПреобразования.СведенияИсправлены = Ложь Тогда
			Возврат;
		КонецЕсли;

		Если РезультатПреобразования.СведенияИсправлены Тогда
			СтрокаКИ.ЗначенияПолей = сУКИ_КонтактнаяИнформацияXDTOВXML(Результат);
		КонецЕсли;

		Если РезультатПреобразования.Свойство("ТекстОшибки") Тогда
			БазоваяПодсистемаСервер.ОН_СообщитьПользователю(РезультатПреобразования.ТекстОшибки, , СтрокаКИ.ИмяРеквизита);
		КонецЕсли;

		Форма.Модифицированность = Истина;
	Иначе
		СтрокаКИ.Комментарий = УКИ_КомментарийКонтактнойИнформации(СтрокаКИ.Значение);

		Если ПустаяСтрока(СтрокаКИ.Представление) Тогда
			СтрокаКИ.Представление = сУКИ_ПредставлениеКонтактнойИнформации(СтрокаКИ.Значение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция УКИ_КомментарийКонтактнойИнформации(КонтактнаяИнформация) Экспорт
	Если ПустаяСтрока(КонтактнаяИнформация) Тогда
		Возврат "";
	КонецЕсли;

	Если ТипЗнч(КонтактнаяИнформация) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(КонтактнаяИнформация), "<") Тогда
		КонтактнаяИнформацияСтруктурой	= сУКИ_КонтактнаяИнформацияВСтруктуруJSON(КонтактнаяИнформация);
	ИначеЕсли  ТипЗнч(КонтактнаяИнформация) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(КонтактнаяИнформация), "{") Тогда
		КонтактнаяИнформацияСтруктурой	= сУКИ_СтрокуJSONВСтруктуру(КонтактнаяИнформация);
	Иначе
		КонтактнаяИнформацияВXML		= УКИ_КонтактнаяИнформацияВXML(КонтактнаяИнформация);
		КонтактнаяИнформацияСтруктурой	= сУКИ_КонтактнаяИнформацияВСтруктуруJSON(КонтактнаяИнформацияВXML);
	КонецЕсли;

	Если КонтактнаяИнформацияСтруктурой.Свойство("Comment") Тогда
		Возврат КонтактнаяИнформацияСтруктурой.Comment;
	КонецЕсли;

	Возврат "";
КонецФункции

Процедура УКИ_КонвертацияКонтактнойИнформацииВJSON(КонтактнаяИнформация)
	// Конвертация
	Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
		Если ПустаяСтрока(СтрокаКИ.Значение) Тогда
			Если ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) Тогда
				КонтактнаяИнформацияПоПолям	= сУКИ_КонтактнаяИнформацияВСтруктуруJSON(СтрокаКИ.ЗначенияПолей, СтрокаКИ.Тип, СтрокаКИ.Представление, Ложь);
				СтрокаКИ.Значение			= сУКИ_СтруктураВСтрокуJSON(КонтактнаяИнформацияПоПолям);
			ИначеЕсли ЗначениеЗаполнено(СтрокаКИ.Представление) Тогда
				СтрокаКИ.Значение			= сУКИ_СтруктураВСтрокуJSON(сУКИ_КонтактнаяИнформацияПоПредставлению(СтрокаКИ.Представление, СтрокаКИ.Тип));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция УКИ_СформироватьТекстЗапроса(Знач ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти, Знач ТекстЗапросаИсторическаяИнформация, Знач ЭтоОсновнойЯзык)
	ТекстЗапроса = "ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление               КАК Представление,
	|	КонтактнаяИнформация.Значение                    КАК Значение,
	|	КонтактнаяИнформация.ЗначенияПолей               КАК ЗначенияПолей,
	|	КонтактнаяИнформация.НомерСтроки                 КАК НомерСтроки,
	|	&ДействуетС                                      КАК ДействуетС,
	|	&ЭтоИсторическаяКонтактнаяИнформация             КАК ЭтоИсторическаяКонтактнаяИнформация,
	|	КонтактнаяИнформация.Вид                         КАК Вид,
	|	&ИдентификаторСтрокиТабличнойЧасти               КАК ИдентификаторСтрокиТабличнойЧасти
	|ПОМЕСТИТЬ
	|	КонтактнаяИнформация
	|ИЗ
	|	&ТаблицаКонтактнойИнформации КАК КонтактнаяИнформация
	|ИНДЕКСИРОВАТЬ ПО
	|	Вид
	|;////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка                       КАК Вид,
	|ВЫБОР
	|	КОГДА ВидыКонтактнойИнформации.ИмяПредопределенногоВида <> """"
	|	ТОГДА ВидыКонтактнойИнформации.ИмяПредопределенногоВида
	|	ИНАЧЕ ВидыКонтактнойИнформации.ИмяПредопределенныхДанных
	|КОНЕЦ КАК ИмяПредопределенногоВида,
	|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	ВидыКонтактнойИнформации.Тип                          КАК Тип,
	|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение       КАК ОбязательноеЗаполнение,
	|	ВидыКонтактнойИнформации.ВидПоляДругое                КАК ВидПоляДругое,
	|	ВидыКонтактнойИнформации.РазрешитьВводНесколькихЗначений КАК РазрешитьВводНесколькихЗначений,
	|	ВидыКонтактнойИнформации.Наименование КАК Наименование,
	|	ВидыКонтактнойИнформации.ХранитьИсториюИзменений      КАК ХранитьИсториюИзменений,
	|	ВидыКонтактнойИнформации.ВидРедактирования            КАК ВидРедактирования,
	|	ВидыКонтактнойИнформации.ЭтоГруппа                    КАК ЭтоРеквизитТабличнойЧасти,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания    КАК РеквизитДопУпорядочивания,
	|	ВидыКонтактнойИнформации.МеждународныйФорматАдреса    КАК МеждународныйФорматАдреса,
	|	ВидыКонтактнойИнформации.ВводитьНомерПоМаске  КАК ВводитьНомерПоМаске,
	|	ВидыКонтактнойИнформации.МаскаНомераТелефона    КАК МаскаНомераТелефона,
	|	ЕСТЬNULL(КонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация, ЛОЖЬ)    КАК ЭтоИсторическаяКонтактнаяИнформация,
	|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """")    КАК Представление,
	|	ЕСТЬNULL(КонтактнаяИнформация.ЗначенияПолей, """")    КАК ЗначенияПолей,
	|	ЕСТЬNULL(КонтактнаяИнформация.Значение, """")         КАК Значение,
	|	ЕСТЬNULL(КонтактнаяИнформация.ДействуетС, 0)          КАК ДействуетС,
	|	ЕСТЬNULL(КонтактнаяИнформация.НомерСтроки, 0)         КАК НомерСтроки,
	|	0 КАК ИдентификаторСтрокиТабличнойЧасти,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(200))                        КАК ИмяРеквизита,
	|	ВидыКонтактнойИнформации.ПометкаУдаления              КАК ПометкаУдаления,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА)                             КАК Комментарий
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	КонтактнаяИнформация КАК КонтактнаяИнформация
	|ПО
	|	ВидыКонтактнойИнформации.Ссылка = КонтактнаяИнформация.Вид
	|ГДЕ
	|	ВидыКонтактнойИнформации.Используется
	|	И ЕСТЬNULL(ВидыКонтактнойИнформации.Родитель.Используется, ИСТИНА)
	|	И (
	|		ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
	|		ИЛИ ВидыКонтактнойИнформации.Родитель.Родитель = &ГруппаВидовКИ)
	|	И ВидыКонтактнойИнформации.Ссылка НЕ В (&СкрываемыеВиды)
	|УПОРЯДОЧИТЬ ПО
	|	ВидыКонтактнойИнформации.Ссылка ИЕРАРХИЯ
	|";

	СуффиксТекущегоЯзыка = БазоваяПодсистемаСервер.ОН_СуффиксЯзыкаТекущегоПользователя();
	Если СуффиксТекущегоЯзыка <> Неопределено Тогда

	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВидыКонтактнойИнформации.Наименование КАК Наименование",
			"ВЫРАЗИТЬ(ЕСТЬNULL(ВидыКонтактнойИнформацииПредставления.Наименование, ВидыКонтактнойИнформации.Наименование) КАК СТРОКА(150)) КАК Наименование");

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГДЕ", "ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации.Представления КАК ВидыКонтактнойИнформацииПредставления
		|ПО ВидыКонтактнойИнформацииПредставления.Ссылка = ВидыКонтактнойИнформации.Ссылка
		|	И ВидыКонтактнойИнформацииПредставления.КодЯзыка = &КодЯзыка
		|ГДЕ");
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИдентификаторСтрокиТабличнойЧасти", ?(ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти, "ЕСТЬNULL(КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти, 0)", "0"));

	Если ТекстЗапросаИсторическаяИнформация Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДействуетС", "КонтактнаяИнформация.ДействуетС");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоИсторическаяКонтактнаяИнформация", "КонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДействуетС", "0");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоИсторическаяКонтактнаяИнформация", "ЛОЖЬ");
	КонецЕсли;

	Возврат ТекстЗапроса;
КонецФункции

Процедура УКИ_ПроверитьНаличиеРеквизитовКонтактнойИнформации(Форма, МассивДобавляемыхРеквизитов)
	СписокРеквизитовФормы = Форма.ПолучитьРеквизиты();

	СоздатьПараметрыКонтактнойИнформации	= Истина;
	СоздатьТаблицуКонтактнойИнформации		= Истина;
	Для Каждого Реквизит Из СписокРеквизитовФормы Цикл
		Если Реквизит.Имя = "ПараметрыКонтактнойИнформации" Тогда
			СоздатьПараметрыКонтактнойИнформации = Ложь;
		ИначеЕсли Реквизит.Имя = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов" Тогда
			СоздатьТаблицуКонтактнойИнформации = Ложь;
		КонецЕсли;
	КонецЦикла;

	Строка500	= Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
	ИмяОписания	= "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";

	Если СоздатьТаблицуКонтактнойИнформации Тогда
		// Создадим таблицу значений
		ИмяОписания = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания,							Новый ОписаниеТипов("ТаблицаЗначений")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяРеквизита",						Строка500, ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Вид",									Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Тип",									Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Значение",							Новый ОписаниеТипов("Строка"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Представление",						Строка500, ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Комментарий",							Новый ОписаниеТипов("Строка"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоРеквизитТабличнойЧасти",			Новый ОписаниеТипов("Булево"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоИсторическаяКонтактнаяИнформация",	Новый ОписаниеТипов("Булево"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ДействуетС",							Новый ОписаниеТипов("Дата"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ХранитьИсториюИзменений",				Новый ОписаниеТипов("Булево"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяЭлементаДляРазмещения",			Строка500, ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("МеждународныйФорматАдреса",			Новый ОписаниеТипов("Булево"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Маска",								Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)), ИмяОписания));
	Иначе
		РеквизитыТаблицы		= Форма.ПолучитьРеквизиты("КонтактнаяИнформацияОписаниеДополнительныхРеквизитов");
		РеквизитыДляСоздания	= Новый Соответствие;
		РеквизитыДляСоздания.Вставить("ИмяЭлементаДляРазмещения",            Истина);
		РеквизитыДляСоздания.Вставить("ХранитьИсториюИзменений",             Истина);
		РеквизитыДляСоздания.Вставить("ДействуетС",                          Истина);
		РеквизитыДляСоздания.Вставить("ЭтоИсторическаяКонтактнаяИнформация", Истина);
		РеквизитыДляСоздания.Вставить("Значение",                            Истина);
		РеквизитыДляСоздания.Вставить("МеждународныйФорматАдреса",           Истина);
		РеквизитыДляСоздания.Вставить("Маска",           Истина);

		Для Каждого Реквизит Из РеквизитыТаблицы Цикл
			Если РеквизитыДляСоздания[Реквизит.Имя] <> Неопределено Тогда
				РеквизитыДляСоздания[Реквизит.Имя] = Ложь;
			КонецЕсли;
		КонецЦикла;

		Если РеквизитыДляСоздания["Значение"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Значение", Новый ОписаниеТипов("Строка"), ИмяОписания));
		КонецЕсли;

		Если РеквизитыДляСоздания["МеждународныйФорматАдреса"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("МеждународныйФорматАдреса", Новый ОписаниеТипов("Булево"), ИмяОписания));
		КонецЕсли;

		Если РеквизитыДляСоздания["ИмяЭлементаДляРазмещения"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяЭлементаДляРазмещения", Строка500, ИмяОписания));
		КонецЕсли;

		Если РеквизитыДляСоздания["ХранитьИсториюИзменений"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ХранитьИсториюИзменений", Новый ОписаниеТипов("Булево"), ИмяОписания));
		КонецЕсли;

		Если РеквизитыДляСоздания["ДействуетС"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ДействуетС", Новый ОписаниеТипов("Дата"), ИмяОписания));
		КонецЕсли;

		Если РеквизитыДляСоздания["Маска"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Маска", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)), ИмяОписания));
		КонецЕсли;

		Если РеквизитыДляСоздания["ЭтоИсторическаяКонтактнаяИнформация"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоИсторическаяКонтактнаяИнформация", Новый ОписаниеТипов("Булево"), ИмяОписания));
		КонецЕсли;
	КонецЕсли;

	Если СоздатьПараметрыКонтактнойИнформации Тогда
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПараметрыКонтактнойИнформации", Новый ОписаниеТипов()));
	КонецЕсли;
КонецПроцедуры

Процедура УКИ_СкрытьКонтактнуюИнформацию(Знач Форма, Знач ДобавляемыеРеквизиты, ПараметрыВывода)
	Если ДобавляемыеРеквизиты.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
	ДобавленныеРеквизиты = Новый Массив;
	Для Каждого ДобавляемыйРеквизит Из ДобавляемыеРеквизиты Цикл
		Если ПустаяСтрока(ДобавляемыйРеквизит.Путь) Тогда
			ДобавленныеРеквизиты.Добавить(ДобавляемыйРеквизит.Имя);
		КонецЕсли;
	КонецЦикла;

	ПараметрыКонтактнойИнформации = УКИ_ПараметрыВыводаКонтактнойИнформации(Форма, ПараметрыВывода.ИмяЭлементаДляРазмещения, ПараметрыВывода.ПоложениеЗаголовкаКИ, ПараметрыВывода.ОтложеннаяИнициализация, ПараметрыВывода.ИсключаемыеВиды, ПараметрыВывода.СкрываемыеВиды);

	ПараметрыКонтактнойИнформации.ДобавленныеРеквизиты = ДобавленныеРеквизиты;
	ПараметрыКонтактнойИнформации.Владелец             = ПараметрыВывода.СсылкаНаОбъект;

	Если Не ПустаяСтрока(ПараметрыВывода.ИмяЭлементаДляРазмещения) Тогда
		Форма.Элементы[ПараметрыВывода.ИмяЭлементаДляРазмещения].Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

Функция УКИ_ПараметрыВыводаКонтактнойИнформации(Форма, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ, ОтложеннаяИнициализация, ИсключаемыеВиды, СкрываемыеВиды)
	Если ТипЗнч(Форма.ПараметрыКонтактнойИнформации) <> Тип("Структура") Тогда
		Форма.ПараметрыКонтактнойИнформации = Новый Структура;
	КонецЕсли;

	// Зарезервировано для новых подсистем

	МожноОтправлятьSMS = Ложь;

	ПараметрыКонтактнойИнформации = Новый Структура;
	ПараметрыКонтактнойИнформации.Вставить("ГруппаДляРазмещения",              ИмяЭлементаДляРазмещения);
	ПараметрыКонтактнойИнформации.Вставить("ПоложениеЗаголовка",               УКИ_ЗначениеПоложенияЗаголовкаКИ(ПоложениеЗаголовкаКИ));
	ПараметрыКонтактнойИнформации.Вставить("ДобавленныеРеквизиты",             Новый СписокЗначений);
	ПараметрыКонтактнойИнформации.Вставить("ОтложеннаяИнициализация",          ОтложеннаяИнициализация);
	ПараметрыКонтактнойИнформации.Вставить("ИсключаемыеВиды",                  ИсключаемыеВиды);
	ПараметрыКонтактнойИнформации.Вставить("ВыполненаОтложеннаяИнициализация", Ложь);
	ПараметрыКонтактнойИнформации.Вставить("ДобавленныеЭлементы",              Новый СписокЗначений);
	ПараметрыКонтактнойИнформации.Вставить("СписокДобавляемыхЭлементов",       Новый СписокЗначений);
	ПараметрыКонтактнойИнформации.Вставить("МожноОтправлятьSMS",               МожноОтправлятьSMS);
	ПараметрыКонтактнойИнформации.Вставить("Владелец",                         Неопределено);
	ПараметрыКонтактнойИнформации.Вставить("ОбработкаНавигационнойСсылки",     Ложь);
	ПараметрыКонтактнойИнформации.Вставить("СкрываемыеВиды",                   СкрываемыеВиды);

	ПараметрыАдреса = Новый Структура("ТипПомещения, Страна, Индекс", "Квартира");
	ПараметрыКонтактнойИнформации.Вставить("ПараметрыАдреса", ПараметрыАдреса);

	Форма.ПараметрыКонтактнойИнформации.Вставить(ИмяЭлементаДляРазмещения, ПараметрыКонтактнойИнформации);

	Возврат Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения];
КонецФункции

Функция УКИ_ЗначениеПоложенияЗаголовкаКИ(ПоложениеЗаголовкаКИ)
	Если ПоложениеЗаголовкаЭлементаФормы.Лево = ПоложениеЗаголовкаКИ Тогда
		Возврат "ПоложениеЗаголовкаЭлементаФормы.Лево";
	ИначеЕсли ПоложениеЗаголовкаЭлементаФормы.Верх = ПоложениеЗаголовкаКИ Тогда
		Возврат "ПоложениеЗаголовкаЭлементаФормы.Верх";
	ИначеЕсли ПоложениеЗаголовкаЭлементаФормы.Низ = ПоложениеЗаголовкаКИ Тогда
		Возврат "ПоложениеЗаголовкаЭлементаФормы.Низ";
	ИначеЕсли ПоложениеЗаголовкаЭлементаФормы.Право = ПоложениеЗаголовкаКИ Тогда
		Возврат "ПоложениеЗаголовкаЭлементаФормы.Право";
	ИначеЕсли ПоложениеЗаголовкаЭлементаФормы.Нет = ПоложениеЗаголовкаКИ Тогда
		Возврат "ПоложениеЗаголовкаЭлементаФормы.Нет";
	ИначеЕсли ПоложениеЗаголовкаЭлементаФормы.Авто = ПоложениеЗаголовкаКИ Тогда
		Возврат "ПоложениеЗаголовкаЭлементаФормы.Авто";
	КонецЕсли;

	Возврат "";
КонецФункции

Процедура УКИ_ПриЧтенииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация") Экспорт
	СписокРеквизитовФормы = Форма.ПолучитьРеквизиты();

	ПервыйЗапуск = Истина;
	Для Каждого Реквизит Из СписокРеквизитовФормы Цикл
		Если Реквизит.Имя = "ПараметрыКонтактнойИнформации" И ТипЗнч(Форма.ПараметрыКонтактнойИнформации) = Тип("Структура") Тогда
			ПервыйЗапуск = Ложь;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ПервыйЗапуск Тогда
		Возврат;
	КонецЕсли;

	Параметры = УКИ_ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);

	СсылкаНаОбъект				= Объект.Ссылка;
	МетаданныеОбъекта			= СсылкаНаОбъект.Метаданные();
	ПолноеИмяОбъектаМетаданных	= МетаданныеОбъекта.ПолноеИмя();
	ИмяГруппыВидовКИ			= СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "");
	ГруппаВидовКИ				= УКИ_ВидКонтактнойИнформацииПоИмени(ИмяГруппыВидовКИ);
	ИмяЭлементаДляРазмещения	= Параметры.ГруппаДляРазмещения;

	ПоложениеЗаголовкаКИ				= ?(ЗначениеЗаполнено(Параметры.ПоложениеЗаголовка), ПредопределенноеЗначение(Параметры.ПоложениеЗаголовка), ПоложениеЗаголовкаЭлементаФормы.Лево);
	ВыполненаОтложеннаяИнициализация	= Параметры.ВыполненаОтложеннаяИнициализация;
	ОтложеннаяИнициализация				= Параметры.ОтложеннаяИнициализация И Не ВыполненаОтложеннаяИнициализация;

	ИспользуетсяКонтактнаяИнформация = БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(ГруппаВидовКИ, "Используется");
	Если ИспользуетсяКонтактнаяИнформация = Ложь Тогда
		МассивУдаляемыхРеквизитов = Параметры.ДобавленныеРеквизиты;
	Иначе
		УКИ_УдалитьКомандыИЭлементыФормы(Форма, ИмяЭлементаДляРазмещения);

		МассивУдаляемыхРеквизитов	= Новый Массив;
		ИмяОбъекта					= Объект.Ссылка.Метаданные().Имя;

		СтатическиеРеквизиты			= БазоваяПодсистемаСервер.ОН_СкопироватьРекурсивно(Параметры.ИсключаемыеВиды);
		ИменаТабличныхЧастейПоВидамКИ	= Неопределено;

		Отбор													= Новый Структура("ИмяЭлементаДляРазмещения", ИмяЭлементаДляРазмещения);
		КонтактнаяИнформацияОписаниеДополнительныхРеквизитов	= Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		Для Каждого РеквизитФормы Из КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			Если РеквизитФормы.ЭтоРеквизитТабличнойЧасти Тогда
				Если ИменаТабличныхЧастейПоВидамКИ = Неопределено Тогда
					Отбор							= Новый Структура("ЭтоРеквизитТабличнойЧасти", Истина);
					ВидыКИТабличнойЧасти			= Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить(Отбор, "Вид");
					ИменаТабличныхЧастейПоВидамКИ	= УКИ_ИменаТабличныхЧастейПоВидамКИ(ВидыКИТабличнойЧасти, ИмяОбъекта);
				КонецЕсли;

				ИмяТабличнойЧасти = ИменаТабличныхЧастейПоВидамКИ[РеквизитФормы.Вид];
				МассивУдаляемыхРеквизитов.Добавить("Объект." + ИмяТабличнойЧасти + "." + РеквизитФормы.ИмяРеквизита);
				МассивУдаляемыхРеквизитов.Добавить("Объект." + ИмяТабличнойЧасти + "." + РеквизитФормы.ИмяРеквизита + "Значение");
			ИначеЕсли НЕ РеквизитФормы.Свойство("ЭтоИсторическаяКонтактнаяИнформация") ИЛИ НЕ РеквизитФормы.ЭтоИсторическаяКонтактнаяИнформация Тогда
				Индекс = СтатическиеРеквизиты.Найти(РеквизитФормы.Вид);

				Если Индекс = Неопределено Тогда // Реквизит создается динамически.
					Если Не ОтложеннаяИнициализация И ЗначениеЗаполнено(РеквизитФормы.ИмяРеквизита) Тогда
						МассивУдаляемыхРеквизитов.Добавить(РеквизитФормы.ИмяРеквизита);
					КонецЕсли;
				Иначе
					СтатическиеРеквизиты.Удалить(Индекс);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для Каждого РеквизитФормы Из КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Удалить(РеквизитФормы);
		КонецЦикла;
	КонецЕсли;
	Форма.ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);

	ДополнительныеПараметры								= УКИ_ПараметрыКонтактнойИнформации();
	ДополнительныеПараметры.ИмяЭлементаДляРазмещения	= ИмяЭлементаДляРазмещения;
	ДополнительныеПараметры.ПоложениеЗаголовкаКИ		= ПоложениеЗаголовкаКИ;
	ДополнительныеПараметры.ИсключаемыеВиды				= Параметры.ИсключаемыеВиды;
	ДополнительныеПараметры.СкрываемыеВиды				= Параметры.СкрываемыеВиды;
	ДополнительныеПараметры.ОтложеннаяИнициализация		= ОтложеннаяИнициализация;
	УКИ_ПриСозданииНаСервере(Форма, Объект, ДополнительныеПараметры);

	Параметры									= УКИ_ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	Параметры.ВыполненаОтложеннаяИнициализация	= ВыполненаОтложеннаяИнициализация;
КонецПроцедуры

Процедура УКИ_ПередЗаписьюНаСервере(Форма, Объект, Отказ = Ложь) Экспорт
	КонтактнаяИнформация = УКИ_КонтактнаяИнформацияИзРеквизитовФормы(Форма, Объект);

	ЭтоПараметрыОсновногоОбъекта  = Истина;
	ПараметрыКонтактнойИнформации = Неопределено;
	СкрываемыеВиды                = Новый Массив;

	УКИ_ОпределитьПараметрыКонтактнойИнформацииПоВладельцу(Форма, Объект, ПараметрыКонтактнойИнформации, ЭтоПараметрыОсновногоОбъекта, СкрываемыеВиды);

	Если Объект.Ссылка.Пустая() И ТипЗнч(Объект) <> Тип("ДанныеФормыСтруктура") Тогда
		Если ЭтоПараметрыОсновногоОбъекта Тогда
			НоваяСсылка			= Объект.ПолучитьСсылкуНового();
			МенеджерОбъекта		= БазоваяПодсистемаСервер.ОН_МенеджерОбъектаПоСсылке(Объект.Ссылка);
			Если НоваяСсылка = МенеджерОбъекта.ПустаяСсылка() Тогда
				Объект.УстановитьСсылкуНового(МенеджерОбъекта.ПолучитьСсылку());
			КонецЕсли;
			ПараметрыКонтактнойИнформации.Владелец = Объект.ПолучитьСсылкуНового();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если СкрываемыеВиды.Количество() = 0 Тогда
		Объект.КонтактнаяИнформация.Очистить();
	Иначе
		Индекс = Объект.КонтактнаяИнформация.Количество() -1;
		Пока Индекс >= 0 Цикл
			СтрокаТаблицы = Объект.КонтактнаяИнформация.Получить(Индекс);
			Если СкрываемыеВиды.Найти(СтрокаТаблицы.Вид) = Неопределено Тогда
				Объект.КонтактнаяИнформация.Удалить(СтрокаТаблицы);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
	КонецЕсли;

	УКИ_УстановитьКонтактнуюИнформациюОбъекта(Объект, КонтактнаяИнформация);
КонецПроцедуры

Функция УКИ_КонтактнаяИнформацияИзРеквизитовФормы(Форма, Объект)
	КонтактнаяИнформация = УКИ_НоваяКонтактнаяИнформация(Ложь);

	МетаданныеОбъекта				= Объект.Ссылка.Метаданные();
	ИмяОбъектаМетаданных			= МетаданныеОбъекта.Имя;
	ПолноеИмяОбъектаМетаданных		= МетаданныеОбъекта.ПолноеИмя();
	ГруппаВидовКонтактнойИнформации	= УКИ_ВидКонтактнойИнформацииПоИмени(СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", ""));
	ИменаТабличныхЧастейПоВидамКИ	= Неопределено;

	Для Каждого СтрокаТаблицы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		ИмяРеквизита  = СтрокаТаблицы.ИмяРеквизита;

		Элемент = Форма.Элементы.Найти(ИмяРеквизита); // РасширениеПоляФормыДляПоляНадписи
		Если Элемент <> Неопределено Тогда
			Если Элемент.Вид = ВидПоляФормы.ПолеНадписи И Элемент.Гиперссылка Тогда
				Если ПустаяСтрока(СтрокаТаблицы.Представление) ИЛИ СтрокаТаблицы.Представление = "Заполнить" Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		УКИ_ВосстановитьПустыеЗначениеПредставление(СтрокаТаблицы);

		Если СтрокаТаблицы.ЭтоРеквизитТабличнойЧасти Тогда
			Если ИменаТабличныхЧастейПоВидамКИ = Неопределено Тогда
				Отбор							= Новый Структура("ЭтоРеквизитТабличнойЧасти", Истина);
				ВидыКИТабличнойЧасти			= Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить(Отбор, "Вид");
				ИменаТабличныхЧастейПоВидамКИ	= УКИ_ИменаТабличныхЧастейПоВидамКИ(ВидыКИТабличнойЧасти, ИмяОбъектаМетаданных);
			КонецЕсли;

			ИмяТабличнойЧасти	= ИменаТабличныхЧастейПоВидамКИ[СтрокаТаблицы.Вид];
			ТабличнаяЧастьФормы	= Форма.Объект[ИмяТабличнойЧасти];
			Для Каждого СтрокаТабличнойЧастиФормы Из ТабличнаяЧастьФормы Цикл
				ИдентификаторСтроки											= СтрокаТабличнойЧастиФормы.ПолучитьИдентификатор();
				СтрокаТабличнойЧастиФормы.ИдентификаторСтрокиТабличнойЧасти	= ИдентификаторСтроки;

				СтрокаТабличнойЧасти										= Объект[ИмяТабличнойЧасти][СтрокаТабличнойЧастиФормы.НомерСтроки - 1];
				СтрокаТабличнойЧасти.ИдентификаторСтрокиТабличнойЧасти		= ИдентификаторСтроки;

				Значение = СтрокаТабличнойЧастиФормы[ИмяРеквизита + "Значение"];

				УКИ_ПеренестиЗаписьКонтактнойИнформацииИзФормыВТаблицу(КонтактнаяИнформация, СтрокаТаблицы, Значение, ИдентификаторСтроки);
			КонецЦикла;
		Иначе
			Если СтрокаТаблицы.Вид.Родитель <> ГруппаВидовКонтактнойИнформации Тогда
				Продолжить;
			КонецЕсли;

			УКИ_ПеренестиЗаписьКонтактнойИнформацииИзФормыВТаблицу(КонтактнаяИнформация, СтрокаТаблицы, СтрокаТаблицы.Значение);
		КонецЕсли;
	КонецЦикла;

	Возврат КонтактнаяИнформация;
КонецФункции

Процедура УКИ_ПеренестиЗаписьКонтактнойИнформацииИзФормыВТаблицу(КонтактнаяИнформация, СтрокаТаблицы, Знач Значение, Знач ИдентификаторСтроки = Неопределено)
	Если ПустаяСтрока(Значение) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Значение) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(Значение), "<") Тогда
		ОбъектКИ = сУКИ_КонтактнаяИнформацияВСтруктуруJSON(Значение, СтрокаТаблицы.Тип);
	Иначе
		ОбъектКИ = сУКИ_JSONВКонтактнуюИнформациюПоПолям(Значение, СтрокаТаблицы.Тип);
	КонецЕсли;

	Если Не сУКИ_ЕстьЗаполненныеСвойстваКонтактнойИнформации(ОбъектКИ) Тогда
		Возврат;
	КонецЕсли;

	СтрокаКонтактнойИнформации = КонтактнаяИнформация.Добавить();

	ДействуетС = ?(СтрокаТаблицы.Свойство("ДействуетС"), СтрокаТаблицы.ДействуетС, Неопределено);
	ЗаполнитьЗначенияСвойств(СтрокаКонтактнойИнформации, СтрокаТаблицы, "Вид,Тип");

	СтрокаКонтактнойИнформации.Представление = ОбъектКИ.Value;
	СтрокаКонтактнойИнформации.Значение      = сУКИ_СтруктураВСтрокуJSON(ОбъектКИ);
	СтрокаКонтактнойИнформации.ЗначенияПолей = сУКИ_КонтактнаяИнформацияИзJSONВXML(ОбъектКИ, СтрокаТаблицы.Тип);

	Если ЗначениеЗаполнено(ДействуетС) Тогда
		СтрокаКонтактнойИнформации.Дата    = ДействуетС;
	КонецЕсли;

	СтрокаКонтактнойИнформации.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
КонецПроцедуры

Процедура УКИ_УстановитьКонтактнуюИнформациюОбъекта(СсылкаИлиОбъект, Знач КонтактнаяИнформация, Замещать = Истина) Экспорт
	Если ТипЗнч(СсылкаИлиОбъект) <> Тип("ДанныеФормыСтруктура") Тогда
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(СсылкаИлиОбъект));
	Иначе
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(СсылкаИлиОбъект.Ссылка));
	КонецЕсли;

	Если Не УКИ_СодержитКонтактнуюИнформацию(СсылкаИлиОбъект.Ссылка) Тогда
		ТекстОшибки = СтрШаблон("Объект %1 не подключен к подсистеме ""Контактная информация""", ОбъектМетаданных.Представление());
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Если БазоваяПодсистемаСервер.ОН_ЭтоСсылка(ТипЗнч(СсылкаИлиОбъект)) Тогда
		сУКИ_УстановитьКонтактнуюИнформациюОбъектаДляСсылки(СсылкаИлиОбъект, КонтактнаяИнформация, ОбъектМетаданных, Замещать);

		Возврат;
	КонецЕсли;

	// Очистка контактной информации пустой таблицей.
	Если КонтактнаяИнформация.Количество() = 0 Тогда
		Если Замещать Тогда
			СсылкаИлиОбъект.КонтактнаяИнформация.Очистить();
		КонецЕсли;

		Возврат;
	КонецЕсли;

	сУКИ_УстановитьКонтактнуюИнформациюОбъекта(СсылкаИлиОбъект, КонтактнаяИнформация, ОбъектМетаданных, Замещать);
КонецПроцедуры

Процедура УКИ_ОпределитьПараметрыКонтактнойИнформацииПоВладельцу(Форма, Объект, ПараметрыКонтактнойИнформации, ЭтоПараметрыОсновногоОбъекта, СкрываемыеВиды)
	СкрываемыеВиды = Новый Массив;
	Для каждого ПараметрКонтактнойИнформации Из Форма.ПараметрыКонтактнойИнформации Цикл
		Если ПараметрКонтактнойИнформации.Значение.Владелец = Объект.Ссылка Или Форма.ПараметрыКонтактнойИнформации.Количество() = 1 Тогда
			ПараметрыКонтактнойИнформации = ПараметрКонтактнойИнформации.Значение;
			СкрываемыеВиды = ПараметрыКонтактнойИнформации.СкрываемыеВиды;

			Возврат;
		КонецЕсли;

		ЭтоПараметрыОсновногоОбъекта = Ложь;
	КонецЦикла;
КонецПроцедуры

Функция УКИ_СодержитКонтактнуюИнформацию(ПроверяемыйОбъект) Экспорт
	ТипОбъекта = ?(ТипЗнч(ПроверяемыйОбъект) <> Тип("Тип"), ТипЗнч(ПроверяемыйОбъект), ПроверяемыйОбъект);
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта);
	Если МетаданныеОбъекта <> Неопределено И МетаданныеОбъекта.ТабличныеЧасти.Найти("КонтактнаяИнформация") <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Функция УКИ_ПараметрыКонтактнойИнформацииФормы(ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения)
	Если НЕ ЗначениеЗаполнено(ИмяЭлементаДляРазмещения) ИЛИ НЕ ПараметрыКонтактнойИнформации.Свойство(ИмяЭлементаДляРазмещения) Тогда
		Для каждого ПерваяЗапись Из ПараметрыКонтактнойИнформации Цикл
			Возврат ПерваяЗапись.Значение;
		КонецЦикла;

		Возврат ПараметрыКонтактнойИнформации;
	КонецЕсли;

	Возврат ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения];
КонецФункции

Процедура УКИ_УдалитьКомандыИЭлементыФормы(Форма, ИмяЭлементаДляРазмещения)
	ПараметрыКонтактнойИнформации	= УКИ_ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	ДобавленныеЭлементы				= ПараметрыКонтактнойИнформации.ДобавленныеЭлементы;
	ДобавленныеЭлементы.СортироватьПоПредставлению();

	Для Каждого УдаляемыйЭлемент Из ДобавленныеЭлементы Цикл
		Если УдаляемыйЭлемент.Пометка Тогда
			Форма.Команды.Удалить(Форма.Команды[УдаляемыйЭлемент.Значение]);
		Иначе
			Форма.Элементы.Удалить(Форма.Элементы[УдаляемыйЭлемент.Значение]);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция УКИ_НоваяКонтактнаяИнформация(КолонкаОбъект = Истина) Экспорт
	КонтактнаяИнформация = Новый ТаблицаЗначений;
	ОписаниеТиповСтрока1500 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1500));

	Если КолонкаОбъект Тогда
		КонтактнаяИнформация.Колонки.Добавить("Объект");
	КонецЕсли;

	КонтактнаяИнформация.Колонки.Добавить("Представление",                     ОписаниеТиповСтрока1500);
	КонтактнаяИнформация.Колонки.Добавить("ЗначенияПолей",                     Новый ОписаниеТипов("Строка"));
	КонтактнаяИнформация.Колонки.Добавить("Значение",                          Новый ОписаниеТипов("Строка"));
	КонтактнаяИнформация.Колонки.Добавить("Вид",                               Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
	КонтактнаяИнформация.Колонки.Добавить("Тип",                               Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"));
	КонтактнаяИнформация.Колонки.Добавить("Дата",                              Новый ОписаниеТипов("Дата"));
	КонтактнаяИнформация.Колонки.Добавить("ИдентификаторСтрокиТабличнойЧасти", Новый ОписаниеТипов("Число"));

	Возврат КонтактнаяИнформация;
КонецФункции

Функция УКИ_ПараметрыКонтактнойИнформации() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ТипПомещения",				"Квартира");
	Результат.Вставить("Индекс",					Неопределено);
	Результат.Вставить("Страна",					Неопределено);
	Результат.Вставить("ОтложеннаяИнициализация",	Ложь);
	Результат.Вставить("ПоложениеЗаголовкаКИ",		"");
	Результат.Вставить("ИсключаемыеВиды",			Неопределено);
	Результат.Вставить("СкрываемыеВиды",			Неопределено);
	Результат.Вставить("ИмяЭлементаДляРазмещения",	"ГруппаКонтактнаяИнформация");

	Возврат Результат;
КонецФункции

Процедура УКИ_ВосстановитьПустыеЗначениеПредставление(СтрокаКонтактнойИнформации) Экспорт
	Если ПустаяСтрока(СтрокаКонтактнойИнформации.Тип) Тогда
		СтрокаКонтактнойИнформации.Тип = КонтактнаяИнформацияСерверПовтИсп.сУКИ_ТипВидаКонтактнойИнформации(СтрокаКонтактнойИнформации.Вид);
	КонецЕсли;

	// ЗначенияПолей может отсутствовать в строке контактной информации
	СведенияПолей = Новый Структура("ЗначенияПолей", Неопределено);
	ЗаполнитьЗначенияСвойств(СведенияПолей, СтрокаКонтактнойИнформации);
	ЕстьЗначенияПолей = (СведенияПолей.ЗначенияПолей <> Неопределено);

	ПустоеПредставление = ПустаяСтрока(СтрокаКонтактнойИнформации.Представление);
	ПустоеЗначение      = ПустаяСтрока(СтрокаКонтактнойИнформации.Значение);
	ПустыеЗначенияПолей = ?(ЕстьЗначенияПолей, ПустаяСтрока(СведенияПолей.ЗначенияПолей), Истина);

	ВсеПоляПустые		= ПустоеПредставление И ПустоеЗначение И ПустыеЗначенияПолей;
	ВсеПоляЗаполнены	= Не ПустоеПредставление И Не ПустоеЗначение И НЕ ПустыеЗначенияПолей;

	Если ВсеПоляПустые Или ВсеПоляЗаполнены Тогда
		Возврат;
	КонецЕсли;

	Если ПустоеПредставление Тогда
		ФорматКонтактнойИнформации = БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта(СтрокаКонтактнойИнформации.Вид, "Тип, ВключатьСтрануВПредставление");
		ФорматКонтактнойИнформации.Вставить("ФорматАдреса", "ФИАС");

		ИсточникЗначений = ?(ПустыеЗначенияПолей, СтрокаКонтактнойИнформации.Значение, СтрокаКонтактнойИнформации.ЗначенияПолей);

		СтрокаКонтактнойИнформации.Представление = сУКИ_ПредставлениеКонтактнойИнформации(ИсточникЗначений);
	КонецЕсли;

	Если ПустоеЗначение Тогда
		Если Не ПустоеПредставление И ПустыеЗначенияПолей Тогда
			АдресПоПолям						= сУКИ_КонтактнаяИнформацияПоПредставлению(СтрокаКонтактнойИнформации.Представление, СтрокаКонтактнойИнформации.Тип);
			СтрокаКонтактнойИнформации.Значение	= сУКИ_СтруктураВСтрокуJSON(АдресПоПолям);

			Если ЕстьЗначенияПолей Тогда
				СтрокаКонтактнойИнформации.ЗначенияПолей = сУКИ_КонтактнаяИнформацияИзJSONВXML(СтрокаКонтактнойИнформации.Значение, СтрокаКонтактнойИнформации.Тип);
			КонецЕсли;
		ИначеЕсли Не ПустыеЗначенияПолей Тогда
			СтрокаКонтактнойИнформации.Значение = УКИ_КонтактнаяИнформацияВJSON(СтрокаКонтактнойИнформации.ЗначенияПолей, СтрокаКонтактнойИнформации.Тип);
		КонецЕсли;
	ИначеЕсли ПустыеЗначенияПолей И ЕстьЗначенияПолей Тогда
		СтрокаКонтактнойИнформации.ЗначенияПолей = УКИ_КонтактнаяИнформацияВXML(СтрокаКонтактнойИнформации.Значение, СтрокаКонтактнойИнформации.Представление, СтрокаКонтактнойИнформации.Вид);
	КонецЕсли;
КонецПроцедуры

Функция УКИ_ТипКонтактнойИнформации(Знач КонтактнаяИнформация) Экспорт
	Если ТипЗнч(КонтактнаяИнформация) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(КонтактнаяИнформация), "{") Тогда
		КонтактнаяИнформацияСтруктурой = сУКИ_СтрокуJSONВСтруктуру(КонтактнаяИнформация);
		Если ТипЗнч(КонтактнаяИнформацияСтруктурой) = Тип("Структура") И КонтактнаяИнформацияСтруктурой.Свойство("type") Тогда
			Возврат Перечисления.ТипыКонтактнойИнформации[КонтактнаяИнформацияСтруктурой.type];
		КонецЕсли;
	КонецЕсли;

	Возврат сУКИ_ТипКонтактнойИнформации(КонтактнаяИнформация);
КонецФункции

Функция УКИ_СтранаМираПоКодуИлиНаименованию(КодИлиНаименование, ДанныеЗаполнения = Неопределено) Экспорт
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	|	СтраныМира.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтраныМира КАК СтраныМира
	|ГДЕ
	|	(СтраныМира.Код = &КодИлиНаименование
	|			ИЛИ СтраныМира.КодАльфа2 = &КодИлиНаименование
	|			ИЛИ СтраныМира.КодАльфа3 = &КодИлиНаименование
	|			ИЛИ СтраныМира.Наименование = &КодИлиНаименование
	|			ИЛИ СтраныМира.МеждународноеНаименование = &КодИлиНаименование
	|			ИЛИ СтраныМира.НаименованиеПолное = &КодИлиНаименование)";

	Запрос.УстановитьПараметр("КодИлиНаименование", КодИлиНаименование);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Ссылка;
	КонецЕсли;

	ДанныеКлассификатора = РСА_ТаблицаКлассификатора();

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	|	ТаблицаКлассификатор.Код,
	|	ТаблицаКлассификатор.КодАльфа2,
	|	ТаблицаКлассификатор.КодАльфа3,
	|	ТаблицаКлассификатор.Наименование,
	|	ТаблицаКлассификатор.НаименованиеПолное,
	|	ТаблицаКлассификатор.МеждународноеНаименование,
	|	ТаблицаКлассификатор.УчастникЕАЭС,
	|	ТаблицаКлассификатор.Неактуальный
	|ПОМЕСТИТЬ ТаблицаКлассификатор
	|ИЗ
	|	&ТаблицаКлассификатор КАК ТаблицаКлассификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтранаМира.Код,
	|	СтранаМира.КодАльфа2,
	|	СтранаМира.КодАльфа3,
	|	СтранаМира.Наименование,
	|	СтранаМира.НаименованиеПолное,
	|	СтранаМира.МеждународноеНаименование,
	|	СтранаМира.УчастникЕАЭС,
	|	СтранаМира.Неактуальный
	|ИЗ
	|	ТаблицаКлассификатор КАК СтранаМира
	|ГДЕ
	|	(СтранаМира.Код = &КодИлиНаименование
	|			ИЛИ СтранаМира.КодАльфа2 = &КодИлиНаименование
	|			ИЛИ СтранаМира.КодАльфа3 = &КодИлиНаименование
	|			ИЛИ СтранаМира.Наименование = &КодИлиНаименование
	|			ИЛИ СтранаМира.МеждународноеНаименование = &КодИлиНаименование
	|			ИЛИ СтранаМира.НаименованиеПолное = &КодИлиНаименование)";

	Запрос.УстановитьПараметр("ТаблицаКлассификатор", ДанныеКлассификатора);
	Запрос.УстановитьПараметр("КодИлиНаименование",   КодИлиНаименование);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Если РезультатЗапроса.Следующий() Тогда
		ДанныеЗаполнения = УКИ_ОписаниеСтраныМира(БазоваяПодсистемаСервер.ОН_СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса));
	КонецЕсли;

	Если ДанныеЗаполнения = Неопределено ИЛИ НЕ ДанныеЗаполнения.Свойство("Наименование") ИЛИ ПустаяСтрока(ДанныеЗаполнения.Наименование) Тогда
		Возврат Справочники.СтраныМира.ПустаяСсылка();
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	ОбъектСтраны = Справочники.СтраныМира.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(ОбъектСтраны, ДанныеЗаполнения);
	ОбъектСтраны.Записать();

	Возврат ОбъектСтраны.Ссылка;
КонецФункции

Функция УКИ_ЭтоСтранаУчастникЕАЭС(Страна) Экспорт
	Если ТипЗнч(Страна) = ТипЗнч(Справочники.СтраныМира.ПустаяСсылка()) Тогда
		Запрос			= Новый Запрос;
		Запрос.Текст	= "ВЫБРАТЬ
			|	СтраныМира.УчастникЕАЭС КАК УчастникЕАЭС
			|ИЗ
			|	Справочник.СтраныМира КАК СтраныМира
			|ГДЕ
			|	СтраныМира.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Страна);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			СтрокаРезультата = РезультатЗапроса.Выбрать();
			Если СтрокаРезультата.Следующий() Тогда
				Возврат (СтрокаРезультата.УчастникЕАЭС = ИСТИНА);
			КонецЕсли;
		КонецЕсли;
	Иначе
		НайденнаяСтрана =  УКИ_СтранаМираПоКодуИлиНаименованию(Страна);
		Если ЗначениеЗаполнено(НайденнаяСтрана) Тогда
			Возврат НайденнаяСтрана.УчастникЕАЭС;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Функция УКИ_ОписаниеСтраныМира(ДанныеЗаполнения)
	Результат = Новый Структура;
	Результат.Вставить("Код",						"");
	Результат.Вставить("КодАльфа2",					"");
	Результат.Вставить("КодАльфа3",					"");
	Результат.Вставить("Наименование",				"");
	Результат.Вставить("НаименованиеПолное",		"");
	Результат.Вставить("МеждународноеНаименование",	"");
	Результат.Вставить("УчастникЕАЭС",				Ложь);
	Результат.Вставить("Неактуальный",				Ложь);

	ЗаполнитьЗначенияСвойств(Результат, ДанныеЗаполнения);

	Возврат Результат
КонецФункции

Функция УКИ_ПолучитьXDTOРеквизитОбъекта(ОбъектXTDO, XPath) Экспорт
	// Переносов строки в XPath не ожидаем.
	СтрокаСвойств = СтрЗаменить(СтрЗаменить(XPath, "/", Символы.ПС), Символы.ПС + Символы.ПС, "/");

	ЧислоСвойств = СтрЧислоСтрок(СтрокаСвойств);
	Если ЧислоСвойств = 1 Тогда
		Результат = ОбъектXTDO.Получить(СтрокаСвойств);
		Если ТипЗнч(Результат) = Тип("ОбъектXDTO") Тогда
			Возврат Результат.Значение;
		КонецЕсли;

		Возврат Результат;
	КонецЕсли;

	Результат = ?(ЧислоСвойств = 0, Неопределено, ОбъектXTDO);
	Для Индекс = 1 По ЧислоСвойств Цикл
		Результат = Результат.Получить(СтрПолучитьСтроку(СтрокаСвойств, Индекс));
		Если Результат = Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция УКИ_ДанныеСтраныМира(Знач КодСтраны = Неопределено, Знач Наименование = Неопределено) Экспорт
	Результат = Неопределено;

	Если КодСтраны = Неопределено И Наименование = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	УсловиеПоиска			= Новый Массив;
	ФильтрКлассификатора	= Новый Структура;

	НормализованныйКод = УКИ_КодСтраныМира(КодСтраны);
	Если КодСтраны <> Неопределено Тогда
		УсловиеПоиска.Добавить("Код=" + УКИ_КонтрольКавычекВСтроке(НормализованныйКод));
		ФильтрКлассификатора.Вставить("Код", НормализованныйКод);
	КонецЕсли;

	Если Наименование <> Неопределено Тогда
		ШаблонНаименование = " (Наименование = %1 ИЛИ МеждународноеНаименование = %1)";
		УсловиеПоиска.Добавить(СтрШаблон(ШаблонНаименование, УКИ_КонтрольКавычекВСтроке(Наименование)));

		ФильтрКлассификатора.Вставить("Наименование", Наименование);
	КонецЕсли;
	УсловиеПоиска = СтрСоединить(УсловиеПоиска, " И ");

	Результат = Новый Структура;
	Результат.Вставить("Ссылка");
	Результат.Вставить("Код",                       "");
	Результат.Вставить("Наименование",              "");
	Результат.Вставить("НаименованиеПолное",        "");
	Результат.Вставить("МеждународноеНаименование", "");
	Результат.Вставить("КодАльфа2",                 "");
	Результат.Вставить("КодАльфа3",                 "");
	Результат.Вставить("УчастникЕАЭС",              Ложь);

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка, Код, Наименование, НаименованиеПолное,
	|	МеждународноеНаименование, КодАльфа2, КодАльфа3, УчастникЕАЭС
	|ИЗ
	|	Справочник.СтраныМира
	|ГДЕ
	|	&УсловиеПоиска
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоиска", УсловиеПоиска);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	Иначе
		ДанныеКлассификатора = РСА_ТаблицаКлассификатора();
		СтрокиДанных = ДанныеКлассификатора.НайтиСтроки(ФильтрКлассификатора);
		Если СтрокиДанных.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			ЗаполнитьЗначенияСвойств(Результат, СтрокиДанных[0]);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция УКИ_КодСтраныМира(Знач КодСтраны)
	Если ТипЗнч(КодСтраны) = Тип("Число") Тогда
		Возврат Формат(КодСтраны, "ЧЦ=3; ЧН=; ЧВН=; ЧГ=");
	КонецЕсли;

	Возврат Прав("000" + КодСтраны, 3);
КонецФункции

Функция УКИ_КонтрольКавычекВСтроке(Знач Строка)
	Возврат """" + СтрЗаменить(Строка, """", """""") + """";
КонецФункции

Процедура УКИ_УстановитьКомментарийКонтактнойИнформации(КонтактнаяИнформация, Знач Комментарий) Экспорт
	ЭтоСтрока = ТипЗнч(КонтактнаяИнформация) = Тип("Строка");

	Если ТипЗнч(КонтактнаяИнформация) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(КонтактнаяИнформация), "{") Тогда
		КонтактнаяИнформацияСтруктурой			= сУКИ_JSONВКонтактнуюИнформациюПоПолям(КонтактнаяИнформация, Неопределено);
		КонтактнаяИнформацияСтруктурой.comment	= Комментарий;
		КонтактнаяИнформация					= сУКИ_СтруктураВСтрокуJSON(КонтактнаяИнформацияСтруктурой);

		Возврат;
	ИначеЕсли ЭтоСтрока И Не (ТипЗнч(КонтактнаяИнформация) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(КонтактнаяИнформация), "<")) Тогда
		// Предыдущий формат значений полей, комментарий отсутствует.
		Возврат;
	КонецЕсли;

	ОбъектXDTO				= ?(ЭтоСтрока, сУКИ_КонтактнаяИнформацияИзXML(КонтактнаяИнформация), КонтактнаяИнформация);
	ОбъектXDTO.Комментарий	= Комментарий;
	Если ЭтоСтрока Тогда
		КонтактнаяИнформация = сУКИ_КонтактнаяИнформацияXDTOВXML(ОбъектXDTO);
	КонецЕсли;
КонецПроцедуры

Функция УКИ_КонтактнаяИнформацияВJSON(Знач КонтактнаяИнформация, Знач ОжидаемыйВид = Неопределено) Экспорт
	Если ТипЗнч(КонтактнаяИнформация) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(КонтактнаяИнформация), "{") Тогда
		Возврат КонтактнаяИнформация;
	КонецЕсли;

	КонтактнаяИнформацияПоПолям = сУКИ_КонтактнаяИнформацияВСтруктуруJSON(КонтактнаяИнформация, ОжидаемыйВид,,  Ложь);

	Возврат сУКИ_СтруктураВСтрокуJSON(КонтактнаяИнформацияПоПолям);
КонецФункции

Функция УКИ_КонтактнаяИнформацияВXML(Знач ЗначенияПолей, Знач Представление = "", Знач ОжидаемыйВид = Неопределено) Экспорт
	Результат = сУКИ_ПривестиКонтактнуюИнформациюXML(Новый Структура("ЗначенияПолей, Представление, ВидКонтактнойИнформации", ЗначенияПолей, Представление, ОжидаемыйВид));

	Возврат Результат.ДанныеXML;
КонецФункции

Функция УКИ_АдресВведенВСвободнойФорме(Знач КонтактнаяИнформация) Экспорт
	Если ТипЗнч(КонтактнаяИнформация) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(КонтактнаяИнформация), "<") Тогда
		КонтактнаяИнформацияJSON = УКИ_КонтактнаяИнформацияВJSON(КонтактнаяИнформация);
		КонтактнаяИнформация = сУКИ_JSONВКонтактнуюИнформациюПоПолям(КонтактнаяИнформацияJSON, Перечисления.ТипыКонтактнойИнформации.Адрес);
	ИначеЕсли ТипЗнч(КонтактнаяИнформация) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(КонтактнаяИнформация), "{") Тогда
		КонтактнаяИнформация = сУКИ_JSONВКонтактнуюИнформациюПоПолям(КонтактнаяИнформация, Перечисления.ТипыКонтактнойИнформации.Адрес);
	КонецЕсли;

	Возврат СтрСравнить("ВСвободнойФорме", КонтактнаяИнформация.AddressType) = 0;
КонецФункции

Функция УКИ_ВидыКонтактнойИнформацииОбъекта(ВладелецКонтактнойИнформации, ТипКонтактнойИнформации = Неопределено) Экспорт
	Если ТипЗнч(ВладелецКонтактнойИнформации) = Тип("ДанныеФормыСтруктура") Тогда
		ТипСсылки = ТипЗнч(ВладелецКонтактнойИнформации.Ссылка)
	ИначеЕсли БазоваяПодсистемаСервер.ОН_ЭтоСсылка(ТипЗнч(ВладелецКонтактнойИнформации)) Тогда
		ТипСсылки = ТипЗнч(ВладелецКонтактнойИнформации);
	Иначе
		ТипСсылки = ТипЗнч(ВладелецКонтактнойИнформации.Ссылка)
	КонецЕсли;

	МетаданныеСправочника = Метаданные.НайтиПоТипу(ТипСсылки);
	Если МетаданныеСправочника <> Неопределено Тогда
		ГруппаВидовКИ = КонтактнаяИнформацияСерверПовтИсп.сУКИ_ГруппаВидаКонтактнойИнформацииПоИмениОбъекта(МетаданныеСправочника.ПолноеИмя());
	Иначе
		ГруппаВидовКИ = Неопределено;
	КонецЕсли;

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.Тип,
	|	ВидыКонтактнойИнформации.Представление,
	|	ВидыКонтактнойИнформации.Наименование,
	|	ВидыКонтактнойИнформации.РазрешитьВводНесколькихЗначений,
	|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение,
	|	ВидыКонтактнойИнформации.ПроверятьКорректность,
	|	ВидыКонтактнойИнформации.ИдентификаторДляФормул,
	|	ВЫБОР КОГДА ВидыКонтактнойИнформации.ИмяПредопределенногоВида <> """"
	|		ТОГДА ВидыКонтактнойИнформации.ИмяПредопределенногоВида
	|		ИНАЧЕ ВидыКонтактнойИнформации.ИмяПредопределенныхДанных
	|	КОНЕЦ КАК ИмяПредопределенногоВида,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
	|	И ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
	|	И ВидыКонтактнойИнформации.Используется = ИСТИНА
	|	И &ОтборТипаКонтактнойИнформации
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочивания";

	Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);

	Если ТипКонтактнойИнформации <> Неопределено Тогда
		ТекстЗамены  = "ВидыКонтактнойИнформации.Тип = &ТипКонтактнойИнформации";
		Запрос.УстановитьПараметр("ТипКонтактнойИнформации", ТипКонтактнойИнформации);
	Иначе
		ТекстЗамены = "Истина";
	КонецЕсли;

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборТипаКонтактнойИнформации", ТекстЗамены);

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	Возврат РезультатЗапроса;
КонецФункции

Процедура УКИ_КолонкиДляЗагрузкиДанных(МетаданныеСправочника, ИнформацияПоКолонкам) Экспорт
	Если МетаданныеСправочника.ТабличныеЧасти.Найти("КонтактнаяИнформация") = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Позиция = ИнформацияПоКолонкам.Количество() + 1;

	ВидыКонтактнойИнформации = УКИ_ВидыКонтактнойИнформацииОбъекта(Справочники[МетаданныеСправочника.Имя].ПустаяСсылка());

	Для каждого ВидКонтактнойИнформации Из ВидыКонтактнойИнформации Цикл
		ИмяКолонки = "КонтактнаяИнформация_" + БазоваяПодсистемаСервер.СП_ПреобразоватьСтрокуВДопустимоеНаименованиеКолонки(ВидКонтактнойИнформации.Наименование);
		Если ИнформацияПоКолонкам.Найти(ИмяКолонки, "ИмяКолонки") = Неопределено Тогда
			СтрокаИнфоПроКолонки							= ИнформацияПоКолонкам.Добавить();
			СтрокаИнфоПроКолонки.ИмяКолонки					= ИмяКолонки;
			СтрокаИнфоПроКолонки.ПредставлениеКолонки		= ВидКонтактнойИнформации.Представление;
			СтрокаИнфоПроКолонки.ТипКолонки					= Новый ОписаниеТипов("Строка");
			СтрокаИнфоПроКолонки.ОбязательнаДляЗаполнения	= Ложь;
			СтрокаИнфоПроКолонки.Позиция					= Позиция;
			СтрокаИнфоПроКолонки.Группа						= "Контактная информация";
			СтрокаИнфоПроКолонки.Видимость					= Истина;
			СтрокаИнфоПроКолонки.Ширина						= 30;
			Позиция											= Позиция + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция УКИ_СтрокаОписанияПочтыДляВосстановленияПароляИзДанныхФормы(Форма, ТипИлиВидEmailПользователя, АдресЭлектроннойПочты = "") Экспорт
	КонтактнаяИнформация = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;

	Отбор = Новый Структура;
	Если ТипЗнч(ТипИлиВидEmailПользователя) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		Отбор.Вставить("Вид",	ТипИлиВидEmailПользователя);
	ИначеЕсли ТипЗнч(ТипИлиВидEmailПользователя) = Тип("ПеречислениеСсылка.ТипыКонтактнойИнформации") Тогда
		Отбор.Вставить("Тип",	ТипИлиВидEmailПользователя);
	КонецЕсли;

	Если ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
		Отбор.Вставить("Представление", АдресЭлектроннойПочты);
	КонецЕсли;

	НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0];
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

Функция УКИ_ВидКонтактнойИнформацииПоИмени(Имя) Экспорт
	Вид = Неопределено;
	Если Не ПараметрыСеанса.ВыполняетсяОбновлениеИБ Тогда
		Виды = КонтактнаяИнформацияСерверПовтИсп.сУКИ_ВидыКонтактнойИнформацииПоИмени();
		Вид = Виды.Получить(Имя);
	Иначе
		Виды = УКИ_ПредопределенныеВидыКонтактнойИнформации(Имя);
		Если Виды.Количество() > 0 Тогда
			Вид = Виды[0].Ссылка;
		КонецЕсли;
	КонецЕсли;

	Если Вид <> Неопределено Тогда
		Возврат Вид;
	КонецЕсли;

	Возврат Справочники.ВидыКонтактнойИнформации[Имя];
КонецФункции

Функция УКИ_ПредопределенныеВидыКонтактнойИнформации(Имя = "") Экспорт
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.ИмяПредопределенногоВида КАК Имя,
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	&Отбор";

	Если ЗначениеЗаполнено(Имя) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Отбор", "ВидыКонтактнойИнформации.ИмяПредопределенногоВида = &Имя");
		Запрос.УстановитьПараметр("Имя", Имя);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Отбор", "ВидыКонтактнойИнформации.ИмяПредопределенногоВида <> """"");
	КонецЕсли;

	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Процедура УКИ_ОбработкаПроверкиЗаполненияНаСервере(Форма, Объект, Отказ) Экспорт
	ПараметрыСеанса.ИнтерактивнаяПроверкаЗаполненияКонтактнойИнформации = Истина;

	ИмяОбъекта		= Объект.Ссылка.Метаданные().Имя;
	УровеньОшибок	= 0;
	ПредыдущийВид	= Неопределено;

	ИменаТабличныхЧастейПоВидамКИ = Неопределено;

	Для Каждого СтрокаТаблицы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		ВидИнформации			= СтрокаТаблицы.Вид;
		ТипИнформации			= СтрокаТаблицы.Тип;
		Комментарий				= СтрокаТаблицы.Комментарий;
		ИмяРеквизита			= СтрокаТаблицы.ИмяРеквизита;
		СвойствоВидаИнформации	= БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта(ВидИнформации, "ОбязательноеЗаполнение, ВидРедактирования");
		ОбязательноеЗаполнение	= СвойствоВидаИнформации.ОбязательноеЗаполнение;

		Если СтрокаТаблицы.ЭтоРеквизитТабличнойЧасти Тогда
			Если ИменаТабличныхЧастейПоВидамКИ = Неопределено Тогда
				Отбор							= Новый Структура("ЭтоРеквизитТабличнойЧасти", Истина);
				ВидыКИТабличнойЧасти			= Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить(Отбор , "Вид");
				ИменаТабличныхЧастейПоВидамКИ	= УКИ_ИменаТабличныхЧастейПоВидамКИ(ВидыКИТабличнойЧасти, ИмяОбъекта);
			КонецЕсли;

			ИмяТабличнойЧасти	= ИменаТабличныхЧастейПоВидамКИ[ВидИнформации];
			ТабличнаяЧастьФормы	= Форма.Объект[ИмяТабличнойЧасти];

			Для Каждого СтрокаТабличнойЧастиФормы Из ТабличнаяЧастьФормы Цикл
				Представление	= СтрокаТабличнойЧастиФормы[ИмяРеквизита];
				Поле			= "Объект." + ИмяТабличнойЧасти + "[" + XMLСтрока((СтрокаТабличнойЧастиФормы.НомерСтроки - 1)) + "]." + ИмяРеквизита;

				Если ОбязательноеЗаполнение И ПустаяСтрока(Представление) И Не ВидИнформации.ПометкаУдаления Тогда
					БазоваяПодсистемаСервер.ОН_СообщитьПользователю(СтрШаблон("Поле ""%1"" не заполнено.", ВидИнформации.Наименование),,Поле);
					ТекущийУровеньОшибок = 2;
				Иначе
					Значение				= СтрокаТабличнойЧастиФормы[ИмяРеквизита + "Значение"];

					ТекущийУровеньОшибок	= УКИ_ПроверитьЗаполнениеКонтактнойИнформации(Представление, Значение, ВидИнформации, ТипИнформации, ИмяРеквизита, , Поле);

					СтрокаТабличнойЧастиФормы[ИмяРеквизита]					= Представление;
					СтрокаТабличнойЧастиФормы[ИмяРеквизита + "Значение"]	= Значение;
				КонецЕсли;

				УровеньОшибок = ?(ТекущийУровеньОшибок > УровеньОшибок, ТекущийУровеньОшибок, УровеньОшибок);
			КонецЦикла;
		Иначе
			ЭлементФормы = Форма.Элементы.Найти(ИмяРеквизита);
			Если ЭлементФормы = Неопределено Или ВидИнформации.ПометкаУдаления Тогда
				Продолжить; // Элемент не был создан. Не была вызвана отложенная инициализация.
			КонецЕсли;

			Если (СвойствоВидаИнформации.ВидРедактирования = "Диалог" Или ТипИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница) И Не (СокрЛП(Строка(Форма[ИмяРеквизита])) <> "Заполнить") Тогда
				Представление = "";
			Иначе
				Представление = Форма[ИмяРеквизита];
			КонецЕсли;

			Если ВидИнформации <> ПредыдущийВид И ОбязательноеЗаполнение И ПустаяСтрока(Представление)
				И Не УКИ_ЕстьДругиеЗаполненныеСтрокКИДанногоВида(Форма, СтрокаТаблицы, ВидИнформации) Тогда
				// И нет других строк с данными для видов КИ с множественными значениями.

				БазоваяПодсистемаСервер.ОН_СообщитьПользователю(СтрШаблон("Поле ""%1"" не заполнено.", ВидИнформации.Наименование),,, ИмяРеквизита);
				ТекущийУровеньОшибок = 2;
			Иначе
				ТекущийУровеньОшибок = УКИ_ПроверитьЗаполнениеКонтактнойИнформации(Представление, СтрокаТаблицы.Значение, ВидИнформации, ТипИнформации, ИмяРеквизита, Комментарий);
			КонецЕсли;

			УровеньОшибок = ?(ТекущийУровеньОшибок > УровеньОшибок, ТекущийУровеньОшибок, УровеньОшибок);
		КонецЕсли;

		ПредыдущийВид = ВидИнформации;
	КонецЦикла;

	Если УровеньОшибок <> 0 Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Функция УКИ_ИменаТабличныхЧастейПоВидамКИ(ТаблицаВидовКонтактнойИнформации, ИмяОбъекта)
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Вид КАК ВидКИ
	|ПОМЕСТИТЬ ВидыКИ
	|ИЗ
	|	&ТаблицаВидовКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВидыКонтактнойИнформации.Родитель.ИмяПредопределенногоВида <> """"
	|		ТОГДА ВидыКонтактнойИнформации.Родитель.ИмяПредопределенногоВида
	|		ИНАЧЕ ВидыКонтактнойИнформации.Родитель.ИмяПредопределенныхДанных
	|	КОНЕЦ КАК ИмяТабличнойЧасти,
	|	ВидыКИ.ВидКИ КАК ВидКонтактнойИнформации
	|ИЗ
	|	ВидыКИ КАК ВидыКИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|		ПО ВидыКИ.ВидКИ = ВидыКонтактнойИнформации.Ссылка";

	Запрос.УстановитьПараметр("ТаблицаВидовКонтактнойИнформации", ТаблицаВидовКонтактнойИнформации);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Результат = Новый Соответствие;
	Пока РезультатЗапроса.Следующий() Цикл
		Если ЗначениеЗаполнено(РезультатЗапроса.ИмяТабличнойЧасти) Тогда
			ИмяТабличнойЧасти = Сред(РезультатЗапроса.ИмяТабличнойЧасти, СтрНайти(РезультатЗапроса.ИмяТабличнойЧасти, ИмяОбъекта) + СтрДлина(ИмяОбъекта));
		Иначе
			ИмяТабличнойЧасти = "";
		КонецЕсли;

		Результат.Вставить(РезультатЗапроса.ВидКонтактнойИнформации, ИмяТабличнойЧасти);
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция УКИ_ПроверитьЗаполнениеКонтактнойИнформации(Представление, Значение, ВидИнформации, ТипИнформации,
	ИмяРеквизита, Комментарий = Неопределено, ПутьКРеквизиту = "")

	Если ПустаяСтрока(Значение) Тогда
		Если ПустаяСтрока(Представление) Тогда
			Возврат 0;
		КонецЕсли;

		ВидРедактирования = БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(ВидИнформации, "ВидРедактирования");
		Если ВидРедактирования = "Диалог" И СтрСравнить(Представление, "Заполнить") = 0 Тогда
			Возврат 0;
		КонецЕсли;

		КонтактнаяИнформация	= сУКИ_КонтактнаяИнформацияПоПредставлению(Представление, ВидИнформации);
		Значение				= ?(ТипЗнч(КонтактнаяИнформация) = Тип("Структура"), сУКИ_СтруктураВСтрокуJSON(КонтактнаяИнформация), "");
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(Значение), "<") Тогда
		Значение = УКИ_КонтактнаяИнформацияВJSON(Значение, ВидИнформации);
	КонецЕсли;

	// Проверка
	Если ТипИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		УровеньОшибок = УКИ_ОшибкиЗаполненияЭлектроннойПочты(Значение, ВидИнформации, ИмяРеквизита, ПутьКРеквизиту);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		УровеньОшибок = УКИ_ОшибкиЗаполненияАдреса(Значение, ВидИнформации, ИмяРеквизита, ПутьКРеквизиту);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		УровеньОшибок = УКИ_ОшибкиЗаполненияТелефона(Значение, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		УровеньОшибок = УКИ_ОшибкиЗаполненияТелефона(Значение, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		УровеньОшибок = УКИ_ОшибкиЗаполненияВебСтраницы(Значение, ВидИнформации, ИмяРеквизита);
	Иначе
		// Другое (прочее) не проверяем.
		УровеньОшибок = 0;
	КонецЕсли;

	Возврат УровеньОшибок;
КонецФункции

Функция УКИ_ОшибкиЗаполненияЭлектроннойПочты(АдресЭП, ВидИнформации, Знач ИмяРеквизита = "", ПолеРеквизита = "")
	Если Не ВидИнформации.ПроверятьКорректность Тогда
		Возврат 0;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(АдресЭП) Тогда
		Возврат 0;
	КонецЕсли;

	СтрокаОшибки		= "";
	ЭлектроннаяПочта	= сУКИ_JSONВКонтактнуюИнформациюПоПолям(АдресЭП, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);

	Попытка
		Результат = БазоваяПодсистемаКлиентСервер.ОН_АдресаЭлектроннойПочтыИзСтроки(ЭлектроннаяПочта.Value);
		Если Результат.Количество() > 1 Тогда
			СтрокаОшибки = "Допускается ввод только одного адреса электронной почты";
		ИначеЕсли Результат.Количество() = 1 Тогда
			СтрокаОшибки = Результат[0].ОписаниеОшибки;
		КонецЕсли;
	Исключение
		СтрокаОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

	Если Не ПустаяСтрока(СтрокаОшибки) Тогда
		БазоваяПодсистемаСервер.ОН_СообщитьПользователю(СтрокаОшибки,, ПолеРеквизита, ?(ПустаяСтрока(ПолеРеквизита), ИмяРеквизита, ""));
		УровеньОшибки = ?(ВидИнформации.ПроверятьКорректность, 2, 1);
	Иначе
		УровеньОшибки = 0;
	КонецЕсли;

	Возврат УровеньОшибки;
КонецФункции

Функция УКИ_ОшибкиЗаполненияАдреса(Источник, ВидИнформации, ИмяРеквизита = "", ПолеРеквизита = "")
	Если Не ВидИнформации.ПроверятьКорректность Тогда
		Возврат 0;
	КонецЕсли;
	ЕстьОшибки = Ложь;

	Если НЕ сУКИ_ЭтоНациональныйАдрес(Источник) Тогда
		Возврат 0;
	КонецЕсли;

	СписокОшибок = Обработки.РасширенныйВводКонтактнойИнформации.ОшибкиЗаполненияАдресаXDTO(Источник, ВидИнформации);
	Для Каждого Элемент Из СписокОшибок Цикл
		БазоваяПодсистемаСервер.ОН_СообщитьПользователю(Элемент.ТекстОшибки,, ПолеРеквизита, ?(ПустаяСтрока(ПолеРеквизита), ИмяРеквизита, ""));
		ЕстьОшибки = Истина;
	КонецЦикла;

	Если ЕстьОшибки И ВидИнформации.ПроверятьКорректность Тогда
		Возврат 2;
	ИначеЕсли ЕстьОшибки Тогда
		Возврат 1;
	КонецЕсли;

	Возврат 0;
КонецФункции

Функция УКИ_ОшибкиЗаполненияТелефона(Источник, ВидИнформации, ИмяРеквизита = "")
	Если Не ВидИнформации.ПроверятьКорректность Тогда
		Возврат 0;
	КонецЕсли;

	ЕстьОшибки = Ложь;

	СведенияОТелефоне	= УКИ_СведенияОТелефоне(Источник);

	СписокОшибок		= КонтактнаяИнформацияКлиентСервер.УКИ_ОшибкиЗаполненияТелефона(СведенияОТелефоне, КонтактнаяИнформацияСервер);

	Для Каждого Элемент Из СписокОшибок Цикл
		Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
			УКИ_ВывестиСообщениеПользователю(Элемент.Представление, ИмяРеквизита);
		КонецЕсли;

		ЕстьОшибки = Истина;
	КонецЦикла;

	Если ЕстьОшибки И ВидИнформации.ПроверятьКорректность Тогда
		Возврат 2;
	ИначеЕсли ЕстьОшибки Тогда
		Возврат 1;
	КонецЕсли;

	Возврат 0;
КонецФункции

Функция УКИ_СведенияОТелефоне(КонтактнаяИнформация = Неопределено) Экспорт
	Результат               = КонтактнаяИнформацияКлиентСервер.УКИ_СтруктураПолейТелефона();
	Если КонтактнаяИнформация = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	ТелефонПоПолям         = сУКИ_КонтактнаяИнформацияВСтруктуруJSON(КонтактнаяИнформация, Перечисления.ТипыКонтактнойИнформации.Телефон);

	Результат.Представление = Строка(ТелефонПоПолям.Value);
	Результат.КодСтраны     = Строка(ТелефонПоПолям.CountryCode);
	Результат.КодГорода     = Строка(ТелефонПоПолям.AreaCode);
	Результат.НомерТелефона = Строка(ТелефонПоПолям.Number);
	Результат.Добавочный    = Строка(ТелефонПоПолям.ExtNumber);
	Результат.Комментарий   = Строка(ТелефонПоПолям.Comment);

	Возврат Результат;
КонецФункции

Функция УКИ_ОшибкиЗаполненияВебСтраницы(Источник, ВидИнформации, ИмяРеквизита = "")
	Возврат 0;
КонецФункции

Функция УКИ_ЕстьДругиеЗаполненныеСтрокКИДанногоВида(Знач Форма, Знач ПроверяемаяСтрока, Знач ВидКонтактнойИнформации)
	ВсеСтрокиЭтогоВида = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Вид", ВидКонтактнойИнформации));

	Для Каждого СтрокаВида Из ВсеСтрокиЭтогоВида Цикл
		Если СтрокаВида <> ПроверяемаяСтрока Тогда
			Представление = Форма[СтрокаВида.ИмяРеквизита];
			Если Не ПустаяСтрока(Представление) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

Функция УКИ_ОпределитьЭлементСПочтойДляВосстановленияПароля(Форма, АдресЭлектроннойПочты, ДоступноРедактирование, ЭтоВнешнийПользователь = Ложь) Экспорт
	Если ЭтоВнешнийПользователь Тогда
		ТипИлиВидEmailПользователя	= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	Иначе
		ТипИлиВидEmailПользователя	= УКИ_ВидКонтактнойИнформацииПоИмени("EmailПользователя");
	КонецЕсли;

	ИмяРеквизита = УКИ_ИмяРеквизитыДляВосстановленияПароля(Форма, АдресЭлектроннойПочты, ТипИлиВидEmailПользователя);

	Если ЗначениеЗаполнено(ИмяРеквизита) И Форма.Элементы.Найти(ИмяРеквизита) <> Неопределено Тогда
		Форма.Элементы[ИмяРеквизита].Родитель.Подсказка				= "Используется для восстановления пароля.";
		Форма.Элементы[ИмяРеквизита].Родитель.ОтображениеПодсказки	= ОтображениеПодсказки.ОтображатьСправа;
		Форма.Элементы[ИмяРеквизита].Родитель.Доступность			= ДоступноРедактирование;
	КонецЕсли;

	Возврат ИмяРеквизита;
КонецФункции

Функция УКИ_ИмяРеквизитыДляВосстановленияПароля(Форма, АдресЭлектроннойПочты, ТипИлиВидEmailПользователя)
	ИмяРеквизитаДляВосстановленияПароля = "";

	ОписаниеПочты = УКИ_СтрокаОписанияПочтыДляВосстановленияПароляИзДанныхФормы(Форма, ТипИлиВидEmailПользователя, АдресЭлектроннойПочты);

	Если ОписаниеПочты = Неопределено Тогда
		// Первая почта будет для восстановления
		ОписаниеПочты = УКИ_СтрокаОписанияПочтыДляВосстановленияПароляИзДанныхФормы(Форма, ТипИлиВидEmailПользователя);
	КонецЕсли;

	Если ОписаниеПочты <> Неопределено Тогда
		ИмяРеквизитаДляВосстановленияПароля = ОписаниеПочты.ИмяРеквизита;
	КонецЕсли;

	Возврат ИмяРеквизитаДляВосстановленияПароля;
КонецФункции

Функция УКИ_КонтактнаяИнформация(Источник, Отбор) Экспорт
	КонтактнаяИнформацияОбъекты = Новый Массив; // Массив из СправочникОбъект
	КонтактнаяИнформацияСсылки  = Новый Массив;

	Если ТипЗнч(Источник) = Тип("Массив") Тогда
		СсылкиИлиОбъекты = Источник;
	Иначе
		СсылкиИлиОбъекты = БазоваяПодсистемаКлиентСервер.ОН_ЗначениеВМассиве(Источник);
	КонецЕсли;

	Для Каждого СсылкаИлиОбъект Из СсылкиИлиОбъекты Цикл
		Если БазоваяПодсистемаСервер.ОН_ЭтоСсылка(ТипЗнч(СсылкаИлиОбъект)) Тогда
			КонтактнаяИнформацияСсылки.Добавить(СсылкаИлиОбъект);
		Иначе
			КонтактнаяИнформацияОбъекты.Добавить(СсылкаИлиОбъект);
		КонецЕсли;
	КонецЦикла;

	Дата = Отбор.Дата;

	ТипыКонтактнойИнформации = Неопределено;
	Если ЗначениеЗаполнено(Отбор.ТипыКонтактнойИнформации) Тогда
		ТипыКонтактнойИнформации = Отбор.ТипыКонтактнойИнформации;

		Если ТипЗнч(ТипыКонтактнойИнформации) = Тип("ПеречислениеСсылка.ТипыКонтактнойИнформации") Тогда
			ТипыКонтактнойИнформации = БазоваяПодсистемаКлиентСервер.ОН_ЗначениеВМассиве(ТипыКонтактнойИнформации);
		КонецЕсли;
	КонецЕсли;

	ВидыКонтактнойИнформации = Неопределено;
	Если ЗначениеЗаполнено(Отбор.ВидыКонтактнойИнформации) Тогда
		ВидыКонтактнойИнформации = Отбор.ВидыКонтактнойИнформации;

		Если ТипЗнч(ВидыКонтактнойИнформации) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
			ВидыКонтактнойИнформации = БазоваяПодсистемаКлиентСервер.ОН_ЗначениеВМассиве(ВидыКонтактнойИнформации);
		КонецЕсли;
	КонецЕсли;

	Результат = УКИ_НоваяКонтактнаяИнформация(Истина);

	Если КонтактнаяИнформацияСсылки.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

		УКИ_СоздатьВТКонтактнаяИнформация(Запрос.МенеджерВременныхТаблиц, КонтактнаяИнформацияСсылки, ТипыКонтактнойИнформации, ВидыКонтактнойИнформации, Дата);

		ДействуетС = ?(ТипЗнч(Дата) = Тип("Дата"), "КонтактнаяИнформация.ДействуетС", "ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)");

		Запрос.Текст =
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Объект КАК Объект,
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	КонтактнаяИнформация.Тип КАК Тип,
		|	КонтактнаяИнформация.Значение КАК Значение,
		|	КонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
		|	КонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
		|	КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти КАК ИдентификаторСтрокиТабличнойЧасти,
		|	&ДействуетС КАК Дата,
		|	КонтактнаяИнформация.Представление КАК Представление
		|ИЗ
		|	ВТКонтактнаяИнформация КАК КонтактнаяИнформация
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДействуетС", ДействуетС);

		РезультатСсылка = Запрос.Выполнить().Выгрузить();

		Для каждого СтрокаКонтактнойИнформации Из РезультатСсылка Цикл
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКонтактнойИнформации);

			Если ПустаяСтрока(НоваяСтрока.Значение) И ЗначениеЗаполнено(НоваяСтрока.ЗначенияПолей) Тогда
				НоваяСтрока.Значение = УКИ_КонтактнаяИнформацияВJSON(НоваяСтрока.ЗначенияПолей, НоваяСтрока.Тип);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Для Каждого КонтактнаяИнформацияОбъект Из КонтактнаяИнформацияОбъекты Цикл
		Если УКИ_СодержитКонтактнуюИнформацию(ТипЗнч(КонтактнаяИнформацияОбъект)) Тогда
			Для каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформацияОбъект.КонтактнаяИнформация Цикл
				Если Не ЗначениеЗаполнено(СтрокаКонтактнойИнформации.Вид) Тогда
					Продолжить;
				КонецЕсли;

				Если КонтактнаяИнформацияСерверПовтИсп.сУКИ_КонтактнаяИнформацияОбъектаСодержитКолонкуДействуетС(КонтактнаяИнформацияОбъект.Ссылка) Тогда
					Если СтрокаКонтактнойИнформации.ДействуетС > Дата Тогда
						Продолжить;
					КонецЕсли;

					ФильтрПоДате = Новый Структура;
					ФильтрПоДате.Вставить("Объект", КонтактнаяИнформацияОбъект);
					ФильтрПоДате.Вставить("Вид",    СтрокаКонтактнойИнформации.Вид);

					НайденныеСтроки = Результат.НайтиСтроки(ФильтрПоДате);

					Если НайденныеСтроки.Количество() > 0 Тогда
						Если НайденныеСтроки[0].Дата < СтрокаКонтактнойИнформации.ДействуетС Тогда
							Результат.Удалить(НайденныеСтроки[0]);
						Иначе
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				Если (ТипыКонтактнойИнформации = Неопределено Или ТипыКонтактнойИнформации.Найти(СтрокаКонтактнойИнформации.Тип) <> Неопределено) И (ВидыКонтактнойИнформации = Неопределено Или ВидыКонтактнойИнформации.Найти(СтрокаКонтактнойИнформации.Вид) <> Неопределено) Тогда
					НоваяСтрока = Результат.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКонтактнойИнформации);

					НоваяСтрока.Объект = КонтактнаяИнформацияОбъект;

					Если ПустаяСтрока(НоваяСтрока.Значение) И ЗначениеЗаполнено(НоваяСтрока.ЗначенияПолей) Тогда
						НоваяСтрока.Значение = УКИ_КонтактнаяИнформацияВJSON(НоваяСтрока.ЗначенияПолей, НоваяСтрока.Тип);
					КонецЕсли;

					Если КонтактнаяИнформацияСерверПовтИсп.сУКИ_КонтактнаяИнформацияОбъектаСодержитКолонкуДействуетС(КонтактнаяИнформацияОбъект.Ссылка) Тогда
						НоваяСтрока.Дата = СтрокаКонтактнойИнформации.ДействуетС;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	КодЯзыка = СтрРазделить(Отбор.КодЯзыка, "_", Истина)[0];
	Если ЗначениеЗаполнено(КодЯзыка) И КодЯзыка <> Метаданные.ОсновнойЯзык.КодЯзыка Тогда
		Для Каждого СтрокаТаблицы Из Результат Цикл
			Если СтрокаТаблицы.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
				СтрокаТаблицы.Представление = БазоваяПодсистемаСервер.СФ_СтрокаЛатиницей(СтрокаТаблицы.Представление);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция УКИ_ОтборКонтактнойИнформации() Экспорт
	Отбор = Новый Структура;
	Отбор.Вставить("ТипыКонтактнойИнформации", Новый Массив);
	Отбор.Вставить("ВидыКонтактнойИнформации", Новый Массив);
	Отбор.Вставить("Дата");
	Отбор.Вставить("КодЯзыка");

	Возврат Отбор;
КонецФункции

Функция УКИ_КонтактнаяИнформацияОбъектов(СсылкиИлиОбъекты, Знач ТипыКонтактнойИнформации = Неопределено, Знач ВидыКонтактнойИнформации = Неопределено, Дата = Неопределено) Экспорт
	Отбор = УКИ_ОтборКонтактнойИнформации();

	Если ТипЗнч(ТипыКонтактнойИнформации) = Тип("Массив") Тогда
		Отбор.ТипыКонтактнойИнформации = ТипыКонтактнойИнформации;
	ИначеЕсли ЗначениеЗаполнено(ТипыКонтактнойИнформации) Тогда
		Отбор.ТипыКонтактнойИнформации.Добавить(ТипыКонтактнойИнформации);
	КонецЕсли;

	Если ТипЗнч(ВидыКонтактнойИнформации) = Тип("Массив") Тогда
		Отбор.ВидыКонтактнойИнформации = ВидыКонтактнойИнформации;
	ИначеЕсли ЗначениеЗаполнено(ВидыКонтактнойИнформации) Тогда
		Отбор.ВидыКонтактнойИнформации.Добавить(ВидыКонтактнойИнформации);
	КонецЕсли;

	Отбор.Дата = Дата;

	Возврат УКИ_КонтактнаяИнформация(СсылкиИлиОбъекты, Отбор);
КонецФункции

Функция УКИ_КонтактнаяИнформацияОбъекта(СсылкаИлиОбъект, ВидИлиТипКонтактнойИнформации = Неопределено, Дата = Неопределено, ТолькоПредставление = Истина) Экспорт
	ТипКонтактнойИнформации = Неопределено;
	ВидКонтактнойИнформации = Неопределено;
	Если ТипЗнч(ВидИлиТипКонтактнойИнформации) = Тип("ПеречислениеСсылка.ТипыКонтактнойИнформации") Тогда
		ТипКонтактнойИнформации = ВидИлиТипКонтактнойИнформации;
	ИначеЕсли ТипЗнч(ВидИлиТипКонтактнойИнформации) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		ВидКонтактнойИнформации = ВидИлиТипКонтактнойИнформации;
	КонецЕсли;

	ТипОбъекта = ТипЗнч(СсылкаИлиОбъект);
	Если НЕ БазоваяПодсистемаСервер.ОН_ЭтоСсылка(ТипОбъекта) Тогда
		Результат = УКИ_НоваяКонтактнаяИнформация();
		Если УКИ_СодержитКонтактнуюИнформацию(ТипОбъекта) Тогда
			Для каждого СтрокаКонтактнойИнформации Из СсылкаИлиОбъект.КонтактнаяИнформация Цикл
				Если ВидИлиТипКонтактнойИнформации = Неопределено ИЛИ СтрокаКонтактнойИнформации.Тип = ТипКонтактнойИнформации ИЛИ СтрокаКонтактнойИнформации.Вид = ВидКонтактнойИнформации Тогда
					НоваяСтрока = Результат.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКонтактнойИнформации);
					Если ПустаяСтрока(НоваяСтрока.Значение) И ЗначениеЗаполнено(НоваяСтрока.ЗначенияПолей) Тогда
						НоваяСтрока.Значение = УКИ_КонтактнаяИнформацияВJSON(НоваяСтрока.ЗначенияПолей, СтрокаКонтактнойИнформации.Тип);
					КонецЕсли;
					НоваяСтрока.Объект = СсылкаИлиОбъект;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Если ТолькоПредставление Тогда
			Если Результат.Количество() > 0 Тогда
				Возврат Результат[0].Представление;
			КонецЕсли;

			Возврат "";
		КонецЕсли;

		Возврат Результат;
	КонецЕсли;

	Если ТолькоПредставление Тогда
		// Оставлено для обратной совместимости.
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(СсылкаИлиОбъект.Ссылка);

		Если НЕ ЗначениеЗаполнено(ВидИлиТипКонтактнойИнформации) Тогда
			Возврат "";
		КонецЕсли;

		КонтактнаяИнформацияОбъекта = УКИ_КонтактнаяИнформацияОбъектов(МассивОбъектов, ТипКонтактнойИнформации, ВидКонтактнойИнформации, Дата);

		Если КонтактнаяИнформацияОбъекта.Количество() > 0 Тогда
			Возврат КонтактнаяИнформацияОбъекта[0].Представление;
		КонецЕсли;

		Возврат "";
	Иначе
		СсылкиИлиОбъекты = Новый Массив;
		СсылкиИлиОбъекты.Добавить(СсылкаИлиОбъект);

		Если ТипКонтактнойИнформации <> Неопределено Тогда
			ТипыКонтактнойИнформации = Новый Массив;
			ТипыКонтактнойИнформации.Добавить(ТипКонтактнойИнформации);
			ВидыКонтактнойИнформации = Неопределено;
		ИначеЕсли ВидКонтактнойИнформации <> Неопределено Тогда
			ВидыКонтактнойИнформации = Новый Массив;
			ВидыКонтактнойИнформации.Добавить(ВидКонтактнойИнформации);
			ТипыКонтактнойИнформации = Новый Массив;
			ТипыКонтактнойИнформации.Добавить(БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(ВидКонтактнойИнформации, "Тип"));
		Иначе
			ТипыКонтактнойИнформации = Неопределено;
			ВидыКонтактнойИнформации = Неопределено;
		КонецЕсли;

		Возврат УКИ_КонтактнаяИнформацияОбъектов(СсылкиИлиОбъекты, ТипыКонтактнойИнформации, ВидыКонтактнойИнформации, Дата);
	КонецЕсли;
КонецФункции

Процедура УКИ_СоздатьВТКонтактнаяИнформация(МенеджерВременныхТаблиц, МассивОбъектов, ТипыКонтактнойИнформации = Неопределено, ВидыКонтактнойИнформации = Неопределено, Дата = Неопределено) Экспорт
	Если ТипЗнч(МассивОбъектов) <> Тип("Массив") ИЛИ МассивОбъектов.Количество() = 0 Тогда
		ВызватьИсключение "Неверное значение для массива владельцев контактной информации.";
	КонецЕсли;

	ОбъектыСГруппировкойПоТипам = Новый Соответствие;
	Для каждого Ссылка Из МассивОбъектов Цикл
		ТипОбъекта		= ТипЗнч(Ссылка);
		НайденныйОбъект	= ОбъектыСГруппировкойПоТипам.Получить(ТипОбъекта); // Массив
		Если НайденныйОбъект = Неопределено Тогда
			НаборСсылок = Новый Массив;
			НаборСсылок.Добавить(Ссылка);
			ОбъектыСГруппировкойПоТипам.Вставить(ТипОбъекта, НаборСсылок);
		Иначе
			НайденныйОбъект.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;

	Запрос = Новый Запрос;
	ТекстЗапросаПодготовкаДанных = "";

	Для каждого ОбъектСКонтактнойИнформацией Из ОбъектыСГруппировкойПоТипам Цикл
		Если Не УКИ_СодержитКонтактнуюИнформацию(ОбъектСКонтактнойИнформацией.Ключ) Тогда
			ВызватьИсключение СтрШаблон("%1 не содержит контактную информацию.", Строка(ОбъектСКонтактнойИнформацией.Ключ));
		КонецЕсли;

		МетаданныеОбъекта	= Метаданные.НайтиПоТипу(ОбъектСКонтактнойИнформацией.Ключ);
		ИмяТаблицы			= МетаданныеОбъекта.Имя;

		Если МетаданныеОбъекта.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ДействуетС") <> Неопределено Тогда
			ТекстЗапросаПодготовкаДанных = ТекстЗапросаПодготовкаДанных + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактнаяИнформация.Ссылка КАК Объект,
			|	КонтактнаяИнформация.Вид КАК Вид,
			|	МИНИМУМ(КонтактнаяИнформация.НомерСтроки) КАК НомерСтроки,
			|	МАКСИМУМ(КонтактнаяИнформация.ДействуетС) КАК ДействуетС
			|ПОМЕСТИТЬ СрезКонтактнойИнформации" + ИмяТаблицы + "
			|ИЗ
			|	" + МетаданныеОбъекта.ПолноеИмя() + ".КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Ссылка В (&МассивОбъектов" + ИмяТаблицы + ")
			|	И КонтактнаяИнформация.ДействуетС <= &ДействуетС
			|	И КонтактнаяИнформация.Вид <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)
			|	И КонтактнаяИнформация.Тип <> ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ПустаяСсылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	КонтактнаяИнформация.Вид, КонтактнаяИнформация.Ссылка
			|;"
		КонецЕсли;
	КонецЦикла;

	ТекстЗапроса = "";
	ЭтоПервыйЗапрос = Истина;
	Для каждого ОбъектСКонтактнойИнформацией Из ОбъектыСГруппировкойПоТипам Цикл
		ТекстЗапроса		= ТекстЗапроса + ?(НЕ ПустаяСтрока(ТекстЗапроса), Символы.ПС + " ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС, "");
		МетаданныеОбъекта	= Метаданные.НайтиПоТипу(ОбъектСКонтактнойИнформацией.Ключ);
		ИмяТаблицы			= МетаданныеОбъекта.Имя;

		ЕстьИдентификаторСтрокиТабличнойЧасти = МетаданныеОбъекта.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ИдентификаторСтрокиТабличнойЧасти") <> Неопределено;

		Если МетаданныеОбъекта.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ДействуетС") <> Неопределено Тогда
			Если ТипЗнч(Дата) <> Тип("Дата") Тогда
				ВызватьИсключение "Для получения контактной информации, хранящей историю изменений,
					|требуется указывать дату, с которой действует запись контактной информации.";
			КонецЕсли;

			УсловияОтбора = ?(ВидыКонтактнойИнформации = Неопределено, "", " КонтактнаяИнформация.Вид В (&ВидыКонтактнойИнформации)");
			Если ПустаяСтрока(УсловияОтбора) Тогда
				УсловиеИ = "";
			Иначе
				УсловиеИ = " И ";
			КонецЕсли;
			УсловияОтбора = УсловияОтбора + ?(ТипыКонтактнойИнформации = Неопределено, "", УсловиеИ + " КонтактнаяИнформация.Тип В (&ТипыКонтактнойИнформации)"); // @query-part-2
			Если НЕ ПустаяСтрока(УсловияОтбора) Тогда
				УсловияОтбора = " ГДЕ " + УсловияОтбора;
			КонецЕсли;

			ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
			|	КонтактнаяИнформация.Ссылка КАК Объект,
			|	КонтактнаяИнформация.Вид КАК Вид,
			|	КонтактнаяИнформация.Тип КАК Тип,
			|	КонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
			|	КонтактнаяИнформация.ДействуетС КАК ДействуетС,
			|	КонтактнаяИнформация.Представление КАК Представление,
			|	КонтактнаяИнформация.Значение,
			|	КонтактнаяИнформация.ЗначенияПолей,
			|	0 КАК ИдентификаторСтрокиТабличнойЧасти
			|ИЗ
			|	&СрезКонтактнойИнформации КАК СрезКонтактнойИнформации
			|		ЛЕВОЕ СОЕДИНЕНИЕ #КонтактнаяИнформация КАК КонтактнаяИнформация
			|		ПО СрезКонтактнойИнформации.Вид = КонтактнаяИнформация.Вид
			|			И СрезКонтактнойИнформации.ДействуетС = КонтактнаяИнформация.ДействуетС
			|			И СрезКонтактнойИнформации.Объект = КонтактнаяИнформация.Ссылка " + УсловияОтбора;

			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СрезКонтактнойИнформации", "СрезКонтактнойИнформации" + ИмяТаблицы);
		Иначе
			ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
			|	КонтактнаяИнформация.Ссылка КАК Объект,
			|	КонтактнаяИнформация.Вид КАК Вид,
			|	КонтактнаяИнформация.Тип КАК Тип,
			|	КонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
			|	ДАТАВРЕМЯ(1,1,1) КАК ДействуетС,
			|	КонтактнаяИнформация.Представление КАК Представление,
			|	КонтактнаяИнформация.Значение,
			|	КонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
			|	0 КАК ИдентификаторСтрокиТабличнойЧасти
			|ИЗ
			|	#КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			| КонтактнаяИнформация.Вид <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)
			| И КонтактнаяИнформация.Тип <> ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ПустаяСсылка)
			| И КонтактнаяИнформация.Ссылка В (&МассивОбъектовИмяТаблицы)
			| И &УсловиеГдеТипКонтактнойИнформации
			| И &УсловиеГдеВидКонтактнойИнформации
			|";

			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеГдеТипКонтактнойИнформации", ?(ТипыКонтактнойИнформации = Неопределено, "ИСТИНА", "КонтактнаяИнформация.Тип В (&ТипыКонтактнойИнформации)"));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеГдеВидКонтактнойИнформации", ?(ВидыКонтактнойИнформации = Неопределено, "ИСТИНА", "КонтактнаяИнформация.Вид В (&ВидыКонтактнойИнформации)"));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&МассивОбъектовИмяТаблицы", "&МассивОбъектов" + ИмяТаблицы);
		КонецЕсли;

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#КонтактнаяИнформация" , МетаданныеОбъекта.ПолноеИмя() + ".КонтактнаяИнформация");

		Если ЭтоПервыйЗапрос Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ" , "ВЫБРАТЬ РАЗРЕШЕННЫЕ");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИЗ" , "ПОМЕСТИТЬ ВТКонтактнаяИнформация " + Символы.ПС + "ИЗ");

			ЭтоПервыйЗапрос = Ложь;
		КонецЕсли;

		Если ЕстьИдентификаторСтрокиТабличнойЧасти Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "0 КАК ИдентификаторСтрокиТабличнойЧасти", "КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти КАК ИдентификаторСтрокиТабличнойЧасти");
		КонецЕсли;

		Запрос.УстановитьПараметр("МассивОбъектов" + ИмяТаблицы, ОбъектСКонтактнойИнформацией.Значение);
	КонецЦикла;

	Запрос.Текст = ТекстЗапросаПодготовкаДанных + ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("ДействуетС", Дата);
	Запрос.УстановитьПараметр("ТипыКонтактнойИнформации", ТипыКонтактнойИнформации);
	Запрос.УстановитьПараметр("ВидыКонтактнойИнформации", ВидыКонтактнойИнформации);

	Запрос.Выполнить();
КонецПроцедуры

Функция УКИ_ПараметрыВидаКонтактнойИнформации(ТипИлиВидКонтактнойИнформации = Неопределено) Экспорт
	Если ТипЗнч(ТипИлиВидКонтактнойИнформации) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		ПараметрыВида = УКИ_ПараметрыИзВидаКонтактнойИнформации(ТипИлиВидКонтактнойИнформации);
	Иначе
		Если ТипЗнч(ТипИлиВидКонтактнойИнформации) = Тип("Строка") Тогда
			УстанавливаемыйТип = Перечисления.ТипыКонтактнойИнформации[ТипИлиВидКонтактнойИнформации];
		Иначе
			УстанавливаемыйТип = ТипИлиВидКонтактнойИнформации;
		КонецЕсли;

		ПараметрыВида = УКИ_ОписаниеПараметровКонтактнойИнформации(УстанавливаемыйТип);
	КонецЕсли;

	Возврат ПараметрыВида;
КонецФункции

Функция УКИ_ПараметрыИзВидаКонтактнойИнформации(Знач ВидКонтактнойИнформации)
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
	|	ВидыКонтактнойИнформации.Родитель КАК Родитель,
	|	ВидыКонтактнойИнформации.ЭтоГруппа КАК ЭтоГруппа,
	|	ВидыКонтактнойИнформации.Наименование КАК Наименование,
	|	ВидыКонтактнойИнформации.ТолькоНациональныйАдрес КАК ТолькоНациональныйАдрес,
	|	ВидыКонтактнойИнформации.ВидПоляДругое КАК ВидПоляДругое,
	|	ВидыКонтактнойИнформации.ВключатьСтрануВПредставление КАК ВключатьСтрануВПредставление,
	|	ВидыКонтактнойИнформации.ЗапретитьРедактированиеПользователем КАК ЗапретитьРедактированиеПользователем,
	|	ВидыКонтактнойИнформации.Используется КАК Используется,
	|	ВидыКонтактнойИнформации.МожноИзменятьСпособРедактирования КАК МожноИзменятьСпособРедактирования,
	|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение КАК ОбязательноеЗаполнение,
	|	ВидыКонтактнойИнформации.ПроверятьКорректность КАК ПроверятьКорректность,
	|	ВидыКонтактнойИнформации.РазрешитьВводНесколькихЗначений КАК РазрешитьВводНесколькихЗначений,
	|	ВидыКонтактнойИнформации.ВидРедактирования КАК ВидРедактирования,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	ВидыКонтактнойИнформации.СкрыватьНеактуальныеАдреса КАК СкрыватьНеактуальныеАдреса,
	|	ВидыКонтактнойИнформации.ТелефонCДобавочнымНомером КАК ТелефонCДобавочнымНомером,
	|	ВидыКонтактнойИнформации.МаскаНомераТелефона КАК МаскаНомераТелефона,
	|	ВидыКонтактнойИнформации.ВводитьНомерПоМаске КАК ВводитьНомерПоМаске,
	|	ВидыКонтактнойИнформации.Тип КАК Тип,
	|	ВидыКонтактнойИнформации.ХранитьИсториюИзменений КАК ХранитьИсториюИзменений,
	|	ВидыКонтактнойИнформации.ИмяПредопределенногоВида КАК Имя,
	|	ВидыКонтактнойИнформации.МеждународныйФорматАдреса КАК МеждународныйФорматАдреса
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", ВидКонтактнойИнформации);

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	Если РезультатЗапроса.Количество() = 0 Тогда
		ШаблонТекстаОшибки	= "При получении свойств контактной информации был передан неверный вид контактной информации. %1";
		ТекстОшибки			= СтрШаблон(ШаблонТекстаОшибки , Строка(ВидКонтактнойИнформации));

		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Тип = РезультатЗапроса[0].Тип;

	ТекущиеПараметры	= БазоваяПодсистемаСервер.ОН_СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса[0]);
	ПараметрыВида		= УКИ_ОписаниеПараметровКонтактнойИнформации(Тип);
	ЗаполнитьЗначенияСвойств(ПараметрыВида, ТекущиеПараметры);

	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыВида.НастройкиПроверки, ТекущиеПараметры, "ВключатьСтрануВПредставление,ПроверятьКорректность,СкрыватьНеактуальныеАдреса,ТолькоНациональныйАдрес");

		РСА_ДополнитьНастройкиПроверкиАдреса(ПараметрыВида, ВидКонтактнойИнформации);
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ПараметрыВида.НастройкиПроверки.ПроверятьКорректность = ТекущиеПараметры.ПроверятьКорректность;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ПараметрыВида.НастройкиПроверки.ТелефонCДобавочнымНомером = ТекущиеПараметры.ТелефонCДобавочнымНомером;
		ПараметрыВида.НастройкиПроверки.МаскаНомераТелефона = ТекущиеПараметры.МаскаНомераТелефона;
		ПараметрыВида.НастройкиПроверки.ВводитьНомерПоМаске = ТекущиеПараметры.ВводитьНомерПоМаске;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		ПараметрыВида.ВидПоляДругое = ТекущиеПараметры.ВидПоляДругое;
	КонецЕсли;

	ПараметрыВида.Вид = РезультатЗапроса[0].Ссылка;

	Возврат ПараметрыВида;
КонецФункции

Функция УКИ_ОписаниеПараметровКонтактнойИнформации(Знач ТипКонтактнойИнформации)
	ПараметрыВида = УКИ_ОписаниеОбщихПараметровВидаКонтактнойИнформации();

	ПараметрыВида.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ПустаяСсылка());
	ПараметрыВида.Вставить("Порядок", Неопределено);
	ПараметрыВида.Вставить("Тип", ТипКонтактнойИнформации);
	ПараметрыВида.Вставить("МожноИзменятьСпособРедактирования",    Ложь);
	ПараметрыВида.Вставить("РедактированиеТолькоВДиалоге",         Ложь);  // устарело. Оставлено для обратной совместимости.
	ПараметрыВида.Вставить("ОбязательноеЗаполнение",               Ложь);
	ПараметрыВида.Вставить("РазрешитьВводНесколькихЗначений",      Ложь);
	ПараметрыВида.Вставить("ЗапретитьРедактированиеПользователем", Ложь);
	ПараметрыВида.Вставить("ХранитьИсториюИзменений",              Ложь);
	ПараметрыВида.Вставить("МеждународныйФорматАдреса",            Ложь);
	ПараметрыВида.Вставить("ИсправлятьУстаревшиеАдреса",           Ложь);

	ВидПоляДругое = ?(ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Другое, "ОднострочноеШирокое", "");

	Если ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Или ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Факс Или ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ВидРедактирования = "ПолеВводаИДиалог";
	ИначеЕсли ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		ВидРедактирования = "Диалог";
	Иначе
		ВидРедактирования = "ПолеВвода";
	КонецЕсли;

	ПараметрыВида.Вставить("ВидРедактирования", ВидРедактирования);
	ПараметрыВида.Вставить("ВидПоляДругое",     ВидПоляДругое);

	НастройкиПроверки = УКИ_НастройкиПроверкиПараметровКонтактнойИнформации(ТипКонтактнойИнформации);

	ПараметрыВида.Вставить("НастройкиПроверки", НастройкиПроверки);

	Возврат ПараметрыВида;
КонецФункции

Функция УКИ_ОписаниеОбщихПараметровВидаКонтактнойИнформации()
	ПараметрыВида = Новый Структура;
	ПараметрыВида.Вставить("Имя",			"");
	ПараметрыВида.Вставить("Группа",		Неопределено);
	ПараметрыВида.Вставить("Наименование",	"");
	ПараметрыВида.Вставить("Используется",	Истина);

	Возврат ПараметрыВида;
КонецФункции

Функция УКИ_НастройкиПроверкиПараметровКонтактнойИнформации(Знач ТипКонтактнойИнформации)
	НастройкиПроверки = Новый Структура;

	Если ТипКонтактнойИнформации =  Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		НастройкиПроверки.Вставить("ТолькоНациональныйАдрес",		Ложь);
		НастройкиПроверки.Вставить("ПроверятьКорректность",			Ложь);
		НастройкиПроверки.Вставить("ВключатьСтрануВПредставление",	Ложь);
		НастройкиПроверки.Вставить("УказыватьОКТМО",				Ложь);
		НастройкиПроверки.Вставить("СкрыватьНеактуальныеАдреса",	Ложь); // устарело. Оставлено для обратной совместимости.
		НастройкиПроверки.Вставить("ПроверятьПоФИАС",				Истина); // устарело. Оставлено для обратной совместимости.
	ИначеЕсли ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		НастройкиПроверки = Новый Структура;
		НастройкиПроверки.Вставить("ПроверятьКорректность",			Ложь);
	ИначеЕсли ТипКонтактнойИнформации =  Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		НастройкиПроверки = Новый Структура;
		НастройкиПроверки.Вставить("ТелефонCДобавочнымНомером",		Истина);
		НастройкиПроверки.Вставить("ВводитьНомерПоМаске",			Ложь);
		НастройкиПроверки.Вставить("МаскаНомераТелефона",			"");
	КонецЕсли;

	Возврат НастройкиПроверки;
КонецФункции

Процедура УКИ_УстановитьСвойстваВидаКонтактнойИнформации(Параметры) Экспорт
	Если Не ЗначениеЗаполнено(Параметры.Вид) Тогда
		Объект = УКИ_ОбъектВидаКонтактнойИнформации(Параметры.Имя);
	ИначеЕсли ТипЗнч(Параметры.Вид) = Тип("Строка") Тогда
		Объект = УКИ_ОбъектВидаКонтактнойИнформации(Параметры.Вид);
	Иначе
		Объект = Параметры.Вид.ПолучитьОбъект();
	КонецЕсли;

	ОбновитьСтатусРегламентногоЗадания = (Объект.ИсправлятьУстаревшиеАдреса <> Параметры.ИсправлятьУстаревшиеАдреса);

	Если Параметры.РедактированиеТолькоВДиалоге Тогда
		Параметры.ВидРедактирования = "Диалог";
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(Объект, Параметры, "Тип, МожноИзменятьСпособРедактирования,
	|ВидРедактирования, ОбязательноеЗаполнение, РазрешитьВводНесколькихЗначений,
	|ЗапретитьРедактированиеПользователем, Используется, ХранитьИсториюИзменений ,МеждународныйФорматАдреса, ИсправлятьУстаревшиеАдреса");

	Если ЗначениеЗаполнено(Параметры.Имя) Тогда
		Объект.ИмяПредопределенногоВида = Параметры.Имя;
	КонецЕсли;

	Если ПустаяСтрока(Объект.ИмяПредопределенногоВида) Тогда
		Объект.ИмяПредопределенногоВида = Объект.ИмяПредопределенныхДанных;
	КонецЕсли;

	УКИ_УстановитьНаименованиеВидаКонтактнойИнформации(Объект, Параметры.Наименование);

	Если ПустаяСтрока(Объект.Родитель) Тогда
		Объект.Родитель = Параметры.Группа;
	КонецЕсли;
	Объект.ИмяГруппы = БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(Объект.Родитель, "ИмяПредопределенногоВида");

	Если Параметры.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Объект.ВидПоляДругое = Параметры.ВидПоляДругое;
	КонецЕсли;

	ПроверятьНастройки	= ТипЗнч(Параметры.НастройкиПроверки) = Тип("Структура");
	НастройкиПроверки	= УКИ_НастройкиПроверкиПараметровКонтактнойИнформации(Параметры.Тип);

	Если ПроверятьНастройки Тогда
		ЗаполнитьЗначенияСвойств(НастройкиПроверки, Параметры.НастройкиПроверки);
	КонецЕсли;

	Если ПроверятьНастройки И Параметры.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ЗаполнитьЗначенияСвойств(Объект, НастройкиПроверки);
	ИначеЕсли ПроверятьНастройки И Параметры.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		УКИ_УстановитьЗначенияРеквизитовПроверки(Объект, НастройкиПроверки);
	ИначеЕсли ПроверятьНастройки И Параметры.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Объект.ТелефонCДобавочнымНомером = НастройкиПроверки.ТелефонCДобавочнымНомером;
		Объект.МаскаНомераТелефона = НастройкиПроверки.МаскаНомераТелефона;
		Объект.ВводитьНомерПоМаске = НастройкиПроверки.ВводитьНомерПоМаске;
	Иначе
		УКИ_УстановитьЗначенияРеквизитовПроверки(Объект);
	КонецЕсли;

	Результат = сУКИ_ПроверитьПараметрыВидаКонтактнойИнформации(Объект);

	Если Результат.ЕстьОшибки Тогда
		ВызватьИсключение Результат.ТекстОшибки;
	КонецЕсли;

	Если Параметры.Порядок <> Неопределено Тогда
		Объект.РеквизитДопУпорядочивания = Параметры.Порядок;
	КонецЕсли;

	ЗначениеИспользуетсяУГруппы = БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(Объект.Родитель, "Используется");

	Если ЗначениеИспользуетсяУГруппы = Ложь И Объект.Используется Тогда
		НачатьТранзакцию();
		Попытка
			Блокировка			= Новый БлокировкаДанных;
			ЭлементБлокировки	= Блокировка.Добавить("Справочник.ВидыКонтактнойИнформации");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Родитель.Ссылка);
			Блокировка.Заблокировать();

			Родитель				= Объект.Родитель.ПолучитьОбъект();
			Родитель.Используется	= Истина;
			ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьОбъект(Родитель);

			ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьОбъект(Объект);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();

			ВызватьИсключение;
		КонецПопытки;
	Иначе
		ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьОбъект(Объект);
	КонецЕсли;

	Если ОбновитьСтатусРегламентногоЗадания Тогда
		Статус = ?(Объект.ИсправлятьУстаревшиеАдреса = Истина, Истина, Неопределено);
		РСА_УстановитьСостояниеРегламентногоЗадания(Статус);
	КонецЕсли;
КонецПроцедуры

Процедура УКИ_УстановитьЗначенияРеквизитовПроверки(Объект, НастройкиПроверки = Неопределено)
	Объект.ПроверятьКорректность		= ?(НастройкиПроверки = Неопределено, Ложь, НастройкиПроверки.ПроверятьКорректность);

	Объект.ТолькоНациональныйАдрес		= Ложь;
	Объект.ВключатьСтрануВПредставление	= Ложь;
	Объект.СкрыватьНеактуальныеАдреса	= Ложь;
КонецПроцедуры

Процедура УКИ_УстановитьНаименованиеВидаКонтактнойИнформации(Знач Объект, Знач Наименование)
	НаименованияНаРазныхЯзыках	= КонтактнаяИнформацияСерверПовтИсп.сУКИ_НаименованияВидовКонтактнойИнформации();
	ИмяПредопределенногоВида	= СокрЛП(Объект.ИмяПредопределенногоВида);

	Представление = НаименованияНаРазныхЯзыках.Получить(Метаданные.ОсновнойЯзык.КодЯзыка)[ИмяПредопределенногоВида];
	Если ЗначениеЗаполнено(Представление) Тогда
		Объект.Наименование = Представление;
	ИначеЕсли ЗначениеЗаполнено(Наименование) Тогда
		Объект.Наименование = Наименование;
	КонецЕсли;

	ПредопределенныеДанныеОбъекта = Неопределено;

	ПараметрыЗаполнения		= ОбновлениеВерсииИБСервер.сОИБ_НаборПараметровДляЗаполненияОбъекта(Объект.Метаданные());
	ИмяКлючевогоРеквизита	= ПараметрыЗаполнения.НастройкиПредопределенныхЭлементов.ПереопределяемыеНастройки.ИмяКлючевогоРеквизита;

	Если ЗначениеЗаполнено(ИмяКлючевогоРеквизита) Тогда
		ЗначениеКлючаОбъекта = Объект[ИмяКлючевогоРеквизита];

		Если ЗначениеЗаполнено(ЗначениеКлючаОбъекта) Тогда
			ПредопределенныеДанныеОбъекта = ПараметрыЗаполнения.ПредопределенныеДанные.Найти(ЗначениеКлючаОбъекта, ИмяКлючевогоРеквизита);
		КонецЕсли;
	КонецЕсли;

	Если ПредопределенныеДанныеОбъекта = Неопределено Или ПустаяСтрока(ИмяКлючевогоРеквизита) Тогда
		ПредопределенныеДанныеОбъекта = ПараметрыЗаполнения.ПредопределенныеДанные.Найти(ЗначениеКлючаОбъекта, "ИмяПредопределенныхДанных");
	КонецЕсли;

	Если ПустаяСтрока(Объект.Наименование) И ПредопределенныеДанныеОбъекта <> Неопределено Тогда
		Представление = ПредопределенныеДанныеОбъекта["Наименование" + "_" + Метаданные.ОсновнойЯзык.КодЯзыка];
		Если ПустаяСтрока(Представление) Тогда
			Представление = ПредопределенныеДанныеОбъекта["Наименование"];
		КонецЕсли;

		Если ЗначениеЗаполнено(Представление) Тогда
			Объект.Наименование = Представление;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция УКИ_ОбъектВидаКонтактнойИнформации(Имя, ЭтоГруппа = Ложь)
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.ИмяПредопределенногоВида = &Имя
	|	И ВидыКонтактнойИнформации.ЭтоГруппа = &ЭтоГруппа";

	Запрос.УстановитьПараметр("Имя",		Имя);
	Запрос.УстановитьПараметр("ЭтоГруппа",	ЭтоГруппа);

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выгрузить();
		Ссылка					= ВыборкаДетальныеЗаписи[0].Ссылка;

		Возврат Ссылка.ПолучитьОбъект();
	КонецЕсли;

	ИменаПредопределенных = Метаданные.Справочники.ВидыКонтактнойИнформации.ПолучитьИменаПредопределенных();
	ИмяПредопределенного  = ИменаПредопределенных.Найти(Имя);

	Если ИмяПредопределенного <> Неопределено Тогда
		Объект							= Справочники.ВидыКонтактнойИнформации[Имя].ПолучитьОбъект();
		Объект.ИмяПредопределенногоВида	= Имя;

		Возврат Объект;
	КонецЕсли;

	Если ЭтоГруппа Тогда
		НовыйЭлемент = Справочники.ВидыКонтактнойИнформации.СоздатьГруппу();
	Иначе
		НовыйЭлемент = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
	КонецЕсли;

	НовыйЭлемент.ИмяПредопределенногоВида = Имя;

	Возврат НовыйЭлемент;
КонецФункции

Функция УКИ_АдресЭлектроннойПочты(Знач ЗначениеКонтактнойИнформации) Экспорт
	КонтактнаяИнформацияВФорматеJSON	= УКИ_КонтактнаяИнформацияВJSON(ЗначениеКонтактнойИнформации, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);

	КонтактнаяИнформацияСтруктурой		= сУКИ_JSONВКонтактнуюИнформациюПоПолям(КонтактнаяИнформацияВФорматеJSON, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);

	Возврат КонтактнаяИнформацияСтруктурой.value;
КонецФункции

Функция УКИ_ПользовательскиеСтраныЕАЭС() Экспорт
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
		|	СтраныМира.Ссылка КАК Ссылка,
		|	СтраныМира.Наименование КАК Наименование,
		|	СтраныМира.Код КАК Код,
		|	СтраныМира.НаименованиеПолное КАК НаименованиеПолное,
		|	СтраныМира.КодАльфа2 КАК КодАльфа2,
		|	СтраныМира.МеждународноеНаименование КАК МеждународноеНаименование,
		|	СтраныМира.КодАльфа3 КАК КодАльфа3
		|ИЗ
		|	Справочник.СтраныМира КАК СтраныМира
		|ГДЕ
		|	СтраныМира.УчастникЕАЭС = ИСТИНА";

	СтраныЕАЭС = Запрос.Выполнить().Выгрузить();

	Возврат СтраныЕАЭС;
КонецФункции

Функция УКИ_ДанныеКлассификатораСтранМираПоКоду(Знач Код, Знач ТипКода = "КодСтраны") Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Код",                       "");
	Результат.Вставить("Наименование",              "");
	Результат.Вставить("НаименованиеПолное",        "");
	Результат.Вставить("КодАльфа2",                 "");
	Результат.Вставить("КодАльфа3",                 "");
	Результат.Вставить("УчастникЕАЭС",              Ложь);

	ДанныеКлассификатора = РСА_ТаблицаКлассификатора();

	Если СтрСравнить(ТипКода, "Альфа2") = 0 Тогда
		СтрокаДанных = ДанныеКлассификатора.Найти(ВРег(Код), "КодАльфа2");
	ИначеЕсли СтрСравнить(ТипКода, "Альфа3") = 0 Тогда
		СтрокаДанных = ДанныеКлассификатора.Найти(ВРег(Код), "КодАльфа3");
	Иначе
		СтрокаДанных = ДанныеКлассификатора.Найти(УКИ_КодСтраныМира(Код), "Код");
	КонецЕсли;

	Если СтрокаДанных = Неопределено Тогда
		Возврат Неопределено
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(Результат, СтрокаДанных);

	Возврат Результат;
КонецФункции

Процедура УКИ_ВывестиСообщениеПользователю(ТекстСообщения, ИмяРеквизита, ПолеРеквизита = "")
	ИмяРеквизита = ?(ПустаяСтрока(ПолеРеквизита), ИмяРеквизита, "");
	БазоваяПодсистемаСервер.ОН_СообщитьПользователю(ТекстСообщения,, ПолеРеквизита, ИмяРеквизита);
КонецПроцедуры

Функция сУКИ_ПроверитьПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформации) Экспорт
	Результат = Новый Структура("ЕстьОшибки, ТекстОшибки", Ложь, "");

	Если НЕ ЗначениеЗаполнено(ВидКонтактнойИнформации.Наименование) Тогда
		Результат.ЕстьОшибки	= Истина;
		Результат.ТекстОшибки	= СтрШаблон("Не заполнено обязательное поле Наименование у вида контактной информации ""%1"".", Строка(ВидКонтактнойИнформации.ИмяПредопределенногоВида));

		Возврат Результат;
	КонецЕсли;

	Если ВидКонтактнойИнформации.ЭтоГруппа Тогда
		Возврат Результат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидКонтактнойИнформации.Тип) Тогда
		Результат.ЕстьОшибки	= Истина;
		Результат.ТекстОшибки	= СтрШаблон("Не заполнено обязательное поле Тип у вида контактной информации ""%1"".", Строка(ВидКонтактнойИнформации.Наименование));

		Возврат Результат;
	КонецЕсли;

	Разделитель = "";
	Если ВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Если НЕ ВидКонтактнойИнформации.ТолькоНациональныйАдрес И (ВидКонтактнойИнформации.ПроверятьКорректность ИЛИ ВидКонтактнойИнформации.СкрыватьНеактуальныеАдреса) Тогда
			Результат.ТекстОшибки	= СтрШаблон("Некорректно заполнены настройки проверки адреса у вида контактной информации %1.
					| Проверка корректности адреса доступна только для российских адресов", Строка(ВидКонтактнойИнформации.Наименование));
			Разделитель				= Символы.ПС;
		КонецЕсли;

		Если ВидКонтактнойИнформации.РазрешитьВводНесколькихЗначений И ВидКонтактнойИнформации.ХранитьИсториюИзменений Тогда
			Результат.ТекстОшибки = Результат.ТекстОшибки + Разделитель + СтрШаблон("Некорректно заполнены настройки адреса у вида контактной информации %1.
					| Не допускается возможность ввода нескольких значений контактной информации при включенной истории хранения изменений.", Строка(ВидКонтактнойИнформации.Наименование));
		КонецЕсли;
	КонецЕсли;

	Результат.ЕстьОшибки = ЗначениеЗаполнено(Результат.ТекстОшибки);

	Возврат Результат;
КонецФункции

Процедура сУКИ_ИсправитьВидыКонтактнойИнформацииВФоне(Знач ПараметрыПроверки, АдресХранилища = Неопределено) Экспорт
	Возврат;

	// Зарезервировано для новых подсистем
КонецПроцедуры

Процедура сУКИ_ИсправлениеУстаревшихАдресов() Экспорт
	БазоваяПодсистемаСервер.ОН_ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ИсправлениеУстаревшихАдресов);

	РСА_ВыявитьИИсправитьУстаревшиеАдреса();
КонецПроцедуры

Функция сУКИ_СтруктураВидаКонтактнойИнформации(Знач Источник = Неопределено) Экспорт
	МетаданныеРеквизитов = Метаданные.Справочники.ВидыКонтактнойИнформации.Реквизиты;

	Если ТипЗнч(Источник) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		Реквизиты = "Наименование";
		Для Каждого МетаданныеРеквизита Из МетаданныеРеквизитов Цикл
			Реквизиты = Реквизиты + "," + МетаданныеРеквизита.Имя;
		КонецЦикла;

		Результат = БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта(Источник, Реквизиты);
	Иначе
		Результат = Новый Структура("Наименование", "");
		Для Каждого МетаданныеРеквизита Из МетаданныеРеквизитов Цикл
			Результат.Вставить(МетаданныеРеквизита.Имя, МетаданныеРеквизита.Тип.ПривестиЗначение());
		КонецЦикла;

		Если Источник <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Результат, Источник);

			Если Источник.Свойство("НастройкиПроверки") И Источник.НастройкиПроверки <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Результат, Источник.НастройкиПроверки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Результат.Вставить("Ссылка", Источник);

	Возврат Результат;
КонецФункции

Функция сУКИ_JSONВКонтактнуюИнформациюПоПолям(Знач Значение, ТипКонтактнойИнформации) Экспорт
	Значение = СтрЗаменить(Значение, "\R\N", "\r\n"); // исправление перевода строки

	Результат = Новый Структура;

	КонтактнаяИнформация = сУКИ_СтрокуJSONВСтруктуру(Значение);

	Если Не ЗначениеЗаполнено(ТипКонтактнойИнформации) Тогда
		Если КонтактнаяИнформация.Свойство("type") Тогда
			ТипКонтактнойИнформации = сУКИ_ТипКонтактнойИнформацииИзСтроки(КонтактнаяИнформация.type);
		КонецЕсли;
	КонецЕсли;

	Результат = КонтактнаяИнформацияКлиентСервер.РСА_ОписаниеНовойКонтактнойИнформации(ТипКонтактнойИнформации);

	ЗаполнитьЗначенияСвойств(Результат, КонтактнаяИнформация);

	Возврат Результат;
КонецФункции

Функция сУКИ_ТипКонтактнойИнформацииИзСтроки(Знач ТипКонтактнойИнформацииСтрокой)
	Результат = Новый Соответствие;
	Результат.Вставить("Адрес",					ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	Результат.Вставить("Телефон",				ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	Результат.Вставить("АдресЭлектроннойПочты",	ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	Результат.Вставить("Skype",					ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Skype"));
	Результат.Вставить("ВебСтраница",			ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница"));
	Результат.Вставить("Факс",					ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Факс"));
	Результат.Вставить("Другое",				ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Другое"));

	Возврат Результат[ТипКонтактнойИнформацииСтрокой];
КонецФункции

Функция сУКИ_СтрокуJSONВСтруктуру(Значение) Экспорт
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Значение);

	Попытка
		Результат = ПрочитатьJSON(ЧтениеJSON,,,, "сУКИ_ВосстановлениеПолейКонтактнойИнформации", КонтактнаяИнформацияСервер);
	Исключение
		ТекстОшибки = "Ошибка конвертации контактной информации из формата JSON.";
		ЗаписьЖурналаРегистрации("Контактная информация", УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки + Символы.ПС + Строка(Значение));
		Результат = Новый Структура;
	КонецПопытки;

	ЧтениеJSON.Закрыть();

	Если Результат.Свойство("area") Тогда
		РСА_УстановкаТипаКузбассКемеровскойОбласти(Результат);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция сУКИ_ВосстановлениеПолейКонтактнойИнформации(Свойство, Значение, ДополнительныеПараметрыФункцииПреобразования) Экспорт
	Если СтрЗаканчиваетсяНа(ВРег(Свойство), "ID") И СтрДлина(Значение) = 36 Тогда
		Возврат Новый УникальныйИдентификатор(Значение);
	КонецЕсли;

	Если СтрСравнить(Свойство, "houseType") = 0 Тогда
		Возврат ТРег(Значение);
	КонецЕсли;

	Если (СтрСравнить(Свойство, "buildings") = 0 ИЛИ СтрСравнить(Свойство, "apartments") = 0) И ТипЗнч(Значение) = Тип("Массив") Тогда
		Для Каждого ЗначениеМассива Из Значение Цикл
			ЗначениеМассива.type = ТРег(ЗначениеМассива.type);
		КонецЦикла;

		Возврат Значение;
	КонецЕсли;
КонецФункции

Функция сУКИ_КонтактнаяИнформацияВСтруктуруJSON(КонтактнаяИнформация, Знач Тип = Неопределено, Представление = "", ОбновлятьИдентификаторы = Истина) Экспорт
	Если Тип <> Неопределено И ТипЗнч(Тип) <> Тип("ПеречислениеСсылка.ТипыКонтактнойИнформации") Тогда
		Тип = КонтактнаяИнформацияСерверПовтИсп.сУКИ_ТипВидаКонтактнойИнформации(Тип);
	КонецЕсли;

	Если Тип = Неопределено Тогда
		Если ТипЗнч(КонтактнаяИнформация) = Тип("Строка") Тогда
			Если ТипЗнч(КонтактнаяИнформация) = Тип("Строка") И Лев(СокрЛ(КонтактнаяИнформация),1) = "<" Тогда
				Тип = сУКИ_ТипКонтактнойИнформации(КонтактнаяИнформация);
			КонецЕсли;
		ИначеЕсли ТипЗнч(КонтактнаяИнформация) = Тип("ОбъектXDTO") Тогда
			НайденТип	= ?(КонтактнаяИнформация.Состав = Неопределено, Неопределено, КонтактнаяИнформация.Состав.Тип());
			Тип			= сУКИ_СоответствиеXDTOТиповКонтактнойИнформации(НайденТип);
		КонецЕсли;
	КонецЕсли;

	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат РСА_КонтактнаяИнформацияВСтруктуруJSON(КонтактнаяИнформация, Тип, Представление, ОбновлятьИдентификаторы);
	КонецЕсли;

	Результат = КонтактнаяИнформацияКлиентСервер.УКИ_ОписаниеНовойКонтактнойИнформации(Тип);

	Формат9Запятых = Ложь;

	Если ТипЗнч(КонтактнаяИнформация) = Тип("Строка") Тогда
		Если ТипЗнч(КонтактнаяИнформация) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(КонтактнаяИнформация), "{") Тогда
			Возврат сУКИ_JSONВКонтактнуюИнформациюПоПолям(КонтактнаяИнформация, Тип);
		ИначеЕсли ТипЗнч(КонтактнаяИнформация) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(КонтактнаяИнформация), "<") Тогда
			РезультатПреобразования		= Новый Структура;
			XDTOКонтактнаяИнформация	= сУКИ_КонтактнаяИнформацияИзXML(КонтактнаяИнформация, Тип, РезультатПреобразования, Представление);
		Иначе
			Если СтрЧислоВхождений(КонтактнаяИнформация, ",") = 9 Тогда
				Формат9Запятых				= Истина;
				Результат.Value				= КонтактнаяИнформация
			Иначе
				XDTOКонтактнаяИнформация	= сУКИ_КонтактнаяИнформацияИзXML(КонтактнаяИнформация, Тип,, Представление);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(КонтактнаяИнформация) = Тип("Структура") Тогда
		СоответствиеПолей = Новый Соответствие;
		СоответствиеПолей.Вставить("Представление", "value");
		СоответствиеПолей.Вставить("Комментарий",   "comment");

		Если Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			СоответствиеПолей.Вставить("КодСтраны",     "countryCode");
			СоответствиеПолей.Вставить("КодГорода",     "areaCode");
			СоответствиеПолей.Вставить("НомерТелефона", "number");
			СоответствиеПолей.Вставить("Добавочный",    "extNumber");
		КонецЕсли;

		Для каждого ПолеКонтактнойИнформации Из КонтактнаяИнформация Цикл
			ИмяПоля = СоответствиеПолей.Получить(ПолеКонтактнойИнформации.Ключ);
			Если ИмяПоля <> Неопределено Тогда
				Результат[ИмяПоля] = ПолеКонтактнойИнформации.Значение;
			КонецЕсли;
		КонецЦикла;

		Возврат Результат;
	Иначе
		XDTOКонтактнаяИнформация	= КонтактнаяИнформация;
		Тип							= Перечисления.ТипыКонтактнойИнформации.Адрес;
	КонецЕсли;

	Результат.Value   = Строка(XDTOКонтактнаяИнформация.Представление);
	Результат.Comment = Строка(XDTOКонтактнаяИнформация.Комментарий);

	Если Тип <> Перечисления.ТипыКонтактнойИнформации.Адрес И Тип <> Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат Результат;
	КонецЕсли;

	Если Не Формат9Запятых Тогда
		ПространствоИмен	= "http://www.v8.1c.ru/ssl/contactinfo";
		Состав				= XDTOКонтактнаяИнформация.Состав; // см. XDTOПакет.КонтактнаяИнформация.Адрес

		Если Состав = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;

		XDTOТип = Состав.Тип();

		Если XDTOТип = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
			Результат.Вставить("Country", Строка(Состав.Страна));
			Страна = Справочники.СтраныМира.НайтиПоНаименованию(Состав.Страна, Истина);
			Результат.Вставить("CountryCode", СокрЛП(Страна.Код));
		ИначеЕсли XDTOТип = ФабрикаXDTO.Тип("http://www.v8.1c.ru/ssl/contactinfo", "НомерТелефона") Или XDTOТип = ФабрикаXDTO.Тип("http://www.v8.1c.ru/ssl/contactinfo", "НомерФакса") Тогда
			Результат.CountryCode = Состав.КодСтраны;
			Результат.AreaCode    = Состав.КодГорода;
			Результат.Number      = Состав.Номер;
			Результат.ExtNumber   = Состав.Добавочный;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция сУКИ_ТипКонтактнойИнформации(Знач XMLСтрока) Экспорт
	Возврат сУКИ_ЗначениеИзСтрокиXML(сУКИ_XSLT_ТипКонтактнойИнформацииПоСтрокеXML(XMLСтрока));
КонецФункции

Функция сУКИ_XSLT_ТипКонтактнойИнформацииПоСтрокеXML(Знач Текст)
	Преобразователь = сУКИ_ПреобразованиеXSLT_ТипКонтактнойИнформацииПоСтрокеXML();

	Возврат Преобразователь.ПреобразоватьИзСтроки(СокрЛ(Текст));
КонецФункции

Функция сУКИ_ПреобразованиеXSLT_ТипКонтактнойИнформацииПоСтрокеXML()
	Преобразователь = Новый ПреобразованиеXSL;

	Шаблон = "
		|<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform""
		|  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
		|  xmlns:ci=""http://www.v8.1c.ru/ssl/contactinfo""
		|>
		|  <xsl:output method=""xml"" omit-xml-declaration=""yes"" indent=""yes"" encoding=""utf-8""/>
		|
		|  <xsl:template match=""/"">
		|    <EnumRef.ТипыКонтактнойИнформации xmlns=""http://v8.1c.ru/8.1/data/enterprise/current-config"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""EnumRef.ТипыКонтактнойИнформации"">
		|      <xsl:call-template name=""enum-by-type"" >
		|        <xsl:with-param name=""type"" select=""ci:[КонтактнаяИнформация]/ci:[Состав]/@xsi:type"" />
		|      </xsl:call-template>
		|    </EnumRef.ТипыКонтактнойИнформации>
		|  </xsl:template>
		|
		|  <xsl:template name=""enum-by-type"">
		|    <xsl:param name=""type"" />
		|    <xsl:choose>
		|      <xsl:when test=""$type='[Адрес]'"">
		|        <xsl:text>Адрес</xsl:text>
		|      </xsl:when>
		|      <xsl:when test=""$type='[НомерТелефона]'"">
		|        <xsl:text>Телефон</xsl:text>
		|      </xsl:when>
		|      <xsl:when test=""$type='[НомерФакса]'"">
		|        <xsl:text>Факс</xsl:text>
		|      </xsl:when>
		|      <xsl:when test=""$type='[ЭлектроннаяПочта]'"">
		|        <xsl:text>АдресЭлектроннойПочты</xsl:text>
		|      </xsl:when>
		|      <xsl:when test=""$type='[ВебСайт]'"">
		|        <xsl:text>ВебСтраница</xsl:text>
		|      </xsl:when>
		|      <xsl:when test=""$type='[Прочее]'"">
		|        <xsl:text>Другое</xsl:text>
		|      </xsl:when>
		|    </xsl:choose>
		|  </xsl:template>
		|
		|</xsl:stylesheet>
		|";

		ИменаСвойствXDTOПакета = Новый Структура;

		ИменаСвойствXDTOПакета.Вставить("КонтактнаяИнформация",	"КонтактнаяИнформация");
		ИменаСвойствXDTOПакета.Вставить("Состав",				"Состав");
		ИменаСвойствXDTOПакета.Вставить("Адрес",				"Адрес");
		ИменаСвойствXDTOПакета.Вставить("НомерТелефона",		"НомерТелефона");
		ИменаСвойствXDTOПакета.Вставить("НомерФакса",			"НомерФакса");
		ИменаСвойствXDTOПакета.Вставить("ЭлектроннаяПочта",		"ЭлектроннаяПочта");
		ИменаСвойствXDTOПакета.Вставить("ВебСайт",				"ВебСайт");
		ИменаСвойствXDTOПакета.Вставить("Прочее",				"Прочее");

		Шаблон = СтрШаблон(Шаблон, ИменаСвойствXDTOПакета);

		Преобразователь.ЗагрузитьТаблицуСтилейXSLИзСтроки(Шаблон);

	Возврат Преобразователь;
КонецФункции

Функция сУКИ_ЗначениеИзСтрокиXML(Знач Текст)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Текст);

	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
КонецФункции

Функция сУКИ_СоответствиеXDTOТиповКонтактнойИнформации(НайденТип) Экспорт
	ПространствоИмен = "http://www.v8.1c.ru/ssl/contactinfo";

	СоответствиеТипов = Новый Соответствие;
	СоответствиеТипов.Вставить(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"),				Перечисления.ТипыКонтактнойИнформации.Адрес);
	СоответствиеТипов.Вставить(ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта"),	Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	СоответствиеТипов.Вставить(ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт"),			Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
	СоответствиеТипов.Вставить(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"),		Перечисления.ТипыКонтактнойИнформации.Телефон);
	СоответствиеТипов.Вставить(ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса"),			Перечисления.ТипыКонтактнойИнформации.Факс);
	СоответствиеТипов.Вставить(ФабрикаXDTO.Тип(ПространствоИмен, "Skype"),				Перечисления.ТипыКонтактнойИнформации.Skype);
	СоответствиеТипов.Вставить(ФабрикаXDTO.Тип(ПространствоИмен, "Прочее"),				Перечисления.ТипыКонтактнойИнформации.Другое);

	Возврат СоответствиеТипов[НайденТип];
КонецФункции

Функция сУКИ_КонтактнаяИнформацияИзXML(Знач Текст, Знач ОжидаемыйВид = Неопределено, РезультатПреобразования = Неопределено, Знач Представление = "") Экспорт
	ОжидаемыйТип = КонтактнаяИнформацияСерверПовтИсп.сУКИ_ТипВидаКонтактнойИнформации(ОжидаемыйВид);

	Если РезультатПреобразования = Неопределено Или ТипЗнч(РезультатПреобразования) <> Тип("Структура") Тогда
		РезультатПреобразования = Новый Структура;
	КонецЕсли;
	РезультатПреобразования.Вставить("СведенияИсправлены", Ложь);

	ПеречислениеАдрес                 = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ПеречислениеАдресЭлектроннойПочты = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ПеречислениеSkype                 = Перечисления.ТипыКонтактнойИнформации.Skype;
	ПеречислениеВебСтраница           = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
	ПеречислениеТелефон               = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ПеречислениеФакс                  = Перечисления.ТипыКонтактнойИнформации.Факс;
	ПеречислениеДругое                = Перечисления.ТипыКонтактнойИнформации.Другое;

	ПространствоИмен = "http://www.v8.1c.ru/ssl/contactinfo";

	Если ТипЗнч(Текст) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(Текст), "<") Тогда
		Текст = РСА_ПередЧтениемXDTOКонтактнаяИнформация(Текст);

		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Текст);

		ТекстОшибки = Неопределено;

		НеобходимоВосстановитьКонтактнуюИнформацию = Ложь;

		Попытка
			Результат = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация")); // см. XDTOПакет.КонтактнаяИнформация.КонтактнаяИнформация

			Если ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Адрес И сУКИ_КонтактнаяИнформацияXDTOПустая(Результат) Тогда
				НеобходимоВосстановитьКонтактнуюИнформацию = Истина;
			ИначеЕсли ПустаяСтрока(Результат.Представление) Тогда
				Результат.Представление = сУКИ_ПредставлениеКонтактнойИнформации(Результат);
			КонецЕсли;
		Исключение
			НеобходимоВосстановитьКонтактнуюИнформацию = Истина;
		КонецПопытки;

		Если НеобходимоВосстановитьКонтактнуюИнформацию Тогда
			ОписаниеПричиныОшибки = "Сведения контактной информации были восстановлены после сбоя.";
			Если ЗначениеЗаполнено(Представление) Тогда
				Результат = сУКИ_КонтактнаяИнформацияXDTOПоПредставлению(Представление, ОжидаемыйВид);
				Если СтрСравнить(Результат.Представление, Представление) <> 0  Тогда
					ТекстОшибки = ОписаниеПричиныОшибки;
					РезультатПреобразования.Вставить("ТекстОшибки", ТекстОшибки);
				КонецЕсли;
			КонецЕсли;

			// Некорректный формат XML
			ЗаписьЖурналаРегистрации("Контактная информация", УровеньЖурналаРегистрации.Предупреждение,, Текст, ОписаниеПричиныОшибки + Символы.ПС + ИнформацияОбОшибке().Описание);

			РезультатПреобразования.Вставить("СведенияИсправлены", Истина);
		КонецЕсли;

		Если ТекстОшибки = Неопределено И ОжидаемыйТип <> Неопределено Тогда
			Если Результат = Неопределено Тогда
				ТекстОшибки = СтрЗаменить("Сведения контактной информации %ОжидаемыйВид% были повреждены или некорректно заполнены.", "%ОжидаемыйВид%", Строка(ОжидаемыйВид));
			Иначе
				// Контролируем соответствие типов.
				НайденТип = ?(Результат.Состав = Неопределено, Неопределено, Результат.Состав.Тип());

				ШаблонСообщения = СтрЗаменить("Сведения %1 контактной информации %ОжидаемыйВид% были повреждены или некорректно заполнены.", "%ОжидаемыйВид%", Строка(ОжидаемыйВид));
				Если ОжидаемыйТип = ПеречислениеАдрес И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
					ТекстОшибки = СтрШаблон(ШаблонСообщения, "об адресе");
				ИначеЕсли ОжидаемыйТип = ПеречислениеАдресЭлектроннойПочты И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта") Тогда
					ТекстОшибки = СтрШаблон(ШаблонСообщения, "электронной почты");
				ИначеЕсли ОжидаемыйТип = ПеречислениеВебСтраница И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт") Тогда
					ТекстОшибки = СтрШаблон(ШаблонСообщения, "веб-страницы");
				ИначеЕсли ОжидаемыйТип = ПеречислениеТелефон И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
					ТекстОшибки = СтрШаблон(ШаблонСообщения, "о номере телефона");
				ИначеЕсли ОжидаемыйТип = ПеречислениеФакс И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса") Тогда
					ТекстОшибки = СтрШаблон(ШаблонСообщения, "о номере факса");
				ИначеЕсли ОжидаемыйТип = ПеречислениеSkype И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "Skype") Тогда
					ТекстОшибки = СтрШаблон(ШаблонСообщения, "о логине Skype");
				ИначеЕсли ОжидаемыйТип = ПеречислениеДругое И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "Прочее") Тогда
					ТекстОшибки = СтрШаблон(ШаблонСообщения, "о дополнительной");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ТекстОшибки = Неопределено Тогда
			// Успешно прочитано
			Возврат Результат;
		КонецЕсли;

		РезультатПреобразования.Вставить("ТекстОшибки", ТекстОшибки);

		// Будет возвращен пустой объект.
		Текст = "";
	КонецЕсли;

	Если ТипЗнч(Текст) = Тип("СписокЗначений") Тогда
		Представление = "";
		ЭтоНовый = Текст.Количество() = 0;
	ИначеЕсли ПустаяСтрока(Представление) И СтрЧислоСтрок(Текст) = 1 Тогда
		Представление = Строка(Текст);
		ЭтоНовый = ПустаяСтрока(Текст);
	Иначе
		ЭтоНовый = Ложь;
	КонецЕсли;

	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация")); // см. XDTOПакет.КонтактнаяИнформация

	// Разбор
	Если ОжидаемыйТип = ПеречислениеАдрес Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
		Иначе
			Результат = Обработки.РасширенныйВводКонтактнойИнформации.АдресXMLВXDTO(Текст, Представление, ОжидаемыйТип);
		КонецЕсли;
	ИначеЕсли ОжидаемыйТип = ПеречислениеТелефон Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
		Иначе
			Результат = сУКИ_ДесериализацияТелефонаФакса(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
	ИначеЕсли ОжидаемыйТип = ПеречислениеФакс Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса"));
		Иначе
			Результат = сУКИ_ДесериализацияТелефонаФакса(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
	ИначеЕсли ОжидаемыйТип = ПеречислениеАдресЭлектроннойПочты Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта"));
		Иначе
			Результат = сУКИ_ДесериализацияПрочейКонтактнойИнформации(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
	ИначеЕсли ОжидаемыйТип = ПеречислениеSkype Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Skype"));
		Иначе
			Результат = сУКИ_ДесериализацияПрочейКонтактнойИнформации(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
	ИначеЕсли ОжидаемыйТип = ПеречислениеВебСтраница Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт"));
		Иначе
			Результат = сУКИ_ДесериализацияПрочейКонтактнойИнформации(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
	ИначеЕсли ОжидаемыйТип = ПеречислениеДругое Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Прочее"));
		Иначе
			Результат = сУКИ_ДесериализацияПрочейКонтактнойИнформации(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
	Иначе
		ТекстОшибки = "Сведения о виде контактной информации %1 были повреждены или некорректно заполнены,
								|т.к. обязательное поле тип не заполнено.";
		ТекстОшибки =  СтрШаблон(ТекстОшибки, ?(ЗначениеЗаполнено(ОжидаемыйВид), """" + ОжидаемыйВид.Наименование + """", ""));
		РезультатПреобразования.Вставить("ТекстОшибки", ТекстОшибки);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция сУКИ_ПредставлениеКонтактнойИнформации(Знач КонтактнаяИнформация) Экспорт
	Если ПустаяСтрока(КонтактнаяИнформация) Тогда
		Возврат "";
	КонецЕсли;

	Если ТипЗнч(КонтактнаяИнформация) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(КонтактнаяИнформация), "{") Тогда
		КонтактнаяИнформация = сУКИ_JSONВКонтактнуюИнформациюПоПолям(КонтактнаяИнформация, Неопределено);
	ИначеЕсли ТипЗнч(КонтактнаяИнформация) = Тип("Структура") Тогда
		Если КонтактнаяИнформация.Свойство("НомерТелефона") Тогда
			ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон;
		Иначе
			ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес;
		КонецЕсли;

		КонтактнаяИнформация = сУКИ_КонтактнаяИнформацияВСтруктуруJSON(КонтактнаяИнформация, ТипКонтактнойИнформации);
	ИначеЕсли ТипЗнч(КонтактнаяИнформация) = Тип("Строка") Или ТипЗнч(КонтактнаяИнформация) = Тип("ОбъектXDTO") Тогда
		КонтактнаяИнформация = сУКИ_КонтактнаяИнформацияВСтруктуруJSON(КонтактнаяИнформация);
	КонецЕсли;

	Если ПустаяСтрока(КонтактнаяИнформация.Value) Тогда
		сУКИ_СформироватьПредставлениеКонтактнойИнформации(КонтактнаяИнформация, Неопределено);
	КонецЕсли;

	Возврат КонтактнаяИнформация.Value
КонецФункции

Функция сУКИ_КонтактнаяИнформацияXDTOПустая(Знач Результат)
	Состав = Результат.Свойства().Получить("Состав");
	Если Состав <> Неопределено Тогда
		Сведения = Результат.Состав.Свойства().Получить("Состав");
		Если Сведения <> Неопределено Тогда
			Если ТипЗнч(Результат.Состав.Состав) = Тип("Строка") Тогда
				Возврат ПустаяСтрока(Результат.Состав.Состав);
			ИначеЕсли ТипЗнч(Результат.Состав.Состав) = Тип("ОбъектXDTO") Тогда
				СписокСвойств = Результат.Состав.Состав.Свойства(); // КоллекцияСвойствXDTO
				Для каждого ПолеXDTO Из СписокСвойств Цикл
					Если ПолеXDTO.Имя = "ДопАдрЭл" Или ПолеXDTO.Имя = "СвРайМО" Тогда
						Продолжить;
					ИначеЕсли ЗначениеЗаполнено(Результат.Состав.Состав.Получить(ПолеXDTO.Имя)) Тогда
						Возврат Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ПолеЗначение = Результат.Состав.Свойства().Получить("Значение");
			Если ПолеЗначение <> Неопределено Тогда
				Возврат ПустаяСтрока(Результат.Состав.Получить("Значение"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Функция сУКИ_КонтактнаяИнформацияXDTOПоПредставлению(Текст, ОжидаемыйВид) Экспорт
	ОжидаемыйТип = КонтактнаяИнформацияСерверПовтИсп.сУКИ_ТипВидаКонтактнойИнформации(ОжидаемыйВид);

	Если ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат Обработки.РасширенныйВводКонтактнойИнформации.АдресXMLВXDTO("", Текст, ОжидаемыйТип);
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Возврат сУКИ_ДесериализацияПрочейКонтактнойИнформации("", Текст, ОжидаемыйТип);
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Возврат сУКИ_ДесериализацияПрочейКонтактнойИнформации("", Текст, ОжидаемыйТип);
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат сУКИ_ДесериализацияТелефонаФакса("", Текст, ОжидаемыйТип);
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат сУКИ_ДесериализацияТелефонаФакса("", Текст, ОжидаемыйТип);
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Skype Тогда
		Возврат сУКИ_ДесериализацияПрочейКонтактнойИнформации("", Текст, ОжидаемыйТип);
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Возврат сУКИ_ДесериализацияПрочейКонтактнойИнформации("", Текст, ОжидаемыйТип);
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

Функция сУКИ_ДесериализацияТелефонаФакса(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено) Экспорт
	Если ТипЗнч(ЗначенияПолей) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(ЗначенияПолей), "<") Тогда
		// Общий формат контактной информации.
		Возврат сУКИ_КонтактнаяИнформацияИзXML(ЗначенияПолей, ОжидаемыйТип);
	КонецЕсли;

	ПространствоИмен = "http://www.v8.1c.ru/ssl/contactinfo";

	Если ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса"));
	ИначеЕсли ОжидаемыйТип = Неопределено Тогда
		// Считаем телефоном
		Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
	Иначе
		ВызватьИсключение "Ошибка десериализации контактной информации, ожидается телефон или факс";
	КонецЕсли;

	Результат			= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Состав	= Данные;

	// Из пар ключ-значение
	СписокЗначенийПолей = Неопределено;
	Если ТипЗнч(ЗначенияПолей)=Тип("СписокЗначений") Тогда
		СписокЗначенийПолей = ЗначенияПолей;
	ИначеЕсли Не ПустаяСтрока(ЗначенияПолей) Тогда
		СписокЗначенийПолей = сУКИ_ПреобразоватьСтрокуВСписокПолей(ЗначенияПолей);
	КонецЕсли;

	ПолеПредставления = "";
	Если СписокЗначенийПолей <> Неопределено Тогда
		Для Каждого ЗначениеПоля Из СписокЗначенийПолей Цикл
			Поле = ВРег(ЗначениеПоля.Представление);

			Если Поле = "КОДСТРАНЫ" Тогда
				Данные.КодСтраны = ЗначениеПоля.Значение;
			ИначеЕсли Поле = "КОДГОРОДА" Тогда
				Данные.КодГорода = ЗначениеПоля.Значение;
			ИначеЕсли Поле = "НОМЕРТЕЛЕФОНА" Тогда
				Данные.Номер = ЗначениеПоля.Значение;
			ИначеЕсли Поле = "ДОБАВОЧНЫЙ" Тогда
				Данные.Добавочный = ЗначениеПоля.Значение;
			ИначеЕсли Поле = "ПРЕДСТАВЛЕНИЕ" Тогда
				ПолеПредставления = СокрЛП(ЗначениеПоля.Значение);
			КонецЕсли;
		КонецЦикла;

		// Представление с приоритетами.
		Если Не ПустаяСтрока(Представление) Тогда
			Результат.Представление = Представление;
		ИначеЕсли ЗначениеЗаполнено(ПолеПредставления) Тогда
			Результат.Представление = ПолеПредставления;
		Иначе
			Результат.Представление = сУКИ_ПредставлениеТелефона(Данные);
		КонецЕсли;

		Возврат Результат;
	КонецЕсли;

	// Разбираем из представления.

	// Группы цифр, разделенные символами - не цифрами: страна, город, номер, добавочный.
	// Добавочный включает в себя непробельные символы слева и справа.
	Позиция				= 1;
	Данные.КодСтраны 	= сУКИ_НайтиПодстрокуЦифр(Представление, Позиция);
	НачалоГорода		= Позиция;

	Данные.КодГорода	= сУКИ_НайтиПодстрокуЦифр(Представление, Позиция);
	Данные.Номер		= сУКИ_НайтиПодстрокуЦифр(Представление, Позиция, " -");

	Добавочный = СокрЛП(Сред(Представление, Позиция));
	Если СтрНачинаетсяС(Добавочный, ",") Тогда
		Добавочный = СокрЛ(Сред(Добавочный, 2));
	КонецЕсли;
	Если СтрНачинаетсяС(ВРег(Добавочный), "ДОБ") Тогда
		Добавочный = СокрЛ(Сред(Добавочный, СтрДлина("ДОБ") + 1));
	КонецЕсли;
	Если ВРег(Лев(Добавочный, 1 ))= "." Тогда
		Добавочный = СокрЛ(Сред(Добавочный, 2));
	КонецЕсли;
	Данные.Добавочный = СокрЛП(Добавочный);

	// Корректируем возможные ошибки.
	Если ПустаяСтрока(Данные.Номер) Тогда
		Если СтрНачинаетсяС(СокрЛ(Представление), "+") Тогда
			// Была попытка явно указать код страны, оставляем страну в покое.
			Данные.КодГорода  = "";
			Данные.Номер      = сУКИ_СократитьНеЦифры(Сред(Представление, НачалоГорода));
			Данные.Добавочный = "";
		Иначе
			Данные.КодСтраны  = "";
			Данные.КодГорода  = "";
			Данные.Номер      = Представление;
			Данные.Добавочный = "";
		КонецЕсли;
	КонецЕсли;

	Результат.Представление = Представление;

	Возврат Результат;
КонецФункции

Функция сУКИ_НайтиПодстрокуЦифр(Текст, ПозицияНачала = Неопределено, ДопустимоКромеЦифр = "")
	Если ПозицияНачала = Неопределено Тогда
		ПозицияНачала = 1;
	КонецЕсли;

	Результат		= "";
	ПозицияКонца	= СтрДлина(Текст);
	ПоискНачала		= Истина;

	Пока ПозицияНачала <= ПозицияКонца Цикл
		Символ = Сред(Текст, ПозицияНачала, 1);
		ЭтоЦифра = Символ >= "0" И Символ <= "9";

		Если ПоискНачала Тогда
			Если ЭтоЦифра Тогда
				Результат = Результат + Символ;
				ПоискНачала = Ложь;
			КонецЕсли;
		Иначе
			Если ЭтоЦифра Или СтрНайти(ДопустимоКромеЦифр, Символ) > 0 Тогда
				Результат = Результат + Символ;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЕсли;

		ПозицияНачала = ПозицияНачала + 1;
	КонецЦикла;

	// Убираем возможные висящие разделители справа.
	Возврат сУКИ_СократитьНеЦифры(Результат, ДопустимоКромеЦифр, Ложь);
КонецФункции

Функция сУКИ_СократитьНеЦифры(Текст, ДопустимоКромеЦифр = "", Направление = Истина)
	Длина = СтрДлина(Текст);
	Если Направление Тогда
		// Сокращение слева
		Индекс = 1;
		Конец  = 1 + Длина;
		Шаг    = 1;
	Иначе
		// Сокращение справа
		Индекс = Длина;
		Конец  = 0;
		Шаг    = -1;
	КонецЕсли;

	Пока Индекс <> Конец Цикл
		Символ = Сред(Текст, Индекс, 1);
		ЭтоЦифра = (Символ >= "0" И Символ <= "9") Или СтрНайти(ДопустимоКромеЦифр, Символ) = 0;
		Если ЭтоЦифра Тогда
			Прервать;
		КонецЕсли;
		Индекс = Индекс + Шаг;
	КонецЦикла;

	Если Направление Тогда
		// Сокращение слева
		Возврат Прав(Текст, Длина - Индекс + 1);
	КонецЕсли;

	// Сокращение справа
	Возврат Лев(Текст, Индекс);
КонецФункции

Функция сУКИ_ПреобразоватьСтрокуВСписокПолей(СтрокаПолей) Экспорт
	// XML сериализацию преобразовывать не надо.
	Если ТипЗнч(СтрокаПолей) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(СтрокаПолей), "<") Тогда
		Возврат СтрокаПолей;
	КонецЕсли;

	Результат = Новый СписокЗначений;

	СтруктураЗначенийПолей = сУКИ_СтруктураЗначенийПолей(СтрокаПолей);
	Для каждого ЗначениеПоля Из СтруктураЗначенийПолей Цикл
		Результат.Добавить(ЗначениеПоля.Значение, ЗначениеПоля.Ключ);
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция сУКИ_СтруктураЗначенийПолей(СтрокаПолей, ВидКонтактнойИнформации = Неопределено) Экспорт
	Если ВидКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		Результат = КонтактнаяИнформацияКлиентСервер.УКИ_СтруктураПолейАдреса();
	ИначеЕсли ВидКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
		Результат = КонтактнаяИнформацияКлиентСервер.УКИ_СтруктураПолейТелефона();
	Иначе
		Результат = Новый Структура;
	КонецЕсли;

	ПоследнийЭлемент = Неопределено;

	Для Итерация = 1 По СтрЧислоСтрок(СтрокаПолей) Цикл
		ПолученнаяСтрока = СтрПолучитьСтроку(СтрокаПолей, Итерация);
		Если СтрНачинаетсяС(ПолученнаяСтрока, Символы.Таб) Тогда
			Если Результат.Количество() > 0 Тогда
				Результат.Вставить(ПоследнийЭлемент, Результат[ПоследнийЭлемент] + Символы.ПС + Сред(ПолученнаяСтрока, 2));
			КонецЕсли;
		Иначе
			ПозицияСимвола = СтрНайти(ПолученнаяСтрока, "=");
			Если ПозицияСимвола <> 0 Тогда
				НазваниеПоля = Лев(ПолученнаяСтрока, ПозицияСимвола - 1);
				ЗначениеПоля = Сред(ПолученнаяСтрока, ПозицияСимвола + 1);
				Если НазваниеПоля = "Регион" Или НазваниеПоля = "Район" Или НазваниеПоля = "Город"
					Или НазваниеПоля = "НаселенныйПункт" Или НазваниеПоля = "Улица" Тогда
					Если СтрНайти(СтрокаПолей, НазваниеПоля + "Сокращение") = 0 Тогда
						Результат.Вставить(НазваниеПоля + "Сокращение", сУКИ_АдресноеСокращение(ЗначениеПоля));
					КонецЕсли;
				КонецЕсли;
				Результат.Вставить(НазваниеПоля, ЗначениеПоля);
				ПоследнийЭлемент = НазваниеПоля;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция сУКИ_АдресноеСокращение(Знач ГеографическоеНазвание)
	Сокращение = "";
	МассивСлов = СтрРазделить(ГеографическоеНазвание, " ", Ложь);
	Если МассивСлов.Количество() > 1 Тогда
		Сокращение = МассивСлов[МассивСлов.Количество() - 1];
	КонецЕсли;

	Возврат Сокращение;
КонецФункции

Функция сУКИ_ДесериализацияПрочейКонтактнойИнформации(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено)
	Если ТипЗнч(ЗначенияПолей) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(ЗначенияПолей), "<") Тогда
		// Общий формат контактной информации.
		Возврат сУКИ_КонтактнаяИнформацияИзXML(ЗначенияПолей, ОжидаемыйТип);
	КонецЕсли;

	ПространствоИмен		= "http://www.v8.1c.ru/ssl/contactinfo";
	Результат				= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Представление	= Представление;

	Если ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта"));
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт"));
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Skype Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Skype"));
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Прочее"));
	ИначеЕсли ОжидаемыйТип <> Неопределено Тогда
		ВызватьИсключение "Ошибка десериализации контактной информации, ожидается другой тип";
	КонецЕсли;

	Результат.Состав.Значение = Представление;

	Возврат Результат;
КонецФункции

Функция сУКИ_СформироватьПредставлениеКонтактнойИнформации(Знач Информация, Знач ВидИнформации)
	Если ТипЗнч(Информация) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(Информация), "{") Тогда
		ТипКонтактнойИнформации	= БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(ВидИнформации, "Тип");
		Информация				= сУКИ_JSONВКонтактнуюИнформациюПоПолям(Информация, ТипКонтактнойИнформации);
	КонецЕсли;

	Если ТипЗнч(Информация) = Тип("Структура") Тогда
		Если СтрСравнить(Информация.Type, Строка(ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"))) = 0 Тогда
			Возврат сУКИ_ПредставлениеАдреса(Информация, ВидИнформации);
		ИначеЕсли Информация.Type = Строка(Перечисления.ТипыКонтактнойИнформации.Телефон) ИЛИ Информация.Type = Строка(Перечисления.ТипыКонтактнойИнформации.Факс) Тогда
			ПредставлениеТелефона = сУКИ_ПредставлениеТелефона(Информация);

			Возврат ?(ПустаяСтрока(ПредставлениеТелефона), Информация.Value, ПредставлениеТелефона);
		КонецЕсли;

		Возврат Информация.Value;
	КонецЕсли;

	Возврат сУКИ_СформироватьПредставлениеКонтактнойИнформации(сУКИ_КонтактнаяИнформацияВСтруктуруJSON(Информация), ВидИнформации);
КонецФункции

Функция сУКИ_ПредставлениеТелефона(ДанныеТелефон)
	Если ТипЗнч(ДанныеТелефон) = Тип("Структура") Тогда
		ПредставлениеТелефона = КонтактнаяИнформацияКлиентСервер.УКИ_СформироватьПредставлениеТелефона(сУКИ_СократитьНеЦифры(ДанныеТелефон.countryCode), ДанныеТелефон.areaCode, ДанныеТелефон.number, ДанныеТелефон.extNumber, "");
	Иначе
		ПредставлениеТелефона = КонтактнаяИнформацияКлиентСервер.УКИ_СформироватьПредставлениеТелефона(сУКИ_СократитьНеЦифры(ДанныеТелефон.КодСтраны), ДанныеТелефон.КодГорода, ДанныеТелефон.Номер, ДанныеТелефон.Добавочный, "");
	КонецЕсли;

	Возврат ПредставлениеТелефона;
КонецФункции

Функция сУКИ_ПредставлениеАдреса(Знач Адрес, Знач ВидИнформации)
	Если ТипЗнч(ВидИнформации) = Тип("Структура") И ВидИнформации.Свойство("ВключатьСтрануВПредставление") Тогда
		ВключатьСтрануВПредставление = ВидИнформации.ВключатьСтрануВПредставление;
	Иначе
		ВключатьСтрануВПредставление = Ложь;
	КонецЕсли;

	Если ТипЗнч(Адрес) = Тип("Структура") Тогда
		КонтактнаяИнформацияКлиентСервер.РСА_ОбновитьПредставлениеАдреса(Адрес, ВключатьСтрануВПредставление);

		Возврат Адрес.Value;
	Иначе
		Представление = СокрЛП(Адрес);

		Если СтрЧислоВхождений(Представление, ",") = 9 Тогда
			ПредставлениеМассивом = СтрРазделить(Представление, ",", Ложь);
			Если ПредставлениеМассивом.Количество() > 0 Тогда
				Для Индекс = 0 По ПредставлениеМассивом.ВГраница() Цикл
					ПредставлениеМассивом[Индекс] = СокрЛП(ПредставлениеМассивом[Индекс]);
				КонецЦикла;
				ПредставлениеМассивом.Удалить(0); // удаляем страну
				Представление = СтрСоединить(ПредставлениеМассивом, ", ");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Представление;
КонецФункции

Функция сУКИ_НомерТелефонаВСтарыйСписокПолей(XDTOТелефон) Экспорт
	Результат = Новый СписокЗначений;

	Результат.Добавить(XDTOТелефон.КодСтраны,  "КодСтраны");
	Результат.Добавить(XDTOТелефон.КодГорода,  "КодГорода");
	Результат.Добавить(XDTOТелефон.Номер,      "НомерТелефона");
	Результат.Добавить(XDTOТелефон.Добавочный, "Добавочный");

	Возврат Результат;
КонецФункции

Функция сУКИ_КонтактнаяИнформацияПоПредставлению(Представление, ОжидаемыйВид, РазбиватьНаПоля = Ложь) Экспорт
	ОжидаемыйТип = КонтактнаяИнформацияСерверПовтИсп.сУКИ_ТипВидаКонтактнойИнформации(ОжидаемыйВид);

	Если ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат сУКИ_СформироватьАдресПоПредставлению(Представление, РазбиватьНаПоля);
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Телефон ИЛИ ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат сУКИ_ДесериализацияТелефонаФаксаВJSON("", Представление, ОжидаемыйТип);
	Иначе
		КонтактнойИнформации		= КонтактнаяИнформацияКлиентСервер.УКИ_ОписаниеНовойКонтактнойИнформации(ОжидаемыйТип);
		КонтактнойИнформации.Value	= Представление;

		Возврат КонтактнойИнформации;
	КонецЕсли;
КонецФункции

Функция сУКИ_СформироватьАдресПоПредставлению(Представление, РазбиватьНаПоля = Ложь)
	Адрес = КонтактнаяИнформацияКлиентСервер.РСА_ОписаниеНовойКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	//НаименованиеОсновнаяСтрана = СокрЛП(ПредопределенноеЗначение("Справочник.СтраныМира.Россия").Наименование);

	Адрес.Value = Представление;

	Возврат Адрес;

	// Зарезервировано для новых подсистем
КонецФункции

Функция сУКИ_ДесериализацияТелефонаФаксаВJSON(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено)
	Если ТипЗнч(ЗначенияПолей) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(ЗначенияПолей), "<") Тогда
		// Общий формат контактной информации.
		Возврат сУКИ_КонтактнаяИнформацияИзXML(ЗначенияПолей, ОжидаемыйТип);
	КонецЕсли;

	Данные = КонтактнаяИнформацияКлиентСервер.УКИ_ОписаниеНовойКонтактнойИнформации(ОжидаемыйТип);

	// Из пар ключ-значение
	СписокЗначенийПолей = Неопределено;
	Если ТипЗнч(ЗначенияПолей)=Тип("СписокЗначений") Тогда
		СписокЗначенийПолей = ЗначенияПолей;
	ИначеЕсли Не ПустаяСтрока(ЗначенияПолей) Тогда
		СписокЗначенийПолей = сУКИ_ПреобразоватьСтрокуВСписокПолей(ЗначенияПолей);
	КонецЕсли;

	ПолеПредставления = "";
	Если СписокЗначенийПолей <> Неопределено Тогда
		Для Каждого ЗначениеПоля Из СписокЗначенийПолей Цикл
			Поле = ВРег(ЗначениеПоля.Представление);

			Если Поле = "КОДСТРАНЫ" Тогда
				Данные.CountryCode = ЗначениеПоля.Значение;
			ИначеЕсли Поле = "КОДГОРОДА" Тогда
				Данные.AreaCode = ЗначениеПоля.Значение;
			ИначеЕсли Поле = "НОМЕРТЕЛЕФОНА" Тогда
				Данные.Number = ЗначениеПоля.Значение;
			ИначеЕсли Поле = "ДОБАВОЧНЫЙ" Тогда
				Данные.ExtNumber = ЗначениеПоля.Значение;
			ИначеЕсли Поле = "ПРЕДСТАВЛЕНИЕ" Тогда
				ПолеПредставления = СокрЛП(ЗначениеПоля.Значение);
			КонецЕсли;
		КонецЦикла;

		// Представление с приоритетами.
		Если Не ПустаяСтрока(Представление) Тогда
			Данные.Value = Представление;
		ИначеЕсли ЗначениеЗаполнено(ПолеПредставления) Тогда
			Данные.Value = ПолеПредставления;
		Иначе
			Данные.Value = сУКИ_ПредставлениеТелефона(Данные);
		КонецЕсли;

		Возврат Данные;
	КонецЕсли;

	// Разбираем из представления.

	// Группы цифр, разделенные символами - не цифрами: страна, город, номер, добавочный.
	// Добавочный включает в себя непробельные символы слева и справа.
	Позиция				= 1;
	Данные.CountryCode	= сУКИ_НайтиПодстрокуЦифр(Представление, Позиция);
	НачалоГорода		= Позиция;

	Данные.AreaCode		= сУКИ_НайтиПодстрокуЦифр(Представление, Позиция);
	Данные.Number		= сУКИ_НайтиПодстрокуЦифр(Представление, Позиция, " -");

	Добавочный = СокрЛП(Сред(Представление, Позиция));
	Если СтрНачинаетсяС(Добавочный, ",") Тогда
		Добавочный = СокрЛ(Сред(Добавочный, 2));
	КонецЕсли;
	Если ВРег(Лев(Добавочный, 3 ))= "ДОБ" Тогда
		Добавочный = СокрЛ(Сред(Добавочный, 4));
	КонецЕсли;
	Если ВРег(Лев(Добавочный, 1 ))= "." Тогда
		Добавочный = СокрЛ(Сред(Добавочный, 2));
	КонецЕсли;
	Данные.ExtNumber = СокрЛП(Добавочный);

	// Корректируем возможные ошибки.
	Если ПустаяСтрока(Данные.Number) Тогда
		Если СтрНачинаетсяС(СокрЛ(Представление), "+") Тогда
			// Была попытка явно указать код страны, оставляем страну в покое.
			Данные.AreaCode		= "";
			Данные.Number		= сУКИ_СократитьНеЦифры(Сред(Представление, НачалоГорода));
			Данные.ExtNumber	= "";
		Иначе
			Данные.CountryCode	= "";
			Данные.AreaCode		= "";
			Данные.Number		= Представление;
			Данные.ExtNumber	= "";
		КонецЕсли;
	КонецЕсли;

	Данные.Value = Представление;

	Возврат Данные;
КонецФункции

Функция сУКИ_СтруктураВСтрокуJSON(Значение) Экспорт
	КонтактнаяИнформацияПоПолям = Новый Структура;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();

	Для каждого ЭлементСтруктуры Из Значение Цикл
		Если ПустаяСтрока(ЭлементСтруктуры.Значение) И ЭлементСтруктуры.Значение <> "" Тогда
			// Преобразуем неопределено, NULL и незначащие символы в пустую строку.
			Значение[ЭлементСтруктуры.Ключ] = "";
		ИначеЕсли ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Массив") Тогда
			Индекс = ЭлементСтруктуры.Значение.Количество() - 1;
			Пока Индекс >=0 Цикл
				Если ПустаяСтрока(ЭлементСтруктуры.Значение[Индекс].number) Тогда
					ЭлементСтруктуры.Значение.Удалить(Индекс);
				КонецЕсли;
				Индекс = Индекс - 1;
			КонецЦикла;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементСтруктуры.Значение) Тогда
			КонтактнаяИнформацияПоПолям.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЕсли;
	КонецЦикла;

	Если КонтактнаяИнформацияПоПолям.Свойство("area") Тогда
		РСА_УстановкаТипаОбластьКемеровскойОбласти(КонтактнаяИнформацияПоПолям);
	КонецЕсли;

	ЗаписатьJSON(ЗаписьJSON, КонтактнаяИнформацияПоПолям,, "сУКИ_АдаптацияПолейКонтактнойИнформации", КонтактнаяИнформацияСервер);

	Возврат ЗаписьJSON.Закрыть();
КонецФункции

Функция сУКИ_АдаптацияПолейКонтактнойИнформации(Свойство, Значение, ДополнительныеПараметрыФункцииПреобразования, Отказ) Экспорт
	Если ТипЗнч(Значение) = Тип("УникальныйИдентификатор") Тогда
		Возврат Строка(Значение);
	КонецЕсли;
КонецФункции

Функция сУКИ_КонтактнаяИнформацияИзJSONВXML(Знач КонтактнаяИнформация, ОжидаемыйТип = Неопределено) Экспорт
	Если ТипЗнч(КонтактнаяИнформация) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(КонтактнаяИнформация), "{") Тогда
		КонтактнаяИнформация = сУКИ_JSONВКонтактнуюИнформациюПоПолям(КонтактнаяИнформация, ОжидаемыйТип);
	КонецЕсли;

	Если ОжидаемыйТип = Неопределено Тогда
		Если ТипЗнч(КонтактнаяИнформация) = Тип("Структура") И КонтактнаяИнформация.Свойство("type") Тогда
			ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации[КонтактнаяИнформация.type];
		ИначеЕсли ТипЗнч(КонтактнаяИнформация) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(КонтактнаяИнформация), "<") Тогда
			КонтактнаяИнформацияXML	= сУКИ_ПривестиКонтактнуюИнформациюXML(КонтактнаяИнформация);
			ОжидаемыйТип			= КонтактнаяИнформацияXML.ТипКонтактнойИнформации;
		Иначе
			ТекстОшибки = "Ошибка конвертации контактной информации из формата JSON в XML.";
			ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки + Символы.ПС + Строка(КонтактнаяИнформация));

			ВызватьИсключение "Не удалось определить тип контактной информации. Подробнее см. в журнале регистрации.";
		КонецЕсли;
	КонецЕсли;

	ПространствоИмен = "http://www.v8.1c.ru/ssl/contactinfo";

	ЭтоНовый		= ПустаяСтрока(КонтактнаяИнформация);
	Представление	= "";

	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));

	// Разбор
	Если ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
		Иначе
			Результат = РСА_КонвертироватьАдресИзJSONВXML(КонтактнаяИнформация, Представление, ОжидаемыйТип);
		КонецЕсли;
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
		Иначе
			Результат = сУКИ_КонвертироватьТелефонФаксИзJSONВXML(КонтактнаяИнформация, Представление, ОжидаемыйТип)
		КонецЕсли;
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса"));
		Иначе
			Результат = сУКИ_КонвертироватьТелефонФаксИзJSONВXML(КонтактнаяИнформация, Представление, ОжидаемыйТип)
		КонецЕсли;
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта"));
		Иначе
			Результат = сУКИ_КонвертироватьПрочуюКонтактнуюИнформациюИзJSONВXML(КонтактнаяИнформация, Представление, ОжидаемыйТип)
		КонецЕсли;
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Skype Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Skype"));
		Иначе
			Результат = сУКИ_КонвертироватьПрочуюКонтактнуюИнформациюИзJSONВXML(КонтактнаяИнформация, Представление, ОжидаемыйТип)
		КонецЕсли;
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт"));
		Иначе
			Результат = сУКИ_КонвертироватьПрочуюКонтактнуюИнформациюИзJSONВXML(КонтактнаяИнформация, Представление, ОжидаемыйТип)
		КонецЕсли;
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Прочее"));
		Иначе
			Результат = сУКИ_КонвертироватьПрочуюКонтактнуюИнформациюИзJSONВXML(КонтактнаяИнформация, Представление, ОжидаемыйТип)
		КонецЕсли;
	Иначе
		ТекстОшибки = "Сведения о виде контактной информации %1 были повреждены или некорректно заполнены,
								|т.к. обязательное поле тип не заполнено.";
		ТекстОшибки =  СтрШаблон(ТекстОшибки, ?(ЗначениеЗаполнено(ОжидаемыйТип), """" + СокрЛП(ОжидаемыйТип) + """", ""));
	КонецЕсли;

	Возврат сУКИ_КонтактнаяИнформацияXDTOВXML(Результат);
КонецФункции

Функция сУКИ_ПривестиКонтактнуюИнформациюXML(Знач Данные) Экспорт
	XMLСтрока               = "";
	ЗначенияПолей           = "";
	Комментарий             = Неопределено;
	ТипКонтактнойИнформации = Неопределено;

	Если ТипЗнч(Данные) = Тип("ОбъектXDTO") Тогда
		XMLСтрока = сУКИ_КонтактнаяИнформацияXDTOВXML(Данные);
		ТипКонтактнойИнформации = сУКИ_ЗначениеИзСтрокиXML(сУКИ_XSLT_ТипКонтактнойИнформацииПоСтрокеXML(XMLСтрока));
	Иначе
		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			ЗначенияПолей	= ?(Данные.Свойство("ЗначенияПолей"), Данные.ЗначенияПолей, "");;
			Комментарий		= ?(Данные.Свойство("Комментарий"), Данные.Комментарий, "");

			Если Данные.Свойство("ВидКонтактнойИнформации") И Данные.ВидКонтактнойИнформации <> Неопределено Тогда
				ТипКонтактнойИнформации = КонтактнаяИнформацияСерверПовтИсп.сУКИ_ТипВидаКонтактнойИнформации(Данные.ВидКонтактнойИнформации);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
			ЗначенияПолей = Данные;
		КонецЕсли;

		Если ТипЗнч(ЗначенияПолей) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(ЗначенияПолей), "{") Тогда
			XMLСтрока = сУКИ_КонтактнаяИнформацияИзJSONВXML(ЗначенияПолей, ТипКонтактнойИнформации);
			ТипКонтактнойИнформации = сУКИ_ЗначениеИзСтрокиXML(сУКИ_XSLT_ТипКонтактнойИнформацииПоСтрокеXML(XMLСтрока));
		ИначеЕсли ТипЗнч(ЗначенияПолей) = Тип("Строка") И Лев(СокрЛ(ЗначенияПолей),1) = "<" Тогда
			XMLСтрока = ЗначенияПолей;
			ТипКонтактнойИнформации = сУКИ_ЗначениеИзСтрокиXML(сУКИ_XSLT_ТипКонтактнойИнформацииПоСтрокеXML(XMLСтрока));
		ИначеЕсли ТипЗнч(ЗначенияПолей) = Тип("Строка") И ТипКонтактнойИнформации = Неопределено Тогда
			// старый формат ключ-значение
			Если СтрНайти(ВРег(ЗначенияПолей), "РЕГИОН=") > 0 Тогда
				ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес;
			ИначеЕсли СтрНайти(ВРег(ЗначенияПолей), "НОМЕРТЕЛЕФОНА=") > 0 Тогда
				ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон;
			ИначеЕсли СтрНайти(ВРег(ЗначенияПолей), "НОМЕРФАКСА=") > 0 Тогда
				ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Факс;
			Иначе
				ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Другое;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(XMLСтрока) Тогда
		Если Не ПустаяСтрока(Комментарий) Тогда
			УКИ_УстановитьКомментарийКонтактнойИнформации(ЗначенияПолей, Комментарий);
		КонецЕсли;

		Возврат Новый Структура("ДанныеXML, ТипКонтактнойИнформации", XMLСтрока, ТипКонтактнойИнформации);
	КонецЕсли;

	// Разбираем по ЗначенияПолей, ВидКонтактнойИнформации, Представление.
	ТипЗначенийПолей = ТипЗнч(ЗначенияПолей);
	Если ТипЗначенийПолей = Тип("Строка") Тогда
		// Текст из пар ключ-значение
		СтрокаXMLСтруктуры = сУКИ_XSLT_СтрокаКлючЗначениеВСтруктуру(ЗначенияПолей)
	ИначеЕсли ТипЗначенийПолей = Тип("СписокЗначений") Тогда
		// Список значений
		СтрокаXMLСтруктуры = сУКИ_XSLT_СписокЗначенийВСтруктуру(сУКИ_ЗначениеВСтрокуXML(ЗначенияПолей) );
	ИначеЕсли ТипЗначенийПолей = Тип("Соответствие") Тогда
		// Соответствие
		СтрокаXMLСтруктуры = сУКИ_XSLT_СоответствиеВСтруктуру(сУКИ_ЗначениеВСтрокуXML(ЗначенияПолей) );
	ИначеЕсли ТипЗначенийПолей = Тип("ОбъектXDTO") Тогда
		// Ожидаем структуру
		Если ЗначенияПолей.Состав.Страна = Неопределено Тогда
			ЗначенияПолей.Состав.Страна = "";
		КонецЕсли;
		Если ЗначенияПолей.Состав.Состав = Неопределено Тогда
			ЗначенияПолей.Состав.Состав = "";
		КонецЕсли;

		СтрокаXMLСтруктуры = сУКИ_ЗначениеВСтрокуXML(ЗначенияПолей);
	Иначе
		// Ожидаем структуру
		СтрокаXMLСтруктуры = сУКИ_ЗначениеВСтрокуXML(ЗначенияПолей);
	КонецЕсли;

	Результат = Новый Структура("ТипКонтактнойИнформации, ДанныеXML", ТипКонтактнойИнформации);

	ВсеТипы = Перечисления.ТипыКонтактнойИнформации;
	Если ТипКонтактнойИнформации = ВсеТипы.Адрес Тогда
		Результат.ДанныеXML = сУКИ_XSLT_СтруктураВАдрес(СтрокаXMLСтруктуры, Данные.Представление, Комментарий);
	ИначеЕсли ТипКонтактнойИнформации = ВсеТипы.АдресЭлектроннойПочты Тогда
		Результат.ДанныеXML = сУКИ_XSLT_СтруктураВАдресЭлектроннойПочты(СтрокаXMLСтруктуры, Данные.Представление, Комментарий);
	ИначеЕсли ТипКонтактнойИнформации = ВсеТипы.ВебСтраница Тогда
		Результат.ДанныеXML = сУКИ_XSLT_СтруктураВВебСтраницу(СтрокаXMLСтруктуры, Данные.Представление, Комментарий);
	ИначеЕсли ТипКонтактнойИнформации = ВсеТипы.Телефон Тогда
		Результат.ДанныеXML = сУКИ_XSLT_СтруктураВТелефон(СтрокаXMLСтруктуры, Данные.Представление, Комментарий);
	ИначеЕсли ТипКонтактнойИнформации = ВсеТипы.Факс Тогда
		Результат.ДанныеXML = сУКИ_XSLT_СтруктураВФакс(СтрокаXMLСтруктуры, Данные.Представление, Комментарий);
	ИначеЕсли ТипКонтактнойИнформации = ВсеТипы.Другое Тогда
		Результат.ДанныеXML = сУКИ_XSLT_СтруктураВДругое(СтрокаXMLСтруктуры, Данные.Представление, Комментарий);
	ИначеЕсли ТипКонтактнойИнформации = ВсеТипы.Skype Тогда
		Результат.ДанныеXML = сУКИ_XSLT_СтруктураВДругое(СтрокаXMLСтруктуры, Данные.Представление, Комментарий);
	Иначе
		ВызватьИсключение "Ошибка параметров преобразования, не определен тип контактной информации";
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция сУКИ_КонвертироватьТелефонФаксИзJSONВXML(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено)
	Если ТипЗнч(ЗначенияПолей) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(ЗначенияПолей), "<") Тогда
		// Общий формат контактной информации.
		Возврат сУКИ_КонтактнаяИнформацияИзXML(ЗначенияПолей, ОжидаемыйТип);
	КонецЕсли;

	ПространствоИмен = "http://www.v8.1c.ru/ssl/contactinfo";

	Если ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса"));
	ИначеЕсли ОжидаемыйТип = Неопределено Тогда
		// Считаем телефоном
		Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
	Иначе
		ВызватьИсключение "Ошибка преобразования контактной информации, ожидается телефон или факс";
	КонецЕсли;

	Результат			= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Состав	= Данные;

	ПолеПредставления = "";
	Для Каждого ЗначениеПоля Из ЗначенияПолей Цикл
		Поле = ВРег(ЗначениеПоля.Ключ);

		Если Поле = "COUNTRYCODE" Тогда
			Данные.КодСтраны = ЗначениеПоля.Значение;
		ИначеЕсли Поле = "AREACODE" Тогда
			Данные.КодГорода = ЗначениеПоля.Значение;
		ИначеЕсли Поле = "NUMBER" Тогда
			Данные.Номер = ЗначениеПоля.Значение;
		ИначеЕсли Поле = "EXTNUMBER" Тогда
			Данные.Добавочный = ЗначениеПоля.Значение;
		ИначеЕсли Поле = "VALUE" Тогда
			ПолеПредставления = СокрЛП(ЗначениеПоля.Значение);
		ИначеЕсли Поле = "COMMENT" Тогда
			Комментарий = СокрЛП(ЗначениеПоля.Значение);
			Если ЗначениеЗаполнено(Комментарий) Тогда
				Результат.Комментарий = Комментарий;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Представление с приоритетами.
	Если Не ПустаяСтрока(Представление) Тогда
		Результат.Представление = Представление;
	ИначеЕсли ЗначениеЗаполнено(ПолеПредставления) Тогда
		Результат.Представление = ПолеПредставления;
	Иначе
		Результат.Представление = сУКИ_ПредставлениеТелефона(Данные);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция сУКИ_КонвертироватьПрочуюКонтактнуюИнформациюИзJSONВXML(ЗначенияПолей, Знач Представление = "", ОжидаемыйТип = Неопределено)
	Если ТипЗнч(ЗначенияПолей) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(ЗначенияПолей), "<") Тогда
		// Общий формат контактной информации.
		Возврат сУКИ_КонтактнаяИнформацияИзXML(ЗначенияПолей, ОжидаемыйТип);
	КонецЕсли;

	ПространствоИмен	= "http://www.v8.1c.ru/ssl/contactinfo";
	Результат			= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));

	Если ПустаяСтрока(Представление) И ЗначенияПолей.Свойство("Value") И ЗначениеЗаполнено(ЗначенияПолей.Value) Тогда
		Представление = ЗначенияПолей.Value;
	КонецЕсли;

	Результат.Представление = Представление;

	Если ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта"));
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт"));
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Skype Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Skype"));
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Прочее"));
	ИначеЕсли ОжидаемыйТип <> Неопределено Тогда
		ВызватьИсключение "Ошибка десериализации контактной информации, ожидается другой тип";
	КонецЕсли;

	Результат.Состав.Значение = Представление;

	Комментарий = "";
	Если ЗначенияПолей.Свойство("Comment") И ЗначениеЗаполнено(ЗначенияПолей.Comment) Тогда
		Комментарий = СокрЛП(ЗначенияПолей.Comment);
		Если ЗначениеЗаполнено(Комментарий) Тогда
			Результат.Комментарий = Комментарий;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция сУКИ_КонтактнаяИнформацияXDTOВXML(ОбъектXDTOИнформации) Экспорт
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(Новый ПараметрыЗаписиXML(, , Ложь, Ложь, ""));

	Если ОбъектXDTOИнформации <> Неопределено Тогда
		ФабрикаXDTO.ЗаписатьXML(Запись, ОбъектXDTOИнформации);
	КонецЕсли;

	Результат = СтрЗаменить(Запись.Закрыть(), Символы.ПС, "&#10;");
	Результат = СтрЗаменить(Результат, "<ВнутригРайон/>", "");// Совместимость с КЛАДР
	Результат = РСА_ПередЗаписьюXDTOКонтактнаяИнформация(Результат);

	Возврат Результат;
КонецФункции

Функция сУКИ_XSLT_СтрокаКлючЗначениеВСтруктуру(Знач Текст)
	Преобразователь = сУКИ_ПреобразованиеXSLT_СтрокаКлючЗначениеВСтруктуру();

	Возврат Преобразователь.ПреобразоватьИзСтроки(сУКИ_XSLT_УзелСтрокиПараметра(Текст));
КонецФункции

Функция сУКИ_XSLT_СписокЗначенийВСтруктуру(Текст)
	Преобразователь = сУКИ_ПреобразованиеXSLT_СписокЗначенийВСтруктуру();

	Возврат Преобразователь.ПреобразоватьИзСтроки(Текст);
КонецФункции

Функция сУКИ_XSLT_СоответствиеВСтруктуру(Текст)
	Преобразователь = сУКИ_ПреобразованиеXSLT_СоответствиеВСтруктуру();

	Возврат Преобразователь.ПреобразоватьИзСтроки(Текст);
КонецФункции

Функция сУКИ_XSLT_СтруктураВАдрес(Знач Текст, Знач Представление = Неопределено, Знач Комментарий = Неопределено)
	Преобразователь = сУКИ_ПреобразованиеXSLT_ПреобразованиеXSL();

	Возврат сУКИ_XSLT_КонтрольПредставленияИКомментария(Преобразователь.ПреобразоватьИзСтроки(Текст), Представление, Комментарий);
КонецФункции

Функция сУКИ_XSLT_СтруктураВАдресЭлектроннойПочты(Знач Текст, Знач Представление = Неопределено, Знач Комментарий = Неопределено)
	Преобразователь = сУКИ_ПреобразованиеXSLT_СтруктураВСтроковыйСостав("ЭлектроннаяПочта");

	Возврат сУКИ_XSLT_КонтрольПредставленияИКомментария(сУКИ_XSLT_КонтрольСтроковогоЗначенияПростогоТипа(Преобразователь.ПреобразоватьИзСтроки(Текст), Представление), Представление, Комментарий);
КонецФункции

Функция сУКИ_XSLT_СтруктураВВебСтраницу(Знач Текст, Знач Представление = Неопределено, Знач Комментарий = Неопределено)
	Преобразователь = сУКИ_ПреобразованиеXSLT_СтруктураВСтроковыйСостав("ВебСайт");

	Возврат сУКИ_XSLT_КонтрольПредставленияИКомментария(сУКИ_XSLT_КонтрольСтроковогоЗначенияПростогоТипа( Преобразователь.ПреобразоватьИзСтроки(Текст), Представление), Представление, Комментарий);
КонецФункции

Функция сУКИ_XSLT_СтруктураВТелефон(Знач Текст, Знач Представление = Неопределено, Знач Комментарий = Неопределено)
	Преобразователь = сУКИ_ПреобразованиеXSLT_СтруктураВТелефонФакс("НомерТелефона");

	Возврат сУКИ_XSLT_КонтрольПредставленияИКомментария(Преобразователь.ПреобразоватьИзСтроки(Текст), Представление, Комментарий);
КонецФункции

Функция сУКИ_XSLT_СтруктураВФакс(Знач Текст, Знач Представление = Неопределено, Знач Комментарий = Неопределено)
	Преобразователь = сУКИ_ПреобразованиеXSLT_СтруктураВТелефонФакс("НомерФакса");

	Возврат сУКИ_XSLT_КонтрольПредставленияИКомментария(Преобразователь.ПреобразоватьИзСтроки(Текст), Представление, Комментарий);
КонецФункции

Функция сУКИ_XSLT_СтруктураВДругое(Знач Текст, Знач Представление = Неопределено, Знач Комментарий = Неопределено)
	Преобразователь = сУКИ_ПреобразованиеXSLT_СтруктураВСтроковыйСостав("Прочее");

	Возврат сУКИ_XSLT_КонтрольПредставленияИКомментария(сУКИ_XSLT_КонтрольСтроковогоЗначенияПростогоТипа( Преобразователь.ПреобразоватьИзСтроки(Текст), Представление), Представление, Комментарий);
КонецФункции

Функция сУКИ_XSLT_КонтрольПредставленияИКомментария(Знач Текст, Знач Представление = Неопределено, Знач Комментарий = Неопределено)
	Если Представление = Неопределено И Комментарий = Неопределено Тогда
		Возврат Текст;
	КонецЕсли;

	XSLT_Текст = Новый ТекстовыйДокумент;
	XSLT_Текст.ДобавитьСтроку("
		|<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform""
		|  xmlns:tns=""http://www.v8.1c.ru/ssl/contactinfo""
		|  xmlns=""http://www.v8.1c.ru/ssl/contactinfo""
		|>
		|  <xsl:output method=""xml"" omit-xml-declaration=""yes"" indent=""yes"" encoding=""utf-8""/>
		|
		|  <xsl:template match=""node() | @*"">
		|    <xsl:copy>
		|      <xsl:apply-templates select=""node() | @*"" />
		|    </xsl:copy>
		|  </xsl:template>
		|");

	Если Представление <> Неопределено Тогда
		XSLT_Текст.ДобавитьСтроку("
		|  <xsl:template match=""tns:КонтактнаяИнформация/@Представление"">
		|    <xsl:attribute name=""Представление"">
		|      <xsl:choose>
		|        <xsl:when test="".=''"">" + сУКИ_НормализованнаяСтрокаXML(Представление) + "</xsl:when>
		|        <xsl:otherwise>
		|          <xsl:value-of select="".""/>
		|        </xsl:otherwise>
		|      </xsl:choose>
		|    </xsl:attribute>
		|  </xsl:template>
		|");
	КонецЕсли;

	Если Комментарий <> Неопределено Тогда
		XSLT_Текст.ДобавитьСтроку("
		|  <xsl:template match=""tns:КонтактнаяИнформация/tns:Комментарий"">
		|    <xsl:element name=""Комментарий"">
		|      <xsl:choose>
		|        <xsl:when test="".=''"">" + сУКИ_НормализованнаяСтрокаXML(Комментарий) + "</xsl:when>
		|        <xsl:otherwise>
		|          <xsl:value-of select="".""/>
		|        </xsl:otherwise>
		|      </xsl:choose>
		|    </xsl:element>
		|  </xsl:template>
		|");
	КонецЕсли;
		XSLT_Текст.ДобавитьСтроку("
		|</xsl:stylesheet>
		|");

	Преобразователь = Новый ПреобразованиеXSL;
	Преобразователь.ЗагрузитьТаблицуСтилейXSLИзСтроки(XSLT_Текст.ПолучитьТекст());

	Возврат Преобразователь.ПреобразоватьИзСтроки(Текст);
КонецФункции

Функция сУКИ_ПреобразованиеXSLT_СтрокаКлючЗначениеВСтруктуру()
	Преобразователь = Новый ПреобразованиеXSL;
	Преобразователь.ЗагрузитьТаблицуСтилейXSLИзСтроки("
		|<xsl:stylesheet version=""1.0""
		|  xmlns:xsl=""http://www.w3.org/1999/XSL/Transform""
		|  xmlns:str=""http://exslt.org/strings""
		|  extension-element-prefixes=""str""
		|>
		|<xsl:output method=""xml"" omit-xml-declaration=""yes"" indent=""yes"" encoding=""utf-8""/>
		|" + сУКИ_XSLT_ШаблоныСтроковыхФункций() + "
		|
		|  <xsl:template match=""ExternalParamNode"">
		|
		|    <xsl:variable name=""source"">
		|      <xsl:call-template name=""str-replace-all"">
		|        <xsl:with-param name=""str"" select=""."" />
		|        <xsl:with-param name=""search-for"" select=""'&#10;&#09;'"" />
		|        <xsl:with-param name=""replace-by"" select=""'&#13;'"" />
		|      </xsl:call-template>
		|    </xsl:variable>
		|
		|    <Structure xmlns=""http://v8.1c.ru/8.1/data/core"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Structure"">
		|
		|     <xsl:for-each select=""str:tokenize($source, '&#10;')"" >
		|       <xsl:if test=""contains(., '=')"">
		|
		|         <xsl:element name=""Property"">
		|           <xsl:attribute name=""name"" >
		|             <xsl:call-template name=""str-trim-all"">
		|               <xsl:with-param name=""str"" select=""substring-before(., '=')"" />
		|             </xsl:call-template>
		|           </xsl:attribute>
		|
		|           <Value xsi:type=""xs:string"">
		|             <xsl:call-template name=""str-replace-all"">
		|               <xsl:with-param name=""str"" select=""substring-after(., '=')"" />
		|               <xsl:with-param name=""search-for"" select=""'&#13;'"" />
		|               <xsl:with-param name=""replace-by"" select=""'&#10;'"" />
		|             </xsl:call-template>
		|           </Value>
		|
		|         </xsl:element>
		|
		|       </xsl:if>
		|     </xsl:for-each>
		|
		|    </Structure>
		|
		|  </xsl:template>
		|
		|</xsl:stylesheet>
		|");

	Возврат Преобразователь;
КонецФункции

Функция сУКИ_ПреобразованиеXSLT_СписокЗначенийВСтруктуру()
	Преобразователь = Новый ПреобразованиеXSL;
	Преобразователь.ЗагрузитьТаблицуСтилейXSLИзСтроки("
		|<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform""
		|  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
		|  xmlns:tns=""http://v8.1c.ru/8.1/data/core""
		|  xmlns=""http://v8.1c.ru/8.1/data/core""
		|>
		|<xsl:output method=""xml"" omit-xml-declaration=""yes"" indent=""yes"" encoding=""utf-8""/>
		|" + сУКИ_XSLT_ШаблоныСтроковыхФункций() + "
		|
		|  <xsl:template match=""/"">
		|    <Structure xmlns=""http://v8.1c.ru/8.1/data/core"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Structure"">
		|      <xsl:apply-templates select=""//tns:ValueListType/tns:item"" />
		|    </Structure >
		|  </xsl:template>
		|
		|  <xsl:template match=""//tns:ValueListType/tns:item"">
		|    <xsl:element name=""Property"">
		|      <xsl:attribute name=""name"">
		|        <xsl:call-template name=""str-trim-all"">
		|          <xsl:with-param name=""str"" select=""tns:presentation"" />
		|        </xsl:call-template>
		|      </xsl:attribute>
		|
		|      <xsl:element name=""Value"">
		|        <xsl:attribute name=""xsi:type"">
		|          <xsl:value-of select=""tns:value/@xsi:type""/>
		|        </xsl:attribute>
		|        <xsl:value-of select=""tns:value""/>
		|      </xsl:element>
		|
		|    </xsl:element>
		|</xsl:template>
		|
		|</xsl:stylesheet>
		|");

	Возврат Преобразователь;
КонецФункции

Функция сУКИ_ПреобразованиеXSLT_СоответствиеВСтруктуру()
	Преобразователь = Новый ПреобразованиеXSL;
	Преобразователь.ЗагрузитьТаблицуСтилейXSLИзСтроки("
		|<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform""
		|  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
		|  xmlns:tns=""http://v8.1c.ru/8.1/data/core""
		|  xmlns=""http://v8.1c.ru/8.1/data/core""
		|>
		|<xsl:output method=""xml"" omit-xml-declaration=""yes"" indent=""yes"" encoding=""utf-8""/>
		|" + сУКИ_XSLT_ШаблоныСтроковыхФункций() + "
		|
		|  <xsl:template match=""/"">
		|    <Structure xmlns=""http://v8.1c.ru/8.1/data/core"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Structure"">
		|      <xsl:apply-templates select=""//tns:Map/tns:pair"" />
		|    </Structure >
		|  </xsl:template>
		|
		|  <xsl:template match=""//tns:Map/tns:pair"">
		|  <xsl:element name=""Property"">
		|    <xsl:attribute name=""name"">
		|      <xsl:call-template name=""str-trim-all"">
		|        <xsl:with-param name=""str"" select=""tns:Key"" />
		|      </xsl:call-template>
		|    </xsl:attribute>
		|
		|    <xsl:element name=""Value"">
		|      <xsl:attribute name=""xsi:type"">
		|        <xsl:value-of select=""tns:Value/@xsi:type""/>
		|      </xsl:attribute>
		|        <xsl:value-of select=""tns:Value""/>
		|      </xsl:element>
		|
		|    </xsl:element>
		|  </xsl:template>
		|
		|</xsl:stylesheet>
		|");

	Возврат Преобразователь;
КонецФункции

Функция сУКИ_ПреобразованиеXSLT_ПреобразованиеXSL()
	ДополнительныеПравилаПреобразования	= РСА_ДополнительныеПравилаПреобразования();
	ОсновнаяСтрана						= ПредопределенноеЗначение("Справочник.СтраныМира.Россия");

	Преобразователь = Новый ПреобразованиеXSL;
	Преобразователь.ЗагрузитьТаблицуСтилейXSLИзСтроки("
		|<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform""
		|  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
		|  xmlns:xs=""http://www.w3.org/2001/XMLSchema""
		|  xmlns:tns=""http://v8.1c.ru/8.1/data/core""
		|  xmlns=""http://www.v8.1c.ru/ssl/contactinfo""
		|
		|  xmlns:data=""http://www.v8.1c.ru/ssl/contactinfo""
		|
		|  xmlns:exsl=""http://exslt.org/common""
		|  extension-element-prefixes=""exsl""
		|  exclude-result-prefixes=""data tns""
		|>
		|<xsl:output method=""xml"" omit-xml-declaration=""yes"" indent=""yes"" encoding=""utf-8""/>
		|  " + сУКИ_XSLT_ШаблоныСтроковыхФункций() + "
		|
		|  <xsl:variable name=""local-country"">" + ОсновнаяСтрана + "</xsl:variable>
		|
		|  <xsl:variable name=""presentation"" select=""tns:Structure/tns:Property[@name='Представление']/tns:Value/text()"" />
		|
		|  <xsl:template match=""/"">
		|    <КонтактнаяИнформация>
		|
		|      <xsl:attribute name=""Представление"">
		|        <xsl:value-of select=""$presentation""/>
		|      </xsl:attribute>
		|      <xsl:element name=""Комментарий"">
		|       <xsl:value-of select=""tns:Structure/tns:Property[@name='Комментарий']/tns:Value/text()""/>
		|      </xsl:element>
		|
		|      <xsl:element name=""Состав"">
		|        <xsl:attribute name=""xsi:type"">Адрес</xsl:attribute>
		|        <xsl:variable name=""country"" select=""tns:Structure/tns:Property[@name='Страна']/tns:Value/text()""></xsl:variable>
		|        <xsl:variable name=""country-upper"">
		|          <xsl:call-template name=""str-upper"">
		|            <xsl:with-param name=""str"" select=""$country"" />
		|          </xsl:call-template>
		|        </xsl:variable>
		|
		|        <xsl:attribute name=""Страна"">
		|          <xsl:choose>
		|            <xsl:when test=""0=count($country)"">
		|              <xsl:value-of select=""$local-country"" />
		|            </xsl:when>
		|            <xsl:otherwise>
		|              <xsl:value-of select=""$country"" />
		|            </xsl:otherwise>
		|          </xsl:choose>
		|        </xsl:attribute>
		|
		|        <xsl:choose>
		|          <xsl:when test=""0=count($country)"">
		|            <xsl:apply-templates select=""/"" mode=""domestic"" />
		|          </xsl:when>
		|          <xsl:when test=""$country-upper=$local-country"">
		|            <xsl:apply-templates select=""/"" mode=""domestic"" />
		|          </xsl:when>
		|          <xsl:otherwise>
		|            <xsl:apply-templates select=""/"" mode=""foreign"" />
		|          </xsl:otherwise>
		|        </xsl:choose>
		|
		|      </xsl:element>
		|    </КонтактнаяИнформация>
		|  </xsl:template>
		|
		|  <xsl:template match=""/"" mode=""foreign"">
		|    <xsl:element name=""Состав"">
		|      <xsl:attribute name=""xsi:type"">xs:string</xsl:attribute>
		|
		|      <xsl:variable name=""value"" select=""tns:Structure/tns:Property[@name='Значение']/tns:Value/text()"" />
		|      <xsl:choose>
		|        <xsl:when test=""0=count($value)"">
		|          <xsl:value-of select=""$presentation"" />
		|        </xsl:when>
		|        <xsl:otherwise>
		|          <xsl:value-of select=""$value"" />
		|        </xsl:otherwise>
		|      </xsl:choose>
		|
		|    </xsl:element>
		|  </xsl:template>
		|" + ДополнительныеПравилаПреобразования);

		Возврат Преобразователь;
КонецФункции

Функция сУКИ_ПреобразованиеXSLT_СтруктураВТелефонФакс(Знач ИмяXDTOТипа)
	Преобразователь = Новый ПреобразованиеXSL;
	Преобразователь.ЗагрузитьТаблицуСтилейXSLИзСтроки("
		|<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform""
		|  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
		|  xmlns:tns=""http://v8.1c.ru/8.1/data/core""
		|  xmlns=""http://www.v8.1c.ru/ssl/contactinfo""
		|>
		|<xsl:output method=""xml"" omit-xml-declaration=""yes"" indent=""yes"" encoding=""utf-8""/>
		|  <xsl:template match=""/"">
		|
		|    <xsl:element name=""КонтактнаяИнформация"">
		|
		|      <xsl:attribute name=""Представление"">
		|        <xsl:value-of select=""tns:Structure/tns:Property[@name='Представление']/tns:Value/text()""/>
		|      </xsl:attribute>
		|      <xsl:element name=""Комментарий"">
		|        <xsl:value-of select=""tns:Structure/tns:Property[@name='Комментарий']/tns:Value/text()""/>
		|      </xsl:element>
		|      <xsl:element name=""Состав"">
		|        <xsl:attribute name=""xsi:type"">" + ИмяXDTOТипа + "</xsl:attribute>
		|
		|        <xsl:attribute name=""КодСтраны"">
		|          <xsl:value-of select=""tns:Structure/tns:Property[@name='КодСтраны']/tns:Value/text()""/>
		|        </xsl:attribute>
		|        <xsl:attribute name=""КодГорода"">
		|          <xsl:value-of select=""tns:Structure/tns:Property[@name='КодГорода']/tns:Value/text()""/>
		|        </xsl:attribute>
		|        <xsl:attribute name=""Номер"">
		|          <xsl:value-of select=""tns:Structure/tns:Property[@name='НомерТелефона']/tns:Value/text()""/>
		|        </xsl:attribute>
		|        <xsl:attribute name=""Добавочный"">
		|          <xsl:value-of select=""tns:Structure/tns:Property[@name='Добавочный']/tns:Value/text()""/>
		|        </xsl:attribute>
		|
		|      </xsl:element>
		|    </xsl:element>
		|
		|  </xsl:template>
		|</xsl:stylesheet>
		|");

	Возврат Преобразователь;
КонецФункции

Функция сУКИ_XSLT_ШаблоныСтроковыхФункций()
	НаборБуквНижнийРегистр	= "абвгдеёжзийклмнопрстуфхцчшщыъьэюяabcdefghijklmnopqrstuvwxyz";
	НаборБуквВерхнийРегистр	= "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЫЪЬЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ";


	Возврат "
		|<!-- string functions -->
		|
		|  <xsl:template name=""str-trim-left"">
		|    <xsl:param name=""str"" />
		|    <xsl:variable name=""head"" select=""substring($str, 1, 1)""/>
		|    <xsl:variable name=""tail"" select=""substring($str, 2)""/>
		|    <xsl:choose>
		|      <xsl:when test=""(string-length($str) > 0) and (string-length(normalize-space($head)) = 0)"">
		|        <xsl:call-template name=""str-trim-left"">
		|          <xsl:with-param name=""str"" select=""$tail""/>
		|        </xsl:call-template>
		|      </xsl:when>
		|      <xsl:otherwise>
		|        <xsl:value-of select=""$str""/>
		|      </xsl:otherwise>
		|    </xsl:choose>
		|  </xsl:template>
		|
		|  <xsl:template name=""str-trim-right"">
		|    <xsl:param name=""str"" />
		|    <xsl:variable name=""head"" select=""substring($str, 1, string-length($str) - 1)""/>
		|    <xsl:variable name=""tail"" select=""substring($str, string-length($str))""/>
		|    <xsl:choose>
		|      <xsl:when test=""(string-length($str) > 0) and (string-length(normalize-space($tail)) = 0)"">
		|        <xsl:call-template name=""str-trim-right"">
		|          <xsl:with-param name=""str"" select=""$head""/>
		|        </xsl:call-template>
		|      </xsl:when>
		|      <xsl:otherwise>
		|        <xsl:value-of select=""$str""/>
		|      </xsl:otherwise>
		|    </xsl:choose>
		|  </xsl:template>
		|
		|  <xsl:template name=""str-trim-all"">
		|    <xsl:param name=""str"" />
		|      <xsl:call-template name=""str-trim-right"">
		|        <xsl:with-param name=""str"">
		|          <xsl:call-template name=""str-trim-left"">
		|            <xsl:with-param name=""str"" select=""$str""/>
		|          </xsl:call-template>
		|      </xsl:with-param>
		|    </xsl:call-template>
		|  </xsl:template>
		|
		|  <xsl:template name=""str-replace-all"">
		|    <xsl:param name=""str"" />
		|    <xsl:param name=""search-for"" />
		|    <xsl:param name=""replace-by"" />
		|    <xsl:choose>
		|      <xsl:when test=""contains($str, $search-for)"">
		|        <xsl:value-of select=""substring-before($str, $search-for)"" />
		|        <xsl:value-of select=""$replace-by"" />
		|        <xsl:call-template name=""str-replace-all"">
		|          <xsl:with-param name=""str"" select=""substring-after($str, $search-for)"" />
		|          <xsl:with-param name=""search-for"" select=""$search-for"" />
		|          <xsl:with-param name=""replace-by"" select=""$replace-by"" />
		|        </xsl:call-template>
		|      </xsl:when>
		|      <xsl:otherwise>
		|        <xsl:value-of select=""$str"" />
		|      </xsl:otherwise>
		|    </xsl:choose>
		|  </xsl:template>
		|
		|  <xsl:param name=""alpha-low"" select=""'" + НаборБуквНижнийРегистр + "'"" />
		|  <xsl:param name=""alpha-up""  select=""'" + НаборБуквВерхнийРегистр + "'"" />
		|
		|  <xsl:template name=""str-upper"">
		|    <xsl:param name=""str"" />
		|    <xsl:value-of select=""translate($str, $alpha-low, $alpha-up)""/>
		|  </xsl:template>
		|
		|  <xsl:template name=""str-lower"">
		|    <xsl:param name=""str"" />
		|    <xsl:value-of select=""translate($str, alpha-up, $alpha-low)"" />
		|  </xsl:template>
		|
		|<!-- /string functions -->
		|";
КонецФункции

Функция сУКИ_ПреобразованиеXSLT_СтруктураВСтроковыйСостав(Знач ИмяXDTOТипа)
	Преобразователь = Новый ПреобразованиеXSL;
	Преобразователь.ЗагрузитьТаблицуСтилейXSLИзСтроки("
		|<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform""
		|  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
		|  xmlns:tns=""http://v8.1c.ru/8.1/data/core""
		|  xmlns=""http://www.v8.1c.ru/ssl/contactinfo""
		|>
		|<xsl:output method=""xml"" omit-xml-declaration=""yes"" indent=""yes"" encoding=""utf-8""/>
		|
		|<xsl:template match=""/"">
		|
		|  <xsl:element name=""КонтактнаяИнформация"">
		|
		|  <xsl:attribute name=""Представление"">
		|    <xsl:value-of select=""tns:Structure/tns:Property[@name='Представление']/tns:Value/text()""/>
		|  </xsl:attribute>
		|  <xsl:element name=""Комментарий"">
		|    <xsl:value-of select=""tns:Structure/tns:Property[@name='Комментарий']/tns:Value/text()""/>
		|  </xsl:element>
		|
		|  <xsl:element name=""Состав"">
		|    <xsl:attribute name=""xsi:type"">" + ИмяXDTOТипа + "</xsl:attribute>
		|    <xsl:attribute name=""Значение"">
		|    <xsl:choose>
		|      <xsl:when test=""0=count(tns:Structure/tns:Property[@name='Значение'])"">
		|      <xsl:value-of select=""tns:Structure/tns:Property[@name='Представление']/tns:Value/text()""/>
		|      </xsl:when>
		|      <xsl:otherwise>
		|      <xsl:value-of select=""tns:Structure/tns:Property[@name='Значение']/tns:Value/text()""/>
		|      </xsl:otherwise>
		|    </xsl:choose>
		|    </xsl:attribute>
		|
		|  </xsl:element>
		|  </xsl:element>
		|
		|</xsl:template>
		|</xsl:stylesheet>
		|");

	Возврат Преобразователь;
КонецФункции

Функция сУКИ_XSLT_КонтрольСтроковогоЗначенияПростогоТипа(Знач Текст, Знач Представление)
	Если Представление = Неопределено Тогда
		Возврат Текст;
	КонецЕсли;

	Преобразователь = Новый ПреобразованиеXSL;
	Преобразователь.ЗагрузитьТаблицуСтилейXSLИзСтроки("
		|<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform""
		|  xmlns:tns=""http://www.v8.1c.ru/ssl/contactinfo""
		|>
		|  <xsl:output method=""xml"" omit-xml-declaration=""yes"" indent=""yes"" encoding=""utf-8""/>
		|
		|  <xsl:template match=""node() | @*"">
		|    <xsl:copy>
		|      <xsl:apply-templates select=""node() | @*"" />
		|    </xsl:copy>
		|  </xsl:template>
		|
		|  <xsl:template match=""tns:КонтактнаяИнформация/tns:Состав/@Значение"">
		|    <xsl:attribute name=""Значение"">
		|      <xsl:choose>
		|        <xsl:when test="".=''"">" + сУКИ_НормализованнаяСтрокаXML(Представление) + "</xsl:when>
		|        <xsl:otherwise>
		|          <xsl:value-of select="".""/>
		|        </xsl:otherwise>
		|      </xsl:choose>
		|    </xsl:attribute>
		|  </xsl:template>
		|
		|</xsl:stylesheet>
		|");

	Возврат Преобразователь.ПреобразоватьИзСтроки(Текст);
КонецФункции

Функция сУКИ_XSLT_УзелСтрокиПараметра(Знач Текст, Знач ИмяЭлемента = "ExternalParamNode")
	// Через запись xml для маскировки спецсимволов.
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	Запись.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	Запись.ЗаписатьТекст(Текст);
	Запись.ЗаписатьКонецЭлемента();

	Возврат Запись.Закрыть();
КонецФункции

Функция сУКИ_ЗначениеВСтрокуXML(Знач Значение)
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(Новый ПараметрыЗаписиXML(, , Ложь, Ложь, ""));
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);

	// Платформенный сериализатор позволяет записать в значение атрибутов перенос строки.
	Возврат СтрЗаменить(ЗаписьXML.Закрыть(), Символы.ПС, "&#10;");
КонецФункции

Функция сУКИ_НормализованнаяСтрокаXML(Знач Текст)
	Результат = СтрЗаменить(Текст,     "&",			"&amp;");
	Результат = СтрЗаменить(Результат, "'",			"&apos;");
	Результат = СтрЗаменить(Результат, "<",			"&lt;");
	Результат = СтрЗаменить(Результат, ">",			"&gt;");
	Результат = СтрЗаменить(Результат, """",		"&quot;");
	Результат = СтрЗаменить(Результат, Символы.ПС,	"&#10;");

	Возврат Результат;
КонецФункции

Функция сУКИ_АдресВведенВСвободнойФорме(Знач КонтактнаяИнформация) Экспорт
	Если ТипЗнч(КонтактнаяИнформация) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(КонтактнаяИнформация), "<") Тогда
		КонтактнаяИнформацияJSON = УКИ_КонтактнаяИнформацияВJSON(КонтактнаяИнформация);
		КонтактнаяИнформация = сУКИ_JSONВКонтактнуюИнформациюПоПолям(КонтактнаяИнформацияJSON, Перечисления.ТипыКонтактнойИнформации.Адрес);
	ИначеЕсли ТипЗнч(КонтактнаяИнформация) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(КонтактнаяИнформация), "{") Тогда
		КонтактнаяИнформация = сУКИ_JSONВКонтактнуюИнформациюПоПолям(КонтактнаяИнформация, Перечисления.ТипыКонтактнойИнформации.Адрес);
	КонецЕсли;

	Если ТипЗнч(КонтактнаяИнформация) = Тип("Структура") И КонтактнаяИнформация.Свойство("AddressType") Тогда
		Возврат СтрСравнить("ВСвободнойФорме", КонтактнаяИнформация.AddressType) = 0;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Функция сУКИ_ПараметрыАвтоподбораАдреса() Экспорт
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТолькоВебСервис", Ложь);
	ДополнительныеПараметры.Вставить("Уровни", "");
	ДополнительныеПараметры.Вставить("ТипАдреса", "");

	Возврат ДополнительныеПараметры;
КонецФункции

Процедура сУКИ_ФорматированиеРезультатовАвтоподбора(ДанныеВыбора, Знач Текст, ВыделятьУстаревшиеАдреса = Истина) Экспорт
	// Оформление списка поиска
	ФрагментыТекстаПоиска = СтрРазделить(Текст, " ");
	Для каждого СтрокаДанных Из ДанныеВыбора Цикл
		УстаревшийАдрес = Ложь;
		Если ТипЗнч(СтрокаДанных.Значение) = Тип("Структура") И СтрокаДанных.Значение.Свойство("Адрес") Тогда
			Если ЗначениеЗаполнено(СтрокаДанных.Значение.Адрес) Тогда
				Адрес								= сУКИ_JSONВКонтактнуюИнформациюПоПолям(СтрокаДанных.Значение.Адрес, Перечисления.ТипыКонтактнойИнформации.Адрес);
				СтрокаДанных.Значение.Представление = КонтактнаяИнформацияКлиентСервер.РСА_ПредставлениеАдреса(Адрес, Ложь);
			КонецЕсли;

			Если ВыделятьУстаревшиеАдреса Тогда
				УстаревшийАдрес = Не СтрокаДанных.Значение.Муниципальный;
			КонецЕсли;
		КонецЕсли;

		Представление = СтрокаДанных.Представление;

		Для каждого ФрагментТекстаПоиска Из ФрагментыТекстаПоиска Цикл
			Позиция = СтрНайти(ВРег(Представление), ВРег(ФрагментТекстаПоиска));
			Если Позиция > 0 Тогда
				Представление = Лев(Представление, Позиция - 1) + Символы.ПС + Символы.ВТаб + Сред(Представление, Позиция, СтрДлина(ФрагментТекстаПоиска)) + Символы.ПС + Сред(Представление, Позиция + СтрДлина(ФрагментТекстаПоиска));
			КонецЕсли;
		КонецЦикла;
		Набор = СтрРазделить(Представление, Символы.ПС);
		Для Счетчик = 0 По Набор.Количество() - 1 Цикл
			Если СтрНачинаетсяС(Набор[Счетчик], Символы.ВТаб) Тогда
				Набор[Счетчик] = Новый ФорматированнаяСтрока(СокрЛП(Набор[Счетчик]), ШрифтыСтиля.ВажнаяНадписьШрифт, ЦветаСтиля.РезультатУспехЦвет);
			ИначеЕсли УстаревшийАдрес Тогда
				Набор[Счетчик] = Новый ФорматированнаяСтрока(Набор[Счетчик],, ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
			КонецЕсли;
		КонецЦикла;
		СтрокаДанных.Представление = Новый ФорматированнаяСтрока(Набор);
	КонецЦикла;
КонецПроцедуры

Функция сУКИ_ЭтоНациональныйАдрес(Знач Адрес) Экспорт
	Если НЕ ЗначениеЗаполнено(Адрес) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(Адрес) = Тип("Строка") Тогда
		Адрес = сУКИ_JSONВКонтактнуюИнформациюПоПолям(Адрес, Перечисления.ТипыКонтактнойИнформации.Адрес);
	КонецЕсли;

	Если ТипЗнч(Адрес) = Тип("Структура") И Адрес.Свойство("Country")Тогда
		НаименованиеСтраны = БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(ПредопределенноеЗначение("Справочник.СтраныМира.Россия"), "Наименование");

		Возврат СтрСравнить(НаименованиеСтраны, Адрес.Country) = 0;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Функция сУКИ_ЕстьЗаполненныеСвойстваКонтактнойИнформации(Знач Владелец) Экспорт
	Если Владелец = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Не Владелец.Свойство("Value") Или Не Владелец.Свойство("Type") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ПустаяСтрока(Владелец.value) Или ПустаяСтрока(Владелец.type) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если СтрСравнить(Владелец.Type, Строка(ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"))) = 0 Тогда
		СписокПолейДляПроверки = Новый Массив();
		СписокПолейДляПроверки.Добавить("Country");

		БазоваяПодсистемаКлиентСервер.ОН_ДополнитьМассив(СписокПолейДляПроверки, КонтактнаяИнформацияКлиентСервер.РСА_ИменаУровнейАдреса(Владелец, Истина));

		Для каждого ИмяПоля Из СписокПолейДляПроверки Цикл
			Если Владелец.Свойство(ИмяПоля) И ЗначениеЗаполнено(Владелец[ИмяПоля]) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;

		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Процедура сУКИ_УстановитьКонтактнуюИнформациюОбъекта(Объект, КонтактнаяИнформация, ОбъектМетаданных, Знач Замещать) Экспорт
	Периодическая					= КонтактнаяИнформацияСерверПовтИсп.сУКИ_КонтактнаяИнформацияОбъектаСодержитКолонкуДействуетС(Объект.Ссылка);
	БезИдентификатораТабличнойЧасти	= ОбъектМетаданных.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ИдентификаторСтрокиТабличнойЧасти") = Неопределено;

	Для каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформация Цикл
		УКИ_ВосстановитьПустыеЗначениеПредставление(СтрокаКонтактнойИнформации);
	КонецЦикла;

	Если Замещать Тогда
		Для каждого СтрокаКонтактнойИнформацииОбъекта Из КонтактнаяИнформация Цикл
			ДатаОтбора		= ?(Периодическая, СтрокаКонтактнойИнформацииОбъекта.Дата, Неопределено);
			НайденныеСтроки	= сУКИ_НайтиСтрокиКонтактнойИнформации(СтрокаКонтактнойИнформацииОбъекта.Вид, ДатаОтбора, Объект.КонтактнаяИнформация, Периодическая);

			Для каждого Строка Из НайденныеСтроки Цикл
				Объект.КонтактнаяИнформация.Удалить(Строка);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	Для каждого СтрокаКонтактнойИнформацииОбъекта Из КонтактнаяИнформация Цикл
		ХранитьИсториюИзменений = Периодическая И СтрокаКонтактнойИнформацииОбъекта.Вид.ХранитьИсториюИзменений;

		Если Замещать Тогда
			ИдентификаторСтрокиТабличнойЧасти = ?(БезИдентификатораТабличнойЧасти, Неопределено, СтрокаКонтактнойИнформацииОбъекта.ИдентификаторСтрокиТабличнойЧасти);
			Если сУКИ_ЗапрещенВводНесколькихЗначений(СтрокаКонтактнойИнформацииОбъекта.Вид, Объект.КонтактнаяИнформация, СтрокаКонтактнойИнформацииОбъекта.Дата, ХранитьИсториюИзменений, ИдентификаторСтрокиТабличнойЧасти) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаКонтактнойИнформации = Объект.КонтактнаяИнформация.Добавить();
		Иначе
			Отбор = Новый Структура;
			Отбор.Вставить("Вид", СтрокаКонтактнойИнформацииОбъекта.Вид);

			Если ХранитьИсториюИзменений Тогда
				Отбор.Вставить("ДействуетС", СтрокаКонтактнойИнформацииОбъекта.Дата);
				НайденныеСтроки = Объект.КонтактнаяИнформация.НайтиСтроки(Отбор);
			ИначеЕсли ЗначениеЗаполнено(СтрокаКонтактнойИнформацииОбъекта.Значение) Тогда
				Отбор.Вставить("Значение", СтрокаКонтактнойИнформацииОбъекта.Значение);
				НайденныеСтроки = Объект.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Иначе
				Отбор.Вставить("ЗначенияПолей", СтрокаКонтактнойИнформацииОбъекта.ЗначенияПолей);
				НайденныеСтроки = Объект.КонтактнаяИнформация.НайтиСтроки(Отбор);
			КонецЕсли;

			Если НЕ ХранитьИсториюИзменений И сУКИ_ЗапрещенВводНесколькихЗначений(СтрокаКонтактнойИнформацииОбъекта.Вид, Объект.КонтактнаяИнформация, СтрокаКонтактнойИнформацииОбъекта.Дата, ХранитьИсториюИзменений) ИЛИ НайденныеСтроки.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;

			СтрокаКонтактнойИнформации = Объект.КонтактнаяИнформация.Добавить();
		КонецЕсли;

		сУКИ_ЗаполнитьКонтактнуюИнформациюОбъектаИзСтроки(СтрокаКонтактнойИнформацииОбъекта, ХранитьИсториюИзменений, СтрокаКонтактнойИнформации);
	КонецЦикла;
КонецПроцедуры

Процедура сУКИ_УстановитьКонтактнуюИнформациюОбъектаДляСсылки(Ссылка, Знач КонтактнаяИнформация, ОбъектМетаданных, Замещать = Истина) Экспорт
	Если КонтактнаяИнформация.Количество() = 0 И Не Замещать Тогда
		Возврат;
	КонецЕсли;

	Блокировка				= Новый БлокировкаДанных;
	ЭлементБлокировки		= Блокировка.Добавить(ОбъектМетаданных.ПолноеИмя());
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
	ЭлементБлокировки.Режим	= РежимБлокировкиДанных.Исключительный;

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Объект = Ссылка.ПолучитьОбъект();
		Объект.Заблокировать();

		Если КонтактнаяИнформация.Количество() = 0 Тогда
			// Очистка контактной информации пустой таблицей.
			Объект.КонтактнаяИнформация.Очистить();
		Иначе
			сУКИ_УстановитьКонтактнуюИнформациюОбъекта(Объект, КонтактнаяИнформация, ОбъектМетаданных, Замещать);
		КонецЕсли;

		Объект.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Функция сУКИ_НайтиСтрокиКонтактнойИнформации(ВидКонтактнойИнформации, Дата, КонтактнаяИнформация, Периодическая)
	Отбор = Новый Структура("Вид", ВидКонтактнойИнформации);
	Если Периодическая Тогда
		Отбор.Вставить("ДействуетС", Дата);
	КонецЕсли;
	НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(Отбор);

	Возврат НайденныеСтроки;
КонецФункции

Процедура сУКИ_ЗаполнитьКонтактнуюИнформациюОбъектаИзСтроки(СтрокаКонтактнойИнформацииОбъекта, Периодическая, СтрокаКонтактнойИнформации)
	ЗаполнитьЗначенияСвойств(СтрокаКонтактнойИнформации, СтрокаКонтактнойИнформацииОбъекта);
	Если Периодическая Тогда
		СтрокаКонтактнойИнформации.ДействуетС = СтрокаКонтактнойИнформацииОбъекта.Дата;
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаКонтактнойИнформации.Значение) Тогда
		ОбъектКонтактнойИнформации = сУКИ_JSONВКонтактнуюИнформациюПоПолям(СтрокаКонтактнойИнформации.Значение, СтрокаКонтактнойИнформацииОбъекта.Тип);
		сУКИ_ЗаполнитьТехническиеПоляКонтактнойИнформации(СтрокаКонтактнойИнформации, ОбъектКонтактнойИнформации, СтрокаКонтактнойИнформацииОбъекта.Тип);
	КонецЕсли;
КонецПроцедуры

Функция сУКИ_ЗапрещенВводНесколькихЗначений(ВидКонтактнойИнформации, КонтактнаяИнформация, Дата, Периодическая, ИдентификаторСтрокиТабличнойЧасти = Неопределено)
	Если ВидКонтактнойИнформации.РазрешитьВводНесколькихЗначений Тогда
		Возврат Ложь;
	КонецЕсли;

	Отбор = Новый Структура("Вид", ВидКонтактнойИнформации);

	Если ИдентификаторСтрокиТабличнойЧасти <> Неопределено Тогда
		Отбор.Вставить("ИдентификаторСтрокиТабличнойЧасти", ИдентификаторСтрокиТабличнойЧасти);
	КонецЕсли;

	Если Периодическая Тогда
		Отбор.Вставить("ДействуетС", Дата);
	КонецЕсли;

	НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(Отбор);

	Возврат НайденныеСтроки.Количество() > 0;
КонецФункции

Процедура сУКИ_ЗаполнитьТехническиеПоляКонтактнойИнформации(СтрокаКонтактнойИнформации, Объект, ТипКонтактнойИнформации) Экспорт
	// Заполнение дополнительных реквизитов ТЧ.
	Если ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		сУКИ_ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(СтрокаКонтактнойИнформации, Объект);
	ИначеЕсли ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		сУКИ_ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаКонтактнойИнформации, Объект);
	ИначеЕсли ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		сУКИ_ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаКонтактнойИнформации, Объект);
	ИначеЕсли ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		сУКИ_ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаКонтактнойИнформации, Объект);
	ИначеЕсли ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		сУКИ_ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(СтрокаКонтактнойИнформации, Объект);
	КонецЕсли;
КонецПроцедуры

Процедура сУКИ_ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаТабличнойЧасти, Адрес)
	// Умолчания
	СтрокаТабличнойЧасти.Страна = "";
	СтрокаТабличнойЧасти.Регион = "";
	СтрокаТабличнойЧасти.Город  = "";

	Если Адрес.Свойство("Country") Тогда
		СтрокаТабличнойЧасти.Страна =  Адрес.Country;

		Обработки.РасширенныйВводКонтактнойИнформации.ЗаполнитьРасширенныеРеквизитыТабличнойЧастиДляАдреса(Адрес, СтрокаТабличнойЧасти);
	КонецЕсли;
КонецПроцедуры

Процедура сУКИ_ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(СтрокаТабличнойЧасти, Источник)
	Результат = БазоваяПодсистемаКлиентСервер.ОН_РазобратьСтрокуСПочтовымиАдресами(СтрокаТабличнойЧасти.Представление, Ложь);

	Если Результат.Количество() > 0 Тогда
		СтрокаТабличнойЧасти.АдресЭП = Результат[0].Адрес;

		Поз = СтрНайти(СтрокаТабличнойЧасти.АдресЭП, "@");
		Если Поз <> 0 Тогда
			СтрокаТабличнойЧасти.ДоменноеИмяСервера = Сред(СтрокаТабличнойЧасти.АдресЭП, Поз+1);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура сУКИ_ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаТабличнойЧасти, Телефон)
	Если НЕ ЗначениеЗаполнено(Телефон) Тогда
		Возврат;
	КонецЕсли;

	// Умолчания
	СтрокаТабличнойЧасти.НомерТелефонаБезКодов = "";
	СтрокаТабличнойЧасти.НомерТелефона         = "";

	КодСтраны     = Телефон.CountryCode;
	КодГорода     = Телефон.AreaCode;
	НомерТелефона = Телефон.Number;

	Если СтрНачинаетсяС(КодСтраны, "+") Тогда
		КодСтраны = Сред(КодСтраны, 2);
	КонецЕсли;

	Поз = СтрНайти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;

	Поз = СтрНайти(НомерТелефона, Символы.ПС);
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;

	СтрокаТабличнойЧасти.НомерТелефонаБезКодов = сУКИ_УбратьРазделителиВНомерТелефона(НомерТелефона);
	СтрокаТабличнойЧасти.НомерТелефона         = сУКИ_УбратьРазделителиВНомерТелефона(Строка(КодСтраны) + КодГорода + НомерТелефона);
КонецПроцедуры

Процедура сУКИ_ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(СтрокаТабличнойЧасти, Источник)
	// Умолчания
	СтрокаТабличнойЧасти.ДоменноеИмяСервера	= "";
	АдресСтраницы							= "";

	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		Если Источник.Свойство("value") Тогда
			АдресСтрокой = Источник.value;
		КонецЕсли;
	Иначе
		АдресСтраницы		= Источник.Состав;
		ПространствоИмен	= "http://www.v8.1c.ru/ssl/contactinfo";
		Если АдресСтраницы <> Неопределено И АдресСтраницы.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт") Тогда
			АдресСтрокой = АдресСтраницы.Значение;
		КонецЕсли;
	КонецЕсли;

	// Удалим протокол
	Позиция			= СтрНайти(АдресСтрокой, "://");
	АдресСервера	= ?(Позиция = 0, АдресСтрокой, Сред(АдресСтрокой, Позиция + 3));

	СтрокаТабличнойЧасти.ДоменноеИмяСервера = АдресСервера;
КонецПроцедуры

Функция сУКИ_УбратьРазделителиВНомерТелефона(Знач НомерТелефона)
	Поз = СтрНайти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;

	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");

	Возврат НомерТелефона;
КонецФункции

Функция сУКИ_ДанныеВидовКонтактнойИнформации(Знач ВидыКонтактнойИнформации) Экспорт
	МетаданныеРеквизитов	= Метаданные.Справочники.ВидыКонтактнойИнформации.Реквизиты;
	Реквизиты				= "Наименование, ИмяПредопределенныхДанных, ПометкаУдаления";
	Для Каждого МетаданныеРеквизита Из МетаданныеРеквизитов Цикл
		Реквизиты = Реквизиты + "," + МетаданныеРеквизита.Имя;
	КонецЦикла;

	Возврат БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъектов(ВидыКонтактнойИнформации, Реквизиты);
КонецФункции

Процедура сУКИ_УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	Если ИмяПараметра = "ИнтерактивнаяПроверкаЗаполненияКонтактнойИнформации" Тогда
		ПараметрыСеанса.ИнтерактивнаяПроверкаЗаполненияКонтактнойИнформации = Ложь;
		УстановленныеПараметры.Добавить("ИнтерактивнаяПроверкаЗаполненияКонтактнойИнформации");
	КонецЕсли;
КонецПроцедуры

Процедура сУКИ_ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники) Экспорт
	// Загрузка в классификатор стран мира запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.СтраныМира.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;
КонецПроцедуры

Процедура сУКИ_ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	Обработчик						= Обработчики.Добавить();
	Обработчик.Версия				= "2.2.3.34";
	Обработчик.Процедура			= "КонтактнаяИнформацияСервер.сУКИ_ОбновитьСуществующиеСтраныМира";
	Обработчик.РежимВыполнения		= "Монопольно";
	Обработчик.ОбщиеДанные			= Ложь;

	Обработчик						= Обработчики.Добавить();
	Обработчик.Версия				= "2.3.1.8";
	Обработчик.Процедура			= "КонтактнаяИнформацияСервер.сУКИ_ОбновитьНастройкуДобавочногоНомераТелефона";
	Обработчик.РежимВыполнения		= "Оперативно";
	Обработчик.ОбщиеДанные			= Ложь;
	Обработчик.НачальноеЗаполнение	= Истина;

	Обработчик						= Обработчики.Добавить();
	Обработчик.Версия				= "2.3.1.15";
	Обработчик.Процедура			= "КонтактнаяИнформацияСервер.сУКИ_УстановитьЗначениеПризнакаИспользуется";
	Обработчик.РежимВыполнения		= "Оперативно";
	Обработчик.ОбщиеДанные			= Ложь;
	Обработчик.НачальноеЗаполнение	= Истина;

	Обработчик						= Обработчики.Добавить();
	Обработчик.Версия				= "3.1.3.69";
	Обработчик.Идентификатор		= Новый УникальныйИдентификатор("22f43dca-ac4f-3289-81a9-e110cd56f8b2");
	Обработчик.Процедура			= "Справочники.ВидыКонтактнойИнформации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.РежимВыполнения		= "Отложенно";
	Обработчик.ПроцедураЗаполненияДанныхОбновления	= "Справочники.ВидыКонтактнойИнформации.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки			= 1;
	Обработчик.ЧитаемыеОбъекты		= "Справочник.ВидыКонтактнойИнформации";
	Обработчик.ИзменяемыеОбъекты	= "Справочник.ВидыКонтактнойИнформации";
	Обработчик.БлокируемыеОбъекты	= "Справочник.ВидыКонтактнойИнформации";
	Обработчик.ПроцедураПроверки	= "ОбновлениеВерсииИБСервер.ОИБ_ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий			= "Обновление видов контактной информации.
		|До завершения обработки виды контактной информации в документах в ряде случаев будут отображаться некорректно.";

	Обработчик						= Обработчики.Добавить();
	Обработчик.Версия				= "3.1.3.148";
	Обработчик.Идентификатор		= Новый УникальныйИдентификатор("dfc6a0fa-7c7b-4096-9d04-2c67d5eb17a4");
	Обработчик.Процедура			= "Справочники.СтраныМира.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.РежимВыполнения		= "Отложенно";
	Обработчик.ПроцедураЗаполненияДанныхОбновления	= "Справочники.СтраныМира.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки			= 1;
	Обработчик.ЧитаемыеОбъекты		= "Справочник.СтраныМира";
	Обработчик.ИзменяемыеОбъекты	= "Справочник.СтраныМира";
	Обработчик.БлокируемыеОбъекты	= "Справочник.СтраныМира";
	Обработчик.ПроцедураПроверки	= "ОбновлениеВерсииИБСервер.ОИБ_ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий			= "Обновление сведений о странах мирах в соответствии с общероссийским классификатором стран мира.
		|До завершения обработки наименование стран в документах в ряде случаев будет отображаться некорректно.";
КонецПроцедуры

Процедура сУКИ_ПриОпределенииОбъектовСНачальнымЗаполнением(Объекты) Экспорт
	Объекты.Добавить(Метаданные.Справочники.СтраныМира);
	Объекты.Добавить(Метаданные.Справочники.ВидыКонтактнойИнформации);
КонецПроцедуры

Процедура сУКИ_ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	Обработчики.Вставить("ИнтерактивнаяПроверкаЗаполненияКонтактнойИнформации", "КонтактнаяИнформацияСервер.сУКИ_УстановкаПараметровСеанса");
КонецПроцедуры

Процедура сУКИ_ОбновитьСуществующиеСтраныМира() Экспорт
	ВсеОшибки = "";
	Добавлять = Ложь;

	Фильтр = Новый Структура("Код");

	// Сравнивать в запросе нельзя из-за возможной регистронезависимости базы данных.
	Для Каждого СтрокаКлассификатора Из РСА_ТаблицаКлассификатора() Цикл
		Фильтр.Код		= СтрокаКлассификатора.Код;
		Выборка			= Справочники.СтраныМира.Выбрать(,, Фильтр);
		СтранаНайдена	= Выборка.Следующий();
		Если Не СтранаНайдена И Добавлять Тогда
			Страна = Справочники.СтраныМира.СоздатьЭлемент();
		ИначеЕсли СтранаНайдена И (Выборка.Наименование <> СтрокаКлассификатора.Наименование Или Выборка.КодАльфа2 <> СтрокаКлассификатора.КодАльфа2 Или Выборка.КодАльфа3 <> СтрокаКлассификатора.КодАльфа3 Или Выборка.НаименованиеПолное <> СтрокаКлассификатора.НаименованиеПолное) Тогда
			Страна = Выборка.ПолучитьОбъект();
		Иначе
			Продолжить;
		КонецЕсли;

		НачатьТранзакцию();
		Попытка
			Если Не Страна.ЭтоНовый() Тогда
				ЗаблокироватьДанныеДляРедактирования(Страна.Ссылка);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Страна, СтрокаКлассификатора);
			Страна.ДополнительныеСвойства.Вставить("НеПроверятьУникальность");
			Страна.Записать();

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Инфо		= ИнформацияОбОшибке();
			ТекстОшибки	= СтрШаблон("Ошибка записи страны мира %1 (код %2) при обновлении классификатора, %3", Выборка.Код, Выборка.Наименование, ОбработкаОшибок.КраткоеПредставлениеОшибки(Инфо));
			ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(Инфо));
			ВсеОшибки	= ВсеОшибки + Символы.ПС + ТекстОшибки;
		КонецПопытки;
	КонецЦикла;

	Если Не ПустаяСтрока(ВсеОшибки) Тогда
		ВызватьИсключение СокрЛП(ВсеОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура сУКИ_ОбновитьНастройкуДобавочногоНомераТелефона() Экспорт
	// Устанавливает флаг ТелефонCДобавочнымНомером для обратной совместимости.
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Тип =  Значение(Перечисление.ТипыКонтактнойИнформации.Телефон)";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("Справочник.ВидыКонтактнойИнформации");

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();

		Пока РезультатЗапроса.Следующий() Цикл
			ВидКонтактнойИнформации								= РезультатЗапроса.Ссылка.ПолучитьОбъект();
			ВидКонтактнойИнформации.ТелефонCДобавочнымНомером	= Истина;
			ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьДанные(ВидКонтактнойИнформации);
		КонецЦикла;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Процедура сУКИ_УстановитьЗначениеПризнакаИспользуется() Экспорт
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
	|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	НЕ ВидыКонтактнойИнформации.Используется";

	Выборка = Запрос.Выполнить().Выбрать();

	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("Справочник.ВидыКонтактнойИнформации");

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();

		Пока Выборка.Следующий() Цикл
			Если СтрНачинаетсяС(ВРег(Выборка.ИмяПредопределенныхДанных), "УДАЛИТЬ") Тогда
				Продолжить;
			КонецЕсли;

			ВидКонтактнойИнформацииОбъект				= Выборка.Ссылка.ПолучитьОбъект();
			ВидКонтактнойИнформацииОбъект.Используется	= Истина;
			ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьДанные(ВидКонтактнойИнформацииОбъект);
		КонецЦикла;
			ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область РаботаСАдресами

Функция РСА_ТаблицаКлассификатора() Экспорт
	// Зарезервировано для новых подсистем

	Макет				= Справочники.СтраныМира.ПолучитьМакет("Классификатор");
	КлассификаторXML	= Макет.ПолучитьТекст();

	Чтение			= Новый ЧтениеXML;
	Чтение.УстановитьСтроку(КлассификаторXML);
	ТаблицаСтран	= СериализаторXDTO.ПрочитатьXML(Чтение); // ТаблицаЗначений

	// Старые версии классификаторов не содержат колонку МеждународноеНаименование
	Если ТаблицаСтран.Колонки.Найти("МеждународноеНаименование") = Неопределено Тогда
		ТаблицаСтран.Колонки.Добавить("МеждународноеНаименование", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	КонецЕсли;

	Возврат ТаблицаСтран;
КонецФункции

Процедура РСА_ЗаполнитьМаскиНомераТелефона(СписокВыбора) Экспорт
	МаскаНомера = СтрШаблон("+7(999) 999-99-99, <span style=""color: %1""> (Пример: +7(910) 123-23-23)</span>", "ПоясняющийТекст");
	СписокВыбора.Добавить("+7(999) 999-99-99", БазоваяПодсистемаСервер.СФ_ФорматированнаяСтрока(МаскаНомера));

	МаскаНомера = СтрШаблон("##(99999) 999-99-99, <span style=""color: %1""> (Пример: 8(4822) 12-34-56)</span>", "ПоясняющийТекст");
	СписокВыбора.Добавить("##(99999) 999-99-99", БазоваяПодсистемаСервер.СФ_ФорматированнаяСтрока(МаскаНомера));

	МаскаНомера = СтрШаблон("999999999, <span style=""color: %1""> (Пример: 9001234567)</span>", "ПоясняющийТекст");
	СписокВыбора.Добавить("(999) 999-9999", БазоваяПодсистемаСервер.СФ_ФорматированнаяСтрока(МаскаНомера));
КонецПроцедуры

Процедура РСА_УстановитьСостояниеРегламентногоЗадания(Знач Статус) Экспорт
	Если Статус = Неопределено Тогда
		Запрос			= Новый Запрос;
		Запрос.Текст	= "ВЫБРАТЬ ПЕРВЫЕ 1
			|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
			|ГДЕ
			|	ВидыКонтактнойИнформации.ИсправлятьУстаревшиеАдреса = ИСТИНА";
		РезультатЗапроса = Запрос.Выполнить();
		Статус = Не РезультатЗапроса.Пустой();
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ПараметрыПоиска	= Новый Структура;
	ПараметрыПоиска.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ИсправлениеУстаревшихАдресов);
	СписокЗаданий	= РегламентныеЗаданияСервер.РЗ_НайтиЗадания(ПараметрыПоиска);

	ПараметрыЗадания = Новый Структура("Использование", Статус);
	Для Каждого Задание Из СписокЗаданий Цикл
		РегламентныеЗаданияСервер.РЗ_ИзменитьЗадание(Задание, ПараметрыЗадания);
	КонецЦикла;
КонецПроцедуры

Процедура РСА_ВыявитьИИсправитьУстаревшиеАдреса() Экспорт
	Возврат;

	// Зарезервировано для новых подсистем
КонецПроцедуры

Процедура РСА_УстановкаТипаКузбассКемеровскойОбласти(КонтактнаяИнформацияПоПолям) Экспорт
	Если СтрСравнить(КонтактнаяИнформацияПоПолям.area, "Кемеровская область - Кузбасс") = 0 Тогда
		КонтактнаяИнформацияПоПолям.area		= "Кемеровская область -";
		КонтактнаяИнформацияПоПолям.areaType	= "Кузбасс";
	КонецЕсли;
КонецПроцедуры

Функция РСА_ПодготовитьАдресДляВвода(Данные) Экспорт
	// Зарезервировано для новых подсистем

	НаселенныйПунктДетально = КонтактнаяИнформацияКлиентСервер.РСА_ОписаниеНовойКонтактнойИнформации(ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	ЗаполнитьЗначенияСвойств(НаселенныйПунктДетально, Данные);

	Если ТипЗнч(НаселенныйПунктДетально.Buildings) <> Тип("Массив") Тогда
		НаселенныйПунктДетально.Buildings = Новый Массив;
	КонецЕсли;

	Если ТипЗнч(НаселенныйПунктДетально.Apartments) <> Тип("Массив") Тогда
		НаселенныйПунктДетально.Buildings = Новый Массив;
	КонецЕсли;

	Для каждого ЭлементАдреса Из НаселенныйПунктДетально Цикл
		Если СтрЗаканчиваетсяНа(ЭлементАдреса.Ключ, "Id") И ТипЗнч(ЭлементАдреса.Значение) = Тип("Строка") И СтрДлина(ЭлементАдреса.Значение) = 36 Тогда
			НаселенныйПунктДетально[ЭлементАдреса.Ключ] = Новый УникальныйИдентификатор(ЭлементАдреса.Значение);
		КонецЕсли;
	КонецЦикла;

	Если Данные.Свойство("house") Тогда
		НаселенныйПунктДетально.HouseNumber = Данные.house;
	КонецЕсли;

	Возврат НаселенныйПунктДетально;
КонецФункции

Функция РСА_КонтактнаяИнформацияВСтруктуруJSON(КонтактнаяИнформация, Знач Тип = Неопределено, Представление = "", ОбновлятьИдентификаторы = Истина) Экспорт
	Если Тип <> Неопределено И ТипЗнч(Тип) <> Тип("ПеречислениеСсылка.ТипыКонтактнойИнформации") Тогда
		Тип = КонтактнаяИнформацияСерверПовтИсп.сУКИ_ТипВидаКонтактнойИнформации(Тип);
	КонецЕсли;

	Если Тип = Неопределено Тогда
		Если ТипЗнч(КонтактнаяИнформация) = Тип("Строка") Тогда
			Тип = УКИ_ТипКонтактнойИнформации(КонтактнаяИнформация);
		ИначеЕсли ТипЗнч(КонтактнаяИнформация) = Тип("ОбъектXDTO") Тогда
			ПространствоИмен	= "http://www.v8.1c.ru/ssl/contactinfo";

			НайденТип			= ?(КонтактнаяИнформация.Состав = Неопределено, Неопределено, КонтактнаяИнформация.Состав.Тип());
			Тип					= сУКИ_СоответствиеXDTOТиповКонтактнойИнформации(НайденТип);
		КонецЕсли;
	КонецЕсли;

	Результат		= КонтактнаяИнформацияКлиентСервер.РСА_ОписаниеНовойКонтактнойИнформации(Тип);
	ОсновнаяСтрана	= ПредопределенноеЗначение("Справочник.СтраныМира.Россия");

	НаименованиеСтраны	= "";
	Формат9Запятых		= Ложь;

	Если ТипЗнч(КонтактнаяИнформация) = Тип("Строка") Тогда
		Если ТипЗнч(КонтактнаяИнформация) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(КонтактнаяИнформация), "<") Тогда
			// XML
			РезультатПреобразования = Новый Структура;
			XDTOКонтактнаяИнформация = сУКИ_КонтактнаяИнформацияИзXML(КонтактнаяИнформация, Тип, РезультатПреобразования, Представление);
			Результат.Value   = XDTOКонтактнаяИнформация.Представление;
			Результат.Comment = XDTOКонтактнаяИнформация.Комментарий;
		Иначе
			Если СтрЧислоВхождений(КонтактнаяИнформация, ",") = 9 И СтрНайти(КонтактнаяИнформация, "=") = 0 Тогда
				Формат9Запятых = Истина;
				АдресРФ        = КонтактнаяИнформация;
			Иначе
				// ключ-значение формат
				Результат = РСА_ПреобразоватьКлючЗначениеВСтруктуру(КонтактнаяИнформация, Представление);
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(КонтактнаяИнформация) = Тип("Структура") Тогда
		Возврат РСА_СтруктураАдресаВСтруктуруJSON(КонтактнаяИнформация);
	ИначеЕсли ТипЗнч(КонтактнаяИнформация) = Тип("ОбъектXDTO") Тогда
		XDTOКонтактнаяИнформация = КонтактнаяИнформация;
		Результат.Value          = XDTOКонтактнаяИнформация.Представление;
		Результат.Comment        = XDTOКонтактнаяИнформация.Комментарий;
	КонецЕсли;

	Если Тип <> Перечисления.ТипыКонтактнойИнформации.Адрес И Тип <> Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат Результат;
	КонецЕсли;

	Если НЕ Формат9Запятых Тогда
		ПространствоИмен	= "http://www.v8.1c.ru/ssl/contactinfo";
		Состав				= XDTOКонтактнаяИнформация.Состав;

		Если Состав = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;

		XDTOТип = Состав.Тип();

		Если XDTOТип = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
			Результат.Вставить("Country", Состав.Страна);
			Страна = ?(ПустаяСтрока(Состав.Страна), ОсновнаяСтрана, Справочники.СтраныМира.НайтиПоНаименованию(Состав.Страна, Истина));
			НаименованиеСтраны = Страна.Наименование;
			Результат.Вставить("CountryCode", СокрЛП(Страна.Код));

			АдресРФ = Состав.Состав;
		ИначеЕсли XDTOТип = ФабрикаXDTO.Тип("http://www.v8.1c.ru/ssl/contactinfo", "НомерТелефона") Или XDTOТип = ФабрикаXDTO.Тип("http://www.v8.1c.ru/ssl/contactinfo", "НомерФакса") Тогда
			Результат.CountryCode = Состав.КодСтраны;
			Результат.AreaCode    = Состав.КодГорода;
			Результат.Number      = Состав.Номер;
			Результат.ExtNumber   = Состав.Добавочный;

			Возврат Результат;
		ИначеЕсли XDTOТип = ФабрикаXDTO.Тип("http://www.v8.1c.ru/ssl/contactinfo", "АдресРФ") Тогда
			АдресРФ = Состав;
		Иначе
			Возврат Результат;
		КонецЕсли;

		Если АдресРФ = Неопределено Тогда
			Возврат Результат;
		ИначеЕсли ТипЗнч(АдресРФ) = Тип("Строка") Тогда
			Если СтрЧислоВхождений(АдресРФ, ",") = 9 Тогда
				Если УКИ_ЭтоСтранаУчастникЕАЭС(Результат.Country) Тогда
					Результат.AddressType = "ЕАЭС";
				Иначе
					Результат.AddressType = "Иностранный";
				КонецЕсли;

				ЧастиАдреса			= СтрРазделить(АдресРФ, ",");
				Результат.ZIPCode	= ЧастиАдреса[1];

				НаименованиеСокращение	= КонтактнаяИнформацияКлиентСервер.УКИ_НаименованиеСокращение(ЧастиАдреса[2]);
				Результат.Area			= НаименованиеСокращение.Наименование;
				Результат.AreaType		= НаименованиеСокращение.Сокращение;

				НаименованиеСокращение	= КонтактнаяИнформацияКлиентСервер.УКИ_НаименованиеСокращение(ЧастиАдреса[3]);
				Результат.District		= НаименованиеСокращение.Наименование;
				Результат.DistrictType	= НаименованиеСокращение.Сокращение;

				НаименованиеСокращение	= КонтактнаяИнформацияКлиентСервер.УКИ_НаименованиеСокращение(ЧастиАдреса[4]);
				Результат.City			= НаименованиеСокращение.Наименование;
				Результат.CityType		= НаименованиеСокращение.Сокращение;

				НаименованиеСокращение	= КонтактнаяИнформацияКлиентСервер.УКИ_НаименованиеСокращение(ЧастиАдреса[5]);
				Результат.Locality		= НаименованиеСокращение.Наименование;
				Результат.LocalityType	= НаименованиеСокращение.Сокращение;

				НаименованиеСокращение	= КонтактнаяИнформацияКлиентСервер.УКИ_НаименованиеСокращение(ЧастиАдреса[6]);
				Результат.Street		= НаименованиеСокращение.Наименование;
				Результат.StreetType	= НаименованиеСокращение.Сокращение;

				НаименованиеСокращение	= КонтактнаяИнформацияКлиентСервер.УКИ_НаименованиеСокращение(ЧастиАдреса[7]);
				Результат.HouseNumber	= НаименованиеСокращение.Сокращение;
				Результат.HouseType		= НаименованиеСокращение.Наименование;

				Если ЗначениеЗаполнено(ЧастиАдреса[8]) Тогда
					НаименованиеСокращение = КонтактнаяИнформацияКлиентСервер.УКИ_НаименованиеСокращение(ЧастиАдреса[8]);
					Результат.Buildings.Добавить(Новый Структура("type, number", НаименованиеСокращение.Наименование, НаименованиеСокращение.Сокращение));
				КонецЕсли;

				Если ЗначениеЗаполнено(ЧастиАдреса[9]) Тогда
					НаименованиеСокращение = КонтактнаяИнформацияКлиентСервер.УКИ_НаименованиеСокращение(ЧастиАдреса[9]);
					Результат.Apartments.Добавить(Новый Структура("type, number", НаименованиеСокращение.Наименование, НаименованиеСокращение.Сокращение));
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(АдресРФ.Адрес_по_документу) Или (ПустаяСтрока(АдресРФ.СубъектРФ) И ЗначениеЗаполнено(Результат.Value)) Тогда
				Результат.AddressType = "ВСвободнойФорме";
			Иначе
				Результат.AddressType = "Административно-территориальный";
			КонецЕсли;

			Результат.Country	= НаименованиеСтраны;
			Результат.ZIPCode	= Обработки.РасширенныйВводКонтактнойИнформации.ПочтовыйИндексАдреса(АдресРФ);
			Результат.OKTMO		= Формат(АдресРФ.ОКТМО, "ЧГ=0");
			Результат.OKATO		= Формат(АдресРФ.ОКАТО, "ЧГ=0");

			СубъектРФ			= КонтактнаяИнформацияКлиентСервер.УКИ_НаименованиеСокращение(АдресРФ.СубъектРФ);
			Результат.Area		= Строка(СубъектРФ.Наименование);
			Результат.AreaType	= Строка(СубъектРФ.Сокращение);

			РайонАдреса				= КонтактнаяИнформацияКлиентСервер.УКИ_НаименованиеСокращение(РСА_РайонАдреса(АдресРФ));
			Результат.District		= Строка(РайонАдреса.Наименование);
			Результат.DistrictType	= Строка(РайонАдреса.Сокращение);

			Город					= КонтактнаяИнформацияКлиентСервер.УКИ_НаименованиеСокращение(АдресРФ.Город);
			Результат.City			= Строка(Город.Наименование);
			Результат.CityType		= Строка(Город.Сокращение);

			НаселПункт				= КонтактнаяИнформацияКлиентСервер.УКИ_НаименованиеСокращение(АдресРФ.НаселПункт);
			Результат.Locality		= Строка(НаселПункт.Наименование);
			Результат.LocalityType	= Строка(НаселПункт.Сокращение);

			Улица					= КонтактнаяИнформацияКлиентСервер.УКИ_НаименованиеСокращение(АдресРФ.Улица);
			Результат.Street		= Строка(Улица.Наименование);
			Результат.StreetType	= Строка(Улица.Сокращение);

			ВнутригРайон				= КонтактнаяИнформацияКлиентСервер.УКИ_НаименованиеСокращение(АдресРФ.ВнутригРайон);
			Результат.CityDistrict		= Строка(ВнутригРайон.Наименование);
			Результат.CityDistrictType	= Строка(ВнутригРайон.Сокращение);

			ЗначениеДополнительныхЭлементов = Обработки.РасширенныйВводКонтактнойИнформации.ЗначениеДополнительныхЭлементов(АдресРФ);
			Если ЗначениеЗаполнено(ЗначениеДополнительныхЭлементов.ДополнительныйЭлемент) Тогда
				ДополнительныйЭлемент	= КонтактнаяИнформацияКлиентСервер.УКИ_НаименованиеСокращение(ЗначениеДополнительныхЭлементов.ДополнительныйЭлемент);
				Результат.Territory		= Строка(ДополнительныйЭлемент.Наименование);
				Результат.TerritoryType	= Строка(ДополнительныйЭлемент.Сокращение);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеДополнительныхЭлементов.ПодчиненныйЭлемент) Тогда
				ПодчиненныйЭлемент = КонтактнаяИнформацияКлиентСервер.УКИ_НаименованиеСокращение(ЗначениеДополнительныхЭлементов.ПодчиненныйЭлемент);
				Результат.Street     = Строка(ПодчиненныйЭлемент.Наименование);
				Результат.StreetType = Строка(ПодчиненныйЭлемент.Сокращение);
			КонецЕсли;

			ЗданияИПомещения = Обработки.РасширенныйВводКонтактнойИнформации.ЗданияИПомещенияАдреса(АдресРФ);
			Для каждого Здание Из ЗданияИПомещения.Здания Цикл
				Если Здание.Вид = 1 Тогда
					Результат.HouseType		= Здание.Тип;
					Результат.HouseNumber	= Здание.Значение;
				Иначе
					Результат.Buildings.Добавить(Новый Структура("type, number", Здание.Тип, Здание.Значение));
				КонецЕсли;
			КонецЦикла;

			Для каждого Помещение Из ЗданияИПомещения.Помещения Цикл
				Результат.Apartments.Добавить(Новый Структура("type, number", Помещение.Тип, Помещение.Значение));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	// Зарезервировано для новых подсистем

	Возврат Результат;
КонецФункции

Функция РСА_ПреобразоватьКлючЗначениеВСтруктуру(Знач ЗначенияПолей, Знач Представление)
	Перем АдресРоссийский, ИмяПоля, НазваниеОсновнойСтраны, ПолеПредставления, Результат, СписокПолей, ТипАдреса, ТипДомаНеопределен, ТипЗначенийПолей, ТипКвартирыНеопределен, ТипКорпусаНеопределен, ЭлементДом, ЭлементКвартира, ЭлементКорпус, ЭлементСписка;

	// Старый формат через разделитель строк и равенство.

	Результат			= КонтактнаяИнформацияКлиентСервер.РСА_ОписаниеНовойКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	Результат.Comment	= "";

	НазваниеОсновнойСтраны	= ВРег(ПредопределенноеЗначение("Справочник.СтраныМира.Россия").Наименование);
	ЭлементКвартира			= Неопределено;
	ЭлементКорпус			= Неопределено;
	ЭлементДом				= Неопределено;

	Результат.Country	= НазваниеОсновнойСтраны; // Страна по умолчанию
	АдресРоссийский		= Истина;

	ТипЗначенийПолей = ТипЗнч(ЗначенияПолей);
	Если ТипЗначенийПолей = Тип("СписокЗначений") Тогда
		СписокПолей = ЗначенияПолей;
	ИначеЕсли ТипЗначенийПолей = Тип("Структура") Тогда
		СписокПолей = сУКИ_ПреобразоватьСтрокуВСписокПолей(РСА_СтрокаПолей(ЗначенияПолей, Ложь));
	Иначе
		// Уже преобразовано в строку
		СписокПолей = сУКИ_ПреобразоватьСтрокуВСписокПолей(ЗначенияПолей);
	КонецЕсли;

	ТипКвартирыНеопределен = Истина;
	ТипКорпусаНеопределен  = Истина;
	ТипДомаНеопределен     = Истина;
	ПолеПредставления      = "";

	Для Каждого ЭлементСписка Из СписокПолей Цикл
		ИмяПоля = ВРег(ЭлементСписка.Представление);

		Если ИмяПоля = "ИНДЕКС" Тогда
			Результат.ZIPcode = ЭлементСписка.Значение;
		ИначеЕсли ИмяПоля = "СТРАНА" Тогда
			Результат.Country = ЭлементСписка.Значение;
			Если ВРег(ЭлементСписка.Значение) <> НазваниеОсновнойСтраны Тогда
				АдресРоссийский = Ложь;
			КонецЕсли;
		ИначеЕсли ИмяПоля = "КОДСТРАНЫ" Тогда
			Результат.countryCode =  ЭлементСписка.Значение;
		ИначеЕсли ИмяПоля = "КОДРЕГИОНА" Тогда
			Результат.areaCode = ЭлементСписка.Значение;
			НаименованиеИТип = КонтактнаяИнформацияКлиентСервер.УКИ_НаименованиеСокращение(РСА_РегионКода(ЭлементСписка.Значение));
			Результат.area = НаименованиеИТип.Наименование;
			Результат.areaType = СокрЛП(НаименованиеИТип.Сокращение);
		ИначеЕсли ИмяПоля = "РЕГИОН" Тогда
			НаименованиеИТип = КонтактнаяИнформацияКлиентСервер.УКИ_НаименованиеСокращение(ЭлементСписка.Значение);
			Результат.area = НаименованиеИТип.Наименование;
			Результат.areaType = НаименованиеИТип.Сокращение;
		ИначеЕсли ИмяПоля = "РАЙОН" Тогда
			НаименованиеИТип = КонтактнаяИнформацияКлиентСервер.УКИ_НаименованиеСокращение(ЭлементСписка.Значение);
			Результат.district = НаименованиеИТип.Наименование;
			Результат.districtType = НаименованиеИТип.Сокращение;
		ИначеЕсли ИмяПоля = "ГОРОД" Тогда
			НаименованиеИТип = КонтактнаяИнформацияКлиентСервер.УКИ_НаименованиеСокращение(ЭлементСписка.Значение);
			Результат.city = НаименованиеИТип.Наименование;
			Результат.cityType = НаименованиеИТип.Сокращение;
		ИначеЕсли ИмяПоля = "НАСЕЛЕННЫЙПУНКТ" Тогда
			НаименованиеИТип = КонтактнаяИнформацияКлиентСервер.УКИ_НаименованиеСокращение(ЭлементСписка.Значение);
			Результат.locality = НаименованиеИТип.Наименование;
			Результат.localityType = НаименованиеИТип.Сокращение;
		ИначеЕсли ИмяПоля = "УЛИЦА" Тогда
			НаименованиеИТип = КонтактнаяИнформацияКлиентСервер.УКИ_НаименованиеСокращение(ЭлементСписка.Значение);
			Результат.street = НаименованиеИТип.Наименование;
			Результат.streetType = НаименованиеИТип.Сокращение;
		ИначеЕсли ИмяПоля = "ТИПДОМА" Тогда
			Результат.houseType = ТРег(СокрЛП(ЭлементСписка.Значение));
		ИначеЕсли ИмяПоля = "ДОМ" Тогда
			Результат.houseNumber = ЭлементСписка.Значение;
		ИначеЕсли ИмяПоля = "ТИПКОРПУСА" Тогда
			Если ЭлементКорпус = Неопределено Тогда
				ЭлементКорпус = Новый Структура("type, number", "", "");
				Результат.buildings.Добавить(ЭлементКорпус);
			КонецЕсли;
			ЭлементКорпус.type		= ТРег(СокрЛП(ЭлементСписка.Значение));
			ТипКорпусаНеопределен	= Ложь;
		ИначеЕсли ИмяПоля = "КОРПУС" Тогда
			Если ЭлементКорпус = Неопределено Тогда
				ЭлементКорпус = Новый Структура("type, number", "", "");
				Результат.buildings.Добавить(ЭлементКорпус);
			КонецЕсли;
			ЭлементКорпус.number = ЭлементСписка.Значение;
		ИначеЕсли ИмяПоля = "ТИПКВАРТИРЫ" Тогда
			Если ЭлементКвартира = Неопределено Тогда
				ЭлементКвартира = Новый Структура("type, number", "", "");
				Результат.apartments.Добавить(ЭлементКвартира);
			КонецЕсли;
			ЭлементКвартира.type	= ТРег(СокрЛП(ЭлементСписка.Значение));
			ТипКвартирыНеопределен	= Ложь;
		ИначеЕсли ИмяПоля = "КВАРТИРА" Тогда
			Если ЭлементКвартира = Неопределено Тогда
				ЭлементКвартира = Новый Структура("type, number", "", "");
				Результат.apartments.Добавить(ЭлементКвартира);
			КонецЕсли;
			ЭлементКвартира.number = ЭлементСписка.Значение;
		ИначеЕсли ИмяПоля = "ПРЕДСТАВЛЕНИЕ" Тогда
			ПолеПредставления	= СокрЛП(ЭлементСписка.Значение);
			Результат.value		= ПолеПредставления;
		КонецЕсли;
	КонецЦикла;

	// Умолчания
	Если ТипДомаНеопределен И ЭлементДом <> Неопределено Тогда
		Результат.houseType = "Дом";
	КонецЕсли;

	Если ТипКорпусаНеопределен И ЭлементКорпус <> Неопределено Тогда
		ЭлементКорпус.type = "Корпус";
	КонецЕсли;

	Если ТипКвартирыНеопределен И ЭлементКвартира <> Неопределено Тогда
		ЭлементКвартира.type = "Квартира";
	КонецЕсли;

	ТипАдреса				= ?(АдресРоссийский, "Административно-территориальный", "Иностранный");
	Результат.addressType	= ТипАдреса;

	// Представление с приоритетами.
	Если Не ПустаяСтрока(Представление) Тогда
		Результат.value = Представление;
	ИначеЕсли ЗначениеЗаполнено(ПолеПредставления) Тогда
		Результат.value = ПолеПредставления;
	Иначе
		Результат.value = КонтактнаяИнформацияКлиентСервер.РСА_ПредставлениеАдреса(Результат, Ложь, ТипАдреса);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция РСА_ПередЧтениемXDTOКонтактнаяИнформация(ТекстXML) Экспорт
	Если СтрНайти(ТекстXML, "Адрес") = 0 Тогда
		Возврат ТекстXML;
	КонецЕсли;

	Если СтрНайти(ТекстXML, "http://www.v8.1c.ru/ssl/contactinfo_ru") > 0 Тогда
		Возврат ТекстXML;
	КонецЕсли;

	ТекстXML = СтрЗаменить(ТекстXML, "xsi:type=""АдресРФ""", "xmlns:rf=""http://www.v8.1c.ru/ssl/contactinfo_ru"" xsi:type=""rf:АдресРФ""");

	ТекстXML = СтрЗаменить(ТекстXML, "<СубъектРФ", "<rf:СубъектРФ");
	ТекстXML = СтрЗаменить(ТекстXML, "/СубъектРФ>", "/rf:СубъектРФ>");
	ТекстXML = СтрЗаменить(ТекстXML, "<СубъектРФ/>", "<rf:СубъектРФ/>");

	ТекстXML = СтрЗаменить(ТекстXML, "<Округ", "<rf:Округ");
	ТекстXML = СтрЗаменить(ТекстXML, "/Округ>", "/rf:Округ>");
	ТекстXML = СтрЗаменить(ТекстXML, "<Округ/>", "<rf:Округ/>");

	ТекстXML = СтрЗаменить(ТекстXML, "<СвРайМО", "<rf:СвРайМО");
	ТекстXML = СтрЗаменить(ТекстXML, "/СвРайМО>", "/rf:СвРайМО>");
	ТекстXML = СтрЗаменить(ТекстXML, "<СвРайМО/>", "<rf:СвРайМО/>");

	ТекстXML = СтрЗаменить(ТекстXML, "<Район", "<rf:Район");
	ТекстXML = СтрЗаменить(ТекстXML, "/Район>", "/rf:Район>");
	ТекстXML = СтрЗаменить(ТекстXML, "</Район>", "</rf:Район>");

	ТекстXML = СтрЗаменить(ТекстXML, "<Город", "<rf:Город");
	ТекстXML = СтрЗаменить(ТекстXML, "/Город>", "/rf:Город>");
	ТекстXML = СтрЗаменить(ТекстXML, "<Город/>", "<rf:Город/>");

	ТекстXML = СтрЗаменить(ТекстXML, "ВнутригРайон", "rf:ВнутригРайон");

	ТекстXML = СтрЗаменить(ТекстXML, "НаселПункт", "rf:НаселПункт");

	ТекстXML = СтрЗаменить(ТекстXML, "<Улица", "<rf:Улица");
	ТекстXML = СтрЗаменить(ТекстXML, "/Улица>", "/rf:Улица>");
	ТекстXML = СтрЗаменить(ТекстXML, "<Улица/>", "<rf:Улица/>");

	ТекстXML = СтрЗаменить(ТекстXML, "ОКТМО", "rf:ОКТМО");
	ТекстXML = СтрЗаменить(ТекстXML, "ОКАТО", "rf:ОКАТО");

	ТекстXML = СтрЗаменить(ТекстXML, "ДопАдрЭл", "rf:ДопАдрЭл");

	ТекстXML = СтрЗаменить(ТекстXML, "<Номер", "<rf:Номер");
	ТекстXML = СтрЗаменить(ТекстXML, "/Номер>", "/rf:Номер>");
	ТекстXML = СтрЗаменить(ТекстXML, "<Номер/>", "<rf:Номер/>");

	ТекстXML = СтрЗаменить(ТекстXML, "<Местоположение", "<rf:Местоположение");
	ТекстXML = СтрЗаменить(ТекстXML, "/Местоположение>", "/rf:Местоположение>");
	ТекстXML = СтрЗаменить(ТекстXML, "<Местоположение/>", "<rf:Местоположение/>");

	Возврат ТекстXML;
КонецФункции

Функция РСА_СтруктураАдресаВСтруктуруJSON(Знач КонтактнаяИнформация)
	ОписаниеКонтактнойИнформации = КонтактнаяИнформацияКлиентСервер.РСА_ОписаниеНовойКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);

	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ТипАдреса",                      "addressType");
	СоответствиеПолей.Вставить("Представление",                  "value");
	СоответствиеПолей.Вставить("Комментарий",                    "comment");
	СоответствиеПолей.Вставить("НаименованиеСтраны",             "country");
	СоответствиеПолей.Вставить("Страна",                         "country");
	СоответствиеПолей.Вставить("Индекс",                         "ZIPCode");
	СоответствиеПолей.Вставить("ОКТМО",                          "oktmo");
	СоответствиеПолей.Вставить("ОКАТО",                          "okato");
	СоответствиеПолей.Вставить("Регион",                         "area");
	СоответствиеПолей.Вставить("РегионСокращение",               "areaType");
	СоответствиеПолей.Вставить("Район",                          "district");
	СоответствиеПолей.Вставить("РайонСокращение",                "districtType");
	СоответствиеПолей.Вставить("Город",                          "city");
	СоответствиеПолей.Вставить("ГородСокращение",                "cityType");
	СоответствиеПолей.Вставить("НаселенныйПункт",                "locality");
	СоответствиеПолей.Вставить("НаселенныйПунктСокращение",      "localityType");
	СоответствиеПолей.Вставить("Улица",                          "street");
	СоответствиеПолей.Вставить("УлицаСокращение",                "streetType");
	СоответствиеПолей.Вставить("КодРегиона",                     "areaCode");
	СоответствиеПолей.Вставить("МуниципальныйРайон",             "munDistrict");
	СоответствиеПолей.Вставить("МуниципальныйРайонСокращение",   "munDistrictType");
	СоответствиеПолей.Вставить("Поселение",                      "settlement");
	СоответствиеПолей.Вставить("ПоселениеСокращение",            "settlementType");
	СоответствиеПолей.Вставить("ВнутригородскойРайон",           "cityDistrict");
	СоответствиеПолей.Вставить("ВнутригородскойРайонСокращение", "cityDistrictType");
	СоответствиеПолей.Вставить("Территория",                     "territory");
	СоответствиеПолей.Вставить("ТерриторияСокращение",           "territoryType");
	СоответствиеПолей.Вставить("ИдентификаторАдресногоОбъекта",  "id");
	СоответствиеПолей.Вставить("ИдентификаторДома",              "houseId");
	СоответствиеПолей.Вставить("Дом",                            "houseNumber");
	СоответствиеПолей.Вставить("ТипДома",                        "houseType");

	Для каждого ПолеКонтактнойИнформации Из КонтактнаяИнформация Цикл
		ИмяПоля = СоответствиеПолей.Получить(ПолеКонтактнойИнформации.Ключ);
		Если ИмяПоля <> Неопределено Тогда
			ОписаниеКонтактнойИнформации[ИмяПоля] = ПолеКонтактнойИнформации.Значение;
		КонецЕсли;
	КонецЦикла;

	Если КонтактнаяИнформация.Свойство("ТипАдреса") И СтрСравнить(КонтактнаяИнформация.ТипАдреса, "Муниципальный") = 0 Тогда
		ОписаниеКонтактнойИнформации.AddressType = "Муниципальный";
		Если КонтактнаяИнформация.Свойство("МуниципальноеПредставление") И ЗначениеЗаполнено(КонтактнаяИнформация.МуниципальноеПредставление) Тогда
			ОписаниеКонтактнойИнформации.value = КонтактнаяИнформация.МуниципальноеПредставление;
		КонецЕсли;
	Иначе
		ОписаниеКонтактнойИнформации.AddressType = "Административно-территориальный";
	КонецЕсли;

	Если КонтактнаяИнформация.Свойство("Здание") И ТипЗнч(КонтактнаяИнформация.Здание) = Тип("Структура") И КонтактнаяИнформация.Здание.Свойство("Номер") Тогда
		ОписаниеКонтактнойИнформации.HouseNumber	= ?(КонтактнаяИнформация.Здание.Свойство("Номер"), КонтактнаяИнформация.Здание.Номер, "");
		ОписаниеКонтактнойИнформации.HouseType		= ?(КонтактнаяИнформация.Здание.Свойство("ТипЗдания"), КонтактнаяИнформация.Здание.ТипЗдания, "Дом"); // Тип владения не локализуется
	КонецЕсли;

	Если КонтактнаяИнформация.Свойство("Корпус") И ЗначениеЗаполнено(КонтактнаяИнформация.Корпус) Тогда
		ТипКорпуса = ?(КонтактнаяИнформация.Свойство("ТипКорпуса"), КонтактнаяИнформация.ТипКорпуса, "Корпус"); // Тип владения не локализуется
		ОписаниеКонтактнойИнформации.buildings.Добавить(Новый Структура("type, number", ТипКорпуса, КонтактнаяИнформация.Корпус));
	ИначеЕсли КонтактнаяИнформация.Свойство("Корпуса") И ТипЗнч(КонтактнаяИнформация.Корпуса) = Тип("Массив") Тогда
		Для каждого Корпус Из КонтактнаяИнформация.Корпуса Цикл
			ТипКорпуса = ?(Корпус.Свойство("ТипКорпуса"), Корпус.ТипКорпуса, Корпус.Тип);
			ОписаниеКонтактнойИнформации.buildings.Добавить(Новый Структура("type, number", ТипКорпуса, Корпус.Номер));
		КонецЦикла;
	КонецЕсли;

	Если КонтактнаяИнформация.Свойство("Квартира") И ЗначениеЗаполнено(КонтактнаяИнформация.Квартира) Тогда
		ТипКвартиры = ?(КонтактнаяИнформация.Свойство("ТипКвартиры"), КонтактнаяИнформация.ТипКвартиры, "Квартира"); // Тип помещения не локализуется
		ОписаниеКонтактнойИнформации.apartments.Добавить(Новый Структура("type, number", ТипКвартиры, КонтактнаяИнформация.Квартира));
	ИначеЕсли КонтактнаяИнформация.Свойство("Помещения") И ТипЗнч(КонтактнаяИнформация.Помещения) = Тип("Массив") Тогда
		Для каждого Помещение Из КонтактнаяИнформация.Помещения Цикл
			ТипПомещения = ?(Помещение.Свойство("ТипПомещения"), Помещение.ТипПомещения, Помещение.Тип);
			ОписаниеКонтактнойИнформации.apartments.Добавить(Новый Структура("type, number", ТипПомещения, Помещение.Номер));
		КонецЦикла;
	КонецЕсли;

	Если ПустаяСтрока(ОписаниеКонтактнойИнформации.value) Тогда
		ОписаниеКонтактнойИнформации.value = КонтактнаяИнформацияКлиентСервер.РСА_ПредставлениеАдреса(ОписаниеКонтактнойИнформации, Ложь,
			ОписаниеКонтактнойИнформации.AddressType);
	КонецЕсли;

	Возврат ОписаниеКонтактнойИнформации;
КонецФункции

Функция РСА_РайонАдреса(XDTOАдрес, НовоеЗначение = Неопределено)
	Если НовоеЗначение = Неопределено Тогда

		XDTOТип = XDTOАдрес.Тип();
		Если XDTOТип = ФабрикаXDTO.Тип("http://www.v8.1c.ru/ssl/contactinfo_ru", "АдресРФ") Тогда
			АдресРФ = XDTOАдрес;
		Иначе
			АдресРФ = XDTOАдрес.Состав;
		КонецЕсли;

		Если ТипЗнч(АдресРФ) = Тип("ОбъектXDTO") Тогда
			Возврат УКИ_ПолучитьXDTOРеквизитОбъекта(АдресРФ, "СвРайМО/Район");
		КонецЕсли;

		Возврат Неопределено;
	КонецЕсли;

	// Запись
	Запись			= РСА_СвРайМО(XDTOАдрес);
	Запись.Район	= НовоеЗначение;

	Возврат НовоеЗначение;
КонецФункции

Функция РСА_СвРайМО(АдресРФ)
	Если АдресРФ.СвРайМО <> Неопределено Тогда
		Возврат АдресРФ.СвРайМО;
	КонецЕсли;

	АдресРФ.СвРайМО = ФабрикаXDTO.Создать( АдресРФ.Свойства().Получить("СвРайМО").Тип);

	Возврат АдресРФ.СвРайМО;
КонецФункции

Функция РСА_СтрокаПолей(СтруктураЗначенийПолей, БезПустыхПолей = Истина) Экспорт
	Результат = "";
	Для Каждого ЗначениеПоля Из СтруктураЗначенийПолей Цикл
		Если БезПустыхПолей И ПустаяСтрока(ЗначениеПоля.Значение) Тогда
			Продолжить;
		КонецЕсли;

		Результат = Результат + ?(Результат = "", "", Символы.ПС) + ЗначениеПоля.Ключ + "=" + СтрЗаменить(ЗначениеПоля.Значение, Символы.ПС, Символы.ПС + Символы.Таб);
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция РСА_РегионКода(Знач Код)
	// Зарезервировано для новых подсистем

	Возврат Неопределено;
КонецФункции

Функция РСА_КодСериализацииОбъектаАдресации(СтрокаЗначения) Экспорт
	Ключ = ВРег(СокрЛП(СтрокаЗначения));
	Для Каждого Элемент Из РСА_ТипыОбъектовАдресацииАдресаРФ() Цикл
		Если Элемент.Ключ = Ключ Тогда
			Возврат Элемент.Код;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

Функция РСА_КодСериализацииДополнительногоОбъектаАдресации(Уровень, ТипаАдресногоЭлемента = "") Экспорт
	Если Уровень = 90 Тогда
		Если ВРег(ТипаАдресногоЭлемента) = "ГСК" Тогда
			Возврат "10600000";
		ИначеЕсли ВРег(ТипаАдресногоЭлемента) = "СНТ" Тогда
			Возврат "10300000";
		ИначеЕсли ВРег(ТипаАдресногоЭлемента) = "ТЕР" Тогда
			Возврат "10700000";
		Иначе
			Возврат "10200000";
		КонецЕсли;
	ИначеЕсли Уровень = 91 Тогда
		Возврат "10400000";
	КонецЕсли;

	// Все остальное - считаем ориентиром.
	Возврат "Местоположение";
КонецФункции

Функция РСА_XPathНомераДополнительногоОбъектаАдресации(СтрокаЗначения) Экспорт
	Код = РСА_КодСериализацииОбъектаАдресации(СтрокаЗначения);
	Если Код = Неопределено Тогда
		Код = СтрЗаменить(СтрокаЗначения, "'", "");
	КонецЕсли;

	Возврат "ДопАдрЭл/Номер[Тип='" + Код + "']";
КонецФункции

Функция РСА_ТипОбъектаПоКодуСериализации(Код) Экспорт
	Для Каждого Элемент Из РСА_ТипыОбъектовАдресацииАдресаРФ() Цикл
		Если Элемент.Код = Код Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

Функция РСА_ТипыОбъектовАдресацииАдресаРФ() Экспорт
	Результат = Новый Массив;

	// Код, Наименование, Тип, Порядок, КодАдресногоКлассификатора
	// Тип: 1 - владение, 2 - здание, 3 - помещение.

	Результат.Добавить(РСА_СтрокаОбъектаАдресации("1010", "Дом",          1, 1, 2)); // Тип владения не локализуется
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("1020", "Владение",     1, 2, 1)); // Тип владения не локализуется
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("1030", "Домовладение", 1, 3, 3)); // Тип владения не локализуется
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("1034", "Гараж",        1, 4, 4)); // Тип владения не локализуется
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("1036", "Здание",       1, 5, 5)); // Тип владения не локализуется
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("1038", "Шахта",        1, 6, 6)); // Тип владения не локализуется
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("1039", "Зем. участок", 1, 9, 9));

	Результат.Добавить(РСА_СтрокаОбъектаАдресации("1050", "Корпус",     2, 1)); // Тип здания не локализуется
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("1060", "Строение",   2, 2, 1)); // Тип здания не локализуется
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("1080", "Литера",     2, 3, 3)); // Тип здания не локализуется
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("1090", "Литер",      2, 6, 3)); // Тип здания не локализуется
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("1070", "Сооружение", 2, 4, 2)); // Тип здания не локализуется
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("1040", "Участок",    2, 5)); // Тип здания не локализуется

	Результат.Добавить(РСА_СтрокаОбъектаАдресации("2010", "Квартира",  3, 1)); // Тип помещения не локализуется
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("2030", "Офис",      3, 2)); // Тип помещения не локализуется
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("2040", "Бокс",      3, 3)); // Тип помещения не локализуется
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("2020", "Помещение", 3, 4)); // Тип помещения не локализуется
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("2050", "Комната",   3, 5)); // Тип помещения не локализуется
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("2060", "Этаж",      3, 6)); // Тип помещения не локализуется
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("2070", "А/я",       3, 7)); // Тип помещения не локализуется
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("2080", "В/ч",       3, 8)); // Тип помещения не локализуется
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("2090", "П/о",       3, 9)); // Тип помещения не локализуется
	//  Наши сокращения для поддержки обратной совместимости при парсинге.
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("2010", "кв.",       3, 6)); // Тип помещения не локализуется
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("2030", "оф.",       3, 7)); // Тип помещения не локализуется
	// Ввод помещения вручную.
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("2000", "",          3, 0));

	// Уточняющие объекты
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("10100000", "Почтовый индекс"));
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("10200000", "Адресная точка"));
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("10300000", "Садовое товарищество"));
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("10400000", "Элемент улично-дорожной сети, планировочной структуры дополнительного адресного элемента"));
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("10500000", "Промышленная зона"));
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("10600000", "Гаражно-строительный кооператив"));
	Результат.Добавить(РСА_СтрокаОбъектаАдресации("10700000", "Территория"));

	Возврат Результат;
КонецФункции

Функция РСА_СтрокаОбъектаАдресации(Код, Наименование, Тип = 0, Порядок = 0, КодАдресногоКлассификатора = 0)
	СтруктураОбъектаАдресации = Новый Структура;
	СтруктураОбъектаАдресации.Вставить("Код",							Код);
	СтруктураОбъектаАдресации.Вставить("Наименование",					Наименование);
	СтруктураОбъектаАдресации.Вставить("Тип",							Тип);
	СтруктураОбъектаАдресации.Вставить("Порядок",						Порядок);
	СтруктураОбъектаАдресации.Вставить("КодАдресногоКлассификатора",	КодАдресногоКлассификатора);
	СтруктураОбъектаАдресации.Вставить("Сокращение",					НРег(Наименование));
	СтруктураОбъектаАдресации.Вставить("Ключ",							ВРег(Наименование));

	Возврат СтруктураОбъектаАдресации;
КонецФункции

Функция РСА_СокращенияОбъектовАдресацииАдресаРФ() Экспорт
	Результат = Новый Соответствие;

	// Не локализуется
	Результат.Вставить("Дом",			"Д.");
	Результат.Вставить("Владение",		"Вл.");
	Результат.Вставить("Домовладение",	"Домовл.");

	Результат.Вставить("Корпус",		"Корп.");
	Результат.Вставить("Строение",		"Стр.");
	Результат.Вставить("Литера",		"Лит.");
	Результат.Вставить("Сооружение",	"Сооруж.");
	Результат.Вставить("Участок",		"Уч.");

	Результат.Вставить("Квартира",		"Кв.");
	Результат.Вставить("Офис",			"Оф.");
	Результат.Вставить("Бокс",			"Бокс");
	Результат.Вставить("Помещение",		"Пом.");
	Результат.Вставить("Комната",		"Ком.");
	Результат.Вставить("Этаж",			"Этаж");
	Результат.Вставить("А/я",			"а/я");
	Результат.Вставить("П/о",			"п/о");
	Результат.Вставить("В/ч",			"в/ч");

	Возврат Результат;
КонецФункции

Функция РСА_НаименованияОбъектовАдресацииПоТипу(Тип, ДопускатьПовторыКода = Истина) Экспорт
	Результат = Новый Массив;
	Повторы   = Новый Соответствие;

	Для Каждого Элемент Из РСА_ТипыОбъектовАдресацииАдресаРФ() Цикл
		Если Элемент.Тип = Тип Тогда
			Если ДопускатьПовторыКода Тогда
				Результат.Добавить(Элемент.Наименование);
			Иначе
				Если Повторы.Получить(Элемент.Код) = Неопределено Тогда
					Результат.Добавить(Элемент.Наименование);
				КонецЕсли;
				Повторы.Вставить(Элемент.Код, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция РСА_КодРегиона(Знач ПолноеНаименование) Экспорт
	// Зарезервировано для новых подсистем

	Возврат Неопределено;
КонецФункции

Процедура РСА_УстановкаТипаОбластьКемеровскойОбласти(КонтактнаяИнформацияПоПолям) Экспорт
	Если СтрСравнить(КонтактнаяИнформацияПоПолям.area, "Кемеровская область -") = 0 Тогда
		КонтактнаяИнформацияПоПолям.area		= "Кемеровская область - Кузбасс";
		КонтактнаяИнформацияПоПолям.areaType	= "обл";
	КонецЕсли;
КонецПроцедуры

Функция РСА_КонвертироватьАдресИзJSONВXML(Знач ЗначенияПолей, Знач Представление, Знач ОжидаемыйТип = Неопределено) Экспорт
	// Старый формат через разделитель строк и равенство.
	ПространствоИмен = "http://www.v8.1c.ru/ssl/contactinfo";

	Результат			= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Состав	= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));

	НазваниеОсновнойСтраны  = ВРег(ПредопределенноеЗначение("Справочник.СтраныМира.Россия").Наименование);

	// Национальный
	НациональныйАдрес = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.v8.1c.ru/ssl/contactinfo_ru", "АдресРФ"));

	// Общий состав
	Адрес				= Результат.Состав;
	Адрес.Страна		= НазваниеОсновнойСтраны; // Страна по умолчанию
	АдресНациональный	= Истина;

	ПолеПредставления      = "";

	Для Каждого ЭлементСписка Из ЗначенияПолей Цикл
		Если ПустаяСтрока(ЭлементСписка.Значение) Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоля = ВРег(ЭлементСписка.Ключ);

		Если ИмяПоля="ZIPCODE" Тогда
			ЭлементИндекс			= РСА_СоздатьДопАдрЭлемента(НациональныйАдрес);
			ЭлементИндекс.ТипАдрЭл	= РСА_КодСериализацииОбъектаАдресации("Почтовый индекс");
			ЭлементИндекс.Значение	= ЭлементСписка.Значение;
		ИначеЕсли ИмяПоля = "COMMENT" Тогда
			Результат.Комментарий	= ЭлементСписка.Значение;
		ИначеЕсли ИмяПоля = "COUNTRY" Тогда
			Адрес.Страна			= Строка(ЭлементСписка.Значение);
			Если ВРег(ЭлементСписка.Значение) <> НазваниеОсновнойСтраны Тогда
				АдресНациональный = Ложь;
			КонецЕсли;
		ИначеЕсли ИмяПоля = "COUNTRYCODE" Тогда
			// действия не требуется
		ИначеЕсли ИмяПоля = "AREACODE" Тогда
			Если ПустаяСтрока(НациональныйАдрес.СубъектРФ) Тогда
				НациональныйАдрес.СубъектРФ = РСА_РегионКода(ЭлементСписка.Значение);
			КонецЕсли;
		ИначеЕсли ИмяПоля = "AREA" Тогда
			НациональныйАдрес.СубъектРФ = ЭлементСписка.Значение + " " + ЗначенияПолей.AreaType;
		ИначеЕсли ИмяПоля = "DISTRICT" Тогда
			Если НациональныйАдрес.СвРайМО = Неопределено Тогда
				НациональныйАдрес.СвРайМО = ФабрикаXDTO.Создать(НациональныйАдрес.Тип().Свойства.Получить("СвРайМО").Тип)
			КонецЕсли;
			НациональныйАдрес.СвРайМО.Район = СокрЛП(ЭлементСписка.Значение + " " + ЗначенияПолей.DistrictType);
		ИначеЕсли ИмяПоля = "CITY" Тогда
			Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
				НациональныйАдрес.Город = СокрЛП(ЭлементСписка.Значение + " " + ЗначенияПолей.CityType);
			КонецЕсли;
		ИначеЕсли ИмяПоля = "TERRITORY" Тогда
			ПутьXPath = РСА_XPathДополнительногоОбъектаАдресации(90, ЗначенияПолей.TerritoryType);
			Обработки.РасширенныйВводКонтактнойИнформации.УстановитьXDTOРеквизитОбъекта(НациональныйАдрес, ПутьXPath, ЭлементСписка.Значение + " " + ЗначенияПолей.TerritoryType);
		ИначеЕсли ИмяПоля = "LOCALITY" Тогда
			НациональныйАдрес.НаселПункт = СокрЛП(ЭлементСписка.Значение + " " + ЗначенияПолей.LocalityType);
		ИначеЕсли ИмяПоля = "CITYDISTRICT" Тогда
			НациональныйАдрес.ВнутригРайон = СокрЛП(ЭлементСписка.Значение + " " + ЗначенияПолей.CityDistrictType);
		ИначеЕсли ИмяПоля = "STREET" Тогда
			НациональныйАдрес.Улица = СокрЛП(ЭлементСписка.Значение  + " " + ЗначенияПолей.StreetType);
		ИначеЕсли ИмяПоля = "HOUSETYPE" Тогда
			ЭлементДом		= РСА_СоздатьНомерДопАдрЭлемента(НациональныйАдрес);
			ЭлементДом.Тип	= РСА_КодСериализацииОбъектаАдресации(ЭлементСписка.Значение);
			Если ЭлементДом.Тип = Неопределено Тогда
				ЭлементДом.Тип = РСА_КодСериализацииОбъектаАдресации("Дом");
			КонецЕсли;
			ЭлементДом.Значение = ЗначенияПолей.HouseNumber;
		ИначеЕсли ИмяПоля = "BUILDINGS" Тогда
			Для каждого СписокСтроение Из ЭлементСписка.Значение Цикл
				// тип корпуса
				ЭлементКорпус          = РСА_СоздатьНомерДопАдрЭлемента(НациональныйАдрес);
				ЭлементКорпус.Тип      = РСА_КодСериализацииОбъектаАдресации(СписокСтроение.Type);
				Если ЭлементКорпус.Тип = Неопределено Тогда
					ЭлементКорпус.Тип  = РСА_КодСериализацииОбъектаАдресации("Корпус");
				КонецЕсли;
				ЭлементКорпус.Значение = СписокСтроение.Number;
			КонецЦикла;
		ИначеЕсли ИмяПоля = "APARTMENTS" Тогда
			Для каждого СписокСтроение Из ЭлементСписка.Значение Цикл
				// тип квартиры
				ЭлементКвартира          = РСА_СоздатьНомерДопАдрЭлемента(НациональныйАдрес);
				ЭлементКвартира.Тип      = РСА_КодСериализацииОбъектаАдресации(СписокСтроение.Type);
				Если ЭлементКвартира.Тип = Неопределено Тогда
					ЭлементКвартира.Тип  = РСА_КодСериализацииОбъектаАдресации("Квартира");
				КонецЕсли;
				ЭлементКвартира.Значение = СписокСтроение.Number;
			КонецЦикла;
		ИначеЕсли ИмяПоля = "OKTMO" Тогда
			НациональныйАдрес.ОКТМО = ЭлементСписка.Значение;
		ИначеЕсли ИмяПоля = "ОКАТО" Тогда
			НациональныйАдрес.ОКАТО = ЭлементСписка.Значение;
		ИначеЕсли ИмяПоля = "VALUE" Тогда
			ПолеПредставления = СокрЛП(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;

	// Представление с приоритетами.
	Если Не ПустаяСтрока(Представление) Тогда
		Результат.Представление = Представление;
	Иначе
		Результат.Представление = ПолеПредставления;
	КонецЕсли;

	Адрес.Состав = ?(АдресНациональный, НациональныйАдрес, Результат.Представление);

	Возврат Результат;
КонецФункции

Функция РСА_СоздатьНомерДопАдрЭлемента(АдресРФ)
	ДопАдрЭл		= РСА_СоздатьДопАдрЭлемента(АдресРФ);
	ДопАдрЭл.Номер	= ФабрикаXDTO.Создать(ДопАдрЭл.Тип().Свойства.Получить("Номер").Тип);

	Возврат ДопАдрЭл.Номер;
КонецФункции

Функция РСА_СоздатьДопАдрЭлемента(АдресРФ)
	СвойствоДопАдрЭлемента	= АдресРФ.ДопАдрЭл.ВладеющееСвойство;
	ДопАдрЭлемента			= ФабрикаXDTO.Создать(СвойствоДопАдрЭлемента.Тип);
	АдресРФ.ДопАдрЭл.Добавить(ДопАдрЭлемента);

	Возврат ДопАдрЭлемента;
КонецФункции

Функция РСА_XPathДополнительногоОбъектаАдресации(Уровень, ТипаАдресногоЭлемента = "") Экспорт
	КодСериализации = РСА_КодСериализацииДополнительногоОбъектаАдресации(Уровень, ТипаАдресногоЭлемента);

	Возврат "ДопАдрЭл[ТипАдрЭл='" + КодСериализации + "']";
КонецФункции

Функция РСА_ПередЗаписьюXDTOКонтактнаяИнформация(ТекстXML) Экспорт
	Позиция = СтрНайти(ТекстXML, "АдресРФ""");
	Если Позиция > 0 Тогда
		ПозицияНачало	= СтрНайти(ТекстXML, """", НаправлениеПоиска.СКонца, Позиция);
		Префикс			= Сред(ТекстXML, ПозицияНачало + 1, Позиция - ПозицияНачало - 2);

		ТекстXML		= СтрЗаменить(ТекстXML, Префикс +":", "");
		ТекстXML		= СтрЗаменить(ТекстXML, " xmlns:"+ Префикс + "=""http://www.v8.1c.ru/ssl/contactinfo_ru""", "");
	КонецЕсли;
	Возврат ТекстXML;
КонецФункции

Функция РСА_ДополнительныеПравилаПреобразования() Экспорт
	КодыДополнительныхАдресныхЭлементов = Новый ТекстовыйДокумент;
	Для Каждого ДополнительныйАдресныйЭлемент Из РСА_ТипыОбъектовАдресацииАдресаРФ() Цикл
		КодыДополнительныхАдресныхЭлементов.ДобавитьСтроку("<data:item data:title=""" + ДополнительныйАдресныйЭлемент.Наименование + """>" + ДополнительныйАдресныйЭлемент.Код + "</data:item>");
		КодыДополнительныхАдресныхЭлементов.ДобавитьСтроку("<data:item data:title=""" + НРег(ДополнительныйАдресныйЭлемент.Наименование) + """>" + ДополнительныйАдресныйЭлемент.Код + "</data:item>");
	КонецЦикла;

	КодыРегионов = Новый ТекстовыйДокумент;
	ВсеРегионы = РСА_ВсеРегионы();
	Если ВсеРегионы <> Неопределено Тогда
		Для Каждого Строка Из ВсеРегионы Цикл
			КодыРегионов.ДобавитьСтроку("<data:item data:code=""" + Формат(Строка.КодСубъектаРФ, "ЧН=; ЧГ=") + """>" + Строка.Представление + "</data:item>");
		КонецЦикла;
	КонецЕсли;

	РасширенныйТекстПреобразования = "
	|  <xsl:template match=""/"" mode=""domestic"">
	|    <xsl:element name=""Состав"">
	|      <xsl:attribute name=""xsi:type"">АдресРФ</xsl:attribute>
	|
	|      <xsl:element name=""СубъектРФ"">
	|        <xsl:variable name=""value"" select=""tns:Structure/tns:Property[@name='Регион']/tns:Value/text()"" />
	|
	|        <xsl:choose>
	|          <xsl:when test=""0=count($value)"">
	|            <xsl:variable name=""regioncode"" select=""tns:Structure/tns:Property[@name='КодРегиона']/tns:Value/text()""/>
	|            <xsl:variable name=""regiontitle"" select=""$enum-regioncode-nodes/data:item[@data:code=number($regioncode)]"" />
	|              <xsl:if test=""0!=count($regiontitle)"">
	|                <xsl:value-of select=""$regiontitle""/>
	|              </xsl:if>
	|          </xsl:when>
	|          <xsl:otherwise>
	|            <xsl:value-of select=""$value"" />
	|          </xsl:otherwise>
	|        </xsl:choose>
	|
	|      </xsl:element>
	|
	|      <xsl:element name=""Округ"">
	|        <xsl:value-of select=""tns:Structure/tns:Property[@name='Округ']/tns:Value/text()""/>
	|      </xsl:element>
	|
	|      <xsl:element name=""СвРайМО"">
	|        <xsl:element name=""Район"">
	|          <xsl:value-of select=""tns:Structure/tns:Property[@name='Район']/tns:Value/text()""/>
	|        </xsl:element>
	|      </xsl:element>
	|
	|      <xsl:element name=""Город"">
	|        <xsl:value-of select=""tns:Structure/tns:Property[@name='Город']/tns:Value/text()""/>
	|      </xsl:element>
	|
	|      <xsl:element name=""ВнутригРайон"">
	|        <xsl:value-of select=""tns:Structure/tns:Property[@name='ВнутригРайон']/tns:Value/text()""/>
	|      </xsl:element>
	|
	|      <xsl:element name=""НаселПункт"">
	|        <xsl:value-of select=""tns:Structure/tns:Property[@name='НаселенныйПункт']/tns:Value/text()""/>
	|      </xsl:element>
	|
	|      <xsl:element name=""Улица"">
	|        <xsl:value-of select=""tns:Structure/tns:Property[@name='Улица']/tns:Value/text()""/>
	|      </xsl:element>
	|
	|      <xsl:variable name=""index"" select=""tns:Structure/tns:Property[@name='Индекс']/tns:Value/text()"" />
	|      <xsl:if test=""0!=count($index)"">
	|        <xsl:element name=""ДопАдрЭл"">
	|          <xsl:attribute name=""ТипАдрЭл"">" + РСА_КодСериализацииОбъектаАдресации("Почтовый индекс") + "</xsl:attribute>
	|          <xsl:attribute name=""Значение""><xsl:value-of select=""$index""/></xsl:attribute>
	|        </xsl:element>
	|      </xsl:if>
	|
	|      <xsl:call-template name=""add-elem-number"">
	|        <xsl:with-param name=""source"" select=""tns:Structure/tns:Property[@name='ТипДома']/tns:Value/text()"" />
	|        <xsl:with-param name=""defsrc"" select=""'Дом'"" />
	|        <xsl:with-param name=""value""  select=""tns:Structure/tns:Property[@name='Дом']/tns:Value/text()"" />
	|      </xsl:call-template>
	|
	|      <xsl:call-template name=""add-elem-number"">
	|        <xsl:with-param name=""source"" select=""tns:Structure/tns:Property[@name='ТипКорпуса']/tns:Value/text()"" />
	|        <xsl:with-param name=""defsrc"" select=""'Корпус'"" />
	|        <xsl:with-param name=""value""  select=""tns:Structure/tns:Property[@name='Корпус']/tns:Value/text()"" />
	|      </xsl:call-template>
	|
	|      <xsl:call-template name=""add-elem-number"">
	|        <xsl:with-param name=""source"" select=""tns:Structure/tns:Property[@name='ТипКвартиры']/tns:Value/text()"" />
	|        <xsl:with-param name=""defsrc"" select=""'Квартира'"" />
	|        <xsl:with-param name=""value""  select=""tns:Structure/tns:Property[@name='Квартира']/tns:Value/text()"" />
	|      </xsl:call-template>
	|
	|    </xsl:element>
	|  </xsl:template>
	|
	|  <xsl:param name=""enum-codevalue"">
	|" + КодыДополнительныхАдресныхЭлементов.ПолучитьТекст() + "
	|  </xsl:param>
	|  <xsl:variable name=""enum-codevalue-nodes"" select=""exsl:node-set($enum-codevalue)"" />
	|
	|  <xsl:param name=""enum-regioncode"">
	|" + КодыРегионов.ПолучитьТекст() + "
	|  </xsl:param>
	|  <xsl:variable name=""enum-regioncode-nodes"" select=""exsl:node-set($enum-regioncode)"" />
	|
	|  <xsl:template name=""add-elem-number"">
	|    <xsl:param name=""source"" />
	|    <xsl:param name=""defsrc"" />
	|    <xsl:param name=""value"" />
	|
	|    <xsl:if test=""0!=count($value)"">
	|
	|      <xsl:choose>
	|        <xsl:when test=""0!=count($source)"">
	|          <xsl:variable name=""type-code"" select=""$enum-codevalue-nodes/data:item[@data:title=$source]"" />
	|          <xsl:element name=""ДопАдрЭл"">
	|            <xsl:element name=""Номер"">
	|              <xsl:attribute name=""Тип""><xsl:value-of select=""$type-code"" /></xsl:attribute>
	|              <xsl:attribute name=""Значение""><xsl:value-of select=""$value""/></xsl:attribute>
	|            </xsl:element>
	|          </xsl:element>
	|
	|        </xsl:when>
	|        <xsl:otherwise>
	|          <xsl:variable name=""type-code"" select=""$enum-codevalue-nodes/data:item[@data:title=$defsrc]"" />
	|          <xsl:element name=""ДопАдрЭл"">
	|            <xsl:element name=""Номер"">
	|              <xsl:attribute name=""Тип""><xsl:value-of select=""$type-code"" /></xsl:attribute>
	|              <xsl:attribute name=""Значение""><xsl:value-of select=""$value""/></xsl:attribute>
	|            </xsl:element>
	|          </xsl:element>
	|
	|        </xsl:otherwise>
	|      </xsl:choose>
	|
	|    </xsl:if>
	|
	|  </xsl:template>
	|
	|</xsl:stylesheet>";

	Возврат РасширенныйТекстПреобразования;
КонецФункции

Функция РСА_ВсеРегионы()
	// Зарезервировано для новых подсистем

	Возврат Неопределено;
КонецФункции

Функция РСА_ЭтоГородФедеральногоЗначения(Город) Экспорт
	НазванияГородовФедеральногоЗначения = РСА_НазванияГородовФедеральногоЗначения();

	Возврат НазванияГородовФедеральногоЗначения.Получить(ВРег(Город)) = Истина;
КонецФункции

Функция РСА_НазванияГородовФедеральногоЗначения()
	Результат = Новый Соответствие;
	Результат.Вставить("МОСКВА Г",			Истина);
	Результат.Вставить("САНКТ-ПЕТЕРБУРГ Г",	Истина);
	Результат.Вставить("СЕВАСТОПОЛЬ Г",		Истина);
	Результат.Вставить("БАЙКОНУР Г",		Истина);

	Возврат Результат;
КонецФункции

Функция РСА_АдресПоИдентификатору(ИдентификаторАдреса, ДополнительнаяИнформацияАдреса = Неопределено) Экспорт
	Если ДополнительнаяИнформацияАдреса = Неопределено Тогда
		ДополнительнаяИнформацияАдреса = Новый Структура;
	КонецЕсли;

	Муниципальный = ?(ДополнительнаяИнформацияАдреса.Свойство("Муниципальный"), Булево(ДополнительнаяИнформацияАдреса.Муниципальный), Ложь);

	Сведения = Новый Структура;
	Сведения.Вставить("Идентификатор", ИдентификаторАдреса);
	Сведения.Вставить("Муниципальный", Муниципальный);

	// Зарезервировано для новых подсистем

	Возврат Неопределено;
КонецФункции

Функция РСА_РегионАдресаКонтактнойИнформации(Знач Адрес) Экспорт
	Если ТипЗнч(Адрес) = Тип("Строка") Тогда
		Если ПустаяСтрока(Адрес) Тогда
			Возврат "";
		КонецЕсли;

		Если ТипЗнч(Адрес) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(Адрес), "<") Тогда
			Адрес = УКИ_КонтактнаяИнформацияВJSON(Адрес, Перечисления.ТипыКонтактнойИнформации.Адрес);
		КонецЕсли;

		Адрес = сУКИ_JSONВКонтактнуюИнформациюПоПолям(Адрес, Перечисления.ТипыКонтактнойИнформации.Адрес);
	ИначеЕсли ТипЗнч(Адрес) <> Тип("Структура") Тогда
		ВызватьИсключение "Невозможно определить субъект РФ, ожидается адрес.";
	КонецЕсли;

	СубъектРФ = СокрЛП(Адрес.Area + " " + Адрес.AreaType);

	Возврат СубъектРФ;
КонецФункции

Процедура РСА_ИсправитьТипЗданияЛитерВАдресахВФоне(Знач ПараметрыПроверки, АдресХранилища = Неопределено) Экспорт
	Возврат;

	// Зарезервировано для новых подсистем
КонецПроцедуры

Процедура РСА_ИсправитьУстаревшиеАдресаВФоне(Знач ПараметрыПроверки, АдресХранилища = Неопределено) Экспорт
	Возврат;

	// Зарезервировано для новых подсистем
КонецПроцедуры

Процедура РСА_ДополнитьНастройкиПроверкиАдреса(ПараметрыВида, ВидКонтактнойИнформации) Экспорт
	НастройкиПроверки								= БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта(ВидКонтактнойИнформации, "ПроверятьПоФИАС, УказыватьОКТМО");
	ПараметрыВида.НастройкиПроверки.ПроверятьПоФИАС	= НастройкиПроверки.ПроверятьПоФИАС;
	ПараметрыВида.НастройкиПроверки.УказыватьОКТМО	= НастройкиПроверки.УказыватьОКТМО;
КонецПроцедуры

Процедура РСА_ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	Элемент								= Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных	= "Россия";
	Элемент.Код							= "643";
	Элемент.Наименование				= "РОССИЯ";
	Элемент.НаименованиеПолное			= "Российская Федерация";
	Элемент.КодАльфа2					= "RU";
	Элемент.КодАльфа3					= "RUS";
	Элемент.УчастникЕАЭС				= Истина;
	Элемент.МеждународноеНаименование	= "The Russian Federation";
КонецПроцедуры

#КонецОбласти
