///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СтандартныеПодсистемы

Процедура ПередНачаломРаботыСистемы(Знач ОповещениеЗавершения = Неопределено) Экспорт
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();

	Если ПараметрыПриложения = Неопределено Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;

	ПараметрыПриложения.Вставить("СтандартныеПодсистемы.ОценкаПроизводительности.ВремяНачалаЗапуска", ВремяНачала);

	Если ОповещениеЗавершения <> Неопределено Тогда
		БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр("БазоваяПодсистемаКлиент.ПередНачаломРаботыСистемы", "ОповещениеЗавершения", ОповещениеЗавершения, Тип("ОписаниеОповещения"));
	КонецЕсли;

	Параметры = СП_ПараметрыОбработкиПередНачаломРаботыСистемы();

	// Внешние параметры описания результата.
	Параметры.Вставить("Отказ", Ложь);
	Параметры.Вставить("Перезапустить", Ложь);
	Параметры.Вставить("ДополнительныеПараметрыКоманднойСтроки", "");

	// Внешние параметры управления выполнением.
	Параметры.Вставить("ИнтерактивнаяОбработка", Неопределено); // ОписаниеОповещения.
	Параметры.Вставить("ОбработкаПродолжения",   Неопределено); // ОписаниеОповещения.
	Параметры.Вставить("НепрерывноеВыполнение", Истина);
	Параметры.Вставить("ПолученныеПараметрыКлиента", Новый Структура);

	// Внутренние параметры.
	Параметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	Параметры.Вставить("ОбработкаЗавершения", Новый ОписаниеОповещения(
		"СП_ДействияПередНачаломРаботыСистемыОбработкаЗавершения", ЭтотОбъект));

	СП_ОбновитьПараметрыРаботыКлиента(Параметры, Истина, ОповещениеЗавершения <> Неопределено);

	// Подготовка перехода к следующей процедуре.
	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения(
		"СП_ДействияПередНачаломРаботыСистемыВИнтеграционнойПроцедуре", ЭтотОбъект));

	Если СтрНайти(ПараметрЗапуска, "ОтключитьЛогикуНачалаРаботыСистемы") > 0 Тогда
		Попытка
			// Проверка права отключения и заполнение параметров работы клиента на сервере.
			СвойстваКлиента = Новый Структура;
			СП_ЗаполнитьПараметрыРаботыКлиентаНаСервере(СвойстваКлиента);

			БазоваяПодсистемаВызовСервера.СП_ПроверитьПравоОтключитьЛогикуНачалаРаботыСистемы(СвойстваКлиента);
			Если СвойстваКлиента.Свойство("ОшибкаНетПраваОтключитьЛогикуНачалаРаботыСистемы") Тогда
				ПользователиКлиент.сП_УстановитьИнтерактивнуюОбработкуПриОшибкеНедостаточноПравДляВходаВПрограмму(Параметры, СвойстваКлиента.ОшибкаНетПраваОтключитьЛогикуНачалаРаботыСистемы);
			КонецЕсли;
		Исключение
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			БазоваяПодсистемаВызовСервера.СП_ЗаписатьОшибкуВЖурналРегистрацииПриЗапускеИлиЗавершении(Ложь, "Запуск", ТекстОшибки);
			ПользователиКлиент.сП_УстановитьИнтерактивнуюОбработкуПриОшибкеНедостаточноПравДляВходаВПрограмму(Параметры, ТекстОшибки);
		КонецПопытки;
		Если СП_ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
			Возврат;
		КонецЕсли;
		СП_СкрытьРабочийСтолПриНачалеРаботыСистемы(Истина, Истина);
		Возврат;
	КонецЕсли;

	// Стандартный первый серверный вызов с целью предварительного
	// заполнения параметров работы клиента на сервере.
	Попытка
		ОН_ПодсистемаСуществует("СтандартныеПодсистемы.БазоваяПодсистема");
	Исключение
		СП_ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск", Истина);
	КонецПопытки;

	Если СП_ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Процедура ПередНачаломРаботыСистемы2(Параметры) Экспорт
	// Проверяет минимально допустимую версию платформы для запуска.
	// Если версия платформы более поздняя, чем РекомендуемаяВерсияПлатформы,
	// то пользователю будет  показано оповещение. Работа программы будет прекращена,
	// если ПараметрыКлиента.РаботаВПрограммеЗапрещена = Истина.

	ПараметрыКлиента = БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиентаПриЗапуске();
	Если НЕ ПараметрыКлиента.Свойство("ПоказатьНерекомендуемуюВерсиюПлатформы") Тогда
		Возврат;
	КонецЕсли;

	Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения("СП_ИнтерактивнаяОбработкаПроверкиВерсииПлатформыПриЗапуске", ЭтотОбъект);
КонецПроцедуры

Процедура ПередНачаломРаботыСистемы3(Параметры) Экспорт
	// Проверяет необходимость восстановления связи с главным узлом и
	// начинает восстановление, если требуется.

	ПараметрыКлиента = БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиентаПриЗапуске();

	Если НЕ ПараметрыКлиента.Свойство("ВосстановитьСвязьСГлавнымУзлом") Тогда
		Возврат;
	КонецЕсли;

	Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения("СП_ИнтерактивнаяОбработкаВосстановленияСвязиСГлавнымУзлом", ЭтотОбъект);
КонецПроцедуры

Процедура ПередНачаломРаботыСистемы4(Параметры) Экспорт
	// Проверяет необходимость установки основного языка и часового пояса
	// информационной базы и открывает форму региональных настроек, если требуется.

	ПараметрыКлиента	= БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиентаПриЗапуске();

	Если Не ПараметрыКлиента.Свойство("ВыбратьНачальныеРегиональныеНастройкиИБ") Тогда
		Возврат;
	КонецЕсли;

	Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения("СП_ИнтерактивнаяОбработкаНачальныхРегиональныхНастроекИБ", ЭтотОбъект, Параметры);
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы(Знач ОповещениеЗавершения = Неопределено, НепрерывноеВыполнение = Истина) Экспорт
	Если СП_ВыполняетсяИнтерактивнаяОбработкаПередНачаломРаботыСистемы() Тогда
		Возврат;
	КонецЕсли;

	Если СтрНайти(ПараметрЗапуска, "ОтключитьЛогикуНачалаРаботыСистемы") > 0 Тогда
		Возврат;
	КонецЕсли;

	Если ОповещениеЗавершения <> Неопределено Тогда
		БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр("БазоваяПодсистемаКлиент.ПриНачалеРаботыСистемы", "ОповещениеЗавершения", ОповещениеЗавершения, Тип("ОписаниеОповещения"));
	КонецЕсли;
	БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр("БазоваяПодсистемаКлиент.ПриНачалеРаботыСистемы", "НепрерывноеВыполнение", НепрерывноеВыполнение, Тип("Булево"));

	Параметры = СП_ПараметрыОбработкиПриНачалеРаботыСистемы();

	// Внешние параметры описания результата.
	Параметры.Вставить("Отказ",										Ложь);
	Параметры.Вставить("Перезапустить",								Ложь);
	Параметры.Вставить("ДополнительныеПараметрыКоманднойСтроки",	"");

	// Внешние параметры управления выполнением.
	Параметры.Вставить("ИнтерактивнаяОбработка",					Неопределено); // ОписаниеОповещения.
	Параметры.Вставить("ОбработкаПродолжения",						Неопределено); // ОписаниеОповещения.
	Параметры.Вставить("НепрерывноеВыполнение",						НепрерывноеВыполнение);

	// Внутренние параметры.
	Параметры.Вставить("ОповещениеЗавершения",						ОповещениеЗавершения);
	Параметры.Вставить("ОбработкаЗавершения",						Новый ОписаниеОповещения(
		"СП_ДействияПриНачалеРаботыСистемыОбработкаЗавершения", ЭтотОбъект));

	// Подготовка перехода к следующей процедуре.
	Параметры.Вставить("ОбработкаПродолжения",						Новый ОписаниеОповещения(
		"СП_ДействияПриНачалеРаботыСистемыВИнтеграционнойПроцедуре", ЭтотОбъект));

	Попытка
		СП_УстановитьРасширенныйЗаголовокПриложения(Истина); // Для главного окна.

		Если НЕ СП_ОбработатьПараметрыЗапуска() Тогда
			Параметры.Отказ = Истина;
			ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);

			Возврат;
		КонецЕсли;
	Исключение
		СП_ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(),  "Запуск", Истина);
	КонецПопытки;
	Если СП_ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Процедура ПередЗавершениемРаботыСистемы(Отказ = Ложь, ТекстПредупреждения = "") Экспорт
	Если Не СП_ВыводитьПредупрежденияПередЗавершениемРаботыСистемы(Отказ) Тогда
		Возврат;
	КонецЕсли;

	Предупреждения = Новый Массив;
	ИнтеграцияПодсистемКлиент.ПередЗавершениемРаботыСистемы(Отказ, Предупреждения);

	Если Предупреждения.Количество() = 0 Тогда
		Если Не СП_ПараметрКлиента("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы") Тогда
			Возврат;
		КонецЕсли;

		ТекстПредупреждения	= "Завершить работу с программой?";
		Отказ				= Истина;
	Иначе
		Отказ					= Истина;
		МассивПредупреждений	= Новый Массив;
		Для Каждого Предупреждение Из Предупреждения Цикл
			МассивПредупреждений.Добавить(Предупреждение.ТекстПредупреждения);
		КонецЦикла;
		Если Не ПустаяСтрока(ТекстПредупреждения) Тогда
			ТекстПредупреждения = ТекстПредупреждения + Символы.ПС;
		КонецЕсли;
		ТекстПредупреждения = ТекстПредупреждения + СтрСоединить(МассивПредупреждений, Символы.ПС);
		ПодключитьОбработчикОжидания("СП_ПоказатьПредупрежденияПриЗавершенииРаботы", 0.1, Истина);
	КонецЕсли;

	ИмяГлобальногоПараметра = "СтандартныеПодсистемы.ПараметрыКлиента";
	ПараметрыПриложения[ИмяГлобальногоПараметра].Вставить("ПредупрежденияПриЗавершенииРаботы", Предупреждения);
КонецПроцедуры

Функция СП_ЭтоВебКлиент() Экспорт
#Если ВебКлиент Тогда
	Возврат Истина;
#Иначе
	Возврат Ложь;
#КонецЕсли
КонецФункции

Функция СП_ЭтоМобильныйКлиент() Экспорт
#Если МобильныйКлиент Тогда
	Возврат Истина;
#Иначе
	Возврат Ложь;
#КонецЕсли
КонецФункции

Процедура СП_ЗаполнитьПараметрыРаботыКлиентаНаСервере(Параметры) Экспорт
	Параметры.Вставить("ПараметрЗапуска",							ПараметрЗапуска);
	Параметры.Вставить("СтрокаСоединенияИнформационнойБазы",		СтрокаСоединенияИнформационнойБазы());
	Параметры.Вставить("ЭтоВебКлиент",								СП_ЭтоВебКлиент());
	Параметры.Вставить("ЭтоLinuxКлиент",							ОН_ЭтоLinuxКлиент());
	Параметры.Вставить("ЭтоMacOSКлиент",							ОН_ЭтоMacOSКлиент());
	Параметры.Вставить("ЭтоWindowsКлиент",							ОН_ЭтоWindowsКлиент());
	Параметры.Вставить("ЭтоМобильныйКлиент",						СП_ЭтоМобильныйКлиент());
	Параметры.Вставить("ИспользуемыйКлиент",						СП_ИспользуемыйКлиент());
	Параметры.Вставить("КаталогПрограммы",							СП_ТекущийКаталогПрограммы());
	Параметры.Вставить("ИдентификаторКлиента",						СП_ИдентификаторКлиента());
	Параметры.Вставить("СкрытьРабочийСтолПриНачалеРаботыСистемы",	Ложь);
	Параметры.Вставить("ОперативнаяПамять",							ОН_ОперативнаяПамятьДоступнаяКлиентскомуПриложению());
	Параметры.Вставить("РазрешениеОсновногоЭкрана",					СП_РазрешениеОсновногоЭкрана());

	// Установка даты клиента непосредственно перед вызовом, чтобы уменьшить погрешность.
	// АПК:143-выкл - №643.2.1 Требуется ТекущаяДата для расчета ПоправкаКВремениСеанса.
	Параметры.Вставить("ТекущаяДатаНаКлиенте",						ТекущаяДата());
	// АПК:143-вкл.
	Параметры.Вставить("ТекущаяУниверсальнаяДатаВМиллисекундахНаКлиенте",	ТекущаяУниверсальнаяДатаВМиллисекундах());
КонецПроцедуры

Функция СП_ИспользуемыйКлиент() Экспорт
	ИспользуемыйКлиент = "";
	#Если ТонкийКлиент Тогда
		ИспользуемыйКлиент = "ТонкийКлиент";
	#ИначеЕсли ТолстыйКлиентУправляемоеПриложение Тогда
		ИспользуемыйКлиент = "ТолстыйКлиентУправляемоеПриложение";
	#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
		ИспользуемыйКлиент = "ТолстыйКлиентОбычноеПриложение";
	#ИначеЕсли ВебКлиент Тогда
		ОписаниеБраузера = СП_ТекущийБраузер();
		Если ПустаяСтрока(ОписаниеБраузера.Версия) Тогда
			ИспользуемыйКлиент = СтрШаблон("ВебКлиент.%1", ОписаниеБраузера.Название);
		Иначе
			ИспользуемыйКлиент = СтрШаблон("ВебКлиент.%1.%2", ОписаниеБраузера.Название, СтрРазделить(ОписаниеБраузера.Версия, ".")[0]);
		КонецЕсли;
	#КонецЕсли

	Возврат ИспользуемыйКлиент;
КонецФункции

Функция СП_ТекущийБраузер() Экспорт
	Результат = Новый Структура("Название,Версия", "Другой", "");

	СистемнаяИнформация	= Новый СистемнаяИнформация;
	Строка				= СистемнаяИнформация.ИнформацияПрограммыПросмотра;
	Строка				= СтрЗаменить(Строка, ",", ";");

	// Opera
	Идентификатор = "Opera";
	Позиция = СтрНайти(Строка, Идентификатор, НаправлениеПоиска.СКонца);
	Если Позиция > 0 Тогда
		Строка				= Сред(Строка, Позиция + СтрДлина(Идентификатор));
		Результат.Название	= "Opera";
		Идентификатор		= "Version/";
		Позиция				= СтрНайти(Строка, Идентификатор);
		Если Позиция > 0 Тогда
			Строка = Сред(Строка, Позиция + СтрДлина(Идентификатор));
			Результат.Версия = СокрЛП(Строка);
		Иначе
			Строка = СокрЛП(Строка);
			Если СтрНачинаетсяС(Строка, "/") Тогда
				Строка = Сред(Строка, 2);
			КонецЕсли;
			Результат.Версия = СокрЛ(Строка);
		КонецЕсли;

		Возврат Результат;
	КонецЕсли;

	// IE
	Идентификатор = "MSIE"; // v11-
	Позиция = СтрНайти(Строка, Идентификатор);
	Если Позиция > 0 Тогда
		Результат.Название	= "IE";
		Строка				= Сред(Строка, Позиция + СтрДлина(Идентификатор));
		Позиция				= СтрНайти(Строка, ";");
		Если Позиция > 0 Тогда
			Строка = СокрЛ(Лев(Строка, Позиция - 1));
			Результат.Версия = Строка;
		КонецЕсли;

		Возврат Результат;
	КонецЕсли;

	Идентификатор = "Trident"; // v11+
	Позиция = СтрНайти(Строка, Идентификатор);
	Если Позиция > 0 Тогда
		Результат.Название	= "IE";
		Строка				= Сред(Строка, Позиция + СтрДлина(Идентификатор));

		Идентификатор = "rv:";
		Позиция = СтрНайти(Строка, Идентификатор);
		Если Позиция > 0 Тогда
			Строка	= Сред(Строка, Позиция + СтрДлина(Идентификатор));
			Позиция	= СтрНайти(Строка, ")");
			Если Позиция > 0 Тогда
				Строка				= СокрЛ(Лев(Строка, Позиция - 1));
				Результат.Версия	= Строка;
			КонецЕсли;
		КонецЕсли;

		Возврат Результат;
	КонецЕсли;

	// Chrome
	Идентификатор	= "Chrome/";
	Позиция			= СтрНайти(Строка, Идентификатор);
	Если Позиция > 0 Тогда
		Результат.Название	= "Chrome";
		Строка				= Сред(Строка, Позиция + СтрДлина(Идентификатор));
		Позиция				= СтрНайти(Строка, " ");
		Если Позиция > 0 Тогда
			Строка				= СокрЛ(Лев(Строка, Позиция - 1));
			Результат.Версия	= Строка;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;

	// Safari
	Идентификатор = "Safari/";
	Если СтрНайти(Строка, Идентификатор) > 0 Тогда
		Результат.Название	= "Safari";
		Идентификатор		= "Version/";
		Позиция = СтрНайти(Строка, Идентификатор);
		Если Позиция > 0 Тогда
			Строка	= Сред(Строка, Позиция + СтрДлина(Идентификатор));
			Позиция	= СтрНайти(Строка, " ");
			Если Позиция > 0 Тогда
				Результат.Версия = СокрЛП(Лев(Строка, Позиция - 1));
			КонецЕсли;
		КонецЕсли;

		Возврат Результат;
	КонецЕсли;

	// Firefox
	Идентификатор	= "Firefox/";
	Позиция			= СтрНайти(Строка, Идентификатор);
	Если Позиция > 0 Тогда
		Результат.Название	= "Firefox";
		Строка				= Сред(Строка, Позиция + СтрДлина(Идентификатор));
		Если Не ПустаяСтрока(Строка) Тогда
			Результат.Версия = СокрЛП(Строка);
		КонецЕсли;

		Возврат Результат;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция СП_ТекущийКаталогПрограммы() Экспорт
	#Если ВебКлиент Или МобильныйКлиент Тогда
		КаталогПрограммы = "";
	#Иначе
		КаталогПрограммы = КаталогПрограммы();
	#КонецЕсли

	Возврат КаталогПрограммы;
КонецФункции

Функция СП_РазрешениеОсновногоЭкрана() Экспорт
	ИнформациюЭкрановКлиента = ПолучитьИнформациюЭкрановКлиента();
	Если ИнформациюЭкрановКлиента.Количество() > 0 Тогда
		DPI = ИнформациюЭкрановКлиента[0].DPI; // АПК:1353 - не требуется перевод на русский язык.
		РазрешениеОсновногоЭкрана = ?(DPI = 0, 72, DPI);
	Иначе
		РазрешениеОсновногоЭкрана = 72;
	КонецЕсли;

	Возврат РазрешениеОсновногоЭкрана;
КонецФункции

Функция СП_ИдентификаторКлиента() Экспорт
	СистемнаяИнформация = Новый СистемнаяИнформация;

	Возврат СистемнаяИнформация.ИдентификаторКлиента;
КонецФункции

Процедура СП_ИнтерактивнаяОбработкаВосстановленияСвязиСГлавнымУзлом(Параметры, Контекст) Экспорт
	ПараметрыКлиента = БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиентаПриЗапуске();

	Если ПараметрыКлиента.ВосстановитьСвязьСГлавнымУзлом = Ложь Тогда
		Параметры.Отказ = Истина;
		ПоказатьПредупреждение(
			Новый ОписаниеОповещения("СП_ВыполнитьОповещениеСПустымРезультатом", ЭтотОбъект, Параметры.ОбработкаПродолжения),
			"Вход в программу временно невозможен до восстановления связи с главным узлом.
			           |Обратитесь к администратору за подробностями.",
			15);

		Возврат;
	КонецЕсли;

	Форма = ОткрытьФорму("ОбщаяФорма.ВосстановлениеСвязиСГлавнымУзлом",,,,,, Новый ОписаниеОповещения("СП_ПослеЗакрытияФормыВосстановленияСвязиСГлавнымУзлом", ЭтотОбъект, Параметры));

	Если Форма = Неопределено Тогда
		СП_ПослеЗакрытияФормыВосстановленияСвязиСГлавнымУзлом(Новый Структура("Отказ", Истина), Параметры);
	КонецЕсли;
КонецПроцедуры

Процедура СП_ИнтерактивнаяОбработкаНачальныхРегиональныхНастроекИБ(Параметры, Контекст) Экспорт
	ПараметрыКлиента = БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиентаПриЗапуске();

	Если ПараметрыКлиента.ВыбратьНачальныеРегиональныеНастройкиИБ = Ложь Тогда
		Параметры.Отказ = Истина;
		ПоказатьПредупреждение(Новый ОписаниеОповещения("СП_ВыполнитьОповещениеСПустымРезультатом", ЭтотОбъект, Параметры.ОбработкаПродолжения),
			"Вход в программу невозможен до установки начальных региональных настроек программы.
			           |Обратитесь к администратору за подробностями.",
			15);
		Возврат;
	КонецЕсли;

	СП_ПослеЗакрытияФормыВыбораНачальныхРегиональныхНастроекИБ(Новый Структура("Отказ", Истина), Параметры);
КонецПроцедуры

Процедура СП_ПослеЗакрытияФормыВыбораНачальныхРегиональныхНастроекИБ(Результат, Параметры) Экспорт
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Параметры.Отказ = Истина;
	ИначеЕсли Результат.Отказ Тогда
		Параметры.Отказ = Истина;
	Иначе
		Параметры.ПолученныеПараметрыКлиента.Вставить("ВыбратьНачальныеРегиональныеНастройкиИБ");
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Процедура СП_ПослеЗакрытияФормыВосстановленияСвязиСГлавнымУзлом(Результат, Параметры) Экспорт
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Параметры.Отказ = Истина;
	ИначеЕсли Результат.Отказ Тогда
		Параметры.Отказ = Истина;
	Иначе
		Параметры.ПолученныеПараметрыКлиента.Вставить("ВосстановитьСвязьСГлавнымУзлом");
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Процедура СП_ИнтерактивнаяОбработкаПроверкиВерсииПлатформыПриЗапуске(Параметры, Контекст) Экспорт
	ПараметрыКлиента	= БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиентаПриЗапуске();

	СистемнаяИнформация = Новый СистемнаяИнформация;
	Текущая             = СистемнаяИнформация.ВерсияПриложения;
	Минимальная         = ПараметрыКлиента.МинимальнаяВерсияПлатформы;

	// Зарезервировано для новых подсистем

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("СП_ПослеЗакрытияФормыНерекомендуемойВерсииПлатформы", ЭтотОбъект, Параметры);

	// Зарезервировано для новых подсистем

	Если БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсии(Текущая, Минимальная) < 0 Тогда
		Если ПараметрыКлиента.ЕстьДоступДляОбновленияВерсииПлатформы Тогда
			ТекстСообщения = "Вход в программу невозможен.
				           |Предварительно обновите версию платформы 1С:Предприятие.";
		Иначе
			ТекстСообщения = "Вход в программу невозможен.
				           |Обратитесь к администратору для обновления версии платформы 1С:Предприятие.";
		КонецЕсли;
	Иначе
		Если ПараметрыКлиента.ЕстьДоступДляОбновленияВерсииПлатформы Тогда
			ТекстСообщения = "Рекомендуется завершить работу программы и обновить версию платформы 1С:Предприятия.
				         |Новая версия платформы содержит исправления ошибок, которые позволят программе работать более стабильно.
				         |Вы также можете продолжить работу на текущей версии.
				         |Минимально необходимая версия платформы %1.";
		Иначе
			ТекстСообщения =  "Рекомендуется завершить работу программы и обратиться к администратору для обновления версии платформы 1С:Предприятия.
				         |Новая версия платформы содержит исправления ошибок, которые позволят программе работать более стабильно.
				         |Вы также можете продолжить работу на текущей версии.
				         |Минимально необходимая версия платформы %1.";
		КонецЕсли;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекстСообщения",				ТекстСообщения);
	ПараметрыФормы.Вставить("РекомендуемаяВерсияПлатформы",	ПараметрыКлиента.РекомендуемаяВерсияПлатформы);
	ПараметрыФормы.Вставить("МинимальнаяВерсияПлатформы",	ПараметрыКлиента.МинимальнаяВерсияПлатформы);
	ПараметрыФормы.Вставить("ОткрытаПоСценарию",			Истина);
	ПараметрыФормы.Вставить("ПропуститьЗавершениеРаботы",	Истина);

	Форма = ОткрытьФорму("Обработка.НерекомендуемаяВерсияПлатформы.Форма.НерекомендуемаяВерсияПлатформы", ПараметрыФормы,,,,, ОповещениеОЗакрытии);

	Если Форма = Неопределено Тогда
		СП_ПослеЗакрытияФормыНерекомендуемойВерсииПлатформы("Продолжить", Параметры);
	КонецЕсли;
КонецПроцедуры

Процедура СП_ПослеЗакрытияФормыНерекомендуемойВерсииПлатформы(Результат, Параметры) Экспорт
	Если Результат <> "Продолжить" Тогда
		Параметры.Отказ = Истина;
	Иначе
		Параметры.ПолученныеПараметрыКлиента.Вставить("ПоказатьНерекомендуемуюВерсиюПлатформы");
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Процедура СП_ДействияПередНачаломРаботыСистемыОбработкаЗавершения(Неопределен, Контекст) Экспорт
	Параметры = СП_ПараметрыОбработкиПередНачаломРаботыСистемы(Истина);

	Параметры.ОбработкаПродолжения = Неопределено;
	Параметры.ОбработкаЗавершения  = Неопределено;

	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];
	ПараметрыПриЗапускеПрограммы.Удалить("ПолученныеПараметрыКлиента");
	ПараметрыПриложения["СтандартныеПодсистемы.ЗапускПрограммыЗавершен"] = Истина;

	Если Параметры.ОповещениеЗавершения <> Неопределено Тогда
		Результат = Новый Структура;
		Результат.Вставить("Отказ", Параметры.Отказ);
		Результат.Вставить("Перезапустить", Параметры.Перезапустить);
		Результат.Вставить("ДополнительныеПараметрыКоманднойСтроки", Параметры.ДополнительныеПараметрыКоманднойСтроки);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеЗавершения, Результат);

		Возврат;
	КонецЕсли;

	Если Параметры.Отказ Тогда
		Если Параметры.Перезапустить <> Истина Тогда
			ПрекратитьРаботуСистемы();
		ИначеЕсли ЗначениеЗаполнено(Параметры.ДополнительныеПараметрыКоманднойСтроки) Тогда
			ПрекратитьРаботуСистемы(Параметры.Перезапустить, Параметры.ДополнительныеПараметрыКоманднойСтроки);
		Иначе
			ПрекратитьРаботуСистемы(Параметры.Перезапустить);
		КонецЕсли;

	ИначеЕсли Не Параметры.НепрерывноеВыполнение Тогда
		Если ПараметрыПриЗапускеПрограммы.Свойство("ПараметрыОбработки") Тогда
			ПараметрыПриЗапускеПрограммы.Удалить("ПараметрыОбработки");
		КонецЕсли;
		ПодключитьОбработчикОжидания("СП_ОбработчикОжиданияПриНачалеРаботыСистемы", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

Процедура СП_ДействияПередНачаломРаботыСистемыВИнтеграционнойПроцедуре(Неопределен, Контекст) Экспорт
	Параметры = СП_ПараметрыОбработкиПередНачаломРаботыСистемы();

	Если Не СП_ПродолжитьДействияПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения(
		"СП_ДействияПередНачаломРаботыСистемыВМодуляхИнтеграционнойПроцедуры", ЭтотОбъект));

	Параметры.Вставить("ИндексТекущегоМодуля", 0);
	Параметры.Вставить("ДобавленныеМодули", Новый Массив);
	Попытка
		Параметры.Вставить("Модули", Новый Массив);
		ИнтеграцияПодсистемКлиент.ПередНачаломРаботыСистемы(Параметры);
		Параметры.Вставить("ДобавленныеМодули", Параметры.Модули);
		Параметры.Удалить("Модули");
	Исключение
		СП_ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск", Истина);
	КонецПопытки;
	Если СП_ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Функция СП_ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры)
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];

	Если Параметры.ИнтерактивнаяОбработка = Неопределено Тогда
		Если Параметры.Отказ Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
			Возврат Истина;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;

	СП_ОбновитьПараметрыРаботыКлиента(Параметры);

	Если НЕ Параметры.НепрерывноеВыполнение Тогда
		ИнтерактивнаяОбработка				= Параметры.ИнтерактивнаяОбработка;
		Параметры.ИнтерактивнаяОбработка	= Неопределено;
		ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);
	Иначе
		// Требуется подготовка к выполнению интерактивной обработки, затребованной
		// в процессе выполнения обработчика ПередНачаломРаботыСистемы, которая
		// предполагает скрытие рабочего стола и обновление интерфейса перед
		// продолжением при первом вызове процедуры ПриНачалеРаботыСистемы.
		ПараметрыПриЗапускеПрограммы.Вставить("ПараметрыОбработки", Параметры);
		СП_СкрытьРабочийСтолПриНачалеРаботыСистемы();
		ПараметрыПриЗапускеПрограммы.Вставить("ПропуститьОчисткуСкрытияРабочегоСтола");

		Если Параметры.ОповещениеЗавершения = Неопределено Тогда
			// Вызов процедуры ПередНачаломРаботыСистемы выполнен платформой,
			// как обработчика события, до открытия главного окна 1С:Предприятия 8.
			Если СтрНайти(ПараметрЗапуска, "ОтключитьЛогикуНачалаРаботыСистемы") <= 0 Тогда
				СП_УстановитьПараметрыФункциональныхОпцийИнтерфейсаПриЗапуске();
			КонецЕсли;
		Иначе
			// Вызов процедуры ПередНачаломРаботыСистемы выполнен программно, как вход в область данных,
			// поэтому продолжение после обновления интерфейса возможно только через обработчик ожидания.
			ПодключитьОбработчикОжидания("СП_ОбработчикОжиданияПриНачалеРаботыСистемы", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Процедура СП_ДействияПередНачаломРаботыСистемыВМодуляхИнтеграционнойПроцедуры(Неопределен, Контекст) Экспорт
	Пока Истина Цикл
		Параметры = СП_ПараметрыОбработкиПередНачаломРаботыСистемы();

		Если Не СП_ПродолжитьДействияПередНачаломРаботыСистемы(Параметры) Тогда
			Возврат;
		КонецЕсли;

		Если Параметры.ИндексТекущегоМодуля >= Параметры.ДобавленныеМодули.Количество() Тогда
			СП_ДействияПередНачаломРаботыСистемыПослеВсехПроцедур(Неопределено, Неопределено);

			Возврат;
		КонецЕсли;
		ОписаниеМодуля					= Параметры.ДобавленныеМодули[Параметры.ИндексТекущегоМодуля];
		Параметры.ИндексТекущегоМодуля	= Параметры.ИндексТекущегоМодуля + 1;

		Попытка
			Если ТипЗнч(ОписаниеМодуля) <> Тип("Структура") Тогда
				ТекущийМодуль = ОписаниеМодуля;
				ТекущийМодуль.ПередНачаломРаботыСистемы(Параметры);
			Иначе
				ТекущийМодуль = ОписаниеМодуля.Модуль;
				Если ОписаниеМодуля.Номер = 2 Тогда
					ТекущийМодуль.ПередНачаломРаботыСистемы2(Параметры);
				ИначеЕсли ОписаниеМодуля.Номер = 3 Тогда
					ТекущийМодуль.ПередНачаломРаботыСистемы3(Параметры);
				ИначеЕсли ОписаниеМодуля.Номер = 4 Тогда
					ТекущийМодуль.ПередНачаломРаботыСистемы4(Параметры);
				ИначеЕсли ОписаниеМодуля.Номер = 5 Тогда
				ТекущийМодуль.ПередНачаломРаботыСистемы5(Параметры);
				КонецЕсли;
			КонецЕсли;
		Исключение
			СП_ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск", Истина);
		КонецПопытки;
		Если СП_ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СП_ДействияПередНачаломРаботыСистемыПослеВсехПроцедур(Неопределен, Контекст)
	Параметры = СП_ПараметрыОбработкиПередНачаломРаботыСистемы();

	Если Не СП_ПродолжитьДействияПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	Параметры.Вставить("ОбработкаПродолжения", Параметры.ОбработкаЗавершения);

	Попытка
		СП_УстановитьПараметрыФункциональныхОпцийИнтерфейсаПриЗапуске();
	Исключение
		СП_ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск", Истина);
	КонецПопытки;
	Если СП_ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Функция СП_ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры)
	Если Параметры.ИнтерактивнаяОбработка = Неопределено Тогда
		Если Параметры.Отказ Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);

			Возврат Истина;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;

	ИнтерактивнаяОбработка = Параметры.ИнтерактивнаяОбработка;

	Параметры.НепрерывноеВыполнение		= Ложь;
	Параметры.ИнтерактивнаяОбработка	= Неопределено;

	ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);

	Возврат Истина;
КонецФункции

Процедура СП_ДействияПриНачалеРаботыСистемыОбработкаЗавершения(Неопределен, Контекст) Экспорт
	Параметры = СП_ПараметрыОбработкиПриНачалеРаботыСистемы(Истина);

	Параметры.ОбработкаПродолжения = Неопределено;
	Параметры.ОбработкаЗавершения  = Неопределено;

	Если НЕ Параметры.Отказ Тогда
		ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];
		Если ПараметрыПриЗапускеПрограммы.Свойство("ПропуститьОчисткуСкрытияРабочегоСтола") Тогда
			ПараметрыПриЗапускеПрограммы.Удалить("ПропуститьОчисткуСкрытияРабочегоСтола");
		КонецЕсли;

		СП_СкрытьРабочийСтолПриНачалеРаботыСистемы(Ложь);
	КонецЕсли;

	Если Параметры.ОповещениеЗавершения <> Неопределено Тогда
		Результат = Новый Структура;
		Результат.Вставить("Отказ",										Параметры.Отказ);
		Результат.Вставить("Перезапустить",								Параметры.Перезапустить);
		Результат.Вставить("ДополнительныеПараметрыКоманднойСтроки",	Параметры.ДополнительныеПараметрыКоманднойСтроки);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеЗавершения, Результат);

		Возврат;
	Иначе
		Если Параметры.Отказ Тогда
			Если Параметры.Перезапустить <> Истина Тогда
				ПрекратитьРаботуСистемы();
			ИначеЕсли ЗначениеЗаполнено(Параметры.ДополнительныеПараметрыКоманднойСтроки) Тогда
				ПрекратитьРаботуСистемы(Параметры.Перезапустить, Параметры.ДополнительныеПараметрыКоманднойСтроки);
			Иначе
				ПрекратитьРаботуСистемы(Параметры.Перезапустить);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СП_ДействияПриНачалеРаботыСистемыВИнтеграционнойПроцедуре(Неопределен, Контекст) Экспорт
	Параметры = СП_ПараметрыОбработкиПриНачалеРаботыСистемы();

	Если Не СП_ПродолжитьДействияПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения(
		"СП_ДействияПриНачалеРаботыСистемыВМодуляхИнтеграционнойПроцедуры", ЭтотОбъект));

	Параметры.Вставить("ИндексТекущегоМодуля", 0);
	Параметры.Вставить("ДобавленныеМодули", Новый Массив);
	Попытка
		Параметры.Вставить("Модули", Новый Массив);
		ИнтеграцияПодсистемКлиент.ПриНачалеРаботыСистемы(Параметры);
		Параметры.Вставить("ДобавленныеМодули", Параметры.Модули);
		Параметры.Удалить("Модули");
	Исключение
		СП_ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск");
	КонецПопытки;
	Если СП_ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Процедура СП_ДействияПриНачалеРаботыСистемыВМодуляхИнтеграционнойПроцедуры(Неопределен, Контекст) Экспорт
	Пока Истина Цикл
		Параметры = СП_ПараметрыОбработкиПриНачалеРаботыСистемы();

		Если Не СП_ПродолжитьДействияПриНачалеРаботыСистемы(Параметры) Тогда
			Возврат;
		КонецЕсли;

		Если Параметры.ИндексТекущегоМодуля >= Параметры.ДобавленныеМодули.Количество() Тогда
			СП_ДействияПриНачалеРаботыСистемыПослеВсехПроцедур(Неопределено, Неопределено);

			Возврат;
		КонецЕсли;

		ОписаниеМодуля					= Параметры.ДобавленныеМодули[Параметры.ИндексТекущегоМодуля];
		Параметры.ИндексТекущегоМодуля	= Параметры.ИндексТекущегоМодуля + 1;

		Попытка
			Если ТипЗнч(ОписаниеМодуля) <> Тип("Структура") Тогда
				ТекущийМодуль = ОписаниеМодуля;
				ТекущийМодуль.ПриНачалеРаботыСистемы(Параметры);
			Иначе
				ТекущийМодуль = ОписаниеМодуля.Модуль;
				Если ОписаниеМодуля.Номер = 2 Тогда
					ТекущийМодуль.ПриНачалеРаботыСистемы2(Параметры);
				ИначеЕсли ОписаниеМодуля.Номер = 3 Тогда
					ТекущийМодуль.ПриНачалеРаботыСистемы3(Параметры);
				ИначеЕсли ОписаниеМодуля.Номер = 4 Тогда
					ТекущийМодуль.ПриНачалеРаботыСистемы4(Параметры);
				КонецЕсли;
			КонецЕсли;
		Исключение
			СП_ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск", Ложь);
		КонецПопытки;
		Если СП_ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СП_ДействияПриНачалеРаботыСистемыПослеВсехПроцедур(Неопределен, Контекст)
	Параметры = СП_ПараметрыОбработкиПриНачалеРаботыСистемы();

	Если Не СП_ПродолжитьДействияПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	Параметры.Вставить("ОбработкаПродолжения", Параметры.ОбработкаЗавершения);

	Попытка
		ИнтеграцияПодсистемКлиент.ПослеНачалаРаботыСистемы();
	Исключение
		СП_ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск");
	КонецПопытки;
	Если СП_ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Процедура СП_ПослеНачалаРаботыСистемы() Экспорт
	ПараметрыКлиента = БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиентаПриЗапуске();
	Если ПараметрыКлиента.ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти Тогда
		ПодключитьОбработчикОжидания("СП_ПоказатьРекомендациюПоОбъемуОперативнойПамяти", 10, Истина);
	КонецЕсли;

	ПодключитьОбработчикОжидания("СП_ОбработчикОжиданияСтандартныхПериодическихПроверок", 20 * 60, Истина);

	Если СП_ВыводитьПредупрежденияПередЗавершениемРаботыСистемы(Ложь) Тогда
		// Предварительная компиляция клиентских модулей для избежания неявных серверных вызовов
		// в обработчике ПередЗавершениемРаботыСистемы.
		Предупреждения = Новый Массив;
		ИнтеграцияПодсистемКлиент.ПередЗавершениемРаботыСистемы(Ложь, Предупреждения);
	КонецЕсли;
КонецПроцедуры

Функция СП_ПродолжитьДействияПриНачалеРаботыСистемы(Параметры)
	Если Параметры.Отказ Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);

		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Функция СП_ВыводитьПредупрежденияПередЗавершениемРаботыСистемы(Отказ)
	Если СтрНайти(ПараметрЗапуска, "ОтключитьЛогикуНачалаРаботыСистемы") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];

	Если ПараметрыПриЗапускеПрограммы.Свойство("СкрытьРабочийСтолПриНачалеРаботыСистемы") Тогда
		// Произошла попытка закрытия до окончания запуска.
		// В веб-клиенте это возможно в штатном случае (при закрытии страницы в целом),
		// поэтому закрытие блокируется, так как его все равно можно выполнить принудительно,
		// а в случае случайного закрытия у пользователя должна быть возможность остаться на странице.
		// Не в веб-клиенте это возможно в случае ошибок в немодальной последовательности запуска.
		// То есть нет ни одного окна блокирующего весь интерфейс. Закрытие нужно разрешить,
		// но без стандартных процедур перед завершение работы системы, так как они могут
		// привести к ошибке в процессе закрытия из-за незавершенного запуска.
#Если Не ВебКлиент Тогда
		Отказ = Истина;
#КонецЕсли
		Возврат Ложь;
	КонецЕсли;

	// В режиме работы толстый клиент (обычное приложение) не выводится список предупреждений.
#Если ТолстыйКлиентОбычноеПриложение Тогда
	Возврат Ложь;
#КонецЕсли

	Если ПараметрыПриложения["СтандартныеПодсистемы.ПропуститьПредупреждениеПередЗавершениемРаботыСистемы"] = Истина Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Функция СП_ПараметрыОбработкиПередНачаломРаботыСистемы(Удалить = Ложь)
	ИмяПараметра	= "СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы";
	Свойства		= ПараметрыПриложения[ИмяПараметра];
	Если Свойства = Неопределено Тогда
		Свойства = Новый Структура;
		ПараметрыПриложения.Вставить(ИмяПараметра, Свойства);
	КонецЕсли;

	ИмяСвойства = "ПараметрыОбработкиПередНачаломРаботыСистемы";
	Если Свойства.Свойство(ИмяСвойства) Тогда
		Параметры = Свойства[ИмяСвойства];
	Иначе
		Параметры = Новый Структура;
		Свойства.Вставить(ИмяСвойства, Параметры);
	КонецЕсли;

	Если Удалить Тогда
		Свойства.Удалить(ИмяСвойства);
	КонецЕсли;

	Возврат Параметры;
КонецФункции

Функция СП_ПараметрыОбработкиПриНачалеРаботыСистемы(Удалить = Ложь)
	ИмяПараметра	= "СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы";
	Свойства		= ПараметрыПриложения[ИмяПараметра];
	Если Свойства = Неопределено Тогда
		Свойства = Новый Структура;
		ПараметрыПриложения.Вставить(ИмяПараметра, Свойства);
	КонецЕсли;

	ИмяСвойства = "ПараметрыОбработкиПриНачалеРаботыСистемы";
	Если Свойства.Свойство(ИмяСвойства) Тогда
		Параметры = Свойства[ИмяСвойства];
	Иначе
		Параметры = Новый Структура;
		Свойства.Вставить(ИмяСвойства, Параметры);
	КонецЕсли;

	Если Удалить Тогда
		Свойства.Удалить(ИмяСвойства);
	КонецЕсли;

	Возврат Параметры;
КонецФункции

Процедура СП_ОбновитьПараметрыРаботыКлиента(Параметры, ПервыйВызов = Ложь, ОбновитьПовторноИспользуемыеЗначения = Истина)
	Если ПервыйВызов Тогда
		ИмяПараметра = "СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы";
		Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
			ПараметрыПриложения.Вставить(ИмяПараметра, Новый Структура);
		КонецЕсли;
		ИмяПараметра = "СтандартныеПодсистемы.ЗапускПрограммыЗавершен";
		Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
			ПараметрыПриложения.Вставить(ИмяПараметра, Ложь);
		КонецЕсли;
	ИначеЕсли Параметры.КоличествоПолученныхПараметровКлиента = Параметры.ПолученныеПараметрыКлиента.Количество() Тогда
		Возврат;
	КонецЕсли;

	Параметры.Вставить("КоличествоПолученныхПараметровКлиента", Параметры.ПолученныеПараметрыКлиента.Количество());

	ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"].Вставить(
		"ПолученныеПараметрыКлиента", Параметры.ПолученныеПараметрыКлиента);

	Если ОбновитьПовторноИспользуемыеЗначения Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
КонецПроцедуры

Процедура СП_СкрытьРабочийСтолПриНачалеРаботыСистемы(Скрыть = Истина, УжеВыполненоНаСервере = Ложь) Экспорт
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];

	Если Скрыть Тогда
		Если НЕ ПараметрыПриЗапускеПрограммы.Свойство("СкрытьРабочийСтолПриНачалеРаботыСистемы") Тогда
			ПараметрыПриЗапускеПрограммы.Вставить("СкрытьРабочийСтолПриНачалеРаботыСистемы");
			Если НЕ УжеВыполненоНаСервере Тогда
				БазоваяПодсистемаВызовСервера.СП_СкрытьРабочийСтолПриНачалеРаботыСистемы();
			КонецЕсли;
			ОбновитьИнтерфейс();
		КонецЕсли;
	Иначе
		Если ПараметрыПриЗапускеПрограммы.Свойство("СкрытьРабочийСтолПриНачалеРаботыСистемы") Тогда
			ПараметрыПриЗапускеПрограммы.Удалить("СкрытьРабочийСтолПриНачалеРаботыСистемы");
			Если НЕ УжеВыполненоНаСервере Тогда
				БазоваяПодсистемаВызовСервера.СП_СкрытьРабочийСтолПриНачалеРаботыСистемы(Ложь);
			КонецЕсли;
			ТекущееАктивноеОкно = АктивноеОкно();
			ОбновитьИнтерфейс();
			Если ТекущееАктивноеОкно <> Неопределено Тогда
				ТекущееАктивноеОкно.Активизировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СП_УстановитьПараметрыФункциональныхОпцийИнтерфейсаПриЗапуске()
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];

	Если ТипЗнч(ПараметрыПриЗапускеПрограммы) <> Тип("Структура")
	 Или Не ПараметрыПриЗапускеПрограммы.Свойство("ОпцииИнтерфейса") Тогда
		// Обработка ошибки запуска.
		Возврат;
	КонецЕсли;

	Если ПараметрыПриЗапускеПрограммы.Свойство("ОпцииИнтерфейсаУстановлены") Тогда
		Возврат;
	КонецЕсли;

	ОпцииИнтерфейса = Новый Структура(ПараметрыПриЗапускеПрограммы.ОпцииИнтерфейса);

	// Установка параметров функциональных опций производится только тогда, когда они заданы.
	Если ОпцииИнтерфейса.Количество() > 0 Тогда
		УстановитьПараметрыФункциональныхОпцийИнтерфейса(ОпцииИнтерфейса);
	КонецЕсли;

	ПараметрыПриЗапускеПрограммы.Вставить("ОпцииИнтерфейсаУстановлены");
КонецПроцедуры

Функция СП_ПродолжитьДействияПередНачаломРаботыСистемы(Параметры)
	Если Параметры.Отказ Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
		Возврат Ложь;
	КонецЕсли;

	СП_ОбновитьПараметрыРаботыКлиента(Параметры);

	Возврат Истина;
КонецФункции

Процедура СП_ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке, Событие, ПрекратитьРаботу = Ложь)
	Если Событие = "Запуск" Тогда
		Если ПрекратитьРаботу Тогда
			Параметры.Отказ = Истина;
			Параметры.ОбработкаПродолжения = Параметры.ОбработкаЗавершения;
		КонецЕсли;
	Иначе
		ДополнительныеПараметры = Новый Структура(
			"Параметры, ОбработкаПродолжения", Параметры, Параметры.ОбработкаПродолжения);

		Параметры.ОбработкаПродолжения = Новый ОписаниеОповещения(
			"СП_ДействияПередЗавершениемРаботыСистемыПослеОбработкиОшибки", ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;

	БазоваяПодсистемаВызовСервера.СП_ЗаписатьОшибкуВЖурналРегистрацииПриЗапускеИлиЗавершении(ПрекратитьРаботу, Событие, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));

	ТекстПредупреждения = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке) + Символы.ПС + Символы.ПС + "Техническая информация записана в журнал регистрации.";

	Если Событие = "Запуск" И ПрекратитьРаботу Тогда
		ТекстПредупреждения = "Запуск программы невозможен:" + Символы.ПС + Символы.ПС + ТекстПредупреждения;
	КонецЕсли;

	ИнтерактивнаяОбработка = Новый ОписаниеОповещения("СП_ПоказатьПредупреждениеИПродолжить", ЭтотОбъект, ТекстПредупреждения);

	Параметры.ИнтерактивнаяОбработка = ИнтерактивнаяОбработка;
КонецПроцедуры

Процедура СП_ДействияПередЗавершениемРаботыСистемыПослеОбработкиОшибки(Неопределен, ДополнительныеПараметры) Экспорт
	Параметры						= ДополнительныеПараметры.Параметры;
	Параметры.ОбработкаПродолжения	= ДополнительныеПараметры.ОбработкаПродолжения;

	Если Параметры.Отказ Тогда
		Параметры.Отказ = Ложь;
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
	Иначе
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	КонецЕсли;
КонецПроцедуры

Процедура СП_ДействияПередЗавершениемРаботыСистемы(Параметры) Экспорт
	Параметры.Вставить("ОбработкаПродолжения", Параметры.ОбработкаЗавершения);

	Попытка
		СП_ОткрытьФормуПредупрежденийПриЗавершенииРаботы(Параметры);
	Исключение
		СП_ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Завершение");
	КонецПопытки;
	Если СП_ИнтерактивнаяОбработкаПередЗавершениемРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Процедура СП_ОткрытьФормуПредупрежденийПриЗавершенииРаботы(Параметры)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры",		Параметры);
	ДополнительныеПараметры.Вставить("ВариантФормы",	"Вопрос");

	ОбработкаОтвета = Новый ОписаниеОповещения("СП_ПослеЗакрытияФормыПредупрежденийПриЗавершенииРаботы",
		ЭтотОбъект, ДополнительныеПараметры);

	Предупреждения = Параметры.Предупреждения;
	Параметры.Удалить("Предупреждения");

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Предупреждения", Предупреждения);

	ИмяФормы = "ОбщаяФорма.ПредупрежденияПриЗавершенииРаботы";

	Если Предупреждения.Количество() = 1 Тогда
		Если Не ПустаяСтрока(Предупреждения[0].ТекстФлажка) Тогда
			ДополнительныеПараметры.Вставить("ВариантФормы", "СтандартнаяФорма");
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("ИмяФормы",				ИмяФормы);
			ПараметрыОткрытияФормы.Вставить("ПараметрыФормы",		ПараметрыФормы);
			ПараметрыОткрытияФормы.Вставить("ОбработкаОтвета",		ОбработкаОтвета);
			ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна",	Неопределено);
			Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
				"СП_ИнтерактивнаяОбработкаПредупрежденийПриЗавершенииРаботы", ЭтотОбъект, ПараметрыОткрытияФормы);
		Иначе
			ДополнительныеПараметры.Вставить("ВариантФормы", "ПрикладнаяФорма");
			СП_ОткрытьПрикладнуюФормуПредупреждения(Параметры, ОбработкаОтвета, Предупреждения[0], ИмяФормы, ПараметрыФормы);
		КонецЕсли;
	Иначе
		ДополнительныеПараметры.Вставить("ВариантФормы", "СтандартнаяФорма");
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ИмяФормы",				ИмяФормы);
		ПараметрыОткрытияФормы.Вставить("ПараметрыФормы",		ПараметрыФормы);
		ПараметрыОткрытияФормы.Вставить("ОбработкаОтвета",		ОбработкаОтвета);
		ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна",	Неопределено);
		Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
			"СП_ИнтерактивнаяОбработкаПредупрежденийПриЗавершенииРаботы", ЭтотОбъект, ПараметрыОткрытияФормы);
	КонецЕсли;
КонецПроцедуры

Процедура СП_ДействияПередЗавершениемРаботыСистемыОбработкаЗавершения(Неопределен, Параметры) Экспорт
	Параметры.ОбработкаПродолжения = Неопределено;
	Параметры.ОбработкаЗавершения  = Неопределено;

	Если Не Параметры.Отказ
	   И Не Параметры.НепрерывноеВыполнение Тогда

		ИмяПараметра = "СтандартныеПодсистемы.ПропуститьПредупреждениеПередЗавершениемРаботыСистемы";
		ПараметрыПриложения.Вставить(ИмяПараметра, Истина);

		ЗавершитьРаботуСистемы();
	КонецЕсли;
КонецПроцедуры

Процедура СП_ПослеЗакрытияФормыПредупрежденийПриЗавершенииРаботы(Результат, ДополнительныеПараметры) Экспорт
	Параметры = ДополнительныеПараметры.Параметры;

	Если ДополнительныеПараметры.ВариантФормы = "Вопрос" Тогда
		Если Результат = Неопределено Или Результат.Значение <> КодВозвратаДиалога.Да Тогда
			Параметры.Отказ = Истина;
		КонецЕсли;
	ИначеЕсли ДополнительныеПараметры.ВариантФормы = "СтандартнаяФорма" Тогда
		Если Результат = Истина Или Результат = Неопределено Тогда
			Параметры.Отказ = Истина;
		КонецЕсли;
	Иначе // ПрикладнаяФорма
		Если Результат = Истина Или Результат = Неопределено Или Результат = КодВозвратаДиалога.Нет Тогда
			Параметры.Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Процедура СП_ОткрытьПрикладнуюФормуПредупреждения(Параметры, ОбработкаОтвета, ПредупреждениеПользователю, ИмяФормы, ПараметрыФормы)
	ТекстГиперссылки = "";
	Если НЕ ПредупреждениеПользователю.Свойство("ТекстГиперссылки", ТекстГиперссылки) Тогда
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(ТекстГиперссылки) Тогда
		Возврат;
	КонецЕсли;

	ДействиеПриНажатииГиперссылки = Неопределено;
	Если НЕ ПредупреждениеПользователю.Свойство("ДействиеПриНажатииГиперссылки", ДействиеПриНажатииГиперссылки) Тогда
		Возврат;
	КонецЕсли;

	ДействиеГиперссылка	= ПредупреждениеПользователю.ДействиеПриНажатииГиперссылки;
	Форма				= Неопределено;
	Если ДействиеГиперссылка.Свойство("ПрикладнаяФормаПредупреждения", Форма) Тогда
		ПараметрыФормы = Неопределено;
		Если ДействиеГиперссылка.Свойство("ПараметрыПрикладнойФормыПредупреждения", ПараметрыФормы) Тогда
			Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
				ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
			ИначеЕсли ПараметрыФормы = Неопределено Тогда
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
			КонецЕсли;

			ПараметрыФормы.Вставить("ЗаголовокКнопкиДа",  "Завершить");
			ПараметрыФормы.Вставить("ЗаголовокКнопкиНет", "Отмена");

		КонецЕсли;
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ИмяФормы",				Форма);
		ПараметрыОткрытияФормы.Вставить("ПараметрыФормы",		ПараметрыФормы);
		ПараметрыОткрытияФормы.Вставить("ОбработкаОтвета",		ОбработкаОтвета);
		ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна",	ДействиеГиперссылка.РежимОткрытияОкна);
		Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
			"СП_ИнтерактивнаяОбработкаПредупрежденийПриЗавершенииРаботы", ЭтотОбъект, ПараметрыОткрытияФормы);

	ИначеЕсли ДействиеГиперссылка.Свойство("Форма", Форма) Тогда
		ПараметрыФормы = Неопределено;
		Если ДействиеГиперссылка.Свойство("ПараметрыФормы", ПараметрыФормы) Тогда
			Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
				ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
			ИначеЕсли ПараметрыФормы = Неопределено Тогда
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
			КонецЕсли;
		КонецЕсли;
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ИмяФормы",				Форма);
		ПараметрыОткрытияФормы.Вставить("ПараметрыФормы",		ПараметрыФормы);
		ПараметрыОткрытияФормы.Вставить("ОбработкаОтвета",		ОбработкаОтвета);
		ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна",	ДействиеГиперссылка.РежимОткрытияОкна);
		Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
			"СП_ИнтерактивнаяОбработкаПредупрежденийПриЗавершенииРаботы", ЭтотОбъект, ПараметрыОткрытияФормы);
	КонецЕсли;
КонецПроцедуры

Процедура СП_ИнтерактивнаяОбработкаПредупрежденийПриЗавершенииРаботы(Параметры, ПараметрыОткрытияФормы) Экспорт
	ОткрытьФорму(
		ПараметрыОткрытияФормы.ИмяФормы,
		ПараметрыОткрытияФормы.ПараметрыФормы, , , , ,
		ПараметрыОткрытияФормы.ОбработкаОтвета,
		ПараметрыОткрытияФормы.РежимОткрытияОкна);
КонецПроцедуры

Функция СП_ИнтерактивнаяОбработкаПередЗавершениемРаботыСистемы(Параметры)
	Если Параметры.ИнтерактивнаяОбработка = Неопределено Тогда
		Если Параметры.Отказ Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);

			Возврат Истина;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;

	Если Не Параметры.НепрерывноеВыполнение Тогда
		ИнтерактивнаяОбработка = Параметры.ИнтерактивнаяОбработка;
		Параметры.ИнтерактивнаяОбработка = Неопределено;

		ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);
	Иначе
		// Выполнен вызов из обработчика события ПередЗавершениемРаботыСистемы для подготовки
		// выполнения интерактивной обработки через обработчик ожидания.
		ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"].Вставить("ПараметрыОбработкиЗавершения", Параметры);
		Параметры.НепрерывноеВыполнение = Ложь;
		ПодключитьОбработчикОжидания(
			"СП_ОбработчикОжиданияИнтерактивнаяОбработкаПередЗавершениемРаботыСистемы", 0.1, Истина);
	КонецЕсли;

	Возврат Истина;
КонецФункции

Процедура СП_НачатьИнтерактивнуюОбработкуПередЗавершениемРаботыСистемы() Экспорт
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];
	Если НЕ ПараметрыПриЗапускеПрограммы.Свойство("ПараметрыОбработкиЗавершения") Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПараметрыПриЗапускеПрограммы.ПараметрыОбработкиЗавершения;
	ПараметрыПриЗапускеПрограммы.Удалить("ПараметрыОбработкиЗавершения");

	ИнтерактивнаяОбработка				= Параметры.ИнтерактивнаяОбработка;
	Параметры.ИнтерактивнаяОбработка	= Неопределено;
	ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);
КонецПроцедуры

Процедура СП_ПоказатьПредупреждениеИПродолжить(Параметры, ОписаниеПредупреждения) Экспорт
	ОповещениеСРезультатом = Параметры.ОбработкаПродолжения;

	Если ОписаниеПредупреждения = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеСРезультатом);

		Возврат;
	КонецЕсли;

	Кнопки													= Новый СписокЗначений;
	ПараметрыВопроса										= СП_ПараметрыВопросаПользователю();
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос	= Ложь;
	ПараметрыВопроса.БлокироватьВесьИнтерфейс				= Истина;
	ПараметрыВопроса.Картинка								= БиблиотекаКартинок.Предупреждение32;

	Если Параметры.Отказ Тогда
		Кнопки.Добавить("Завершить", "Завершить работу");
		ПараметрыВопроса.КнопкаПоУмолчанию = "Завершить";
	Иначе
		Кнопки.Добавить("Продолжить", "Продолжить");
		Кнопки.Добавить("Завершить",  "Завершить работу");
		ПараметрыВопроса.КнопкаПоУмолчанию = "Продолжить";
	КонецЕсли;

	Если ТипЗнч(ОписаниеПредупреждения) = Тип("Структура") Тогда
		ТекстПредупреждения = ОписаниеПредупреждения.ТекстПредупреждения;
		Кнопки = ОписаниеПредупреждения.Кнопки;
		ЗаполнитьЗначенияСвойств(ПараметрыВопроса, ОписаниеПредупреждения.ПараметрыВопроса);
	Иначе
		ТекстПредупреждения = ОписаниеПредупреждения;
	КонецЕсли;

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("СП_ПоказатьПредупреждениеИПродолжитьЗавершение", ЭтотОбъект, Параметры);
	СП_ПоказатьВопросПользователю(ОповещениеОЗакрытии, ТекстПредупреждения, Кнопки, ПараметрыВопроса);
КонецПроцедуры

Процедура СП_ПоказатьПредупреждениеИПродолжитьЗавершение(Результат, Параметры) Экспорт
	Если Результат <> Неопределено Тогда
		Если Результат.Значение = "Завершить" Тогда
			Параметры.Отказ = Истина;
		ИначеЕсли Результат.Значение = "Перезапустить" Или Результат.Значение = КодВозвратаДиалога.Таймаут Тогда
			Параметры.Отказ = Истина;
			Параметры.Перезапустить = Истина;
		КонецЕсли;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
КонецПроцедуры

Процедура СП_ПоказатьВопросПользователю(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, ДополнительныеПараметры = Неопределено) Экспорт
	Параметры = СП_ПараметрыВопросаПользователю();
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Параметры, ДополнительныеПараметры);
	КонецЕсли;

	КодыВозвратаДиалога = Новый Соответствие;
	КодыВозвратаДиалога.Вставить(КодВозвратаДиалога.Да,			"КодВозвратаДиалога.Да");
	КодыВозвратаДиалога.Вставить(КодВозвратаДиалога.Нет,		"КодВозвратаДиалога.Нет");
	КодыВозвратаДиалога.Вставить(КодВозвратаДиалога.ОК,			"КодВозвратаДиалога.ОК");
	КодыВозвратаДиалога.Вставить(КодВозвратаДиалога.Отмена,		"КодВозвратаДиалога.Отмена");
	КодыВозвратаДиалога.Вставить(КодВозвратаДиалога.Повторить,	"КодВозвратаДиалога.Повторить");
	КодыВозвратаДиалога.Вставить(КодВозвратаДиалога.Прервать,	"КодВозвратаДиалога.Прервать");
	КодыВозвратаДиалога.Вставить(КодВозвратаДиалога.Пропустить,	"КодВозвратаДиалога.Пропустить");
	КодыВозвратаДиалога.Вставить(КодВозвратаДиалога.Таймаут,	"КодВозвратаДиалога.Таймаут");

	ПредставленияКнопок = Новый Соответствие;
	ПредставленияКнопок.Вставить(КодВозвратаДиалога.Да,			"Да");
	ПредставленияКнопок.Вставить(КодВозвратаДиалога.Нет,		"Нет");
	ПредставленияКнопок.Вставить(КодВозвратаДиалога.ОК,			"ОК");
	ПредставленияКнопок.Вставить(КодВозвратаДиалога.Отмена,		"Отмена");
	ПредставленияКнопок.Вставить(КодВозвратаДиалога.Повторить,	"Повторить");
	ПредставленияКнопок.Вставить(КодВозвратаДиалога.Прервать,	"Прервать");
	ПредставленияКнопок.Вставить(КодВозвратаДиалога.Пропустить,	"Пропустить");
	ПредставленияКнопок.Вставить(КодВозвратаДиалога.Таймаут,	"Таймаут");

	РежимыДиалогаВопрос = Новый Соответствие;
	РежимыДиалогаВопрос.Вставить(РежимДиалогаВопрос.ДаНет,							"РежимДиалогаВопрос.ДаНет");
	РежимыДиалогаВопрос.Вставить(РежимДиалогаВопрос.ДаНетОтмена,					"РежимДиалогаВопрос.ДаНетОтмена");
	РежимыДиалогаВопрос.Вставить(РежимДиалогаВопрос.ОК,								"РежимДиалогаВопрос.ОК");
	РежимыДиалогаВопрос.Вставить(РежимДиалогаВопрос.ОКОтмена,						"РежимДиалогаВопрос.ОКОтмена");
	РежимыДиалогаВопрос.Вставить(РежимДиалогаВопрос.ПовторитьОтмена,				"РежимДиалогаВопрос.ПовторитьОтмена");
	РежимыДиалогаВопрос.Вставить(РежимДиалогаВопрос.ПрерватьПовторитьПропустить,	"РежимДиалогаВопрос.ПрерватьПовторитьПропустить");

	КнопкиДиалога = Кнопки;

	Если ТипЗнч(Кнопки) = Тип("СписокЗначений") Тогда
		КнопкиДиалога = ОН_СкопироватьРекурсивно(Кнопки);
		Для Каждого Кнопка Из КнопкиДиалога Цикл
			Если Кнопка.Представление = "" Тогда
				Кнопка.Представление = ПредставленияКнопок[Кнопка.Значение];
			КонецЕсли;
			Если ТипЗнч(Кнопка.Значение) = Тип("КодВозвратаДиалога") Тогда
				Кнопка.Значение = КодыВозвратаДиалога[Кнопка.Значение];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если ТипЗнч(Кнопки) = Тип("РежимДиалогаВопрос") Тогда
		КнопкиДиалога = РежимыДиалогаВопрос[Кнопки];
	КонецЕсли;

	Если ТипЗнч(Параметры.КнопкаПоУмолчанию) = Тип("КодВозвратаДиалога") Тогда
		Параметры.КнопкаПоУмолчанию	= КодыВозвратаДиалога[Параметры.КнопкаПоУмолчанию];
	КонецЕсли;

	Если ТипЗнч(Параметры.КнопкаТаймаута) = Тип("КодВозвратаДиалога") Тогда
		Параметры.КнопкаТаймаута	= КодыВозвратаДиалога[Параметры.КнопкаТаймаута];
	КонецЕсли;

	Параметры.Вставить("Кнопки",			КнопкиДиалога);
	Параметры.Вставить("ТекстСообщения",	ТекстВопроса);

	ОткрытьФорму("ОбщаяФорма.Вопрос", Параметры,,,,, ОписаниеОповещенияОЗавершении);
КонецПроцедуры

Функция СП_ПараметрыВопросаПользователю() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("КнопкаПоУмолчанию",						Неопределено);
	Параметры.Вставить("Таймаут",								0);
	Параметры.Вставить("КнопкаТаймаута",						Неопределено);
	Параметры.Вставить("Заголовок",								КлиентскоеПриложение.ПолучитьЗаголовок());
	Параметры.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос",	Истина);
	Параметры.Вставить("БольшеНеЗадаватьЭтотВопрос",			Ложь);
	Параметры.Вставить("БлокироватьВесьИнтерфейс",				Ложь);
	Параметры.Вставить("Картинка",								БиблиотекаКартинок.Вопрос32);

	Возврат Параметры;
КонецФункции

Функция СП_ВыполняетсяИнтерактивнаяОбработкаПередНачаломРаботыСистемы()
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"]; // Структура

	Если НЕ ПараметрыПриЗапускеПрограммы.Свойство("ПараметрыОбработки") Тогда
		Возврат Ложь;
	КонецЕсли;

	Параметры = ПараметрыПриЗапускеПрограммы.ПараметрыОбработки;
	Если Параметры.ИнтерактивнаяОбработка = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ПодключитьОбработчикОжидания("СП_ОбработчикОжиданияНачатьИнтерактивнуюОбработкуПередНачаломРаботыСистемы", 0.1, Истина);
	Параметры.НепрерывноеВыполнение = Ложь;

	Возврат Истина;
КонецФункции

Процедура СП_НачатьИнтерактивнуюОбработкуПередНачаломРаботыСистемы() Экспорт
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"]; // Структура

	Параметры							= ПараметрыПриЗапускеПрограммы.ПараметрыОбработки;
	ИнтерактивнаяОбработка				= Параметры.ИнтерактивнаяОбработка;
	Параметры.ИнтерактивнаяОбработка	= Неопределено;

	ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);

	ПараметрыПриЗапускеПрограммы.Удалить("ПараметрыОбработки");
КонецПроцедуры

Процедура СП_УстановитьРасширенныйЗаголовокПриложения(ПриЗапуске = Ложь) Экспорт
	ПараметрыКлиента = ?(ПриЗапуске, БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиентаПриЗапуске(),
		БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиента());

	ПредставлениеЗаголовка		= ПараметрыКлиента.ЗаголовокПриложения;
	ПредставлениеКонфигурации	= ПараметрыКлиента.ПодробнаяИнформация;

	Если ПустаяСтрока(СокрЛП(ПредставлениеЗаголовка)) Тогда
		Если ПараметрыКлиента.Свойство("ПредставлениеОбластиДанных") Тогда
			ШаблонЗаголовка		= "%1 / %2";
			ЗаголовокПриложения	= СтрШаблон(ШаблонЗаголовка, ПараметрыКлиента.ПредставлениеОбластиДанных,
				ПредставлениеКонфигурации);
		Иначе
			ШаблонЗаголовка		= "%1";
			ЗаголовокПриложения	= СтрШаблон(ШаблонЗаголовка, ПредставлениеКонфигурации);
		КонецЕсли;
	Иначе
		ШаблонЗаголовка		= "%1 / %2";
		ЗаголовокПриложения	= СтрШаблон(ШаблонЗаголовка,
			СокрЛП(ПредставлениеЗаголовка), ПредставлениеКонфигурации);
	КонецЕсли;

	КлиентскоеПриложение.УстановитьЗаголовок(ЗаголовокПриложения);
КонецПроцедуры

Функция СП_ЗапускПрограммыЗавершен() Экспорт
	ИмяПараметра = "СтандартныеПодсистемы.ЗапускПрограммыЗавершен";
	Если ПараметрыПриложения[ИмяПараметра] = Истина Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Процедура СП_ЗаполнитьПараметрыКлиента(ПараметрыКлиента) Экспорт
	ИмяПараметра = "СтандартныеПодсистемы.ПараметрыКлиента";
	Если ТипЗнч(ПараметрыПриложения[ИмяПараметра]) <> Тип("Структура") Тогда
		ПараметрыПриложения[ИмяПараметра] = Новый Структура;
		ПараметрыПриложения[ИмяПараметра].Вставить("ИнформационнаяБазаФайловая");
		ПараметрыПриложения[ИмяПараметра].Вставить("ЭтоСеансВнешнегоПользователя");
		ПараметрыПриложения[ИмяПараметра].Вставить("АвторизованныйПользователь");
		ПараметрыПриложения[ИмяПараметра].Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы");
		ПараметрыПриложения[ИмяПараметра].Вставить("ПараметрыАвтономнойРаботы");
		ПараметрыПриложения[ИмяПараметра].Вставить("ПерсональныеНастройкиРаботыСФайлами");
		ПараметрыПриложения[ИмяПараметра].Вставить("КоличествоЗанятыхФайлов");
		ПараметрыПриложения[ИмяПараметра].Вставить("РезервноеКопированиеИБПриЗавершенииРаботы");
		ПараметрыПриложения[ИмяПараметра].Вставить("СмещениеДатыКлиента");
		ПараметрыПриложения[ИмяПараметра].Вставить("КодОсновногоЯзыка");
		Если ПараметрыКлиента.Свойство("ОценкаПроизводительности") Тогда
			ПараметрыПриложения[ИмяПараметра].Вставить("ОценкаПроизводительности");
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ПараметрыПриложения[ИмяПараметра], ПараметрыКлиента);
КонецПроцедуры

Функция СП_ОбработатьПараметрыЗапуска()
	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат Истина;
	КонецЕсли;

	// Параметр может состоять из частей, разделенных символом ";".
	ПараметрыЗапуска = СтрРазделить(ПараметрЗапуска, ";", Ложь);

	Отказ = Ложь;

	// Зарезервировано для новых подсистем

	Возврат Не Отказ;
КонецФункции

Процедура СП_ОповеститьОНехваткеПамяти() Экспорт
	РекомендуемыйОбъем = БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиентаПриЗапуске().РекомендуемыйОбъемОперативнойПамяти;

	Заголовок = "Скорость работы снижена";
	Текст = СтрШаблон(
		"Рекомендуется увеличить объем памяти до %1 Гб.", РекомендуемыйОбъем);

	ПоказатьОповещениеПользователя(Заголовок,
		"e1cib/app/Обработка.РекомендацияПоПовышениюСкоростиРаботы",
		Текст, БиблиотекаКартинок.Предупреждение32, СтатусОповещенияПользователя.Важное);
КонецПроцедуры

Процедура СП_ПриВыполненииСтандартныхПериодическихПроверок() Экспорт
	Параметры = Новый Структура;

	// Зарезервировано для новых подсистем

	БазоваяПодсистемаВызовСервера.СП_ПриВыполненииСтандартныхПериодическихПроверокНаСервере(Параметры);

	// Зарезервировано для новых подсистем

	Контекст = Новый Структура("Параметры", Параметры);

	ОбработкаПродолжения = Новый ОписаниеОповещения("СП_ПриВыполненииСтандартныхПериодическихПроверокПодсистемаПользователи", ЭтотОбъект, Контекст);

	Если Не Параметры.ДинамическиеИзмененияКонфигурации.ОповещатьПользователя Или Не Параметры.КонфигурацияБазыДанныхИзмененаДинамически Тогда
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения);

		Возврат;
	КонецЕсли;

	ИмяПараметра = "СтандартныеПодсистемы.ПриВыполненииСтандартныхПериодическихПроверок";
	Если ПараметрыПриложения[ИмяПараметра] <> Неопределено Тогда
		ДатаСохраненная = ПараметрыПриложения[ИмяПараметра];
		ДатаСеанса      = ОН_ДатаСеанса();
		Если ТипЗнч(ДатаСохраненная) = Тип("Дата") И ДеньГода(ДатаСохраненная) = ДеньГода(ДатаСеанса) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	СообщениеПользователю = СтрЗаменить(Параметры.ДинамическиеИзмененияКонфигурации.СообщениеПользователю, "Ссылка", "");
	ПоказатьОповещениеПользователя("Установлено обновление программы", "e1cib/app/ОбщаяФорма.КонтрольДинамическогоОбновления", СообщениеПользователю, БиблиотекаКартинок.Предупреждение32, СтатусОповещенияПользователя.Важное, "УстановленоОбновлениеПрограммы");

	ВыполнитьОбработкуОповещения(ОбработкаПродолжения);
КонецПроцедуры

Процедура СП_ПриВыполненииСтандартныхПериодическихПроверокПодсистемаПользователи(Результат, Контекст) Экспорт
	ОбработкаПродолжения = Новый ОписаниеОповещения(
		"СП_ПриВыполненииСтандартныхПериодическихПроверокПодсистемаПользователиЗавершение", ЭтотОбъект, Контекст);

	ПользователиКлиент.сП_ПриВыполненииСтандартныхПериодическихПроверок(Контекст.Параметры, ОбработкаПродолжения);
КонецПроцедуры

Процедура СП_ПриВыполненииСтандартныхПериодическихПроверокПодсистемаПользователиЗавершение(Результат, Контекст) Экспорт
	ПодключитьОбработчикОжидания("СП_ОбработчикОжиданияСтандартныхПериодическихПроверок", 20 * 60, Истина);
КонецПроцедуры

Функция СП_ПараметрКлиента(ИмяПараметра = Неопределено) Экспорт
	ИмяГлобальногоПараметра	= "СтандартныеПодсистемы.ПараметрыКлиента";
	ПараметрыКлиента		= ПараметрыПриложения[ИмяГлобальногоПараметра];

	Если ПараметрыКлиента = Неопределено Тогда
		// Заполнение постоянных параметров клиента.
		БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиентаПриЗапуске();
		ПараметрыКлиента = ПараметрыПриложения[ИмяГлобальногоПараметра];
	КонецЕсли;

	Если ИмяПараметра = Неопределено Тогда
		Возврат ПараметрыКлиента;
	Иначе
		Возврат ПараметрыКлиента[ИмяПараметра];
	КонецЕсли;
КонецФункции

Функция СП_ЭтоЭлементДинамическогоСписка(ТаблицаИлиТекущиеДанные) Экспорт
	Если ТипЗнч(ТаблицаИлиТекущиеДанные) = Тип("ТаблицаФормы") Тогда
		ТекущиеДанные = ТаблицаИлиТекущиеДанные.ТекущиеДанные;
	Иначе
		ТекущиеДанные = ТаблицаИлиТекущиеДанные;
	КонецЕсли;

	Если ТипЗнч(ТекущиеДанные) <> Тип("ДанныеФормыСтруктура") И ТипЗнч(ТекущиеДанные) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТекущиеДанные.Свойство("ГруппировкаСтроки") Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Процедура СП_УстановитьХранениеФормы(Форма, Хранение) Экспорт
	Хранилище = ПараметрыПриложения["СтандартныеПодсистемы.ВременноеХранилищеСсылокНаУправляемыеФормы"];
	Если Хранилище = Неопределено Тогда
		Хранилище = Новый Соответствие;
		ПараметрыПриложения.Вставить("СтандартныеПодсистемы.ВременноеХранилищеСсылокНаУправляемыеФормы", Хранилище);
	КонецЕсли;

	Если Хранение Тогда
		Хранилище.Вставить(Форма, Новый Структура("Форма", Форма));
	ИначеЕсли Хранилище.Получить(Форма) <> Неопределено Тогда
		Хранилище.Удалить(Форма);
	КонецЕсли;
КонецПроцедуры

Процедура СП_ИдентификаторыОбъектовМетаданныхФормаСпискаСписокВыборЗначения(Форма, Элемент, Значение, СтандартнаяОбработка) Экспорт
	Если Не Форма.ВыбиратьГруппыОбъектовМетаданных И Элемент.ТекущиеДанные <> Неопределено И Не Элемент.ТекущиеДанные.ПометкаУдаления И Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Родитель) Тогда
		СтандартнаяОбработка = Ложь;

		Если Элемент.Отображение = ОтображениеТаблицы.Дерево Тогда
			Если Элемент.Развернут(Элемент.ТекущаяСтрока) Тогда
				Элемент.Свернуть(Элемент.ТекущаяСтрока);
			Иначе
				Элемент.Развернуть(Элемент.ТекущаяСтрока);
			КонецЕсли;
		ИначеЕсли Элемент.Отображение = ОтображениеТаблицы.ИерархическийСписок Тогда
			Если Элемент.ТекущийРодитель <> Элемент.ТекущаяСтрока Тогда
				Элемент.ТекущийРодитель = Элемент.ТекущаяСтрока;
			Иначе
				ТекущаяСтрока			= Элемент.ТекущаяСтрока;
				Элемент.ТекущийРодитель	= Неопределено;
				Элемент.ТекущаяСтрока	= ТекущаяСтрока;
			КонецЕсли;
		Иначе
			ПоказатьПредупреждение(,"Невозможно выбрать группу объектов метаданных.
				           |Выберите объект метаданных.");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СП_ВыполнитьОповещениеСПустымРезультатом(ОповещениеСРезультатом) Экспорт
	ВыполнитьОбработкуОповещения(ОповещениеСРезультатом);
КонецПроцедуры

Процедура СП_РазвернутьУзлыДерева(Форма, ИмяЭлементаФормы, ИдентификаторСтрокиДерева = "*", РазвернутьСПодчиненными = Ложь) Экспорт
	ТаблицаЭлемент = Форма.Элементы[ИмяЭлементаФормы];
	Если ИдентификаторСтрокиДерева = "*" Тогда
		Узлы = Форма[ИмяЭлементаФормы].ПолучитьЭлементы();
		Для Каждого Узел Из Узлы Цикл
			ТаблицаЭлемент.Развернуть(Узел.ПолучитьИдентификатор(), РазвернутьСПодчиненными);
		КонецЦикла;
	Иначе
		ТаблицаЭлемент.Развернуть(ИдентификаторСтрокиДерева, РазвернутьСПодчиненными);
	КонецЕсли;
КонецПроцедуры

Процедура СП_ОповеститьФормыОбИзменении(ТипыИзмененныхОбъектов, ПараметрОповещенияФорм = Неопределено) Экспорт
	Для Каждого ТипОбъекта Из ТипыИзмененныхОбъектов Цикл
		Оповестить(ТипОбъекта.Значение.ИмяСобытия, ?(ПараметрОповещенияФорм <> Неопределено, ПараметрОповещенияФорм, Новый Структура), ТипОбъекта.Значение.ПустаяСсылка);
		ОповеститьОбИзменении(ТипОбъекта.Ключ);
	КонецЦикла;
КонецПроцедуры

Функция СП_ЭлементыСтиля() Экспорт
	ЭлементыСтиля = Новый Структура;

	ПараметрыРаботыКлиента = БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиента();
	Для каждого ЭлементСтиля Из ПараметрыРаботыКлиента.ЭлементыСтиля Цикл
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ЭлементыСтиля.Вставить(ЭлементСтиля.Ключ, ЭлементСтиля.Значение.Получить());
	#Иначе
		ЭлементыСтиля.Вставить(ЭлементСтиля.Ключ, ЭлементСтиля.Значение);
	#КонецЕсли

	КонецЦикла;

	Возврат ЭлементыСтиля;
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

Функция ОН_ПодсистемаСуществует(ПолноеИмяПодсистемы) Экспорт
	ИмяПараметра = "СтандартныеПодсистемы.ПодсистемыКонфигурации";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ИменаПодсистем = БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиентаПриЗапуске().ИменаПодсистем;
		ПараметрыПриложения.Вставить(ИмяПараметра, ИменаПодсистем);
	КонецЕсли;
	ИменаПодсистем = ПараметрыПриложения[ИмяПараметра];

	Возврат ИменаПодсистем.Получить(ПолноеИмяПодсистемы) <> Неопределено;
КонецФункции

Функция ОН_СкопироватьРекурсивно(Источник, ФиксироватьДанные = Неопределено) Экспорт
	Перем Приемник;

	ТипИсточника = ТипЗнч(Источник);

	Если ТипИсточника = Тип("Структура")
		Или ТипИсточника = Тип("ФиксированнаяСтруктура") Тогда

		Приемник = сОН_СкопироватьСтруктуру(Источник, ФиксироватьДанные);
	ИначеЕсли ТипИсточника = Тип("Соответствие")
		Или ТипИсточника = Тип("ФиксированноеСоответствие") Тогда

		Приемник = сОН_СкопироватьСоответствие(Источник, ФиксироватьДанные);
	ИначеЕсли ТипИсточника = Тип("Массив")
		Или ТипИсточника = Тип("ФиксированныйМассив") Тогда

		Приемник = сОН_СкопироватьМассив(Источник, ФиксироватьДанные);
	ИначеЕсли ТипИсточника = Тип("СписокЗначений") Тогда
		Приемник = сОН_СкопироватьСписокЗначений(Источник, ФиксироватьДанные);
	Иначе
		Приемник = Источник;
	КонецЕсли;

	Возврат Приемник;
КонецФункции

Функция ОН_ЭтоLinuxКлиент() Экспорт
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ТипПлатформыКлиента = СистемнаяИнформация.ТипПлатформы;

	Возврат ТипПлатформыКлиента = ТипПлатформы.Linux_x86
		Или ТипПлатформыКлиента = ТипПлатформы.Linux_x86_64;
КонецФункции

Функция ОН_ЭтоMacOSКлиент() Экспорт
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ТипПлатформыКлиента = СистемнаяИнформация.ТипПлатформы;

	Возврат ТипПлатформыКлиента = ТипПлатформы.MacOS_x86
		Или ТипПлатформыКлиента = ТипПлатформы.MacOS_x86_64;
КонецФункции

Функция ОН_ЭтоWindowsКлиент() Экспорт
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ТипПлатформыКлиента = СистемнаяИнформация.ТипПлатформы;

	Возврат ТипПлатформыКлиента = ТипПлатформы.Windows_x86
		Или ТипПлатформыКлиента = ТипПлатформы.Windows_x86_64;
КонецФункции

Функция ОН_ОперативнаяПамятьДоступнаяКлиентскомуПриложению() Экспорт
	СистемнаяИнформация = Новый СистемнаяИнформация;

	Возврат Окр(СистемнаяИнформация.ОперативнаяПамять / 1024, 1);
КонецФункции

Функция ОН_ДатаСеанса() Экспорт
	Если СП_ЗапускПрограммыЗавершен() Тогда
		ПараметрыКлиента = БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиента();
	Иначе
		ПараметрыКлиента = БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиентаПриЗапуске();
	КонецЕсли;

	Возврат ТекущаяДата() + ПараметрыКлиента.ПоправкаКВремениСеанса;
КонецФункции

Функция ОН_ОбщийМодуль(Имя) Экспорт
	Модуль = Вычислить(Имя);

#Если Не ВебКлиент Тогда
	// В веб-клиенте не проверяется
	// т.к. при обращении к модулям с вызовом сервера типа такого модуля в веб-клиенте не существует.

	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение СтрШаблон(
			"Общий модуль ""%1"" не существует.",
			Имя);
	КонецЕсли;

#КонецЕсли

	Возврат Модуль;
КонецФункции

Процедура ОН_ПоказатьПодтверждениеЗакрытияФормы(Знач ОповещениеСохранитьИЗакрыть, Отказ, Знач ЗавершениеРаботы, Знач ТекстПредупреждения = "", ТекстПредупрежденияПриЗавершении = Неопределено) Экспорт
	Форма = ОповещениеСохранитьИЗакрыть.Модуль;
	Если Не Форма.Модифицированность Тогда
		Возврат;
	КонецЕсли;

	Отказ = Истина;

	Если ЗавершениеРаботы Тогда
		Если ТекстПредупрежденияПриЗавершении = "" Тогда // передан параметр из ПередЗакрытием
			ТекстПредупрежденияПриЗавершении = "Данные были изменены. Все изменения будут потеряны.";
		КонецЕсли;

		Возврат;
	КонецЕсли;

	Параметры = Новый Структура;
	Параметры.Вставить("ОповещениеСохранитьИЗакрыть", ОповещениеСохранитьИЗакрыть);
	Параметры.Вставить("ТекстПредупреждения", ТекстПредупреждения);

	ИмяПараметра = "СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Неопределено);
	КонецЕсли;

	ТекущиеПараметры = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы"];
	Если ТекущиеПараметры <> Неопределено И ТекущиеПараметры.ОповещениеСохранитьИЗакрыть.Модуль = Параметры.ОповещениеСохранитьИЗакрыть.Модуль Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы"] = Параметры;

	Форма.Активизировать();
	ПодключитьОбработчикОжидания("ОН_ПодтвердитьЗакрытиеФормыСейчас", 0.1, Истина);
КонецПроцедуры

Процедура ОН_ПоказатьФормуРедактированияМногострочногоТекста(Знач ОповещениеОЗакрытии, Знач МногострочныйТекст, Знач Заголовок = Неопределено) Экспорт
	Если Заголовок = Неопределено Тогда
		ПоказатьВводСтроки(ОповещениеОЗакрытии, МногострочныйТекст,,, Истина);
	Иначе
		ПоказатьВводСтроки(ОповещениеОЗакрытии, МногострочныйТекст, Заголовок,, Истина);
	КонецЕсли;
КонецПроцедуры

Функция ОН_ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
	Если Не ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		Возврат СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	КонецЕсли;

	Возврат СП_ПараметрКлиента("ИнформационнаяБазаФайловая");
КонецФункции

Процедура ОН_ПоказатьФормуРедактированияКомментария(Знач МногострочныйТекст, Знач ФормаВладелец, Знач ИмяРеквизита = "Объект.Комментарий",  Знач Заголовок = Неопределено) Экспорт
	Контекст = Новый Структура;
	Контекст.Вставить("ФормаВладелец", ФормаВладелец);
	Контекст.Вставить("ИмяРеквизита", ИмяРеквизита);

	Оповещение = Новый ОписаниеОповещения("сОН_КомментарийЗавершениеВвода", БазоваяПодсистемаКлиент, Контекст);

	ЗаголовокФормы = ?(Заголовок <> Неопределено, Заголовок, НСтр("ru = 'Комментарий'"));

	ОН_ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, МногострочныйТекст, ЗаголовокФормы);
КонецПроцедуры

Функция сОН_СкопироватьСтруктуру(СтруктураИсточник, ФиксироватьДанные) Экспорт
	СтруктураРезультат = Новый Структура;

	Для Каждого КлючИЗначение Из СтруктураИсточник Цикл
		СтруктураРезультат.Вставить(КлючИЗначение.Ключ,
			ОН_СкопироватьРекурсивно(КлючИЗначение.Значение, ФиксироватьДанные));
	КонецЦикла;

	Если ФиксироватьДанные = Истина
		Или ФиксироватьДанные = Неопределено
		И ТипЗнч(СтруктураИсточник) = Тип("ФиксированнаяСтруктура") Тогда

		Возврат Новый ФиксированнаяСтруктура(СтруктураРезультат);
	КонецЕсли;

	Возврат СтруктураРезультат;
КонецФункции

Функция сОН_СкопироватьСоответствие(СоответствиеИсточник, ФиксироватьДанные) Экспорт
	СоответствиеРезультат = Новый Соответствие;

	Для Каждого КлючИЗначение Из СоответствиеИсточник Цикл
		СоответствиеРезультат.Вставить(КлючИЗначение.Ключ,
			ОН_СкопироватьРекурсивно(КлючИЗначение.Значение, ФиксироватьДанные));
	КонецЦикла;

	Если ФиксироватьДанные = Истина
		Или ФиксироватьДанные = Неопределено
		И ТипЗнч(СоответствиеИсточник) = Тип("ФиксированноеСоответствие") Тогда

		Возврат Новый ФиксированноеСоответствие(СоответствиеРезультат);
	КонецЕсли;

	Возврат СоответствиеРезультат;
КонецФункции

Функция сОН_СкопироватьМассив(МассивИсточник, ФиксироватьДанные) Экспорт
	МассивРезультат = Новый Массив;

	Для Каждого Элемент Из МассивИсточник Цикл
		МассивРезультат.Добавить(ОН_СкопироватьРекурсивно(Элемент, ФиксироватьДанные));
	КонецЦикла;

	Если ФиксироватьДанные = Истина
		Или ФиксироватьДанные = Неопределено
		И ТипЗнч(МассивИсточник) = Тип("ФиксированныйМассив") Тогда

		Возврат Новый ФиксированныйМассив(МассивРезультат);
	КонецЕсли;

	Возврат МассивРезультат;
КонецФункции

Функция сОН_СкопироватьСписокЗначений(СписокИсточник, ФиксироватьДанные) Экспорт
	СписокРезультат = Новый СписокЗначений;

	Для Каждого ЭлементСписка Из СписокИсточник Цикл
		СписокРезультат.Добавить(
			ОН_СкопироватьРекурсивно(ЭлементСписка.Значение, ФиксироватьДанные),
			ЭлементСписка.Представление,
			ЭлементСписка.Пометка,
			ЭлементСписка.Картинка);
	КонецЦикла;

	Возврат СписокРезультат;
КонецФункции

Функция сОН_ЭтоНавигационнаяСсылка(Строка) Экспорт
	Возврат СтрНачинаетсяС(Строка, "e1c:")
		Или СтрНачинаетсяС(Строка, "e1cib/")
		Или СтрНачинаетсяС(Строка, "e1ccs/");
КонецФункции

Процедура сОН_ПодтвердитьЗакрытиеФормы() Экспорт
	ИмяПараметра = "СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Неопределено);
	КонецЕсли;

	Параметры = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы"];
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("сОН_ПодтвердитьЗакрытиеФормыЗавершение", ЭтотОбъект, Параметры);
	Если ПустаяСтрока(Параметры.ТекстПредупреждения) Тогда
		ТекстВопроса = "Данные были изменены. Сохранить изменения?";
	Иначе
		ТекстВопроса = Параметры.ТекстПредупреждения;
	КонецЕсли;

	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Да);
КонецПроцедуры

Процедура сОН_ПодтвердитьЗакрытиеФормыЗавершение(Ответ, Параметры) Экспорт
	ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПодтвержденияЗакрытияФормы"] = Неопределено;

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеСохранитьИЗакрыть);

	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Форма						= Параметры.ОповещениеСохранитьИЗакрыть.Модуль;
		Форма.Модифицированность	= Ложь;
		Форма.Закрыть();
	Иначе
		Форма						= Параметры.ОповещениеСохранитьИЗакрыть.Модуль;
		Форма.Модифицированность	= Истина;
	КонецЕсли;
КонецПроцедуры

Процедура сОН_КомментарийЗавершениеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
	Если ВведенныйТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РеквизитФормы		= ДополнительныеПараметры.ФормаВладелец;

	ПутьКРеквизитуФормы	= СтрРазделить(ДополнительныеПараметры.ИмяРеквизита, ".");
	// Если реквизит вида "Объект.Комментарий" и т.п.
	Если ПутьКРеквизитуФормы.Количество() > 1 Тогда
		Для Индекс = 0 По ПутьКРеквизитуФормы.Количество() - 2 Цикл
			РеквизитФормы = РеквизитФормы[ПутьКРеквизитуФормы[Индекс]];
		КонецЦикла;
	КонецЕсли;

	РеквизитФормы[ПутьКРеквизитуФормы[ПутьКРеквизитуФормы.Количество() - 1]]	= ВведенныйТекст;
	ДополнительныеПараметры.ФормаВладелец.Модифицированность					= Истина;
КонецПроцедуры

Процедура сОН_РассчитатьПоказатели(Форма, ИмяТабличногоДокумента, ТекущаяКоманда = "", МинимальноеКоличество = 0) Экспорт
	Элементы				= Форма.Элементы;
	ТабличныйДокумент		= Форма[ИмяТабличногоДокумента];
	ПолеТабличногоДокумента	= Элементы[ИмяТабличногоДокумента];

	Если Не ЗначениеЗаполнено(ТекущаяКоманда) Тогда
		ТекущаяКоманда = сОН_ТекущаяКомандаРасчетаПоказателей(Элементы);
	КонецЕсли;

	ПараметрыРасчета = БазоваяПодсистемаКлиентСервер.ОН_ПараметрыРасчетаПоказателейЯчеек(ПолеТабличногоДокумента);

	Если ПараметрыРасчета.РассчитатьНаСервере Тогда
		ДлительнаяОперация = БазоваяПодсистемаВызовСервера.СП_РасчетныеПоказателиЯчеек(ТабличныйДокумент, ПараметрыРасчета.ВыделенныеОбласти, Форма.УникальныйИдентификатор);

		Если ДлительнаяОперация = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ПараметрыОжидания						= БазоваяПодсистемаКлиент.ДО_ПараметрыОжидания(Форма);
		ПараметрыОжидания.ФормаВладелец			= Форма;
		ПараметрыОжидания.ВыводитьОкноОжидания	= Ложь;

		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма",					Форма);
		ДополнительныеПараметры.Вставить("ТекущаяКоманда",			ТекущаяКоманда);
		ДополнительныеПараметры.Вставить("МинимальноеКоличество",	МинимальноеКоличество);

		ОповещениеОЗавершении = Новый ОписаниеОповещения("сОН_ПродолжитьРасчетПоказателей", ЭтотОбъект, ДополнительныеПараметры);
		БазоваяПодсистемаКлиент.ДО_ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	Иначе
		РасчетныеПоказатели = БазоваяПодсистемаКлиентСервер.ОН_РасчетныеПоказателиЯчеек(ТабличныйДокумент, ПолеТабличногоДокумента, ПараметрыРасчета);

		сОН_ЗавершитьРасчетПоказателей(Форма, ТекущаяКоманда, МинимальноеКоличество, РасчетныеПоказатели);
	КонецЕсли;
КонецПроцедуры

Процедура сОН_ПродолжитьРасчетПоказателей(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;

	Если Результат.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;

	РасчетныеПоказатели = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);

	сОН_ЗавершитьРасчетПоказателей(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ТекущаяКоманда, ДополнительныеПараметры.МинимальноеКоличество, РасчетныеПоказатели);
КонецПроцедуры

Процедура сОН_ЗавершитьРасчетПоказателей(Форма, ТекущаяКоманда, МинимальноеКоличество, РасчетныеПоказатели)
	Элементы = Форма.Элементы;

	ЗаполнитьЗначенияСвойств(Форма, РасчетныеПоказатели);

	КомандыПоказателей = сОН_КомандыПоказателей();

	Для Каждого Команда Из КомандыПоказателей Цикл
		сОН_ИзменитьСвойствоЭлементаРасчетаПоказателей(Элементы, Команда.Ключ, "Пометка", Ложь);

		ЗначениеПоказателя = РасчетныеПоказатели[Команда.Значение];
		Элементы[Команда.Значение].ФорматРедактирования = сОН_ФорматРедактированияПоказателя(ЗначениеПоказателя);
	КонецЦикла;

	сОН_ИзменитьСвойствоЭлементаРасчетаПоказателей(Элементы, ТекущаяКоманда, "Пометка", Истина);

	ТекущийПоказатель = КомандыПоказателей[ТекущаяКоманда];

	Если РасчетныеПоказатели.Количество >= МинимальноеКоличество  Тогда
		Форма.Показатель							= Форма[ТекущийПоказатель];
		Элементы.Показатель.ФорматРедактирования	= Элементы[ТекущийПоказатель].ФорматРедактирования;
	КонецЕсли;

	сОН_ИзменитьСвойствоЭлементаРасчетаПоказателей(Элементы, "КомандыВидовПоказателей", "Картинка", БиблиотекаКартинок[ТекущийПоказатель]);

	сОН_ИзменитьСвойствоЭлементаРасчетаПоказателей(Элементы, "ВыбратьПоказатель", "Картинка", БиблиотекаКартинок[ТекущийПоказатель]);

	Форма.ОсновнойПоказатель			= ТекущаяКоманда;
	Форма.РазвернутьОбластьПоказателей	= Элементы.РассчитатьВсеПоказатели.Пометка;
КонецПроцедуры

Процедура сОН_УстановитьВидимостьПанелиПоказателей(ЭлементыФормы, Видимость = Ложь) Экспорт
	ЭлементыФормы.ОбластьПоказателей.Видимость = Видимость;
	сОН_ИзменитьСвойствоЭлементаРасчетаПоказателей(ЭлементыФормы, "РассчитатьВсеПоказатели", "Пометка", Видимость);
КонецПроцедуры

Функция сОН_ТекущаяКомандаРасчетаПоказателей(ЭлементыФормы)
	Перем ТекущаяКоманда;

	КомандыПоказателей = сОН_КомандыПоказателей();
	Для Каждого Команда Из КомандыПоказателей Цикл
		Если ЭлементыФормы[Команда.Ключ].Пометка Тогда
			ТекущаяКоманда = Команда.Ключ;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ТекущаяКоманда = Неопределено Тогда
		ТекущаяКоманда = "РассчитатьСумму";
	КонецЕсли;

	Возврат ТекущаяКоманда;
КонецФункции

Функция сОН_КомандыПоказателей()
	КомандыПоказателей = Новый Соответствие;
	КомандыПоказателей.Вставить("РассчитатьСумму",		"Сумма");
	КомандыПоказателей.Вставить("РассчитатьКоличество",	"Количество");
	КомандыПоказателей.Вставить("РассчитатьСреднее",	"Среднее");
	КомандыПоказателей.Вставить("РассчитатьМинимум",	"Минимум");
	КомандыПоказателей.Вставить("РассчитатьМаксимум",	"Максимум");

	Возврат КомандыПоказателей;
КонецФункции

Функция сОН_ФорматРедактированияПоказателя(ЗначениеПоказателя)
	ШаблонФорматаРедактирования = "ЧДЦ=%1; ЧРГ=' '; ЧН=0";

	ЗначениеДробнойЧасти	= Макс(ЗначениеПоказателя, -ЗначениеПоказателя) % 1;
	РазрядностьДробнойЧасти	= Мин(?(ЗначениеДробнойЧасти = 0, 0, СтрДлина(ЗначениеДробнойЧасти) - 2), 5);

	ФорматРедактирования	= СтрШаблон(ШаблонФорматаРедактирования, РазрядностьДробнойЧасти);

	ПредставлениеПоказателя	= Формат(ЗначениеПоказателя, ФорматРедактирования);

	Пока РазрядностьДробнойЧасти > 0 И СтрЗаканчиваетсяНа(ПредставлениеПоказателя, "0") Цикл
		ПредставлениеПоказателя = Сред(ПредставлениеПоказателя, 1, СтрДлина(ПредставлениеПоказателя) - 1);
		РазрядностьДробнойЧасти = РазрядностьДробнойЧасти - 1;
	КонецЦикла;

	Возврат СтрШаблон(ШаблонФорматаРедактирования, РазрядностьДробнойЧасти);
КонецФункции

Процедура сОН_ИзменитьСвойствоЭлементаРасчетаПоказателей(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, ЗначениеСвойства)
	СписокИменЭлементов	= СтрШаблон("%1, %1%2", ИмяЭлемента, "Еще");
	ИменаЭлементов		= СтрРазделить(СписокИменЭлементов, ", ", Ложь);

	Для Каждого Имя Из ИменаЭлементов Цикл
		НайденныйЭлемент = ЭлементыФормы.Найти(Имя);

		Если НайденныйЭлемент <> Неопределено Тогда
			НайденныйЭлемент[ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ФайловаяСистема

Процедура ФС_ОткрытьФайл(
		РасположениеФайла,
		ОбработчикЗавершения = Неопределено,
		ИмяФайла = "",
		ПараметрыОткрытия = Неопределено) Экспорт

	Если ПараметрыОткрытия = Неопределено Тогда
		ПараметрыОткрытия = ФС_ПараметрыОткрытияФайла();
	КонецЕсли;

	ПараметрыОткрытия.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	Если ЭтоАдресВременногоХранилища(РасположениеФайла) Тогда
		Если ПустаяСтрока(ИмяФайла) Тогда
			ВызватьИсключение "Не указано имя файла.";
		КонецЕсли;

		ПутьКФайлу = ФС_ПолноеИмяВременногоФайла(ИмяФайла);
		ФС_СократитьПолноеИмяФайлаДоДопустимойДлиныNTFS(ПутьКФайлу);

		ПараметрыОткрытия.Вставить("ПутьКФайлу",						ПутьКФайлу);
		ПараметрыОткрытия.Вставить("АдресДвоичныхДанныхДляОбновления",	РасположениеФайла);
		ПараметрыОткрытия.Вставить("УдалятьПослеОбновленияДанных",		Истина);

		ПараметрыСохранения					= ФС_КонтекстОперации(РежимДиалогаВыбораФайла.Сохранение);
		ПараметрыСохранения.Интерактивно	= Ложь;

		ОписаниеОповещения = Новый ОписаниеОповещения(
			"сФС_ОткрытьФайлПослеСохранения", БазоваяПодсистемаКлиент, ПараметрыОткрытия);

		ФС_СохранитьФайл(ОписаниеОповещения, РасположениеФайла, ПутьКФайлу, ПараметрыСохранения);
	Иначе
		сФС_ОткрытьФайлПослеСохранения(
			Новый Структура("ПолноеИмя", РасположениеФайла), ПараметрыОткрытия);
	КонецЕсли;
КонецПроцедуры

Процедура ФС_ЗагрузитьФайл(ОбработчикЗавершения, ПараметрыЗагрузки = Неопределено, ИмяФайла = "", АдресВоВременномХранилище = "") Экспорт
	Если ПараметрыЗагрузки = Неопределено Тогда
		ПараметрыЗагрузки = ФС_ПараметрыЗагрузкиФайла();
	ИначеЕсли Не ПараметрыЗагрузки.Интерактивно И ПустаяСтрока(ИмяФайла) Тогда
		ВызватьИсключение "Не указано имя файла для загрузки в неинтерактивном режиме.";
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ПараметрыЗагрузки.ИдентификаторФормы) Тогда
		ПараметрыЗагрузки.ИдентификаторФормы = Новый УникальныйИдентификатор;
	КонецЕсли;

	ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ИмяФайла, АдресВоВременномХранилище);
	ПараметрыЗагрузки.Вставить("ЗагружаемыеФайлы", ОписаниеФайла);

	ПараметрыЗагрузки.Диалог.ПолноеИмяФайла     = ИмяФайла;
	ПараметрыЗагрузки.Диалог.МножественныйВыбор = Ложь;
	ФС_ПоказатьПомещениеФайла(ОбработчикЗавершения, ПараметрыЗагрузки);
КонецПроцедуры

Функция ФС_ПараметрыЗагрузкиФайла() Экспорт
	ПараметрыЗагрузки = ФС_КонтекстОперации(РежимДиалогаВыбораФайла.Открытие);
	ПараметрыЗагрузки.Вставить("ИдентификаторФормы",				Неопределено);
	ПараметрыЗагрузки.Вставить("ДействиеПередНачаломПомещенияФайлов",	Неопределено);

	Возврат ПараметрыЗагрузки;
КонецФункции

Функция ФС_ПараметрыОткрытияФайла() Экспорт
	Контекст = Новый Структура;
	Контекст.Вставить("Кодировка",			"");
	Контекст.Вставить("ДляРедактирования",	Ложь);

	Возврат Контекст;
КонецФункции

Функция ФС_КонтекстОперации(РежимДиалога) Экспорт
	Контекст = Новый Структура;
	Контекст.Вставить("Диалог",				Новый ДиалогВыбораФайла(РежимДиалога));
	Контекст.Вставить("Интерактивно",		Истина);
	Контекст.Вставить("ТекстПредложения",	"");

	Возврат Контекст;
КонецФункции

Процедура ФС_ПоказатьПомещениеФайла(ОбработчикЗавершения, ПараметрыПомещения)
	ПараметрыПомещения.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	ОписаниеОповещения = Новый ОписаниеОповещения("сФС_ПоказатьПомещениеФайлаПриПодключенииРасширенияРаботыСФайлами", БазоваяПодсистемаКлиент, ПараметрыПомещения);
	ФС_ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещения, ПараметрыПомещения.ТекстПредложения);
КонецПроцедуры

Функция ФС_ПолноеИмяВременногоФайла(Знач ИмяФайла)
#Если ВебКлиент Тогда
	Возврат ?(СтрНайти(ИмяФайла, ".") = 0,
		Формат(ОН_ДатаСеанса(), "ДФ=yyyyMMddHHmmss") + "." + ИмяФайла, ИмяФайла);
#Иначе
	ПозицияРасширения = СтрНайти(ИмяФайла, ".");
	Если ПозицияРасширения = 0 Тогда
		Возврат ПолучитьИмяВременногоФайла(ИмяФайла);
	Иначе
		Возврат КаталогВременныхФайлов() + ИмяФайла;
	КонецЕсли;
#КонецЕсли
КонецФункции

Процедура ФС_СократитьПолноеИмяФайлаДоДопустимойДлиныNTFS(ПолноеИмяФайла)
	ДопустимаяДлинаNTFS		= 260;
	ДлинаПолногоИмениФайла	= СтрДлина(ПолноеИмяФайла);

	Если ДлинаПолногоИмениФайла <= ДопустимаяДлинаNTFS Тогда
		Возврат;
	КонецЕсли;

	Файл = Новый Файл(ПолноеИмяФайла);

	ДлинаРасширения = СтрДлина(Файл.Расширение);
	ДлинаПути       = СтрДлина(Файл.Путь);

	// Анализируем длину пути к файлу, расширение, один символ в наименование
	Если ДлинаПути > ДопустимаяДлинаNTFS - ДлинаРасширения - 1 Тогда
		ВызватьИсключение СтрШаблон("Путь к файлу слишком длинный:
		|%1", ПолноеИмяФайла);
	КонецЕсли;

	ИмяБезРасширения = Сред(Файл.ИмяБезРасширения, 1, ДопустимаяДлинаNTFS - ДлинаПути - ДлинаРасширения - 1);

	ПолноеИмяФайла = Файл.Путь + ИмяБезРасширения + Файл.Расширение;
КонецПроцедуры

Процедура ФС_ПодключитьРасширениеДляРаботыСФайлами(
		ОписаниеОповещенияОЗакрытии,
		ТекстПредложения = "",
		ВозможноПродолжениеБезУстановки = Истина) Экспорт

	ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения(
		"сФС_НачатьПодключениеРасширенияРаботыСФайламиПриОтветеНаВопросОбУстановке", БазоваяПодсистемаКлиент,
		ОписаниеОповещенияОЗакрытии);

#Если Не ВебКлиент Тогда
	// В мобильном, тонком и толстом клиентах расширение подключено всегда.
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияЗавершение, "ПодключениеНеТребуется");

	Возврат;
#КонецЕсли

	Контекст = Новый Структура;
	Контекст.Вставить("ОписаниеОповещенияЗавершение",		ОписаниеОповещенияЗавершение);
	Контекст.Вставить("ТекстПредложения",					ТекстПредложения);
	Контекст.Вставить("ВозможноПродолжениеБезУстановки",	ВозможноПродолжениеБезУстановки);

	Оповещение = Новый ОписаниеОповещения(
		"сФС_НачатьПодключениеРасширенияРаботыСФайламиПриУстановкеРасширения", БазоваяПодсистемаКлиент, Контекст);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
КонецПроцедуры

Процедура ФС_СохранитьФайл(ОбработчикЗавершения, АдресВоВременномХранилище, ИмяФайла = "",
	ПараметрыСохранения = Неопределено) Экспорт

	Если ПараметрыСохранения = Неопределено Тогда
		ПараметрыСохранения = ФС_КонтекстОперации(РежимДиалогаВыбораФайла.Сохранение);
	КонецЕсли;

	ДанныеФайла = Новый ОписаниеПередаваемогоФайла(ИмяФайла, АдресВоВременномХранилище);

	СохраняемыеФайлы = Новый Массив;
	СохраняемыеФайлы.Добавить(ДанныеФайла);

	ФС_ПоказатьПолучениеФайлов(ОбработчикЗавершения, СохраняемыеФайлы, ПараметрыСохранения)
КонецПроцедуры

Процедура ФС_ПоказатьПолучениеФайлов(ОбработчикЗавершения, СохраняемыеФайлы, ПараметрыПолучения)
	ПараметрыПолучения.Вставить("ПолучаемыеФайлы",      СохраняемыеФайлы);
	ПараметрыПолучения.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"сФС_ПоказатьПолучениеФайловПриПодключенииРасширенияРаботыСФайлами", БазоваяПодсистемаКлиент, ПараметрыПолучения);
	ФС_ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещения, ПараметрыПолучения.ТекстПредложения);
КонецПроцедуры

Процедура ФС_ОткрытьПроводник(ПутьККаталогуИлиФайлу) Экспорт
	ФайлИнфо = Новый Файл(ПутьККаталогуИлиФайлу);

	Контекст = Новый Структура;
	Контекст.Вставить("ФайлИнфо", ФайлИнфо);

	Оповещение = Новый ОписаниеОповещения("сФС_ОткрытьПроводникПослеПроверкиРасширенияРаботыСФайлами", БазоваяПодсистемаКлиент, Контекст);

	ТекстПредложения = "Для открытия папки установите расширение для работы с 1С:Предприятием.";
	ФС_ПодключитьРасширениеДляРаботыСФайлами(Оповещение, ТекстПредложения, Ложь);
КонецПроцедуры

Процедура ФС_ОткрытьНавигационнуюСсылку(НавигационнаяСсылка, Знач Оповещение = Неопределено) Экспорт
	Контекст = Новый Структура;
	Контекст.Вставить("НавигационнаяСсылка",	НавигационнаяСсылка);
	Контекст.Вставить("Оповещение",				Оповещение);

	ОписаниеОшибки = СтрШаблон(
		"Не удалось перейти по ссылке ""%1"" по причине:
		           |Неверно задана навигационная ссылка.",
		НавигационнаяСсылка);

	Если Не сФС_ЭтоДопустимаяСсылка(НавигационнаяСсылка) Тогда
		сФС_ОткрытьНавигационнуюСсылкуОповеститьОбОшибке(ОписаниеОшибки, Контекст);

	ИначеЕсли сФС_ЭтоВебСсылка(НавигационнаяСсылка)
		Или сОН_ЭтоНавигационнаяСсылка(НавигационнаяСсылка) Тогда

		Попытка
			ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);

			Если Оповещение <> Неопределено Тогда
				ПриложениеЗапущено = Истина;
				ВыполнитьОбработкуОповещения(Оповещение, ПриложениеЗапущено);
			КонецЕсли;
		Исключение
			сФС_ОткрытьНавигационнуюСсылкуОповеститьОбОшибке(ОписаниеОшибки, Контекст);
		КонецПопытки;
	ИначеЕсли СтрНачинаетсяС(НавигационнаяСсылка, "v8help://") Тогда
		ОткрытьСправку(НавигационнаяСсылка);
	Иначе
		Оповещение = Новый ОписаниеОповещения("сФС_ОткрытьНавигационнуюСсылкуПослеПроверкиРасширенияРаботыСФайлами", БазоваяПодсистемаКлиент, Контекст);

		ТекстПредложения = СтрШаблон("Для открытия ссылки ""%1"" установите расширение для работы с 1С:Предприятием.", НавигационнаяСсылка);
		ФС_ПодключитьРасширениеДляРаботыСФайлами(Оповещение, ТекстПредложения, Ложь);
	КонецЕсли;
КонецПроцедуры

Процедура ФС_ВыбратьКаталог(ОбработчикЗавершения, Заголовок = "", Каталог = "") Экспорт
	Контекст = Новый Структура;
	Контекст.Вставить("ОбработчикЗавершения",	ОбработчикЗавершения);
	Контекст.Вставить("Заголовок",				Заголовок);
	Контекст.Вставить("Каталог",				Каталог);

	ОписаниеОповещения = Новый ОписаниеОповещения("сФС_ВыбратьКаталогПриПодключенииРасширенияРаботыСФайлами", БазоваяПодсистемаКлиент, Контекст);
	ФС_ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещения);
КонецПроцедуры

Процедура ФС_ПоказатьДиалогВыбора(ОбработчикЗавершения, Диалог) Экспорт
	Контекст = Новый Структура;
	Контекст.Вставить("ОбработчикЗавершения",	ОбработчикЗавершения);
	Контекст.Вставить("Диалог",					Диалог);

	ОписаниеОповещения = Новый ОписаниеОповещения("сФС_ПоказатьДиалогВыбораПриПодключенииРасширенияРаботыСФайлами", БазоваяПодсистемаКлиент, Контекст);
	ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещения, , Ложь);
КонецПроцедуры

Процедура ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещенияОЗакрытии, ТекстПредложения = "", ВозможноПродолжениеБезУстановки = Истина) Экспорт
	ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("сФС_НачатьПодключениеРасширенияРаботыСФайламиПриОтветеНаВопросОбУстановке", БазоваяПодсистемаКлиент, ОписаниеОповещенияОЗакрытии);

#Если Не ВебКлиент Тогда
	// В мобильном, тонком и толстом клиентах расширение подключено всегда.
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияЗавершение, "ПодключениеНеТребуется");

	Возврат;
#КонецЕсли

	Контекст = Новый Структура;
	Контекст.Вставить("ОписаниеОповещенияЗавершение",		ОписаниеОповещенияЗавершение);
	Контекст.Вставить("ТекстПредложения",					ТекстПредложения);
	Контекст.Вставить("ВозможноПродолжениеБезУстановки",	ВозможноПродолжениеБезУстановки);

	Оповещение = Новый ОписаниеОповещения("сФС_НачатьПодключениеРасширенияРаботыСФайламиПриУстановкеРасширения", БазоваяПодсистемаКлиент, Контекст);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
КонецПроцедуры

Процедура сФС_ОткрытьНавигационнуюСсылкуПослеПроверкиРасширенияРаботыСФайлами(РасширениеПодключено, Контекст) Экспорт
	НавигационнаяСсылка = Контекст.НавигационнаяСсылка;

	Если РасширениеПодключено Тогда
		Оповещение          = Контекст.Оповещение;
		ДождатьсяЗавершения = (Оповещение <> Неопределено);

		Оповещение = Новый ОписаниеОповещения(
			"сФС_ОткрытьНавигационнуюСсылкуПослеЗапускаПриложения", ЭтотОбъект, Контекст,
			"сФС_ОткрытьНавигационнуюСсылкуПриОбработкеОшибки", ЭтотОбъект);
		НачатьЗапускПриложения(Оповещение, НавигационнаяСсылка,, ДождатьсяЗавершения);
	Иначе
		ОписаниеОшибки = СтрШаблон(
			"Расширение для работы с файлами не установлено, переход по ссылке ""%1"" невозможен.",
			НавигационнаяСсылка);
		сФС_ОткрытьНавигационнуюСсылкуОповеститьОбОшибке(ОписаниеОшибки, Контекст);
	КонецЕсли;

	// АПК:534-вкл
КонецПроцедуры

Процедура сФС_ОткрытьНавигационнуюСсылкуПослеЗапускаПриложения(КодВозврата, Контекст) Экспорт
	Оповещение = Контекст.Оповещение;

	Если Оповещение <> Неопределено Тогда
		ПриложениеЗапущено = (КодВозврата = 0 Или КодВозврата = Неопределено);
		ВыполнитьОбработкуОповещения(Оповещение, ПриложениеЗапущено);
	КонецЕсли;
КонецПроцедуры

Процедура сФС_ОткрытьНавигационнуюСсылкуПриОбработкеОшибки(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	СтандартнаяОбработка = Ложь;
	сФС_ОткрытьНавигационнуюСсылкуОповеститьОбОшибке("", Контекст);
КонецПроцедуры

Процедура сФС_ОткрытьНавигационнуюСсылкуОповеститьОбОшибке(ОписаниеОшибки, Контекст) Экспорт
	Оповещение = Контекст.Оповещение;

	Если Оповещение = Неопределено Тогда
		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	Иначе
		ПриложениеЗапущено = Ложь;
		ВыполнитьОбработкуОповещения(Оповещение, ПриложениеЗапущено);
	КонецЕсли;
КонецПроцедуры

Функция сФС_ЭтоДопустимаяСсылка(Строка) Экспорт
	Возврат СтрНачинаетсяС(Строка, "e1c:")
		Или СтрНачинаетсяС(Строка, "e1cib/")
		Или СтрНачинаетсяС(Строка, "e1ccs/")
		Или СтрНачинаетсяС(Строка, "v8help:")
		Или СтрНачинаетсяС(Строка, "http:")
		Или СтрНачинаетсяС(Строка, "https:")
		Или СтрНачинаетсяС(Строка, "mailto:")
		Или СтрНачинаетсяС(Строка, "tel:")
		Или СтрНачинаетсяС(Строка, "skype:")
		Или СтрНачинаетсяС(Строка, "market:")
		Или СтрНачинаетсяС(Строка, "itms-apps:");
КонецФункции

Функция сФС_ЭтоВебСсылка(Строка) Экспорт
	Возврат СтрНачинаетсяС(Строка, "http://")  // обычное соединение.
		Или СтрНачинаетсяС(Строка, "https://");// защищенное соединение.
КонецФункции

Процедура сФС_ОткрытьФайлПослеСохранения(СохраненныеФайлы, ПараметрыОткрытия) Экспорт
	Если СохраненныеФайлы = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ПараметрыОткрытия.ОбработчикЗавершения, Ложь);
	Иначе
		ОписаниеФайла = ?(ТипЗнч(СохраненныеФайлы) = Тип("Массив"), СохраненныеФайлы[0], СохраненныеФайлы);
		ПараметрыОткрытия.Вставить("ПутьКФайлу", ОписаниеФайла.ПолноеИмя);
		ОбработчикЗавершения = Новый ОписаниеОповещения(
			"сФС_ОткрытьФайлПослеЗавершенияРедактирования", ЭтотОбъект, ПараметрыОткрытия);

		сФС_ОткрытьФайлВПрограммеПросмотра(ОписаниеФайла.ПолноеИмя, ОбработчикЗавершения, ПараметрыОткрытия.ДляРедактирования);
	КонецЕсли;
КонецПроцедуры

Процедура сФС_ОткрытьФайлПослеЗавершенияРедактирования(ПриложениеЗапущено, ПараметрыОткрытия) Экспорт
	Если ПриложениеЗапущено
		И ПараметрыОткрытия.Свойство("АдресДвоичныхДанныхДляОбновления") Тогда

		Оповещение = Новый ОписаниеОповещения(
			"сФС_ОткрытьФайлПослеОбновленияДанныхВХранилище", ЭтотОбъект, ПараметрыОткрытия);

		НачатьПомещениеФайла(Оповещение, ПараметрыОткрытия.АдресДвоичныхДанныхДляОбновления,
			ПараметрыОткрытия.ПутьКФайлу, Ложь);
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыОткрытия.ОбработчикЗавершения, ПриложениеЗапущено);
	КонецЕсли;
КонецПроцедуры

Процедура сФС_ОткрытьФайлПослеОбновленияДанныхВХранилище(ДанныеОбновлены, АдресДанных, ИмяФайла,
		ПараметрыОткрытия) Экспорт

	Если ПараметрыОткрытия.Свойство("УдалятьПослеОбновленияДанных") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДанныеОбновлены",		ДанныеОбновлены);
		ДополнительныеПараметры.Вставить("ПараметрыОткрытия",	ПараметрыОткрытия);

		ОписаниеОповещения = Новый ОписаниеОповещения(
			"сФС_ОткрытьФайлПослеУдаленияВременногоФайла", ЭтотОбъект, ДополнительныеПараметры);

		НачатьУдалениеФайлов(ОписаниеОповещения, ИмяФайла);
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыОткрытия.ОбработчикЗавершения, ДанныеОбновлены);
	КонецЕсли;
КонецПроцедуры

Процедура сФС_ОткрытьФайлПослеУдаленияВременногоФайла(ДополнительныеПараметры) Экспорт
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ПараметрыОткрытия.ОбработчикЗавершения,
		ДополнительныеПараметры.ДанныеОбновлены);
КонецПроцедуры

Процедура сФС_ОткрытьФайлВПрограммеПросмотра(ПутьКФайлу, Знач Оповещение = Неопределено,
		Знач ДляРедактирования = Ложь)

	ФайлИнфо = Новый Файл(ПутьКФайлу);

	Контекст = Новый Структура;
	Контекст.Вставить("ФайлИнфо",          ФайлИнфо);
	Контекст.Вставить("Оповещение",        Оповещение);
	Контекст.Вставить("ДляРедактирования", ДляРедактирования);

	Оповещение = Новый ОписаниеОповещения("сФС_ОткрытьФайлВПрограммеПросмотраПослеПроверкиРасширенияРаботыСФайлами", ЭтотОбъект, Контекст);

	ТекстПредложения = "Для открытия файла установите расширение для работы с 1С:Предприятием.";
	ФС_ПодключитьРасширениеДляРаботыСФайлами(Оповещение, ТекстПредложения, Ложь);
КонецПроцедуры

Процедура сФС_ОткрытьФайлВПрограммеПросмотраПослеПроверкиРасширенияРаботыСФайлами(РасширениеПодключено, Контекст) Экспорт
	ФайлИнфо = Контекст.ФайлИнфо;
	Если РасширениеПодключено Тогда
		Оповещение = Новый ОписаниеОповещения(
			"сФС_ОткрытьФайлВПрограммеПросмотраПослеПроверкиСуществования", ЭтотОбъект, Контекст,
			"сФС_ОткрытьФайлВПрограммеПросмотраПриОбработкеОшибки", ЭтотОбъект);
		ФайлИнфо.НачатьПроверкуСуществования(Оповещение);
	Иначе
		ОписаниеОшибки = "Не установлено расширение для работы с 1С:Предприятием, открытие файла недоступно.";
		сФС_ОткрытьФайлВПрограммеПросмотраОповеститьОбОшибке(ОписаниеОшибки, Контекст);
	КонецЕсли;
КонецПроцедуры

Процедура сФС_ОткрытьФайлВПрограммеПросмотраПослеПроверкиСуществования(Существует, Контекст) Экспорт
	ФайлИнфо = Контекст.ФайлИнфо;
	Если Существует Тогда
		Оповещение = Новый ОписаниеОповещения(
			"сФС_ОткрытьФайлВПрограммеПросмотраПослеПроверкиЭтоФайл", ЭтотОбъект, Контекст,
			"сФС_ОткрытьФайлВПрограммеПросмотраПриОбработкеОшибки", ЭтотОбъект);
		ФайлИнфо.НачатьПроверкуЭтоФайл(Оповещение);
	Иначе
		ОписаниеОшибки = СтрШаблон(
			"ru = 'Не существует открываемый файл:
			           |%1",
			ФайлИнфо.ПолноеИмя);
		сФС_ОткрытьФайлВПрограммеПросмотраОповеститьОбОшибке(ОписаниеОшибки, Контекст);
	КонецЕсли;
КонецПроцедуры

Процедура сФС_ОткрытьФайлВПрограммеПросмотраПослеПроверкиЭтоФайл(ЭтоФайл, Контекст) Экспорт
	// АПК:534-выкл методы безопасного запуска обеспечиваются этой функцией

	ФайлИнфо = Контекст.ФайлИнфо;
	Если ЭтоФайл Тогда
		Если ПустаяСтрока(ФайлИнфо.Расширение) Тогда
			ОписаниеОшибки = СтрШаблон(
				"Имя файла не содержит расширения:
				           |%1",
				ФайлИнфо.ПолноеИмя);

			сФС_ОткрытьФайлВПрограммеПросмотраОповеститьОбОшибке(ОписаниеОшибки, Контекст);

			Возврат;
		КонецЕсли;

		Если сФС_ЭтоРасширениеИсполняемогоФайла(ФайлИнфо.Расширение) Тогда
			ОписаниеОшибки = СтрШаблон(
				"Исполняемые файлы открывать запрещено:
				           |%1",
				ФайлИнфо.ПолноеИмя);

			сФС_ОткрытьФайлВПрограммеПросмотраОповеститьОбОшибке(ОписаниеОшибки, Контекст);

			Возврат;
		КонецЕсли;

		Оповещение          = Контекст.Оповещение;
		ДождатьсяЗавершения = Контекст.ДляРедактирования;

		Оповещение = Новый ОписаниеОповещения(
			"сФС_ОткрытьФайлВПрограммеПросмотраПослеЗапускаПриложения", ЭтотОбъект, Контекст,
			"сФС_ОткрытьФайлВПрограммеПросмотраПриОбработкеОшибки", ЭтотОбъект);
		НачатьЗапускПриложения(Оповещение, ФайлИнфо.ПолноеИмя,, ДождатьсяЗавершения);
	Иначе
		ОписаниеОшибки = СтрШаблон(
			"Не существует открываемый файл:
			           |%1",
			ФайлИнфо.ПолноеИмя);

		сФС_ОткрытьФайлВПрограммеПросмотраОповеститьОбОшибке(ОписаниеОшибки, Контекст);
	КонецЕсли;
	// АПК:534-вкл
КонецПроцедуры

Процедура сФС_ОткрытьФайлВПрограммеПросмотраПослеЗапускаПриложения(КодВозврата, Контекст) Экспорт
	Оповещение = Контекст.Оповещение;

	Если Оповещение <> Неопределено Тогда
		ПриложениеЗапущено = (КодВозврата = 0);
		ВыполнитьОбработкуОповещения(Оповещение, ПриложениеЗапущено);
	КонецЕсли;
КонецПроцедуры

Процедура сФС_ОткрытьФайлВПрограммеПросмотраПриОбработкеОшибки(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	СтандартнаяОбработка = Ложь;
	сФС_ОткрытьФайлВПрограммеПросмотраОповеститьОбОшибке("", Контекст);
КонецПроцедуры

Процедура сФС_ОткрытьФайлВПрограммеПросмотраОповеститьОбОшибке(ОписаниеОшибки, Контекст)
	Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
		ПоказатьПредупреждение(, ОписаниеОшибки);
	КонецЕсли;

	ПриложениеЗапущено = Ложь;
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, ПриложениеЗапущено);
КонецПроцедуры

Функция сФС_ЭтоРасширениеИсполняемогоФайла(Знач Расширение)
	Расширение = ВРег(Расширение);

	// Windows
	Возврат Расширение = ".BAT" // Batch File
		Или Расширение = ".BIN" // Binary Executable
		Или Расширение = ".CMD" // Command Script
		Или Расширение = ".COM" // Приложение MS-DOS
		Или Расширение = ".CPL" // Control Panel Extension
		Или Расширение = ".EXE" // Исполняемый файл
		Или Расширение = ".GADGET" // Binary Executable
		Или Расширение = ".HTA" // HTML Application
		Или Расширение = ".INF1" // Setup Information File
		Или Расширение = ".INS" // Internet Communication Settings
		Или Расширение = ".INX" // InstallShield Compiled Script
		Или Расширение = ".ISU" // InstallShield Uninstaller Script
		Или Расширение = ".JOB" // Windows Task Scheduler Job File
		Или Расширение = ".LNK" // File Shortcut
		Или Расширение = ".MSC" // Microsoft Common Console Document
		Или Расширение = ".MSI" // Windows Installer Package
		Или Расширение = ".MSP" // Windows Installer Patch
		Или Расширение = ".MST" // Windows Installer Setup Transform File
		Или Расширение = ".OTM" // Макрос Microsoft Outlook
		Или Расширение = ".PAF" // Portable Application Installer File
		Или Расширение = ".PIF" // Program Information File
		Или Расширение = ".PS1" // Windows PowerShell Cmdlet
		Или Расширение = ".REG" // Registry Data File
		Или Расширение = ".RGS" // Registry Script
		Или Расширение = ".SCT" // Windows Scriptlet
		Или Расширение = ".SHB" // Windows Document Shortcut
		Или Расширение = ".SHS" // Shell Scrap Object
		Или Расширение = ".U3P" // U3 Smart Application
		Или Расширение = ".VB"  // VBScript File
		Или Расширение = ".VBE" // VBScript Encoded Script
		Или Расширение = ".VBS" // VBScript File
		Или Расширение = ".VBSCRIPT" // Visual Basic Script
		Или Расширение = ".WS"  // Windows Script
		Или Расширение = ".WSF" // Windows Script
	// Linux
		Или Расширение = ".CSH" // C Shell Script
		Или Расширение = ".KSH" // Unix Korn Shell Script
		Или Расширение = ".OUT" // Исполняемый файл
		Или Расширение = ".RUN" // Исполняемый файл
		Или Расширение = ".SH"  // Shell Script
	// macOS
		Или Расширение = ".ACTION" // Automator Action
		Или Расширение = ".APP" // Исполняемый файл
		Или Расширение = ".COMMAND" // Terminal Command
		Или Расширение = ".OSX" // Исполняемый файл
		Или Расширение = ".WORKFLOW" // Automator Workflow
	// Прочие
		Или Расширение = ".AIR" // Установочный пакет Adobe AIR
		Или Расширение = ".COFFIE" // Сценарий CoffeeScript (JavaScript)
		Или Расширение = ".JAR" // Архив Java
		Или Расширение = ".JS"  // JScript File
		Или Расширение = ".JSE" // JScript Encoded File
		Или Расширение = ".PLX" // Исполняемый файл Perl
		Или Расширение = ".PYC" // Компилированный файл Python
		Или Расширение = ".PYO"; // Оптимизированный код Python
КонецФункции

Процедура сФС_НачатьПодключениеРасширенияРаботыСФайламиПриОтветеНаВопросОбУстановке(Действие, ОповещениеОЗакрытии) Экспорт
	РасширениеПодключено = (Действие = "РасширениеПодключено" Или Действие = "ПодключениеНеТребуется");

#Если ВебКлиент Тогда
	Если Действие = "БольшеНеПредлагать"
		Или Действие = "РасширениеПодключено" Тогда

		СистемнаяИнформация = Новый СистемнаяИнформация;
		ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
		ПараметрыПриложения["СтандартныеПодсистемы.ПредлагатьУстановкуРасширенияРаботыСФайлами"] = Ложь;
		БазоваяПодсистемаВызовСервера.ОН_ХранилищеОбщихНастроекСохранить(
			"НастройкиПрограммы/ПредлагатьУстановкуРасширенияРаботыСФайлами", ИдентификаторКлиента, Ложь);
	КонецЕсли;
#КонецЕсли

	ВыполнитьОбработкуОповещения(ОповещениеОЗакрытии, РасширениеПодключено);
КонецПроцедуры

Функция сФС_ДоступноРасширениеРаботыСФайлами()
	СистемнаяИнформация = Новый СистемнаяИнформация;

	Возврат  БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения,"8.3.16.0") И СтрНайти(СистемнаяИнформация.ИнформацияПрограммыПросмотра, "Chrome") > 0;
КонецФункции

Процедура сФС_ПоказатьДиалогВыбораПриПодключенииРасширенияРаботыСФайлами(РасширениеПодключено, Контекст) Экспорт
	Если Не РасширениеПодключено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения, "");

		Возврат;
	КонецЕсли;

	Контекст.Диалог.Показать(Контекст.ОбработчикЗавершения);
КонецПроцедуры

Процедура сФС_НачатьПодключениеРасширенияРаботыСФайламиПриУстановкеРасширения(Подключено, Контекст) Экспорт
	// Если расширение и так уже подключено, незачем про него спрашивать.
	Если Подключено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОписаниеОповещенияЗавершение, "ПодключениеНеТребуется");

		Возврат;
	КонецЕсли;

	// В веб клиенте под macOS расширение доступно только в браузере Chrome
	// при версии платформы больше 8.3.16.
	Если ОН_ЭтоMacOSКлиент() И НЕ сФС_ДоступноРасширениеРаботыСФайлами() Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОписаниеОповещенияЗавершение);

		Возврат;
	КонецЕсли;

	ИмяПараметра = "СтандартныеПодсистемы.ПредлагатьУстановкуРасширенияРаботыСФайлами";
	ПервоеОбращениеЗаСеанс = ПараметрыПриложения[ИмяПараметра] = Неопределено;
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, сФС_ПредлагатьУстановкуРасширенияРаботыСФайлами());
	КонецЕсли;

	ПредлагатьУстановкуРасширенияРаботыСФайлами = ПараметрыПриложения[ИмяПараметра] Или ПервоеОбращениеЗаСеанс;
	Если Контекст.ВозможноПродолжениеБезУстановки И Не ПредлагатьУстановкуРасширенияРаботыСФайлами Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОписаниеОповещенияЗавершение);
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекстПредложения",					Контекст.ТекстПредложения);
		ПараметрыФормы.Вставить("ВозможноПродолжениеБезУстановки",	Контекст.ВозможноПродолжениеБезУстановки);
		ОткрытьФорму(
			"ОбщаяФорма.ВопросОбУстановкеРасширенияРаботыСФайлами",
			ПараметрыФормы,,,,,
			Контекст.ОписаниеОповещенияЗавершение);
	КонецЕсли;
КонецПроцедуры

Функция сФС_ПредлагатьУстановкуРасширенияРаботыСФайлами()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	Возврат БазоваяПодсистемаВызовСервера.ОН_ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы/ПредлагатьУстановкуРасширенияРаботыСФайлами", ИдентификаторКлиента, Истина);
КонецФункции

Процедура сФС_ПоказатьПолучениеФайловПриПодключенииРасширенияРаботыСФайлами(РасширениеПодключено, Контекст) Экспорт
	Если РасширениеПодключено Тогда
		Если Контекст.Интерактивно Тогда
			сФС_ПоказатьПолучениеФайловВКаталог(Контекст);
		ИначеЕсли Не ПустаяСтрока(Контекст.Диалог.Каталог)Тогда
			Контекст.Диалог = Контекст.Диалог.Каталог;
			сФС_ПоказатьПолучениеФайловВКаталог(Контекст);
		Иначе
			ОповещениеОПолученииКаталога = Новый ОписаниеОповещения(
				"сФС_ПоказатьПолучениеФайловПослеПолученияКаталогаВременныхФайлов", ЭтотОбъект, Контекст);
			НачатьПолучениеКаталогаВременныхФайлов(ОповещениеОПолученииКаталога);
		КонецЕсли;
	Иначе
		Для Каждого ПолучаемыйФайл Из Контекст.ПолучаемыеФайлы Цикл
			ПолучитьФайл(ПолучаемыйФайл.Хранение, ПолучаемыйФайл.Имя, Истина);
		КонецЦикла;

		Если Контекст.ОбработчикЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения, Неопределено);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура сФС_ПоказатьПолучениеФайловПослеПолученияКаталогаВременныхФайлов(ИмяКаталогаВременныхФайлов, Контекст) Экспорт
	Контекст.Диалог = ИмяКаталогаВременныхФайлов;
	сФС_ПоказатьПолучениеФайловВКаталог(Контекст);
КонецПроцедуры

Процедура сФС_ПоказатьПолучениеФайловВКаталог(Контекст)
	ОповещениеОЗавершении = Новый ОписаниеОповещения("сФС_ОповеститьОЗавершенииПолученияФайлов", ЭтотОбъект, Контекст);
	НачатьПолучениеФайлов(ОповещениеОЗавершении, Контекст.ПолучаемыеФайлы, Контекст.Диалог, Контекст.Интерактивно);
КонецПроцедуры

Процедура сФС_ОповеститьОЗавершенииПолученияФайлов(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	Если ДополнительныеПараметры.ОбработчикЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикЗавершения, ПолученныеФайлы);
	КонецЕсли;
КонецПроцедуры

Процедура сФС_ОткрытьПроводникПослеПроверкиРасширенияРаботыСФайлами(РасширениеПодключено, Контекст) Экспорт
	ФайлИнфо = Контекст.ФайлИнфо;

	Если РасширениеПодключено Тогда
		Оповещение = Новый ОписаниеОповещения("сФС_ОткрытьПроводникПослеПроверкиСуществования", ЭтотОбъект, Контекст, "сФС_ОткрытьПроводникПриОбработкеОшибки", ЭтотОбъект);
		ФайлИнфо.НачатьПроверкуСуществования(Оповещение);
	Иначе
		ОписаниеОшибки = "Для того чтобы открыть папку, установите расширение для работы с 1С:Предприятием.";
		сФС_ОткрытьПроводникОповеститьОбОшибке(ОписаниеОшибки, Контекст);
	КонецЕсли;
КонецПроцедуры

Процедура сФС_ОткрытьПроводникПослеПроверкиСуществования(Существует, Контекст) Экспорт
	ФайлИнфо = Контекст.ФайлИнфо;

	Если Существует Тогда
		Оповещение = Новый ОписаниеОповещения(
			"сФС_ОткрытьПроводникПослеПроверкиЭтоФайл", ЭтотОбъект, Контекст,
			"сФС_ОткрытьПроводникПриОбработкеОшибки", ЭтотОбъект);
		ФайлИнфо.НачатьПроверкуЭтоФайл(Оповещение);
	Иначе
		ОписаниеОшибки = СтрШаблон(
			"Каталог, который требуется открыть в проводнике, не существует:
			           |""%1""",
			ФайлИнфо.ПолноеИмя);
		сФС_ОткрытьПроводникОповеститьОбОшибке(ОписаниеОшибки, Контекст);
	КонецЕсли;
КонецПроцедуры

Процедура сФС_ОткрытьПроводникПослеПроверкиЭтоФайл(ЭтоФайл, Контекст) Экспорт
	// АПК:534-выкл методы безопасного запуска обеспечиваются этой функцией

	ФайлИнфо = Контекст.ФайлИнфо;

	Оповещение = Новый ОписаниеОповещения(,,, "сФС_ОткрытьПроводникПриОбработкеОшибки", ЭтотОбъект);
	Если ЭтоФайл Тогда
		Если ОН_ЭтоWindowsКлиент() Тогда
			НачатьЗапускПриложения(Оповещение, "explorer.exe /select, """ + ФайлИнфо.ПолноеИмя + """");
		Иначе // Это Linux или macOS.
			НачатьЗапускПриложения(Оповещение, "file:///" + ФайлИнфо.Путь);
		КонецЕсли;
	Иначе // Это каталог.
		НачатьЗапускПриложения(Оповещение, "file:///" + ФайлИнфо.ПолноеИмя);
	КонецЕсли;

	// АПК:534-вкл
КонецПроцедуры

Процедура сФС_ОткрытьПроводникПриОбработкеОшибки(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	СтандартнаяОбработка = Ложь;
	сФС_ОткрытьПроводникОповеститьОбОшибке("", Контекст);
КонецПроцедуры

Процедура сФС_ОткрытьПроводникОповеститьОбОшибке(ОписаниеОшибки, Контекст)
	Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
		ПоказатьПредупреждение(, ОписаниеОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура сФС_ПоказатьПомещениеФайлаПриПодключенииРасширенияРаботыСФайлами(РасширениеПодключено, Контекст) Экспорт
	Диалог               = Контекст.Диалог;
	Интерактивно         = Контекст.Интерактивно;
	ЗагружаемыеФайлы     = Контекст.ЗагружаемыеФайлы;
	ИдентификаторФормы   = Контекст.ИдентификаторФормы;
	ОбработчикЗавершения = Контекст.ОбработчикЗавершения;

	ПараметрыОбработкиРезультата = Новый Структура;
	ПараметрыОбработкиРезультата.Вставить("МножественныйВыбор",   Диалог.МножественныйВыбор);
	ПараметрыОбработкиРезультата.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);

	Если Не РасширениеПодключено И Не Интерактивно Тогда
		ВызватьИсключение "Невозможно загрузить файл без установленного расширения работы с файлами.";
	КонецЕсли;

	Если Диалог.МножественныйВыбор Тогда
		ПомещаемыеФайлы		= ?(Интерактивно, Диалог, ЗагружаемыеФайлы);
		ОписаниеОповещения	= Новый ОписаниеОповещения("сФС_ОбработатьРезультатПомещенияФайлов", ЭтотОбъект, ПараметрыОбработкиРезультата);

		Если ЗначениеЗаполнено(ИдентификаторФормы) Тогда
			НачатьПомещениеФайлов(ОписаниеОповещения, ПомещаемыеФайлы, Интерактивно, ИдентификаторФормы, Контекст.ДействиеПередНачаломПомещенияФайлов);
		Иначе
			НачатьПомещениеФайлов(ОписаниеОповещения, ПомещаемыеФайлы, Интерактивно,, Контекст.ДействиеПередНачаломПомещенияФайлов);
		КонецЕсли;
	Иначе
		ПомещаемыйФайл		= ?(Интерактивно, Диалог, ЗагружаемыеФайлы.Имя);
		ОписаниеОповещения	= Новый ОписаниеОповещения("сФС_ОбработатьРезультатПомещенияФайла", ЭтотОбъект, ПараметрыОбработкиРезультата);

		Если ЗначениеЗаполнено(ИдентификаторФормы) Тогда
			НачатьПомещениеФайла(ОписаниеОповещения, ЗагружаемыеФайлы.Хранение, ПомещаемыйФайл, Интерактивно, ИдентификаторФормы, Контекст.ДействиеПередНачаломПомещенияФайлов);
		Иначе
			НачатьПомещениеФайла(ОписаниеОповещения, ЗагружаемыеФайлы.Хранение, ПомещаемыйФайл, Интерактивно, , Контекст.ДействиеПередНачаломПомещенияФайлов);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура сФС_ОбработатьРезультатПомещенияФайлов(ПомещенныеФайлы, ПараметрыОбработкиРезультата) Экспорт
	сФС_ОбработатьРезультатПомещенияФайла(ПомещенныеФайлы <> Неопределено, ПомещенныеФайлы, Неопределено, ПараметрыОбработкиРезультата);
КонецПроцедуры

Процедура сФС_ОбработатьРезультатПомещенияФайла(ВыборВыполнен, АдресИлиРезультатВыбора, ВыбранноеИмяФайла, ПараметрыОбработкиРезультата) Экспорт
	Если ВыборВыполнен = Истина Тогда
		Если ТипЗнч(АдресИлиРезультатВыбора) = Тип("Массив") Тогда
			ПомещенныеФайлы = Новый Массив;
			Для Каждого ПомещаемыйФайл Из АдресИлиРезультатВыбора Цикл
				СвойстваФайла = Новый Структура("Имя, ПолноеИмя, Хранение");
				ЗаполнитьЗначенияСвойств(СвойстваФайла, ПомещаемыйФайл);

				СвойстваФайла.Вставить("ИмяФайла", ПомещаемыйФайл.Имя);
				Если Не ПустаяСтрока(ПомещаемыйФайл.ПолноеИмя) Тогда
					СвойстваФайла.Имя = ПомещаемыйФайл.ПолноеИмя;
				КонецЕсли;

				ПомещенныеФайлы.Добавить(СвойстваФайла);
			КонецЦикла;
		Иначе
			ПомещенныеФайлы = Новый Структура;
			ПомещенныеФайлы.Вставить("Хранение", АдресИлиРезультатВыбора);
			ПомещенныеФайлы.Вставить("Имя",      ВыбранноеИмяФайла);
		КонецЕсли;
	Иначе
		ПомещенныеФайлы = Неопределено;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(ПараметрыОбработкиРезультата.ОбработчикЗавершения, ПомещенныеФайлы);
КонецПроцедуры

Процедура сФС_ВыбратьКаталогПриПодключенииРасширенияРаботыСФайлами(РасширениеПодключено, Контекст) Экспорт
	Если Не РасширениеПодключено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения, "");

		Возврат;
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("сФС_ВыбратьКаталогПриОкончанииВыбора", ЭтотОбъект, Контекст.ОбработчикЗавершения);

	Диалог						= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.МножественныйВыбор	= Ложь;
	Если Не ПустаяСтрока(Контекст.Заголовок) Тогда
		Диалог.Заголовок = Контекст.Заголовок;
	КонецЕсли;
	Если Не ПустаяСтрока(Контекст.Каталог) Тогда
		Диалог.Каталог = Контекст.Каталог;
	КонецЕсли;

	Диалог.Показать(ОписаниеОповещения);
КонецПроцедуры

Процедура сФС_ВыбратьКаталогПриОкончанииВыбора(МассивКаталогов, ОбработчикЗавершения) Экспорт
	ПутьККаталогу =  ?(МассивКаталогов = Неопределено Или МассивКаталогов.Количество() = 0, "", МассивКаталогов[0]);

	ВыполнитьОбработкуОповещения(ОбработчикЗавершения, ПутьККаталогу);
КонецПроцедуры

#КонецОбласти

#Область ЖурналРегистрации

Процедура ЖР_ОткрытьДанныеДляПросмотра(ТекущиеДанные) Экспорт
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.Данные = Неопределено Тогда
		ПоказатьПредупреждение(, "Эта запись журнала регистрации не связана с данными (см. колонку ""Данные"")");

		Возврат;
	КонецЕсли;

	Попытка
		ПоказатьЗначение(, ТекущиеДанные.Данные);
	Исключение
		ТекстПредупреждения = "Эта запись журнала регистрации связана с данными, но отобразить их невозможно.
									|%1";
		Если ТекущиеДанные.Событие = "_$Data$_.Delete" Тогда
			// это - событие удаления
			ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, "Данные удалены из информационной базы");
		Иначе
			ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, "Возможно, данные удалены из информационной базы");
		КонецЕсли;
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецПопытки;
КонецПроцедуры

Процедура ЖР_ПросмотрТекущегоСобытияВОтдельномОкне(Данные, ХранилищеДанных) Экспорт
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	КлючУникальностиФормы	= Данные.АдресДанных;
	ПараметрыОткрытияФормы	= ЖР_СобытиеЖурналаРегистрацииВСтруктуру(Данные);
	ПараметрыОткрытияФормы.Вставить("ХранилищеДанных", ХранилищеДанных);
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма.Событие", ПараметрыОткрытияФормы,, КлючУникальностиФормы);
КонецПроцедуры

Процедура ЖР_УстановитьИнтервалДатДляПросмотра(ИнтервалДат, ОтборЖурналаРегистрации, ОбработчикОповещения = Неопределено) Экспорт
	// Получение текущего периода
	ДатаНачала    = Неопределено;
	ДатаОкончания = Неопределено;
	ОтборЖурналаРегистрации.Свойство("ДатаНачала", ДатаНачала);
	ОтборЖурналаРегистрации.Свойство("ДатаОкончания", ДатаОкончания);
	ДатаНачала    = ?(ТипЗнч(ДатаНачала)    = Тип("Дата"), ДатаНачала, '00010101000000');
	ДатаОкончания = ?(ТипЗнч(ДатаОкончания) = Тип("Дата"), ДатаОкончания, '00010101000000');

	Если ИнтервалДат.ДатаНачала <> ДатаНачала Тогда
		ИнтервалДат.ДатаНачала = ДатаНачала;
	КонецЕсли;

	Если ИнтервалДат.ДатаОкончания <> ДатаОкончания Тогда
		ИнтервалДат.ДатаОкончания = ДатаОкончания;
	КонецЕсли;

	// Редактирование текущего периода.
	Диалог			= Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период	= ИнтервалДат;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОтборЖурналаРегистрации", ОтборЖурналаРегистрации);
	ДополнительныеПараметры.Вставить("ИнтервалДат", ИнтервалДат);
	ДополнительныеПараметры.Вставить("ОбработчикОповещения", ОбработчикОповещения);

	Оповещение = Новый ОписаниеОповещения("ЖР_УстановитьИнтервалДатДляПросмотраЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Диалог.Показать(Оповещение);
КонецПроцедуры

Процедура ЖР_УстановитьИнтервалДатДляПросмотраЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ОтборЖурналаРегистрации = ДополнительныеПараметры.ОтборЖурналаРегистрации;
	ИнтервалУстановлен = Ложь;

	Если Результат <> Неопределено Тогда
		// Обновление текущего периода.
		ИнтервалДат = Результат;
		Если ИнтервалДат.ДатаНачала = '00010101000000' Тогда
			ОтборЖурналаРегистрации.Удалить("ДатаНачала");
		Иначе
			ОтборЖурналаРегистрации.Вставить("ДатаНачала", ИнтервалДат.ДатаНачала);
		КонецЕсли;

		Если ИнтервалДат.ДатаОкончания = '00010101000000' Тогда
			ОтборЖурналаРегистрации.Удалить("ДатаОкончания");
		Иначе
			ОтборЖурналаРегистрации.Вставить("ДатаОкончания", ИнтервалДат.ДатаОкончания);
		КонецЕсли;
		ИнтервалУстановлен = Истина;
	КонецЕсли;

	Если ДополнительныеПараметры.ОбработчикОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикОповещения, ИнтервалУстановлен);
	КонецЕсли;
КонецПроцедуры

Процедура ЖР_СобытияВыбор(Параметры) Экспорт
	Если Параметры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Параметры.Поле.Имя = "Данные" Или Параметры.Поле.Имя = "ПредставлениеДанных" Тогда
		Если Параметры.ТекущиеДанные.Данные <> Неопределено И (ТипЗнч(Параметры.ТекущиеДанные.Данные) <> Тип("Строка") И ЗначениеЗаполнено(Параметры.ТекущиеДанные.Данные)) Тогда
			ЖР_ОткрытьДанныеДляПросмотра(Параметры.ТекущиеДанные);

			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Параметры.Поле.Имя = "Дата" Тогда
		ЖР_УстановитьИнтервалДатДляПросмотра(Параметры.ИнтервалДат, Параметры.ОтборЖурналаРегистрации);

		Возврат;
	КонецЕсли;

	ЖР_ПросмотрТекущегоСобытияВОтдельномОкне(Параметры.ТекущиеДанные, Параметры.ХранилищеДанных);
КонецПроцедуры

Функция ЖР_СобытиеЖурналаРегистрацииВСтруктуру(Данные)
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		Возврат Данные;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Дата",                    Данные.Дата);
	ПараметрыФормы.Вставить("ИмяПользователя",         Данные.ИмяПользователя);
	ПараметрыФормы.Вставить("ПредставлениеПриложения", Данные.ПредставлениеПриложения);
	ПараметрыФормы.Вставить("Компьютер",               Данные.Компьютер);
	ПараметрыФормы.Вставить("Событие",                 Данные.Событие);
	ПараметрыФормы.Вставить("ПредставлениеСобытия",    Данные.ПредставлениеСобытия);
	ПараметрыФормы.Вставить("Комментарий",             Данные.Комментарий);
	ПараметрыФормы.Вставить("ПредставлениеМетаданных", Данные.ПредставлениеМетаданных);
	ПараметрыФормы.Вставить("Данные",                  Данные.Данные);
	ПараметрыФормы.Вставить("ПредставлениеДанных",     Данные.ПредставлениеДанных);
	ПараметрыФормы.Вставить("Транзакция",              Данные.Транзакция);
	ПараметрыФормы.Вставить("СтатусТранзакции",        Данные.СтатусТранзакции);
	ПараметрыФормы.Вставить("Сеанс",                   Данные.Сеанс);
	ПараметрыФормы.Вставить("РабочийСервер",           Данные.РабочийСервер);
	ПараметрыФормы.Вставить("ОсновнойIPПорт",          Данные.ОсновнойIPПорт);
	ПараметрыФормы.Вставить("ВспомогательныйIPПорт",   Данные.ВспомогательныйIPПорт);
	ПараметрыФормы.Вставить("Уровень",                 Данные.Уровень);

	Если ЗначениеЗаполнено(Данные.АдресДанных) Тогда
		ПараметрыФормы.Вставить("АдресДанных", Данные.АдресДанных);
	КонецЕсли;

	Возврат ПараметрыФормы;
КонецФункции

Функция ЖР_УстановитьОтборПоЗначениюВТекущейКолонке(ТекущиеДанные, ТекущийЭлемент, ОтборЖурналаРегистрации, КолонкиИсключения) Экспорт
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ИмяКолонкиПредставления = ТекущийЭлемент.Имя;

	Если КолонкиИсключения.Найти(ИмяКолонкиПредставления) <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗначениеОтбора = ТекущиеДанные[ИмяКолонкиПредставления];
	Представление  = ТекущиеДанные[ИмяКолонкиПредставления];

	ИмяЭлементаОтбора = ИмяКолонкиПредставления;
	Если ИмяКолонкиПредставления = "ИмяПользователя" Тогда
		ИмяЭлементаОтбора	= "Пользователь";
		ЗначениеОтбора		= ТекущиеДанные["Пользователь"];
	ИначеЕсли ИмяКолонкиПредставления = "ПредставлениеПриложения" Тогда
		ИмяЭлементаОтбора	= "ИмяПриложения";
		ЗначениеОтбора		= ТекущиеДанные["ИмяПриложения"];
	ИначеЕсли ИмяКолонкиПредставления = "ПредставлениеСобытия" Тогда
		ИмяЭлементаОтбора	= "Событие";
		ЗначениеОтбора		= ТекущиеДанные["Событие"];
	КонецЕсли;

	// По пустым строкам не отбираем.
	Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") И ПустаяСтрока(ЗначениеОтбора) Тогда
		// Для пользователя по умолчанию имя пустое, разрешаем отбирать.
		Если ИмяКолонкиПредставления <> "ИмяПользователя" Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	ТекущееЗначение = Неопределено;
	Если ОтборЖурналаРегистрации.Свойство(ИмяЭлементаОтбора, ТекущееЗначение) Тогда
		// Уже установлен отбор
		ОтборЖурналаРегистрации.Удалить(ИмяЭлементаОтбора);
	КонецЕсли;

	Если ИмяЭлементаОтбора = "Данные" Или ИмяЭлементаОтбора = "Комментарий" Или ИмяЭлементаОтбора = "Транзакция" Или ИмяЭлементаОтбора = "ПредставлениеДанных" Тогда
		ОтборЖурналаРегистрации.Вставить(ИмяЭлементаОтбора, ЗначениеОтбора);
	Иначе
		СписокОтбора = Новый СписокЗначений;
		СписокОтбора.Добавить(ЗначениеОтбора, Представление);

		ОтборЖурналаРегистрации.Вставить(ИмяЭлементаОтбора, СписокОтбора);
	КонецЕсли;

	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ДлительныеОперации

Процедура ДО_ОжидатьЗавершение(Знач ДлительнаяОперация, Знач ОповещениеОЗавершении = Неопределено, Знач ПараметрыОжидания = Неопределено) Экспорт
	ДО_ПроверитьПараметрыОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

	Если ДлительнаяОперация.Статус <> "Выполняется" Тогда
		Если ОповещениеОЗавершении <> Неопределено Тогда
			Если ДлительнаяОперация.Статус <> "Отменено" Тогда
				Результат = Новый Структура;
				Результат.Вставить("Статус", ДлительнаяОперация.Статус);
				Если ДлительнаяОперация.Свойство("АдресРезультата") Тогда
					Результат.Вставить("АдресРезультата", ДлительнаяОперация.АдресРезультата);
				КонецЕсли;
				Если ДлительнаяОперация.Свойство("АдресДополнительногоРезультата") Тогда
					Результат.Вставить("АдресДополнительногоРезультата", ДлительнаяОперация.АдресДополнительногоРезультата);
				КонецЕсли;
				Результат.Вставить("КраткоеПредставлениеОшибки", ДлительнаяОперация.КраткоеПредставлениеОшибки);
				Результат.Вставить("ПодробноеПредставлениеОшибки", ДлительнаяОперация.ПодробноеПредставлениеОшибки);
				Результат.Вставить("Сообщения", ?(ПараметрыОжидания <> Неопределено И ПараметрыОжидания.ВыводитьСообщения, ДлительнаяОперация.Сообщения, Неопределено));
			Иначе
				Результат = Неопределено;
			КонецЕсли;

			Если ДлительнаяОперация.Статус = "Выполнено" И ПараметрыОжидания <> Неопределено Тогда
				ДО_ПоказатьОповещение(ПараметрыОжидания.ОповещениеПользователя);
			КонецЕсли;
			ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
		КонецЕсли;

		Возврат;
	КонецЕсли;

	ПараметрыФормы = ДО_ПараметрыОжидания(Неопределено);
	Если ПараметрыОжидания <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыОжидания);
	КонецЕсли;
	Если ДлительнаяОперация.Свойство("АдресРезультата") Тогда
		ПараметрыФормы.Вставить("АдресРезультата", ДлительнаяОперация.АдресРезультата);
	КонецЕсли;
	Если ДлительнаяОперация.Свойство("АдресДополнительногоРезультата") Тогда
		ПараметрыФормы.Вставить("АдресДополнительногоРезультата", ДлительнаяОперация.АдресДополнительногоРезультата);
	КонецЕсли;
	ПараметрыФормы.Вставить("ИдентификаторЗадания", ДлительнаяОперация.ИдентификаторЗадания);

	Если ПараметрыФормы.ВыводитьОкноОжидания Тогда
		ПараметрыФормы.Удалить("ФормаВладелец");

		ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация", ПараметрыФормы, ?(ПараметрыОжидания <> Неопределено, ПараметрыОжидания.ФормаВладелец, Неопределено),,,,ОповещениеОЗавершении);
	Иначе
		ПараметрыФормы.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		ПараметрыФормы.Вставить("ТекущийИнтервал", ?(ПараметрыФормы.Интервал <> 0, ПараметрыФормы.Интервал, 1));
		ПараметрыФормы.Вставить("Контроль", ТекущаяДата() + ПараметрыФормы.ТекущийИнтервал); // дата сеанса не используется

		Операции = ДО_АктивныеДлительныеОперации();
		Операции.Список.Вставить(ПараметрыФормы.ИдентификаторЗадания, ПараметрыФормы);

		ПодключитьОбработчикОжидания("ДО_КонтрольДлительныхОпераций", ПараметрыФормы.ТекущийИнтервал, Истина);
	КонецЕсли;
КонецПроцедуры

Функция ДО_ПараметрыОжидания(ФормаВладелец) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ФормаВладелец",						ФормаВладелец);
	Результат.Вставить("ТекстСообщения",					"");
	Результат.Вставить("ВыводитьОкноОжидания",				Истина);
	Результат.Вставить("ВыводитьПрогрессВыполнения",		Ложь);
	Результат.Вставить("ОповещениеОПрогрессеВыполнения",	Неопределено);
	Результат.Вставить("ВыводитьСообщения",					Ложь);
	Результат.Вставить("Интервал",							0);
	Результат.Вставить("ПолучатьРезультат",					Ложь);

	ОповещениеПользователя = Новый Структура;
	ОповещениеПользователя.Вставить("Показать",				Ложь);
	ОповещениеПользователя.Вставить("Текст",				Неопределено);
	ОповещениеПользователя.Вставить("НавигационнаяСсылка",	Неопределено);
	ОповещениеПользователя.Вставить("Пояснение",			Неопределено);
	Результат.Вставить("ОповещениеПользователя",			ОповещениеПользователя);

	Возврат Результат;
КонецФункции

Функция ДО_АктивныеДлительныеОперации() Экспорт

	ИмяПараметра = "СтандартныеПодсистемы.АктивныеДлительныеОперации";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		Операции = Новый Структура("Обработка,Список", Ложь, Новый Соответствие);
		ПараметрыПриложения.Вставить(ИмяПараметра, Операции);
	КонецЕсли;

	Возврат ПараметрыПриложения[ИмяПараметра];
КонецФункции

Процедура ДО_ПроверитьПараметрыОжидатьЗавершение(Знач ДлительнаяОперация, Знач ОповещениеОЗавершении, Знач ПараметрыОжидания)
	БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр("ДлительныеОперацииКлиент.ОжидатьЗавершение","ДлительнаяОперация", ДлительнаяОперация, Тип("Структура"));

	Если ОповещениеОЗавершении <> Неопределено Тогда
		БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр("ДлительныеОперацииКлиент.ОжидатьЗавершение", "ОповещениеОЗавершении", ОповещениеОЗавершении, Тип("ОписаниеОповещения"));
	КонецЕсли;

	Если ПараметрыОжидания <> Неопределено Тогда
		ТипыСвойств = Новый Структура;
		Если ПараметрыОжидания.ФормаВладелец <> Неопределено Тогда
			ТипыСвойств.Вставить("ФормаВладелец", Тип("ФормаКлиентскогоПриложения"));
		КонецЕсли;
		ТипыСвойств.Вставить("ТекстСообщения",				Тип("Строка"));
		ТипыСвойств.Вставить("ВыводитьОкноОжидания",		Тип("Булево"));
		ТипыСвойств.Вставить("ВыводитьПрогрессВыполнения",	Тип("Булево"));
		ТипыСвойств.Вставить("ВыводитьСообщения",			Тип("Булево"));
		ТипыСвойств.Вставить("Интервал",					Тип("Число"));
		ТипыСвойств.Вставить("ОповещениеПользователя",		Тип("Структура"));
		ТипыСвойств.Вставить("ПолучатьРезультат",			Тип("Булево"));

		БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр("ДлительныеОперацииКлиент.ОжидатьЗавершение", "ПараметрыОжидания", ПараметрыОжидания, Тип("Структура"), ТипыСвойств);
		БазоваяПодсистемаКлиентСервер.ОН_Проверить(ПараметрыОжидания.Интервал = 0 Или ПараметрыОжидания.Интервал >= 1,  "Параметр ПараметрыОжидания.Интервал должен быть больше или равен 1", "ДлительныеОперацииКлиент.ОжидатьЗавершение");
		БазоваяПодсистемаКлиентСервер.ОН_Проверить(Не (ПараметрыОжидания.ОповещениеОПрогрессеВыполнения <> Неопределено И ПараметрыОжидания.ВыводитьОкноОжидания), "Если параметр ПараметрыОжидания.ВыводитьОкноОжидания установлен в Истина, то параметр ПараметрыОжидания.ОповещениеОПрогрессеВыполнения не поддерживается", "ДлительныеОперацииКлиент.ОжидатьЗавершение");
	КонецЕсли;
КонецПроцедуры

Процедура ДО_ПоказатьОповещение(ОповещениеПользователя) Экспорт
	Оповещение = ОповещениеПользователя;
	Если Не Оповещение.Показать Тогда
		Возврат;
	КонецЕсли;

	ПоказатьОповещениеПользователя(?(Оповещение.Текст <> Неопределено, Оповещение.Текст, "Действие выполнено"), Оповещение.НавигационнаяСсылка, Оповещение.Пояснение);
КонецПроцедуры

#КонецОбласти

#Область СтроковыеФункции

Функция СФ_ФорматированнаяСтрока(Знач ШаблонСтроки, Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено, Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено) Экспорт
	ЭлементыСтиля = СП_ЭлементыСтиля();

	Возврат БазоваяПодсистемаКлиентСервер.СФ_СформироватьФорматированнуюСтроку(ШаблонСтроки, ЭлементыСтиля, Параметр1, Параметр2, Параметр3, Параметр4, Параметр5);
КонецФункции

#КонецОбласти
