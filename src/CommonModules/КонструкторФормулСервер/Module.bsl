///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область КонструкторФормул

Процедура сКФ_ДобавитьСписокПолейНаФорму(Форма, Параметры) Экспорт
	ПараметрыДобавления = сКФ_ПараметрыДобавленияСпискаПолей();
	ЗаполнитьЗначенияСвойств(ПараметрыДобавления, Параметры);

	ДобавляемыеРеквизиты = Новый Массив;

	ЗначенияРеквизитов = Новый Структура("ПодключенныеСпискиПолей");
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Форма);
	ПодключенныеСпискиПолей = ЗначенияРеквизитов.ПодключенныеСпискиПолей;
	Если ПодключенныеСпискиПолей = Неопределено Тогда
		ИмяРеквизитаПодключенныеСпискиПолей = "ПодключенныеСпискиПолей";
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизитаПодключенныеСпискиПолей,		Новый ОписаниеТипов("ТаблицаЗначений")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяСпискаПолей",							Новый ОписаниеТипов("Строка"), ИмяРеквизитаПодключенныеСпискиПолей));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяСпискаИсточников",					Новый ОписаниеТипов("Строка"), ИмяРеквизитаПодключенныеСпискиПолей));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СкобкиИдентификаторов",					Новый ОписаниеТипов("Булево"), ИмяРеквизитаПодключенныеСпискиПолей));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СкобкиПредставлений",					Новый ОписаниеТипов("Булево"), ИмяРеквизитаПодключенныеСпискиПолей));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИспользоватьИдентификаторыДляФормул",	Новый ОписаниеТипов("Булево"), ИмяРеквизитаПодключенныеСпискиПолей));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПриОпределенииИсточниковДоступныхПолей",	Новый ОписаниеТипов("Строка"), ИмяРеквизитаПодключенныеСпискиПолей));
	КонецЕсли;

	ИмяСпискаПолей = ПараметрыДобавления.ИмяСписка;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяСпискаПолей, Новый ОписаниеТипов("ДеревоЗначений")));
	Для Каждого ОписаниеРеквизита Из сКФ_РеквизитыПодключаемогоСписка() Цикл
		ИмяРеквизита = ОписаниеРеквизита.Ключ;
		ТипРеквизита = ОписаниеРеквизита.Значение;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, ИмяСпискаПолей));
	КонецЦикла;

	ИмяСтрокиПоиска = "СтрокаПоиска" + ИмяСпискаПолей;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяСтрокиПоиска, Новый ОписаниеТипов("Строка")));

	ИмяСпискаИсточников = ИмяСпискаПолей + "Источники";
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяСпискаИсточников, Новый ОписаниеТипов("ТаблицаЗначений")));
	Для Каждого ОписаниеРеквизита Из сКФ_РеквизитыСпискаИсточниковДоступныхПолей() Цикл
		ИмяРеквизита	= ОписаниеРеквизита.Ключ;
		ТипРеквизита	= ОписаниеРеквизита.Значение;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, ИмяСпискаИсточников));
	КонецЦикла;

	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	МестоРазмещенияСтрокиПоиска = ПараметрыДобавления.МестоРазмещенияСтрокиПоиска;
	Если Не ЗначениеЗаполнено(МестоРазмещенияСтрокиПоиска) Тогда
		МестоРазмещенияСтрокиПоиска = ПараметрыДобавления.МестоРазмещенияСписка;
	КонецЕсли;

	СтрокаПоиска								= Форма.Элементы.Добавить(ИмяСтрокиПоиска, Тип("ПолеФормы"), МестоРазмещенияСтрокиПоиска);
	СтрокаПоиска.ПутьКДанным					= ИмяСтрокиПоиска;
	СтрокаПоиска.Вид							= ВидПоляФормы.ПолеВвода;
	СтрокаПоиска.ПодсказкаВвода					= ПараметрыДобавления.ПодсказкаВводаСтрокиПоиска;
	СтрокаПоиска.ПоложениеЗаголовка				= ПоложениеЗаголовкаЭлементаФормы.Нет;
	СтрокаПоиска.УстановитьДействие("ИзменениеТекстаРедактирования", "Подключаемый_СтрокаПоискаИзменениеТекстаРедактирования");
	СтрокаПоиска.УстановитьДействие("Очистка", "Подключаемый_СтрокаПоискаОчистка");
	СтрокаПоиска.ОбновлениеТекстаРедактирования	= ОбновлениеТекстаРедактирования.НеИспользовать;
	СтрокаПоиска.АвтоМаксимальнаяШирина			= Ложь;
	СтрокаПоиска.КнопкаОчистки					= Истина;

	СписокПолей								= Форма.Элементы.Добавить(ИмяСпискаПолей, Тип("ТаблицаФормы"), ПараметрыДобавления.МестоРазмещенияСписка);
	СписокПолей.ПутьКДанным					= ИмяСпискаПолей;
	СписокПолей.НачальноеОтображениеДерева	= НачальноеОтображениеДерева.НеРаскрывать;
	СписокПолей.ПоложениеЗаголовка			= ПоложениеЗаголовкаЭлементаФормы.Нет;
	СписокПолей.Шапка						= Ложь;
	СписокПолей.ГоризонтальныеЛинии			= Ложь;
	СписокПолей.ВертикальныеЛинии			= Ложь;
	СписокПолей.ИзменятьСоставСтрок			= Ложь;
	СписокПолей.ИзменятьПорядокСтрок		= Ложь;
	СписокПолей.РежимВыделения				= РежимВыделенияТаблицы.Одиночный;
	СписокПолей.КоманднаяПанель.Видимость	= Ложь;
	СписокПолей.УстановитьДействие("ПередРазворачиванием", "Подключаемый_СписокПолейПередРазворачиванием");
	СписокПолей.УстановитьДействие("НачалоПеретаскивания", "Подключаемый_СписокПолейНачалоПеретаскивания");

	Для Каждого Обработчик Из ПараметрыДобавления.ОбработчикиСписка Цикл
		ИмяСобытия		= Обработчик.Ключ;
		ИмяПроцедуры	= Обработчик.Значение;
		СписокПолей.УстановитьДействие(ИмяСобытия, ИмяПроцедуры);
	КонецЦикла;

	ГруппаКолонок					= Форма.Элементы.Добавить(ИмяСпискаПолей + "КартинкаИПредставление", Тип("ГруппаФормы"), СписокПолей);
	ГруппаКолонок.Группировка		= ГруппировкаКолонок.ВЯчейке;

	КартинкаПоля					= Форма.Элементы.Добавить(ИмяСпискаПолей + "Картинка", Тип("ПолеФормы"), ГруппаКолонок);
	КартинкаПоля.ПутьКДанным		= ИмяСпискаПолей + ".Картинка";
	КартинкаПоля.Вид				= ВидПоляФормы.ПолеКартинки;
	КартинкаПоля.ОтображатьВШапке	= Ложь;

	ПредставлениеПоля					= Форма.Элементы.Добавить(ИмяСпискаПолей + "Представление", Тип("ПолеФормы"), ГруппаКолонок);
	ПредставлениеПоля.ПутьКДанным		= ИмяСпискаПолей + ".Заголовок";
	ПредставлениеПоля.Вид				= ВидПоляФормы.ПолеВвода;
	ПредставлениеПоля.ТолькоПросмотр	= Истина;

	ПредставлениеПоля					= Форма.Элементы.Добавить(ИмяСпискаПолей + "ПредставлениеПутиКДанным", Тип("ПолеФормы"), ГруппаКолонок);
	ПредставлениеПоля.ПутьКДанным		= ИмяСпискаПолей + ".ПредставлениеПутиКДанным";
	ПредставлениеПоля.Вид				= ВидПоляФормы.ПолеНадписи;
	ПредставлениеПоля.ТолькоПросмотр	= Истина;
	ПредставлениеПоля.Видимость			= Ложь;
	ПредставлениеПоля.Заголовок			= "Поле";

	ПодключенныеСпискиПолей										= Форма.ПодключенныеСпискиПолей; // ТаблицаЗначений
	ПодключенныйСписок											= ПодключенныеСпискиПолей.Добавить();
	ПодключенныйСписок.ИмяСпискаПолей							= ИмяСпискаПолей;
	ПодключенныйСписок.ИмяСпискаИсточников						= ИмяСпискаИсточников;
	ПодключенныйСписок.СкобкиИдентификаторов					= ПараметрыДобавления.СкобкиИдентификаторов;
	ПодключенныйСписок.СкобкиПредставлений						= ПараметрыДобавления.СкобкиПредставлений;
	ПодключенныйСписок.ИспользоватьИдентификаторыДляФормул		= ПараметрыДобавления.ИспользоватьИдентификаторыДляФормул;
	ПодключенныйСписок.ПриОпределенииИсточниковДоступныхПолей	= ПараметрыДобавления.ПриОпределенииИсточниковДоступныхПолей;

	ИсточникиДоступныхПолей = Форма[ИмяСпискаИсточников]; // ТаблицаЗначений

	Для Каждого КоллекцияПолей Из ПараметрыДобавления.КоллекцииПолей Цикл
		ИсточникДоступныхПолей					= ИсточникиДоступныхПолей.Добавить();
		Если ТипЗнч(КоллекцияПолей) = Тип("Строка") И ЭтоАдресВременногоХранилища(КоллекцияПолей) Тогда
			ИсточникДоступныхПолей.СхемаКомпоновкиДанных	= КоллекцияПолей;
			ИсточникДоступныхПолей.КоллекцияПолей			= сКФ_КоллекцияПолей(КоллекцияПолей);
		Иначе
			ИсточникДоступныхПолей.КоллекцияПолей			= КоллекцияПолей;
		КонецЕсли;
		ИсточникДоступныхПолей.ИсточникДанных = ПараметрыДобавления.ИмяОсновногоИсточника;
	КонецЦикла;

	Для Каждого ИсточникДоступныхПолей Из ПараметрыДобавления.ИсточникиДоступныхПолей Цикл
		ЗаполнитьЗначенияСвойств(ИсточникиДоступныхПолей.Добавить(), ИсточникДоступныхПолей);
	КонецЦикла;

	ДеревоПолей			= Форма.РеквизитФормыВЗначение(ИмяСпискаПолей);
	ТаблицаИсточников	= Форма.РеквизитФормыВЗначение(ИмяСпискаИсточников);

	сКФ_ЗаполнитьСписокДоступныхРеквизитов(ДеревоПолей, ТаблицаИсточников,, ПодключенныйСписок);

	Форма.ЗначениеВРеквизитФормы(ДеревоПолей, ИмяСпискаПолей);
	Форма.ЗначениеВРеквизитФормы(ТаблицаИсточников, ИмяСпискаИсточников);

	сКФ_УстановитьУсловноеОформление(Форма, ИмяСпискаПолей);
КонецПроцедуры

Функция сКФ_ПараметрыДобавленияСпискаПолей() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("МестоРазмещенияСписка");
	Результат.Вставить("ИмяСписка",									"ДоступныеПоля");
	Результат.Вставить("КоллекцииПолей",							Новый Массив);
	Результат.Вставить("МестоРазмещенияСтрокиПоиска");
	Результат.Вставить("ПодсказкаВводаСтрокиПоиска",				"Найти...");
	Результат.Вставить("ОбработчикиСписка",							Новый Структура);
	Результат.Вставить("ВключатьГруппыВПутьКДанным",				Истина);
	Результат.Вставить("СкобкиИдентификаторов",						Ложь);
	Результат.Вставить("СкобкиПредставлений",						Истина);
	Результат.Вставить("ИспользоватьИдентификаторыДляФормул",		Ложь);
	Результат.Вставить("ПриОпределенииИсточниковДоступныхПолей",	"");
	Результат.Вставить("ИмяОсновногоИсточника",						"");

	Возврат Результат;
КонецФункции

Процедура сКФ_РазвернутьРеквизит(ИдентификаторСтроки, ИмяСписка, Форма)
	Отбор = Форма["СтрокаПоиска" + ИмяСписка];
	ТекущиеДанные = Форма[ИмяСписка].НайтиПоИдентификатору(ИдентификаторСтроки);
	КоллекцияРеквизитов = ТекущиеДанные.ПолучитьЭлементы();

	НастройкиСписка						= КонструкторФормулКлиентСервер.КФ_НастройкиСпискаПолей(Форма, ИмяСписка);

	Если КоллекцияРеквизитов.Количество() = 0 Или КоллекцияРеквизитов[0].Поле <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	КоллекцияРеквизитов.Очистить();
	ИсточникиДоступныхПолей = сКФ_СписокИсточниковДоступныхПолей(Форма, ИмяСписка);
	сКФ_ЗаполнитьСписокДоступныхРеквизитов(ТекущиеДанные, ИсточникиДоступныхПолей, Отбор, НастройкиСписка);
КонецПроцедуры

Процедура сКФ_УстановитьУсловноеОформление(Форма, ИмяСпискаПолей)
	УсловноеОформление	= Форма.УсловноеОформление;

	ЭлементОформления	= УсловноеОформление.Элементы.Добавить();

	ОформляемоеПоле			= ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле	= Новый ПолеКомпоновкиДанных(ИмяСпискаПолей + "Картинка");
	ОформляемоеПоле			= ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле	= Новый ПолеКомпоновкиДанных(ИмяСпискаПолей + "Представление");
	ОформляемоеПоле			= ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле	= Новый ПолеКомпоновкиДанных(ИмяСпискаПолей + "ПредставлениеПутиКДанным");

	ЭлементОтбора					= ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ИмяСпискаПолей + ".СоответствуетОтбору");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;

	ЭлементОтбора				= ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("СтрокаПоиска" + ИмяСпискаПолей);
	ЭлементОтбора.ВидСравнения	= ВидСравненияКомпоновкиДанных.Заполнено;

	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость",	Ложь);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать",	Ложь);
КонецПроцедуры

Функция сКФ_НайтиТекстВСтроке(Знач Строка, Знач Текст)
	СтрокаПоиска = Строка;

	ФорматированныеСтроки = Новый Массив;
	Для Каждого Подстрока Из СтрРазделить(Текст, " ", Ложь) Цикл
		Позиция = СтрНайти(НРег(СтрокаПоиска), НРег(Подстрока));
		Если Позиция = 0 Тогда
			ФорматированныеСтроки = Неопределено;

			Прервать;
		КонецЕсли;

		ПодстрокаДоВхождения	= Лев(СтрокаПоиска, Позиция - 1);
		ПодстрокаВхождения		= Сред(СтрокаПоиска, Позиция, СтрДлина(Подстрока));
		СтрокаПоиска			= Сред(СтрокаПоиска, Позиция + СтрДлина(Подстрока));

		ФорматированныеСтроки.Добавить(ПодстрокаДоВхождения);
		ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(ПодстрокаВхождения, ШрифтыСтиля.ВажнаяНадписьШрифт, ЦветаСтиля.РезультатУспехЦвет));
	КонецЦикла;

	Если Не ЗначениеЗаполнено(ФорматированныеСтроки) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ФорматированныеСтроки.Добавить(СтрокаПоиска);
	СтрокаСПодсветкой = Новый ФорматированнаяСтрока(ФорматированныеСтроки); // АПК:1356 - можно использовать составную форматированную строку, так как массив строк формируется из переданного в функцию текста.

	Возврат СтрокаСПодсветкой;
КонецФункции

Функция сКФ_СхемаКомпоновкиДанныхИзТаблицыЗначений(ТаблицаЗначений) Экспорт
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;

	ИсточникДанных						= СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя					= "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных	= "local";

	НаборДанных					= СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных	= "ИсточникДанных1";
	НаборДанных.Имя				= "НаборДанных1";
	НаборДанных.ИмяОбъекта		= "Данные";

	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Поле				= НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		Поле.Поле			= СтрокаТаблицы.Идентификатор;
		Поле.ПутьКДанным	= СтрокаТаблицы.Идентификатор;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Представление) Тогда
			Поле.Заголовок = СтрокаТаблицы.Представление;
		КонецЕсли;
		Поле.ТипЗначения	= СтрокаТаблицы.ТипЗначения;

		Если ЗначениеЗаполнено(СтрокаТаблицы.Формат) Тогда
			ЗначениеПараметра = Поле.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Формат"));
			Если ЗначениеПараметра <> Неопределено Тогда
				ЗначениеПараметра.Использование	= Истина;
				ЗначениеПараметра.Значение		= СтрокаТаблицы.Формат;
			КонецЕсли;
		КонецЕсли;

		ДополнительныеПараметры = Новый Структура("Порядок,ЭтоФункция");
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, СтрокаТаблицы);

		ДополнительныеПараметры.Вставить("Картинка",  Base64Строка(СтрокаТаблицы.Картинка.ПолучитьДвоичныеДанные()));

		Поле.ПараметрыРедактирования.УстановитьЗначениеПараметра("Маска", сКФ_ЗначениеВJSON(ДополнительныеПараметры));
	КонецЦикла;

	Возврат СхемаКомпоновкиДанных;
КонецФункции

Функция сКФ_СхемаКомпоновкиДанныхИзДереваЗначений(ДеревоЗначений) Экспорт
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;

	ИсточникДанных						= СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя					= "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных	= "local";

	НаборДанных					= СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных	= "ИсточникДанных1";
	НаборДанных.Имя				= "НаборДанных1";
	НаборДанных.ИмяОбъекта		= "Данные";

	сКФ_ДобавитьГруппуЭлементовВНаборДанных(ДеревоЗначений, НаборДанных);

	Возврат СхемаКомпоновкиДанных;
КонецФункции

Процедура сКФ_ДобавитьГруппуЭлементовВНаборДанных(КоллекцияЭлементов, НаборДанных, Родитель = Неопределено)
	Для Каждого Элемент Из КоллекцияЭлементов.Строки Цикл
		ЭтоГруппа = Ложь;

		Если Элемент.Папка Тогда
			Поле				= НаборДанных.Поля.Добавить(Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных"));
		ИначеЕсли Элемент.Таблица Тогда
			Поле				= НаборДанных.Поля.Добавить(Тип("ВложенныйНаборДанныхСхемыКомпоновкиДанных"));
		Иначе
			Поле				= НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			Поле.ТипЗначения	= Элемент.ТипЗначения;
			Поле.Поле			= Элемент.Идентификатор;
			ЭтоГруппа			= Элемент.Строки.Количество() > 0 И Не ЗначениеЗаполнено(Элемент.ТипЗначения);

			ДополнительныеПараметры				= Новый Структура("Порядок,ЭтоГруппа,ЭтоФункция");
			ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, Элемент);
			ДополнительныеПараметры.ЭтоГруппа	= ЭтоГруппа;
			ДополнительныеПараметры.Вставить("Картинка", Base64Строка(Элемент.Картинка.ПолучитьДвоичныеДанные()));

			Поле.ПараметрыРедактирования.УстановитьЗначениеПараметра("Маска", сКФ_ЗначениеВJSON(ДополнительныеПараметры));
		КонецЕсли;

		Поле.ПутьКДанным = Элемент.Идентификатор;
		Если Родитель <> Неопределено Тогда
			Поле.ПутьКДанным = Родитель.ПутьКДанным + "." + Поле.ПутьКДанным;
		КонецЕсли;

		Если ЗначениеЗаполнено(Элемент.Представление) Тогда
			Поле.Заголовок = Элемент.Представление;
		КонецЕсли;

		Если ЗначениеЗаполнено(Элемент.Формат) Тогда
			ЗначениеПараметра = Поле.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Формат"));
			Если ЗначениеПараметра <> Неопределено Тогда
				ЗначениеПараметра.Использование	= Истина;
				ЗначениеПараметра.Значение		= Элемент.Формат;
			КонецЕсли;
		КонецЕсли;

		сКФ_ДобавитьГруппуЭлементовВНаборДанных(Элемент, НаборДанных, Поле);
	КонецЦикла;
КонецПроцедуры

Процедура сКФ_ЗаполнитьСписокДоступныхРеквизитов(Знач ТекущийРеквизит, ИсточникиДоступныхПолей, Знач Отбор = "", НастройкиСписка = Неопределено)
	ДоступныеРеквизиты = сКФ_НоваяКоллекцияДоступныхРеквизитов();
	ДоступныеРеквизиты.Колонки.Добавить("ЕстьПодчиненные",	Новый ОписаниеТипов("Булево"));
	ДоступныеРеквизиты.Колонки.Добавить("Порядок",			Новый ОписаниеТипов("Число"));

	КоллекцииДоступныхПолей = сКФ_КоллекцииДоступныхПолей(ТекущийРеквизит, ИсточникиДоступныхПолей, НастройкиСписка);
	Для Каждого КоллекцияДоступныхПолей Из КоллекцииДоступныхПолей Цикл
		Для Каждого ОписаниеПоля Из КоллекцияДоступныхПолей.Элементы Цикл
			Если ОписаниеПоля.Таблица И (Строка(ОписаниеПоля.Поле) = "ДополнительныеРеквизиты" Или СтрЗаканчиваетсяНа(ОписаниеПоля.Поле, ".ДополнительныеРеквизиты")) Тогда
				Продолжить;
			КонецЕсли;
			Если ОписаниеПоля.Таблица И (Строка(ОписаниеПоля.Поле) = "КонтактнаяИнформация" Или СтрЗаканчиваетсяНа(ОписаниеПоля.Поле, ".КонтактнаяИнформация")) Тогда
				Продолжить;
			КонецЕсли;
			Если ОписаниеПоля.Таблица И (Строка(ОписаниеПоля.Поле) = "Представления" Или СтрЗаканчиваетсяНа(ОписаниеПоля.Поле, ".Представления")) Тогда
				Продолжить;
			КонецЕсли;
			Если СтрЗаканчиваетсяНа(ОписаниеПоля.Поле, ".ВерсияДанных") Тогда
				Продолжить;
			КонецЕсли;

			Реквизит = ДоступныеРеквизиты.Добавить();

			Реквизит.Заголовок = ОписаниеПоля.Заголовок;
			Если ОписаниеПоля.Родитель <> Неопределено И СтрНачинаетсяС(Реквизит.Заголовок, ОписаниеПоля.Родитель.Заголовок) Тогда
				Реквизит.Заголовок = Сред(Реквизит.Заголовок, СтрДлина(ОписаниеПоля.Родитель.Заголовок) + 2);
			КонецЕсли;

			Реквизит.Поле	= ОписаниеПоля.Поле;
			Реквизит.Имя	= сКФ_ИмяПоля(ОписаниеПоля.Поле);

			Если Не ОписаниеПоля.Тип.СодержитТип(Тип("ТаблицаЗначений")) Тогда
				Реквизит.Тип = ОписаниеПоля.Тип;
			КонецЕсли;

			Реквизит.Тип		= ОписаниеПоля.Тип;
			Реквизит.Папка		= ОписаниеПоля.Папка;
			Реквизит.Таблица	= ОписаниеПоля.Таблица;
			Реквизит.Порядок	= 1;

			ДополнительныеПараметры = Новый Соответствие;
			Если ТипЗнч(ОписаниеПоля) = Тип("ДоступноеПолеОтбораКомпоновкиДанных") И ЗначениеЗаполнено(ОписаниеПоля.Маска) И СтрНачинаетсяС(ОписаниеПоля.Маска, "{") И СтрЗаканчиваетсяНа(ОписаниеПоля.Маска, "}") Тогда
				ДополнительныеПараметры = сКФ_JSONВЗначение(ОписаниеПоля.Маска);
			КонецЕсли;

			Если ДополнительныеПараметры["Картинка"] <> Неопределено Тогда
				Реквизит.Картинка = Новый Картинка(Base64Значение(ДополнительныеПараметры["Картинка"]));
			КонецЕсли;
			Порядок = ДополнительныеПараметры["Порядок"];
			Если ЗначениеЗаполнено(Порядок) Тогда
				Реквизит.Порядок = Порядок;
			КонецЕсли;

			Реквизит.ЭтоГруппа = ДополнительныеПараметры["ЭтоГруппа"];
			Если Реквизит.ЭтоГруппа Тогда
				Реквизит.Папка = Реквизит.ЭтоГруппа;
			КонецЕсли;

			Реквизит.ЭтоФункция = ДополнительныеПараметры["ЭтоФункция"];

			Если Не ЗначениеЗаполнено(Реквизит.Картинка) Тогда
				Реквизит.Картинка = сКФ_КартинкаТипа(ОписаниеПоля.Тип);

				Если Реквизит.Таблица Тогда
					Реквизит.Картинка = БиблиотекаКартинок.ТипСписок;
				ИначеЕсли Реквизит.Папка Тогда
					Реквизит.Картинка = БиблиотекаКартинок.ТипПапка;
				ИначеЕсли СтрНачинаетсяС(Реквизит.Имя, "Печать") Или СтрНачинаетсяС(Реквизит.Имя, "Подпись") Или СтрНачинаетсяС(Реквизит.Имя, "Факсимиле") Или СтрНачинаетсяС(Реквизит.Имя, "Картинка") Или Реквизит.Тип.Типы().Количество() = 1 И Ложь Тогда
					// Зарезервировано для новых подсистем

					Реквизит.Картинка = БиблиотекаКартинок.ТипКартинка;
				ИначеЕсли СтрНачинаетсяС(Реквизит.Имя, "Штамп") Тогда
					Реквизит.Картинка = БиблиотекаКартинок.ШтампЭлектроннойПодписи;
				КонецЕсли;
			КонецЕсли;

			Если ОписаниеПоля.Поле = Новый ПолеКомпоновкиДанных("СистемныеПоля") Тогда
				Реквизит.Порядок = 2;
			КонецЕсли;
			Если ОписаниеПоля.Поле = Новый ПолеКомпоновкиДанных("ПользовательскиеПоля") Тогда
				Реквизит.Заголовок	= "Формулы";
				Реквизит.Картинка	= БиблиотекаКартинок.ТипФункция;
				Реквизит.Порядок	= 3;
			КонецЕсли;
			Если ОписаниеПоля.Поле = Новый ПолеКомпоновкиДанных("ДетальныеЗаписи") Тогда
				Реквизит.Порядок = 4;
			КонецЕсли;
			Если ОписаниеПоля.Поле = Новый ПолеКомпоновкиДанных("ОбщиеРеквизиты") Тогда
				Реквизит.Порядок = 5;
			КонецЕсли;

			Реквизит.ПредставлениеПутиКДанным = "";
			Если Не Реквизит.ЭтоГруппа Тогда
				Реквизит.ПутьКДанным				= Реквизит.Имя;
				Реквизит.ПредставлениеПутиКДанным	= Реквизит.Заголовок;
			КонецЕсли;

			Если ОписаниеПоля.Элементы.Количество() > 0 Тогда
				Реквизит.ЕстьПодчиненные = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	ДоступныеРеквизиты.Сортировать("Порядок, Заголовок");

	КоллекцияРеквизитов = сКФ_ПодчиненныеЭлементы(ТекущийРеквизит);
	ПолеСсылкаДобавлено = Ложь;
	Для Каждого ДоступныйРеквизит Из ДоступныеРеквизиты Цикл
		Если ДоступныйРеквизит.Имя = "Ссылка" Тогда
			Если ТипЗнч(ТекущийРеквизит) <> Тип("ДанныеФормыДерево") И ТипЗнч(ТекущийРеквизит) <> Тип("ДеревоЗначений") Или ПолеСсылкаДобавлено Тогда
				Продолжить;
			КонецЕсли;
			ПолеСсылкаДобавлено = Истина;
		КонецЕсли;

		Реквизит = КоллекцияРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(Реквизит, ДоступныйРеквизит);

		Если сКФ_Родитель(Реквизит) <> Неопределено Тогда
			Родитель = сКФ_Родитель(Реквизит);
			Если Не Реквизит.ЭтоГруппа Тогда
				Реквизит.ПутьКДанным				= Родитель.ПутьКДанным;
				Реквизит.ПредставлениеПутиКДанным	= Строка(Родитель.ПредставлениеПутиКДанным);;
			Иначе
				Если ЗначениеЗаполнено(Родитель.ПутьКДанным) Тогда
					Реквизит.ПутьКДанным				= Родитель.ПутьКДанным + "." + Реквизит.Имя;
					Реквизит.ПредставлениеПутиКДанным 	= Строка(Родитель.ПредставлениеПутиКДанным) + "." + Реквизит.Заголовок;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ДоступныйРеквизит.ЕстьПодчиненные Или Реквизит.Тип.Типы().Количество() = 1 И Не БазоваяПодсистемаСервер.ОН_ЭтоСсылка(Реквизит.Тип.Типы()[0]) Тогда
			КоллекцииПолейРеквизита = сКФ_КоллекцииДоступныхПолей(Реквизит, ИсточникиДоступныхПолей, НастройкиСписка);
			Если ЗначениеЗаполнено(КоллекцииПолейРеквизита) И ЗначениеЗаполнено(КоллекцииПолейРеквизита[0].Элементы)  И Не СтрНайти(Реквизит.ПутьКДанным, Реквизит.Имя + ".") Тогда
				сКФ_ПодчиненныеЭлементы(Реквизит).Добавить();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция сКФ_НоваяКоллекцияДоступныхРеквизитов()
	ДоступныеРеквизиты = Новый ТаблицаЗначений;
	Для Каждого ОписаниеРеквизита Из сКФ_РеквизитыПодключаемогоСписка() Цикл
		ИмяРеквизита	= ОписаниеРеквизита.Ключ;
		ТипРеквизита	= ОписаниеРеквизита.Значение;
		ДоступныеРеквизиты.Колонки.Добавить(ИмяРеквизита, ТипРеквизита);
	КонецЦикла;

	Возврат ДоступныеРеквизиты;
КонецФункции

Функция сКФ_ПодчиненныеЭлементы(Коллекция)
	Если ТипЗнч(Коллекция) = Тип("ДеревоЗначений") Или ТипЗнч(Коллекция) = Тип("СтрокаДереваЗначений") Тогда
		Возврат Коллекция.Строки;
	КонецЕсли;

	Возврат Коллекция.ПолучитьЭлементы();
КонецФункции

Функция сКФ_Родитель(Элемент)
	Если ТипЗнч(Элемент) = Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат Элемент.ПолучитьРодителя();
	ИначеЕсли ТипЗнч(Элемент) = Тип("СтрокаДереваЗначений") Тогда
		Возврат Элемент.Родитель;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

Функция сКФ_КоллекцииДоступныхПолей(Реквизит, ИсточникиДоступныхПолей, НастройкиСписка)
	Результат = Новый Массив;

	Если ТипЗнч(Реквизит) = Тип("ДанныеФормыДерево") Или ТипЗнч(Реквизит) = Тип("ДеревоЗначений") Тогда
		Для Каждого ИсточникДоступныхПолей Из сКФ_ИсточникиДоступныхПолей(ИсточникиДоступныхПолей, НастройкиСписка) Цикл
			Результат.Добавить(ИсточникДоступныхПолей.КоллекцияПолей);
		КонецЦикла;

		Возврат Результат;
	КонецЕсли;

	Замещать = Ложь;
	Для Каждого ИсточникДоступныхПолей Из сКФ_ИсточникиДоступныхПолей(ИсточникиДоступныхПолей, НастройкиСписка, Реквизит) Цикл
		Реквизит.СвойНаборПолей = Истина;
		Результат.Добавить(ИсточникДоступныхПолей.КоллекцияПолей);
		Замещать = Замещать Или ИсточникДоступныхПолей.Замещать;
	КонецЦикла;

	Если Замещать И ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	КонецЕсли;

	Родитель = сКФ_Родитель(Реквизит);
	Пока Родитель <> Неопределено Цикл
		Если Родитель.СвойНаборПолей Тогда
			Прервать;
		Иначе
			Родитель = сКФ_Родитель(Родитель);

			Продолжить;
		КонецЕсли;
	КонецЦикла;

	Если Родитель <> Неопределено Тогда
		Для Каждого ИсточникДоступныхПолей Из сКФ_ИсточникиДоступныхПолей(ИсточникиДоступныхПолей, НастройкиСписка, Родитель) Цикл
			Поле = ИсточникДоступныхПолей.КоллекцияПолей.НайтиПоле(Реквизит.Поле);
			Если Поле <> Неопределено Тогда
				Результат.Добавить(Поле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Не Замещать Или Не ЗначениеЗаполнено(Результат) Тогда
		Для Каждого ИсточникДоступныхПолей Из сКФ_ИсточникиДоступныхПолей(ИсточникиДоступныхПолей, НастройкиСписка) Цикл
			Поле = ИсточникДоступныхПолей.КоллекцияПолей.НайтиПоле(Реквизит.Поле);
			Если Поле <> Неопределено Тогда
				Результат.Добавить(Поле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция сКФ_ИсточникиДоступныхПолей(ИсточникиДоступныхПолей, НастройкиСписка, Реквизит = Неопределено)
	Результат					= Новый Массив;
	ИмяОсновногоИсточникаДанных	= сКФ_ИмяОсновногоИсточникаДанных(ИсточникиДоступныхПолей);

	Если Реквизит = Неопределено Тогда
		Отбор = Новый Структура("ИсточникДанных", ИмяОсновногоИсточникаДанных);
		Для Каждого ИсточникДоступныхПолей Из ИсточникиДоступныхПолей.НайтиСтроки(Отбор) Цикл
			Результат.Добавить(ИсточникДоступныхПолей);
		КонецЦикла;

		Возврат Результат;
	КонецЕсли;

	ИсточникиДанных = Новый Массив;

	Родитель = сКФ_Родитель(Реквизит);
	Пока Родитель <> Неопределено И Родитель.Папка Цикл
		Родитель = сКФ_Родитель(Родитель)
	КонецЦикла;

	Если Родитель = Неопределено Тогда
		Если ЗначениеЗаполнено(ИмяОсновногоИсточникаДанных) Тогда
			ИсточникДанных = ИмяОсновногоИсточникаДанных + "." + Реквизит.Имя;
			ИсточникиДанных.Добавить(ИсточникДанных);
		КонецЕсли;
	Иначе
		Для Каждого Тип Из Родитель.Тип.Типы() Цикл
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
			Если ОбъектМетаданных = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			ИсточникДанных = ОбъектМетаданных.ПолноеИмя() + "." + Реквизит.Имя;
			ИсточникиДанных.Добавить(ИсточникДанных);
		КонецЦикла;
	КонецЕсли;

	Для Каждого Тип Из Реквизит.Тип.Типы() Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено Или Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		ИсточникДанных = ОбъектМетаданных.ПолноеИмя();
		ИсточникиДанных.Добавить(ИсточникДанных);
	КонецЦикла;

	Для Каждого ИсточникДанных Из ИсточникиДанных Цикл
		ИсточникНайден = Ложь;
		Для Каждого ИсточникДоступныхПолей Из ИсточникиДоступныхПолей Цикл
			Если сКФ_СтрокаСоответствуетШаблону(ИсточникДанных, ИсточникДоступныхПолей.ИсточникДанных) Тогда
				Результат.Добавить(ИсточникДоступныхПолей);
				ИсточникНайден = Истина;

				Продолжить;
			КонецЕсли;
		КонецЦикла;

		Если Не ИсточникНайден И НастройкиСписка <> Неопределено И ЗначениеЗаполнено(НастройкиСписка.ПриОпределенииИсточниковДоступныхПолей) Тогда
			ИсточникиПолей	= сКФ_КоллекцияИсточниковДоступныхПолей();
			Модуль			= БазоваяПодсистемаСервер.ОН_ОбщийМодуль(НастройкиСписка.ПриОпределенииИсточниковДоступныхПолей);
			Модуль.ПриОпределенииИсточниковДоступныхПолей(ИсточникДанных, ИсточникиПолей);

			Если ЗначениеЗаполнено(ИсточникиПолей) Тогда
				Для Каждого ИсточникПолей Из ИсточникиПолей Цикл
					ИсточникДоступныхПолей = ИсточникиДоступныхПолей.Добавить();
					ЗаполнитьЗначенияСвойств(ИсточникДоступныхПолей, ИсточникПолей);
					Результат.Добавить(ИсточникДоступныхПолей);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	КонецЕсли;

	Для Каждого Тип Из Реквизит.Тип.Типы() Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено Или Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		ИсточникДанных = ОбъектМетаданных.ПолноеИмя();

		ИспользоватьИдентификаторыДляФормул = Ложь;
		Если НастройкиСписка <> Неопределено Тогда
			ИспользоватьИдентификаторыДляФормул = НастройкиСписка.ИспользоватьИдентификаторыДляФормул;
		КонецЕсли;

		Если ИспользоватьИдентификаторыДляФормул Тогда
			КомпоновщикНастроек = сКФ_КомпоновщикНастроекОбъекта(ОбъектМетаданных);
			ИсточникДоступныхПолей					= ИсточникиДоступныхПолей.Добавить();
			ИсточникДоступныхПолей.ИсточникДанных	= ИсточникДанных;
			ИсточникДоступныхПолей.КоллекцияПолей	= КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора;
			ИсточникДоступныхПолей.Замещать			= Истина;

			Результат.Добавить(ИсточникДоступныхПолей);

			КоллекцияПолей = сКФ_КоллекцияДопРеквизитов(ОбъектМетаданных.ПолноеИмя());
			Если КоллекцияПолей <> Неопределено Тогда
				ИсточникДоступныхПолей					= ИсточникиДоступныхПолей.Добавить();
				ИсточникДоступныхПолей.ИсточникДанных	= ИсточникДанных;
				ИсточникДоступныхПолей.КоллекцияПолей	= КоллекцияПолей;

				Результат.Добавить(ИсточникДоступныхПолей);
			КонецЕсли;

			КоллекцияПолей = сКФ_КоллекцияПолейКонтактнойИнформации(ОбъектМетаданных.ПолноеИмя());
			Если КоллекцияПолей <> Неопределено Тогда
				ИсточникДоступныхПолей					= ИсточникиДоступныхПолей.Добавить();
				ИсточникДоступныхПолей.ИсточникДанных	= ИсточникДанных;
				ИсточникДоступныхПолей.КоллекцияПолей	= КоллекцияПолей;

				Результат.Добавить(ИсточникДоступныхПолей);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция сКФ_СтрокаСоответствуетШаблону(Знач Строка, Знач Шаблон)
	Если Не ЗначениеЗаполнено(Шаблон) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Не СтрНайти(Шаблон, "*") Тогда
		Возврат Строка = Шаблон;
	КонецЕсли;

	Строка						= СтрСоединить(СтрРазделить(Строка, " " + Символы.ПС + Символы.ВК + Символы.Таб, Ложь), " ");
	СтрокаСоответствуетШаблону	= Истина;

	Для Каждого ЧастиШаблона Из СтрРазделить(Шаблон, "*", Истина) Цикл
		ФрагментДляПоиска = СтрСоединить(СтрРазделить(ЧастиШаблона, " " + Символы.ПС + Символы.ВК + Символы.Таб, Ложь), " ");

		Если Не ЗначениеЗаполнено(Строка) И ФрагментДляПоиска = "" Тогда
			СтрокаСоответствуетШаблону = Ложь;

			Прервать;
		КонецЕсли;

		Позиция = СтрНайти(Строка, ФрагментДляПоиска);
		Если Позиция = 0 Тогда
			СтрокаСоответствуетШаблону = Ложь;

			Прервать;
		КонецЕсли;

		Строка = Сред(Строка, Позиция + СтрДлина(ФрагментДляПоиска));
	КонецЦикла;

	Если Не СтрЗаканчиваетсяНа(Шаблон, "*") И ЗначениеЗаполнено(Строка) Тогда
		СтрокаСоответствуетШаблону = Ложь;
	КонецЕсли;

	Возврат СтрокаСоответствуетШаблону;
КонецФункции

Функция сКФ_КомпоновщикНастроекОбъекта(ОбъектМетаданных)
	СхемаКомпоновкиДанных = Неопределено;

	Если ТипЗнч(ОбъектМетаданных) = Тип("Строка") Тогда
		СхемаКомпоновкиДанных = ПолучитьОбщийМакет("ДанныеПечати" + ОбъектМетаданных);
	Иначе
		ЕстьДанныеПечати = ОбъектМетаданных.Макеты.Найти("ДанныеПечати") <> Неопределено;
		Если ЕстьДанныеПечати Тогда
			МенеджерОбъекта = БазоваяПодсистемаСервер.ОН_МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
			СхемаКомпоновкиДанных = МенеджерОбъекта.ПолучитьМакет("ДанныеПечати");
		Иначе
			ТекстЗапроса			= сКФ_ТекстЗапроса(ОбъектМетаданных.ПолноеИмя());
			СхемаКомпоновкиДанных	= сКФ_СхемаКомпоновкиДанных(ТекстЗапроса);
		КонецЕсли;
	КонецЕсли;

	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);

	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

	Возврат КомпоновщикНастроек;
КонецФункции

Функция сКФ_СхемаКомпоновкиДанных(ТекстЗапроса)
	СхемаКомпоновкиДанных				= Новый СхемаКомпоновкиДанных;

	ИсточникДанных						= СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя					= "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных	= "local";

	НаборДанных									= СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных					= "ИсточникДанных1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей	= Истина;
	НаборДанных.Запрос							= ТекстЗапроса;
	НаборДанных.Имя								= "НаборДанных1";

	Возврат СхемаКомпоновкиДанных;
КонецФункции

Функция сКФ_ТекстЗапроса(ТипыИзменяемыхОбъектов, ОграничитьВыборку = Ложь)
	ОбъектыМетаданных = Новый Массив;
	Для Каждого ИмяОбъекта Из СтрРазделить(ТипыИзменяемыхОбъектов, ",", Ложь) Цикл
		ОбъектыМетаданных.Добавить(Метаданные.НайтиПоПолномуИмени(ИмяОбъекта));
	КонецЦикла;

	СтруктураОбъектов = сКФ_ОбщиеРеквизитыОбъектов(ТипыИзменяемыхОбъектов);

	Результат = "";
	ПсевдонимТаблицы = "ПсевдонимЗаданнойТаблицы";
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		Если Не ПустаяСтрока(Результат) Тогда
			Результат = Результат + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
		КонецЕсли;

		ТекстЗапроса = "";

		Для Каждого ИмяРеквизита Из СтруктураОбъектов.Реквизиты Цикл
			Если Не ПустаяСтрока(ТекстЗапроса) Тогда
				ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС;
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + ПсевдонимТаблицы + "." + ИмяРеквизита + " КАК " + ИмяРеквизита;
		КонецЦикла;

		Для Каждого ТабличнаяЧасть Из СтруктураОбъектов.ТабличныеЧасти Цикл
			ИмяТабличнойЧасти	= ТабличнаяЧасть.Ключ;
			ТекстЗапроса		= ТекстЗапроса + "," + Символы.ПС + ПсевдонимТаблицы + "." + ИмяТабличнойЧасти + ".(";

			СтрокаРеквизитов = "НомерСтроки";
			РеквизитыТабличнойЧасти = ТабличнаяЧасть.Значение;
			Для Каждого ИмяРеквизита Из РеквизитыТабличнойЧасти Цикл
				Если Не ПустаяСтрока(СтрокаРеквизитов) Тогда
					СтрокаРеквизитов = СтрокаРеквизитов + "," + Символы.ПС;
				КонецЕсли;
				СтрокаРеквизитов = СтрокаРеквизитов + ИмяРеквизита;
			КонецЦикла;
			ТекстЗапроса = ТекстЗапроса + СтрокаРеквизитов +"
			|)";
		КонецЦикла;

		ТекстЗапроса = "ВЫБРАТЬ " + ?(ОграничитьВыборку, "ПЕРВЫЕ 1001 ", "") //@query-part
			+ ТекстЗапроса + Символы.ПС + "
			|ИЗ
			|	"+ ОбъектМетаданных.ПолноеИмя() + " КАК " + ПсевдонимТаблицы;

		Результат = Результат + ТекстЗапроса;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция сКФ_ОбщиеРеквизитыОбъектов(ТипыОбъектов) Экспорт
	ОбъектыМетаданных = Новый Массив;
	Для Каждого ИмяОбъекта Из СтрРазделить(ТипыОбъектов, ",", Ложь) Цикл
		ОбъектыМетаданных.Добавить(Метаданные.НайтиПоПолномуИмени(ИмяОбъекта));
	КонецЦикла;

	Результат = Новый Структура;
	Результат.Вставить("Реквизиты",			Новый Массив);
	Результат.Вставить("ТабличныеЧасти",	Новый Структура);

	Если ОбъектыМетаданных.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;

	ОбщийСписокРеквизитов = сКФ_СписокЭлементов(ОбъектыМетаданных[0].Реквизиты, Ложь);
	Для Индекс = 1 По ОбъектыМетаданных.Количество() - 1 Цикл
		ОбщийСписокРеквизитов = сКФ_ПересечениеРеквизитов(ОбщийСписокРеквизитов, ОбъектыМетаданных[Индекс].Реквизиты);
	КонецЦикла;

	СтандартныеРеквизиты = ОбъектыМетаданных[0].СтандартныеРеквизиты;
	Для Индекс = 1 По ОбъектыМетаданных.Количество() - 1 Цикл
		СтандартныеРеквизиты = сКФ_ПересечениеРеквизитов(СтандартныеРеквизиты, ОбъектыМетаданных[Индекс].СтандартныеРеквизиты);
	КонецЦикла;
	Для Каждого Реквизит Из СтандартныеРеквизиты Цикл
		ОбщийСписокРеквизитов.Добавить(Реквизит);
	КонецЦикла;

	Результат.Реквизиты = сКФ_СписокЭлементов(ОбщийСписокРеквизитов);

	ТабличныеЧасти = сКФ_СписокЭлементов(ОбъектыМетаданных[0].ТабличныеЧасти);
	Для Индекс = 1 По ОбъектыМетаданных.Количество() - 1 Цикл
		ТабличныеЧасти = сКФ_ПересечениеМножеств(ТабличныеЧасти, сКФ_СписокЭлементов(ОбъектыМетаданных[Индекс].ТабличныеЧасти));
	КонецЦикла;

	Для Каждого ИмяТабличнойЧасти Из ТабличныеЧасти Цикл
		РеквизитыТабличнойЧасти = сКФ_СписокЭлементов(ОбъектыМетаданных[0].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты, Ложь);
		Для Индекс = 1 По ОбъектыМетаданных.Количество() - 1 Цикл
			РеквизитыТабличнойЧасти = сКФ_ПересечениеРеквизитов(РеквизитыТабличнойЧасти, ОбъектыМетаданных[Индекс].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты);
		КонецЦикла;
		Если РеквизитыТабличнойЧасти.Количество() > 0 Тогда
			Результат.ТабличныеЧасти.Вставить(ИмяТабличнойЧасти, сКФ_СписокЭлементов(РеквизитыТабличнойЧасти));
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция сКФ_ПересечениеМножеств(Множество1, Множество2) Экспорт
	Результат = Новый Массив;

	Для Каждого Элемент Из Множество2 Цикл
		Индекс = Множество1.Найти(Элемент);
		Если Индекс <> Неопределено Тогда
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция сКФ_ПересечениеРеквизитов(КоллекцияРеквизитов1, КоллекцияРеквизитов2)
	Результат = Новый Массив;

	Для Каждого Реквизит2 Из КоллекцияРеквизитов2 Цикл
		Для Каждого Реквизит1 Из КоллекцияРеквизитов1 Цикл
			Если Реквизит1.Имя = Реквизит2.Имя И (Реквизит1.Тип = Реквизит2.Тип Или Реквизит1.Имя = "Ссылка") Тогда
				Результат.Добавить(Реквизит1);

				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция сКФ_СписокЭлементов(Коллекция, ТолькоИмена = Истина)
	Результат = Новый Массив;
	Для Каждого Элемент Из Коллекция Цикл
		Если ТолькоИмена Тогда
			Результат.Добавить(Элемент.Имя);
		Иначе
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Процедура сКФ_ЗаполнитьСписокДоступныхПолей(Форма, ПараметрыЗаполнения) Экспорт
	ИдентификаторСтроки = ПараметрыЗаполнения.ИдентификаторСтроки;
	ИмяСписка = ПараметрыЗаполнения.ИмяСписка;

	сКФ_РазвернутьРеквизит(ИдентификаторСтроки, ИмяСписка, Форма);
КонецПроцедуры

Функция сКФ_СписокИсточниковДоступныхПолей(Форма, ИмяСпискаПолей)
	ИмяСпискаИсточников = КонструкторФормулКлиентСервер.КФ_НастройкиСпискаПолей(Форма, ИмяСпискаПолей).ИмяСпискаИсточников;

	Возврат Форма[ИмяСпискаИсточников];
КонецФункции

Функция сКФ_СписокСвойствДляВидаОбъектов(ВидОбъектов)
	Результат = Новый Массив;

	ВидыСвойств = Новый Массив;
	ВидыСвойств.Добавить("ДополнительныеРеквизиты");
	ВидыСвойств.Добавить("ДополнительныеСведения");

	// Зарезервировано для новых подсистем

	Возврат Результат;
КонецФункции

Функция сКФ_КоллекцияДопРеквизитов(ИмяОбъектаМетаданных)
	СписокСвойств = сКФ_СписокСвойствДляВидаОбъектов(ИмяОбъектаМетаданных);
	Если Не ЗначениеЗаполнено(СписокСвойств) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ЗначенияРеквизитов = БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъектов(СписокСвойств, "Заголовок,ИдентификаторДляФормул,ТипЗначения");

	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;

	ИсточникДанных						= СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя					= "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных	= "local";

	НаборДанных					= СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных	= "ИсточникДанных1";
	НаборДанных.Имя				= "НаборДанных1";

	Для Каждого Элемент Из ЗначенияРеквизитов Цикл
		Свойство			= Элемент.Значение;
		Поле				= НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		Поле.Поле			= Свойство.ИдентификаторДляФормул;
		Поле.ПутьКДанным	= Свойство.ИдентификаторДляФормул;
		Если ЗначениеЗаполнено(Свойство.Заголовок) Тогда
			Поле.Заголовок = Свойство.Заголовок;
		КонецЕсли;
		Поле.ТипЗначения = Свойство.ТипЗначения;
	КонецЦикла;

	АдресСхемы					= ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных);
	ИсточникДоступныхНастроек	= Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);

	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

	Возврат КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора;
КонецФункции

Функция сКФ_КоллекцияПолейКонтактнойИнформации(ИмяОбъектаМетаданных)
	ВидыКонтактнойИнформации = КонтактнаяИнформацияСервер.УКИ_ВидыКонтактнойИнформацииОбъекта(БазоваяПодсистемаСервер.ОН_МенеджерОбъектаПоПолномуИмени(ИмяОбъектаМетаданных).ПустаяСсылка());

	Если Не ЗначениеЗаполнено(ВидыКонтактнойИнформации) Тогда
		Возврат Неопределено;
	КонецЕсли;

	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;

	ИсточникДанных						= СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя					= "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных	= "local";

	НаборДанных					= СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных	= "ИсточникДанных1";
	НаборДанных.Имя				= "НаборДанных1";

	Для Каждого ВидКонтактнойИнформации Из ВидыКонтактнойИнформации Цикл
		Если Не ЗначениеЗаполнено(ВидКонтактнойИнформации.ИдентификаторДляФормул) Тогда
			Продолжить;
		КонецЕсли;
		Поле				= НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		Поле.Поле			= ВидКонтактнойИнформации.ИдентификаторДляФормул;
		Поле.ПутьКДанным	= ВидКонтактнойИнформации.ИдентификаторДляФормул;
		Если ЗначениеЗаполнено(ВидКонтактнойИнформации.Наименование) Тогда
			Поле.Заголовок = ВидКонтактнойИнформации.Наименование;
		КонецЕсли;
		Поле.ТипЗначения = Новый ОписаниеТипов("Строка");
	КонецЦикла;

	АдресСхемы					= ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных);
	ИсточникДоступныхНастроек	= Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);

	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

	Возврат КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора;
КонецФункции

Процедура сКФ_ВыполнитьПоискВСпискеПолей(Форма) Экспорт
	Для Каждого Элемент Из Форма.ПодключенныеСпискиПолей Цикл
		ИмяСпискаПолей				= Элемент.ИмяСпискаПолей;
		ИмяРеквизитаСтрокиПоиска	= "СтрокаПоиска" + ИмяСпискаПолей;
		Отбор			= Форма[ИмяРеквизитаСтрокиПоиска];
		ОтборУстановлен	= ЗначениеЗаполнено(Отбор);
		Если ЗначениеЗаполнено(Отбор) Тогда
			сКФ_УстановитьОтбор(Форма, ИмяСпискаПолей, Отбор, Форма[ИмяСпискаПолей]);
		КонецЕсли;
		Форма.Элементы[ИмяСпискаПолей + "Представление"].Видимость				= НЕ ОтборУстановлен;
		Форма.Элементы[ИмяСпискаПолей + "ПредставлениеПутиКДанным"].Видимость	= ОтборУстановлен;
		Форма.Элементы[ИмяСпискаПолей].Отображение								= ?(ОтборУстановлен, ОтображениеТаблицы.Список, ОтображениеТаблицы.Дерево);
	КонецЦикла;
КонецПроцедуры

Функция сКФ_УстановитьОтбор(Знач Форма, Знач ИмяСписка, Знач Отбор, Знач КоллекцияРеквизитов = Неопределено, Знач Уровень = 0)
	Уровень								= Уровень + 1;
	ЕстьРеквизитыСоответствующиеОтбору	= Ложь;
	Для Каждого Реквизит Из КоллекцияРеквизитов.ПолучитьЭлементы() Цикл
		Если сКФ_РодительскийРеквизитСоответствуетОтбору(Реквизит) Тогда
			Реквизит.СоответствуетОтбору = Ложь;
		Иначе
			ФорматированнаяСтрока = сКФ_НайтиТекстВСтроке(Реквизит.ПредставлениеПутиКДанным, Отбор);
			Реквизит.СоответствуетОтбору = ФорматированнаяСтрока <> Неопределено;
			Если Реквизит.СоответствуетОтбору Тогда
				Реквизит.ПредставлениеПутиКДанным = ФорматированнаяСтрока;
			КонецЕсли;
		КонецЕсли;
		Если Не Реквизит.СоответствуетОтбору И (Уровень < 2 Или Реквизит.Поле <> Неопределено И СтрНачинаетсяС(Отбор, Реквизит.ПредставлениеПутиКДанным)) Тогда
			сКФ_РазвернутьРеквизит(Реквизит.ПолучитьИдентификатор(), ИмяСписка, Форма);
		КонецЕсли;
		Реквизит.ПодчиненныйЭлементСоответствуетОтбору	= сКФ_УстановитьОтбор(Форма, ИмяСписка, Отбор, Реквизит, Уровень);
		ЕстьРеквизитыСоответствующиеОтбору				= ЕстьРеквизитыСоответствующиеОтбору Или Реквизит.СоответствуетОтбору Или Реквизит.ПодчиненныйЭлементСоответствуетОтбору;
	КонецЦикла;

	Возврат ЕстьРеквизитыСоответствующиеОтбору;
КонецФункции

Функция сКФ_РодительскийРеквизитСоответствуетОтбору(Реквизит)
	Родитель = Реквизит.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		Возврат Родитель.СоответствуетОтбору Или сКФ_РодительскийРеквизитСоответствуетОтбору(Родитель);
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Функция сКФ_ФормулаИзПредставления(Форма, ПредставлениеФормулы) Экспорт
	ЭлементыФормулы		= сКФ_ЭлементыФормулы(ПредставлениеФормулы);
	Выражение			= ПредставлениеФормулы;
	ЗаменяемыеЭлементы	= Новый Соответствие;

	Для Каждого Элемент Из Форма.ПодключенныеСпискиПолей Цикл
		ИмяСпискаПолей = Элемент.ИмяСпискаПолей;
		КоллекцияПолей = Форма[ИмяСпискаПолей];
		СкобкиИдентификаторов = Элемент.СкобкиИдентификаторов;

		Для Каждого ОписаниеЭлемента Из ЭлементыФормулы.ОперандыИФункции Цикл
			ПредставлениеОперанда	= ЭлементыФормулы.ВсеЭлементы[ОписаниеЭлемента.Ключ];
			ЭтоФункция				= ОписаниеЭлемента.Значение;

			ПутьКДанным = сКФ_ОчиститьКвадратныеСкобки(ПредставлениеОперанда);
			Реквизит = сКФ_НайтиРеквизит(Форма, ИмяСпискаПолей, ПутьКДанным, КоллекцияПолей.ПолучитьЭлементы(), Истина);
			Если Реквизит <> Неопределено  Тогда
				Если ЭтоФункция <> Реквизит.ЭтоФункция Тогда
					Продолжить;
				КонецЕсли;

				Операнд = сКФ_ОчиститьКвадратныеСкобки(Реквизит.ПутьКДанным);
				Если СкобкиИдентификаторов Тогда
					Операнд = сКФ_ОбернутьВКвадратныеСкобки(Операнд);
				КонецЕсли;
				ЗаменяемыеЭлементы.Вставить(ОписаниеЭлемента.Ключ, Операнд);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	сКФ_ЗаменитьЭлементыФормулы(Выражение, ЭлементыФормулы, ЗаменяемыеЭлементы);

	Возврат Выражение;
КонецФункции

Функция сКФ_ПредставлениеФормулы(Форма, Формула) Экспорт
	ЭлементыФормулы		= сКФ_ЭлементыФормулы(Формула);
	Выражение			= Формула;
	ЗаменяемыеЭлементы	= Новый Соответствие;

	Для Каждого Элемент Из Форма.ПодключенныеСпискиПолей Цикл
		ИмяСпискаПолей		= Элемент.ИмяСпискаПолей;
		КоллекцияПолей		= Форма[ИмяСпискаПолей];
		СкобкиПредставлений = Элемент.СкобкиПредставлений;

		Для Каждого ОписаниеЭлемента Из ЭлементыФормулы.ОперандыИФункции Цикл
			Операнд		= ЭлементыФормулы.ВсеЭлементы[ОписаниеЭлемента.Ключ];
			ЭтоФункция	= ОписаниеЭлемента.Значение;

			ПутьКДанным	= сКФ_ОчиститьКвадратныеСкобки(Операнд);
			Реквизит	= сКФ_НайтиРеквизит(Форма, ИмяСпискаПолей, ПутьКДанным, КоллекцияПолей.ПолучитьЭлементы(), Ложь);
			Если Реквизит <> Неопределено Тогда
				Если ЭтоФункция <> Реквизит.ЭтоФункция Тогда
					Продолжить;
				КонецЕсли;

				ПредставлениеОперанда = Реквизит.ПредставлениеПутиКДанным;
				Если СкобкиПредставлений Тогда
					ПредставлениеОперанда = сКФ_ОбернутьВКвадратныеСкобки(Реквизит.ПредставлениеПутиКДанным);
				КонецЕсли;
				ЗаменяемыеЭлементы.Вставить(ОписаниеЭлемента.Ключ, ПредставлениеОперанда);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	сКФ_ЗаменитьЭлементыФормулы(Выражение, ЭлементыФормулы, ЗаменяемыеЭлементы);

	Возврат Выражение;
КонецФункции

Функция сКФ_ВыражениеДляПроверки(Форма, ПредставлениеФормулы, ИмяСпискаОперандов) Экспорт
	ЭлементыФормулы		= сКФ_ЭлементыФормулы(ПредставлениеФормулы);
	Выражение			= ПредставлениеФормулы;
	ЗаменяемыеЭлементы	= Новый Соответствие;

	Для Каждого Элемент Из Форма.ПодключенныеСпискиПолей Цикл
		ИмяСпискаПолей			= Элемент.ИмяСпискаПолей;
		КоллекцияПолей			= Форма[ИмяСпискаПолей];
		СкобкиИдентификаторов	= Элемент.СкобкиИдентификаторов;

		Для Каждого ОписаниеЭлемента Из ЭлементыФормулы.ОперандыИФункции Цикл
			ПредставлениеОперанда	= ЭлементыФормулы.ВсеЭлементы[ОписаниеЭлемента.Ключ];
			ЭтоФункция				= ОписаниеЭлемента.Значение;

			ПутьКДанным	= сКФ_ОчиститьКвадратныеСкобки(ПредставлениеОперанда);
			Реквизит	= сКФ_НайтиРеквизит(Форма, ИмяСпискаПолей, ПутьКДанным, КоллекцияПолей.ПолучитьЭлементы(), Истина);
			Если Реквизит <> Неопределено  Тогда
				Если ЭтоФункция <> Реквизит.ЭтоФункция Тогда
					Продолжить;
				КонецЕсли;

				Если ИмяСпискаОперандов = ИмяСпискаПолей Тогда
					Операнд = Реквизит.Тип.ПривестиЗначение(1);
					Если ТипЗнч(Операнд) = Тип("Строка") Тогда
						Операнд = """" + Операнд + """";
					КонецЕсли;
					Если ТипЗнч(Операнд) = Тип("Булево") Тогда
						Операнд = Формат(Операнд, "БЛ=Ложь; БИ=Истина"); // Должно быть на языке конфигурации.
					КонецЕсли;
					Если ТипЗнч(Операнд) = Тип("Дата") Тогда
						Операнд = "'" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММддЧЧмм") +  "'"; // Для использования в выражении Вычислить().
					КонецЕсли;
					Если БазоваяПодсистемаСервер.ОН_ЭтоСсылка(ТипЗнч(Операнд)) Тогда
						Операнд = "1";
					КонецЕсли;
				Иначе
					Операнд = сКФ_ОчиститьКвадратныеСкобки(Реквизит.ПутьКДанным);
					Если СкобкиИдентификаторов Тогда
						Операнд = сКФ_ОбернутьВКвадратныеСкобки(Операнд);
					КонецЕсли;
				КонецЕсли;
				ЗаменяемыеЭлементы.Вставить(ОписаниеЭлемента.Ключ, Операнд);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	сКФ_ЗаменитьЭлементыФормулы(Выражение, ЭлементыФормулы, ЗаменяемыеЭлементы);
	Выражение = сКФ_ФорматироватьЧисла(Выражение);

	Возврат Выражение;
КонецФункции

Функция сКФ_ОчиститьКвадратныеСкобки(Строка)
	Если СтрНачинаетсяС(Строка, "[") И СтрЗаканчиваетсяНа(Строка, "]") Тогда
		Возврат Сред(Строка, 2, СтрДлина(Строка) - 2);
	КонецЕсли;

	Возврат Строка;
КонецФункции

Функция сКФ_ОбернутьВКвадратныеСкобки(Строка)
	Возврат "[" + Строка + "]";
КонецФункции

Функция сКФ_НайтиРеквизит(Форма, ИмяСписка, ПутьКДанным, КоллекцияРеквизитов, ИскатьПоПредставлению)
	ИмяПоляПоиска = "ПутьКДанным";
	Если ИскатьПоПредставлению Тогда
		ИмяПоляПоиска = "ПредставлениеПутиКДанным";
	КонецЕсли;

	Владелец	= Неопределено;
	Папки		= Новый Массив;

	Для Каждого Реквизит Из КоллекцияРеквизитов Цикл
		Если НРег(Реквизит[ИмяПоляПоиска]) = НРег(ПутьКДанным) Тогда
			Возврат Реквизит;
		КонецЕсли;
		Если Реквизит.Папка Тогда
			Папки.Добавить(Реквизит);
		Иначе
			Если СтрНачинаетсяС(НРег(ПутьКДанным), НРег(Реквизит[ИмяПоляПоиска]) + ".") Тогда
				Владелец = Реквизит;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если Владелец <> Неопределено Тогда
		сКФ_РазвернутьРеквизит(Владелец.ПолучитьИдентификатор(), ИмяСписка, Форма);

		Возврат сКФ_НайтиРеквизит(Форма, ИмяСписка, ПутьКДанным, Владелец.ПолучитьЭлементы(), ИскатьПоПредставлению);
	КонецЕсли;

	Для Каждого Папка Из Папки Цикл
		сКФ_РазвернутьРеквизит(Папка.ПолучитьИдентификатор(), ИмяСписка, Форма);
		Реквизит = сКФ_НайтиРеквизит(Форма, ИмяСписка, ПутьКДанным, Папка.ПолучитьЭлементы(), ИскатьПоПредставлению);

		Если Реквизит <> Неопределено Тогда
			Возврат Реквизит;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

Функция сКФ_РеквизитыПодключаемогоСписка()
	Результат = Новый Структура;

	Результат.Вставить("Имя",									Новый ОписаниеТипов("Строка"));
	Результат.Вставить("Заголовок",								Новый ОписаниеТипов("Строка"));
	Результат.Вставить("Поле",									Новый ОписаниеТипов());
	Результат.Вставить("ПутьКДанным",							Новый ОписаниеТипов("Строка"));
	Результат.Вставить("ПредставлениеПутиКДанным",				Новый ОписаниеТипов);
	Результат.Вставить("Тип",									Новый ОписаниеТипов("ОписаниеТипов"));
	Результат.Вставить("Картинка",								Новый ОписаниеТипов("Картинка"));
	Результат.Вставить("Папка",									Новый ОписаниеТипов("Булево"));
	Результат.Вставить("Таблица",								Новый ОписаниеТипов("Булево"));
	Результат.Вставить("СвойНаборПолей",						Новый ОписаниеТипов("Булево"));
	Результат.Вставить("Отступ",								Новый ОписаниеТипов("Строка"));
	Результат.Вставить("СоответствуетОтбору",					Новый ОписаниеТипов("Булево"));
	Результат.Вставить("ПодчиненныйЭлементСоответствуетОтбору",	Новый ОписаниеТипов("Булево"));
	Результат.Вставить("ЭтоГруппа",								Новый ОписаниеТипов("Булево"));
	Результат.Вставить("ЭтоФункция",							Новый ОписаниеТипов("Булево"));

	Возврат Результат;
КонецФункции

Процедура сКФ_ОбновитьКоллекцииПолей(Форма, КоллекцииПолей, ИмяСпискаПолей = "ДоступныеПоля") Экспорт
	ИсточникиДоступныхПолей		= сКФ_СписокИсточниковДоступныхПолей(Форма, ИмяСпискаПолей); // ДанныеФормыКоллекция
	ИмяОсновногоИсточникаДанных	= сКФ_ИмяОсновногоИсточникаДанных(ИсточникиДоступныхПолей);
	Отбор = Новый Структура("ИсточникДанных", ИмяОсновногоИсточникаДанных);
	Для Каждого СтрокаТаблицы Из ИсточникиДоступныхПолей.НайтиСтроки(Отбор) Цикл
		ИсточникиДоступныхПолей.Удалить(СтрокаТаблицы);
	КонецЦикла;

	Для Индекс = 0 По КоллекцииПолей.ВГраница() Цикл
		КоллекцияПолей							= КоллекцииПолей[Индекс];
		ИсточникДоступныхПолей					= ИсточникиДоступныхПолей.Вставить(Индекс);
		ИсточникДоступныхПолей.ИсточникДанных	= ИмяОсновногоИсточникаДанных;
		ИсточникДоступныхПолей.КоллекцияПолей	= КоллекцияПолей;
	КонецЦикла;

	Форма[ИмяСпискаПолей].ПолучитьЭлементы().Очистить();
	сКФ_ЗаполнитьСписокДоступныхРеквизитов(Форма[ИмяСпискаПолей], ИсточникиДоступныхПолей);
КонецПроцедуры

Функция сКФ_ТаблицаПолей() Экспорт
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор",	Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление",	Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ТипЗначения",	Новый ОписаниеТипов("ОписаниеТипов"));
	Результат.Колонки.Добавить("Картинка",		Новый ОписаниеТипов("Картинка"));
	Результат.Колонки.Добавить("Порядок",		Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Формат",		Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЭтоФункция",	Новый ОписаниеТипов("Булево"));

	Возврат Результат;
КонецФункции

Функция сКФ_ДеревоПолей() Экспорт
	Результат = Новый ДеревоЗначений;
	Результат.Колонки.Добавить("Идентификатор",	Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление",	Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ТипЗначения",	Новый ОписаниеТипов("ОписаниеТипов"));
	Результат.Колонки.Добавить("Картинка",		Новый ОписаниеТипов("Картинка"));
	Результат.Колонки.Добавить("Порядок",		Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Папка",			Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Таблица",		Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Формат",		Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЭтоФункция",	Новый ОписаниеТипов("Булево"));

	Возврат Результат;
КонецФункции

Функция сКФ_КоллекцияПолей(Знач ИсточникПолей, Форма = Неопределено, Знач ИмяКоллекцииСКД = Неопределено) Экспорт
	КомпоновщикНастроек = сКФ_КомпоновщикНастроекИсточникаПолей(ИсточникПолей, Форма);
	Если КомпоновщикНастроек = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат сКФ_КоллекцияПолейКомпоновщикаНастроек(КомпоновщикНастроек, ИмяКоллекцииСКД);
КонецФункции

Функция сКФ_КомпоновщикНастроекИсточникаПолей(Знач ИсточникПолей, Форма = Неопределено) Экспорт
	Если ЭтоАдресВременногоХранилища(ИсточникПолей) Тогда
		ИсточникПолей = ПолучитьИзВременногоХранилища(ИсточникПолей);
	КонецЕсли;

	СхемаКомпоновкиДанных = ИсточникПолей;
	Если ТипЗнч(ИсточникПолей) = Тип("ТаблицаЗначений") Тогда
		СхемаКомпоновкиДанных = сКФ_СхемаКомпоновкиДанныхИзТаблицыЗначений(ИсточникПолей);
	ИначеЕсли ТипЗнч(ИсточникПолей) = Тип("ДеревоЗначений") Тогда
		СхемаКомпоновкиДанных = сКФ_СхемаКомпоновкиДанныхИзДереваЗначений(ИсточникПолей);
	КонецЕсли;

	Если ТипЗнч(СхемаКомпоновкиДанных) <> Тип("СхемаКомпоновкиДанных") Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Форма <> Неопределено Тогда
		УникальныйИдентификатор = Форма.УникальныйИдентификатор;
	КонецЕсли;
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);

	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

	Возврат КомпоновщикНастроек;
КонецФункции

Функция сКФ_КоллекцияПолейКомпоновщикаНастроек(Знач КомпоновщикНастроек, Знач ИмяКоллекцииСКД = Неопределено)
	Если Не ЗначениеЗаполнено(ИмяКоллекцииСКД) Тогда
		ИмяКоллекцииСКД = "ДоступныеПоляОтбора";
	КонецЕсли;

	ОписаниеИмениКоллекцииПолей	= СтрРазделить(ИмяКоллекцииСКД, ".");
	КоллекцияПолей				= КомпоновщикНастроек.Настройки;

	Для Каждого Элемент Из ОписаниеИмениКоллекцииПолей Цикл
		КоллекцияПолей = КоллекцияПолей[Элемент];
	КонецЦикла;

	Возврат КоллекцияПолей;
КонецФункции

Функция сКФ_ЗначениеВJSON(Значение)
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Значение);

	Возврат ЗаписьJSON.Закрыть();
КонецФункции

Функция сКФ_JSONВЗначение(Строка, ИменаСвойствСоЗначениямиДата = Неопределено)
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);

	Возврат ПрочитатьJSON(ЧтениеJSON, Истина, ИменаСвойствСоЗначениямиДата);
КонецФункции

Функция сКФ_КартинкаТипа(ОписаниеТипов)
	Картинка = БиблиотекаКартинок.ТипНеопределено;
	Если ОписаниеТипов.Типы().Количество() = 1 Тогда
		Тип = ОписаниеТипов.Типы()[0];
		Если Тип = Тип("Число") Тогда
			Картинка = БиблиотекаКартинок.ТипЧисло;
		ИначеЕсли Тип = Тип("Дата") Тогда
			Картинка = БиблиотекаКартинок.ТипДата;
		ИначеЕсли Тип = Тип("Булево") Тогда
			Картинка = БиблиотекаКартинок.ТипБулево;
		ИначеЕсли Тип = Тип("Строка") Тогда
			Картинка = БиблиотекаКартинок.ТипСтрока;
		ИначеЕсли БазоваяПодсистемаСервер.ОН_ЭтоСсылка(Тип) Тогда
			Картинка = БиблиотекаКартинок.ТипСсылка;
		ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда
			Картинка = БиблиотекаКартинок.ТипИдентификатор;
		КонецЕсли;
	ИначеЕсли ОписаниеТипов.Типы().Количество() > 1 Тогда
		Картинка = БиблиотекаКартинок.ТипСоставнойОсновной;
	КонецЕсли;

	Возврат Картинка;
КонецФункции

Функция сКФ_СписокОператоров(ГруппыОператоров = Неопределено) Экспорт
	СписокОператоров =  сКФ_ДеревоПолей();

	Если ГруппыОператоров = Неопределено Тогда
		ГруппыОператоров = "Разделители, Операторы, ЛогическиеОператорыИКонстанты, ЧисловыеФункции, СтроковыеФункции, ПрочиеФункции";
	ИначеЕсли ГруппыОператоров = "ВсеОператорыСКД" Тогда
		ГруппыОператоров = "Операторы, ОперацииНадСтрокамиСКД, РаботаСДатамиСКД, ОперацииСравненияСКД, ЛогическиеОперацииСКД, АгрегатныеФункцииСКД";
	КонецЕсли;

	Для Каждого Элемент Из Новый Структура(ГруппыОператоров) Цикл
		ИмяГруппы = Элемент.Ключ;
		Если ИмяГруппы = "Разделители" Тогда
			сКФ_ДобавитьГруппуОператоровРазделители(СписокОператоров);
		ИначеЕсли ИмяГруппы = "Операторы" Тогда
			сКФ_ДобавитьГруппуОператоровОператоры(СписокОператоров);
		ИначеЕсли ИмяГруппы = "ЛогическиеОператорыИКонстанты" Тогда
			сКФ_ДобавитьГруппуОператоровЛогическиеОператорыИКонстанты(СписокОператоров);
		ИначеЕсли ИмяГруппы = "ЧисловыеФункции" Тогда
			сКФ_ДобавитьГруппуОператоровЧисловыеФункции(СписокОператоров);
		ИначеЕсли ИмяГруппы = "СтроковыеФункции" Тогда
			сКФ_ДобавитьГруппуОператоровСтроковыеФункции(СписокОператоров);
		ИначеЕсли ИмяГруппы = "ПрочиеФункции" Тогда
			сКФ_ДобавитьГруппуОператоровПрочиеФункции(СписокОператоров);
		ИначеЕсли ИмяГруппы = "ОперацииНадСтрокамиСКД" Тогда
			сКФ_ДобавитьГруппуОператоровОперацииНадСтроками(СписокОператоров);
		ИначеЕсли ИмяГруппы = "РаботаСДатамиСКД" Тогда
			сКФ_ДобавитьГруппуОператоровРаботаСДатами(СписокОператоров);
		ИначеЕсли ИмяГруппы = "ОперацииСравненияСКД" Тогда
			сКФ_ДобавитьГруппуОператоровОперацииСравнения(СписокОператоров);
		ИначеЕсли ИмяГруппы = "ЛогическиеОперацииСКД" Тогда
			сКФ_ДобавитьГруппуОператоровЛогическиеОперации(СписокОператоров);
		ИначеЕсли ИмяГруппы = "АгрегатныеФункцииСКД" Тогда
			сКФ_ДобавитьГруппуОператоровАгрегатныеФункции(СписокОператоров);
		КонецЕсли;
	КонецЦикла;

	Возврат СписокОператоров;
КонецФункции

Процедура сКФ_ДобавитьГруппуОператоровРазделители(СписокОператоров)
	Группа					= СписокОператоров.Строки.Добавить();
	Группа.Идентификатор	= "Разделители";
	Группа.Представление	= "Разделители";
	Группа.Порядок			= 1;

	Для Каждого Идентификатор Из СтрРазделить("/ | \ _ , . ( ) """, " ", Ложь) Цикл
		сКФ_ДобавитьОператорВГруппу(Группа, Идентификатор, , Новый ОписаниеТипов("Строка"));
	КонецЦикла;

	сКФ_ДобавитьОператорВГруппу(Группа, " ", "Пробел", Новый ОписаниеТипов("Строка"));
КонецПроцедуры

Процедура сКФ_ДобавитьГруппуОператоровОператоры(СписокОператоров)
	Группа					= СписокОператоров.Строки.Добавить();
	Группа.Идентификатор	= "Операторы";
	Группа.Представление	= "Операторы";
	Группа.Порядок			= 2;

	Для Каждого Идентификатор Из СтрРазделить("+ - * / %", " ", Ложь) Цикл
		сКФ_ДобавитьОператорВГруппу(Группа, Идентификатор, , Новый ОписаниеТипов("Число"));
	КонецЦикла;
КонецПроцедуры

Процедура сКФ_ДобавитьГруппуОператоровЛогическиеОператорыИКонстанты(СписокОператоров)
	Группа					= СписокОператоров.Строки.Добавить();
	Группа.Идентификатор	= "ЛогическиеОператорыИКонстанты";
	Группа.Представление	= "Логические операторы и константы";
	Группа.Порядок			= 3;

	Тип = Новый ОписаниеТипов("Булево");

	Для Каждого Идентификатор Из СтрРазделить("<,>,<=,>=,=,<>", ",", Ложь) Цикл
		сКФ_ДобавитьОператорВГруппу(Группа, Идентификатор, , Тип);
	КонецЦикла;

	сКФ_ДобавитьОператорВГруппу(Группа, "И", "И", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "Или", "Или", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "Не", "Не", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "Истина", "Истина", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "Ложь", "Ложь", Тип);
КонецПроцедуры

Процедура сКФ_ДобавитьГруппуОператоровЧисловыеФункции(СписокОператоров)
	Группа					= СписокОператоров.Строки.Добавить();
	Группа.Идентификатор	= "ЧисловыеФункции";
	Группа.Представление	= "Числовые функции";
	Группа.Порядок			= 4;
	Группа.Картинка 		= БиблиотекаКартинок.ТипФункция;

	Тип = Новый ОписаниеТипов("Число");

	сКФ_ДобавитьОператорВГруппу(Группа, "Макс",	"Максимум",		Тип,	Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "Мин",	"Минимум",		Тип,	Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "Окр",	"Округлить",	Тип,	Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "Цел",	"ЦелаяЧасть",	Тип,	Истина);
КонецПроцедуры

Процедура сКФ_ДобавитьГруппуОператоровСтроковыеФункции(СписокОператоров)
	Группа					= СписокОператоров.Строки.Добавить();
	Группа.Идентификатор	= "СтроковыеФункции";
	Группа.Представление	= "Строковые функции";
	Группа.Порядок			= 5;
	Группа.Картинка 		= БиблиотекаКартинок.ТипФункция;

	Тип = Новый ОписаниеТипов("Строка");

	сКФ_ДобавитьОператорВГруппу(Группа, "Строка",		"ПреобразоватьВСтроку",			Тип,							Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "ВРег",			"ВсеПрописные",					Тип,							Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "НРег",			"ВсеСтрочные",					Тип,							Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "ТРег",			"КаждоеСловоСПрописной",		Тип,							Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "Лев",			"СимволыСлева",					Тип,							Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "Прав",			"СимволыСправа",				Тип,							Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "СокрЛ",		"УбратьПробелыСлева",			Тип,							Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "СокрЛП",		"УбратьПробелыСлеваИСправа",	Тип,							Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "СокрП",		"УбратьПробелыСправа",			Тип,							Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "СтрЗаменить",	"ЗаменитьСимволыВСтроке",		Тип,							Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "СтрДлина",		"ДлинаСтроки",					Новый ОписаниеТипов("Число"),	Истина);
КонецПроцедуры

Процедура сКФ_ДобавитьГруппуОператоровПрочиеФункции(СписокОператоров)
	Группа					= СписокОператоров.Строки.Добавить();
	Группа.Идентификатор	= "ПрочиеФункции";
	Группа.Представление	= "Прочие функции";
	Группа.Порядок			= 6;
	Группа.Картинка 		= БиблиотекаКартинок.ТипФункция;

	сКФ_ДобавитьОператорВГруппу(Группа, "?",						"Условие",					Новый ОписаниеТипов("Булево"),	Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "ПредопределенноеЗначение",	"ПредопределенноеЗначение",	Новый ОписаниеТипов,			Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "ЗначениеЗаполнено",		"ЗначениеЗаполнено",		Новый ОписаниеТипов("Булево"),	Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "Формат",					"Формат",					Новый ОписаниеТипов("Строка"),	Истина);
КонецПроцедуры

Процедура сКФ_ДобавитьОператорВГруппу(Группа, Идентификатор, Знач Представление = Неопределено, Тип = Неопределено, ЭтоФункция = Ложь)
	Если Представление = Неопределено Тогда
		Представление = Идентификатор;
	КонецЕсли;

	Оператор				= Группа.Строки.Добавить();
	Оператор.Идентификатор	= Идентификатор;
	Оператор.Представление	= Представление;
	Оператор.ТипЗначения	= Тип;
	Оператор.Картинка		= БиблиотекаКартинок.Пустая;
	Оператор.ЭтоФункция		= ЭтоФункция;
КонецПроцедуры

Процедура сКФ_ДобавитьГруппуОператоровОперацииНадСтроками(СписокОператоров)
	Группа					= СписокОператоров.Строки.Добавить();
	Группа.Идентификатор	= "ОперацииНадСтроками";
	Группа.Представление	= "Операции над строками";
	Группа.Порядок			= 2;

	Тип = Новый ОписаниеТипов("Строка");

	сКФ_ДобавитьОператорВГруппу(Группа, "+", , Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "ПОДОБНО", "ПОДОБНО", Тип);
КонецПроцедуры

Процедура сКФ_ДобавитьГруппуОператоровОперацииСравнения(СписокОператоров)
	Группа					= СписокОператоров.Строки.Добавить();
	Группа.Идентификатор	= "ОперацииСравнения";
	Группа.Представление	= "Операции сравнения";
	Группа.Порядок			= 3;

	Тип = Новый ОписаниеТипов("Булево");

	Для Каждого Идентификатор Из СтрРазделить("<,>,<=,>=,=,<>", ",", Ложь) Цикл
		сКФ_ДобавитьОператорВГруппу(Группа, Идентификатор, , Тип);
	КонецЦикла;

	сКФ_ДобавитьОператорВГруппу(Группа, "В", "В", Тип, Истина);
КонецПроцедуры

Процедура сКФ_ДобавитьГруппуОператоровРаботаСДатами(СписокОператоров)
	Группа					= СписокОператоров.Строки.Добавить();
	Группа.Идентификатор	= "РаботаСДатамиСКД";
	Группа.Представление	= "Работа с датами";
	Группа.Порядок			= 2;
	Группа.Картинка			= БиблиотекаКартинок.ТипФункция;

	Тип = Новый ОписаниеТипов("Число");

	сКФ_ДобавитьОператорВГруппу(Группа, "ГОД",			"ГОД",			Тип, Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "МЕСЯЦ",		"МЕСЯЦ",		Тип, Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "ЧИСЛО",		"ЧИСЛО",		Тип, Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "ДЕНЬГОДА",		"ДЕНЬГОДА",		Тип, Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "ДЕНЬ",			"ДЕНЬ",			Тип, Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "НЕДЕЛЯ",		"НЕДЕЛЯ",		Тип, Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "ДЕНЬНЕДЕЛИ",	"ДЕНЬНЕДЕЛИ",	Тип, Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "ЧАС",			"ЧАС",			Тип, Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "МИНУТА",		"МИНУТА",		Тип, Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "СЕКУНДА",		"СЕКУНДА",		Тип, Истина);

	сКФ_ДобавитьОператорВГруппу(Группа, "НАЧАЛОПЕРИОДА",	"НАЧАЛОПЕРИОДА",	Новый ОписаниеТипов, Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "КОНЕЦПЕРИОДА",		"КОНЕЦПЕРИОДА",		Новый ОписаниеТипов, Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "ДОБАВИТЬКДАТЕ",	"ДОБАВИТЬКДАТЕ",	Новый ОписаниеТипов, Истина);

	сКФ_ДобавитьОператорВГруппу(Группа, "РАЗНОСТЬДАТ", "РАЗНОСТЬДАТ", Тип, Истина);
КонецПроцедуры

Процедура сКФ_ДобавитьГруппуОператоровЛогическиеОперации(СписокОператоров)
	Группа					= СписокОператоров.Строки.Добавить();
	Группа.Идентификатор	= "ЛогическиеОперации";
	Группа.Представление	= "Логические операции";
	Группа.Порядок			= 4;

	Тип = Новый ОписаниеТипов("Булево");

	сКФ_ДобавитьОператорВГруппу(Группа, "НЕ", "НЕ", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "И", "И", Тип);
	сКФ_ДобавитьОператорВГруппу(Группа, "ИЛИ", "ИЛИ", Тип);
КонецПроцедуры

Процедура сКФ_ДобавитьГруппуОператоровАгрегатныеФункции(СписокОператоров)
	Группа					= СписокОператоров.Строки.Добавить();
	Группа.Идентификатор	= "АгрегатныеФункции";
	Группа.Представление	= "Агрегатные функции";
	Группа.Порядок			= 5;
	Группа.Картинка			= БиблиотекаКартинок.ТипФункция;

	Тип = Новый ОписаниеТипов("Число");

	сКФ_ДобавитьОператорВГруппу(Группа, "СУММА",		"СУММА",		Тип, Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "КОЛИЧЕСТВО",	"КОЛИЧЕСТВО",	Тип, Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "МАКСИМУМ",		"МАКСИМУМ",		Тип, Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "МИНИМУМ",		"МИНИМУМ",		Тип, Истина);
	сКФ_ДобавитьОператорВГруппу(Группа, "СРЕДНЕЕ",		"СРЕДНЕЕ",		Тип, Истина);
КонецПроцедуры

Функция сКФ_ИмяОсновногоИсточникаДанных(ИсточникиДоступныхПолей)
	Если ИсточникиДоступныхПолей.Количество() > 0 Тогда
		Возврат ИсточникиДоступныхПолей[0].ИсточникДанных;
	КонецЕсли;

	Возврат "";
КонецФункции

Функция сКФ_ИмяПоля(Поле)
	ИмяПоля				= "";
	Строка				= Строка(Поле);
	ОткрывающихСкобок	= 0;

	Для Индекс = -СтрДлина(Строка) По -1 Цикл
		Позиция	= -Индекс;
		Символ	= Сред(Строка, Позиция, 1);

		Если Символ = "]" Тогда
			ОткрывающихСкобок = ОткрывающихСкобок + 1;
		КонецЕсли;

		Если Символ = "[" Тогда
			ОткрывающихСкобок = ОткрывающихСкобок - 1;
		КонецЕсли;

		Если Символ = "." И ОткрывающихСкобок = 0 Тогда
			Прервать;
		Иначе
			ИмяПоля = Символ + ИмяПоля;
		КонецЕсли;
	КонецЦикла;

	Возврат ИмяПоля;
КонецФункции

Функция сКФ_РеквизитыСпискаИсточниковДоступныхПолей()
	Результат = Новый Структура;

	Результат.Вставить("ИсточникДанных",						Новый ОписаниеТипов("Строка"));
	Результат.Вставить("КоллекцияПолей",						Новый ОписаниеТипов());
	Результат.Вставить("Замещать",								Новый ОписаниеТипов("Булево"));
	Результат.Вставить("СхемаКомпоновкиДанных",					Новый ОписаниеТипов());
	Результат.Вставить("ИдентификаторСхемыКомпоновкиДанных",	Новый ОписаниеТипов("Строка"));

	Возврат Результат;
КонецФункции


Функция сКФ_ФорматироватьЧисла(Строка, РазделительДробнойЧасти = ".")
	Результат				= "";
	Число					= "";
	ЕстьРазделительВЧисле	= Ложь;
	ПредыдущийСимвол		= "";

	ДлинаСтроки = СтрДлина(Строка);
	Для Индекс = 1 По ДлинаСтроки Цикл
		Если Индекс < ДлинаСтроки Тогда
			СледующийСимвол = Сред(Строка, Индекс + 1, 1);
		Иначе
			СледующийСимвол = "";
		КонецЕсли;
		Символ = Сред(Строка, Индекс, 1);

		ПредыдущийСимволЭтоРазделитель = ПредыдущийСимвол = "" Или СтрНайти("()[]/*-+%=<>, " + Символы.Таб + Символы.ПС, ПредыдущийСимвол) > 0;

		Если сКФ_ЭтоЦифра(Символ) И (ПредыдущийСимволЭтоРазделитель Или сКФ_ЭтоЦифра(ПредыдущийСимвол) И ЗначениеЗаполнено(Число)) Тогда
			Число = Число + Символ;
		ИначеЕсли Не ЕстьРазделительВЧисле И (Символ = "," Или Символ = ".") И сКФ_ЭтоЦифра(СледующийСимвол) И (сКФ_ЭтоЦифра(ПредыдущийСимвол) Или ПредыдущийСимволЭтоРазделитель) И ЗначениеЗаполнено(Число) Тогда
			Число					= Число + РазделительДробнойЧасти;
			ЕстьРазделительВЧисле	= Истина;
		Иначе
			Результат				= Результат + Число + Символ;
			Число					= "";
			ЕстьРазделительВЧисле	= Ложь;
		КонецЕсли;

		ПредыдущийСимвол	= Символ;
		Символ				= "";
	КонецЦикла;

	Результат = Результат + Число + Символ;

	Возврат Результат;
КонецФункции

Функция сКФ_ЭлементыФормулы(Знач Формула) Экспорт
	ВсеЭлементы			= Новый Массив;
	ОперандыИФункции	= Новый Соответствие;

	ЛогическиеОператоры = СтрРазделить("И,ИЛИ,НЕ", ",", Ложь);

	Разделители			= "()/*-+%=<>, " + Символы.Таб + Символы.ПС;
	ОткрывающихСкобок	= 0;
	ЭтоСтрокаВКавычках	= Ложь;

	Операнд = "";

	Для Индекс = 1 По СтрДлина(Формула) Цикл
		Символ			= Сред(Формула, Индекс, 1);
		ЭтоРазделитель	= СтрНайти(Разделители, Символ) > 0;

		Если ОткрывающихСкобок = 0 И Символ = """" Тогда
			ЭтоСтрокаВКавычках = Не ЭтоСтрокаВКавычках;
			ВсеЭлементы.Добавить(Символ);

			Продолжить;
		КонецЕсли;

		Если ЭтоСтрокаВКавычках Тогда
			ВсеЭлементы.Добавить(Символ);

			Продолжить;
		КонецЕсли;

		Если Символ = "[" Тогда
			ОткрывающихСкобок = ОткрывающихСкобок + 1;
		КонецЕсли;

		Если Символ = "]" И ОткрывающихСкобок > 0 Тогда
			ОткрывающихСкобок = ОткрывающихСкобок - 1;
		КонецЕсли;

		Если ЭтоРазделитель И ОткрывающихСкобок = 0 Тогда
			Если ЗначениеЗаполнено(Операнд) Тогда
				ЭтоФункция = Ложь;
				Если Символ = "(" И СтрНайти(Операнд, ".") = 0 Или ЛогическиеОператоры.Найти(ВРег(Операнд)) <> Неопределено Тогда
					ЭтоФункция = Истина;
				КонецЕсли;

				Если ЭтоФункция Или Не БазоваяПодсистемаКлиентСервер.ОН_ЭтоЧисло(Операнд) Тогда
					ОперандыИФункции.Вставить(ВсеЭлементы.ВГраница() + 1, ЭтоФункция);
				КонецЕсли;

				ВсеЭлементы.Добавить(Операнд);
				Операнд = "";
			КонецЕсли;
			ВсеЭлементы.Добавить(Символ);
		Иначе
			Операнд = Операнд + Символ;
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(Операнд) И Не БазоваяПодсистемаКлиентСервер.ОН_ЭтоЧисло(Операнд) Тогда
		ОперандыИФункции.Вставить(ВсеЭлементы.ВГраница() + 1, Ложь);
	КонецЕсли;

	ВсеЭлементы.Добавить(Операнд);

	Результат = Новый Структура;
	Результат.Вставить("ВсеЭлементы",		ВсеЭлементы);
	Результат.Вставить("ОперандыИФункции",	ОперандыИФункции);

	Возврат Результат;
КонецФункции

Функция сКФ_ЭтоЦифра(Символ)
	Возврат СтрНайти("1234567890", Символ) > 0;
КонецФункции


Процедура сКФ_ЗаменитьЭлементыФормулы(Выражение, ЭлементыФормулы, Значения)
	Для Каждого ОписаниеЭлемента Из ЭлементыФормулы.ОперандыИФункции Цикл
		Операнд = ЭлементыФормулы.ВсеЭлементы[ОписаниеЭлемента.Ключ];
		ЭтоФункция = ОписаниеЭлемента.Значение;
		Значение = Значения[ОписаниеЭлемента.Ключ];
		Если Значение = Неопределено Тогда
			Если ЭтоФункция И Не СтрЗаканчиваетсяНа(Операнд, "__") Тогда
				Значение = Операнд + "__";
			Иначе
				Значение = Операнд;
			КонецЕсли;
		КонецЕсли;

		ЭлементыФормулы.ВсеЭлементы[ОписаниеЭлемента.Ключ] = Значение;
	КонецЦикла;

	Выражение = СтрСоединить(ЭлементыФормулы.ВсеЭлементы);
КонецПроцедуры

Функция сКФ_КоллекцияИсточниковДоступныхПолей() Экспорт
	Результат = Новый ТаблицаЗначений;

	Для Каждого ОписаниеРеквизита Из сКФ_РеквизитыСпискаИсточниковДоступныхПолей() Цикл
		ИмяРеквизита	= ОписаниеРеквизита.Ключ;
		ТипРеквизита	= ОписаниеРеквизита.Значение;
		Результат.Колонки.Добавить(ИмяРеквизита, ТипРеквизита);
	КонецЦикла;

	Возврат Результат;
КонецФункции

#КонецОбласти
