///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область Пользователи

Функция П_НазначениеРолей() Экспорт
	НазначениеРолей = Новый Структура;
	НазначениеРолей.Вставить("ТолькоДляАдминистраторовСистемы",                Новый Массив);
	НазначениеРолей.Вставить("ТолькоДляПользователейСистемы",                  Новый Массив);
	НазначениеРолей.Вставить("ТолькоДляВнешнихПользователей",                  Новый Массив);
	НазначениеРолей.Вставить("СовместноДляПользователейИВнешнихПользователей", Новый Массив);

	ИнтеграцияПодсистемСервер.ПриОпределенииНазначенияРолей(НазначениеРолей);

	Возврат НазначениеРолей;
КонецФункции

Функция П_ЭтоПолноправныйПользователь(Пользователь = Неопределено, ПроверятьПраваАдминистрированияСистемы = Ложь, УчитыватьПривилегированныйРежим = Истина) Экспорт
	ПривилегированныйРежимУстановлен = ПривилегированныйРежим();

	УстановитьПривилегированныйРежим(Истина);
	СвойстваПользователяИБ = П_СвойстваПроверяемогоПользователяИБ(Пользователь);

	Если СвойстваПользователяИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ПроверитьРольПолныеПрава			= Не ПроверятьПраваАдминистрированияСистемы;
	ПроверитьРольАдминистратораСистемы	= ПроверятьПраваАдминистрированияСистемы;

	Если Не СвойстваПользователяИБ.УказанТекущийПользовательИБ Тогда
		Роли = СвойстваПользователяИБ.ПользовательИБ.Роли;

		// Для не текущего пользователя ИБ проверяются роли в записанном пользователе ИБ.
		Если ПроверитьРольПолныеПрава
		   И Не Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			Возврат Ложь;
		КонецЕсли;

		Если ПроверитьРольАдминистратораСистемы
		   И Не Роли.Содержит(Метаданные.Роли.АдминистраторСистемы) Тогда
			Возврат Ложь;
		КонецЕсли;

		Возврат Истина;
	КонецЕсли;

	Если УчитыватьПривилегированныйРежим И ПривилегированныйРежимУстановлен Тогда
		Возврат Истина;
	КонецЕсли;

	Если БазоваяПодсистемаСерверПовтИсп.СП_ПривилегированныйРежимУстановленПриЗапуске() Тогда
		// Когда клиентское приложение запущено с параметром UsePrivilegedMode, тогда
		// пользователь является полноправным, если привилегированный режим установлен.
		Возврат Истина;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СвойстваПользователяИБ.Имя) И Метаданные.ОсновныеРоли.Количество() = 0 Тогда
		// Когда основные роли не указаны, тогда у неуказанного пользователя
		// есть все права (как в привилегированном режиме).
		Возврат Истина;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СвойстваПользователяИБ.Имя)
	   И ПривилегированныйРежимУстановлен
	   И СвойстваПользователяИБ.ПравоАдминистрирование Тогда
		// Когда у неуказанного пользователя есть право Администрирование,
		// тогда привилегированный режим учитывается всегда для поддержки
		// параметра запуска UsePrivilegedMode у не клиентских приложений.
		Возврат Истина;
	КонецЕсли;

	// Для текущего пользователя ИБ проверяются роли не в записанном пользователе ИБ,
	// а роли в текущем сеансе.
	Если ПроверитьРольПолныеПрава
	   И Не СвойстваПользователяИБ.РольДоступнаПолныеПрава Тогда // Не заменять на РолиДоступны.
		Возврат Ложь;
	КонецЕсли;

	Если ПроверитьРольАдминистратораСистемы
	   И Не СвойстваПользователяИБ.РольДоступнаАдминистраторСистемы Тогда // Не заменять на РолиДоступны.
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Функция П_СвойстваПроверяемогоПользователяИБ(Пользователь)
	СвойстваТекущегоПользовательИБ	= ПользователиСерверПовтИсп.сП_СвойстваТекущегоПользователяИБ();
	ПользовательИБ					= Неопределено;

	Если ТипЗнч(Пользователь) = Тип("ПользовательИнформационнойБазы") Тогда
		ПользовательИБ = Пользователь;
	ИначеЕсли Пользователь = Неопределено Или Пользователь = сП_АвторизованныйПользователь() Тогда
		Возврат СвойстваТекущегоПользовательИБ;
	Иначе
		// Задан не текущий пользователь.
		Если ЗначениеЗаполнено(Пользователь) Тогда
			ИдентификаторПользователяИБ = БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ");
			Если СвойстваТекущегоПользовательИБ.УникальныйИдентификатор = ИдентификаторПользователяИБ Тогда
				Возврат СвойстваТекущегоПользовательИБ;
			КонецЕсли;
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
		КонецЕсли;
	КонецЕсли;

	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если СвойстваТекущегоПользовательИБ.УникальныйИдентификатор = ПользовательИБ.УникальныйИдентификатор Тогда
		Возврат СвойстваТекущегоПользовательИБ;
	КонецЕсли;

	Свойства = Новый Структура;
	Свойства.Вставить("УказанТекущийПользовательИБ",	Ложь);
	Свойства.Вставить("ПользовательИБ",					ПользовательИБ);

	Возврат Свойства;
КонецФункции

Процедура П_НайтиНеоднозначныхПользователейИБ(Знач Пользователь, Знач УникальныйИдентификатор = Неопределено, Знач НайденныеИдентификаторы = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ПустойУникальныйИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");

	Если ТипЗнч(УникальныйИдентификатор) <> Тип("УникальныйИдентификатор")
	 Или УникальныйИдентификатор = ПустойУникальныйИдентификатор Тогда

		УникальныйИдентификатор = Неопределено;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор", ПустойУникальныйИдентификатор);

	Если Пользователь = Неопределено И УникальныйИдентификатор = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Пользователи.ИдентификаторПользователяИБ КАК НеоднозначныйИдентификатор
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|
		|СГРУППИРОВАТЬ ПО
		|	Пользователи.ИдентификаторПользователяИБ
		|
		|ИМЕЮЩИЕ
		|	Пользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор И
		|	КОЛИЧЕСТВО(Пользователи.Ссылка) > 1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВнешниеПользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|
		|СГРУППИРОВАТЬ ПО
		|	ВнешниеПользователи.ИдентификаторПользователяИБ
		|
		|ИМЕЮЩИЕ
		|	ВнешниеПользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор И
		|	КОЛИЧЕСТВО(ВнешниеПользователи.Ссылка) > 1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Пользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|		ПО (ВнешниеПользователи.ИдентификаторПользователяИБ = Пользователи.ИдентификаторПользователяИБ)
		|			И (Пользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор)";
	ИначеЕсли УникальныйИдентификатор <> Неопределено Тогда
		Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Пользователи.ИдентификаторПользователяИБ КАК НеоднозначныйИдентификатор
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВнешниеПользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|ГДЕ
		|	ВнешниеПользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор";
	Иначе
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Пользователи.ИдентификаторПользователяИБ КАК НеоднозначныйИдентификатор
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ИдентификаторПользователяИБ В
		|			(ВЫБРАТЬ
		|				СправочникПользователи.ИдентификаторПользователяИБ
		|			ИЗ
		|				Справочник.Пользователи КАК СправочникПользователи
		|			ГДЕ
		|				СправочникПользователи.Ссылка = &Пользователь
		|				И СправочникПользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВнешниеПользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|ГДЕ
		|	ВнешниеПользователи.ИдентификаторПользователяИБ В
		|			(ВЫБРАТЬ
		|				СправочникПользователи.ИдентификаторПользователяИБ
		|			ИЗ
		|				Справочник.Пользователи КАК СправочникПользователи
		|			ГДЕ
		|				СправочникПользователи.Ссылка = &Пользователь
		|				И СправочникПользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор)";

		Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"Справочник.Пользователи КАК СправочникПользователи",
				"Справочник.ВнешниеПользователи КАК СправочникПользователи");
		КонецЕсли;
	КонецЕсли;

	Выгрузка = Запрос.Выполнить().Выгрузить();

	Если Пользователь = Неопределено И УникальныйИдентификатор = Неопределено Тогда
		Если Выгрузка.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если Выгрузка.Количество() < 2 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	НеоднозначныеИдентификаторы = Выгрузка.ВыгрузитьКолонку("НеоднозначныйИдентификатор");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НеоднозначныеИдентификаторы", НеоднозначныеИдентификаторы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НеоднозначныеИдентификаторы.НеоднозначныйИдентификатор КАК НеоднозначныйИдентификатор,
	|	НеоднозначныеИдентификаторы.Пользователь КАК Пользователь
	|ИЗ
	|	(ВЫБРАТЬ
	|		Пользователи.ИдентификаторПользователяИБ КАК НеоднозначныйИдентификатор,
	|		Пользователи.Ссылка КАК Пользователь
	|	ИЗ
	|		Справочник.Пользователи КАК Пользователи
	|	ГДЕ
	|		Пользователи.ИдентификаторПользователяИБ В(&НеоднозначныеИдентификаторы)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВнешниеПользователи.ИдентификаторПользователяИБ,
	|		ВнешниеПользователи.Ссылка
	|	ИЗ
	|		Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|	ГДЕ
	|		ВнешниеПользователи.ИдентификаторПользователяИБ В(&НеоднозначныеИдентификаторы)) КАК НеоднозначныеИдентификаторы
	|
	|УПОРЯДОЧИТЬ ПО
	|	НеоднозначныеИдентификаторы.НеоднозначныйИдентификатор,
	|	НеоднозначныеИдентификаторы.Пользователь";

	Выгрузка = Запрос.Выполнить().Выгрузить();

	ОписаниеОшибки						= "";
	ТекущийНеоднозначныйИдентификатор	= Неопределено;

	Для Каждого Строка Из Выгрузка Цикл
		Если Строка.НеоднозначныйИдентификатор <> ТекущийНеоднозначныйИдентификатор Тогда
			ТекущийНеоднозначныйИдентификатор = Строка.НеоднозначныйИдентификатор;
			Если ТипЗнч(НайденныеИдентификаторы) = Тип("Соответствие") Тогда
				ТекущиеПользователи = Новый Массив;
				НайденныеИдентификаторы.Вставить(ТекущийНеоднозначныйИдентификатор, ТекущиеПользователи);
			Иначе
				ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();

				Если ТекущийПользовательИБ.УникальныйИдентификатор <> ТекущийНеоднозначныйИдентификатор Тогда
					ТекущийПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекущийНеоднозначныйИдентификатор);
				КонецЕсли;

				Если ТекущийПользовательИБ = Неопределено Тогда
					ИмяДляВхода = "<не найден>";
				Иначе
					ИмяДляВхода = ТекущийПользовательИБ.Имя;
				КонецЕсли;

				ОписаниеОшибки = ОписаниеОшибки + СтрШаблон(
					"Пользователю ИБ ""%1"" с идентификатором ""%2""
						           |соответствует более одного элемента в справочнике:",
					ИмяДляВхода,
					ТекущийНеоднозначныйИдентификатор);

				ОписаниеОшибки = ОписаниеОшибки + Символы.ПС;
			КонецЕсли;
		КонецЕсли;

		Если ТипЗнч(НайденныеИдентификаторы) = Тип("Соответствие") Тогда
			ТекущиеПользователи.Добавить(Строка.Пользователь);
		Иначе
			ОписаниеОшибки = ОписаниеОшибки + "- "
				+ СтрШаблон(
					"""%1"" %2",
					Строка.Пользователь,
					ПолучитьНавигационнуюСсылку(Строка.Пользователь)) + Символы.ПС;
		КонецЕсли;
	КонецЦикла;

	Если ТипЗнч(НайденныеИдентификаторы) <> Тип("Соответствие") Тогда
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
КонецПроцедуры

Функция П_ПользовательИБЗанят(ПользовательИБ, УчетнаяЗапись = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Если ТипЗнч(ПользовательИБ) = Тип("Строка") Тогда
		УчетнаяЗапись = ПользователиИнформационнойБазы.НайтиПоИмени(ПользовательИБ);
	ИначеЕсли ТипЗнч(ПользовательИБ) = Тип("УникальныйИдентификатор") Тогда
		УчетнаяЗапись = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательИБ);
	Иначе
		УчетнаяЗапись = ПользовательИБ;
	КонецЕсли;

	Если УчетнаяЗапись = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат сП_ПользовательПоИдентификаторуСуществует(УчетнаяЗапись.УникальныйИдентификатор);
КонецФункции

Функция П_СоздатьАдминистратора(ПользовательИБ = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	// Добавление администратора.
	Если ПользовательИБ = Неопределено Тогда
		ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();

		Если ПользователиИБ.Количество() = 0 Тогда
			ПользовательИБ				= ПользователиИнформационнойБазы.СоздатьПользователя();
			ПользовательИБ.Имя			= "Администратор";
			ПользовательИБ.ПолноеИмя	= ПользовательИБ.Имя;
			ПользовательИБ.Роли.Очистить();
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
			РольАдминистратораСистемы	= Метаданные.Роли.АдминистраторСистемы;
			Если НЕ ПользовательИБ.Роли.Содержит(РольАдминистратораСистемы) Тогда
				ПользовательИБ.Роли.Добавить(РольАдминистратораСистемы);
			КонецЕсли;
			ПользовательИБ.Записать();
		Иначе
			// Если существует пользователь с правами администратора,
			// тогда первый администратор уже создан и его не требуется создавать.
			Для Каждого ТекущийПользовательИБ Из ПользователиИБ Цикл
				Если сП_РолиАдминистратораДоступны(ТекущийПользовательИБ) Тогда
					Возврат Неопределено; // Первый администратор уже создан.
				КонецЕсли;
			КонецЦикла;
			// Первый администратор создан некорректно.
			ТекстОшибки =
				"Список пользователей информационной базы не пустой, однако не удалось
				           |найти ни одного пользователя с ролями Полные права и Администратор системы.
				           |
				           |Вероятно, пользователи создавались в конфигураторе.
				           |Требуется назначить роли Полные права и Администратор системы хотя бы одному пользователю.";
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	Иначе
		Если Не сП_РолиАдминистратораДоступны(ПользовательИБ) Тогда
			ТекстОшибки =
				"Невозможно создать пользователя в справочнике для пользователя
				           |информационной базы ""%1"",
				           |так как у него нет ролей Полные права и Администратор системы.
				           |
				           |Вероятно, пользователь был создан в конфигураторе.
				           |Для автоматического создания пользователя в справочнике требуется
				           |назначить ему роли Полные права и Администратор системы.";
			ВызватьИсключение СтрШаблон(ТекстОшибки, Строка(ПользовательИБ));
		КонецЕсли;

		П_НайтиНеоднозначныхПользователейИБ(Неопределено, ПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;

	НачатьТранзакцию();
	Попытка
		Блокировка			= Новый БлокировкаДанных;
		ЭлементБлокировки	= Блокировка.Добавить("Справочник.Пользователи");
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторПользователяИБ",	ПользовательИБ.УникальныйИдентификатор);
		ЭлементБлокировки	= Блокировка.Добавить("Справочник.ВнешниеПользователи");
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторПользователяИБ",	ПользовательИБ.УникальныйИдентификатор);
		ЭлементБлокировки	= Блокировка.Добавить("Справочник.Пользователи");
		ЭлементБлокировки.УстановитьЗначение("Наименование",				ПользовательИБ.ПолноеИмя);
		Блокировка.Заблокировать();

		Пользователь = Неопределено;
		сП_ПользовательПоИдентификаторуСуществует(ПользовательИБ.УникальныйИдентификатор,, Пользователь);
		Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			ВнешнийПользовательОбъект	= Пользователь.ПолучитьОбъект();
			ВнешнийПользовательОбъект.ИдентификаторПользователяИБ = Неопределено;
			ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьДанные(ВнешнийПользовательОбъект);
			Пользователь				= Неопределено;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			Пользователь = Справочники.Пользователи.НайтиПоНаименованию(ПользовательИБ.ПолноеИмя);

			Если ЗначениеЗаполнено(Пользователь)
			   И ЗначениеЗаполнено(Пользователь.ИдентификаторПользователяИБ)
			   И Пользователь.ИдентификаторПользователяИБ <> ПользовательИБ.УникальныйИдентификатор
			   И ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ) <> Неопределено Тогда

				Пользователь = Неопределено;
			КонецЕсли;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			Пользователь		= Справочники.Пользователи.СоздатьЭлемент();
			ПользовательСоздан	= Истина;
		Иначе
			Пользователь		= Пользователь.ПолучитьОбъект();
			ПользовательСоздан	= Ложь;
		КонецЕсли;

		Пользователь.Наименование = ПользовательИБ.ПолноеИмя;

		ОписаниеПользователяИБ = Новый Структура;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);
		Пользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		Пользователь.ДополнительныеСвойства.Вставить("СозданиеАдминистратора",
			?(ПользовательИБ = Неопределено,
			  "Выполнено создание первого администратора.",
			  ?(ПользовательСоздан,
			    "Администратор сопоставлен с новым пользователем справочника.",
			    "Администратор сопоставлен с существующим пользователем справочника.") ) );

		Пользователь.Записать();

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Возврат Пользователь.Ссылка;
КонецФункции

Процедура П_УдалитьПользователяИБ(Знач ИмяИлиИдентификатор) Экспорт
	БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр("Пользователи.УдалитьПользователяИБ", "ИмяИлиИдентификатор", ИмяИлиИдентификатор, Новый ОписаниеТипов("Строка, УникальныйИдентификатор"));

	СвойстваУдаляемогоПользователяИБ = П_СвойстваПользователяИБ(ИмяИлиИдентификатор);
	Если СвойстваУдаляемогоПользователяИБ = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Пользователь информационной базы ""%1"" не существует.", ИмяИлиИдентификатор);
	КонецЕсли;
	ПользовательИБ = СвойстваУдаляемогоПользователяИБ.ПользовательИБ;

	Попытка
		ПользовательИБ.Удалить();
	Исключение
		ВызватьИсключение П_ОписаниеОшибкиПриЗаписиПользователяИБ(
			"Не удалось удалить пользователя информационной базы %1 по причине:
			           |%2.",
			ПользовательИБ.Имя,
			ПользовательИБ.УникальныйИдентификатор,
			ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

Функция П_ВходВПрограммуРазрешен(ОписаниеПользователяИБ) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	УникальныйИдентификатор = Неопределено;

	Если ТипЗнч(ОписаниеПользователяИБ) = Тип("СправочникСсылка.Пользователи")
	 Или ТипЗнч(ОписаниеПользователяИБ) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда

		УникальныйИдентификатор = БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(ОписаниеПользователяИБ, "ИдентификаторПользователяИБ");

		Если ТипЗнч(УникальныйИдентификатор) <> Тип("УникальныйИдентификатор") Тогда
			Возврат Ложь;
		КонецЕсли;

	ИначеЕсли ТипЗнч(ОписаниеПользователяИБ) = Тип("УникальныйИдентификатор") Тогда
		УникальныйИдентификатор = ОписаниеПользователяИБ;
	КонецЕсли;

	Если УникальныйИдентификатор <> Неопределено Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(УникальныйИдентификатор);

		Если ПользовательИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ПользовательИБ = ОписаниеПользователяИБ;
	КонецЕсли;

	Возврат ПользовательИБ.АутентификацияСтандартная
		ИЛИ ПользовательИБ.АутентификацияОС
		ИЛИ ПользовательИБ.АутентификацияOpenID;
КонецФункции

Процедура П_УстановитьСвойстваПользователяИБ(Знач ИмяИлиИдентификатор, Знач ОбновляемыеСвойства,
	Знач СоздатьНового = Ложь, Знач ЭтоВнешнийПользователь = Ложь) Экспорт

	ИмяПроцедуры = "ПользователиСервер.РУстановитьСвойстваПользователяИБ";

	БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр(ИмяПроцедуры, "ИмяИлиИдентификатор",
		ИмяИлиИдентификатор, Новый ОписаниеТипов("Строка, УникальныйИдентификатор"));

	БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр(ИмяПроцедуры, "ОбновляемыеСвойства",
		ОбновляемыеСвойства, Тип("Структура"));

	БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр(ИмяПроцедуры, "СоздатьНового",
		СоздатьНового, Тип("Булево"));

	БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр(ИмяПроцедуры, "ЭтоВнешнийПользователь",
		ЭтоВнешнийПользователь, Тип("Булево"));

	СтарыеСвойства = П_СвойстваПользователяИБ(ИмяИлиИдентификатор);
	ПользовательСуществует = СтарыеСвойства <> Неопределено;
	Если ПользовательСуществует Тогда
		ПользовательИБ = СтарыеСвойства.ПользовательИБ;
	Иначе
		ПользовательИБ = Неопределено;
		СтарыеСвойства = П_НовоеОписаниеПользователяИБ();
	КонецЕсли;

	Если Не ПользовательСуществует Тогда
		Если Не СоздатьНового Тогда
			ВызватьИсключение СтрШаблон(
				"Пользователь информационной базы ""%1"" не существует.",
				ИмяИлиИдентификатор);
		КонецЕсли;
		ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
	Иначе
		Если СоздатьНового Тогда
			ВызватьИсключение П_ОписаниеОшибкиПриЗаписиПользователяИБ(
				"Невозможно создать пользователя информационной базы %1, так как он уже существует.",
				СтарыеСвойства.Имя,
				СтарыеСвойства.УникальныйИдентификатор);
		КонецЕсли;

		Если ОбновляемыеСвойства.Свойство("СтарыйПароль")
		   И ТипЗнч(ОбновляемыеСвойства.СтарыйПароль) = Тип("Строка") Тогда

			СтарыйПарольСовпадает = сП_СтарыйПарольСовпадаетССохраненным(
				ОбновляемыеСвойства.СтарыйПароль, СтарыеСвойства.УникальныйИдентификатор);

			Если Не СтарыйПарольСовпадает Тогда
				ВызватьИсключение П_ОписаниеОшибкиПриЗаписиПользователяИБ(
					"При записи пользователя информационной базы %1 старый пароль указан не верно.",
					СтарыеСвойства.Имя,
					СтарыеСвойства.УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Подготовка новых значений свойств.
	ТекстОшибкиПароля = "";
	НовыеСвойства = БазоваяПодсистемаСервер.ОН_СкопироватьРекурсивно(СтарыеСвойства);
	Для Каждого КлючИЗначение Из НовыеСвойства Цикл
		Если Не ОбновляемыеСвойства.Свойство(КлючИЗначение.Ключ)
		 Или ОбновляемыеСвойства[КлючИЗначение.Ключ] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если КлючИЗначение.Ключ <> "Пароль" Тогда
			НовыеСвойства[КлючИЗначение.Ключ] = ОбновляемыеСвойства[КлючИЗначение.Ключ];
			Продолжить;
		КонецЕсли;
		Если ОбновляемыеСвойства.Свойство("СохраняемоеЗначениеПароля")
		   И ОбновляемыеСвойства.СохраняемоеЗначениеПароля <> Неопределено
		 Или БазоваяПодсистемаСервер.СП_ЭтоУчебнаяПлатформа() Тогда
			Продолжить;
		КонецЕсли;
		Настройки = ПользователиСерверПовтИсп.сП_Настройки();
		Если Настройки.ОбщиеНастройкиВхода Тогда
			НастройкиВхода = ?(ЭтоВнешнийПользователь, Настройки.ВнешниеПользователи, Настройки.Пользователи);
			ТекстОшибкиПароля = сП_ОшибкаДлиныИлиСложностиПароля(
				ОбновляемыеСвойства.Пароль,
				НастройкиВхода.МинимальнаяДлинаПароля,
				НастройкиВхода.ПарольДолженОтвечатьТребованиямСложности);
		Иначе
			ТекстОшибкиПароля = сП_ОшибкаДлиныИлиСложностиПароля(
				ОбновляемыеСвойства.Пароль,
				ПолучитьМинимальнуюДлинуПаролейПользователей(),
				ПолучитьПроверкуСложностиПаролейПользователей());
		КонецЕсли;
		НовыеСвойства.СохраняемоеЗначениеПароля = сП_СохраняемоеЗначениеСтрокиПароля(ОбновляемыеСвойства.Пароль, Истина);
	КонецЦикла;

	П_СкопироватьСвойстваПользователяИБ(ПользовательИБ, НовыеСвойства);

	Если ЗначениеЗаполнено(ТекстОшибкиПароля) Тогда
		ВызватьИсключение П_ОписаниеОшибкиПриЗаписиПользователяИБ(
			"Не удалось записать свойства пользователя информационной базы %1 по причине:
			           |%2.",
			ПользовательИБ.Имя,
			?(ПользовательСуществует, СтарыеСвойства.УникальныйИдентификатор, Неопределено),
			ТекстОшибкиПароля);
	КонецЕсли;

	// Попытка записи нового или изменение существующего пользователя ИБ.
	Попытка
		сП_ЗаписатьПользователяИнформационнойБазы(ПользовательИБ, ЭтоВнешнийПользователь);
	Исключение
		ВызватьИсключение П_ОписаниеОшибкиПриЗаписиПользователяИБ(
			"Не удалось записать свойства пользователя информационной базы %1 по причине:
			           |%2.",
			ПользовательИБ.Имя,
			?(ПользовательСуществует, СтарыеСвойства.УникальныйИдентификатор, Неопределено),
			ИнформацияОбОшибке());
	КонецПопытки;

	Если ЗначениеЗаполнено(СтарыеСвойства.Имя) И СтарыеСвойства.Имя <> НовыеСвойства.Имя Тогда
		// Перемещение настроек пользователя.
		сП_СкопироватьНастройкиПользователя(СтарыеСвойства.Имя, НовыеСвойства.Имя, Истина);
	КонецЕсли;

	Если СоздатьНового Тогда
		сП_УстановитьНачальныеНастройки(ПользовательИБ.Имя, ЭтоВнешнийПользователь);
	КонецЕсли;

	ОбновляемыеСвойства.Вставить("УникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);
	ОбновляемыеСвойства.Вставить("ПользовательИБ", ПользовательИБ);
КонецПроцедуры

Функция П_СвойстваПользователяИБ(Знач ИмяИлиИдентификатор) Экспорт
	БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр("Пользователи.СвойстваПользователяИБ", "ИмяИлиИдентификатор",
		ИмяИлиИдентификатор, Новый ОписаниеТипов("Строка, УникальныйИдентификатор"));

	Свойства = П_НовоеОписаниеПользователяИБ();
	Свойства.Роли = Новый Массив;

	Если ТипЗнч(ИмяИлиИдентификатор) = Тип("УникальныйИдентификатор") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИмяИлиИдентификатор);
	ИначеЕсли ТипЗнч(ИмяИлиИдентификатор) = Тип("Строка") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяИлиИдентификатор);
	Иначе
		ПользовательИБ = Неопределено;
	КонецЕсли;

	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	П_СкопироватьСвойстваПользователяИБ(Свойства, ПользовательИБ);
	Свойства.Вставить("ПользовательИБ", ПользовательИБ);

	Возврат Свойства;
КонецФункции

Функция П_НовоеОписаниеПользователяИБ() Экспорт
	// Подготовка структур возвращаемых данных.
	Свойства = Новый Структура;

	Свойства.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));

	Свойства.Вставить("Имя",                       "");
	Свойства.Вставить("ПолноеИмя",                 "");
	Свойства.Вставить("АутентификацияOpenID",      Ложь);
	Свойства.Вставить("АутентификацияСтандартная", Ложь);
	Свойства.Вставить("ПоказыватьВСпискеВыбора",   Ложь);
	Свойства.Вставить("СтарыйПароль",              Неопределено);
	Свойства.Вставить("Пароль",                    Неопределено);
	Свойства.Вставить("СохраняемоеЗначениеПароля", Неопределено);
	Свойства.Вставить("ПарольУстановлен",          Ложь);
	Свойства.Вставить("ЗапрещеноИзменятьПароль",   Ложь);
	Свойства.Вставить("АутентификацияОС",          Ложь);
	Свойства.Вставить("ПользовательОС",            "");
	Если ПользователиСерверПовтИсп.сП_ВерсияПредприятияПоддерживаетВосстановлениеПаролей() Тогда
		Свойства.Вставить("ЗапрещеноВосстанавливатьПароль", Истина);
		Свойства.Вставить("АдресЭлектроннойПочты",          "");
	КонецЕсли;

	Свойства.Вставить("ОсновнойИнтерфейс",
		?(Метаданные.ОсновнойИнтерфейс = Неопределено, "", Метаданные.ОсновнойИнтерфейс.Имя));

	Свойства.Вставить("РежимЗапуска",              "Авто");

	Свойства.Вставить("Язык",
		?(Метаданные.ОсновнойЯзык = Неопределено, "", Метаданные.ОсновнойЯзык.Имя));

	Свойства.Вставить("Роли", Неопределено);

	Возврат Свойства;
КонецФункции

Процедура П_СкопироватьСвойстваПользователяИБ(Приемник, Источник, КопируемыеСвойства = "", ИсключаемыеСвойства = "", ПрефиксСвойств = "") Экспорт
	Если ТипЗнч(Приемник) = Тип("ПользовательИнформационнойБазы")
	   И ТипЗнч(Источник) = Тип("ПользовательИнформационнойБазы")

	 Или ТипЗнч(Приемник) = Тип("ПользовательИнформационнойБазы")
	   И ТипЗнч(Источник) <> Тип("Структура")
	   И ТипЗнч(Источник) <> Тип("ФормаКлиентскогоПриложения")

	 Или ТипЗнч(Источник) = Тип("ПользовательИнформационнойБазы")
	   И ТипЗнч(Приемник) <> Тип("Структура")
	   И ТипЗнч(Приемник) <> Тип("ФормаКлиентскогоПриложения") Тогда

		ВызватьИсключение
			"Недопустимое значение параметра Приемник или Источник
			           |в процедуре П_СкопироватьСвойстваПользователяИБ общего модуля ПользователиСервер.";
	КонецЕсли;

	ВсеСвойства = П_НовоеОписаниеПользователяИБ();

	Если ЗначениеЗаполнено(КопируемыеСвойства) Тогда
		СтруктураКопируемыхСвойств = Новый Структура(КопируемыеСвойства);
	Иначе
		СтруктураКопируемыхСвойств = ВсеСвойства;
	КонецЕсли;

	Если ЗначениеЗаполнено(ИсключаемыеСвойства) Тогда
		СтруктураИсключаемыхСвойств = Новый Структура(ИсключаемыеСвойства);
	Иначе
		СтруктураИсключаемыхСвойств = Новый Структура;
	КонецЕсли;

	Если БазоваяПодсистемаСервер.СП_ЭтоУчебнаяПлатформа() Тогда
		СтруктураИсключаемыхСвойств.Вставить("АутентификацияОС");
		СтруктураИсключаемыхСвойств.Вставить("ПользовательОС");
	КонецЕсли;

	ПарольУстановлен = Ложь;

	Для каждого КлючИЗначение Из ВсеСвойства Цикл
		Свойство = КлючИЗначение.Ключ;

		Если НЕ СтруктураКопируемыхСвойств.Свойство(Свойство)
		 ИЛИ СтруктураИсключаемыхСвойств.Свойство(Свойство) Тогда

			Продолжить;
		КонецЕсли;

		Если ТипЗнч(Источник) = Тип("ПользовательИнформационнойБазы")
		   И (    ТипЗнч(Приемник) = Тип("Структура")
		      Или ТипЗнч(Приемник) = Тип("ФормаКлиентскогоПриложения") ) Тогда

			Если Свойство = "Пароль"
			 ИЛИ Свойство = "СтарыйПароль" Тогда

				ЗначениеСвойства	= Неопределено;
			ИначеЕсли Свойство = "ОсновнойИнтерфейс" Тогда
				ЗначениеСвойства	= ?(Источник.ОсновнойИнтерфейс = Неопределено, "", Источник.ОсновнойИнтерфейс.Имя);
			ИначеЕсли Свойство = "РежимЗапуска" Тогда
				ПолноеИмяЗначения	= ПолучитьПолноеИмяПредопределенногоЗначения(Источник.РежимЗапуска);
				ЗначениеСвойства	= Сред(ПолноеИмяЗначения, СтрНайти(ПолноеИмяЗначения, ".") + 1);
			ИначеЕсли Свойство = "Язык" Тогда
				ЗначениеСвойства	= ?(Источник.Язык = Неопределено, "", Источник.Язык.Имя);
			ИначеЕсли Свойство = "Роли" Тогда
				ВременнаяСтруктура = Новый Структура("Роли", Новый ТаблицаЗначений);
				ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Приемник);
				Если ТипЗнч(ВременнаяСтруктура.Роли) = Тип("ТаблицаЗначений") Тогда
					Продолжить;
				ИначеЕсли ВременнаяСтруктура.Роли = Неопределено Тогда
					Приемник.Роли = Новый Массив;
				Иначе
					Приемник.Роли.Очистить();
				КонецЕсли;

				Для каждого Роль Из Источник.Роли Цикл
					Приемник.Роли.Добавить(Роль.Имя);
				КонецЦикла;

				Продолжить;
			Иначе
				ЗначениеСвойства = Источник[Свойство];
			КонецЕсли;

			ПолноеИмяСвойства	= ПрефиксСвойств + Свойство;
			ВременнаяСтруктура	= Новый Структура(ПолноеИмяСвойства, ЗначениеСвойства);
			ЗаполнитьЗначенияСвойств(Приемник, ВременнаяСтруктура);
		Иначе
			Если ТипЗнч(Источник) = Тип("Структура") Тогда
				Если Источник.Свойство(Свойство) Тогда
					ЗначениеСвойства = Источник[Свойство];
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				ПолноеИмяСвойства	= ПрефиксСвойств + Свойство;
				ВременнаяСтруктура	= Новый Структура(ПолноеИмяСвойства, Новый ТаблицаЗначений);
				ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Источник);
				ЗначениеСвойства = ВременнаяСтруктура[ПолноеИмяСвойства];
				Если ТипЗнч(ЗначениеСвойства) = Тип("ТаблицаЗначений") Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Если ТипЗнч(Приемник) = Тип("ПользовательИнформационнойБазы") Тогда
				Если Свойство = "УникальныйИдентификатор"
				 ИЛИ Свойство = "СтарыйПароль"
				 ИЛИ Свойство = "ПарольУстановлен" Тогда

					Продолжить;
				ИначеЕсли Свойство = "АутентификацияOpenID"
				      ИЛИ Свойство = "АутентификацияСтандартная"
				      ИЛИ Свойство = "АутентификацияОС"
				      ИЛИ Свойство = "ПользовательОС" Тогда

					Если Приемник[Свойство] <> ЗначениеСвойства Тогда
						Приемник[Свойство] = ЗначениеСвойства;
					КонецЕсли;
				ИначеЕсли Свойство = "Пароль" Тогда
					Если ЗначениеСвойства <> Неопределено Тогда
						Приемник.Пароль = ЗначениеСвойства;
						ПарольУстановлен = Истина;
					КонецЕсли;
				ИначеЕсли Свойство = "СохраняемоеЗначениеПароля" Тогда
					Если ЗначениеСвойства <> Неопределено
					   И НЕ ПарольУстановлен Тогда
						Приемник.СохраняемоеЗначениеПароля = ЗначениеСвойства;
					КонецЕсли;
				ИначеЕсли Свойство = "ОсновнойИнтерфейс" Тогда
					Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
						Приемник.ОсновнойИнтерфейс = Метаданные.Интерфейсы.Найти(ЗначениеСвойства);
					Иначе
						Приемник.ОсновнойИнтерфейс = Неопределено;
					КонецЕсли;
				ИначеЕсли Свойство = "РежимЗапуска" Тогда
					Если ЗначениеСвойства = "Авто"
					 ИЛИ ЗначениеСвойства = "ОбычноеПриложение"
					 ИЛИ ЗначениеСвойства = "УправляемоеПриложение" Тогда

						Приемник.РежимЗапуска = РежимЗапускаКлиентскогоПриложения[ЗначениеСвойства];
					Иначе
						Приемник.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.Авто;
					КонецЕсли;
				ИначеЕсли Свойство = "Язык" Тогда
					Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
						Приемник.Язык = Метаданные.Языки.Найти(ЗначениеСвойства);
					Иначе
						Приемник.Язык = Неопределено;
					КонецЕсли;
				ИначеЕсли Свойство = "Роли" Тогда
					Приемник.Роли.Очистить();
					Если ЗначениеСвойства <> Неопределено Тогда
						Для каждого ИмяРоли Из ЗначениеСвойства Цикл
							Роль = Метаданные.Роли.Найти(ИмяРоли);
							Если Роль <> Неопределено Тогда
								Приемник.Роли.Добавить(Роль);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				Иначе
					Если Свойство = "Имя"
					   И Приемник[Свойство] <> ЗначениеСвойства Тогда

						Если СтрДлина(ЗначениеСвойства) > 64 Тогда
							ВызватьИсключение СтрШаблон(
								"Ошибка записи пользователя информационной базы
								           |Имя (для входа): ""%1""
								           |превышает длину 64 символа.",
								ЗначениеСвойства);
						ИначеЕсли СтрНайти(ЗначениеСвойства, ":") > 0 Тогда
							ВызватьИсключение СтрШаблон(
								"Ошибка записи пользователя информационной базы
								           |Имя (для входа): ""%1""
								           |содержит запрещенный символ "":"".",
								ЗначениеСвойства);
						КонецЕсли;
					КонецЕсли;
					Приемник[Свойство] = Источник[Свойство];
				КонецЕсли;
			Иначе
				Если Свойство = "Роли" Тогда
					ВременнаяСтруктура = Новый Структура("Роли", Новый ТаблицаЗначений);
					ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Приемник);
					Если ТипЗнч(ВременнаяСтруктура.Роли) = Тип("ТаблицаЗначений") Тогда
						Продолжить;
					ИначеЕсли ВременнаяСтруктура.Роли = Неопределено Тогда
						Приемник.Роли = Новый Массив;
					Иначе
						Приемник.Роли.Очистить();
					КонецЕсли;

					Если Источник.Роли <> Неопределено Тогда
						Для каждого Роль Из Источник.Роли Цикл
							Приемник.Роли.Добавить(Роль.Имя);
						КонецЦикла;
					КонецЕсли;
					Продолжить;

				ИначеЕсли ТипЗнч(Источник) = Тип("Структура") Тогда
					ПолноеИмяСвойства = ПрефиксСвойств + Свойство;
				Иначе
					ПолноеИмяСвойства = Свойство;
				КонецЕсли;
				ВременнаяСтруктура = Новый Структура(ПолноеИмяСвойства, ЗначениеСвойства);
				ЗаполнитьЗначенияСвойств(Приемник, ВременнаяСтруктура);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция П_ОписаниеОшибкиПриЗаписиПользователяИБ(ШаблонОшибки, ИмяДляВхода, ИдентификаторПользователяИБ, ИнформацияОбОшибке = Неопределено, ЗаписатьВЖурнал = Истина)
	Если ЗаписатьВЖурнал Тогда
		ЗаписьЖурналаРегистрации(
			"Пользователи.Ошибка записи пользователя ИБ",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтрШаблон(ШаблонОшибки,
				"""" + ИмяДляВхода + """ (" + ?(ЗначениеЗаполнено(ИдентификаторПользователяИБ),
					"Новый", Строка(ИдентификаторПользователяИБ)) + ")",
				?(ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке"),
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), Строка(ИнформацияОбОшибке))));
	КонецЕсли;

	Возврат СтрШаблон(ШаблонОшибки, """" + ИмяДляВхода + """",
		?(ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке), Строка(ИнформацияОбОшибке)));
КонецФункции

Функция П_НайтиПоИмени(Знач ИмяДляВхода) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяДляВхода);

	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		П_НайтиНеоднозначныхПользователейИБ(Неопределено, ПользовательИБ.УникальныйИдентификатор);

		Возврат Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;
КонецФункции

Процедура П_ЗаполнитьНомераКартинокПользователей(Знач ТаблицаИлиДерево, Знач ИмяПоляПользователь, Знач ИмяПоляНомераКартинки, Знач ИдентификаторСтроки = Неопределено, Знач ОбработатьИерархиюВторогоИТретьегоУровней = Ложь) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Если ИдентификаторСтроки = Неопределено Тогда
		МассивСтрок = Неопределено;

	ИначеЕсли ТипЗнч(ИдентификаторСтроки) = Тип("Массив") Тогда
		МассивСтрок = Новый Массив;
		Для каждого Идентификатор Из ИдентификаторСтроки Цикл
			МассивСтрок.Добавить(ТаблицаИлиДерево.НайтиПоИдентификатору(Идентификатор));
		КонецЦикла;
	Иначе
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ТаблицаИлиДерево.НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЕсли;

	Если ТипЗнч(ТаблицаИлиДерево) = Тип("ДанныеФормыДерево") Тогда
		Если МассивСтрок = Неопределено Тогда
			МассивСтрок = ТаблицаИлиДерево.ПолучитьЭлементы();
		КонецЕсли;
		ТаблицаПользователей = Новый ТаблицаЗначений;
		ТаблицаПользователей.Колонки.Добавить(ИмяПоляПользователь, Метаданные.РегистрыСведений.СоставыГруппПользователей.Измерения.ГруппаПользователей.Тип);
		Для Каждого Строка Из МассивСтрок Цикл
			ТаблицаПользователей.Добавить()[ИмяПоляПользователь] = Строка[ИмяПоляПользователь];
			Если ОбработатьИерархиюВторогоИТретьегоУровней Тогда
				Для каждого Строка2 Из Строка.ПолучитьЭлементы() Цикл
					ТаблицаПользователей.Добавить()[ИмяПоляПользователь] = Строка2[ИмяПоляПользователь];
					Для каждого Строка3 Из Строка2.ПолучитьЭлементы() Цикл
						ТаблицаПользователей.Добавить()[ИмяПоляПользователь] = Строка3[ИмяПоляПользователь];
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ТаблицаИлиДерево) = Тип("ДанныеФормыКоллекция") Тогда
		Если МассивСтрок = Неопределено Тогда
			МассивСтрок = ТаблицаИлиДерево;
		КонецЕсли;
		ТаблицаПользователей = Новый ТаблицаЗначений;
		ТаблицаПользователей.Колонки.Добавить(ИмяПоляПользователь, Метаданные.РегистрыСведений.СоставыГруппПользователей.Измерения.ГруппаПользователей.Тип);
		Для Каждого Строка Из МассивСтрок Цикл
			ТаблицаПользователей.Добавить()[ИмяПоляПользователь] = Строка[ИмяПоляПользователь];
		КонецЦикла;
	ИначеЕсли ТипЗнч(ТаблицаИлиДерево) = Тип("Массив") Тогда
		МассивСтрок = ТаблицаИлиДерево;
		ТаблицаПользователей = Новый ТаблицаЗначений;
		ТаблицаПользователей.Колонки.Добавить(ИмяПоляПользователь, Метаданные.РегистрыСведений.СоставыГруппПользователей.Измерения.ГруппаПользователей.Тип);
		Для Каждого Строка Из ТаблицаИлиДерево Цикл
			ТаблицаПользователей.Добавить()[ИмяПоляПользователь] = Строка[ИмяПоляПользователь];
		КонецЦикла;
	Иначе
		Если МассивСтрок = Неопределено Тогда
			МассивСтрок = ТаблицаИлиДерево;
		КонецЕсли;
		ТаблицаПользователей = ТаблицаИлиДерево.Выгрузить(МассивСтрок, ИмяПоляПользователь);
	КонецЕсли;

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Пользователи.ИмяПоляПользователь КАК Пользователь
	|ПОМЕСТИТЬ Пользователи
	|ИЗ
	|	&Пользователи КАК Пользователи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Пользователь,
	|	ВЫБОР
	|		КОГДА Пользователи.Пользователь = НЕОПРЕДЕЛЕНО
	|			ТОГДА -1
	|		КОГДА ТИПЗНАЧЕНИЯ(Пользователи.Пользователь) = ТИП(Справочник.Пользователи)
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Пользователи.Пользователь КАК Справочник.Пользователи).ПометкаУдаления
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОГДА ТИПЗНАЧЕНИЯ(Пользователи.Пользователь) = ТИП(Справочник.ГруппыПользователей)
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Пользователи.Пользователь КАК Справочник.ГруппыПользователей).ПометкаУдаления
	|						ТОГДА 2
	|					ИНАЧЕ 3
	|				КОНЕЦ
	|		КОГДА ТИПЗНАЧЕНИЯ(Пользователи.Пользователь) = ТИП(Справочник.ВнешниеПользователи)
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Пользователи.Пользователь КАК Справочник.ВнешниеПользователи).ПометкаУдаления
	|						ТОГДА 6
	|					ИНАЧЕ 7
	|				КОНЕЦ
	|		КОГДА ТИПЗНАЧЕНИЯ(Пользователи.Пользователь) = ТИП(Справочник.ГруппыВнешнихПользователей)
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Пользователи.Пользователь КАК Справочник.ГруппыВнешнихПользователей).ПометкаУдаления
	|						ТОГДА 8
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		ИНАЧЕ -2
	|	КОНЕЦ КАК НомерКартинки
	|ИЗ
	|	Пользователи КАК Пользователи";
	Запрос.Текст	= СтрЗаменить(Запрос.Текст, "ИмяПоляПользователь", ИмяПоляПользователь);
	Запрос.УстановитьПараметр("Пользователи", ТаблицаПользователей);
	НомераКартинок = Запрос.Выполнить().Выгрузить();

	Для Каждого Строка Из МассивСтрок Цикл
		НайденнаяСтрока					= НомераКартинок.Найти(Строка[ИмяПоляПользователь], "Пользователь");
		Строка[ИмяПоляНомераКартинки]	= ?(НайденнаяСтрока = Неопределено, -2, НайденнаяСтрока.НомерКартинки);
		Если ОбработатьИерархиюВторогоИТретьегоУровней Тогда
			Для каждого Строка2 Из Строка.ПолучитьЭлементы() Цикл
				НайденнаяСтрока					= НомераКартинок.Найти(Строка2[ИмяПоляПользователь], "Пользователь");
				Строка2[ИмяПоляНомераКартинки]	= ?(НайденнаяСтрока = Неопределено, -2, НайденнаяСтрока.НомерКартинки);
				Для каждого Строка3 Из Строка2.ПолучитьЭлементы() Цикл
					НайденнаяСтрока					= НомераКартинок.Найти(Строка3[ИмяПоляПользователь], "Пользователь");
					Строка3[ИмяПоляНомераКартинки]	= ?(НайденнаяСтрока = Неопределено, -2, НайденнаяСтрока.НомерКартинки);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция П_СоздатьПароль(НаименьшаяДлина = 7, Сложный = Ложь, УчестьНастройки = "ДляПользователей") Экспорт
	Если УчестьНастройки = "ДляВнешнихПользователей" Тогда
		НастройкиВхода = ПользователиСерверПовтИсп.сП_Настройки().ВнешниеПользователи;
	ИначеЕсли УчестьНастройки = "ДляПользователей" Тогда
		НастройкиВхода = ПользователиСерверПовтИсп.сП_Настройки().Пользователи;
	Иначе
		НастройкиВхода = Неопределено;
	КонецЕсли;

	МинимальнаяДлинаПароля	= НаименьшаяДлина;
	СложныйПароль			= Сложный;

	Если НастройкиВхода <> Неопределено Тогда
		МинимальнаяДлинаПароляИБ = ПолучитьМинимальнуюДлинуПаролейПользователей();
		Если МинимальнаяДлинаПароля < МинимальнаяДлинаПароляИБ Тогда
			МинимальнаяДлинаПароля = МинимальнаяДлинаПароляИБ;
		КонецЕсли;
		Если МинимальнаяДлинаПароля < НастройкиВхода.МинимальнаяДлинаПароля Тогда
			МинимальнаяДлинаПароля = НастройкиВхода.МинимальнаяДлинаПароля;
		КонецЕсли;

		СложныйПарольИБ = ПолучитьПроверкуСложностиПаролейПользователей();
		Если СложныйПарольИБ Или НастройкиВхода.ПарольДолженОтвечатьТребованиямСложности Тогда
			СложныйПароль = Истина;
		КонецЕсли;
	КонецЕсли;

	ПараметрыПароля = сП_ПараметрыПароля(МинимальнаяДлинаПароля, СложныйПароль);

	Возврат сП_СоздатьПароль(ПараметрыПароля);
КонецФункции

Функция П_СсылкаНеуказанногоПользователя(СоздатьЕслиНеСуществует = Ложь) Экспорт
	Ссылка = сП_СвойстваНеуказанногоПользователя().Ссылка;

	Если Ссылка = Неопределено И СоздатьЕслиНеСуществует Тогда
		Ссылка = сП_СоздатьНеуказанногоПользователя();
	КонецЕсли;

	Возврат Ссылка;
КонецФункции

Функция сП_АвторизоватьТекущегоПользователяПриВходе(РегистрироватьВЖурнале) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ОшибкаАвторизации", "");
	Результат.Вставить("ТребуетсяСменитьПароль", Ложь);

	ОшибкаАвторизации = сП_АвторизоватьТекущегоПользователя(Истина, РегистрироватьВЖурнале);

	Если Не ЗначениеЗаполнено(ОшибкаАвторизации) Тогда
		сП_ОтключитьНеактивныхИПросроченныхПользователей(Истина, ОшибкаАвторизации, РегистрироватьВЖурнале);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ОшибкаАвторизации) Тогда
		сП_ПроверитьВходВПрограммуРазрешен(ОшибкаАвторизации);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ОшибкаАвторизации) Тогда
		Результат.ТребуетсяСменитьПароль = сП_ТребуетсяСменитьПароль(ОшибкаАвторизации, Истина, РегистрироватьВЖурнале);
	КонецЕсли;

	Результат.ОшибкаАвторизации = ОшибкаАвторизации;

	Возврат Результат;
КонецФункции

Процедура сП_КонтрольАктивностиПользователей() Экспорт
	БазоваяПодсистемаСервер.ОН_ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.КонтрольАктивностиПользователей);

	сП_ОтключитьНеактивныхИПросроченныхПользователей();
КонецПроцедуры

Функция сП_АвторизованныйПользователь() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Возврат ?(ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь),
	          ПараметрыСеанса.ТекущийПользователь,
	          ПараметрыСеанса.ТекущийВнешнийПользователь);
КонецФункции

Процедура сП_ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры, Отказ, ЭтоВызовПередНачаломРаботыСистемы) Экспорт
	Если Не ЭтоВызовПередНачаломРаботыСистемы Тогда
		КлючПредупрежденияБезопасности = сП_КлючПредупрежденияБезопасностиПриЗапуске();
		Если ЗначениеЗаполнено(КлючПредупрежденияБезопасности) Тогда
			Параметры.Вставить("КлючПредупрежденияБезопасности", КлючПредупрежденияБезопасности);
		КонецЕсли;

		Возврат;
	КонецЕсли;

	РегистрироватьВЖурнале = Параметры.ПолученныеПараметрыКлиента <> Неопределено
		И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ОшибкаАвторизации");

	Результат = сП_АвторизоватьТекущегоПользователяПриВходе(РегистрироватьВЖурнале);

	Если Результат.ТребуетсяСменитьПароль Тогда
		Параметры.Вставить("ТребуетсяСменитьПароль");
		БазоваяПодсистемаВызовСервера.СП_СкрытьРабочийСтолПриНачалеРаботыСистемы();
	КонецЕсли;

	Если ЗначениеЗаполнено(Результат.ОшибкаАвторизации) Тогда
		Параметры.Вставить("ОшибкаАвторизации", Результат.ОшибкаАвторизации);;
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Функция сП_КлючПредупрежденияБезопасностиПриЗапуске()
	Если ПустаяСтрока(ПользователиИнформационнойБазы.ТекущийПользователь().Имя) Тогда
		Возврат Неопределено; // В базе без пользователей предупреждение не требуется.
	КонецЕсли;

	Если ПривилегированныйРежим() Тогда
		Возврат Неопределено; // С ключом запуска "/UsePrivilegedMode" предупреждение не требуется.
	КонецЕсли;

	Если БазоваяПодсистемаСервер.ОН_ЭтоПодчиненныйУзелРИБ() Тогда
		// Зарезервировано для новых подсистем

		Возврат Неопределено; // В подчиненных узлах предупреждение не требуется.
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	Если Не ПривилегированныйРежим() Тогда
		Возврат Неопределено; // В безопасном режиме предупреждение не требуется.
	КонецЕсли;

	ПараметрыАдминистрирования = БазоваяПодсистемаСервер.СП_ПараметрыАдминистрирования();
	РешениеПринято = ПараметрыАдминистрирования.ПринятоРешениеПоОткрытиюВнешнихОтчетовИОбработок;
	Если ТипЗнч(РешениеПринято) <> Тип("Булево") Тогда
		РешениеПринято = Ложь;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

	ЭтоАдминистраторСистемы = П_ЭтоПолноправныйПользователь(, Истина, Ложь);
	Если ЭтоАдминистраторСистемы И Не РешениеПринято Тогда
		Возврат "ПослеОбновления";
	КонецЕсли;

	Если РешениеПринято Тогда
		Если ПравоДоступа("ИнтерактивноеОткрытиеВнешнихОбработок", Метаданные)
		 Или ПравоДоступа("ИнтерактивноеОткрытиеВнешнихОтчетов", Метаданные) Тогда

			ПользовательОзнакомлен = БазоваяПодсистемаСервер.ОН_ХранилищеЗагрузить(
				ХранилищеОбщихНастроек,
				"ПредупреждениеБезопасности",
				"ПользовательОзнакомлен",
				Ложь,
				Неопределено,
				Неопределено);

			Если Не ПользовательОзнакомлен Тогда
				Возврат "ПослеПоявленияПрава";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

Функция сП_АвторизоватьТекущегоПользователя(ПриНачалеРаботыСистемы = Ложь, РегистрироватьВЖурнале = Ложь) Экспорт
	Если Не ПриНачалеРаботыСистемы Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользовательИБ	= ПользователиИнформационнойБазы.ТекущийПользователь();
	ЭтоВнешнийПользователь	= ЗначениеЗаполнено(Справочники.ВнешниеПользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ТекущийПользовательИБ.УникальныйИдентификатор));
	ТекстОшибки = сП_ПроверитьПраваПользователя(ТекущийПользовательИБ, "ПриЗапуске", ЭтоВнешнийПользователь, Не ПриНачалеРаботыСистемы, РегистрироватьВЖурнале);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат ТекстОшибки;
	КонецЕсли;

	Если ПустаяСтрока(ТекущийПользовательИБ.Имя) Тогда
		// Авторизуется пользователь по умолчанию.
		Попытка
			Значения = сП_ЗначенияПараметровСеансаТекущийПользователь();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Возврат сП_КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(ИнформацияОбОшибке,
				"Не удалось установить параметр сеанса ТекущийПользователь по причине:
				           |""%1"".
				           |
				           |Обратитесь к администратору.",
				РегистрироватьВЖурнале);
		КонецПопытки;
		Если ТипЗнч(Значения) = Тип("Строка") Тогда
			Возврат сП_КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(Значения, , РегистрироватьВЖурнале);
		КонецЕсли;

		Возврат сП_РезультатУстановкиПараметровСеанса(РегистрироватьВЖурнале);
	КонецЕсли;

	НайденныйПользователь = Неопределено;
	сП_ПользовательПоИдентификаторуСуществует(ТекущийПользовательИБ.УникальныйИдентификатор,, НайденныйПользователь);

	Если Не ЗначениеЗаполнено(НайденныйПользователь) Тогда
		сП_ПользовательПоИдентификаторуСуществует(ТекущийПользовательИБ.УникальныйИдентификатор,, НайденныйПользователь);
	КонецЕсли;

	Если ЗначениеЗаполнено(НайденныйПользователь) Тогда
		// ПользовательИБ найден в справочнике.
		Если ПриНачалеРаботыСистемы И сП_РолиАдминистратораДоступны() Тогда
			ИнтеграцияПодсистемСервер.ПриСозданииАдминистратора(НайденныйПользователь, "При авторизации у пользователя найдены роли администратора.");
		КонецЕсли;

		Возврат сП_РезультатУстановкиПараметровСеанса(РегистрироватьВЖурнале);
	КонецЕсли;

	// Требуется либо создать администратора, либо сообщить об отказе авторизации.
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();

	Если ПользователиИБ.Количество() > 1
	   И Не сП_РолиАдминистратораДоступны()
	   И Не ПравоДоступа("Администрирование", Метаданные, ТекущийПользовательИБ) Тогда

		// Авторизуется обычный пользователь, созданный в конфигураторе.
		Возврат сП_КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(
			сП_ТекстСообщенияПользовательНеНайденВСправочнике(ТекущийПользовательИБ.Имя),
			, РегистрироватьВЖурнале);
	КонецЕсли;

	// Авторизуется администратор, созданный в конфигураторе.
	Если Не сП_РолиАдминистратораДоступны() Тогда
		Возврат сП_КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(
			"Запуск от имени пользователя с правом Администрирование невозможен,
			           |так как он не зарегистрирован в списке пользователей.
			           |
			           |Для ведения списка и настройки прав пользователей предназначен список Пользователи,
			           |режим конфигурирования 1С:Предприятия для этого использовать не следует.",
			, РегистрироватьВЖурнале);
	КонецЕсли;

	Попытка
		Пользователь = П_СоздатьАдминистратора(ТекущийПользовательИБ);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Возврат сП_КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(ИнформацияОбОшибке,
			"Не удалось выполнить автоматическую регистрацию администратора в списке по причине:
			           |""%1"".
			           |
			           |Для ведения списка и настройки прав пользователей предназначен список Пользователи,
			           |режим конфигурирования 1С:Предприятия для этого использовать не следует.",
			РегистрироватьВЖурнале);
	КонецПопытки;

	Комментарий =
		"Выполнен запуск от имени пользователя с ролью ""Полные права"",
		           |который не зарегистрирован в списке пользователей.
		           |Выполнена автоматическая регистрация в списке пользователей.
		           |
		           |Для ведения списка и настройки прав пользователей предназначен список Пользователи,
		           |режим конфигурирования 1С:Предприятия для этого использовать не следует.";

	ИнтеграцияПодсистемСервер.ПослеЗаписиАдминистратораПриАвторизации(Комментарий);

	ЗаписьЖурналаРегистрации(
		"Пользователи.Администратор зарегистрирован в справочнике Пользователи",
		УровеньЖурналаРегистрации.Предупреждение,
		Метаданные.Справочники.Пользователи,
		Пользователь,
		Комментарий);

	Возврат сП_РезультатУстановкиПараметровСеанса(РегистрироватьВЖурнале);
КонецФункции

Функция сП_ПроверитьПраваПользователя(ПользовательИБ, РежимПроверки, ЭтоВнешнийПользователь, ВызыватьИсключение = Истина, РегистрироватьВЖурнале = Истина) Экспорт
	Если РежимПроверки = "ПриЗапуске" И Не ЭтоВнешнийПользователь Тогда
		Возврат ""; // Не нужно проверять права пользователей при запуске в локальном режиме.
	КонецЕсли;

	НедоступныеРоли = ПользователиСерверПовтИсп.сП_НедоступныеРолиПоТипуПользователя(ЭтоВнешнийПользователь);

	РолиДляПроверки = Новый ТаблицаЗначений;
	РолиДляПроверки.Колонки.Добавить("Роль", Новый ОписаниеТипов("ОбъектМетаданных"));
	Для Каждого Роль Из ПользовательИБ.Роли Цикл
		РолиДляПроверки.Добавить().Роль = Роль;
	КонецЦикла;
	РолиДляПроверки.Индексы.Добавить("Роль");

	Если РежимПроверки = "ПередЗаписью" Тогда
		ПрежнийПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательИБ.УникальныйИдентификатор);

		Если ПрежнийПользовательИБ <> Неопределено Тогда
			Для Каждого Роль Из ПрежнийПользовательИБ.Роли Цикл
				Строка = РолиДляПроверки.Найти(Роль, "Роль");
				Если Строка <> Неопределено Тогда
					РолиДляПроверки.Удалить(Строка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	ДобавляемыеНедоступныеРоли	= "";
	НазначениеРолей				= Неопределено;

	Для Каждого ОписаниеРоли Из РолиДляПроверки Цикл
		Роль	= ОписаниеРоли.Роль;
		ИмяРоли	= Роль.Имя;

		Если НедоступныеРоли.Получить(ИмяРоли) = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если НазначениеРолей = Неопределено Тогда
			НазначениеРолей = ПользователиСерверПовтИсп.сП_НазначениеРолей();
		КонецЕсли;

		Если НазначениеРолей.ТолькоДляАдминистраторовСистемы.Получить(ИмяРоли) <> Неопределено Тогда
			ТекстШаблона = """%1"" (предназначена только для администраторов системы)";
		ИначеЕсли НазначениеРолей.ТолькоДляВнешнихПользователей.Получить(ИмяРоли) <> Неопределено Тогда
			ТекстШаблона = """%1"" (предназначена только для внешних пользователей)";
		Иначе // Это внешний пользователь.
			ТекстШаблона = """%1"" (предназначена только для пользователей)";
		КонецЕсли;

		ДобавляемыеНедоступныеРоли = ДобавляемыеНедоступныеРоли + СтрШаблон(ТекстШаблона, Роль.Представление()) + Символы.ПС;;
	КонецЦикла;

	ДобавляемыеНедоступныеРоли = СокрЛП(ДобавляемыеНедоступныеРоли);

	Если Не ЗначениеЗаполнено(ДобавляемыеНедоступныеРоли) Тогда
		Возврат "";
	КонецЕсли;

	Если РежимПроверки = "ПриЗапуске" Тогда
		Если ВызыватьИсключение Или РегистрироватьВЖурнале Тогда
			Если СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) = 1 Тогда
				ТекстРегистрацииВхода = СтрШаблон("Попытка входа пользователя %1 с недоступной ролью:
					           |%2.",
				ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
			Иначе
				ТекстРегистрацииВхода = СтрШаблон("Попытка входа пользователя %1 с недоступными ролями:
					           |%2.",
				ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
			КонецЕсли;
			ЗаписьЖурналаРегистрации("Пользователи.Ошибка входа в программу",УровеньЖурналаРегистрации.Ошибка, , ПользовательИБ, ТекстРегистрацииВхода);
		КонецЕсли;

		ТекстСообщенияВхода = "Невозможно выполнить вход из-за наличия недоступных ролей.
			           |Обратитесь к администратору.";
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстСообщенияВхода;
		Иначе
			Возврат ТекстСообщенияВхода;
		КонецЕсли;
	КонецЕсли;

	Если ВызыватьИсключение Или РегистрироватьВЖурнале Тогда
		Если СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) = 1 И ЗначениеЗаполнено(ДобавляемыеНедоступныеРоли) Тогда
			ТекстРегистрацииДобавления = СтрШаблон("Попытка назначить пользователю %1 недоступную роль:
				           |%2.",
				ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
		ИначеЕсли СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) > 1 Тогда
			ТекстРегистрацииДобавления = СтрШаблон("Попытка назначить пользователю %1 недоступные роли:
				           |%2.",
				ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
		Иначе
			ТекстРегистрацииДобавления = "";
		КонецЕсли;
		ИмяСобытия = "Пользователи.Ошибка при установке ролей пользователю ИБ";

		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПользовательИБ, ТекстРегистрацииДобавления);
	КонецЕсли;

	Если СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) = 1 И ЗначениеЗаполнено(ДобавляемыеНедоступныеРоли) Тогда
		ТекстСообщенияДобавления = СтрШаблон("Пользователю ""%1"" невозможно назначить недоступную роль:
			           |%2.",
			ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
	ИначеЕсли СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) > 1 Тогда
		ТекстСообщенияДобавления = СтрШаблон("Пользователю ""%1"" невозможно назначить недоступные роли:
			           |%2.",
			ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
	Иначе
		ТекстСообщенияДобавления = "";
	КонецЕсли;

	Если ВызыватьИсключение Тогда
		ВызватьИсключение ТекстСообщенияДобавления;
	Иначе
		Возврат ТекстСообщенияДобавления;
	КонецЕсли;
КонецФункции

Функция сП_ЗначенияПараметровСеансаТекущийПользователь()
	ЗаголовокОшибки = "Не удалось установить параметр сеанса ТекущийПользователь." + Символы.ПС;

	НачатьТранзакцию();
	Попытка
		СведенияОПользователе = сП_НайтиТекущегоПользователяВСправочнике();

		Если СведенияОПользователе.СоздатьПользователя Тогда
			сП_СоздатьТекущегоПользователяВСправочнике(СведенияОПользователе);
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

	Если Не СведенияОПользователе.СоздатьПользователя
	   И Не СведенияОПользователе.ПользовательНайден Тогда

		Возврат ЗаголовокОшибки + сП_ТекстСообщенияПользовательНеНайденВСправочнике(
			СведенияОПользователе.ИмяПользователя);
	КонецЕсли;

	Если СведенияОПользователе.ТекущийПользователь        = Неопределено
	 Или СведенияОПользователе.ТекущийВнешнийПользователь = Неопределено Тогда

		Возврат ЗаголовокОшибки + сП_ТекстСообщенияПользовательНеНайденВСправочнике(
				СведенияОПользователе.ИмяПользователя) + Символы.ПС
			+ "Возникла внутренняя ошибка при поиске пользователя.";
	КонецЕсли;

	Значения = Новый Структура;
	Значения.Вставить("ТекущийПользователь",        СведенияОПользователе.ТекущийПользователь);
	Значения.Вставить("ТекущийВнешнийПользователь", СведенияОПользователе.ТекущийВнешнийПользователь);

	Возврат Значения;
КонецФункции

Функция сП_НайтиТекущегоПользователяВСправочнике()
	Результат = Новый Структура;
	Результат.Вставить("ИмяПользователя",             Неопределено);
	Результат.Вставить("ПолноеИмяПользователя",       Неопределено);
	Результат.Вставить("ИдентификаторПользователяИБ", Неопределено);
	Результат.Вставить("ПользовательНайден",          Ложь);
	Результат.Вставить("СоздатьПользователя",         Ложь);
	Результат.Вставить("СсылкаНового",                Неопределено);
	Результат.Вставить("Служебный",                   Ложь);
	Результат.Вставить("ТекущийПользователь",         Неопределено);
	Результат.Вставить("ТекущийВнешнийПользователь",  Справочники.ВнешниеПользователи.ПустаяСсылка());

	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();

	Если ПустаяСтрока(ТекущийПользовательИБ.Имя) Тогда
		СвойстваНеуказанногоПользователя = сП_СвойстваНеуказанногоПользователя();

		Результат.ИмяПользователя       = СвойстваНеуказанногоПользователя.ПолноеИмя;
		Результат.ПолноеИмяПользователя = СвойстваНеуказанногоПользователя.ПолноеИмя;
		Результат.СсылкаНового          = СвойстваНеуказанногоПользователя.СтандартнаяСсылка;

		Если СвойстваНеуказанногоПользователя.Ссылка = Неопределено Тогда
			Результат.СоздатьПользователя			= Истина;
			Результат.Служебный						= Истина;
			Результат.ИдентификаторПользователяИБ	= "";
		Иначе
			Результат.ПользовательНайден	= Истина;
			Результат.ТекущийПользователь	= СвойстваНеуказанногоПользователя.Ссылка;
		КонецЕсли;

		Возврат Результат;
	КонецЕсли;

	Результат.ИмяПользователя             = ТекущийПользовательИБ.Имя;
	Результат.ИдентификаторПользователяИБ = ТекущийПользовательИБ.УникальныйИдентификатор;

	П_НайтиНеоднозначныхПользователейИБ(Неопределено, Результат.ИдентификаторПользователяИБ);

	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ИдентификаторПользователяИБ", Результат.ИдентификаторПользователяИБ);

	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВнешниеПользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей") Тогда
			Возврат НСтр("ru = 'Внешние пользователи отключены.'");
		КонецЕсли;

		Результат.ТекущийПользователь        = Справочники.Пользователи.ПустаяСсылка();
		Результат.ТекущийВнешнийПользователь = Выборка.Ссылка;

		Результат.ПользовательНайден = Истина;
		Возврат Результат;
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Результат.ТекущийПользователь	= Выборка.Ссылка;
		Результат.ПользовательНайден	= Истина;

		Возврат Результат;
	КонецЕсли;

	Если Не Результат.СоздатьПользователя
	   И Не сП_РолиАдминистратораДоступны() Тогда

		Возврат Результат;
	КонецЕсли;

	Результат.ИдентификаторПользователяИБ = ТекущийПользовательИБ.УникальныйИдентификатор;
	Результат.ПолноеИмяПользователя       = ТекущийПользовательИБ.ПолноеИмя;

	Если Результат.СоздатьПользователя Тогда
		Возврат Результат;
	КонецЕсли;

	ПользовательПоНаименованию = сП_СсылкаПользователяПоПолномуНаименованию(Результат.ПолноеИмяПользователя);

	Если ПользовательПоНаименованию <> Неопределено Тогда
		Результат.ПользовательНайден  = Истина;
		Результат.ТекущийПользователь = ПользовательПоНаименованию;
	Иначе
		Результат.СоздатьПользователя = Истина;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция сП_СсылкаПользователяПоПолномуНаименованию(ПолноеИмя)
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Наименование = &ПолноеИмя";

	Запрос.УстановитьПараметр("ПолноеИмя", ПолноеИмя);

	Результат = Неопределено;

	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();

			Если НЕ П_ПользовательИБЗанят(Выборка.ИдентификаторПользователяИБ) Тогда
				Результат = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Возврат Результат;
КонецФункции

Функция сП_ПользовательПоИдентификаторуСуществует(УникальныйИдентификатор, СсылкаНаТекущего = Неопределено, НайденныйПользователь = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаТекущего", СсылкаНаТекущего);
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор
	|	И Пользователи.Ссылка <> &СсылкаНаТекущего
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнешниеПользователи.Ссылка
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор
	|	И ВнешниеПользователи.Ссылка <> &СсылкаНаТекущего";

	Результат = Ложь;
	НайденныйПользователь = Неопределено;

	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка					= РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		НайденныйПользователь	= Выборка.Пользователь;
		Результат				= Истина;
		П_НайтиНеоднозначныхПользователейИБ(Неопределено, УникальныйИдентификатор);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция сП_РолиАдминистратораДоступны(ПользовательИБ = Неопределено) Экспорт
	Если ПользовательИБ = Неопределено
		Или ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь() Тогда

		Возврат РольДоступна(Метаданные.Роли.ПолныеПрава)          // Не заменять на РолиДоступны.
		     И (РольДоступна(Метаданные.Роли.АдминистраторСистемы)); // Не заменять на РолиДоступны.
	КонецЕсли;

	Возврат ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава)
	     И (ПользовательИБ.Роли.Содержит(Метаданные.Роли.АдминистраторСистемы));
КонецФункции

Функция сП_СвойстваНеуказанногоПользователя() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Свойства = Новый Структура;

	// Ссылка на найденный элемент справочника
	// соответствующий неуказанному пользователю.
	Свойства.Вставить("Ссылка", Неопределено);

	// Ссылка, используемая для поиска и создания
	// неуказанного пользователя в справочнике Пользователи.
	Свойства.Вставить("СтандартнаяСсылка", Справочники.Пользователи.ПолучитьСсылку(
		Новый УникальныйИдентификатор("aa00559e-ad84-4494-88fd-f0826edc46f0")));

	// Полное имя, которое устанавливается в элемент справочника Пользователи
	// при создании несуществующего неуказанного пользователя.
	Свойства.Вставить("ПолноеИмя", "<Не указан>");

	// Полное имя, которое используется для поиска неуказанного пользователя
	// старым способом, необходимым для поддержки старых версий
	// неуказанного пользователя. Это имя не требуется изменять.
	Свойства.Вставить("ПолноеИмяДляПоиска", "<Не указан>");

	// Поиск по уникальному идентификатору.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Свойства.СтандартнаяСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Ссылка";

	НачатьТранзакцию();
	Попытка
		Если Запрос.Выполнить().Пустой() Тогда
			Запрос.УстановитьПараметр("ПолноеИмя", Свойства.ПолноеИмяДляПоиска);
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Пользователи.Ссылка
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.Наименование = &ПолноеИмя";
			Результат = Запрос.Выполнить();

			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				Свойства.Ссылка = Выборка.Ссылка;
			КонецЕсли;
		Иначе
			Свойства.Ссылка = Свойства.СтандартнаяСсылка;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Возврат Свойства;
КонецФункции

Функция сП_СоздатьНеуказанногоПользователя() Экспорт
	СвойстваНеуказанногоПользователя = сП_СвойстваНеуказанногоПользователя();

	Если БазоваяПодсистемаСервер.ОН_СсылкаСуществует(СвойстваНеуказанногоПользователя.СтандартнаяСсылка) Тогда
		Возврат СвойстваНеуказанногоПользователя.СтандартнаяСсылка;
	Иначе
		НовыйПользователь						= Справочники.Пользователи.СоздатьЭлемент();
		НовыйПользователь.Служебный				= Истина;
		НовыйПользователь.Наименование			= СвойстваНеуказанногоПользователя.ПолноеИмя;
		НовыйПользователь.УстановитьСсылкуНового(СвойстваНеуказанногоПользователя.СтандартнаяСсылка);
		НовыйПользователь.ОбменДанными.Загрузка	= Истина;
		НовыйПользователь.Записать();

		Возврат НовыйПользователь.Ссылка;
	КонецЕсли;
КонецФункции

Функция сП_ТекстСообщенияПользовательНеНайденВСправочнике(ИмяПользователя)
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей") Тогда
		ШаблонСообщенияОбОшибке =
			"Пользователь ""%1"" не существует в справочниках
			           |""Пользователи"" и ""Внешние пользователи"".
			           |
			           |Обратитесь к администратору.";
	Иначе
		ШаблонСообщенияОбОшибке =
			"Пользователь ""%1"" не существует в справочнике ""Пользователи"".
			           |
			           |Обратитесь к администратору.";
	КонецЕсли;

	Возврат СтрШаблон(ШаблонСообщенияОбОшибке, ИмяПользователя);
КонецФункции

Процедура сП_СоздатьТекущегоПользователяВСправочнике(СведенияОПользователе)
	НачатьТранзакцию();
	Попытка
		Если СведенияОПользователе.СсылкаНового = Неопределено Тогда
			СведенияОПользователе.СсылкаНового = Справочники.Пользователи.ПолучитьСсылку();
		КонецЕсли;

		СведенияОПользователе.ТекущийПользователь = СведенияОПользователе.СсылкаНового;

		ПараметрыСеанса.ТекущийПользователь			= СведенияОПользователе.ТекущийПользователь;
		ПараметрыСеанса.ТекущийВнешнийПользователь	= СведенияОПользователе.ТекущийВнешнийПользователь;
		ПараметрыСеанса.АвторизованныйПользователь	= СведенияОПользователе.ТекущийПользователь;

		НовыйПользователь				= Справочники.Пользователи.СоздатьЭлемент();
		НовыйПользователь.Служебный		= СведенияОПользователе.Служебный;
		НовыйПользователь.Наименование	= СведенияОПользователе.ПолноеИмяПользователя;
		НовыйПользователь.УстановитьСсылкуНового(СведенияОПользователе.СсылкаНового);

		Если ЗначениеЗаполнено(СведенияОПользователе.ИдентификаторПользователяИБ) Тогда
			ОписаниеПользователяИБ = Новый Структура;
			ОписаниеПользователяИБ.Вставить("Действие",					"Записать");
			ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор",	СведенияОПользователе.ИдентификаторПользователяИБ);

			НовыйПользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		КонецЕсли;

		НовыйПользователь.Записать();

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОчищаемыеПараметры = Новый Массив;
		ОчищаемыеПараметры.Добавить("ТекущийПользователь");
		ОчищаемыеПараметры.Добавить("ТекущийВнешнийПользователь");
		ОчищаемыеПараметры.Добавить("АвторизованныйПользователь");
		ПараметрыСеанса.Очистить(ОчищаемыеПараметры);

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Функция сП_РезультатУстановкиПараметровСеанса(РегистрироватьВЖурнале)
	Попытка
		сП_АвторизованныйПользователь();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Возврат сП_КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(ИнформацияОбОшибке,, РегистрироватьВЖурнале);
	КонецПопытки;

	Возврат "";
КонецФункции

Функция сП_КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(ИнформацияОбОшибке, ШаблонОшибки = "", РегистрироватьВЖурнале = Истина)
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		КраткоеПредставление   = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставление = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		КраткоеПредставление   = ИнформацияОбОшибке;
		ПодробноеПредставление = ИнформацияОбОшибке;
	КонецЕсли;

	Если ЗначениеЗаполнено(ШаблонОшибки) Тогда
		КраткоеПредставление	= СтрШаблон(ШаблонОшибки, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ПодробноеПредставление	= СтрШаблон(ШаблонОшибки, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецЕсли;

	КраткоеПредставление   = "Авторизация не выполнена. Работа системы будет завершена." + Символы.ПС + Символы.ПС + КраткоеПредставление;
	ПодробноеПредставление = "Авторизация не выполнена. Работа системы будет завершена." + Символы.ПС + Символы.ПС + ПодробноеПредставление;

	Если РегистрироватьВЖурнале Тогда
		ЗаписьЖурналаРегистрации("Пользователи.Ошибка входа в программу", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставление);
	КонецЕсли;

	Возврат КраткоеПредставление;
КонецФункции

Функция сП_ТребуетсяСменитьПароль(ОписаниеОшибки = "", ПриЗапуске = Ложь, РегистрироватьВЖурнале = Истина)
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	Если Не ЗначениеЗаполнено(ПользовательИБ.Имя) Тогда
		Возврат Ложь;
	КонецЕсли;

	// Обновление даты последнего входа пользователя.
	УстановитьПривилегированныйРежим(Истина);
	ТекущийПользователь = сП_АвторизованныйПользователь();
	НачалоДняТекущейДатыСеанса = НачалоДня(ТекущаяДатаСеанса());

	Блокировка			= Новый БлокировкаДанных;
	ЭлементБлокировки	= Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
	ЭлементБлокировки.УстановитьЗначение("Пользователь", ТекущийПользователь);
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			СведенияОПользователе				= НаборЗаписей.Добавить();
			СведенияОПользователе.Пользователь	= ТекущийПользователь;
		Иначе
			СведенияОПользователе				= НаборЗаписей[0];
		КонецЕсли;
		Записать = Ложь;
		Если СведенияОПользователе.ДатаПоследнейАктивности <> НачалоДняТекущейДатыСеанса Тогда
			СведенияОПользователе.ДатаПоследнейАктивности = НачалоДняТекущейДатыСеанса;
			Записать = Истина;
		КонецЕсли;
		ИспользуемыйКлиент = БазоваяПодсистемаСервер.СП_ПараметрыКлиентаНаСервере().Получить("ИспользуемыйКлиент");
		Если ИспользуемыйКлиент <> Неопределено И СведенияОПользователе.ПоследнийИспользуемыйКлиент <> ИспользуемыйКлиент Тогда
			СведенияОПользователе.ПоследнийИспользуемыйКлиент	= ИспользуемыйКлиент;
			Записать											= Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СведенияОПользователе.ДатаНачалаИспользованияПароля)
		 Или СведенияОПользователе.ДатаНачалаИспользованияПароля > НачалоДняТекущейДатыСеанса Тогда
			СведенияОПользователе.ДатаНачалаИспользованияПароля	= НачалоДняТекущейДатыСеанса;
			Записать											= Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(СведенияОПользователе.ДатаАвтоматическогоЗапрещенияВхода) Тогда
			СведенияОПользователе.ДатаАвтоматическогоЗапрещенияВхода	= Неопределено;
			Записать													= Истина;
		КонецЕсли;
		Если Записать Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ШаблонТекстаОшибки = "Не удалось записать сведения о текущем пользователе по причине:
		           |%1
		           |
		           |Обратитесь к администратору.";
		Если ПриЗапуске Тогда
			ОписаниеОшибки = "Авторизация не выполнена. Работа системы будет завершена." + Символы.ПС + Символы.ПС
				+ СтрШаблон(ШаблонТекстаОшибки, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));

			Если РегистрироватьВЖурнале Тогда
				ЗаписьЖурналаРегистрации(
					"Пользователи.Ошибка входа в программу",
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.НайтиПоТипу(ТипЗнч(ТекущийПользователь)),
					ТекущийПользователь,
					СтрШаблон(ШаблонТекстаОшибки, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			КонецЕсли;
		Иначе
			Если РегистрироватьВЖурнале Тогда
				ЗаписьЖурналаРегистрации(
					"Пользователи.Ошибка обновления даты последней активности",
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.НайтиПоТипу(ТипЗнч(ТекущийПользователь)),
					ТекущийПользователь,
					СтрШаблон(ШаблонТекстаОшибки, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			КонецЕсли;
		КонецЕсли;

		Возврат Ложь;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УчитыватьСвойствоЗапрещеноИзменятьПароль");
	ДополнительныеПараметры.Вставить("УчитыватьСвойствоАутентификацияСтандартная");
	Если Не сП_ВозможноИзменитьПароль(ТекущийПользователь, ДополнительныеПараметры) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если СведенияОПользователе.ПотребоватьСменуПароляПриВходе Тогда
		Возврат Истина;
	КонецЕсли;

	Если Не ПользователиСерверПовтИсп.сП_Настройки().ОбщиеНастройкиВхода Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		НастройкиВхода = ПользователиСерверПовтИсп.сП_Настройки().ВнешниеПользователи;
	Иначе
		НастройкиВхода = ПользователиСерверПовтИсп.сП_Настройки().Пользователи;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(НастройкиВхода.МаксимальныйСрокДействияПароля) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СведенияОПользователе.ДатаНачалаИспользованияПароля) Тогда
		Возврат Ложь;
	КонецЕсли;

	ОстатокМаксимальногоСрокаДействияПароля = НастройкиВхода.МаксимальныйСрокДействияПароля
		- (НачалоДняТекущейДатыСеанса - СведенияОПользователе.ДатаНачалаИспользованияПароля) / (24*60*60);

	Возврат ОстатокМаксимальногоСрокаДействияПароля <= 0;
КонецФункции

Функция сП_НастройкиВхода() Экспорт
	Настройки = Новый Структура;
	// Требования сложности.
	Настройки.Вставить("ПарольДолженОтвечатьТребованиямСложности",		Ложь);
	Настройки.Вставить("МинимальнаяДлинаПароля",						0);
	// Требования срока действия.
	Настройки.Вставить("МаксимальныйСрокДействияПароля",				0);
	Настройки.Вставить("МинимальныйСрокДействияПароля",					0);
	Настройки.Вставить("ЗапретитьПовторениеПароляСредиПоследних",		0);
	// Требование периодической работы в программе.
	Настройки.Вставить("ПросрочкаРаботыВПрограммеДоЗапрещенияВхода",	0);
	Настройки.Вставить("ПросрочкаРаботыВПрограммеДатаВключения",		'00010101');

	КопияНастроек = Новый ФиксированнаяСтруктура(Настройки);

	ПодготовленныеНастройки = Новый Структура;
	ПодготовленныеНастройки.Вставить("Пользователи", Новый Структура(КопияНастроек));
	ПодготовленныеНастройки.Вставить("ВнешниеПользователи", Настройки);

	УстановитьПривилегированныйРежим(Истина);
	СохраненныеНастройки = Константы.НастройкиВходаПользователей.Получить().Получить();
	УстановитьПривилегированныйРежим(Ложь);
	Если ТипЗнч(СохраненныеНастройки) <> Тип("Структура") Тогда
		Возврат ПодготовленныеНастройки;
	КонецЕсли;

	Для Каждого ПодготовленнаяНастройка Из ПодготовленныеНастройки Цикл
		Если Не СохраненныеНастройки.Свойство(ПодготовленнаяНастройка.Ключ)
		 Или ТипЗнч(СохраненныеНастройки[ПодготовленнаяНастройка.Ключ]) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		НачальныеНастройки	= ПодготовленнаяНастройка.Значение;
		ТекущиеНастройки	= СохраненныеНастройки[ПодготовленнаяНастройка.Ключ];

		Если ТипЗнч(ТекущиеНастройки) = Тип("Структура") Тогда
			Для Каждого НачальнаяНастройка Из НачальныеНастройки Цикл
				Если Не ТекущиеНастройки.Свойство(НачальнаяНастройка.Ключ)
				 Или ТипЗнч(ТекущиеНастройки[НачальнаяНастройка.Ключ]) <> ТипЗнч(НачальнаяНастройка.Значение) Тогда

					Продолжить;
				КонецЕсли;

				НачальныеНастройки[НачальнаяНастройка.Ключ] = ТекущиеНастройки[НачальнаяНастройка.Ключ];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Возврат ПодготовленныеНастройки;
КонецФункции

Функция сП_ВозможноИзменитьПароль(Пользователь, ДополнительныеПараметры = Неопределено) Экспорт
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Структура") Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	РеквизитыПользователя = БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта(Пользователь, "Ссылка, Недействителен, ИдентификаторПользователяИБ, Подготовлен");

	Если РеквизитыПользователя.Ссылка <> Пользователь Тогда
		РеквизитыПользователя.Ссылка						= БазоваяПодсистемаСервер.ОН_МенеджерОбъектаПоСсылке(Пользователь).ПустаяСсылка();
		РеквизитыПользователя.Недействителен				= Ложь;
		РеквизитыПользователя.Подготовлен					= Ложь;
		РеквизитыПользователя.ИдентификаторПользователяИБ	= Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли;

	Если ДополнительныеПараметры.Свойство("ПроверятьДействительностьПользователя")
	   И РеквизитыПользователя.Недействителен <> Ложь Тогда

		ДополнительныеПараметры.Вставить("ТекстОшибки", СтрШаблон("Пользователь ""%1"" недействителен.", Пользователь));

		Возврат Ложь;
	КонецЕсли;

	ИдентификаторПользователяИБ	= РеквизитыПользователя.ИдентификаторПользователяИБ;
	ПользовательИБ				= ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);

	УстановитьПривилегированныйРежим(Ложь);

	Если ДополнительныеПараметры.Свойство("ПроверятьНаличиеПользователяИБ")
	   И ПользовательИБ = Неопределено Тогда

		ДополнительныеПараметры.Вставить("ТекстОшибки", СтрШаблон("Не существует учетная запись пользователя ""%1"".", Пользователь));
		Возврат Ложь;
	КонецЕсли;

	ДополнительныеПараметры.Вставить("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);

	ИдентификаторТекущегоПользователяИБ = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	ДополнительныеПараметры.Вставить("ЭтоТекущийПользовательИБ", ИдентификаторПользователяИБ = ИдентификаторТекущегоПользователяИБ);

	УровеньДоступа = сП_УровеньДоступаКСвойствамПользователя(РеквизитыПользователя);

	Если Не ДополнительныеПараметры.ЭтоТекущийПользовательИБ
	   И Не УровеньДоступа.НастройкиДляВхода Тогда

		ДополнительныеПараметры.Вставить("ТекстОшибки", СтрШаблон("Недостаточно прав для изменения пароля пользователя ""%1"".", Пользователь));
		Возврат Ложь;
	КонецЕсли;

	ДополнительныеПараметры.Вставить("ПарольУстановлен", ПользовательИБ <> Неопределено И ПользовательИБ.ПарольУстановлен);

	Если ПользовательИБ <> Неопределено И ПользовательИБ.ЗапрещеноИзменятьПароль Тогда
		Если УровеньДоступа.НастройкиДляВхода Тогда
			Если ДополнительныеПараметры.Свойство("УчитыватьСвойствоЗапрещеноИзменятьПароль") Тогда
				ДополнительныеПараметры.Вставить("ТекстОшибки", СтрШаблон("Установлен запрет изменения пароля пользователя ""%1"".", Пользователь));
				Возврат Ложь;
			КонецЕсли;
		Иначе
			ДополнительныеПараметры.Вставить("ТекстОшибки", СтрШаблон(
				"Установлен запрет изменения пароля пользователя ""%1"".
				           |Обратитесь к администратору.", Пользователь));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Если ДополнительныеПараметры.Свойство("УчитыватьСвойствоАутентификацияСтандартная")
	   И ПользовательИБ <> Неопределено
	   И Не ПользовательИБ.АутентификацияСтандартная Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверка минимального срока действия пароля.
	Если УровеньДоступа.НастройкиДляВхода Тогда
		Возврат Истина;
	КонецЕсли;

	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		НастройкиВхода = ПользователиСерверПовтИсп.сП_Настройки().ВнешниеПользователи;
	Иначе
		НастройкиВхода = ПользователиСерверПовтИсп.сП_Настройки().Пользователи;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(НастройкиВхода.МинимальныйСрокДействияПароля) Тогда
		Возврат Истина;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Прочитать();
	УстановитьПривилегированныйРежим(Ложь);

	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	СведенияОПользователе = НаборЗаписей[0];

	Если Не ЗначениеЗаполнено(СведенияОПользователе.ДатаНачалаИспользованияПароля) Тогда
		Возврат Истина;
	КонецЕсли;

	НачалоДняТекущейДатыСеанса				= НачалоДня(ТекущаяДатаСеанса());
	ОстатокМинимальногоСрокаДействияПароля	= НастройкиВхода.МинимальныйСрокДействияПароля
		- (НачалоДняТекущейДатыСеанса - СведенияОПользователе.ДатаНачалаИспользованияПароля) / (24*60*60);

	Если ОстатокМинимальногоСрокаДействияПароля <= 0 Тогда
		Возврат Истина;
	КонецЕсли;

	КоличествоДней = ОстатокМинимальногоСрокаДействияПароля;

	ЧислоИПредмет = СтрокаСЧислом(";%1 день;;%1 дня;%1 дней;%1 дня", КоличествоДней, ВидЧисловогоЗначения.Количественное, "L=ru");;

	ДополнительныеПараметры.Вставить("ТекстОшибки", СтрШаблон("Пароль можно будет сменить только через %1.", ЧислоИПредмет));

	Возврат Ложь;
КонецФункции

Функция сП_УровеньДоступаКСвойствамПользователя(ОписаниеОбъекта, ПараметрыОбработки = Неопределено) Экспорт
	УровеньДоступа = Новый Структура;

	// Администратор системы (системные данные).
	УровеньДоступа.Вставить("АдминистраторСистемы", П_ЭтоПолноправныйПользователь(, Истина));

	// Полноправный пользователь (пользовательские данные).
	УровеньДоступа.Вставить("ПолныеПрава", П_ЭтоПолноправныйПользователь());

	Если ТипЗнч(ОписаниеОбъекта.Ссылка) = Тип("СправочникСсылка.Пользователи") Тогда
		// Ответственный за список пользователей.
		УровеньДоступа.Вставить("УправлениеСписком",
			ПравоДоступа("Добавление", Метаданные.Справочники.Пользователи)
			И (УровеньДоступа.ПолныеПрава Или Не П_ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка)));
		// Пользователь текущего пользователя ИБ.
		УровеньДоступа.Вставить("ИзменениеТекущего",
			УровеньДоступа.ПолныеПрава
			Или ПравоДоступа("Изменение", Метаданные.Справочники.Пользователи) И ОписаниеОбъекта.Ссылка = сП_АвторизованныйПользователь());
	ИначеЕсли ТипЗнч(ОписаниеОбъекта.Ссылка) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		// Ответственный за список внешних пользователей.
		УровеньДоступа.Вставить("УправлениеСписком",
			ПравоДоступа("Добавление", Метаданные.Справочники.ВнешниеПользователи)
			И (УровеньДоступа.ПолныеПрава Или Не П_ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка)));
		// Внешний пользователь текущего пользователя ИБ.
		УровеньДоступа.Вставить("ИзменениеТекущего",
			УровеньДоступа.ПолныеПрава
			Или ПравоДоступа("Изменение", Метаданные.Справочники.ВнешниеПользователи)
			  И ОписаниеОбъекта.Ссылка = сП_АвторизованныйПользователь());
	КонецЕсли;

	Если ПараметрыОбработки = Неопределено Тогда
		УстановитьПривилегированныйРежим(Истина);
		Если ЗначениеЗаполнено(ОписаниеОбъекта.ИдентификаторПользователяИБ) Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ОписаниеОбъекта.ИдентификаторПользователяИБ);
		Иначе
			ПользовательИБ = Неопределено;
		КонецЕсли;
		ПользовательБезНастроекДляВходаИлиПодготовлен =
			    ПользовательИБ = Неопределено
			Или ОписаниеОбъекта.Подготовлен
			    И Не П_ВходВПрограммуРазрешен(ПользовательИБ);
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		ПользовательБезНастроекДляВходаИлиПодготовлен =
			    Не ПараметрыОбработки.СтарыйПользовательИБСуществует
			Или ПараметрыОбработки.СтарыйПользователь.Подготовлен
			    И Не П_ВходВПрограммуРазрешен(ПараметрыОбработки.ОписаниеСтарогоПользователяИБ);
	КонецЕсли;

	УровеньДоступа.Вставить("ИзменениеРазрешенияНаВход",
		    УровеньДоступа.АдминистраторСистемы
		Или УровеньДоступа.ПолныеПрава
		  И Не П_ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка, Истина));

	УровеньДоступа.Вставить("ОтключениеРазрешенияНаВход",
		    УровеньДоступа.АдминистраторСистемы
		Или УровеньДоступа.ПолныеПрава
		  И Не П_ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка, Истина)
		Или УровеньДоступа.УправлениеСписком);

	УровеньДоступа.Вставить("НастройкиДляВхода",
		    УровеньДоступа.АдминистраторСистемы
		Или УровеньДоступа.ПолныеПрава
		  И Не П_ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка, Истина)
		Или УровеньДоступа.УправлениеСписком
		  И ПользовательБезНастроекДляВходаИлиПодготовлен);

	УровеньДоступа.Вставить("НетДоступа",
		  НЕ УровеньДоступа.АдминистраторСистемы
		И НЕ УровеньДоступа.ПолныеПрава
		И НЕ УровеньДоступа.УправлениеСписком
		И НЕ УровеньДоступа.ИзменениеТекущего
		И НЕ УровеньДоступа.НастройкиДляВхода);

	Возврат УровеньДоступа;
КонецФункции

Процедура сП_ПроверитьВходВПрограммуРазрешен(ОшибкаАвторизации)
	УстановитьПривилегированныйРежим(Истина);

	Идентификатор	= ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	ПользовательИБ	= ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);

	Если ПользовательИБ = Неопределено
	 Или П_ВходВПрограммуРазрешен(ПользовательИБ) Тогда
		Возврат;
	КонецЕсли;

	ОшибкаАвторизации = "Авторизация не выполнена. Работа системы будет завершена." + Символы.ПС + Символы.ПС
		+ "Ваша учетная запись отключена. Обратитесь к администратору.";
КонецПроцедуры

Процедура сП_ОтключитьНеактивныхИПросроченныхПользователей(ТолькоДляАвторизованногоПользователя = Ложь, ОписаниеОшибки = "", РегистрироватьВЖурнале = Истина)
	УстановитьПривилегированныйРежим(Истина);

	Настройки = ПользователиСерверПовтИсп.сП_Настройки();
	Если Не Настройки.ОбщиеНастройкиВхода Тогда
		Если Не ТолькоДляАвторизованногоПользователя Тогда
			РегламентныеЗаданияСервер.РЗ_УстановитьИспользованиеПредопределенногоРегламентногоЗадания(Метаданные.РегламентныеЗадания.КонтрольАктивностиПользователей, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяДата",                                 '00010101');
	Запрос.УстановитьПараметр("НачалоДняТекущейДатыСеанса",                 НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ДатаВключенияПросрочкиПользователей",        Настройки.Пользователи.ПросрочкаРаботыВПрограммеДатаВключения);
	Запрос.УстановитьПараметр("ПросрочкаРаботыПользователей",               Настройки.Пользователи.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода);
	Запрос.УстановитьПараметр("ДатаВключенияПросрочкиВнешнихПользователей", Настройки.ВнешниеПользователи.ПросрочкаРаботыВПрограммеДатаВключения);
	Запрос.УстановитьПараметр("ПросрочкаРаботыВнешнихПользователей",        Настройки.ВнешниеПользователи.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <> &ПустаяДата
	|			ТОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <= &НачалоДняТекущейДатыСеанса
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СрокДействияИстек
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|		ПО (СведенияОПользователях.Пользователь = Пользователи.Ссылка)
	|ГДЕ
	|	&ОтборПользователей
	|	И ЕСТЬNULL(СведенияОПользователях.СрокДействияНеОграничен, ЛОЖЬ) = ЛОЖЬ
	|	И ЕСТЬNULL(СведенияОПользователях.ДатаАвтоматическогоЗапрещенияВхода, &ПустаяДата) = &ПустаяДата
	|	И ВЫБОР
	|			КОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <> &ПустаяДата
	|				ТОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <= &НачалоДняТекущейДатыСеанса
	|			КОГДА ЕСТЬNULL(СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода, 0) <> 0
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата) <= ЕСТЬNULL(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, &ПустаяДата)
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, &ПустаяДата) = &ПустаяДата
	|										ТОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(&ДатаВключенияПросрочкиПользователей, ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	|									ИНАЧЕ &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	|								КОНЕЦ
	|						КОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата), ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА &ПросрочкаРаботыПользователей = 0
	|						ТОГДА ЛОЖЬ
	|					КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата) <= ЕСТЬNULL(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, &ПустаяДата)
	|						ТОГДА ВЫБОР
	|								КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, &ПустаяДата) = &ПустаяДата
	|									ТОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(&ДатаВключенияПросрочкиПользователей, ДЕНЬ, &ПросрочкаРаботыПользователей)
	|								ИНАЧЕ &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, ДЕНЬ, &ПросрочкаРаботыПользователей)
	|							КОНЕЦ
	|					КОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата), ДЕНЬ, &ПросрочкаРаботыПользователей)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнешниеПользователи.Ссылка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <> &ПустаяДата
	|			ТОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <= &НачалоДняТекущейДатыСеанса
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|		ПО (СведенияОПользователях.Пользователь = ВнешниеПользователи.Ссылка)
	|ГДЕ
	|	&ОтборВнешнихПользователей
	|	И ЕСТЬNULL(СведенияОПользователях.СрокДействияНеОграничен, ЛОЖЬ) = ЛОЖЬ
	|	И ЕСТЬNULL(СведенияОПользователях.ДатаАвтоматическогоЗапрещенияВхода, &ПустаяДата) = &ПустаяДата
	|	И ВЫБОР
	|			КОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <> &ПустаяДата
	|				ТОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <= &НачалоДняТекущейДатыСеанса
	|			КОГДА ЕСТЬNULL(СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода, 0) <> 0
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата) <= ЕСТЬNULL(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, &ПустаяДата)
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, &ПустаяДата) = &ПустаяДата
	|										ТОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(&ДатаВключенияПросрочкиВнешнихПользователей, ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	|									ИНАЧЕ &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	|								КОНЕЦ
	|						КОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата), ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА &ПросрочкаРаботыВнешнихПользователей = 0
	|						ТОГДА ЛОЖЬ
	|					КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата) <= ЕСТЬNULL(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, &ПустаяДата)
	|						ТОГДА ВЫБОР
	|								КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, &ПустаяДата) = &ПустаяДата
	|									ТОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(&ДатаВключенияПросрочкиВнешнихПользователей, ДЕНЬ, &ПросрочкаРаботыВнешнихПользователей)
	|								ИНАЧЕ &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, ДЕНЬ, &ПросрочкаРаботыВнешнихПользователей)
	|							КОНЕЦ
	|					КОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата), ДЕНЬ, &ПросрочкаРаботыВнешнихПользователей)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ";
	Если ТолькоДляАвторизованногоПользователя Тогда
		Запрос.УстановитьПараметр("Пользователь", сП_АвторизованныйПользователь());
		ОтборПользователей        = "Пользователи.Ссылка = &Пользователь";
		ОтборВнешнихПользователей = "ВнешниеПользователи.Ссылка = &Пользователь";
	Иначе
		ОтборПользователей        = "ИСТИНА";
		ОтборВнешнихПользователей = "ИСТИНА";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПользователей",        ОтборПользователей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборВнешнихПользователей", ОтборВнешнихПользователей);

	Выборка = Запрос.Выполнить().Выбрать();

	ИнформацияОбОшибке = Неопределено;
	Пока Выборка.Следующий() Цикл
		Пользователь = Выборка.Пользователь;
		Если НЕ Выборка.СрокДействияИстек
		   И П_ЭтоПолноправныйПользователь(Пользователь,, Ложь) Тогда
			Продолжить;
		КонецЕсли;
		Блокировка			= Новый БлокировкаДанных;
		ЭлементБлокировки	= Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
		ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			ИдентификаторПользователяИБ = БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(Пользователь,"ИдентификаторПользователяИБ");
			ПользовательИБ = Неопределено;
			Если ТипЗнч(ИдентификаторПользователяИБ) = Тип("УникальныйИдентификатор") Тогда
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
			КонецЕсли;
			Если ПользовательИБ <> Неопределено
			   И (    ПользовательИБ.АутентификацияСтандартная
			      Или ПользовательИБ.АутентификацияОС
			      Или ПользовательИБ.АутентификацияOpenID) Тогда

				ОбновляемыеСвойства = Новый Структура;
				ОбновляемыеСвойства.Вставить("АутентификацияСтандартная", Ложь);
				ОбновляемыеСвойства.Вставить("АутентификацияОС",          Ложь);
				ОбновляемыеСвойства.Вставить("АутентификацияOpenID",      Ложь);

				П_УстановитьСвойстваПользователяИБ(ПользовательИБ.УникальныйИдентификатор,
					ОбновляемыеСвойства, Ложь, ТипЗнч(Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи"));
			КонецЕсли;
			НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				СведенияОПользователе				= НаборЗаписей.Добавить();
				СведенияОПользователе.Пользователь	= Пользователь;
			Иначе
				СведенияОПользователе				= НаборЗаписей[0];
			КонецЕсли;
			СведенияОПользователе.ДатаАвтоматическогоЗапрещенияВхода = НачалоДня(ТекущаяДатаСеанса());
			НаборЗаписей.Записать();

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ИнформацияОбОшибке();

			ШаблонТекстаОшибки = "Не удалось записать сведения о текущем пользователе по причине:
		           |%1
		           |
		           |Обратитесь к администратору.";
			ОписаниеОшибки = "Авторизация не выполнена. Работа системы будет завершена." + Символы.ПС + Символы.ПС
				+ СтрШаблон(ШаблонТекстаОшибки, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));

			Если РегистрироватьВЖурнале Тогда
				Если Выборка.СрокДействияИстек Тогда
					ШаблонКомментария =
						"Не удалось снять пользователю ""%1"" признак
						           |""Вход в программу разрешен"" в связи с окончанием срока действия по причине:
						           |%2";
				Иначе
					ШаблонКомментария =
						"Не удалось снять пользователю ""%1"" признак
						           |""Вход в программу разрешен"" в связи с отсутствием работы
						           |в программе более установленного срока по причине:
						           |%2";
				КонецЕсли;
				ЗаписьЖурналаРегистрации(
					"Пользователи.Ошибка автоматического запрещения входа в программу",
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.НайтиПоТипу(ТипЗнч(Пользователь)),
					Пользователь,
					СтрШаблон(ШаблонКомментария, Пользователь, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;

	Если ТолькоДляАвторизованногоПользователя Тогда
		Возврат;
	КонецЕсли;

	Если ИнформацияОбОшибке <> Неопределено
		Или ЗначениеЗаполнено(Настройки.Пользователи.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
		Или ЗначениеЗаполнено(Настройки.ВнешниеПользователи.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода) Тогда
		// Для проверки просрочки работы в программе, задание выключить нельзя.

		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|ГДЕ
	|	 СведенияОПользователях.СрокДействия <> &ПустаяДата
	|	И СведенияОПользователях.ДатаАвтоматическогоЗапрещенияВхода = &ПустаяДата";

	Если Запрос.Выполнить().Пустой() Тогда
		РегламентныеЗаданияСервер.РЗ_УстановитьИспользованиеПредопределенногоРегламентногоЗадания(Метаданные.РегламентныеЗадания.КонтрольАктивностиПользователей, Ложь);
	КонецЕсли;
КонецПроцедуры

Функция сП_СтарыйПарольСовпадаетССохраненным(Пароль, ИдентификаторПользователяИБ) Экспорт
	Если ТипЗнч(ИдентификаторПользователяИБ) <> Тип("УникальныйИдентификатор") Тогда
		Возврат Ложь;
	КонецЕсли;

	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);

	Если ТипЗнч(ПользовательИБ) <> Тип("ПользовательИнформационнойБазы") Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат сП_ХешСуммаПароляСовпадает(сП_СохраняемоеЗначениеСтрокиПароля(Пароль), ПользовательИБ.СохраняемоеЗначениеПароля);
КонецФункции

Функция сП_СохраняемоеЗначениеСтрокиПароля(Пароль, ДляЗаписи = Ложь) Экспорт
	Если Пароль = "" И Не ДляЗаписи Тогда
		СохраняемоеЗначениеПароля = "";
	Иначе
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA1);
		ХешированиеДанных.Добавить(Пароль);

		СохраняемоеЗначениеПароля = Base64Строка(ХешированиеДанных.ХешСумма);

		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA1);
		ХешированиеДанных.Добавить(ВРег(Пароль));

		СохраняемоеЗначениеПароля = СохраняемоеЗначениеПароля + ","
			+ Base64Строка(ХешированиеДанных.ХешСумма);
	КонецЕсли;

	Возврат СохраняемоеЗначениеПароля;
КонецФункции

Функция сП_ХешСуммаПароляСовпадает(СохраняемоеЗначениеПервогоПароля, СохраняемоеЗначениеВторогоПароля)
	Если СохраняемоеЗначениеПервогоПароля = СохраняемоеЗначениеВторогоПароля Тогда
		Возврат Истина;
	КонецЕсли;

	ХешСуммыПервогоПароля = СтрРазделить(СохраняемоеЗначениеПервогоПароля, ",", Ложь);
	Если ХешСуммыПервогоПароля.Количество() <> 2 Тогда
		Возврат Ложь;
	КонецЕсли;

	ХешСуммыВторогоПароля = СтрРазделить(СохраняемоеЗначениеВторогоПароля, ",", Ложь);
	Если ХешСуммыВторогоПароля.Количество() <> 2 Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат ХешСуммыПервогоПароля[0] = ХешСуммыВторогоПароля[0]
		Или ХешСуммыПервогоПароля[1] = ХешСуммыВторогоПароля[1];
КонецФункции

Функция сП_ОшибкаДлиныИлиСложностиПароля(Пароль, Знач МинимальнаяДлинаПароля, СложныйПароль) Экспорт
	Если СложныйПароль И МинимальнаяДлинаПароля < 7 Тогда
		МинимальнаяДлинаПароля = 7;
	КонецЕсли;
	Если СтрДлина(Пароль) < МинимальнаяДлинаПароля Тогда
		Возврат СтрШаблон(
			"Количество символов нового пароля должно быть не менее %1.",
			Формат(МинимальнаяДлинаПароля, "ЧГ="));
	КонецЕсли;

	Если СложныйПароль И Не сП_ПарольОтвечаетТребованиямСложности(Пароль) Тогда
		Возврат "Пароль не отвечает требованиям сложности."
			+ Символы.ПС + Символы.ПС
			+ "Надежный пароль:
		           |- имеет не менее 7 символов;
		           |- содержит любые 3 из 4-х типов символов: заглавные
		           |  буквы, строчные буквы, цифры, специальные символы;
		           |- не совпадает с именем (для входа).";
	КонецЕсли;
КонецФункции

Функция сП_ПарольОтвечаетТребованиямСложности(Пароль)
	ДлинаПароля = СтрДлина(Пароль);

	Если ДлинаПароля < 7 Тогда
		Возврат Ложь;
	КонецЕсли;

	ЕстьСимволВВерхнемРегистре = 0;
	ЕстьСимволВНижнемРегистре  = 0;
	ЕстьСимволЦифры            = 0;
	ЕстьСимволСпециальный      = 0;

	ЕстьПоследовательность	= Истина;
	СостояниеСимвола		= "Первый";
	ПредыдущийСимвол		= "";

	Для НомерСимвола = 1 По ДлинаПароля Цикл
		Символ		= Сред(Пароль, НомерСимвола, 1);
		КодСимвола	= КодСимвола(Символ);

		Если КодСимвола > 31 И КодСимвола <> 127 Тогда
			Если СтрНайти("0123456789", Символ) > 0 Тогда
				ЕстьСимволЦифры = 1;
			ИначеЕсли НРег(Символ) <> ВРег(Символ) Тогда
				Если Символ = ВРег(Символ) Тогда
					ЕстьСимволВВерхнемРегистре = 1;
				Иначе
					ЕстьСимволВНижнемРегистре = 1;
				КонецЕсли;
			Иначе
				ЕстьСимволСпециальный = 1;
			КонецЕсли;
		КонецЕсли;

		Если Не ЕстьПоследовательность Тогда
			Продолжить;
		КонецЕсли;

		Если СостояниеСимвола = "Первый" Тогда
			СостояниеСимвола = "Второй";
		ИначеЕсли СостояниеСимвола = "Второй" Тогда
			Если ПредыдущийСимвол = Символ Тогда
				СостояниеСимвола = "ТотЖе";
			ИначеЕсли КодСимвола(ПредыдущийСимвол) = КодСимвола(Символ) - 1 Тогда
				СостояниеСимвола = "Убывает";
			ИначеЕсли КодСимвола(ПредыдущийСимвол) = КодСимвола(Символ) + 1 Тогда
				СостояниеСимвола = "Возрастает";
			Иначе
				ЕстьПоследовательность = Ложь;
			КонецЕсли;
		ИначеЕсли СостояниеСимвола = "ТотЖе" Тогда
			Если ПредыдущийСимвол <> Символ Тогда
				ЕстьПоследовательность = Ложь;
			КонецЕсли;
		ИначеЕсли СостояниеСимвола = "Убывает" Тогда
			Если КодСимвола(ПредыдущийСимвол) <> КодСимвола(Символ) - 1 Тогда
				ЕстьПоследовательность = Ложь;
			КонецЕсли;
		ИначеЕсли СостояниеСимвола = "Возрастает" Тогда
			Если КодСимвола(ПредыдущийСимвол) <> КодСимвола(Символ) + 1 Тогда
				ЕстьПоследовательность = Ложь;
			КонецЕсли;
		КонецЕсли;

		ПредыдущийСимвол = Символ;
	КонецЦикла;

	Возврат Не ЕстьПоследовательность
		  И   ЕстьСимволВВерхнемРегистре
			+ ЕстьСимволВНижнемРегистре
			+ ЕстьСимволЦифры
			+ ЕстьСимволСпециальный > 2;
КонецФункции

Функция сП_ОбработатьНовыйПароль(Параметры) Экспорт
	НовыйПароль  = Параметры.НовыйПароль;
	СтарыйПароль = Параметры.СтарыйПароль;

	ДополнительныеПараметры = Новый Структура;

	Если ТипЗнч(Параметры.Пользователь) = Тип("СправочникОбъект.Пользователи")
	 Или ТипЗнч(Параметры.Пользователь) = Тип("СправочникОбъект.ВнешниеПользователи") Тогда

		СсылкаОбъекта			= Параметры.Пользователь.Ссылка;
		Пользователь			= сП_СсылкаОбъекта(Параметры.Пользователь);
		ВызовИзФормыСменаПароля	= Ложь;

		Если ТипЗнч(Параметры.Пользователь) = Тип("СправочникОбъект.Пользователи")
		   И Параметры.Пользователь.Служебный Тогда

			ДополнительныеПараметры.Вставить("ЭтоСлужебныйПользователь");
		КонецЕсли;
	Иначе
		СсылкаОбъекта			= Параметры.Пользователь;
		Пользователь			= Параметры.Пользователь;
		ВызовИзФормыСменаПароля	= Истина;
	КонецЕсли;

	Параметры.Вставить("СтарыйПарольСовпадает", Ложь);

	Если Не сП_ВозможноИзменитьПароль(СсылкаОбъекта, ДополнительныеПараметры) Тогда
		Возврат ДополнительныеПараметры.ТекстОшибки;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Если ДополнительныеПараметры.ЭтоТекущийПользовательИБ
	   И ДополнительныеПараметры.ПарольУстановлен
	   И (ВызовИзФормыСменаПароля Или СтарыйПароль <> Неопределено) Тогда

		Параметры.СтарыйПарольСовпадает = сП_СтарыйПарольСовпадаетССохраненным(
			СтарыйПароль, ДополнительныеПараметры.ИдентификаторПользователяИБ);

		Если Не Параметры.СтарыйПарольСовпадает Тогда
			Возврат "Старый пароль указан неверно.";
		КонецЕсли;
	КонецЕсли;

	Если ПользователиСерверПовтИсп.сП_Настройки().ОбщиеНастройкиВхода Тогда
		Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			НастройкиВхода = ПользователиСерверПовтИсп.сП_Настройки().ВнешниеПользователи;
		Иначе
			НастройкиВхода = ПользователиСерверПовтИсп.сП_Настройки().Пользователи;
		КонецЕсли;
		ТекстОшибкиПароля = сП_ОшибкаДлиныИлиСложностиПароля(НовыйПароль,
			НастройкиВхода.МинимальнаяДлинаПароля,
			НастройкиВхода.ПарольДолженОтвечатьТребованиямСложности);
	Иначе
		ТекстОшибкиПароля = сП_ОшибкаДлиныИлиСложностиПароля(НовыйПароль,
			ПолучитьМинимальнуюДлинуПаролейПользователей(),
			ПолучитьПроверкуСложностиПаролейПользователей());
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекстОшибкиПароля) Тогда
		Возврат ТекстОшибкиПароля;
	КонецЕсли;

	ТекстОшибки = "";
	СохраняемоеЗначениеПароля = сП_СохраняемоеЗначениеСтрокиПароля(НовыйПароль);

	Блокировка			= Новый БлокировкаДанных;
	ЭлементБлокировки	= Блокировка.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(Пользователь)).ПолноеИмя());
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Пользователь);
	ЭлементБлокировки	= Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
	ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			СведенияОПользователе				= НаборЗаписей.Добавить();
			СведенияОПользователе.Пользователь	= Пользователь;
		Иначе
			СведенияОПользователе				= НаборЗаписей[0];
		КонецЕсли;
		ИспользованныеПароли = СведенияОПользователе.ИспользованныеПароли.Получить();
		Если ИспользованныеПароли = Неопределено Тогда
			ИспользованныеПароли = Новый Массив;
		КонецЕсли;

		Если ПользователиСерверПовтИсп.сП_Настройки().ОбщиеНастройкиВхода
		   И ЗначениеЗаполнено(НастройкиВхода.ЗапретитьПовторениеПароляСредиПоследних)
		   И сП_НовыйПарольИспользовалсяРанее(ИспользованныеПароли, СохраняемоеЗначениеПароля) Тогда

			ТекстОшибки = "Новый пароль использовался ранее.";
		ИначеЕсли Не (ВызовИзФормыСменаПароля И Параметры.ТолькоПроверить) Тогда
			Если ВызовИзФормыСменаПароля Тогда
				ОписаниеПользователяИБ = Новый Структура;
				ОписаниеПользователяИБ.Вставить("Действие", "Записать");
				ОписаниеПользователяИБ.Вставить("Пароль", НовыйПароль);

				ТекущийОбъект = Пользователь.ПолучитьОбъект();
				ТекущийОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);

				Если Параметры.ПриВходеВПрограмму Тогда
					ТекущийОбъект.ДополнительныеСвойства.Вставить("СменаПароляПриВходеВПрограмму");
				КонецЕсли;
				Попытка
					ТекущийОбъект.Записать();
				Исключение
					Параметры.ПарольПользователяСервиса = Неопределено;

					ВызватьИсключение;
				КонецПопытки;
			Иначе
				СведенияОПользователе.ДатаНачалаИспользованияПароля = Неопределено;
				Если Параметры.Пользователь.ДополнительныеСвойства.Свойство("СменаПароляПриВходеВПрограмму") Тогда
					СведенияОПользователе.ПотребоватьСменуПароляПриВходе = Ложь;
				КонецЕсли;
				Если ПользователиСерверПовтИсп.сП_Настройки().ОбщиеНастройкиВхода
				   И ЗначениеЗаполнено(НастройкиВхода.ЗапретитьПовторениеПароляСредиПоследних) Тогда

					ИспользованныеПароли.Добавить(СохраняемоеЗначениеПароля);
					Пока ИспользованныеПароли.Количество() > НастройкиВхода.ЗапретитьПовторениеПароляСредиПоследних Цикл
						ИспользованныеПароли.Удалить(0);
					КонецЦикла;
				Иначе
					ИспользованныеПароли.Очистить();
				КонецЕсли;
				СведенияОПользователе.ИспользованныеПароли = Новый ХранилищеЗначения(ИспользованныеПароли);
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Если ВызовИзФормыСменаПароля Тогда
			ЗаписьЖурналаРегистрации(
				"Пользователи.Ошибка смены пароля",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.НайтиПоТипу(ТипЗнч(Пользователь)),
				Пользователь,
				СтрШаблон("Не удалось сменить пароль пользователя ""%1"" по причине:
					           |%2",
					Пользователь, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			Параметры.Вставить("ОшибкаЗаписанаВЖурналРегистрации");
		КонецЕсли;

		ВызватьИсключение;
	КонецПопытки;

	Возврат ТекстОшибки;
КонецФункции

Функция сП_НовыйПарольИспользовалсяРанее(ИспользованныеПароли, СохраняемоеЗначениеНовогоПароля)
	Для Каждого СохраняемоеЗначение Из ИспользованныеПароли Цикл
		Если сП_ХешСуммаПароляСовпадает(СохраняемоеЗначение, СохраняемоеЗначениеНовогоПароля) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

Процедура сП_УстановитьНачальныеНастройки(Знач ИмяПользователя, ЭтоВнешнийПользователь = Ложь) Экспорт
	НастройкиКлиента										= Новый НастройкиКлиентскогоПриложения;
	НастройкиКлиента.ОтображатьПанелиНавигацииИДействий		= Ложь;
	НастройкиКлиента.ОтображатьПанельРазделов				= Истина;
	НастройкиКлиента.РежимОткрытияФормПриложения			= РежимОткрытияФормПриложения.Закладки;
	НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения	= ВариантИнтерфейсаКлиентскогоПриложения.Такси;

	НастройкиИнтерфейса								= Новый НастройкиКомандногоИнтерфейса;
	НастройкиИнтерфейса.ОтображениеПанелиРазделов	= ОтображениеПанелиРазделов.КартинкаИТекст;

	НастройкиТакси		= Новый НастройкиИнтерфейсаКлиентскогоПриложения;
	НастройкиСостава	= Новый НастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	ГруппаСлева			= Новый ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения;

	Если БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсии(БазоваяПодсистемаСервер.СП_ВерсияРежимаСовместимости(), "8.3.15.0") < 0 Тогда
		ГруппаСлева.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельИнструментов"));
	КонецЕсли;
	ГруппаСлева.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельРазделов"));
	НастройкиСостава.Лево.Добавить(ГруппаСлева);
	НастройкиТакси.УстановитьСостав(НастройкиСостава);

	НачальныеНастройки = Новый Структура;
	НачальныеНастройки.Вставить("НастройкиКлиента",			НастройкиКлиента);
	НачальныеНастройки.Вставить("НастройкиИнтерфейса",		НастройкиИнтерфейса);
	НачальныеНастройки.Вставить("НастройкиТакси",			НастройкиТакси);
	НачальныеНастройки.Вставить("ЭтоВнешнийПользователь",	ЭтоВнешнийПользователь);

	Если НачальныеНастройки.НастройкиКлиента <> Неопределено Тогда
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения", "",
			НачальныеНастройки.НастройкиКлиента, , ИмяПользователя);
	КонецЕсли;

	Если НачальныеНастройки.НастройкиИнтерфейса <> Неопределено Тогда
		ХранилищеСистемныхНастроек.Сохранить("Общее/ПанельРазделов/НастройкиКомандногоИнтерфейса", "",
			НачальныеНастройки.НастройкиИнтерфейса, , ИмяПользователя);
	КонецЕсли;

	Если НачальныеНастройки.НастройкиТакси <> Неопределено Тогда
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", "",
			НачальныеНастройки.НастройкиТакси, , ИмяПользователя);
	КонецЕсли;
КонецПроцедуры

Процедура сП_СкопироватьНастройки(МенеджерНастроек, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить)
	ТаблицаНастроек = сП_СписокНастроек(ИмяПользователяИсточник, МенеджерНастроек);

	Для Каждого Настройка Из ТаблицаНастроек Цикл
		КлючОбъекта			= Настройка.КлючОбъекта;
		КлючНастроек		= Настройка.КлючНастроек;
		Значение			= МенеджерНастроек.Загрузить(КлючОбъекта, КлючНастроек, , ИмяПользователяИсточник);
		ОписаниеНастроек	= МенеджерНастроек.ПолучитьОписание(КлючОбъекта, КлючНастроек, ИмяПользователяИсточник);
		МенеджерНастроек.Сохранить(КлючОбъекта, КлючНастроек, Значение,
			ОписаниеНастроек, ИмяПользователяПриемник);
		Если Переносить Тогда
			МенеджерНастроек.Удалить(КлючОбъекта, КлючНастроек, ИмяПользователяИсточник);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция сП_СписокНастроек(ИмяПользователяИБ, МенеджерНастроек)
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("КлючОбъекта");
	ТаблицаНастроек.Колонки.Добавить("КлючНастроек");

	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", ИмяПользователяИБ);

	ВыборкаНастроек = МенеджерНастроек.Выбрать(Отбор);
	Пропустить = Ложь;
	Пока сП_СледующаяНастройка(ВыборкаНастроек, Пропустить) Цикл
		Если Пропустить Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока					= ТаблицаНастроек.Добавить();
		НоваяСтрока.КлючОбъекта		= ВыборкаНастроек.КлючОбъекта;
		НоваяСтрока.КлючНастроек	= ВыборкаНастроек.КлючНастроек;
	КонецЦикла;

	Возврат ТаблицаНастроек;
КонецФункции

Функция сП_СледующаяНастройка(ВыборкаНастроек, Пропустить)
	Попытка
		Пропустить = Ложь;

		Возврат ВыборкаНастроек.Следующий();
	Исключение
		Пропустить = Истина;

		Возврат Истина;
	КонецПопытки;
КонецФункции

Процедура сП_СкопироватьПрочиеПользовательскиеНастройки(ИмяПользователяИсточник, ИмяПользователяПриемник)
	ПользовательИсточникСсылка		= П_НайтиПоИмени(ИмяПользователяИсточник);
	ПользовательПриемникСсылка		= П_НайтиПоИмени(ИмяПользователяПриемник);
	СведенияОПользователеИсточнике	= Новый Структура;
	СведенияОПользователеИсточнике.Вставить("ПользовательСсылка", ПользовательИсточникСсылка);
	СведенияОПользователеИсточнике.Вставить("ИмяПользователяИнформационнойБазы", ИмяПользователяИсточник);

	СведенияОПользователеПриемнике	= Новый Структура;
	СведенияОПользователеПриемнике.Вставить("ПользовательСсылка", ПользовательПриемникСсылка);
	СведенияОПользователеПриемнике.Вставить("ИмяПользователяИнформационнойБазы", ИмяПользователяПриемник);

	// Получение прочих настроек.
	ПрочиеНастройкиПользователей = Новый Структура;
	ИнтеграцияПодсистемСервер.ПриПолученииПрочихНастроек(СведенияОПользователеИсточнике, ПрочиеНастройкиПользователей);
	Ключи = Новый СписокЗначений;

	Если ПрочиеНастройкиПользователей.Количество() <> 0 Тогда
		Для Каждого ПрочаяНастройка Из ПрочиеНастройкиПользователей Цикл
			ПрочиеНастройкиСтруктура = Новый Структура;
			Если ПрочаяНастройка.Ключ = "НастройкаБыстрогоДоступа" Тогда
				СписокНастроек = ПрочаяНастройка.Значение.СписокНастроек;
				Для Каждого Элемент Из СписокНастроек Цикл
					Ключи.Добавить(Элемент.Объект, Элемент.Идентификатор);
				КонецЦикла;
				ПрочиеНастройкиСтруктура.Вставить("ИдентификаторНастройки", "НастройкаБыстрогоДоступа");
				ПрочиеНастройкиСтруктура.Вставить("ЗначениеНастройки", Ключи);
			Иначе
				ПрочиеНастройкиСтруктура.Вставить("ИдентификаторНастройки", ПрочаяНастройка.Ключ);
				ПрочиеНастройкиСтруктура.Вставить("ЗначениеНастройки", ПрочаяНастройка.Значение.СписокНастроек);
			КонецЕсли;
			ИнтеграцияПодсистемСервер.ПриСохраненииПрочихНастроек(СведенияОПользователеПриемнике, ПрочиеНастройкиСтруктура);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура сП_СкопироватьНастройкиПользователяИБ(ПользовательОбъект, ПараметрыОбработки)
	Если НЕ ПараметрыОбработки.Свойство("ЗначениеКопирования")
	 ИЛИ НЕ ПараметрыОбработки.НовыйПользовательИБСуществует Тогда

		Возврат;
	КонецЕсли;

	ИмяНовогоПользователяИБ = ПараметрыОбработки.ОписаниеНовогоПользователяИБ.Имя;

	ИдентификаторКопируемогоПользователяИБ = БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(ПараметрыОбработки.ЗначениеКопирования, "ИдентификаторПользователяИБ");

	Если НЕ ЗначениеЗаполнено(ИдентификаторКопируемогоПользователяИБ) Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	ОписаниеКопируемогоПользователяИБ = П_СвойстваПользователяИБ(ИдентификаторКопируемогоПользователяИБ);
	Если ОписаниеКопируемогоПользователяИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

	ИмяКопируемогоПользователяИБ = ОписаниеКопируемогоПользователяИБ.Имя;

	// Копирование настроек.
	сП_СкопироватьНастройкиПользователя(ИмяКопируемогоПользователяИБ, ИмяНовогоПользователяИБ, Ложь);
КонецПроцедуры

Процедура сП_СкопироватьНастройкиПользователя(ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить = Ложь) Экспорт
	// Перенос пользовательских настроек отчетов.
	сП_СкопироватьНастройки(ХранилищеПользовательскихНастроекОтчетов, ИмяПользователяИсточник,	ИмяПользователяПриемник, Переносить);
	// Перенос настроек внешнего вида.
	сП_СкопироватьНастройки(ХранилищеСистемныхНастроек,ИмяПользователяИсточник,					ИмяПользователяПриемник, Переносить);
	// Перенос произвольных настроек пользователей.
	сП_СкопироватьНастройки(ХранилищеОбщихНастроек, ИмяПользователяИсточник,					ИмяПользователяПриемник, Переносить);
	// Перенос настроек данных форм.
	сП_СкопироватьНастройки(ХранилищеНастроекДанныхФорм, ИмяПользователяИсточник,				ИмяПользователяПриемник, Переносить);
	// Перенос настроек быстрого доступа дополнительных отчетов и обработок.
	Если Не Переносить Тогда
		сП_СкопироватьПрочиеПользовательскиеНастройки(ИмяПользователяИсточник,					ИмяПользователяПриемник);
	КонецЕсли;
КонецПроцедуры

Процедура сП_ЗаписатьПользователяИнформационнойБазы(ПользовательИБ, ЭтоВнешнийПользователь = Ложь) Экспорт
	сП_ПроверитьПраваПользователя(ПользовательИБ, "ПередЗаписью", ЭтоВнешнийПользователь);
	ОбновлениеВерсииИБСервер.сОИБ_УстановитьФлагОтображенияОписанийДляНовогоПользователя(ПользовательИБ.Имя);
	ПользовательИБ.Записать();
КонецПроцедуры

Процедура сП_ПриВыполненииСтандартныхПериодическихПроверокНаСервере(Параметры) Экспорт
	Параметры.Вставить("ВходВПрограммуЗапрещен", Ложь);

	// Проверка, что срок действия учетной записи истек и нужно завершить работу.

	УстановитьПривилегированныйРежим(Истина);

	сП_ОтключитьНеактивныхИПросроченныхПользователей(Истина);

	сП_ТребуетсяСменитьПароль(); // Обновление даты последней активности.

	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);

	Если ПользовательИБ = Неопределено Тогда
		Параметры.ВходВПрограммуЗапрещен = Истина;
	ИначеЕсли ПользовательИБ.АутентификацияСтандартная = Ложь
	        И ПользовательИБ.АутентификацияОС          = Ложь
	        И ПользовательИБ.АутентификацияOpenID      = Ложь Тогда

		Параметры.ВходВПрограммуЗапрещен = Истина;
	КонецЕсли;
КонецПроцедуры

Функция сП_ОшибкаНедостаточноПравДляВходаВПрограмму(РегистрироватьВЖурнале = Истина) Экспорт
	Если РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда // Не заменять на РолиДоступны.
		Возврат "";
	КонецЕсли;

	Если ПользователиСерверПовтИсп.сП_ЭтоСеансВнешнегоПользователя() Тогда
		ИмяРолиБазовыеПрава = Метаданные.Роли.БазовыеПраваВнешнихПользователей.Имя;
	Иначе
		ИмяРолиБазовыеПрава = Метаданные.Роли.БазовыеПрава.Имя;
	КонецЕсли;

	Если РольДоступна(ИмяРолиБазовыеПрава) Тогда // Не заменять на РолиДоступны.
		Возврат "";
	КонецЕсли;

	Возврат сП_КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(
		"Недостаточно прав для входа в программу.
		           |
		           |Обратитесь к администратору.",
		, РегистрироватьВЖурнале);
КонецФункции

Процедура сП_ОбновитьРолиВнешнихПользователей(Знач МассивВнешнихПользователей = Неопределено) Экспорт
	Если ПользователиСерверПовтИсп.сП_Настройки().РедактированиеРолей <> Истина Тогда
		// Роли устанавливаются другим механизмом, например, механизмом подсистемы УправлениеДоступом.
		Возврат;
	КонецЕсли;

	Если ТипЗнч(МассивВнешнихПользователей) = Тип("Массив")
	   И МассивВнешнихПользователей.Количество() = 0 Тогда

		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	НачатьТранзакцию();
	Попытка
		Если ТипЗнч(МассивВнешнихПользователей) <> Тип("Массив") Тогда
			Если МассивВнешнихПользователей = Неопределено Тогда
				ГруппаВнешнихПользователей = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи;
			Иначе
				ГруппаВнешнихПользователей = МассивВнешнихПользователей;
			КонецЕсли;

			Запрос			= Новый Запрос;
			Запрос.УстановитьПараметр("ГруппаВнешнихПользователей", ГруппаВнешнихПользователей);
			Запрос.Текст	=
			"ВЫБРАТЬ
			|	СоставыГруппПользователей.Пользователь
			|ИЗ
			|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			|ГДЕ
			|	СоставыГруппПользователей.ГруппаПользователей = &ГруппаВнешнихПользователей";

			МассивВнешнихПользователей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
		КонецЕсли;

		П_НайтиНеоднозначныхПользователейИБ(Неопределено);

		ИдентификаторыПользователейИБ = Новый Соответствие;

		Запрос			= Новый Запрос;
		Запрос.УстановитьПараметр("ВнешниеПользователи", МассивВнешнихПользователей);
		Запрос.Текст	=
		"ВЫБРАТЬ
		|	ВнешниеПользователи.Ссылка КАК ВнешнийПользователь,
		|	ВнешниеПользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|ГДЕ
		|	ВнешниеПользователи.Ссылка В(&ВнешниеПользователи)
		|	И (НЕ ВнешниеПользователи.УстановитьРолиНепосредственно)";

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ИдентификаторыПользователейИБ.Вставить(Выборка.ВнешнийПользователь, Выборка.ИдентификаторПользователяИБ);
		КонецЦикла;

		// Подготовка таблицы старых ролей внешних пользователей.
		СтарыеРолиВнешнихПользователей = Новый ТаблицаЗначений;

		СтарыеРолиВнешнихПользователей.Колонки.Добавить("ВнешнийПользователь", Новый ОписаниеТипов("СправочникСсылка.ВнешниеПользователи"));

		СтарыеРолиВнешнихПользователей.Колонки.Добавить("Роль", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));

		ТекущийНомер = МассивВнешнихПользователей.Количество() - 1;
		Пока ТекущийНомер >= 0 Цикл
			// Проверка необходимости обработки пользователя.
			ПользовательИБ = Неопределено;
			ИдентификаторПользователяИБ = ИдентификаторыПользователейИБ[МассивВнешнихПользователей[ТекущийНомер]];
			Если ИдентификаторПользователяИБ <> Неопределено Тогда
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
			КонецЕсли;

			Если ПользовательИБ = Неопределено
			 ИЛИ ПустаяСтрока(ПользовательИБ.Имя) Тогда

				МассивВнешнихПользователей.Удалить(ТекущийНомер);
			Иначе
				Для каждого Роль Из ПользовательИБ.Роли Цикл
					СтараяРольВнешнегоПользователя						= СтарыеРолиВнешнихПользователей.Добавить();
					СтараяРольВнешнегоПользователя.ВнешнийПользователь	= МассивВнешнихПользователей[ТекущийНомер];
					СтараяРольВнешнегоПользователя.Роль					= Роль.Имя;
				КонецЦикла;
			КонецЕсли;
			ТекущийНомер = ТекущийНомер - 1;
		КонецЦикла;

		// Подготовка списка ролей отсутствующих в метаданных и которые нужно переустановить.
		Запрос							= Новый Запрос;
		Запрос.МенеджерВременныхТаблиц	= Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ВнешниеПользователи",				МассивВнешнихПользователей);
		Запрос.УстановитьПараметр("ВсеРоли",							ПользователиСерверПовтИсп.сП_ВсеРоли().Таблица.Получить());
		Запрос.УстановитьПараметр("СтарыеРолиВнешнихПользователей",		СтарыеРолиВнешнихПользователей);
		Запрос.УстановитьПараметр("ИспользоватьВнешнихПользователей",	ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей"));
		// АПК:96-выкл - №434 Использование ОБЪЕДИНИТЬ допустимо, так как
		// строки не должны повторятся и объем данных небольшой (от единиц до тысяч).
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтарыеРолиВнешнихПользователей.ВнешнийПользователь,
		|	СтарыеРолиВнешнихПользователей.Роль
		|ПОМЕСТИТЬ СтарыеРолиВнешнихПользователей
		|ИЗ
		|	&СтарыеРолиВнешнихПользователей КАК СтарыеРолиВнешнихПользователей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеРоли.Имя
		|ПОМЕСТИТЬ ВсеРоли
		|ИЗ
		|	&ВсеРоли КАК ВсеРоли
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаВнешнихПользователей,
		|	СоставыГруппПользователей.Пользователь КАК ВнешнийПользователь,
		|	Роли.Роль.Имя КАК Роль
		|ПОМЕСТИТЬ ВсеНовыеРолиВнешнихПользователей
		|ИЗ
		|	Справочник.ГруппыВнешнихПользователей.Роли КАК Роли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|		ПО (СоставыГруппПользователей.Пользователь В (&ВнешниеПользователи))
		|			И (СоставыГруппПользователей.ГруппаПользователей = Роли.Ссылка)
		|			И (&ИспользоватьВнешнихПользователей = ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеНовыеРолиВнешнихПользователей.ВнешнийПользователь,
		|	ВсеНовыеРолиВнешнихПользователей.Роль
		|ПОМЕСТИТЬ НовыеРолиВнешнихПользователей
		|ИЗ
		|	ВсеНовыеРолиВнешнихПользователей КАК ВсеНовыеРолиВнешнихПользователей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтарыеРолиВнешнихПользователей.ВнешнийПользователь
		|ПОМЕСТИТЬ ИзмененныеВнешниеПользователи
		|ИЗ
		|	СтарыеРолиВнешнихПользователей КАК СтарыеРолиВнешнихПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеРолиВнешнихПользователей КАК НовыеРолиВнешнихПользователей
		|		ПО (НовыеРолиВнешнихПользователей.ВнешнийПользователь = СтарыеРолиВнешнихПользователей.ВнешнийПользователь)
		|			И (НовыеРолиВнешнихПользователей.Роль = СтарыеРолиВнешнихПользователей.Роль)
		|ГДЕ
		|	НовыеРолиВнешнихПользователей.Роль ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НовыеРолиВнешнихПользователей.ВнешнийПользователь
		|ИЗ
		|	НовыеРолиВнешнихПользователей КАК НовыеРолиВнешнихПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ СтарыеРолиВнешнихПользователей КАК СтарыеРолиВнешнихПользователей
		|		ПО НовыеРолиВнешнихПользователей.ВнешнийПользователь = СтарыеРолиВнешнихПользователей.ВнешнийПользователь
		|			И НовыеРолиВнешнихПользователей.Роль = СтарыеРолиВнешнихПользователей.Роль
		|ГДЕ
		|	СтарыеРолиВнешнихПользователей.Роль ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеНовыеРолиВнешнихПользователей.ГруппаВнешнихПользователей,
		|	ВсеНовыеРолиВнешнихПользователей.ВнешнийПользователь,
		|	ВсеНовыеРолиВнешнихПользователей.Роль
		|ИЗ
		|	ВсеНовыеРолиВнешнихПользователей КАК ВсеНовыеРолиВнешнихПользователей
		|ГДЕ
		|	НЕ ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА КАК ЗначениеИстина
		|				ИЗ
		|					ВсеРоли КАК ВсеРоли
		|				ГДЕ
		|					ВсеРоли.Имя = ВсеНовыеРолиВнешнихПользователей.Роль)";
		// АПК:96-вкл.

		// Регистрация ошибок имен ролей в профилях групп доступа.
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ВнешнийПользователь = Выборка.ВнешнийПользователь; // СправочникСсылка.ВнешниеПользователи

			ТекстСообщения = СтрШаблон(
				"При обновлении ролей внешнего пользователя
				          |""%1""
				          |не существует роль ""%2""
				          |группы внешних пользователей ""%3"".",
				СокрЛП(ВнешнийПользователь.Наименование),
				Выборка.Роль,
				Строка(Выборка.ГруппаВнешнихПользователей));

			ЗаписьЖурналаРегистрации(
				"Пользователи.Роль не найдена в метаданных",
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстСообщения,
				РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецЦикла;

		// Обновление ролей пользователей ИБ.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИзмененныеВнешниеПользователиИРоли.ВнешнийПользователь,
		|	ИзмененныеВнешниеПользователиИРоли.Роль
		|ИЗ
		|	(ВЫБРАТЬ
		|		НовыеРолиВнешнихПользователей.ВнешнийПользователь КАК ВнешнийПользователь,
		|		НовыеРолиВнешнихПользователей.Роль КАК Роль
		|	ИЗ
		|		НовыеРолиВнешнихПользователей КАК НовыеРолиВнешнихПользователей
		|	ГДЕ
		|		НовыеРолиВнешнихПользователей.ВнешнийПользователь В
		|				(ВЫБРАТЬ
		|					ИзмененныеВнешниеПользователи.ВнешнийПользователь
		|				ИЗ
		|					ИзмененныеВнешниеПользователи КАК ИзмененныеВнешниеПользователи)
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ВнешниеПользователи.Ссылка,
		|		""""
		|	ИЗ
		|		Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|	ГДЕ
		|		ВнешниеПользователи.Ссылка В
		|				(ВЫБРАТЬ
		|					ИзмененныеВнешниеПользователи.ВнешнийПользователь
		|				ИЗ
		|					ИзмененныеВнешниеПользователи КАК ИзмененныеВнешниеПользователи)) КАК ИзмененныеВнешниеПользователиИРоли
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИзмененныеВнешниеПользователиИРоли.ВнешнийПользователь,
		|	ИзмененныеВнешниеПользователиИРоли.Роль";
		Выборка = Запрос.Выполнить().Выбрать();

		ПользовательИБ = Неопределено;
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Роль) Тогда
				ПользовательИБ.Роли.Добавить(Метаданные.Роли[Выборка.Роль]);
				Продолжить;
			КонецЕсли;
			Если ПользовательИБ <> Неопределено Тогда
				ПользовательИБ.Записать();
			КонецЕсли;

			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторыПользователейИБ[Выборка.ВнешнийПользователь]);

			ПользовательИБ.Роли.Очистить();
		КонецЦикла;
		Если ПользовательИБ <> Неопределено Тогда
			ПользовательИБ.Записать();
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Функция сП_ОбъектАвторизацииИспользуется(Знач СсылкаНаОбъектАвторизации, Знач СсылкаНаТекущегоВнешнегоПользователя, НайденныйВнешнийПользователь = Неопределено, ЕстьПравоДобавленияВнешнегоПользователя = Ложь, ТекстОшибки = "") Экспорт
	ЕстьПравоДобавленияВнешнегоПользователя = ПравоДоступа("Добавление", Метаданные.Справочники.ВнешниеПользователи);

	УстановитьПривилегированныйРежим(Истина);

	НачатьТранзакцию();
	Попытка
		СвойстваОбъектаАвторизации = сП_СвойстваОбъектаАвторизации(СсылкаНаОбъектАвторизации, СсылкаНаТекущегоВнешнегоПользователя);

		Если СвойстваОбъектаАвторизации.Используется Тогда
			НайденныйВнешнийПользователь = СвойстваОбъектаАвторизации.Ссылка;
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Если СвойстваОбъектаАвторизации.Используется Тогда
		ТекстОшибки = СтрШаблон(
			"Уже существует внешний пользователь, связанный с объектом ""%1"".",
			СсылкаНаОбъектАвторизации);
	КонецЕсли;

	Возврат СвойстваОбъектаАвторизации.Используется;
КонецФункции

Функция сП_СвойстваОбъектаАвторизации(СсылкаНаОбъектАвторизации, СсылкаНаТекущегоВнешнегоПользователя)
	Запрос			= Новый Запрос;
	Запрос.Текст	=
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВнешниеПользователи.Ссылка
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ОбъектАвторизации = &СсылкаНаОбъектАвторизации
	|	И ВнешниеПользователи.Ссылка <> &СсылкаНаТекущегоВнешнегоПользователя";

	Запрос.УстановитьПараметр("СсылкаНаТекущегоВнешнегоПользователя",	СсылкаНаТекущегоВнешнегоПользователя);
	Запрос.УстановитьПараметр("СсылкаНаОбъектАвторизации",				СсылкаНаОбъектАвторизации);

	Выборка = Запрос.Выполнить().Выбрать();

	СвойстваОбъектаАвторизации = Новый Структура;
	СвойстваОбъектаАвторизации.Вставить("Используется",	Выборка.Следующий());
	СвойстваОбъектаАвторизации.Вставить("Ссылка",		Выборка.Ссылка);

	Возврат СвойстваОбъектаАвторизации;
КонецФункции

Процедура сП_НачатьОбработкуПользователяИБ(ПользовательОбъект, ПараметрыОбработки,УдалениеПользователяИзСправочника = Ложь) Экспорт
	ПараметрыОбработки		= Новый Структура;
	ДополнительныеСвойства	= ПользовательОбъект.ДополнительныеСвойства;

	ПараметрыОбработки.Вставить("УдалениеПользователяИзСправочника",	УдалениеПользователяИзСправочника);
	ПараметрыОбработки.Вставить("ТекстСообщенияНедостаточноПрав",		"Недостаточно прав для изменения пользователя информационной базы.");

	Если ДополнительныеСвойства.Свойство("ЗначениеКопирования")
	   И ЗначениеЗаполнено(ДополнительныеСвойства.ЗначениеКопирования)
	   И ТипЗнч(ДополнительныеСвойства.ЗначениеКопирования) = ТипЗнч(ПользовательОбъект.Ссылка) Тогда

		ПараметрыОбработки.Вставить("ЗначениеКопирования", ДополнительныеСвойства.ЗначениеКопирования);
	КонецЕсли;

	// Реквизиты справочника, которые устанавливаются автоматически (проверка неизменности).
	АвтоРеквизиты = Новый Структура;
	АвтоРеквизиты.Вставить("ИдентификаторПользователяИБ");
	АвтоРеквизиты.Вставить("СвойстваПользователяИБ");
	ПараметрыОбработки.Вставить("АвтоРеквизиты", АвтоРеквизиты);

	// Реквизиты справочника, которые не допускается изменять в подписках на события (проверка начальных значений).
	БлокируемыеРеквизиты = Новый Структура;
	БлокируемыеРеквизиты.Вставить("Служебный", Ложь); // Значение для внешнего пользователя.
	БлокируемыеРеквизиты.Вставить("ПометкаУдаления");
	БлокируемыеРеквизиты.Вставить("Недействителен");
	БлокируемыеРеквизиты.Вставить("Подготовлен");
	ПараметрыОбработки.Вставить("БлокируемыеРеквизиты", БлокируемыеРеквизиты);

	сП_ЗапомнитьСвойстваПользователя(ПользовательОбъект, ПараметрыОбработки);

	УровеньДоступа = сП_УровеньДоступаКСвойствамПользователя(ПользовательОбъект, ПараметрыОбработки);
	ПараметрыОбработки.Вставить("УровеньДоступа", УровеньДоступа);

	Если ПараметрыОбработки.СтарыйПользователь.Подготовлен <> ПользовательОбъект.Подготовлен
	   И Не УровеньДоступа.ИзменениеРазрешенияНаВход Тогда

		ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
	КонецЕсли;

	// Поддержка интерактивной пометки удаления и группового изменения реквизитов ПометкаУдаления, Недействителен.
	Если ПараметрыОбработки.СтарыйПользовательИБСуществует
	   И П_ВходВПрограммуРазрешен(ПараметрыОбработки.ОписаниеСтарогоПользователяИБ)
	   И Не ДополнительныеСвойства.Свойство("ОписаниеПользователяИБ")
	   И (  ПараметрыОбработки.СтарыйПользователь.ПометкаУдаления = Ложь
	      И ПользовательОбъект.ПометкаУдаления = Истина
	    Или ПараметрыОбработки.СтарыйПользователь.Недействителен = Ложь
	      И ПользовательОбъект.Недействителен  = Истина) Тогда

		ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", Новый Структура);
		ДополнительныеСвойства.ОписаниеПользователяИБ.Вставить("Действие",					"Записать");
		ДополнительныеСвойства.ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен",	Ложь);
	КонецЕсли;

	// Поддержка обновления полного имени пользователя ИБ при изменении наименования.
	Если ПараметрыОбработки.СтарыйПользовательИБСуществует
	   И Не ДополнительныеСвойства.Свойство("ОписаниеПользователяИБ")
	   И ПараметрыОбработки.ОписаниеСтарогоПользователяИБ.ПолноеИмя <> ПользовательОбъект.Наименование Тогда

		ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", Новый Структура);
		ДополнительныеСвойства.ОписаниеПользователяИБ.Вставить("Действие", "Записать");
	КонецЕсли;

	Если НЕ ДополнительныеСвойства.Свойство("ОписаниеПользователяИБ") Тогда
		Если УровеньДоступа.УправлениеСписком
		   И Не ПараметрыОбработки.СтарыйПользовательИБСуществует
		   И ЗначениеЗаполнено(ПользовательОбъект.ИдентификаторПользователяИБ) Тогда
			// Очистка идентификатора пользователя ИБ.
			ПользовательОбъект.ИдентификаторПользователяИБ					= Неопределено;
			ПараметрыОбработки.АвтоРеквизиты.ИдентификаторПользователяИБ	= ПользовательОбъект.ИдентификаторПользователяИБ;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	ОписаниеПользователяИБ = ДополнительныеСвойства.ОписаниеПользователяИБ;

	Если НЕ ОписаниеПользователяИБ.Свойство("Действие") Тогда
		ВызватьИсключение СтрШаблон(
			"Ошибка при записи пользователя ""%1"".
			           |В параметре ОписаниеПользователяИБ не указано свойство Действие.",
			ПользовательОбъект.Ссылка);
	КонецЕсли;

	Если ОписаниеПользователяИБ.Действие <> "Записать"
	   И ОписаниеПользователяИБ.Действие <> "Удалить" Тогда

		ВызватьИсключение СтрШаблон("Ошибка при записи пользователя ""%1"".
			           |В параметре ОписаниеПользователяИБ указано
			           |неверное значение ""%2"" свойства Действие.",
			ПользовательОбъект.Ссылка,
			ОписаниеПользователяИБ.Действие);
	КонецЕсли;
	ПараметрыОбработки.Вставить("Действие", ОписаниеПользователяИБ.Действие);

	УстановитьПривилегированныйРежим(Истина);

	Если ОписаниеПользователяИБ.Действие = "Записать"
	   И ОписаниеПользователяИБ.Свойство("УникальныйИдентификатор")
	   И ЗначениеЗаполнено(ОписаниеПользователяИБ.УникальныйИдентификатор)
	   И ОписаниеПользователяИБ.УникальныйИдентификатор <> ПараметрыОбработки.СтарыйПользователь.ИдентификаторПользователяИБ Тогда

		ПараметрыОбработки.Вставить("УстановкаПользователяИБ");

		Если ПараметрыОбработки.СтарыйПользовательИБСуществует Тогда
			ВызватьИсключение СтрШаблон("Ошибка при записи пользователя ""%1"".
				           |Нельзя сопоставить пользователя ИБ с пользователем в справочнике,
				           |с которым уже сопоставлен другой пользователем ИБ.",
				ПользовательОбъект.Наименование);
		КонецЕсли;

		НайденныйПользователь = Неопределено;

		Если сП_ПользовательПоИдентификаторуСуществует(
			ОписаниеПользователяИБ.УникальныйИдентификатор,
			ПользовательОбъект.Ссылка,
			НайденныйПользователь) Тогда

			ВызватьИсключение СтрШаблон("Ошибка при записи пользователя ""%1"".
				           |Нельзя сопоставить пользователя ИБ с этим пользователем в справочнике,
				           |так как он уже сопоставлен с другим пользователем в справочнике
				           |""%2"".",
				НайденныйПользователь,
				ПользовательОбъект.Наименование);
		КонецЕсли;

		Если Не УровеньДоступа.ПолныеПрава Тогда
			ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
		КонецЕсли;

		Если Не ПараметрыОбработки.Свойство("Действие") Тогда
			ПользовательОбъект.ИдентификаторПользователяИБ					= ОписаниеПользователяИБ.УникальныйИдентификатор;
			// Обновление значения реквизита контролируемого при записи.
			ПараметрыОбработки.АвтоРеквизиты.ИдентификаторПользователяИБ	= ПользовательОбъект.ИдентификаторПользователяИБ;
		КонецЕсли;
	КонецЕсли;

	Если Не ПараметрыОбработки.Свойство("Действие") Тогда
		Возврат;
	КонецЕсли;

	Если УровеньДоступа.НетДоступа Тогда
		ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
	КонецЕсли;

	Если ОписаниеПользователяИБ.Действие = "Удалить" Тогда
		Если Не УровеньДоступа.ИзменениеРазрешенияНаВход Тогда
			ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
		КонецЕсли;
	ИначеЕсли Не УровеньДоступа.УправлениеСписком Тогда // Действие = "Записать"
		Если Не УровеньДоступа.ИзменениеТекущего Или Не ПараметрыОбработки.СтарыйПользовательИБТекущий Тогда
			ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
		КонецЕсли;
	КонецЕсли;

	Если ОписаниеПользователяИБ.Действие = "Записать" Тогда
		// Проверка прав на изменение пользователей с широким доступом.
		Если ПараметрыОбработки.СтарыйПользовательИБСуществует
		   И сП_УровеньДоступаПользователяВыше(ПараметрыОбработки.ОписаниеСтарогоПользователяИБ, УровеньДоступа) Тогда

			ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
		КонецЕсли;

		// Проверка попытки изменения недоступных свойств.
		Если Не УровеньДоступа.ПолныеПрава Тогда
			ДопустимыеСвойства = Новый Структура;
			ДопустимыеСвойства.Вставить("УникальныйИдентификатор"); // Проверено выше.

			Если УровеньДоступа.ИзменениеТекущего Тогда
				ДопустимыеСвойства.Вставить("Пароль");
				ДопустимыеСвойства.Вставить("Язык");
				Если ПользователиСерверПовтИсп.сП_ВерсияПредприятияПоддерживаетВосстановлениеПаролей() Тогда
					ДопустимыеСвойства.Вставить("АдресЭлектроннойПочты");
				КонецЕсли;
			КонецЕсли;

			Если УровеньДоступа.УправлениеСписком Тогда
				ДопустимыеСвойства.Вставить("ПолноеИмя");
				ДопустимыеСвойства.Вставить("ПоказыватьВСпискеВыбора");
				ДопустимыеСвойства.Вставить("ЗапрещеноИзменятьПароль");
				ДопустимыеСвойства.Вставить("Язык");
				ДопустимыеСвойства.Вставить("РежимЗапуска");
				Если ПользователиСерверПовтИсп.сП_ВерсияПредприятияПоддерживаетВосстановлениеПаролей() Тогда
					ДопустимыеСвойства.Вставить("АдресЭлектроннойПочты");
					ДопустимыеСвойства.Вставить("ЗапрещеноВосстанавливатьПароль");
				КонецЕсли;
			КонецЕсли;

			Если УровеньДоступа.НастройкиДляВхода Тогда
				ДопустимыеСвойства.Вставить("Имя");
				ДопустимыеСвойства.Вставить("АутентификацияСтандартная");
				ДопустимыеСвойства.Вставить("Пароль");
				ДопустимыеСвойства.Вставить("АутентификацияОС");
				ДопустимыеСвойства.Вставить("ПользовательОС");
				ДопустимыеСвойства.Вставить("АутентификацияOpenID");
				ДопустимыеСвойства.Вставить("Роли");
			КонецЕсли;

			ВсеСвойства = П_НовоеОписаниеПользователяИБ();

			Для Каждого КлючИЗначение Из ОписаниеПользователяИБ Цикл
				Если ВсеСвойства.Свойство(КлючИЗначение.Ключ)
				   И Не ДопустимыеСвойства.Свойство(КлючИЗначение.Ключ) Тогда

					ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		сП_ЗаписатьПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
	Иначе
		сП_УдалитьПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
	КонецЕсли;

	// Обновление значения реквизита контролируемого при записи.
	ПараметрыОбработки.АвтоРеквизиты.ИдентификаторПользователяИБ = ПользовательОбъект.ИдентификаторПользователяИБ;

	ОписаниеНовогоПользователяИБ = П_СвойстваПользователяИБ(ПользовательОбъект.ИдентификаторПользователяИБ);
	Если ОписаниеНовогоПользователяИБ <> Неопределено Тогда
		ПараметрыОбработки.Вставить("НовыйПользовательИБСуществует",	Истина);
		ПараметрыОбработки.Вставить("ОписаниеНовогоПользователяИБ",		ОписаниеНовогоПользователяИБ);

		// Проверка прав на изменение пользователей с широким доступом.
		Если ПараметрыОбработки.СтарыйПользовательИБСуществует
		   И сП_УровеньДоступаПользователяВыше(ПараметрыОбработки.ОписаниеНовогоПользователяИБ, УровеньДоступа) Тогда

			ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
		КонецЕсли;
	Иначе
		ПараметрыОбработки.Вставить("НовыйПользовательИБСуществует", Ложь);
	КонецЕсли;

	Если ПараметрыОбработки.Свойство("СозданиеАдминистратора") Тогда
		УстановитьПривилегированныйРежим(Истина);
		ИнтеграцияПодсистемСервер.ПриСозданииАдминистратора(сП_СсылкаОбъекта(ПользовательОбъект),
			ПараметрыОбработки.СозданиеАдминистратора);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры

Процедура сП_ЗавершитьОбработкуПользователяИБ(ПользовательОбъект, ПараметрыОбработки) Экспорт
	сП_ПроверитьИзмененияРеквизитовПользователя(ПользовательОбъект, ПараметрыОбработки);

	Если НЕ ПараметрыОбработки.Свойство("Действие") Тогда
		Возврат;
	КонецЕсли;

	ОбновлятьРоли = Истина;

	Если ПараметрыОбработки.Свойство("УстановкаПользователяИБ") И ОбновлятьРоли Тогда
		ПарольПользователяСервиса = Неопределено;
		Если ПользовательОбъект.ДополнительныеСвойства.Свойство("ПарольПользователяСервиса") Тогда
			ПарольПользователяСервиса = ПользовательОбъект.ДополнительныеСвойства.ПарольПользователяСервиса;
		КонецЕсли;

		ИнтеграцияПодсистемСервер.ПослеУстановкиПользователяИБ(ПользовательОбъект.Ссылка, ПарольПользователяСервиса);
	КонецЕсли;

	Если ПараметрыОбработки.Действие = "Записать"
	   И П_ВходВПрограммуРазрешен(ПараметрыОбработки.ОписаниеНовогоПользователяИБ) Тогда

		УстановитьПривилегированныйРежим(Истина);
		сП_ОбновитьСведенияОПользователеСРазрешеннымВходом(ПользовательОбъект.Ссылка,
			Не ПараметрыОбработки.СтарыйПользовательИБСуществует
			Или Не П_ВходВПрограммуРазрешен(ПараметрыОбработки.ОписаниеСтарогоПользователяИБ));
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;

	сП_СкопироватьНастройкиПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
КонецПроцедуры

Процедура сП_ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	Параметры.Вставить("ЭтоПолноправныйПользователь", П_ЭтоПолноправныйПользователь());
	Параметры.Вставить("ЭтоАдминистраторСистемы", П_ЭтоПолноправныйПользователь(, Истина));
КонецПроцедуры

Процедура сП_ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	Обработчики.Вставить("ТекущийПользователь",        "ПользователиСервер.сП_УстановкаПараметровСеанса");
	Обработчики.Вставить("ТекущийВнешнийПользователь", "ПользователиСервер.сП_УстановкаПараметровСеанса");
	Обработчики.Вставить("АвторизованныйПользователь", "ПользователиСервер.сП_УстановкаПараметровСеанса");
КонецПроцедуры

Процедура сП_УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	Если ИмяПараметра <> "ТекущийПользователь"
	   И ИмяПараметра <> "ТекущийВнешнийПользователь"
	   И ИмяПараметра <> "АвторизованныйПользователь" Тогда

		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Попытка
		Значения =сП_ЗначенияПараметровСеансаТекущийПользователь();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение СтрШаблон(
			"Не удалось установить параметр сеанса ТекущийПользователь по причине:
			           |""%1"".
			           |
			           |Обратитесь к администратору.",
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;

	Если ТипЗнч(Значения) = Тип("Строка") Тогда
		ВызватьИсключение Значения;
	КонецЕсли;

	ПараметрыСеанса.ТекущийПользователь        = Значения.ТекущийПользователь;
	ПараметрыСеанса.ТекущийВнешнийПользователь = Значения.ТекущийВнешнийПользователь;

	Если ЗначениеЗаполнено(Значения.ТекущийПользователь) Тогда
		ПараметрыСеанса.АвторизованныйПользователь = Значения.ТекущийПользователь;
	Иначе
		ПараметрыСеанса.АвторизованныйПользователь = Значения.ТекущийВнешнийПользователь;
	КонецЕсли;

	УстановленныеПараметры.Добавить("ТекущийПользователь");
	УстановленныеПараметры.Добавить("ТекущийВнешнийПользователь");
	УстановленныеПараметры.Добавить("АвторизованныйПользователь");
КонецПроцедуры

Процедура сП_ЗапомнитьСвойстваПользователя(ПользовательОбъект, ПараметрыОбработки)
	Поля = "Ссылка,ИдентификаторПользователяИБ,СвойстваПользователяИБ,Подготовлен,ПометкаУдаления,Недействителен";

	Если ТипЗнч(ПользовательОбъект) = Тип("СправочникОбъект.Пользователи") Тогда
		Поля = Поля + ",Служебный";
	КонецЕсли;

	СтарыйПользователь = БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта(ПользовательОбъект.Ссылка, Поля);

	Если ТипЗнч(ПользовательОбъект) <> Тип("СправочникОбъект.Пользователи") Тогда
		СтарыйПользователь.Вставить("Служебный", Ложь);
	КонецЕсли;

	Если ПользовательОбъект.ЭтоНовый() Или ПользовательОбъект.Ссылка <> СтарыйПользователь.Ссылка Тогда
		СтарыйПользователь.ИдентификаторПользователяИБ		= Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		СтарыйПользователь.СвойстваПользователяИБ			= Новый ХранилищеЗначения(Неопределено);
		СтарыйПользователь.Подготовлен						= Ложь;
		СтарыйПользователь.ПометкаУдаления					= Ложь;
		СтарыйПользователь.Недействителен					= Ложь;
	КонецЕсли;
	ПараметрыОбработки.Вставить("СтарыйПользователь", СтарыйПользователь);

	// Свойства старого пользователя ИБ (если существует).
	УстановитьПривилегированныйРежим(Истина);

	ОписаниеСтарогоПользователяИБ = П_СвойстваПользователяИБ(СтарыйПользователь.ИдентификаторПользователяИБ);
	ПараметрыОбработки.Вставить("СтарыйПользовательИБСуществует", ОписаниеСтарогоПользователяИБ <> Неопределено);
	ПараметрыОбработки.Вставить("СтарыйПользовательИБТекущий", Ложь);

	Если ПараметрыОбработки.СтарыйПользовательИБСуществует Тогда
		ПараметрыОбработки.Вставить("ОписаниеСтарогоПользователяИБ", ОписаниеСтарогоПользователяИБ);

		Если ОписаниеСтарогоПользователяИБ.УникальныйИдентификатор = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор Тогда
			ПараметрыОбработки.Вставить("СтарыйПользовательИБТекущий", Истина);
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

	// Начальное заполнение значений полей авто реквизитов значениями старого пользователя.
	ЗаполнитьЗначенияСвойств(ПараметрыОбработки.АвтоРеквизиты, СтарыйПользователь);

	// Начальное заполнение значений полей блокируемых реквизитов значениями нового пользователя.
	ЗаполнитьЗначенияСвойств(ПараметрыОбработки.БлокируемыеРеквизиты, ПользовательОбъект);
КонецПроцедуры

Функция сП_УровеньДоступаПользователяВыше(ОписаниеПользователя, ТекущийУровеньДоступа) Экспорт
	Если ТипЗнч(ОписаниеПользователя) = Тип("СправочникСсылка.Пользователи")
	 Или ТипЗнч(ОписаниеПользователя) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда

		Возврат П_ЭтоПолноправныйПользователь(ОписаниеПользователя, Истина, Ложь)
		      И Не ТекущийУровеньДоступа.АдминистраторСистемы
		    Или П_ЭтоПолноправныйПользователь(ОписаниеПользователя, Ложь, Ложь)
		      И Не ТекущийУровеньДоступа.ПолныеПрава;
	Иначе
		Возврат ОписаниеПользователя.Роли.Найти("АдминистраторСистемы") <> Неопределено
		      И Не ТекущийУровеньДоступа.АдминистраторСистемы
		    Или ОписаниеПользователя.Роли.Найти("ПолныеПрава") <> Неопределено
		      И Не ТекущийУровеньДоступа.ПолныеПрава;
	КонецЕсли;
КонецФункции

Процедура сП_ЗаписатьПользователяИБ(ПользовательОбъект, ПараметрыОбработки)
	ДополнительныеСвойства = ПользовательОбъект.ДополнительныеСвойства;
	ОписаниеПользователяИБ = ДополнительныеСвойства.ОписаниеПользователяИБ;
	СтарыйПользователь     = ПараметрыОбработки.СтарыйПользователь;
	АвтоРеквизиты          = ПараметрыОбработки.АвтоРеквизиты;

	Если ОписаниеПользователяИБ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если ОписаниеПользователяИБ.Свойство("ПотребоватьСменуПароляПриВходе") Тогда
		сП_ЗаписатьСвойствоПотребоватьСменуПароляПриВходе(сП_СсылкаОбъекта(ПользовательОбъект),
			ОписаниеПользователяИБ.ПотребоватьСменуПароляПриВходе);

		Если ОписаниеПользователяИБ.Количество() = 2 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	СоздатьНовогоПользователяИБ = Ложь;

	Если ОписаниеПользователяИБ.Свойство("УникальныйИдентификатор")
	   И ЗначениеЗаполнено(ОписаниеПользователяИБ.УникальныйИдентификатор)
	   И ОписаниеПользователяИБ.УникальныйИдентификатор <> ПараметрыОбработки.СтарыйПользователь.ИдентификаторПользователяИБ Тогда

		ИдентификаторПользователяИБ = ОписаниеПользователяИБ.УникальныйИдентификатор;
	ИначеЕсли ЗначениеЗаполнено(СтарыйПользователь.ИдентификаторПользователяИБ) Тогда
		ИдентификаторПользователяИБ = СтарыйПользователь.ИдентификаторПользователяИБ;
		СоздатьНовогоПользователяИБ = НЕ ПараметрыОбработки.СтарыйПользовательИБСуществует;
	Иначе
		ИдентификаторПользователяИБ = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		СоздатьНовогоПользователяИБ = Истина;
	КонецЕсли;

	// Заполнение автоматических свойств пользователя ИБ.
	ОписаниеПользователяИБ.Вставить("ПолноеИмя", ПользовательОбъект.Наименование);

	ХранимыеСвойства = сП_ХранимыеСвойстваПользователяИБ(ПользовательОбъект);
	Если ПараметрыОбработки.СтарыйПользовательИБСуществует Тогда
		СтараяАутентификация = ПараметрыОбработки.ОписаниеСтарогоПользователяИБ;
		Если П_ВходВПрограммуРазрешен(СтараяАутентификация) Тогда
			ХранимыеСвойства.АутентификацияСтандартная = СтараяАутентификация.АутентификацияСтандартная;
			ХранимыеСвойства.АутентификацияOpenID      = СтараяАутентификация.АутентификацияOpenID;
			ХранимыеСвойства.АутентификацияОС          = СтараяАутентификация.АутентификацияОС;
			ПользовательОбъект.СвойстваПользователяИБ = Новый ХранилищеЗначения(ХранимыеСвойства);
			АвтоРеквизиты.СвойстваПользователяИБ = ПользовательОбъект.СвойстваПользователяИБ;
		КонецЕсли;
	Иначе
		СтараяАутентификация = Новый Структура;
		СтараяАутентификация.Вставить("АутентификацияСтандартная", Ложь);
		СтараяАутентификация.Вставить("АутентификацияОС",          Ложь);
		СтараяАутентификация.Вставить("АутентификацияOpenID",      Ложь);
		ХранимыеСвойства.АутентификацияСтандартная = Ложь;
		ХранимыеСвойства.АутентификацияOpenID      = Ложь;
		ХранимыеСвойства.АутентификацияОС          = Ложь;
		ПользовательОбъект.СвойстваПользователяИБ = Новый ХранилищеЗначения(ХранимыеСвойства);
		АвтоРеквизиты.СвойстваПользователяИБ = ПользовательОбъект.СвойстваПользователяИБ;
	КонецЕсли;

	Если ОписаниеПользователяИБ.Свойство("АутентификацияСтандартная") Тогда
		ХранимыеСвойства.АутентификацияСтандартная = ОписаниеПользователяИБ.АутентификацияСтандартная;
		ПользовательОбъект.СвойстваПользователяИБ = Новый ХранилищеЗначения(ХранимыеСвойства);
		АвтоРеквизиты.СвойстваПользователяИБ = ПользовательОбъект.СвойстваПользователяИБ;
	КонецЕсли;

	Если ОписаниеПользователяИБ.Свойство("АутентификацияОС") Тогда
		ХранимыеСвойства.АутентификацияОС = ОписаниеПользователяИБ.АутентификацияОС;
		ПользовательОбъект.СвойстваПользователяИБ = Новый ХранилищеЗначения(ХранимыеСвойства);
		АвтоРеквизиты.СвойстваПользователяИБ = ПользовательОбъект.СвойстваПользователяИБ;
	КонецЕсли;

	Если ОписаниеПользователяИБ.Свойство("АутентификацияOpenID") Тогда
		ХранимыеСвойства.АутентификацияOpenID = ОписаниеПользователяИБ.АутентификацияOpenID;
		ПользовательОбъект.СвойстваПользователяИБ = Новый ХранилищеЗначения(ХранимыеСвойства);
		АвтоРеквизиты.СвойстваПользователяИБ = ПользовательОбъект.СвойстваПользователяИБ;
	КонецЕсли;

	УстановитьХранимуюАутентификацию = Неопределено;
	Если ОписаниеПользователяИБ.Свойство("ВходВПрограммуРазрешен") Тогда
		УстановитьХранимуюАутентификацию = ОписаниеПользователяИБ.ВходВПрограммуРазрешен = Истина;

	ИначеЕсли ОписаниеПользователяИБ.Свойство("АутентификацияСтандартная")
	        И ОписаниеПользователяИБ.АутентификацияСтандартная = Истина
	      ИЛИ ОписаниеПользователяИБ.Свойство("АутентификацияОС")
	        И ОписаниеПользователяИБ.АутентификацияОС = Истина
	      ИЛИ ОписаниеПользователяИБ.Свойство("АутентификацияOpenID")
	        И ОписаниеПользователяИБ.АутентификацияOpenID = Истина Тогда

		УстановитьХранимуюАутентификацию = Истина;
	КонецЕсли;

	Если УстановитьХранимуюАутентификацию = Неопределено Тогда
		НоваяАутентификация = СтараяАутентификация;
	Иначе
		Если УстановитьХранимуюАутентификацию Тогда
			ОписаниеПользователяИБ.Вставить("АутентификацияСтандартная", ХранимыеСвойства.АутентификацияСтандартная);
			ОписаниеПользователяИБ.Вставить("АутентификацияOpenID",      ХранимыеСвойства.АутентификацияOpenID);
			ОписаниеПользователяИБ.Вставить("АутентификацияОС",          ХранимыеСвойства.АутентификацияОС);
		Иначе
			ОписаниеПользователяИБ.Вставить("АутентификацияСтандартная", Ложь);
			ОписаниеПользователяИБ.Вставить("АутентификацияОС",          Ложь);
			ОписаниеПользователяИБ.Вставить("АутентификацияOpenID",      Ложь);
		КонецЕсли;
		НоваяАутентификация = ОписаниеПользователяИБ;
	КонецЕсли;

	Если ХранимыеСвойства.ВходВПрограммуРазрешен <> П_ВходВПрограммуРазрешен(НоваяАутентификация) Тогда
		ХранимыеСвойства.ВходВПрограммуРазрешен = П_ВходВПрограммуРазрешен(НоваяАутентификация);
		ПользовательОбъект.СвойстваПользователяИБ = Новый ХранилищеЗначения(ХранимыеСвойства);
		АвтоРеквизиты.СвойстваПользователяИБ = ПользовательОбъект.СвойстваПользователяИБ;
	КонецЕсли;

	// Проверка прав на изменение разрешения входа в программу.
	Если П_ВходВПрограммуРазрешен(НоваяАутентификация) <> П_ВходВПрограммуРазрешен(СтараяАутентификация) Тогда
		Если П_ВходВПрограммуРазрешен(НоваяАутентификация)
		   И Не ПараметрыОбработки.УровеньДоступа.ИзменениеРазрешенияНаВход
		 Или Не П_ВходВПрограммуРазрешен(НоваяАутентификация)
		   И Не ПараметрыОбработки.УровеньДоступа.ОтключениеРазрешенияНаВход Тогда

			ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
		КонецЕсли;
	КонецЕсли;

	ПарольЗадан		= ОписаниеПользователяИБ.Свойство("Пароль") И ОписаниеПользователяИБ.Пароль <> Неопределено;

	ХешПароляЗадан	= ОписаниеПользователяИБ.Свойство("СохраняемоеЗначениеПароля") И ОписаниеПользователяИБ.СохраняемоеЗначениеПароля <> Неопределено;

	ПроверитьПустойПароль =
		Не СтараяАутентификация.АутентификацияСтандартная
		И ХранимыеСвойства.АутентификацияСтандартная
		И (    СоздатьНовогоПользователяИБ
		     И Не ПарольЗадан
		   Или ПараметрыОбработки.СтарыйПользовательИБСуществует
		     И Не ПараметрыОбработки.ОписаниеСтарогоПользователяИБ.ПарольУстановлен);

	Если ПарольЗадан Или Не ХешПароляЗадан И ПроверитьПустойПароль Тогда
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("Пользователь", ПользовательОбъект);
		ПараметрыВыполнения.Вставить("НовыйПароль", ?(ПарольЗадан, ОписаниеПользователяИБ.Пароль, ""));
		ПараметрыВыполнения.Вставить("СтарыйПароль", Неопределено);

		ОписаниеПользователяИБ.Свойство("СтарыйПароль", ПараметрыВыполнения.СтарыйПароль);

		ТекстОшибки = сП_ОбработатьНовыйПароль(ПараметрыВыполнения);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;

	// Попытка записи пользователя ИБ.
	П_УстановитьСвойстваПользователяИБ(ИдентификаторПользователяИБ, ОписаниеПользователяИБ, СоздатьНовогоПользователяИБ, ТипЗнч(ПользовательОбъект) = Тип("СправочникОбъект.ВнешниеПользователи"));
	ПользовательИБ = ОписаниеПользователяИБ.ПользовательИБ;

	Если ПользовательОбъект.ДополнительныеСвойства.Свойство("СозданиеАдминистратора")
	   И ЗначениеЗаполнено(ПользовательОбъект.ДополнительныеСвойства.СозданиеАдминистратора)
	   И сП_РолиАдминистратораДоступны(ПользовательИБ) Тогда

		ПараметрыОбработки.Вставить("СозданиеАдминистратора",
			ПользовательОбъект.ДополнительныеСвойства.СозданиеАдминистратора);
	КонецЕсли;

	Если СоздатьНовогоПользователяИБ Тогда
		ОписаниеПользователяИБ.Вставить("РезультатДействия", "ДобавленПользовательИБ");
		ИдентификаторПользователяИБ = ОписаниеПользователяИБ.УникальныйИдентификатор;
		ПараметрыОбработки.Вставить("УстановкаПользователяИБ");

		Если Не ПараметрыОбработки.УровеньДоступа.ИзменениеРазрешенияНаВход
		   И ПараметрыОбработки.УровеньДоступа.УправлениеСписком
		   И Не П_ВходВПрограммуРазрешен(ПользовательИБ) Тогда

			ПользовательОбъект.Подготовлен = Истина;
			ПараметрыОбработки.БлокируемыеРеквизиты.Подготовлен = Истина;
		КонецЕсли;
	Иначе
		ОписаниеПользователяИБ.Вставить("РезультатДействия", "ИзмененПользовательИБ");

		Если П_ВходВПрограммуРазрешен(ПользовательИБ) Тогда
			ПользовательОбъект.Подготовлен = Ложь;
			ПараметрыОбработки.БлокируемыеРеквизиты.Подготовлен = Ложь;
		КонецЕсли;
	КонецЕсли;

	ПользовательОбъект.ИдентификаторПользователяИБ = ИдентификаторПользователяИБ;

	ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", ИдентификаторПользователяИБ);
КонецПроцедуры


Процедура сП_УдалитьПользователяИБ(ПользовательОбъект, ПараметрыОбработки)
	ОписаниеПользователяИБ = ПользовательОбъект.ДополнительныеСвойства.ОписаниеПользователяИБ;
	СтарыйПользователь     = ПараметрыОбработки.СтарыйПользователь;

	// Очистка идентификатора пользователя ИБ.
	ПользовательОбъект.ИдентификаторПользователяИБ = Неопределено;

	Если ПараметрыОбработки.СтарыйПользовательИБСуществует Тогда
		УстановитьПривилегированныйРежим(Истина);
		П_УдалитьПользователяИБ(СтарыйПользователь.ИдентификаторПользователяИБ);

		// Установка идентификатора удаляемого пользователя ИБ, как результата действия Удалить.
		ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", СтарыйПользователь.ИдентификаторПользователяИБ);
		ОписаниеПользователяИБ.Вставить("РезультатДействия", "УдаленПользовательИБ");

	ИначеЕсли ЗначениеЗаполнено(СтарыйПользователь.ИдентификаторПользователяИБ) Тогда
		ОписаниеПользователяИБ.Вставить("РезультатДействия", "ОчищеноСопоставлениеСНесуществующимПользователемИБ");
	Иначе
		ОписаниеПользователяИБ.Вставить("РезультатДействия", "НеТребуетсяУдалениеПользовательИБ");
	КонецЕсли;
КонецПроцедуры

Процедура сП_ЗаписатьСвойствоПотребоватьСменуПароляПриВходе(Пользователь, Значение)
	Блокировка			= Новый БлокировкаДанных;
	ЭлементБлокировки	= Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
	ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			СведенияОПользователе				= НаборЗаписей.Добавить();
			СведенияОПользователе.Пользователь	= Пользователь;
		Иначе
			СведенияОПользователе				= НаборЗаписей[0];
		КонецЕсли;
		СведенияОПользователе.ПотребоватьСменуПароляПриВходе	= Значение;
		НаборЗаписей.Записать();

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Функция сП_ХранимыеСвойстваПользователяИБ(ОписаниеПользователя, ВходВПрограммуРазрешен = Ложь) Экспорт
	Свойства = Новый Структура;
	Свойства.Вставить("ВходВПрограммуРазрешен",    Ложь);
	Свойства.Вставить("АутентификацияСтандартная", Ложь);
	Свойства.Вставить("АутентификацияOpenID",      Ложь);
	Свойства.Вставить("АутентификацияОС",          Ложь);

	Если ТипЗнч(ОписаниеПользователя) = Тип("СправочникСсылка.Пользователи")
	 Или ТипЗнч(ОписаниеПользователя) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда

		ХранилищеСвойств = БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(ОписаниеПользователя, "СвойстваПользователяИБ");
	Иначе
		ХранилищеСвойств = ОписаниеПользователя.СвойстваПользователяИБ;
	КонецЕсли;

	Если ТипЗнч(ХранилищеСвойств) <> Тип("ХранилищеЗначения") Тогда
		Возврат Свойства;
	КонецЕсли;

	СохраненныеСвойства = ХранилищеСвойств.Получить();

	Если ТипЗнч(СохраненныеСвойства) <> Тип("Структура") Тогда
		Возврат Свойства;
	КонецЕсли;

	Для каждого КлючИЗначение Из Свойства Цикл
		Если СохраненныеСвойства.Свойство(КлючИЗначение.Ключ)
		   И ТипЗнч(СохраненныеСвойства[КлючИЗначение.Ключ]) = Тип("Булево") Тогда

			Свойства[КлючИЗначение.Ключ] = СохраненныеСвойства[КлючИЗначение.Ключ];
		КонецЕсли;
	КонецЦикла;

	Если Свойства.ВходВПрограммуРазрешен И Не ВходВПрограммуРазрешен Тогда
		Свойства.Вставить("АутентификацияСтандартная", Ложь);
		Свойства.Вставить("АутентификацияOpenID",      Ложь);
		Свойства.Вставить("АутентификацияОС",          Ложь);
	КонецЕсли;

	Возврат Свойства;
КонецФункции

Функция сП_СсылкаОбъекта(Знач Объект, ЭтоНовый = Неопределено) Экспорт
	Ссылка = Объект.Ссылка;
	ЭтоНовый = НЕ ЗначениеЗаполнено(Ссылка);

	Если ЭтоНовый Тогда
		Ссылка = Объект.ПолучитьСсылкуНового();

		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
			Менеджер	= БазоваяПодсистемаСервер.ОН_МенеджерОбъектаПоСсылке(Объект.Ссылка);
			Ссылка		= Менеджер.ПолучитьСсылку();
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
	КонецЕсли;

	Возврат Ссылка;
КонецФункции

Процедура сП_ПроверитьИзмененияРеквизитовПользователя(ПользовательОбъект, ПараметрыОбработки)
	СтарыйПользователь   = ПараметрыОбработки.СтарыйПользователь;
	АвтоРеквизиты        = ПараметрыОбработки.АвтоРеквизиты;
	БлокируемыеРеквизиты = ПараметрыОбработки.БлокируемыеРеквизиты;

	Если ТипЗнч(ПользовательОбъект) = Тип("СправочникОбъект.Пользователи")
	   И БлокируемыеРеквизиты.Служебный <> ПользовательОбъект.Служебный Тогда

		ВызватьИсключение СтрШаблон("Ошибка при записи пользователя ""%1"".
			           |Реквизит Служебный не допускается изменять в подписках на события.",
			ПользовательОбъект.Ссылка);
	КонецЕсли;

	Если БлокируемыеРеквизиты.Подготовлен <> ПользовательОбъект.Подготовлен Тогда
		ВызватьИсключение СтрШаблон("Ошибка при записи пользователя ""%1"".
			           |Реквизит Подготовлен не допускается изменять в подписках на события.",
			ПользовательОбъект.Ссылка);
	КонецЕсли;

	Если АвтоРеквизиты.ИдентификаторПользователяИБ <> ПользовательОбъект.ИдентификаторПользователяИБ Тогда
		ВызватьИсключение СтрШаблон("Ошибка при записи пользователя ""%1"".
			           |Реквизит ИдентификаторПользователяИБ не допускается изменять.
			           |Обновление реквизита выполняется автоматически.",
			ПользовательОбъект.Ссылка);
	КонецЕсли;

	Если Не БазоваяПодсистемаСервер.ОН_ДанныеСовпадают(АвтоРеквизиты.СвойстваПользователяИБ, ПользовательОбъект.СвойстваПользователяИБ) Тогда
		ВызватьИсключение СтрШаблон("Ошибка при записи пользователя ""%1"".
			           |Реквизит СвойстваПользователяИБ не допускается изменять.
			           |Обновление реквизита выполняется автоматически.",
			ПользовательОбъект.Ссылка);
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Если СтарыйПользователь.ПометкаУдаления = Ложь
	   И ПользовательОбъект.ПометкаУдаления = Истина
	   И П_ВходВПрограммуРазрешен(ПользовательОбъект.ИдентификаторПользователяИБ) Тогда

		ВызватьИсключение СтрШаблон("Ошибка при записи пользователя ""%1"".
			           |Нельзя помечать на удаление пользователя, которому разрешен вход в программу.",
			ПользовательОбъект.Ссылка);
	КонецЕсли;

	Если СтарыйПользователь.Недействителен = Ложь
	   И ПользовательОбъект.Недействителен = Истина
	   И П_ВходВПрограммуРазрешен(ПользовательОбъект.ИдентификаторПользователяИБ) Тогда

		ВызватьИсключение СтрШаблон("Ошибка при записи пользователя ""%1"".
			           |Нельзя пометить недействительным пользователя, которому разрешен вход в программу.",
			ПользовательОбъект.Ссылка);
	КонецЕсли;

	Если СтарыйПользователь.Подготовлен = Ложь
	   И ПользовательОбъект.Подготовлен = Истина
	   И П_ВходВПрограммуРазрешен(ПользовательОбъект.ИдентификаторПользователяИБ) Тогда

		ВызватьИсключение СтрШаблон("Ошибка при записи пользователя ""%1"".
			           |Нельзя пометить подготовленным пользователя, которому разрешен вход в программу.",
			ПользовательОбъект.Ссылка);
	КонецЕсли;
КонецПроцедуры

Процедура сП_ОбновитьСведенияОПользователеСРазрешеннымВходом(Пользователь, ВходВПрограммуВключен)
	Блокировка			= Новый БлокировкаДанных;
	ЭлементБлокировки	= Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
	ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);

	НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			НаборЗаписей.Добавить();
			НаборЗаписей[0].Пользователь = Пользователь;
		КонецЕсли;
		Записать = Ложь;
		Если ЗначениеЗаполнено(НаборЗаписей[0].ДатаАвтоматическогоЗапрещенияВхода) Тогда
			Записать											= Истина;
			НаборЗаписей[0].ДатаАвтоматическогоЗапрещенияВхода	= Неопределено;
		КонецЕсли;
		Если ВходВПрограммуВключен И НаборЗаписей[0].ДатаРазрешенияВходаВПрограмму <> НачалоДня(ТекущаяДатаСеанса()) Тогда
			Записать										= Истина;
			НаборЗаписей[0].ДатаРазрешенияВходаВПрограмму	= НачалоДня(ТекущаяДатаСеанса());
		КонецЕсли;
		Если Записать Тогда
			НаборЗаписей.Записать();
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Процедура сП_ОбновитьСоставыГруппВнешнихПользователей(Знач ГруппаВнешнихПользователей, Знач ВнешнийПользователь = Неопределено, Знач УчастникиИзменений = Неопределено,Знач ИзмененныеГруппы = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(ГруппаВнешнихПользователей) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ВнешнийПользователь) = Тип("Массив") И ВнешнийПользователь.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если УчастникиИзменений = Неопределено Тогда
		ТекущиеУчастникиИзменений = Новый Соответствие;
	Иначе
		ТекущиеУчастникиИзменений = УчастникиИзменений;
	КонецЕсли;

	Если ИзмененныеГруппы = Неопределено Тогда
		ТекущиеИзмененныеГруппы = Новый Соответствие;
	Иначе
		ТекущиеИзмененныеГруппы = ИзмененныеГруппы;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	НачатьТранзакцию();
	Попытка
		Если ГруппаВнешнихПользователей = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
			сП_ОбновитьСоставГруппыВсеПользователи(ВнешнийПользователь, Истина, ТекущиеУчастникиИзменений, ТекущиеИзмененныеГруппы);

			сП_ОбновитьСоставыГруппПоТипамОбъектовАвторизации(Неопределено, ВнешнийПользователь, ТекущиеУчастникиИзменений, ТекущиеИзмененныеГруппы);
		Иначе
			ВсеОбъектыАвторизации = БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(ГруппаВнешнихПользователей, "ВсеОбъектыАвторизации");
			ВсеОбъектыАвторизации = ?(ВсеОбъектыАвторизации = Неопределено, Ложь, ВсеОбъектыАвторизации);

			Если ВсеОбъектыАвторизации Тогда
				сп_ОбновитьСоставыГруппПоТипамОбъектовАвторизации(ГруппаВнешнихПользователей, ВнешнийПользователь, ТекущиеУчастникиИзменений, ТекущиеИзмененныеГруппы);
			Иначе
				сП_ОбновитьСоставыИерархическихГруппПользователей(ГруппаВнешнихПользователей, ВнешнийПользователь, ТекущиеУчастникиИзменений, ТекущиеИзмененныеГруппы);
			КонецЕсли;
		КонецЕсли;

		Если УчастникиИзменений = Неопределено
		   И ИзмененныеГруппы   = Неопределено Тогда

			сП_ПослеОбновленияСоставовГруппВнешнихПользователей(ТекущиеУчастникиИзменений, ТекущиеИзмененныеГруппы);
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Процедура сП_ОбновитьСоставГруппыВсеПользователи(Пользователь, ОбновитьГруппуВнешнихПользователей = Ложь, УчастникиИзменений = Неопределено, ИзмененныеГруппы = Неопределено)
	Если ОбновитьГруппуВнешнихПользователей Тогда
		ГруппаВсеПользователи = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи;
	Иначе
		ГруппаВсеПользователи = Справочники.ГруппыПользователей.ВсеПользователи;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Пользователи.ПометкаУдаления
	|			ТОГДА ЛОЖЬ
	|		КОГДА Пользователи.Недействителен
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Используется
	|ПОМЕСТИТЬ Пользователи
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	&ОтборПользователя
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Пользователи.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ГруппаВсеПользователи КАК ГруппаПользователей,
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.Используется
	|ИЗ
	|	Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ПО (СоставыГруппПользователей.ГруппаПользователей = &ГруппаВсеПользователи)
	|			И (СоставыГруппПользователей.Пользователь = Пользователи.Ссылка)
	|			И (СоставыГруппПользователей.Используется = Пользователи.Используется)
	|ГДЕ
	|	СоставыГруппПользователей.Пользователь ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Пользователи.Ссылка,
	|	Пользователи.Ссылка,
	|	Пользователи.Используется
	|ИЗ
	|	Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ПО (СоставыГруппПользователей.ГруппаПользователей = Пользователи.Ссылка)
	|			И (СоставыГруппПользователей.Пользователь = Пользователи.Ссылка)
	|			И (СоставыГруппПользователей.Используется = Пользователи.Используется)
	|ГДЕ
	|	СоставыГруппПользователей.Пользователь ЕСТЬ NULL ";

	Блокировка			= Новый БлокировкаДанных;
	ЭлементБлокировки	= Блокировка.Добавить("РегистрСведений.СоставыГруппПользователей");
	ЭлементБлокировки.УстановитьЗначение("ГруппаПользователей", ГруппаВсеПользователи);

	Если ОбновитьГруппуВнешнихПользователей Тогда
		ЭлементБлокировки	= Блокировка.Добавить("Справочник.ВнешниеПользователи");
		Запрос.Текст		= СтрЗаменить(Запрос.Текст, "Справочник.Пользователи", "Справочник.ВнешниеПользователи");
	Иначе
		ЭлементБлокировки	= Блокировка.Добавить("Справочник.Пользователи");
	КонецЕсли;
	ЭлементБлокировки.Режим	= РежимБлокировкиДанных.Разделяемый;

	Если Пользователь = Неопределено Тогда
		Запрос.Текст		= СтрЗаменить(Запрос.Текст, "&ОтборПользователя", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.Текст		= СтрЗаменить(Запрос.Текст, "&ОтборПользователя", "Пользователи.Ссылка В (&Пользователь)");
	КонецЕсли;

	Запрос.УстановитьПараметр("ГруппаВсеПользователи", ГруппаВсеПользователи);

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		РезультатЗапроса = Запрос.Выполнить();

		Если Не РезультатЗапроса.Пустой() Тогда
			НаборЗаписей	= РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
			Запись			= НаборЗаписей.Добавить();
			Выборка			= РезультатЗапроса.Выбрать();

			Пока Выборка.Следующий() Цикл
				НаборЗаписей.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
				НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				НаборЗаписей.Записать(); // Добавление недостающих записей о связях.

				Если УчастникиИзменений <> Неопределено Тогда
					УчастникиИзменений.Вставить(Выборка.Пользователь);
				КонецЕсли;
			КонецЦикла;

			Если ИзмененныеГруппы <> Неопределено Тогда
				ИзмененныеГруппы.Вставить(ГруппаВсеПользователи);
			КонецЕсли;
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Процедура сП_ОбновитьСоставыГруппПоТипамОбъектовАвторизации(ГруппаВнешнихПользователей, ВнешнийПользователь, УчастникиИзменений, ИзмененныеГруппы)
	Запрос			= Новый Запрос;
	Запрос.Текст	=
	"ВЫБРАТЬ
	|	ГруппыВнешнихПользователей.Ссылка КАК ГруппаПользователей,
	|	ВнешниеПользователи.Ссылка КАК Пользователь,
	|	ВЫБОР
	|		КОГДА ГруппыВнешнихПользователей.ПометкаУдаления
	|			ТОГДА ЛОЖЬ
	|		КОГДА ВнешниеПользователи.ПометкаУдаления
	|			ТОГДА ЛОЖЬ
	|		КОГДА ВнешниеПользователи.Недействителен
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Используется
	|ПОМЕСТИТЬ НовыеСоставы
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
	|		ПО (ГруппыВнешнихПользователей.ВсеОбъектыАвторизации = ИСТИНА)
	|			И (&ОтборГруппыВнешнихПользователей1)
	|			И (ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.ГруппыВнешнихПользователей.Назначение КАК ТипыПользователей
	|				ГДЕ
	|					ТипыПользователей.Ссылка = ГруппыВнешнихПользователей.Ссылка
	|					И ТИПЗНАЧЕНИЯ(ТипыПользователей.ТипПользователей) = ТИПЗНАЧЕНИЯ(ВнешниеПользователи.ОбъектАвторизации)))
	|			И (&ОтборВнешнегоПользователя1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставыГруппПользователей.ГруппаПользователей,
	|	СоставыГруппПользователей.Пользователь
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеСоставы КАК НовыеСоставы
	|		ПО СоставыГруппПользователей.ГруппаПользователей = НовыеСоставы.ГруппаПользователей
	|			И СоставыГруппПользователей.Пользователь = НовыеСоставы.Пользователь
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.ГруппаПользователей) = ТИП(Справочник.ГруппыВнешнихПользователей)
	|	И ВЫРАЗИТЬ(СоставыГруппПользователей.ГруппаПользователей КАК Справочник.ГруппыВнешнихПользователей).ВсеОбъектыАвторизации = ИСТИНА
	|	И &ОтборГруппыВнешнихПользователей2
	|	И &ОтборВнешнегоПользователя2
	|	И НовыеСоставы.Пользователь ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеСоставы.ГруппаПользователей,
	|	НовыеСоставы.Пользователь,
	|	НовыеСоставы.Используется
	|ИЗ
	|	НовыеСоставы КАК НовыеСоставы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ПО (СоставыГруппПользователей.ГруппаПользователей = НовыеСоставы.ГруппаПользователей)
	|			И (СоставыГруппПользователей.Пользователь = НовыеСоставы.Пользователь)
	|			И (СоставыГруппПользователей.Используется = НовыеСоставы.Используется)
	|ГДЕ
	|	СоставыГруппПользователей.Пользователь ЕСТЬ NULL ";

	Если ГруппаВнешнихПользователей = Неопределено Тогда
		Запрос.Текст	= СтрЗаменить(Запрос.Текст, "&ОтборГруппыВнешнихПользователей1", "ИСТИНА");
		Запрос.Текст	= СтрЗаменить(Запрос.Текст, "&ОтборГруппыВнешнихПользователей2", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("ГруппаВнешнихПользователей", ГруппаВнешнихПользователей);
		Запрос.Текст	= СтрЗаменить(Запрос.Текст, "&ОтборГруппыВнешнихПользователей1", "ГруппыВнешнихПользователей.Ссылка В (&ГруппаВнешнихПользователей)");
		Запрос.Текст	= СтрЗаменить(Запрос.Текст, "&ОтборГруппыВнешнихПользователей2", "СоставыГруппПользователей.ГруппаПользователей В (&ГруппаВнешнихПользователей)");
	КонецЕсли;

	Если ВнешнийПользователь = Неопределено Тогда
		Запрос.Текст	= СтрЗаменить(Запрос.Текст, "&ОтборВнешнегоПользователя1", "ИСТИНА");
		Запрос.Текст	= СтрЗаменить(Запрос.Текст, "&ОтборВнешнегоПользователя2", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("ВнешнийПользователь", ВнешнийПользователь);
		Запрос.Текст	= СтрЗаменить(Запрос.Текст, "&ОтборВнешнегоПользователя1", "ВнешниеПользователи.Ссылка В (&ВнешнийПользователь)");
		Запрос.Текст	= СтрЗаменить(Запрос.Текст, "&ОтборВнешнегоПользователя2", "СоставыГруппПользователей.Пользователь В (&ВнешнийПользователь)");
	КонецЕсли;

	РезультатыЗапросов = Запрос.ВыполнитьПакет();

	Если НЕ РезультатыЗапросов[1].Пустой() Тогда
		НаборЗаписей	= РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
		Выборка			= РезультатыЗапросов[1].Выбрать();

		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
			НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
			НаборЗаписей.Записать(); // Удаление лишних записей о связях.

			Если УчастникиИзменений <> Неопределено Тогда
				УчастникиИзменений.Вставить(Выборка.Пользователь);
			КонецЕсли;

			Если ИзмененныеГруппы <> Неопределено
			   И ТипЗнч(Выборка.ГруппаПользователей) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда

				ИзмененныеГруппы.Вставить(Выборка.ГруппаПользователей);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если НЕ РезультатыЗапросов[2].Пустой() Тогда
		НаборЗаписей	= РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
		Запись			= НаборЗаписей.Добавить();
		Выборка			= РезультатыЗапросов[2].Выбрать();

		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
			НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			НаборЗаписей.Записать(); // Добавление недостающих записей о связях.

			Если УчастникиИзменений <> Неопределено Тогда
				УчастникиИзменений.Вставить(Выборка.Пользователь);
			КонецЕсли;

			Если ИзмененныеГруппы <> Неопределено
			   И ТипЗнч(Выборка.ГруппаПользователей) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда

				ИзмененныеГруппы.Вставить(Выборка.ГруппаПользователей);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура сП_ОбновитьСоставыИерархическихГруппПользователей(ГруппаПользователей, Пользователь, УчастникиИзменений = Неопределено, ИзмененныеГруппы = Неопределено)
	ОбновитьГруппыВнешнихПользователей = ТипЗнч(ГруппаПользователей) <> Тип("СправочникСсылка.ГруппыПользователей");

	// Подготовка групп пользователей в иерархии их родителей.
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	|	СсылкиВИерархииРодителей.Родитель,
	|	СсылкиВИерархииРодителей.Ссылка
	|ПОМЕСТИТЬ СсылкиВИерархииРодителей
	|ИЗ
	|	&СсылкиВИерархииРодителей КАК СсылкиВИерархииРодителей";

	Запрос.УстановитьПараметр("СсылкиВИерархииРодителей", сП_СсылкиВИерархииРодителей(?(ОбновитьГруппыВнешнихПользователей, "Справочник.ГруппыВнешнихПользователей", "Справочник.ГруппыПользователей") ));

	// Подготовка запроса для цикла.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СоставыГруппПользователей.Пользователь,
	|	СоставыГруппПользователей.Используется
	|ПОМЕСТИТЬ СоставыГруппПользователей
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	&ОтборПользователяВРегистре
	|	И СоставыГруппПользователей.ГруппаПользователей = &ГруппаПользователей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СоставыГруппПользователей.Пользователь,
	|	СоставыГруппПользователей.Используется
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыПользователейСостав.Пользователь КАК Пользователь,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ГруппыПользователейСостав.Ссылка.ПометкаУдаления
	|				ТОГДА ЛОЖЬ
	|			КОГДА ГруппыПользователейСостав.Пользователь.ПометкаУдаления
	|				ТОГДА ЛОЖЬ
	|			КОГДА ГруппыПользователейСостав.Пользователь.Недействителен
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК Используется
	|ПОМЕСТИТЬ НовыеСоставыГруппПользователей
	|ИЗ
	|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СсылкиВИерархииРодителей КАК СсылкиВИерархииРодителей
	|		ПО (СсылкиВИерархииРодителей.Ссылка = ГруппыПользователейСостав.Ссылка)
	|			И (СсылкиВИерархииРодителей.Родитель = &ГруппаПользователей)
	|			И (&ОтборПользователяВСправочнике)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГруппыПользователейСостав.Пользователь
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоставыГруппПользователей.Пользователь
	|ИЗ
	|	СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеСоставыГруппПользователей КАК НовыеСоставыГруппПользователей
	|		ПО СоставыГруппПользователей.Пользователь = НовыеСоставыГруппПользователей.Пользователь
	|ГДЕ
	|	НовыеСоставыГруппПользователей.Пользователь ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ГруппаПользователей КАК ГруппаПользователей,
	|	НовыеСоставыГруппПользователей.Пользователь,
	|	НовыеСоставыГруппПользователей.Используется
	|ИЗ
	|	НовыеСоставыГруппПользователей КАК НовыеСоставыГруппПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ПО (СоставыГруппПользователей.Пользователь = НовыеСоставыГруппПользователей.Пользователь)
	|			И (СоставыГруппПользователей.Используется = НовыеСоставыГруппПользователей.Используется)
	|ГДЕ
	|	СоставыГруппПользователей.Пользователь ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыПользователей.Родитель КАК Родитель
	|ИЗ
	|	Справочник.ГруппыПользователей КАК ГруппыПользователей
	|ГДЕ
	|	ГруппыПользователей.Ссылка = &ГруппаПользователей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СоставыГруппПользователей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НовыеСоставыГруппПользователей";

	Если Пользователь = Неопределено Тогда
		ОтборПользователяВРегистре    = "ИСТИНА";
		ОтборПользователяВСправочнике = "ИСТИНА";
	Иначе
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		ОтборПользователяВРегистре    = "СоставыГруппПользователей.Пользователь В (&Пользователь)";
		ОтборПользователяВСправочнике = "ГруппыПользователейСостав.Пользователь В (&Пользователь)";
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПользователяВРегистре",    ОтборПользователяВРегистре);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПользователяВСправочнике", ОтборПользователяВСправочнике);

	Блокировка			= Новый БлокировкаДанных;
	ЭлементБлокировки	= Блокировка.Добавить("РегистрСведений.СоставыГруппПользователей");
	ЭлементБлокировки.УстановитьЗначение("ГруппаПользователей", ГруппаПользователей);

	Если ОбновитьГруппыВнешнихПользователей Тогда
		ТекстЗапроса		= СтрЗаменить(ТекстЗапроса, "Справочник.ГруппыПользователей", "Справочник.ГруппыВнешнихПользователей");
		ТекстЗапроса		= СтрЗаменить(ТекстЗапроса, "ГруппыПользователейСостав.Пользователь", "ГруппыПользователейСостав.ВнешнийПользователь");
		ЭлементБлокировки	= Блокировка.Добавить("Справочник.ГруппыВнешнихПользователей");
	Иначе
		ЭлементБлокировки	= Блокировка.Добавить("Справочник.ГруппыПользователей");
	КонецЕсли;
	ЭлементБлокировки.Режим			= РежимБлокировкиДанных.Разделяемый;
	Запрос.МенеджерВременныхТаблиц	= Новый МенеджерВременныхТаблиц;

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Запрос.Выполнить();
		Запрос.Текст = ТекстЗапроса;

		// Выполнение для текущий группы пользователей и каждой группы-родителя.
		Пока ЗначениеЗаполнено(ГруппаПользователей) Цикл
			Запрос.УстановитьПараметр("ГруппаПользователей", ГруппаПользователей);

			РезультатыЗапроса = Запрос.ВыполнитьПакет();

			Если НЕ РезультатыЗапроса[2].Пустой() Тогда
				НаборЗаписей	= РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
				Выборка			= РезультатыЗапроса[2].Выбрать();

				Пока Выборка.Следующий() Цикл
					НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
					НаборЗаписей.Отбор.ГруппаПользователей.Установить(ГруппаПользователей);
					НаборЗаписей.Записать(); // Удаление лишних записей о связях.

					Если УчастникиИзменений <> Неопределено Тогда
						УчастникиИзменений.Вставить(Выборка.Пользователь);
					КонецЕсли;

					Если ИзмененныеГруппы <> Неопределено Тогда
						ИзмененныеГруппы.Вставить(ГруппаПользователей);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Если НЕ РезультатыЗапроса[3].Пустой() Тогда
				НаборЗаписей = РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
				Запись	= НаборЗаписей.Добавить();
				Выборка	= РезультатыЗапроса[3].Выбрать();

				Пока Выборка.Следующий() Цикл
					НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
					НаборЗаписей.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
					ЗаполнитьЗначенияСвойств(Запись, Выборка);
					НаборЗаписей.Записать(); // Добавление недостающих записей о связях.

					Если УчастникиИзменений <> Неопределено Тогда
						УчастникиИзменений.Вставить(Выборка.Пользователь);
					КонецЕсли;

					Если ИзмененныеГруппы <> Неопределено Тогда
						ИзмененныеГруппы.Вставить(Выборка.ГруппаПользователей);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Если НЕ РезультатыЗапроса[4].Пустой() Тогда
				Выборка				= РезультатыЗапроса[4].Выбрать();
				Выборка.Следующий();
				ГруппаПользователей	= Выборка.Родитель;
			Иначе
				ГруппаПользователей	= Неопределено;
			КонецЕсли;
		КонецЦикла;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Процедура сП_ПослеОбновленияСоставовГруппВнешнихПользователей(УчастникиИзменений, ИзмененныеГруппы) Экспорт
	Если УчастникиИзменений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	УчастникиИзмененийМассив = Новый Массив;
	Для каждого КлючИЗначение Из УчастникиИзменений Цикл
		УчастникиИзмененийМассив.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;

	сП_ОбновитьРолиВнешнихПользователей(УчастникиИзмененийМассив);

	ИзмененныеГруппыМассив = Новый Массив;
	Для каждого КлючИЗначение Из ИзмененныеГруппы Цикл
		ИзмененныеГруппыМассив.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;

	ИнтеграцияПодсистемСервер.ПослеОбновленияСоставовГруппПользователей(УчастникиИзмененийМассив, ИзмененныеГруппыМассив);
КонецПроцедуры

Процедура сП_ОбновитьИспользуемостьСоставовГруппПользователей(Знач ПользовательИлиГруппа, Знач УчастникиИзменений, Знач ИзмененныеГруппы) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	|	СоставыГруппПользователей.ГруппаПользователей,
	|	СоставыГруппПользователей.Пользователь,
	|	ВЫБОР
	|		КОГДА СоставыГруппПользователей.ГруппаПользователей.ПометкаУдаления
	|			ТОГДА ЛОЖЬ
	|		КОГДА СоставыГруппПользователей.Пользователь.ПометкаУдаления
	|			ТОГДА ЛОЖЬ
	|		КОГДА СоставыГруппПользователей.Пользователь.Недействителен
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Используется
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	&Отбор
	|	И ВЫБОР
	|			КОГДА СоставыГруппПользователей.ГруппаПользователей.ПометкаУдаления
	|				ТОГДА ЛОЖЬ
	|			КОГДА СоставыГруппПользователей.Пользователь.ПометкаУдаления
	|				ТОГДА ЛОЖЬ
	|			КОГДА СоставыГруппПользователей.Пользователь.Недействителен
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ <> СоставыГруппПользователей.Используется";

	Блокировка			= Новый БлокировкаДанных;
	ЭлементБлокировки	= Блокировка.Добавить("РегистрСведений.СоставыГруппПользователей");

	Если ТипЗнч(ПользовательИлиГруппа) = Тип("СправочникСсылка.Пользователи")
	 ИЛИ ТипЗнч(ПользовательИлиГруппа) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда

		ЭлементБлокировки.УстановитьЗначение("Пользователь", ПользовательИлиГруппа);
		Запрос.Текст	= СтрЗаменить(Запрос.Текст, "&Отбор", "СоставыГруппПользователей.Пользователь = &ПользовательИлиГруппа");
	Иначе
		ЭлементБлокировки.УстановитьЗначение("ГруппаПользователей", ПользовательИлиГруппа);
		Запрос.Текст	= СтрЗаменить(Запрос.Текст, "&Отбор", "СоставыГруппПользователей.ГруппаПользователей = &ПользовательИлиГруппа");
	КонецЕсли;

	НаборЗаписи	= РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
	Запись		= НаборЗаписи.Добавить();

	Запрос.УстановитьПараметр("ПользовательИлиГруппа", ПользовательИлиГруппа);

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписи.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
			НаборЗаписи.Отбор.Пользователь.Установить(Выборка.Пользователь);

			Запись.ГруппаПользователей = Выборка.ГруппаПользователей;
			Запись.Пользователь        = Выборка.Пользователь;
			Запись.Используется        = Выборка.Используется;

			НаборЗаписи.Записать();

			ИзмененныеГруппы.Вставить(Выборка.ГруппаПользователей);
			УчастникиИзменений.Вставить(Выборка.Пользователь);
		КонецЦикла;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Процедура сП_ОбновитьСоставыГруппПользователей(Знач ГруппаПользователей, Знач Пользователь = Неопределено, Знач УчастникиИзменений = Неопределено, Знач ИзмененныеГруппы = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(ГруппаПользователей) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Пользователь) = Тип("Массив") И Пользователь.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если УчастникиИзменений = Неопределено Тогда
		ТекущиеУчастникиИзменений = Новый Соответствие;
	Иначе
		ТекущиеУчастникиИзменений = УчастникиИзменений;
	КонецЕсли;

	Если ИзмененныеГруппы = Неопределено Тогда
		ТекущиеИзмененныеГруппы = Новый Соответствие;
	Иначе
		ТекущиеИзмененныеГруппы = ИзмененныеГруппы;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	НачатьТранзакцию();
	Попытка
		Если ГруппаПользователей = Справочники.ГруппыПользователей.ВсеПользователи Тогда
			сП_ОбновитьСоставГруппыВсеПользователи(Пользователь, , ТекущиеУчастникиИзменений, ТекущиеИзмененныеГруппы);
		Иначе
			сП_ОбновитьСоставыИерархическихГруппПользователей(ГруппаПользователей, Пользователь, ТекущиеУчастникиИзменений, ТекущиеИзмененныеГруппы);
		КонецЕсли;

		Если УчастникиИзменений = Неопределено И ИзмененныеГруппы   = Неопределено Тогда
			сП_ПослеОбновленияСоставовГруппПользователей(ТекущиеУчастникиИзменений, ТекущиеИзмененныеГруппы);
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Процедура сП_ПослеОбновленияСоставовГруппПользователей(УчастникиИзменений, ИзмененныеГруппы) Экспорт
	Если УчастникиИзменений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	УчастникиИзмененийМассив = Новый Массив;

	Для каждого КлючИЗначение Из УчастникиИзменений Цикл
		УчастникиИзмененийМассив.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;

	ИзмененныеГруппыМассив = Новый Массив;
	Для каждого КлючИЗначение Из ИзмененныеГруппы Цикл
		ИзмененныеГруппыМассив.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;

	ИнтеграцияПодсистемСервер.ПослеОбновленияСоставовГруппПользователей(УчастникиИзмененийМассив, ИзмененныеГруппыМассив);
КонецПроцедуры

Процедура сП_ВключитьЗаданиеКонтрольАктивностиПользователейПриНеобходимости(Пользователь) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Если Не ПользователиСерверПовтИсп.сП_Настройки().ОбщиеНастройкиВхода Тогда
		Возврат;
	КонецЕсли;

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|ГДЕ
	|	СведенияОПользователях.Пользователь В(&Пользователь)
	|	И СведенияОПользователях.СрокДействия <> &ПустаяДата
	|	И СведенияОПользователях.ДатаАвтоматическогоЗапрещенияВхода = &ПустаяДата";

	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');

	Если Не Запрос.Выполнить().Пустой() Тогда
		РегламентныеЗаданияСервер.РЗ_УстановитьИспользованиеПредопределенногоРегламентногоЗадания(Метаданные.РегламентныеЗадания.КонтрольАктивностиПользователей, Истина);
	КонецЕсли;
КонецПроцедуры

Функция сП_СсылкиВИерархииРодителей(Таблица)
	СсылкиРодителей				= сП_СсылкиРодителей(Таблица);
	СсылкиВИерархииРодителей	= СсылкиРодителей.Скопировать(Новый Массив);

	Для каждого ОписаниеСсылки Из СсылкиРодителей Цикл
		НоваяСтрока				= СсылкиВИерархииРодителей.Добавить();
		НоваяСтрока.Родитель	= ОписаниеСсылки.Ссылка;
		НоваяСтрока.Ссылка		= ОписаниеСсылки.Ссылка;

		сП_ЗаполнитьСсылкиВИерархииРодителя(ОписаниеСсылки.Ссылка, ОписаниеСсылки.Ссылка, СсылкиРодителей, СсылкиВИерархииРодителей);
	КонецЦикла;

	Возврат СсылкиВИерархииРодителей;
КонецФункции

Функция сП_СсылкиРодителей(Таблица)
	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
	|	СсылкиРодителей.Ссылка КАК Ссылка,
	|	СсылкиРодителей.Родитель КАК Родитель
	|ИЗ
	|	&Таблица КАК СсылкиРодителей";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", Таблица);

	СсылкиРодителей = Запрос.Выполнить().Выгрузить();
	СсылкиРодителей.Индексы.Добавить("Родитель");

	Возврат СсылкиРодителей;
КонецФункции

Процедура сП_ЗаполнитьСсылкиВИерархииРодителя(Знач Родитель, Знач ТекущийРодитель, Знач СсылкиРодителей, Знач СсылкиВИерархииРодителей)
	СсылкиРодителя = СсылкиРодителей.НайтиСтроки(Новый Структура("Родитель", ТекущийРодитель));

	Для каждого ОписаниеСсылки Из СсылкиРодителя Цикл
		НоваяСтрока				= СсылкиВИерархииРодителей.Добавить();
		НоваяСтрока.Родитель	= Родитель;
		НоваяСтрока.Ссылка		= ОписаниеСсылки.Ссылка;

		сП_ЗаполнитьСсылкиВИерархииРодителя(Родитель, ОписаниеСсылки.Ссылка, СсылкиРодителей, СсылкиВИерархииРодителей);
	КонецЦикла;
КонецПроцедуры

Функция сП_ПеремещениеПользователяВНовуюГруппу(МассивПользователей, ГруппаИсточник, ГруппаПриемник, Перемещение) Экспорт
	Если ГруппаПриемник = Неопределено Или ГруппаПриемник = ГруппаИсточник Тогда
		Возврат Неопределено;
	КонецЕсли;
	МассивПеремещенныхПользователей		= Новый Массив;
	МассивНеПеремещенныхПользователей	= Новый Массив;

	Для Каждого ПользовательСсылка Из МассивПользователей Цикл
		Если ТипЗнч(ПользовательСсылка) <> Тип("СправочникСсылка.Пользователи") И ТипЗнч(ПользовательСсылка) <> Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			Продолжить;
		КонецЕсли;

		Если Не сП_ВозможноПеремещениеПользователя(ГруппаПриемник, ПользовательСсылка) Тогда
			МассивНеПеремещенныхПользователей.Добавить(ПользовательСсылка);

			Продолжить;
		КонецЕсли;

		Если ТипЗнч(ПользовательСсылка) = Тип("СправочникСсылка.Пользователи") Тогда
			ИмяКолонкиСостава = "Пользователь";
		Иначе
			ИмяКолонкиСостава = "ВнешнийПользователь";
		КонецЕсли;

		// Если переносимый пользователь не входит в новую группу, то переносим.
		Если ГруппаПриемник = Справочники.ГруппыПользователей.ВсеПользователи Или ГруппаПриемник = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
			Если Перемещение Тогда
				сП_УдалитьПользователяИзГруппы(ГруппаИсточник, ПользовательСсылка, ИмяКолонкиСостава);
			КонецЕсли;
			МассивПеремещенныхПользователей.Добавить(ПользовательСсылка);
		ИначеЕсли ГруппаПриемник.Состав.Найти(ПользовательСсылка, ИмяКолонкиСостава) = Неопределено Тогда
			сП_ДобавитьПользователяВГруппу(ГруппаПриемник, ПользовательСсылка, ИмяКолонкиСостава);

			// Удаление пользователя из старой группы.
			Если Перемещение Тогда
				сП_УдалитьПользователяИзГруппы(ГруппаИсточник, ПользовательСсылка, ИмяКолонкиСостава);
			КонецЕсли;

			МассивПеремещенныхПользователей.Добавить(ПользовательСсылка);
		КонецЕсли;
	КонецЦикла;

	СообщениеПользователю = сП_ФормированиеСообщенияПользователю(МассивПеремещенныхПользователей, ГруппаПриемник, Перемещение, МассивНеПеремещенныхПользователей, ГруппаИсточник);

	Если МассивПеремещенныхПользователей.Количество() = 0 И МассивНеПеремещенныхПользователей.Количество() = 0 Тогда
		Если МассивПользователей.Количество() = 1 Тогда
			ТекстСообщения					= "Пользователь ""%1"" уже включен в группу ""%2"".";
			ИмяПеремещаемогоПользователя	= Строка(МассивПользователей[0]);
		Иначе
			ТекстСообщения					= "Все выбранные пользователи уже включены в группу ""%2"".";
			ИмяПеремещаемогоПользователя	= "";
		КонецЕсли;
		НаименованиеГруппы					= Строка(ГруппаПриемник);
		СообщениеПользователю.Сообщение		= СтрШаблон(ТекстСообщения, ИмяПеремещаемогоПользователя, НаименованиеГруппы);
		СообщениеПользователю.ЕстьОшибки	= Истина;

		Возврат СообщениеПользователю;
	КонецЕсли;

	Возврат СообщениеПользователю;
КонецФункции

Функция сП_ВозможноПеремещениеПользователя(ГруппаПриемник, ПользовательСсылка) Экспорт
	Если ТипЗнч(ПользовательСсылка) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		СвойстваГруппыПриемника = БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта(ГруппаПриемник, "Назначение, ВсеОбъектыАвторизации");

		Если СвойстваГруппыПриемника.ВсеОбъектыАвторизации Тогда
			Возврат Ложь;
		КонецЕсли;

		НазначениеГруппыПриемника = СвойстваГруппыПриемника.Назначение.Выгрузить();

		ТипВнешнегоПользователя	= ТипЗнч(БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(ПользовательСсылка, "ОбъектАвторизации"));
		ОписаниеТипаСсылки		= Новый ОписаниеТипов(БазоваяПодсистемаКлиентСервер.ОН_ЗначениеВМассиве(ТипВнешнегоПользователя));
		Значение				= ОписаниеТипаСсылки.ПривестиЗначение(Неопределено);

		Отбор = Новый Структура("ТипПользователей", Значение);
		Если НазначениеГруппыПриемника.НайтиСтроки(Отбор).Количество() <> 1 Тогда
			Возврат Ложь;
		КонецЕсли;

	КонецЕсли;

	Возврат Истина;
КонецФункции

Процедура сП_ДобавитьПользователяВГруппу(ГруппаПриемник, ПользовательСсылка, ТипПользователя) Экспорт
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		Если ТипПользователя = "ВнешнийПользователь" Тогда
			ИмяТаблицы = "Справочник.ГруппыВнешнихПользователей";
		Иначе
			ИмяТаблицы = "Справочник.ГруппыПользователей";
		КонецЕсли;
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицы);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ГруппаПриемник);
		Блокировка.Заблокировать();

		ГруппаПриемникОбъект	= ГруппаПриемник.ПолучитьОбъект();
		СтрокаСостава			= ГруппаПриемникОбъект.Состав.Добавить();
		Если ТипПользователя = "ВнешнийПользователь" Тогда
			СтрокаСостава.ВнешнийПользователь = ПользовательСсылка;
		Иначе
			СтрокаСостава.Пользователь = ПользовательСсылка;
		КонецЕсли;

		ГруппаПриемникОбъект.Записать();

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Процедура сП_УдалитьПользователяИзГруппы(ГруппаВладелец, ПользовательСсылка, ТипПользователя) Экспорт
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		Если ТипПользователя = "ВнешнийПользователь" Тогда
			ИмяТаблицы = "Справочник.ГруппыВнешнихПользователей";
		Иначе
			ИмяТаблицы = "Справочник.ГруппыПользователей";
		КонецЕсли;
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицы);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ГруппаВладелец);
		Блокировка.Заблокировать();

		ГруппаВладелецОбъект = ГруппаВладелец.ПолучитьОбъект();
		Если ГруппаВладелецОбъект.Состав.Количество() <> 0 Тогда
			ГруппаВладелецОбъект.Состав.Удалить(ГруппаВладелецОбъект.Состав.Найти(ПользовательСсылка, ТипПользователя));
			ГруппаВладелецОбъект.Записать();
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Функция сП_ФормированиеСообщенияПользователю(МассивПользователей, ГруппаПриемник, Перемещение, МассивНеПеремещенныхПользователей, ГруппаИсточник = Неопределено) Экспорт
	КоличествоПользователей					= МассивПользователей.Количество();
	НаименованиеГруппы						= Строка(ГруппаПриемник);
	СообщениеПользователю					= Неопределено;
	КоличествоНеПеремещенныхПользователей	= МассивНеПеремещенныхПользователей.Количество();

	УведомлениеПользователя = Новый Структура;
	УведомлениеПользователя.Вставить("Сообщение");
	УведомлениеПользователя.Вставить("ЕстьОшибки");
	УведомлениеПользователя.Вставить("Пользователи");

	Если КоличествоНеПеремещенныхПользователей > 0 Тогда
		СвойстваГруппыПриемника = БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта(ГруппаПриемник, "Назначение, Наименование");

		НаименованиеГруппы						= СвойстваГруппыПриемника.Наименование;
		НазначениеГруппыВнешнихПользователей	= СвойстваГруппыПриемника.Назначение.Выгрузить();

		МассивПредставлений = Новый Массив;
		Для Каждого СтрокаНазначения Из НазначениеГруппыВнешнихПользователей Цикл
			МассивПредставлений.Добавить(НРег(Метаданные.НайтиПоТипу(ТипЗнч(СтрокаНазначения.ТипПользователей)).Синоним));
		КонецЦикла;

		ПредставлениеТипаОбъектаАвторизации = СтрСоединить(МассивПредставлений, ", ");

		Если КоличествоНеПеремещенныхПользователей = 1 Тогда
			СвойстваНеПеремещенногоПользователя = БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта(МассивНеПеремещенныхПользователей[0], "Наименование, ОбъектАвторизации");

			Предмет = СвойстваНеПеремещенногоПользователя.Наименование;

			ТипВнешнегоПользователя	= ТипЗнч(СвойстваНеПеремещенногоПользователя.ОбъектАвторизации);
			ОписаниеТипаСсылки		= Новый ОписаниеТипов(БазоваяПодсистемаКлиентСервер.ОН_ЗначениеВМассиве(ТипВнешнегоПользователя));
			Значение				= ОписаниеТипаСсылки.ПривестиЗначение(Неопределено);

			Отбор								= Новый Структура("ТипПользователей", Значение);
			ТипПользователяСовпадаетСГруппой	= (НазначениеГруппыВнешнихПользователей.НайтиСтроки(Отбор).Количество() = 1);

			УведомлениеПользователя.Пользователи	= Неопределено;

			Если ТипПользователяСовпадаетСГруппой Тогда
				СообщениеПользователю = СтрШаблон("Пользователь ""%1"" не может быть включен в группу ""%2"",
					           |т.к. у группы стоит признак ""Все пользователи заданного типа"".",
					Предмет, НаименованиеГруппы) + Символы.ПС;
			Иначе
				СообщениеПользователю = СтрШаблон("Пользователь ""%1"" не может быть включен в группу ""%2"",
					           |т.к. в состав ее участников входят только %3.",
					Предмет, НаименованиеГруппы, ПредставлениеТипаОбъектаАвторизации) + Символы.ПС;
			КонецЕсли;
		Иначе
			УведомлениеПользователя.Пользователи = СтрСоединить(МассивНеПеремещенныхПользователей, Символы.ПС);

			СообщениеПользователю = СтрШаблон("Не все пользователи могут быть включены в группу ""%1"",
				           |т.к. в состав ее участников входят только %2
				           |или у группы стоит признак ""Все пользователи заданного типа"".",
				НаименованиеГруппы,
				ПредставлениеТипаОбъектаАвторизации);
		КонецЕсли;

		УведомлениеПользователя.Сообщение	= СообщениеПользователю;
		УведомлениеПользователя.ЕстьОшибки	= Истина;

		Возврат УведомлениеПользователя;
	КонецЕсли;

	Если КоличествоПользователей = 1 Тогда
		СтрокаОбъект = Строка(МассивПользователей[0]);

		Если ГруппаПриемник = Справочники.ГруппыПользователей.ВсеПользователи
		 Или ГруппаПриемник = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда

			СообщениеПользователю	= """%1"" исключен из группы ""%2""";
			НаименованиеГруппы		= Строка(ГруппаИсточник);
		ИначеЕсли Перемещение Тогда
			СообщениеПользователю = """%1"" перемещен в группу ""%2""";
		Иначе
			СообщениеПользователю = """%1"" включен в группу ""%2""";
		КонецЕсли;
	ИначеЕсли КоличествоПользователей > 1 Тогда
		СтрокаОбъект = СтрокаСЧислом(";%1 пользователь;;%1 пользователя;%1 пользователей;%1 пользователя", КоличествоПользователей, ВидЧисловогоЗначения.Количественное, "L=ru");

		Если ГруппаПриемник = Справочники.ГруппыПользователей.ВсеПользователи Тогда
			СообщениеПользователю	= "%1 исключены из группы ""%2""";
			НаименованиеГруппы		= Строка(ГруппаИсточник);
		ИначеЕсли Перемещение Тогда
			СообщениеПользователю = "%1 перемещены в группу ""%2""";
		Иначе
			СообщениеПользователю = "%1 включены в группу ""%2""";
		КонецЕсли;
	КонецЕсли;

	Если СообщениеПользователю <> Неопределено Тогда
		СообщениеПользователю = СтрШаблон(СообщениеПользователю, СтрокаОбъект, НаименованиеГруппы);
	КонецЕсли;

	УведомлениеПользователя.Сообщение	= СообщениеПользователю;
	УведомлениеПользователя.ЕстьОшибки	= Ложь;

	Возврат УведомлениеПользователя;
КонецФункции

Функция сП_ПодсказкаПотребоватьСменуПароляПриВходе(ДляВнешнихПользователей) Экспорт
	ЭтоПолноправныйПользователь = П_ЭтоПолноправныйПользователь(, Ложь);

	Если Не ЭтоПолноправныйПользователь Тогда
		Подсказка = "Требования к длине и сложности пароля задаются отдельно.
			|За подробностями обратитесь к администратору.";
		Возврат Новый ФорматированнаяСтрока(Подсказка);
	КонецЕсли;

	Если Не ПользователиСерверПовтИсп.сП_Настройки().ОбщиеНастройкиВхода Тогда
		Подсказка = "Требования к длине и сложности пароля задаются отдельно.
			|См. Параметры информационной базы в конфигураторе в меню Администрирование.";
		Возврат Новый ФорматированнаяСтрока(Подсказка);
	КонецЕсли;

	ЕстьРазделАдминистрирование = Метаданные.Подсистемы.Найти("Администрирование") <> Неопределено;

	Если ДляВнешнихПользователей Тогда
		Если ЕстьРазделАдминистрирование Тогда
			Подсказка = "Требования к длине и сложности пароля задаются отдельно.
				|См. <a href = ""НастройкиВходаПользователей"">Настройки входа внешних пользователей</a> в разделе Администрирование,
				|пункт Настройки пользователей и прав.";
		Иначе
			Подсказка = "Требования к длине и сложности пароля задаются отдельно.
				|См. <a href = ""НастройкиВходаПользователей"">Настройки входа внешних пользователей</a>.";
		КонецЕсли;
	Иначе
		Если ЕстьРазделАдминистрирование Тогда
			Подсказка = "Требования к длине и сложности пароля задаются отдельно.
				|См. <a href = ""НастройкиВходаПользователей"">Настройки входа пользователей</a> в разделе Администрирование,
				|пункт Настройки пользователей и прав.";
		Иначе
			Подсказка = "Требования к длине и сложности пароля задаются отдельно.
				|См. <a href = ""НастройкиВходаПользователей"">Настройки входа пользователей</a>.";
		КонецЕсли;
	КонецЕсли;

	Возврат БазоваяПодсистемаСервер.СФ_ФорматированнаяСтрока(Подсказка);
КонецФункции

Процедура сП_ПрочитатьСведенияОПользователе(Форма) Экспорт
	Пользователь = Форма.Объект.Ссылка;

	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат;
	КонецЕсли;

	УровеньДоступа = сП_УровеньДоступаКСвойствамПользователя(Форма.Объект);

	НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Прочитать();

	Форма.ПотребоватьСменуПароляПриВходе             = Ложь;
	Форма.СрокДействияНеОграничен                    = Ложь;
	Форма.СрокДействия                               = Неопределено;
	Форма.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода = 0;

	Если НаборЗаписей.Количество() > 0 Тогда
		Если УровеньДоступа.УправлениеСписком Или УровеньДоступа.ИзменениеТекущего Тогда
			ЗаполнитьЗначенияСвойств(Форма, НаборЗаписей[0],
				"ПотребоватьСменуПароляПриВходе,
				|СрокДействияНеОграничен,
				|СрокДействия,
				|ПросрочкаРаботыВПрограммеДоЗапрещенияВхода");
		Иначе
			Форма.ПотребоватьСменуПароляПриВходе = НаборЗаписей[0].ПотребоватьСменуПароляПриВходе;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура сП_ЗаписатьСведенияОПользователе(Форма, ТекущийОбъект) Экспорт
	УровеньДоступа = сП_УровеньДоступаКСвойствамПользователя(ТекущийОбъект);

	Пользователь = ТекущийОбъект.Ссылка;

	Блокировка			= Новый БлокировкаДанных;
	ЭлементБлокировки	= Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
	ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			СведенияОПользователе				= НаборЗаписей.Добавить();
			СведенияОПользователе.Пользователь	= Пользователь;
		Иначе
			СведенияОПользователе				= НаборЗаписей[0];
		КонецЕсли;

		Если УровеньДоступа.НастройкиДляВхода Тогда
			ЗаполнитьЗначенияСвойств(СведенияОПользователе, Форма,
				"ПотребоватьСменуПароляПриВходе,
				|СрокДействияНеОграничен,
				|СрокДействия,
				|ПросрочкаРаботыВПрограммеДоЗапрещенияВхода");
		Иначе
			СведенияОПользователе.ПотребоватьСменуПароляПриВходе = Форма.ПотребоватьСменуПароляПриВходе;
		КонецЕсли;

		НаборЗаписей.Записать();

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Функция сП_ПроверитьОписаниеПользователяИБ(Знач ОписаниеПользователяИБ, Отказ, ЭтоВнешнийПользователь) Экспорт
	Если ОписаниеПользователяИБ.Свойство("Имя") Тогда
		Имя = ОписаниеПользователяИБ.Имя;

		Если ПустаяСтрока(Имя) Тогда
			// Хранилище настроек использует только первые 64 символа имени пользователя ИБ.
			БазоваяПодсистемаСервер.ОН_СообщитьПользователю("Не заполнено Имя (для входа).",,"Имя",,Отказ);
		ИначеЕсли СтрДлина(Имя) > 64 Тогда
			// Аутентификация через web использует символ ":",
			// как разделитель имени и пароля пользователя.
			БазоваяПодсистемаСервер.ОН_СообщитьПользователю("Имя (для входа) превышает 64 символа.",,"Имя",,Отказ);
		ИначеЕсли СтрНайти(Имя, ":") > 0 Тогда
			БазоваяПодсистемаСервер.ОН_СообщитьПользователю("Имя (для входа) содержит запрещенный символ "":"".",,"Имя",,Отказ);
		Иначе
			УстановитьПривилегированныйРежим(Истина);
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Имя);
			УстановитьПривилегированныйРежим(Ложь);

			Если ПользовательИБ <> Неопределено И ПользовательИБ.УникальныйИдентификатор <> ОписаниеПользователяИБ.ИдентификаторПользователяИБ Тогда
				НайденныйПользователь = Неопределено;
				сП_ПользовательПоИдентификаторуСуществует(ПользовательИБ.УникальныйИдентификатор, , НайденныйПользователь);

				Если НайденныйПользователь = Неопределено ИЛИ НЕ П_ЭтоПолноправныйПользователь() Тогда
					ТекстОшибки = "Имя (для входа) уже занято.";
				Иначе
					ТекстОшибки = СтрШаблон("Имя (для входа) уже занято для пользователя ""%1"".", Строка(НайденныйПользователь));
				КонецЕсли;

				БазоваяПодсистемаСервер.ОН_СообщитьПользователю(ТекстОшибки, , "Имя", , Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Не ОписаниеПользователяИБ.Свойство("Пароль") Или Не ЗначениеЗаполнено(ОписаниеПользователяИБ.Пароль) Тогда
		Если ЭтоВнешнийПользователь Тогда
			НастройкиВхода = ПользователиСерверПовтИсп.сП_Настройки().ВнешниеПользователи;
		Иначе
			НастройкиВхода = ПользователиСерверПовтИсп.сП_Настройки().Пользователи;
		КонецЕсли;
		Если ЗначениеЗаполнено(НастройкиВхода.МинимальнаяДлинаПароля) Тогда
			Если ЗначениеЗаполнено(ОписаниеПользователяИБ.ИдентификаторПользователяИБ) Тогда
				УстановитьПривилегированныйРежим(Истина);
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ОписаниеПользователяИБ.ИдентификаторПользователяИБ);
				УстановитьПривилегированныйРежим(Ложь);
			Иначе
				ПользовательИБ = Неопределено;
			КонецЕсли;

			ПарольЗадан						= ОписаниеПользователяИБ.Свойство("Пароль") И ОписаниеПользователяИБ.Пароль <> Неопределено;

			АутентификацияСтандартнаяСтарая	= ПользовательИБ <> Неопределено И ПользовательИБ.АутентификацияСтандартная;

			Если ОписаниеПользователяИБ.Свойство("АутентификацияСтандартная") Тогда
				АутентификацияСтандартнаяНовая = ОписаниеПользователяИБ.АутентификацияСтандартная;
			Иначе
				АутентификацияСтандартнаяНовая = АутентификацияСтандартнаяСтарая;
			КонецЕсли;
			ПроверитьПустойПароль = Не АутентификацияСтандартнаяСтарая И АутентификацияСтандартнаяНовая И (ПользовательИБ = Неопределено И Не ПарольЗадан Или ПользовательИБ <> Неопределено И Не ПользовательИБ.ПарольУстановлен);

			Если ПарольЗадан Или ПроверитьПустойПароль Тогда
				БазоваяПодсистемаСервер.ОН_СообщитьПользователю("Требуется установить пароль.",, "СменитьПароль",, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ОписаниеПользователяИБ.Свойство("ПользовательОС") Тогда
		Если Не ПустаяСтрока(ОписаниеПользователяИБ.ПользовательОС)
		   И Не БазоваяПодсистемаСервер.СП_ЭтоУчебнаяПлатформа() Тогда

			УстановитьПривилегированныйРежим(Истина);
			Попытка
				ПользовательИБ					= ПользователиИнформационнойБазы.СоздатьПользователя();
				ПользовательИБ.ПользовательОС	= ОписаниеПользователяИБ.ПользовательОС;
			Исключение
				БазоваяПодсистемаСервер.ОН_СообщитьПользователю("Пользователь ОС должен быть в формате
					           |""\\ИмяДомена\ИмяПользователя"".",
					,
					"ПользовательОС",
					,
					Отказ);
			КонецПопытки;
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЕсли;

	Если ОписаниеПользователяИБ.Свойство("АдресЭлектроннойПочты") И ОписаниеПользователяИБ.Свойство("ЗапрещеноВосстанавливатьПароль") Тогда
		Если Не ОписаниеПользователяИБ.ЗапрещеноВосстанавливатьПароль И ПустаяСтрока(ОписаниеПользователяИБ.АдресЭлектроннойПочты) Тогда
			БазоваяПодсистемаСервер.ОН_СообщитьПользователю("Не заполнена электронная почта для восстановления пароля.",, "КонтактнаяИнформация", , Отказ);
		КонецЕсли;
	КонецЕсли;

	Возврат НЕ Отказ;
КонецФункции

Функция сП_ТребуетсяСоздатьПервогоАдминистратора(Знач ОписаниеПользователяИБ, Текст = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();

	Если НЕ ЗначениеЗаполнено(ТекущийПользовательИБ.Имя)
	   И ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда

		Если ТипЗнч(ОписаниеПользователяИБ) = Тип("Структура") Тогда
			// Проверка перед записью обычного пользователя или пользователя ИБ.

			Если ОписаниеПользователяИБ.Свойство("Роли") Тогда
				Роли = ОписаниеПользователяИБ.Роли;
			Иначе
				Роли = Новый Массив;
			КонецЕсли;

			Если ПользователиСерверПовтИсп.сП_Настройки().РедактированиеРолей <> Истина
				ИЛИ Роли.Найти("ПолныеПрава") = Неопределено
				ИЛИ Роли.Найти("АдминистраторСистемы") = Неопределено Тогда

				// Подготовка текста вопроса при записи первого администратора.
				Текст = "В список пользователей программы добавляется первый пользователь, поэтому ему
					           |автоматически будут назначены роли ""Администратор системы"" и ""Полные права"".
					           |Продолжить?";

				Если НЕ (ПользователиСерверПовтИсп.сП_Настройки().РедактированиеРолей <> Истина) Тогда
					Возврат Истина;
				КонецЕсли;

				ИнтеграцияПодсистемСервер.ПриОпределенииТекстаВопросаПередЗаписьюПервогоАдминистратора(Текст);

				Возврат Истина;
			КонецЕсли;
		Иначе
			// Проверка перед записью внешнего пользователя.
			Текст = "Первый пользователь информационной базы должен иметь полные права.
			                   |Внешний пользователь не может быть полноправным.
			                   |Сначала создайте администратора в справочнике Пользователи.";
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Процедура сП_ОбработатьИнтерфейсРолей(Действие, Параметры) Экспорт
	Если Действие = "УстановитьТолькоПросмотрРолей" Тогда
		сП_УстановитьТолькоПросмотрРолей(Параметры);

	ИначеЕсли Действие = "НастроитьИнтерфейсРолейПриЗагрузкеНастроек" Тогда
		сП_НастроитьИнтерфейсРолейПриЗагрузкеНастроек(Параметры);
	ИначеЕсли Действие = "НастроитьИнтерфейсРолейПриСозданииФормы" Тогда
		сП_НастроитьИнтерфейсРолейПриСозданииФормы(Параметры);
	ИначеЕсли Действие = "НастроитьИнтерфейсРолейПриЧтенииНаСервере" Тогда
		сП_НастроитьИнтерфейсРолейПриЧтенииНаСервере(Параметры);
	ИначеЕсли Действие = "ТолькоВыбранныеРоли" Тогда
		сП_ТолькоВыбранныеРоли(Параметры);
	ИначеЕсли Действие = "ГруппировкаПоПодсистемам" Тогда
		сП_ГруппировкаПоПодсистемам(Параметры);
	ИначеЕсли Действие = "ОбновитьДеревоРолей" Тогда
		сП_ОбновитьДеревоРолей(Параметры);
	ИначеЕсли Действие = "ОбновитьСоставРолей" Тогда
		сП_ОбновитьСоставРолей(Параметры);
	ИначеЕсли Действие = "ЗаполнитьРоли" Тогда
		сП_ЗаполнитьРоли(Параметры);
	Иначе
		ВызватьИсключение СтрШаблон("Ошибка в процедуре ПользователиСервер.сп_ОбработатьИнтерфейсРолей()
			           |Неверное значение параметра Действие: ""%1"".",
			Действие);
	КонецЕсли;
КонецПроцедуры

Процедура сП_УстановитьТолькоПросмотрРолей(Параметры)
	Форма = Параметры.Форма;
	Элементы               = Форма.Элементы;
	ТолькоПросмотрРолей    = Параметры.ОсновнойПараметр;

	Если ТолькоПросмотрРолей <> Неопределено Тогда
		Элементы.Роли.ТолькоПросмотр = ТолькоПросмотрРолей;

		НайденныйЭлемент = Элементы.Найти("РолиУстановитьФлажки"); // КнопкаФормы
		Если НайденныйЭлемент <> Неопределено Тогда
			НайденныйЭлемент.Доступность = НЕ ТолькоПросмотрРолей;
		КонецЕсли;

		НайденныйЭлемент = Элементы.Найти("РолиСнятьФлажки"); // КнопкаФормы
		Если НайденныйЭлемент <> Неопределено Тогда
			НайденныйЭлемент.Доступность = НЕ ТолькоПросмотрРолей;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура сП_НастроитьИнтерфейсРолейПриЗагрузкеНастроек(Параметры)
	Настройки = Параметры.ОсновнойПараметр;
	Форма     = Параметры.Форма;
	Элементы  = Форма.Элементы;

	ПоказатьПодсистемыРолей = Форма.ПоказатьПодсистемыРолей;

	Если Настройки["ПоказатьПодсистемыРолей"] = Ложь Тогда
		Форма.ПоказатьПодсистемыРолей					= Ложь;
		Элементы.РолиПоказатьПодсистемыРолей.Пометка	= Ложь;
	Иначе
		Форма.ПоказатьПодсистемыРолей					= Истина;
		Элементы.РолиПоказатьПодсистемыРолей.Пометка	= Истина;
	КонецЕсли;

	Если ПоказатьПодсистемыРолей <> Форма.ПоказатьПодсистемыРолей Тогда
		сП_ОбновитьДеревоРолей(Параметры);
	КонецЕсли;
КонецПроцедуры

Процедура сП_НастроитьИнтерфейсРолейПриСозданииФормы(Параметры)
	Форма = Параметры.Форма;

	// Условное оформление недоступных ролей.
	ЭлементУсловногоОформления				= Форма.УсловноеОформление.Элементы.Добавить();

	ЭлементЦветаОформления					= ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение			= Метаданные.ЭлементыСтиля.ПоясняющийОшибкуТекст.Значение;
	ЭлементЦветаОформления.Использование	= Истина;

	ЭлементОтбораДанных					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("Роли.ЭтоНедоступнаяРоль");
	ЭлементОтбораДанных.ВидСравнения	= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение	= Истина;
	ЭлементОтбораДанных.Использование	= Истина;

	ЭлементОформляемогоПоля					= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле			= Новый ПолеКомпоновкиДанных("Роли");
	ЭлементОформляемогоПоля.Использование	= Истина;

	// Условное оформление несуществующих ролей.
	ЭлементУсловногоОформления				= Форма.УсловноеОформление.Элементы.Добавить();

	ЭлементЦветаОформления					= ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение			= Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение;
	ЭлементЦветаОформления.Использование	= Истина;

	ЭлементОтбораДанных					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("Роли.ЭтоНесуществующаяРоль");
	ЭлементОтбораДанных.ВидСравнения	= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение	= Истина;
	ЭлементОтбораДанных.Использование	= Истина;

	ЭлементОформляемогоПоля					= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле			= Новый ПолеКомпоновкиДанных("Роли");
	ЭлементОформляемогоПоля.Использование	= Истина;

	сП_НастроитьИнтерфейсРолейПриЧтенииНаСервере(Параметры);
КонецПроцедуры

Процедура сП_НастроитьИнтерфейсРолейПриЧтенииНаСервере(Параметры)
	Форма		= Параметры.Форма;
	Элементы	= Форма.Элементы;

	// Установка начальных значений перед загрузкой данных из настроек на сервере
	// для случая, когда данные еще не были записаны и не загружаются.
	Форма.ПоказатьПодсистемыРолей					= Ложь;
	Элементы.РолиПоказатьПодсистемыРолей.Пометка	= Ложь;

	// Для нового элемента показать все роли, для существующего - только выбранные роли.
	Если Элементы.Найти("РолиПоказатьТолькоВыбранныеРоли") <> Неопределено Тогда
		Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка = Параметры.ОсновнойПараметр;
	КонецЕсли;

	сП_ОбновитьДеревоРолей(Параметры);
КонецПроцедуры

Процедура сП_ТолькоВыбранныеРоли(Параметры)
	Форма = Параметры.Форма;

	Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка = НЕ Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;

	сП_ОбновитьДеревоРолей(Параметры);
КонецПроцедуры

Процедура сП_ГруппировкаПоПодсистемам(Параметры)
	Форма = Параметры.Форма;

	Форма.ПоказатьПодсистемыРолей = НЕ Параметры.Форма.ПоказатьПодсистемыРолей;
	Форма.Элементы.РолиПоказатьПодсистемыРолей.Пометка = Параметры.Форма.ПоказатьПодсистемыРолей;

	сП_ОбновитьДеревоРолей(Параметры);
КонецПроцедуры

Процедура сП_ОбновитьДеревоРолей(Параметры)
	Форма           = Параметры.Форма;
	Элементы        = Форма.Элементы;
	Роли            = Форма.Роли;
	НазначениеРолей = Параметры.НазначениеРолей;

	СкрытьРольПолныеПрава = Параметры.Свойство("СкрытьРольПолныеПрава") И Параметры.СкрытьРольПолныеПрава = Истина;

	Если Элементы.Найти("РолиПоказатьТолькоВыбранныеРоли") <> Неопределено Тогда
		Если НЕ Элементы.РолиПоказатьТолькоВыбранныеРоли.Доступность Тогда
			Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка = Истина;
		КонецЕсли;
		ПоказатьТолькоВыбранныеРоли = Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
	Иначе
		ПоказатьТолькоВыбранныеРоли = Истина;
	КонецЕсли;

	ПоказатьПодсистемыРолей = Параметры.Форма.ПоказатьПодсистемыРолей;

	// Запоминание текущей строки.
	ТекущаяПодсистема = "";
	ТекущаяРоль       = "";

	Если Элементы.Роли.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Роли.НайтиПоИдентификатору(Элементы.Роли.ТекущаяСтрока);

		Если ТекущиеДанные = Неопределено Тогда
			Элементы.Роли.ТекущаяСтрока = Неопределено;
		ИначеЕсли ТекущиеДанные.ЭтоРоль Тогда
			ТекущаяРоль       = ТекущиеДанные.Имя;
			ТекущаяПодсистема = ?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, "", ТекущиеДанные.ПолучитьРодителя().Имя);
		Иначе
			ТекущаяРоль       = "";
			ТекущаяПодсистема = ТекущиеДанные.Имя;
		КонецЕсли;
	КонецЕсли;

	ХранилищеДереваРолей = ПользователиСерверПовтИсп.сП_ДеревоРолей(ПоказатьПодсистемыРолей, НазначениеРолей);
	ДеревоРолей = ХранилищеДереваРолей.Получить(); // см. ПользователиСлужебныйПовтИсп.ДеревоРолей

	ДеревоРолей.Колонки.Добавить("ЭтоНедоступнаяРоль",    Новый ОписаниеТипов("Булево"));
	ДеревоРолей.Колонки.Добавить("ЭтоНесуществующаяРоль", Новый ОписаниеТипов("Булево"));
	сП_ДобавитьИменаНесуществующихИНедоступныхРолей(Параметры, ДеревоРолей);

	ДеревоРолей.Колонки.Добавить("Пометка",       Новый ОписаниеТипов("Булево"));
	ДеревоРолей.Колонки.Добавить("НомерКартинки", Новый ОписаниеТипов("Число"));
	сП_ПодготовитьДеревоРолей(ДеревоРолей.Строки, СкрытьРольПолныеПрава, ПоказатьТолькоВыбранныеРоли, Параметры.КоллекцияРолей);

	Параметры.Форма.ЗначениеВРеквизитФормы(ДеревоРолей, "Роли");

	Элементы.Роли.Отображение = ?(ДеревоРолей.Строки.Найти(Ложь, "ЭтоРоль") = Неопределено, ОтображениеТаблицы.Список, ОтображениеТаблицы.Дерево);

	// Восстановление текущей строки.
	Отбор			= Новый Структура("ЭтоРоль, Имя", Ложь, ТекущаяПодсистема);
	НайденныеСтроки	= ДеревоРолей.Строки.НайтиСтроки(Отбор, Истина);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ОписаниеПодсистемы = НайденныеСтроки[0];

		ИндексПодсистемы = ?(ОписаниеПодсистемы.Родитель = Неопределено, ДеревоРолей.Строки, ОписаниеПодсистемы.Родитель.Строки).Индекс(ОписаниеПодсистемы);

		СтрокаПодсистемы = сП_ДанныеФормыКоллекцияЭлементовДерева(Роли, ОписаниеПодсистемы).Получить(ИндексПодсистемы);

		Если ЗначениеЗаполнено(ТекущаяРоль) Тогда
			Отбор			= Новый Структура("ЭтоРоль, Имя", Истина, ТекущаяРоль);
			НайденныеСтроки	= ОписаниеПодсистемы.Строки.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() <> 0 Тогда
				ОписаниеРоли				= НайденныеСтроки[0];
				Элементы.Роли.ТекущаяСтрока	= СтрокаПодсистемы.ПолучитьЭлементы().Получить(ОписаниеПодсистемы.Строки.Индекс(ОписаниеРоли)).ПолучитьИдентификатор();
			Иначе
				Элементы.Роли.ТекущаяСтрока	= СтрокаПодсистемы.ПолучитьИдентификатор();
			КонецЕсли;
		Иначе
			Элементы.Роли.ТекущаяСтрока	= СтрокаПодсистемы.ПолучитьИдентификатор();
		КонецЕсли;
	Иначе
		Отбор			= Новый Структура("ЭтоРоль, Имя", Истина, ТекущаяРоль);
		НайденныеСтроки	= ДеревоРолей.Строки.НайтиСтроки(Отбор, Истина);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			ОписаниеРоли	= НайденныеСтроки[0];

			ИндексРоли		= ?(ОписаниеРоли.Родитель = Неопределено, ДеревоРолей.Строки, ОписаниеРоли.Родитель.Строки).Индекс(ОписаниеРоли);

			СтрокаРоли		= сП_ДанныеФормыКоллекцияЭлементовДерева(Роли, ОписаниеРоли).Получить(ИндексРоли);
			Элементы.Роли.ТекущаяСтрока = СтрокаРоли.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура сП_ОбновитьСоставРолей(Параметры)
	Форма						= Параметры.Форма;

	Роли                        = Форма.Роли;
	ПоказатьТолькоВыбранныеРоли = Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
	НазначениеРолей             = Параметры.НазначениеРолей;

	ВсеРоли         = ПользователиСерверПовтИсп.сП_ВсеРоли().Массив;
	НедоступныеРоли = ПользователиСерверПовтИсп.сП_НедоступныеРоли(НазначениеРолей);

	Если Параметры.ОсновнойПараметр = "ВключитьВсе" Тогда
		ИдентификаторСтроки = Неопределено;
		Добавить            = Истина;
	ИначеЕсли Параметры.ОсновнойПараметр = "ИсключитьВсе" Тогда
		ИдентификаторСтроки = Неопределено;
		Добавить            = Ложь;
	Иначе
		ИдентификаторСтроки = Форма.Элементы.Роли.ТекущаяСтрока;
	КонецЕсли;

	Если ИдентификаторСтроки = Неопределено Тогда
		БылУстановленАдминистративныйДоступ = Параметры.КоллекцияРолей.НайтиСтроки(Новый Структура("Роль", "ПолныеПрава")).Количество() > 0;

		// Обработка всех.
		КоллекцияРолей = Параметры.КоллекцияРолей;
		КоллекцияРолей.Очистить();
		Если Добавить Тогда
			Для Каждого ИмяРоли Из ВсеРоли Цикл
				Если ИмяРоли = "ПолныеПрава"
				 Или ИмяРоли = "АдминистраторСистемы"
				 Или НедоступныеРоли.Получить(ИмяРоли) <> Неопределено
				 Или ВРег(Лев(ИмяРоли, СтрДлина("Удалить"))) = ВРег("Удалить") Тогда

					Продолжить;
				КонецЕсли;
				КоллекцияРолей.Добавить().Роль = ИмяРоли;
			КонецЦикла;
		КонецЕсли;

		Если Параметры.Свойство("ЗапретИзмененияАдминистративногоДоступа") И Параметры.ЗапретИзмененияАдминистративногоДоступа Тогда
			УстановленАдминистративныйДоступ = Параметры.КоллекцияРолей.НайтиСтроки(Новый Структура("Роль", "ПолныеПрава")).Количество() > 0;

			Если УстановленАдминистративныйДоступ И НЕ БылУстановленАдминистративныйДоступ Тогда
				Отбор = Новый Структура("Роль", "ПолныеПрава");
				Параметры.КоллекцияРолей.НайтиСтроки(Отбор).Удалить(0);
			ИначеЕсли БылУстановленАдминистративныйДоступ И НЕ УстановленАдминистративныйДоступ Тогда
				КоллекцияРолей.Добавить().Роль = "ПолныеПрава";
			КонецЕсли;
		КонецЕсли;

		Если ПоказатьТолькоВыбранныеРоли Тогда
			Если КоллекцияРолей.Количество() > 0 Тогда
				сП_ОбновитьДеревоРолей(Параметры);
			Иначе
				Роли.ПолучитьЭлементы().Очистить();
			КонецЕсли;

			Возврат;
		КонецЕсли;
	Иначе
		ТекущиеДанные = Роли.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущиеДанные.ЭтоРоль Тогда
			сП_ДобавитьУдалитьРоль(Параметры, ТекущиеДанные.Имя, ТекущиеДанные.Пометка);
		Иначе
			сП_ДобавитьУдалитьРолиПодсистемы(Параметры, ТекущиеДанные.ПолучитьЭлементы(), ТекущиеДанные.Пометка);
		КонецЕсли;
	КонецЕсли;

	сП_ОбновитьПометкуВыбранныхРолей(Параметры, Роли.ПолучитьЭлементы());
КонецПроцедуры

Процедура сП_ЗаполнитьРоли(Параметры)
	ПрочитанныеРоли = Параметры.ОсновнойПараметр;
	КоллекцияРолей  = Параметры.КоллекцияРолей;

	КоллекцияРолей.Очистить();
	ДобавленныеРоли = Новый Соответствие;

	Если ТипЗнч(ПрочитанныеРоли) = Тип("Массив") Тогда
		Для Каждого Роль Из ПрочитанныеРоли Цикл
			Если ДобавленныеРоли.Получить(Роль) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДобавленныеРоли.Вставить(Роль, Истина);
			КоллекцияРолей.Добавить().Роль = Роль;
		КонецЦикла;
	Иначе
		ИдентификаторыРолей = Новый Массив;
		Для Каждого Строка Из ПрочитанныеРоли Цикл
			Если ТипЗнч(Строка.Роль) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных")
			 Или ТипЗнч(Строка.Роль) = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
				ИдентификаторыРолей.Добавить(Строка.Роль);
			КонецЕсли;
		КонецЦикла;
		ПрочитанныеРоли =  Справочники.ИдентификаторыОбъектовМетаданных.ОбъектыМетаданныхПоИдентификаторам(ИдентификаторыРолей, Ложь);

		Для Каждого ОписаниеРоли Из ПрочитанныеРоли Цикл
			Если ТипЗнч(ОписаниеРоли.Значение) <> Тип("ОбъектМетаданных") Тогда
				Роль							= ОписаниеРоли.Ключ;
				ИмяРоли							= БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(Роль, "Имя");
				ИмяРоли							= ?(ИмяРоли = Неопределено, "(" + Роль.УникальныйИдентификатор() + ")", ИмяРоли);
				ИмяРоли							= ?(Лев(ИмяРоли, 1) = "?", ИмяРоли, "? " + СокрЛ(ИмяРоли));
				КоллекцияРолей.Добавить().Роль	= СокрЛП(ИмяРоли);
			Иначе
				КоллекцияРолей.Добавить().Роль = ОписаниеРоли.Значение.Имя;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	сП_ОбновитьДеревоРолей(Параметры);
КонецПроцедуры

Процедура сП_ДобавитьИменаНесуществующихИНедоступныхРолей(Параметры, ДеревоРолей)
	КоллекцияРолей	= Параметры.КоллекцияРолей;
	ВсеРоли			= ПользователиСерверПовтИсп.сП_ВсеРоли().Соответствие;

	НедоступныеРоли    = Новый СписокЗначений;
	НесуществующиеРоли = Новый СписокЗначений;

	// Добавление несуществующих ролей.
	Для каждого Строка Из КоллекцияРолей Цикл
		Отбор = Новый Структура("ЭтоРоль, Имя", Истина, Строка.Роль);
		Если ДеревоРолей.Строки.НайтиСтроки(Отбор, Истина).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		Синоним = ВсеРоли.Получить(Строка.Роль);
		Если Синоним = Неопределено Тогда
			НесуществующиеРоли.Добавить(Строка.Роль, ?(Лев(Строка.Роль, 1) = "?", Строка.Роль, "? " + Строка.Роль));
		Иначе
			НедоступныеРоли.Добавить(Строка.Роль, Синоним);
		КонецЕсли;
	КонецЦикла;

	НедоступныеРоли.СортироватьПоПредставлению();
	Для Каждого ОписаниеРоли Из НедоступныеРоли Цикл
		Индекс							= НедоступныеРоли.Индекс(ОписаниеРоли);
		СтрокаДерева					= ДеревоРолей.Строки.Вставить(Индекс);
		СтрокаДерева.Имя				= ОписаниеРоли.Значение;
		СтрокаДерева.Синоним			= ОписаниеРоли.Представление;
		СтрокаДерева.ЭтоРоль			= Истина;
		СтрокаДерева.ЭтоНедоступнаяРоль = Истина;
	КонецЦикла;

	НесуществующиеРоли.СортироватьПоПредставлению();
	Для Каждого ОписаниеРоли Из НесуществующиеРоли Цикл
		Индекс								= НесуществующиеРоли.Индекс(ОписаниеРоли);
		СтрокаДерева						= ДеревоРолей.Строки.Вставить(Индекс);
		СтрокаДерева.Имя     				= ОписаниеРоли.Значение;
		СтрокаДерева.Синоним				= ОписаниеРоли.Представление;
		СтрокаДерева.ЭтоРоль				= Истина;
		СтрокаДерева.ЭтоНесуществующаяРоль = Истина;
	КонецЦикла;
КонецПроцедуры

Процедура сП_ПодготовитьДеревоРолей(Знач Коллекция, Знач СкрытьРольПолныеПрава, Знач ПоказатьТолькоВыбранныеРоли, КоллекцияРолей)
	Индекс = Коллекция.Количество()-1;

	Пока Индекс >= 0 Цикл
		Строка = Коллекция[Индекс];

		сП_ПодготовитьДеревоРолей(Строка.Строки, СкрытьРольПолныеПрава, ПоказатьТолькоВыбранныеРоли, КоллекцияРолей);

		Если Строка.ЭтоРоль Тогда
			Если СкрытьРольПолныеПрава И (ВРег(Строка.Имя) = ВРег("ПолныеПрава") ИЛИ ВРег(Строка.Имя) = ВРег("АдминистраторСистемы")) Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.НомерКартинки	= 7;
				Строка.Пометка			= КоллекцияРолей.НайтиСтроки(Новый Структура("Роль", Строка.Имя)).Количество() > 0;

				Если ПоказатьТолькоВыбранныеРоли И НЕ Строка.Пометка Тогда
					Коллекция.Удалить(Индекс);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Строка.Строки.Количество() = 0 Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.НомерКартинки	= 6;
				Строка.Пометка			= Строка.Строки.НайтиСтроки(Новый Структура("Пометка", Ложь)).Количество() = 0;
			КонецЕсли;
		КонецЕсли;

		Индекс = Индекс-1;
	КонецЦикла;
КонецПроцедуры

Функция сП_ДанныеФормыКоллекцияЭлементовДерева(Знач ДанныеФормыДерево, Знач СтрокаДереваЗначений)
	Если СтрокаДереваЗначений.Родитель = Неопределено Тогда
		ДанныеФормыКоллекцияЭлементовДерева = ДанныеФормыДерево.ПолучитьЭлементы();
	Иначе
		ИндексРодителя = ?(СтрокаДереваЗначений.Родитель.Родитель = Неопределено, СтрокаДереваЗначений.Владелец().Строки, СтрокаДереваЗначений.Родитель.Родитель.Строки).Индекс(СтрокаДереваЗначений.Родитель);

		ДанныеФормыКоллекцияЭлементовДерева = сП_ДанныеФормыКоллекцияЭлементовДерева(ДанныеФормыДерево, СтрокаДереваЗначений.Родитель).Получить(ИндексРодителя).ПолучитьЭлементы();
	КонецЕсли;

	Возврат ДанныеФормыКоллекцияЭлементовДерева;
КонецФункции

Процедура сП_ДобавитьУдалитьРоль(Параметры, Знач Роль, Знач Добавить)
	НайденныеРоли = Параметры.КоллекцияРолей.НайтиСтроки(Новый Структура("Роль", Роль));

	Если Добавить Тогда
		Если НайденныеРоли.Количество() = 0 Тогда
			Параметры.КоллекцияРолей.Добавить().Роль = Роль;
		КонецЕсли;
	Иначе
		Если НайденныеРоли.Количество() > 0 Тогда
			Параметры.КоллекцияРолей.Удалить(НайденныеРоли[0]);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура сП_ДобавитьУдалитьРолиПодсистемы(Параметры, Знач Коллекция, Знач Добавить)
	Для каждого Строка Из Коллекция Цикл
		Если Строка.ЭтоРоль Тогда
			сП_ДобавитьУдалитьРоль(Параметры, Строка.Имя, Добавить);
		Иначе
			сП_ДобавитьУдалитьРолиПодсистемы(Параметры, Строка.ПолучитьЭлементы(), Добавить);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура сП_ОбновитьПометкуВыбранныхРолей(Параметры, Знач Коллекция)
	Форма						= Параметры.Форма;

	ПоказатьТолькоВыбранныеРоли	= Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;

	Индекс						= Коллекция.Количество()-1;

	Пока Индекс >= 0 Цикл
		Строка = Коллекция[Индекс];

		Если Строка.ЭтоРоль Тогда
			Отбор = Новый Структура("Роль", Строка.Имя);
			Строка.Пометка = Параметры.КоллекцияРолей.НайтиСтроки(Отбор).Количество() > 0;
			Если ПоказатьТолькоВыбранныеРоли И НЕ Строка.Пометка Тогда
				Коллекция.Удалить(Индекс);
			КонецЕсли;
		Иначе
			сП_ОбновитьПометкуВыбранныхРолей(Параметры, Строка.ПолучитьЭлементы());
			Если Строка.ПолучитьЭлементы().Количество() = 0 Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.Пометка = Истина;
				Для каждого Элемент Из Строка.ПолучитьЭлементы() Цикл
					Если НЕ Элемент.Пометка Тогда
						Строка.Пометка = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		Индекс = Индекс-1;
	КонецЦикла;
КонецПроцедуры

Функция сП_РазличияЗначенийКолонки(ИмяКолонки, Таблица1, Таблица2) Экспорт
	Если ТипЗнч(Таблица1) <> Тип("ТаблицаЗначений") И ТипЗнч(Таблица2) <> Тип("ТаблицаЗначений") Тогда
		Возврат Новый Массив;
	КонецЕсли;

	Если ТипЗнч(Таблица1) <> Тип("ТаблицаЗначений") Тогда
		Возврат Таблица2.ВыгрузитьКолонку(ИмяКолонки);
	КонецЕсли;

	Если ТипЗнч(Таблица2) <> Тип("ТаблицаЗначений") Тогда
		Возврат Таблица1.ВыгрузитьКолонку(ИмяКолонки);
	КонецЕсли;

	Таблица11 = Таблица1.Скопировать(, ИмяКолонки);
	Таблица11.Свернуть(ИмяКолонки);

	Таблица22 = Таблица2.Скопировать(, ИмяКолонки);
	Таблица22.Свернуть(ИмяКолонки);

	Для Каждого Строка Из Таблица22 Цикл
		НоваяСтрока				= Таблица11.Добавить();
		НоваяСтрока[ИмяКолонки]	= Строка[ИмяКолонки];
	КонецЦикла;

	Таблица11.Колонки.Добавить("Признак");
	Таблица11.ЗаполнитьЗначения(1, "Признак");

	Таблица11.Свернуть(ИмяКолонки, "Признак");

	Отбор	= Новый Структура("Признак", 1);
	Таблица	= Таблица11.Скопировать(Таблица11.НайтиСтроки(Отбор));

	Возврат Таблица.ВыгрузитьКолонку(ИмяКолонки);
КонецФункции

Процедура сП_ОбновитьНазначениеПриСозданииНаСервере(Форма, ДобавлятьПользователей = Истина, ТолькоВнешниеПользователи = Ложь) Экспорт
	Назначение = Форма.Объект.Назначение;

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей") Тогда
		Назначение.Очистить();
		НоваяСтрока											= Назначение.Добавить();
		Форма.Элементы.ВыбратьНазначение.Родитель.Видимость	= Ложь;
		НоваяСтрока.ТипПользователей						= Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;

	Если ДобавлятьПользователей И Назначение.Количество() = 0 Тогда
		Если ТолькоВнешниеПользователи Тогда
			ПустыеСсылки = ПользователиСерверПовтИсп.сП_ПустыеСсылкиТиповОбъектовАвторизации();
			Для Каждого ПустаяСсылка Из ПустыеСсылки Цикл
				НоваяСтрока						= Назначение.Добавить();
				НоваяСтрока.ТипПользователей	= ПустаяСсылка;
			КонецЦикла;
		Иначе
			НоваяСтрока						= Назначение.Добавить();
			НоваяСтрока.ТипПользователей	= Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

	Если Назначение.Количество() <> 0 Тогда
		МассивПредставлений = Новый Массив;
		Индекс = Назначение.Количество() - 1;
		Пока Индекс >= 0 Цикл
			ТипПользователей = Назначение.Получить(Индекс).ТипПользователей;
			Если ТипПользователей = Неопределено Тогда
				Назначение.Удалить(Индекс);
			Иначе
				МассивПредставлений.Добавить(ТипПользователей.Метаданные().Синоним);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		Форма.Элементы.ВыбратьНазначение.Заголовок = СтрСоединить(МассивПредставлений, ", ");
	КонецЕсли;
КонецПроцедуры

Функция сП_ПараметрыПароля(НаименьшаяДлина = 7, Сложный = Ложь) Экспорт
	ПараметрыПароля = Новый Структура;
	ПараметрыПароля.Вставить("МинимальнаяДлина",                НаименьшаяДлина);
	ПараметрыПароля.Вставить("МаксимальнаяДлина",               99);
	ПараметрыПароля.Вставить("ГласныеБуквыСтрочные",            "aeiouy");
	ПараметрыПароля.Вставить("ГласныеБуквыЗаглавные",           "AEIOUY");
	ПараметрыПароля.Вставить("СогласныеБуквыСтрочные",          "bcdfghjklmnpqrstvwxz");
	ПараметрыПароля.Вставить("СогласныеБуквыЗаглавные",         "BCDFGHJKLMNPQRSTVWXZ");
	ПараметрыПароля.Вставить("Цифры",                           "0123456789");
	ПараметрыПароля.Вставить("СпецСимволы",                     " _.,!?");
	ПараметрыПароля.Вставить("ПроверятьУсловияСложности",       Сложный);
	ПараметрыПароля.Вставить("ЗаглавныеБуквыПроверятьНаличие",  Истина);
	ПараметрыПароля.Вставить("СтрочныеБуквыПроверятьНаличие",   Истина);
	ПараметрыПароля.Вставить("ЦифрыПроверятьНаличие",           Истина);
	ПараметрыПароля.Вставить("СпецСимволыПроверятьНаличие",     Ложь);

	Возврат ПараметрыПароля;
КонецФункции

Функция сП_СоздатьПароль(ПараметрыПароля, ГСЧ = Неопределено) Экспорт
	НовыйПароль = "";

	СогласныеСтрочные               = ПараметрыПароля.СогласныеБуквыСтрочные;
	СогласныеЗаглавные              = ПараметрыПароля.СогласныеБуквыЗаглавные;
	КоличествоСогласныхСтрочных     = СтрДлина(СогласныеСтрочные);
	КоличествоСогласныхЗаглавных    = СтрДлина(СогласныеЗаглавные);
	ИспользоватьСогласные           = (КоличествоСогласныхСтрочных > 0) ИЛИ (КоличествоСогласныхЗаглавных > 0);

	ГласныеСтрочные                 = ПараметрыПароля.ГласныеБуквыСтрочные;
	ГласныеЗаглавные                = ПараметрыПароля.ГласныеБуквыЗаглавные;
	КоличествоГласныхСтрочных       = СтрДлина(ГласныеСтрочные);
	КоличествоГласныхЗаглавных      = СтрДлина(ГласныеЗаглавные);
	ИспользоватьГласные             = (КоличествоГласныхСтрочных > 0) ИЛИ (КоличествоГласныхЗаглавных > 0);

	Цифры                   = ПараметрыПароля.Цифры;
	КоличествоЦифр          = СтрДлина(Цифры);
	ИспользоватьЦифры       = (КоличествоЦифр > 0);

	СпецСимволы             = ПараметрыПароля.СпецСимволы;
	КоличествоСпецСимволов  = СтрДлина(СпецСимволы);
	ИспользоватьСпецСимволы = (КоличествоСпецСимволов > 0);

	// Создание генератора случайных чисел.
	Если ГСЧ = Неопределено Тогда
		ГСЧ = Новый ГенераторСлучайныхЧисел();
	КонецЕсли;

	Счетчик = 0;

	МаксимальнаяДлина           = ПараметрыПароля.МаксимальнаяДлина;
	МинимальнаяДлина            = ПараметрыПароля.МинимальнаяДлина;

	// Определение позиции спец. символов и цифр.
	Если ПараметрыПароля.ПроверятьУсловияСложности Тогда
		УстановитьСтрочную      = ПараметрыПароля.СтрочныеБуквыПроверятьНаличие;
		УстановитьЗаглавную     = ПараметрыПароля.ЗаглавныеБуквыПроверятьНаличие;
		УстановитьЦифру         = ПараметрыПароля.ЦифрыПроверятьНаличие;
		УстановитьСпецСимвол    = ПараметрыПароля.СпецСимволыПроверятьНаличие;
	Иначе
		УстановитьСтрочную      = (КоличествоГласныхСтрочных > 0) ИЛИ (КоличествоСогласныхСтрочных > 0);
		УстановитьЗаглавную     = (КоличествоГласныхЗаглавных > 0) ИЛИ (КоличествоСогласныхЗаглавных > 0);
		УстановитьЦифру         = ИспользоватьЦифры;
		УстановитьСпецСимвол    = ИспользоватьСпецСимволы;
	КонецЕсли;

	Пока Счетчик < МаксимальнаяДлина Цикл

		// Начало с согласной буквы.
		Если ИспользоватьСогласные Тогда
			Если УстановитьЗаглавную И УстановитьСтрочную Тогда
				СтрокаПоиска	= СогласныеСтрочные + СогласныеЗаглавные;
				ВерхняяГраница	= КоличествоСогласныхСтрочных + КоличествоСогласныхЗаглавных;
			ИначеЕсли УстановитьЗаглавную Тогда
				СтрокаПоиска	= СогласныеЗаглавные;
				ВерхняяГраница	= КоличествоСогласныхЗаглавных;
			Иначе
				СтрокаПоиска	= СогласныеСтрочные;
				ВерхняяГраница	= КоличествоСогласныхСтрочных;
			КонецЕсли;
			Если ПустаяСтрока(СтрокаПоиска) Тогда
				СтрокаПоиска	= СогласныеСтрочные + СогласныеЗаглавные;
				ВерхняяГраница	= КоличествоСогласныхСтрочных + КоличествоСогласныхЗаглавных;
			КонецЕсли;
			Символ = Сред(СтрокаПоиска, ГСЧ.СлучайноеЧисло(1, ВерхняяГраница), 1);
			Если Символ = ВРЕГ(Символ) Тогда
				Если УстановитьЗаглавную Тогда
					УстановитьЗаглавную = (ГСЧ.СлучайноеЧисло(0, 1) = 1);
				КонецЕсли;
			Иначе
				УстановитьСтрочную = Ложь;
			КонецЕсли;
			НовыйПароль = НовыйПароль + Символ;
			Счетчик     = Счетчик + 1;
			Если Счетчик >= МинимальнаяДлина Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;

		// Добавление гласных.
		Если ИспользоватьГласные Тогда
			Если УстановитьЗаглавную И УстановитьСтрочную Тогда
				СтрокаПоиска	= ГласныеСтрочные + ГласныеЗаглавные;
				ВерхняяГраница	= КоличествоГласныхСтрочных + КоличествоГласныхЗаглавных;
			ИначеЕсли УстановитьЗаглавную Тогда
				СтрокаПоиска	= ГласныеЗаглавные;
				ВерхняяГраница	= КоличествоГласныхЗаглавных;
			Иначе
				СтрокаПоиска	= ГласныеСтрочные;
				ВерхняяГраница	= КоличествоГласныхСтрочных;
			КонецЕсли;
			Если ПустаяСтрока(СтрокаПоиска) Тогда
				СтрокаПоиска	= ГласныеСтрочные + ГласныеЗаглавные;
				ВерхняяГраница	= КоличествоГласныхСтрочных + КоличествоГласныхЗаглавных;
			КонецЕсли;
			Символ = Сред(СтрокаПоиска, ГСЧ.СлучайноеЧисло(1, ВерхняяГраница), 1);
			Если Символ = ВРЕГ(Символ) Тогда
				УстановитьЗаглавную = Ложь;
			Иначе
				УстановитьСтрочную = Ложь;
			КонецЕсли;
			НовыйПароль = НовыйПароль + Символ;
			Счетчик     = Счетчик + 1;
			Если Счетчик >= МинимальнаяДлина Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;

		// Добавление цифр.
		Если ИспользоватьЦифры И УстановитьЦифру Тогда
			УстановитьЦифру = (ГСЧ.СлучайноеЧисло(0, 1) = 1);
			Символ          = Сред(Цифры, ГСЧ.СлучайноеЧисло(1, КоличествоЦифр), 1);
			НовыйПароль     = НовыйПароль + Символ;
			Счетчик         = Счетчик + 1;
			Если Счетчик >= МинимальнаяДлина Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;

		// Добавление спец. символов.
		Если ИспользоватьСпецСимволы И УстановитьСпецСимвол Тогда
			УстановитьСпецСимвол = (ГСЧ.СлучайноеЧисло(0, 1) = 1);
			Символ      = Сред(СпецСимволы, ГСЧ.СлучайноеЧисло(1, КоличествоСпецСимволов), 1);
			НовыйПароль = НовыйПароль + Символ;
			Счетчик     = Счетчик + 1;
			Если Счетчик >= МинимальнаяДлина Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат НовыйПароль;
КонецФункции

Процедура сП_ВыбратьПользователейГруппы(ВыбранныеЭлементы, ХранимыеПараметры, ПолеСписка) Экспорт
	Если ВыбранныеЭлементы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ВыбранныйЭлемент		= ВыбранныеЭлементы[0].ВыбранныйЭлемент;
	ТипВыбранногоЭлемента	= ТипЗнч(ВыбранныйЭлемент);

	Если ТипВыбранногоЭлемента = Тип("СправочникСсылка.ГруппыПользователей")
			И ХранимыеПараметры.ВыборГруппПользователей
		Или ТипВыбранногоЭлемента = Тип("СправочникСсылка.ГруппыВнешнихПользователей")
			И ХранимыеПараметры.ВыборГруппВнешнихПользователей
		Или ТипВыбранногоЭлемента <> Тип("СправочникСсылка.ГруппыПользователей")
			И ТипВыбранногоЭлемента <> Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда

		Возврат;
	КонецЕсли;

	ПользователиГруппы = сП_ПользователиГруппы(ПолеСписка);

	ВыбранныеЭлементы.Очистить();

	Для Каждого ПользовательГруппы Из ПользователиГруппы Цикл
		Элемент = Новый Структура;
		Элемент.Вставить("ВыбранныйЭлемент",	ПользовательГруппы.Ссылка);
		Элемент.Вставить("НомерКартинки",		ПользовательГруппы.НомерКартинки);

		ВыбранныеЭлементы.Добавить(Элемент);
	КонецЦикла;
КонецПроцедуры

Функция сП_ПользователиГруппы(ПолеСписка)
	Схема		= ПолеСписка.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки	= ПолеСписка.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();

	сП_ДобавитьПоляПользователейГруппы(Настройки);

	КомпоновщикМакета	= Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки		= КомпоновщикМакета.Выполнить(Схема, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

	Возврат ПроцессорВывода.Вывести(ПроцессорКомпоновки);
КонецФункции

Процедура сП_ДобавитьПоляПользователейГруппы(Настройки)
	ДобавляемыеПоля		= СтрРазделить("Ссылка, НомерКартинки", ", ", Ложь);
	НастройкиСтруктура	= Настройки.Структура[0]; // ГруппировкаКомпоновкиДанных
	ВыбранныеПоля		= НастройкиСтруктура.Выбор;

	Для Каждого ДобавляемоеПоле Из ДобавляемыеПоля Цикл
		ДоступноеПоле = ВыбранныеПоля.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ДобавляемоеПоле));

		Если ДоступноеПоле = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ПолеНайдено = Ложь;

		Для Каждого Элемент Из ВыбранныеПоля.Элементы Цикл
			Если Элемент.Поле = ДоступноеПоле.Поле Тогда
				ПолеНайдено = Истина;

				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если ПолеНайдено Тогда
			Продолжить;
		КонецЕсли;

		ВыбранноеПоле = ВыбранныеПоля.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(ВыбранноеПоле, ДоступноеПоле);
	КонецЦикла;
КонецПроцедуры

Функция сП_ОписаниеПользователя(Пользователь) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Наименование",					"");
	Результат.Вставить("ИдентификаторПользователяИБ",	"");
	Результат.Вставить("Фотография");
	Результат.Вставить("Недействителен",				Истина);
	Результат.Вставить("ПометкаУдаления",				Истина);
	Результат.Вставить("Телефон",						"");
	Результат.Вставить("АдресЭлектроннойПочты",			"");


	СвойстваПользователя = ?(ТипЗнч(Пользователь) = Тип("СправочникОбъект.Пользователи"), Пользователь, БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта(Пользователь,"Наименование,ИдентификаторПользователяИБ,Фотография,ПометкаУдаления,Недействителен"));
	ЗаполнитьЗначенияСвойств(Результат, СвойстваПользователя);
	Результат.Фотография = ?(СвойстваПользователя.Фотография = Неопределено, Неопределено, СвойстваПользователя.Фотография.Получить());

	// Зарезервировано для новых подсистем

	Возврат Результат;
КонецФункции

Процедура сП_ОбновитьПредопределенныеВидыКонтактнойИнформацииПользователей() Экспорт
	Возврат;

	// Зарезервировано для новых подсистем
КонецПроцедуры

Процедура сП_ПереименоватьКлючХраненияРешенияПоОткрытиюВнешнихОтчетовИОбработок() Экспорт
	Блокировка	= Новый БлокировкаДанных;
	Блокировка.Добавить("Константа.ПараметрыАдминистрированияИБ");

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();

		ПараметрыАдминистрированияИБ = Константы.ПараметрыАдминистрированияИБ.Получить().Получить();

		Если ТипЗнч(ПараметрыАдминистрированияИБ) = Тип("Структура") И ПараметрыАдминистрированияИБ.Свойство("РазрешеноОткрытиеВнешнихОтчетовИОбработок") Тогда
			Если Не ПараметрыАдминистрированияИБ.Свойство("ПринятоРешениеПоОткрытиюВнешнихОтчетовИОбработок") И ТипЗнч(ПараметрыАдминистрированияИБ.РазрешеноОткрытиеВнешнихОтчетовИОбработок) = Тип("Булево") И ПараметрыАдминистрированияИБ.РазрешеноОткрытиеВнешнихОтчетовИОбработок Тогда
				ПараметрыАдминистрированияИБ.Вставить("ПринятоРешениеПоОткрытиюВнешнихОтчетовИОбработок", Истина);
			КонецЕсли;
			ПараметрыАдминистрированияИБ.Удалить("РазрешеноОткрытиеВнешнихОтчетовИОбработок");
			Константы.ПараметрыАдминистрированияИБ.Установить(Новый ХранилищеЗначения(ПараметрыАдминистрированияИБ));
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Процедура сП_ПеренестиНастройкиДлиныИСложностиПаролейКонфигуратора() Экспорт
	ВсеНастройки	= ПользователиСерверПовтИсп.сП_Настройки();

	Если Не ВсеНастройки.ОбщиеНастройкиВхода
	 Или ПолучитьМинимальнуюДлинуПаролейПользователей() = 0  И Не ПолучитьПроверкуСложностиПаролейПользователей()
	 Или ВсеНастройки.Пользователи.МинимальнаяДлинаПароля <> 0
	 Или ВсеНастройки.Пользователи.ПарольДолженОтвечатьТребованиямСложности <> 0
	 Или ВсеНастройки.ВнешниеПользователи.МинимальнаяДлинаПароля <> 0
	 Или ВсеНастройки.ВнешниеПользователи.ПарольДолженОтвечатьТребованиямСложности <> 0 Тогда

		Возврат;
	КонецЕсли;

	Блокировка	= Новый БлокировкаДанных;
	Блокировка.Добавить("Константа.НастройкиВходаПользователей");

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НастройкиВхода	= сП_НастройкиВхода();

		СложныйПароль          = ПолучитьПроверкуСложностиПаролейПользователей();
		МинимальнаяДлинаПароля = ПолучитьМинимальнуюДлинуПаролейПользователей();

		НастройкиВхода.Пользователи.МинимальнаяДлинаПароля						= МинимальнаяДлинаПароля;
		НастройкиВхода.Пользователи.ПарольДолженОтвечатьТребованиямСложности	= СложныйПароль;
		Если Константы.ИспользоватьВнешнихПользователей.Получить() Тогда
			НастройкиВхода.ВнешниеПользователи.МинимальнаяДлинаПароля					= МинимальнаяДлинаПароля;
			НастройкиВхода.ВнешниеПользователи.ПарольДолженОтвечатьТребованиямСложности	= СложныйПароль;
		КонецЕсли;

		Константы.НастройкиВходаПользователей.Установить(Новый ХранилищеЗначения(НастройкиВхода));

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Процедура сП_ЗаполнитьНаименованиеПредопределенныхГруппПользователей() Экспорт
	сП_УстановитьНаименование(Справочники.ГруппыПользователей.ВсеПользователи, "Все пользователи");

	сП_УстановитьНаименование(Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи, "Все внешние пользователи");
КонецПроцедуры

Процедура сП_ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	Обработчик								= Обработчики.Добавить();
	Обработчик.Версия						= "2.1.3.16";
	Обработчик.Процедура					= "ПользователиСервер.сП_ОбновитьПредопределенныеВидыКонтактнойИнформацииПользователей";

	Обработчик								= Обработчики.Добавить();
	Обработчик.Версия						= "2.4.1.1";
	Обработчик.РежимВыполнения				= "Оперативно";
	Обработчик.Процедура					= "ПользователиСервер.сП_ПереименоватьКлючХраненияРешенияПоОткрытиюВнешнихОтчетовИОбработок";
	Обработчик.ВыполнятьВГруппеОбязательных	= Истина;

	Обработчик								= Обработчики.Добавить();
	Обработчик.Версия						= "3.0.2.192";
	Обработчик.НачальноеЗаполнение			= Истина;
	Обработчик.РежимВыполнения				= "Оперативно";
	Обработчик.Процедура					= "ПользователиСервер.сП_ПеренестиНастройкиДлиныИСложностиПаролейКонфигуратора";

	Обработчик								= Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение			= Истина;
	Обработчик.РежимВыполнения				= "Оперативно";
	Обработчик.Процедура					= "ПользователиСервер.сП_ЗаполнитьНаименованиеПредопределенныхГруппПользователей";

	Если ПользователиСерверПовтИсп.сП_ВерсияПредприятияПоддерживаетВосстановлениеПаролей() Тогда
		// Пользователи
		Обработчик										= Обработчики.Добавить();
		Обработчик.Процедура							= "Справочники.Пользователи.ОбработатьДанныеДляПереходаНаНовуюВерсию";
		Обработчик.Версия								= "3.1.4.25";
		Обработчик.РежимВыполнения						= "Отложенно";
		Обработчик.Идентификатор						= Новый УникальныйИдентификатор("d553f38f-196b-4fb7-ac8e-34ffb7025ab5");
		Обработчик.ПроцедураЗаполненияДанныхОбновления	= "Справочники.Пользователи.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
		Обработчик.ПроцедураПроверки					= "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
		Обработчик.Комментарий							= "Заполнение электронной почты для восстановления паролей из контактной информации пользователей.";
		Обработчик.ЧитаемыеОбъекты						= "Справочник.Пользователи";
		Обработчик.ИзменяемыеОбъекты					= "Справочник.Пользователи";
		Обработчик.БлокируемыеОбъекты					= "Справочник.Пользователи";

		// Зарезервировано для новых подсистем

		// Внешние пользователи
		ТипыВнешнихПользователей = Метаданные.ОпределяемыеТипы.ВнешнийПользователь.Тип.Типы();
		Если ТипыВнешнихПользователей[0] <> Тип("Строка")  И ТипыВнешнихПользователей[0] <> Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
			Обработчик										= Обработчики.Добавить();
			Обработчик.Процедура							= "Справочники.ВнешниеПользователи.ОбработатьДанныеДляПереходаНаНовуюВерсию";
			Обработчик.Версия								= "3.1.4.25";
			Обработчик.РежимВыполнения						= "Отложенно";
			Обработчик.Идентификатор						= Новый УникальныйИдентификатор("002f8ac6-dfe6-4d9f-be48-ce3c331aea82");
			Обработчик.ПроцедураЗаполненияДанныхОбновления	= "Справочники.ВнешниеПользователи.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
			Обработчик.ПроцедураПроверки					= "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
			Обработчик.Комментарий							= "Заполнение электронной почты для восстановления паролей из контактной информации внешних пользователей.";

			Читаемые = Новый Массив;
			Для Каждого ТипВнешнегоПользователя Из ТипыВнешнихПользователей Цикл
				Если ТипВнешнегоПользователя = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
					Продолжить;
				КонецЕсли;

				Читаемые.Добавить(Метаданные.НайтиПоТипу(ТипВнешнегоПользователя).ПолноеИмя());
			КонецЦикла;
			Обработчик.ЧитаемыеОбъекты					= СтрСоединить(Читаемые, ",");

			Обработчик.ИзменяемыеОбъекты				= "Справочник.ВнешниеПользователи";
			Обработчик.БлокируемыеОбъекты				= "Справочник.ВнешниеПользователи";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура сП_ПриНастройкеВариантовОтчетов(Настройки) Экспорт
	ВариантыОтчетовСервер.ВО_НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СведенияОПользователях);
КонецПроцедуры

Процедура сП_ПриОпределенииОбъектовСНачальнымЗаполнением(Объекты) Экспорт
	Объекты.Добавить(Метаданные.Справочники.ГруппыВнешнихПользователей);
	Объекты.Добавить(Метаданные.Справочники.ГруппыПользователей);
КонецПроцедуры

Функция сП_ПользователиДляВключенияВосстановленияПароля() Экспорт
	Возврат Новый Массив;

	// Зарезервировано для новых подсистем
КонецФункции

Функция сП_ВнешниеПользователиДляВключенияВосстановленияПароля() Экспорт
	Возврат Новый Массив;

	// Зарезервировано для новых подсистем
КонецФункции

Функция сП_ДоступнаНастройкаВосстановленияПароля(УровеньДоступа) Экспорт
	Если Не УровеньДоступа.ИзменениеТекущего И Не УровеньДоступа.УправлениеСписком Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат ПользователиСерверПовтИсп.сП_ВерсияПредприятияПоддерживаетВосстановлениеПаролей();
КонецФункции

Функция сП_ПоляВосстановленияПаролей() Экспорт
	Если ПользователиСерверПовтИсп.сП_ВерсияПредприятияПоддерживаетВосстановлениеПаролей() Тогда
		Возврат ",ЗапрещеноВосстанавливатьПароль,АдресЭлектроннойПочты";
	КонецЕсли;

	Возврат "";
КонецФункции

Функция сП_НастройкиВосстановленияПароля() Экспорт
	НастройкиВосстановленияПароля = Неопределено;
	Если ПользователиСерверПовтИсп.сП_ВерсияПредприятияПоддерживаетВосстановлениеПаролей() Тогда
		НастройкиАутентификации			= Вычислить("ДополнительныеНастройкиАутентификации");
		НастройкиВосстановленияПароля	= НастройкиАутентификации.ПолучитьНастройкиВосстановленияПароля();
	КонецЕсли;

	Возврат НастройкиВосстановленияПароля;
КонецФункции

Функция сП_СпособВосстановленияПароляПользователяИнформационнойБазы(СпособВосстановленияПароля) Экспорт
	СпособВосстановленияПароляПользователя	= Вычислить("СпособВосстановленияПароляПользователяИнформационнойБазы");

	Возврат СпособВосстановленияПароляПользователя[СпособВосстановленияПароля];
КонецФункции

Процедура сП_УстановитьНастройкиВосстановленияПароля(НастройкиВосстановленияПароля) Экспорт
	Если ПользователиСерверПовтИсп.сП_ВерсияПредприятияПоддерживаетВосстановлениеПаролей() Тогда
		НастройкиАутентификации	= Вычислить("ДополнительныеНастройкиАутентификации");
		НастройкиАутентификации.УстановитьНастройкиВосстановленияПароля(НастройкиВосстановленияПароля);
	КонецЕсли;
КонецПроцедуры

Процедура сП_УстановитьНаименование(Ссылка, Наименование)
	Блокировка			= Новый БлокировкаДанных;
	ЭлементБлокировки	= Блокировка.Добавить(Ссылка.Метаданные().ПолноеИмя());
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Объект				= Ссылка.ПолучитьОбъект();
		Объект.Наименование	= "Все пользователи";
		ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьОбъект(Объект);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Процедура сП_ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники) Экспорт
	// Загрузка в справочник ВнешниеПользователи запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.ВнешниеПользователи.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;

	// Загрузка в справочник Пользователи запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.Пользователи.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
