///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СтандартныеПодсистемы

Функция СП_УстановкаПараметровСеанса(ИменаПараметровСеанса) Экспорт
	// Параметры сеанса, инициализация которых требует обращения к одним и тем же данным
	// следует инициализировать сразу группой. Для того, чтобы избежать их повторной инициализации,
	// имена уже установленных параметров сеанса сохраняются в массиве УстановленныеПараметры.
	УстановленныеПараметры = Новый Массив;

	Если ИменаПараметровСеанса <> Неопределено И ИменаПараметровСеанса.Найти("ПараметрыКлиентаНаСервере") <> Неопределено Тогда
		ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(Новый Соответствие);
		УстановленныеПараметры.Добавить("ПараметрыКлиентаНаСервере");
		Если ИменаПараметровСеанса.Количество() = 1 Тогда
			Возврат УстановленныеПараметры;
		КонецЕсли;
	КонецЕсли;

	Если ИменаПараметровСеанса = Неопределено Тогда
		Если ПараметрыСеанса.ПараметрыКлиентаНаСервере.Количество() = 0 Тогда
			НезаполненныеПараметрыКлиента				= Новый Соответствие;
			НезаполненныеПараметрыКлиента.Вставить("ПервыйСерверныйВызовВыполнен", ?(ТекущийРежимЗапуска() = Неопределено, Неопределено, Ложь));
			ПараметрыСеанса.ПараметрыКлиентаНаСервере	= Новый ФиксированноеСоответствие(НезаполненныеПараметрыКлиента);
		КонецЕсли;
		Справочники.ВерсииРасширений.УстановкаПараметровСеанса(ИменаПараметровСеанса, УстановленныеПараметры);

		// При установке соединения с информационной базой до вызова всех остальных обработчиков.
		СП_ПередЗапускомПрограммы();

		Возврат УстановленныеПараметры;
	КонецЕсли;

	Если ИменаПараметровСеанса.Найти("КлючДанныхПовторногоИспользования") <> Неопределено Тогда
		ПараметрыСеанса.КлючДанныхПовторногоИспользования = Новый УникальныйИдентификатор;
		УстановленныеПараметры.Добавить("КлючДанныхПовторногоИспользования");
	КонецЕсли;

	Справочники.ВерсииРасширений.УстановкаПараметровСеанса(ИменаПараметровСеанса, УстановленныеПараметры);

	Если ИменаПараметровСеанса.Найти("БуферОбмена") <> Неопределено Тогда
		ПараметрыСеанса.БуферОбмена = Новый ФиксированнаяСтруктура(Новый Структура("Источник, Данные"));
		УстановленныеПараметры.Добавить("БуферОбмена");
	КонецЕсли;

	Обработчики = Новый Соответствие;
	ИнтеграцияПодсистемСервер.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);

	СП_ВыполнитьОбработчикиУстановкиПараметровСеанса(ИменаПараметровСеанса, Обработчики, УстановленныеПараметры);

	ИнтеграцияПодсистемСервер.ПриУстановкеПараметровСеанса(ИменаПараметровСеанса);

	Возврат УстановленныеПараметры;
КонецФункции

Процедура СП_ПередЗапускомПрограммы()
	// Привилегированный режим (установлен платформой).

	// Проверка основного языка программирования, установленного в конфигурации.
	ТекущийЯзыкВстроенногоЯзыка = Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка["Русский"];
	Если Метаданные.ВариантВстроенногоЯзыка <> ТекущийЯзыкВстроенногоЯзыка Тогда
		ВызватьИсключение СтрШаблон(
			"Вариант встроенного языка конфигурации ""%1"" не поддерживается.
			           |Необходимо использовать вариант языка ""%2"".",
			Метаданные.ВариантВстроенногоЯзыка,
			Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка["Русский"]);
	КонецЕсли;

	// Проверка настройки совместимости конфигурации с версией платформы.
	СистемнаяИнформация			= Новый СистемнаяИнформация;
	МинимальнаяВерсияПлатформы	= "8.3.14.1694";
	Если БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, МинимальнаяВерсияПлатформы) < 0 Тогда
		ВызватьИсключение СтрШаблон(
			"Для запуска необходима версия платформы 1С:Предприятие %1 или выше.", МинимальнаяВерсияПлатформы);
	КонецЕсли;

	Режимы			= Метаданные.СвойстваОбъектов.РежимСовместимости;
	ТекущийРежим	= Метаданные.РежимСовместимости;

	ПоддерживаемаяВерсияПлатформы	= "8.3.19";
	ВерсияПлатформы					= БазоваяПодсистемаКлиентСервер.ОН_ВерсияКонфигурацииБезНомераСборки(СистемнаяИнформация.ВерсияПриложения);
	Если ТекущийРежим = Режимы.НеИспользовать Тогда
		ПоддерживаемыеВерсииПлатформы = СтрРазделить("8.3.14, 8.3.15, 8.3.16, 8.3.19", ", ", Ложь);

		Если ПоддерживаемыеВерсииПлатформы.Найти(ВерсияПлатформы) <> Неопределено Тогда
			НеПоддерживаемаяВерсияПлатформы = "";
		Иначе
			НеПоддерживаемаяВерсияПлатформы = ВерсияПлатформы;
		КонецЕсли;
	ИначеЕсли ТекущийРежим = Режимы.Версия8_1 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.1"
	ИначеЕсли ТекущийРежим = Режимы.Версия8_2_13 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.2.13"
	ИначеЕсли ТекущийРежим = Режимы.Версия8_2_16 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.2.16";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_1 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.1";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_2 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.2";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_3 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.3";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_4 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.4";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_5 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.5";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_6 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.6";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_7 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.7";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_8 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.8";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_9 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.9";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_10 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.10";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_11 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.11";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_12 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.12";
	ИначеЕсли ТекущийРежим = Режимы.Версия8_3_13 Тогда
		НеПоддерживаемаяВерсияПлатформы = "8.3.13";
	Иначе
		ТекущийРежимСтрокой = Строка(ТекущийРежим);

		Если СтрЗаканчиваетсяНа(ТекущийРежимСтрокой, "8_3_14") Или СтрЗаканчиваетсяНа(ТекущийРежимСтрокой, "8_3_15") Или СтрЗаканчиваетсяНа(ТекущийРежимСтрокой, "8_3_16") Тогда
			НеПоддерживаемаяВерсияПлатформы = "";
		Иначе
			НеПоддерживаемаяВерсияПлатформы = ТекущийРежимСтрокой;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(НеПоддерживаемаяВерсияПлатформы) Тогда
		ВызватьИсключение СтрШаблон(
			"Режим совместимости конфигурации с 1С:Предприятием версии %1 не поддерживается.
			           |Для запуска установите в конфигурации режим совместимости ""Не использовать"" при разработке на версии %2
			           |(или ""Версия %2"" при разработке на более старших версиях).",
			НеПоддерживаемаяВерсияПлатформы, ПоддерживаемаяВерсияПлатформы);
	КонецЕсли;

	// Проверка заполнения версии конфигурации.
	Если ПустаяСтрока(Метаданные.Версия) Тогда
		ВызватьИсключение "Не заполнено свойство конфигурации Версия.";
	Иначе
		Попытка
			НулеваяВерсия = БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсии(Метаданные.Версия, "0.0.0.0") = 0;
		Исключение
			ВызватьИсключение СтрШаблон(
				"Не правильно заполнено свойство конфигурации Версия: ""%1"".
				           |Правильный формат, например: ""1.2.3.45"".",
				Метаданные.Версия);
		КонецПопытки;
		Если НулеваяВерсия Тогда
			ВызватьИсключение СтрШаблон(
				"Не правильно заполнено свойство конфигурации Версия: ""%1"".
				           |Версия не может быть нулевой.",
				Метаданные.Версия);
		КонецЕсли;
	КонецЕсли;

	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	Если Не ТекущийПользовательИБ.АутентификацияСтандартная
	   И Не ТекущийПользовательИБ.АутентификацияОС
	   И Не ТекущийПользовательИБ.АутентификацияOpenID Тогда
		ВызватьИсключение "Вход в программу запрещен. Обратитесь к администратору.";
	КонецЕсли;

	Если Не Метаданные.ОсновныеРоли.Содержит(Метаданные.Роли.АдминистраторСистемы)
	 Или Не Метаданные.ОсновныеРоли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
		ВызватьИсключение
			"В конфигурации в свойстве ОсновныеРоли не указаны
			|стандартные роли АдминистраторСистемы и ПолныеПрава.";
	КонецЕсли;

	// Проверка возможности выполнения обработчиков установки параметров сеанса для запуска программы.
	СП_ПроверитьВозможностьЗапуска();

	Если Не ЗначениеЗаполнено(ПользователиИнформационнойБазы.ТекущийПользователь().Имя)
	   И ОбновлениеВерсииИБСервер.сОИБ_ВерсияИБ("СтандартныеПодсистемы") = "0.0.0.0" Тогда

		ПользователиСервер.сП_УстановитьНачальныеНастройки("");
	КонецЕсли;

	ИнтеграцияПодсистемСервер.ПередЗапускомПрограммы();

	СП_ОбработатьОчередьСкопированныхНастроек();
КонецПроцедуры

Процедура СП_УстановитьПустуюФормуНаРабочийСтол() Экспорт
	КлючОбъекта			= "Общее/НастройкиНачальнойСтраницы";
	ТекущиеНастройки	= ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта);

	Если ТипЗнч(ТекущиеНастройки) = Тип("НастройкиНачальнойСтраницы") Тогда
		ТекущийСоставФорм = ТекущиеНастройки.ПолучитьСоставФорм();
		Если ТекущийСоставФорм.ПраваяКолонка.Количество() = 0
		   И ТекущийСоставФорм.ЛеваяКолонка.Количество() = 1
		   И ТекущийСоставФорм.ЛеваяКолонка[0] = "ОбщаяФорма.ПустойРабочийСтол" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	СоставФорм = Новый СоставФормНачальнойСтраницы;
	СоставФорм.ЛеваяКолонка.Добавить("ОбщаяФорма.ПустойРабочийСтол");
	Настройки = Новый НастройкиНачальнойСтраницы;
	Настройки.УстановитьСоставФорм(СоставФорм);
	ХранилищеСистемныхНастроек.Сохранить(КлючОбъекта, "", Настройки);
КонецПроцедуры

Функция СП_ПараметрыКлиентаНаСервере() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиента = ПараметрыСеанса.ПараметрыКлиентаНаСервере;
	УстановитьПривилегированныйРежим(Ложь);

	Если ТекущийРежимЗапуска() = Неопределено И ПараметрыКлиента.Получить("ПервыйСерверныйВызовВыполнен") = Неопределено Или ПараметрыКлиента.Получить("ПервыйСерверныйВызовВыполнен") = Истина Тогда
		Возврат ПараметрыКлиента;
	КонецЕсли;

	Если ТекущийРежимЗапуска() <> Неопределено Тогда
		// Сброс клиентских кэшей для обращения к серверу при обращении к параметрам работы клиента,
		// чтобы при этом перезаполнились параметры клиента на сервере.
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;

	ПриЗапуске = ПараметрыКлиента.Получить("ПервыйСерверныйВызовВыполнен") = Ложь;

	Если ПриЗапуске Тогда
		КомментарийДляЖурналаРегистрацииБезСтекаВызовов =
			"Недопустимое обращение к неинициализированным параметрам клиента на сервере.
			           |Вероятно, программный интерфейс БСП был преждевременно вызван до завершения
			           |инициализации в СтандартныеПодсистемыКлиент.ПередНачаломРаботыСистемы.";
	Иначе
		КомментарийДляЖурналаРегистрацииБезСтекаВызовов =
			"Недопустимое обращение к неинициализированным параметрам клиента на сервере.
			           |Вероятно, программный интерфейс БСП был вызван после некорректной очистки всех
			           |параметров сеанса без использования ОбщегоНазначения.ОчиститьПараметрыСеанса.";
	КонецЕсли;

	Попытка
		ВызватьИсключение КомментарийДляЖурналаРегистрацииБезСтекаВызовов;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	КомментарийСоСтекомВызовов = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);

	ИмяСобытия = "Не заполнены параметры клиента на сервере";

	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, КомментарийСоСтекомВызовов);

	Если Не ПриЗапуске Тогда
		ТекстОшибки = "Не инициализированы параметры клиента на сервере.
			           |Для их инициализации повторите действие или перезапустите сеанс.";
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Возврат ПараметрыКлиента;
КонецФункции

Процедура СП_СохранитьГлавныйУзел() Экспорт
	ГлавныйУзелМенеджер				= Константы.ГлавныйУзел.СоздатьМенеджерЗначения();
	ГлавныйУзелМенеджер.Значение	= ПланыОбмена.ГлавныйУзел();
	ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьДанные(ГлавныйУзелМенеджер);
КонецПроцедуры

Функция СП_ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	ЭтоВызовПередНачаломРаботыСистемы = Параметры.ПолученныеПараметрыКлиента <> Неопределено;

	// Обязательные параметры для продолжения работы.
	Параметры.Вставить("ЭтоРазделеннаяКонфигурация",						Ложь);
	Параметры.Вставить("ЕстьДоступДляОбновленияВерсииПлатформы",			ПользователиСервер.П_ЭтоПолноправныйПользователь(,Истина));

	Параметры.Вставить("ИменаПодсистем",									БазоваяПодсистемаСерверПовтИсп.СП_ИменаПодсистем());
	Параметры.Вставить("ЭтоБазоваяВерсияКонфигурации",						СтрНайти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0);
	Параметры.Вставить("ЭтоУчебнаяПлатформа",								СП_ЭтоУчебнаяПлатформа());
	Параметры.Вставить("ИмяТекущегоПользователя",							СП_ТекущийПользователь().Имя);
	Параметры.Вставить("ИмяCOMСоединителя",									БазоваяПодсистемаКлиентСервер.ОН_ИмяCOMСоединителя());
	Параметры.Вставить("КодОсновногоЯзыка",									Метаданные.ОсновнойЯзык.КодЯзыка);

	Параметры.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",	СП_ЗапрашиватьПодтверждениеПриЗавершенииПрограммы());

	ОбщиеПараметры = ОН_ОбщиеПараметрыБазовойФункциональности();

	Параметры.Вставить("МинимальнаяВерсияПлатформы",   ОбщиеПараметры.МинимальнаяВерсияПлатформы);
	Параметры.Вставить("РекомендуемаяВерсияПлатформы", ОбщиеПараметры.РекомендуемаяВерсияПлатформы);

	Параметры.Вставить("РекомендуемыйОбъемОперативнойПамяти", ОбщиеПараметры.РекомендуемыйОбъемОперативнойПамяти);
	Параметры.Вставить("ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти", СП_ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти());

	Параметры.Вставить("ЭтоСеансВнешнегоПользователя", ПользователиСерверПовтИсп.сП_ЭтоСеансВнешнегоПользователя());
	Параметры.Вставить("ИнформационнаяБазаФайловая",   ОН_ИнформационнаяБазаФайловая());

	Если ЭтоВызовПередНачаломРаботыСистемы Тогда
		Параметры.Вставить("ЭлементыСтиля", СП_НаборЭлементовСтиля());
	КонецЕсли;

	Если ЭтоВызовПередНачаломРаботыСистемы
	   И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ОпцииИнтерфейса") Тогда

		Параметры.Вставить("ОпцииИнтерфейса", БазоваяПодсистемаСерверПовтИсп.СП_ОпцииИнтерфейса());
	КонецЕсли;

	Если ЭтоВызовПередНачаломРаботыСистемы Тогда
		ОшибкаНедостаточноПравДляВходаВПрограмму = ПользователиСервер.сП_ОшибкаНедостаточноПравДляВходаВПрограмму(
			Не Параметры.ПолученныеПараметрыКлиента.Свойство("ОшибкаНедостаточноПравДляВходаВПрограмму"));

		Если ЗначениеЗаполнено(ОшибкаНедостаточноПравДляВходаВПрограмму) Тогда
			Параметры.Вставить("ОшибкаНедостаточноПравДляВходаВПрограмму", ОшибкаНедостаточноПравДляВходаВПрограмму);

			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	РегламентныеЗаданияСервер.БРСВР_ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры, ЭтоВызовПередНачаломРаботыСистемы);

	Если ПараметрыСеанса.РаботаСВнешнимиРесурсамиЗаблокирована Тогда
		Параметры.Вставить("РаботаСВнешнимиРесурсамиЗаблокирована");
	КонецЕсли;

	Если Не ОбновлениеВерсииИБСервер.сОИБ_ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры)
	   И ЭтоВызовПередНачаломРаботыСистемы Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ЭтоВызовПередНачаломРаботыСистемы
	   И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ПоказатьНерекомендуемуюВерсиюПлатформы")
	   И СП_ПоказатьНерекомендуемуюВерсиюПлатформы(Параметры) Тогда

		Параметры.Вставить("ПоказатьНерекомендуемуюВерсиюПлатформы");
		БазоваяПодсистемаВызовСервера.СП_СкрытьРабочийСтолПриНачалеРаботыСистемы();

		Возврат Ложь;
	КонецЕсли;

	Если ЭтоВызовПередНачаломРаботыСистемы И Не Параметры.ПолученныеПараметрыКлиента.Свойство("ВосстановитьСвязьСГлавнымУзлом") Тогда
		УстановитьПривилегированныйРежим(Истина);
			ВосстановитьСвязьСГлавнымУзлом = ПланыОбмена.ГлавныйУзел() = Неопределено И ЗначениеЗаполнено(Константы.ГлавныйУзел.Получить());
		УстановитьПривилегированныйРежим(Ложь);

		Если ВосстановитьСвязьСГлавнымУзлом Тогда
			Параметры.Вставить("ВосстановитьСвязьСГлавнымУзлом", ПользователиСервер.П_ЭтоПолноправныйПользователь(, Истина));
			БазоваяПодсистемаВызовСервера.СП_СкрытьРабочийСтолПриНачалеРаботыСистемы();

			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Если ОбновлениеВерсииИБСерверПовтИсп.сОИБ_НеобходимоОбновлениеИнформационнойБазы()
		И ОбновлениеВерсииИБСервер.сОИБ_СтатусНевыполненныхОбработчиков(Истина) = "СтатусНеВыполнено" Тогда
		Параметры.Вставить("НеобходимоВыполнитьОбработчикиОтложенногоОбновления");
	КонецЕсли;

	// Зарезервировано для новых подсистем

	// Проверка необходимости предварительного обновления параметров работы программы.
	Если ЭтоВызовПередНачаломРаботыСистемы
	   И НЕ Параметры.ПолученныеПараметрыКлиента.Свойство("НеобходимоОбновлениеПараметровРаботыПрограммы") Тогда

		Если РегистрыСведений.ПараметрыРаботыПрограммы.НеобходимоОбновление() Тогда
			// Будет выполнено предварительное обновление.
			Параметры.Вставить("НеобходимоОбновлениеПараметровРаботыПрограммы");

			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	// Обязательные параметры для всех режимов работы.
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);

	// Зарезервировано для новых подсистем

	// Параметры для работы в локальном режиме или
	// в сеансе с установленными значениями разделителей в модели сервиса.

	Если ОбновлениеВерсииИБСерверПовтИсп.сОИБ_НеобходимоОбновлениеИнформационнойБазы() Тогда
		Параметры.Вставить("НеобходимоОбновлениеИнформационнойБазы");
		БазоваяПодсистемаВызовСервера.СП_СкрытьРабочийСтолПриНачалеРаботыСистемы();
	КонецЕсли;

	// Зарезервировано для новых подсистем

	Отказ = Ложь;
	Если ЭтоВызовПередНачаломРаботыСистемы Тогда
		ПользователиСервер.сП_ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры, Отказ, Истина);
	КонецЕсли;
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;

	СП_ДобавитьОбщиеПараметрыРаботыКлиента(Параметры);

	Если ЭтоВызовПередНачаломРаботыСистемы
	   И Параметры.Свойство("НеобходимоОбновлениеИнформационнойБазы") Тогда
		// Не следует добавлять остальные параметры до окончания обновления ИБ,
		// так как они могут рассчитывать, что обновление ИБ уже выполнено.
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Функция СП_ЭтоУчебнаяПлатформа() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();

	Попытка
		ПользовательОС = ТекущийПользователь.ПользовательОС;
	Исключение
		ПользовательОС = Неопределено;
	КонецПопытки;

	Возврат ПользовательОС = Неопределено;
КонецФункции

Функция СП_ТекущийПользователь() Экспорт
	// Вычисляем актуальное имя пользователя, даже если оно было ранее изменено в текущем сеансе;
	// Например, для подключения к текущей ИБ через внешнее соединение из этого сеанса;
	// Во всех остальных случаях достаточно получить ПользователиИнформационнойБазы.ТекущийПользователь().
	ТекущийПользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);

	Если ТекущийПользователь = Неопределено Тогда
		ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	КонецЕсли;

	Возврат ТекущийПользователь;
КонецФункции

Функция СП_ЗапрашиватьПодтверждениеПриЗавершенииПрограммы() Экспорт
	Результат = ОН_ХранилищеЗагрузить(ХранилищеОбщихНастроек,
		"ОбщиеНастройкиПользователя",
		"ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",
		Неопределено,
		Неопределено,
		Неопределено);

	Если Результат = Неопределено Тогда
		Результат = ОН_ОбщиеПараметрыБазовойФункциональности().ЗапрашиватьПодтверждениеПриЗавершенииПрограммы;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция СП_ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти()
	Если ОН_ЭтоВебКлиент()
	 Или Не ОН_ИнформационнаяБазаФайловая() Тогда
		Возврат Ложь;
	КонецЕсли;

	ОперативнаяПамять = СП_ПараметрыКлиентаНаСервере().Получить("ОперативнаяПамять");
	Если ТипЗнч(ОперативнаяПамять) <> Тип("Число") Тогда
		Возврат Ложь; // Параметр клиента на сервере не заполнен (нет клиентского приложения).
	КонецЕсли;

	РекомендуемыйОбъем		= ОН_ОбщиеПараметрыБазовойФункциональности().РекомендуемыйОбъемОперативнойПамяти;
	СохраненнаяРекомендация	= ОН_ХранилищеЗагрузить(ХранилищеОбщихНастроек,
		"ОбщиеНастройкиПользователя",
		"РекомендацияПоОбъемуОперативнойПамяти",
		Неопределено,
		Неопределено,
		Неопределено);

	Рекомендация = Новый Структура;
	Рекомендация.Вставить("Показывать",				Истина);
	Рекомендация.Вставить("ДатаПредыдущегоПоказа",	Дата(1, 1, 1));

	Если ТипЗнч(СохраненнаяРекомендация) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Рекомендация, СохраненнаяРекомендация);
	КонецЕсли;

	Возврат ОперативнаяПамять < РекомендуемыйОбъем
		И (Рекомендация.Показывать
		   Или (ТекущаяДатаСеанса() - Рекомендация.ДатаПредыдущегоПоказа) > 60*60*24*60)
КонецФункции

Функция СП_НаборЭлементовСтиля()
	НаборЭлементовСтиля = Новый Структура;
	Для каждого ЭлементСтиля Из Метаданные.ЭлементыСтиля Цикл
		Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
			НаборЭлементовСтиля.Вставить(ЭлементСтиля.Имя, Новый ХранилищеЗначения(ЭлементСтиля.Значение));
		Иначе
			НаборЭлементовСтиля.Вставить(ЭлементСтиля.Имя, ЭлементСтиля.Значение);
		КонецЕсли;
	КонецЦикла;

	Возврат Новый ФиксированнаяСтруктура(НаборЭлементовСтиля);
КонецФункции

Функция СП_ПоказатьНерекомендуемуюВерсиюПлатформы(Параметры)
	// Проверка, что пользователь не внешний.
	УстановитьПривилегированныйРежим(Истина);

	Запрос			= Новый Запрос;
	Запрос.Текст	=
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";

	Запрос.УстановитьПараметр("ИдентификаторПользователяИБ",
		ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);

	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;

	СистемнаяИнформация	= Новый СистемнаяИнформация;
	Текущая				= СистемнаяИнформация.ВерсияПриложения;
	Минимальная			= Параметры.МинимальнаяВерсияПлатформы;
	Рекомендуемая		= Параметры.РекомендуемаяВерсияПлатформы;

	Возврат БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсии(Текущая, Минимальная) < 0
		Или БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсии(Текущая, Рекомендуемая) < 0;
КонецФункции

Процедура СП_ДобавитьОбщиеПараметрыРаботыКлиента(Параметры)
	УстановитьПривилегированныйРежим(Истина);
	Параметры.Вставить("АвторизованныйПользователь", ПользователиСервер.сП_АвторизованныйПользователь());
	Параметры.Вставить("ЗаголовокПриложения", СокрЛП(Константы.ЗаголовокСистемы.Получить()));
	УстановитьПривилегированныйРежим(Ложь);

	Параметры.Вставить("ЭтоГлавныйУзел", НЕ ОН_ЭтоПодчиненныйУзелРИБ());

	Параметры.Вставить("ТребуетсяОбновлениеКонфигурацииУзлаРИБ",
		ОН_ЭтоПодчиненныйУзелРИБ() И КонфигурацияИзменена());
КонецПроцедуры

Процедура СП_ДобавитьПараметрыРаботыКлиента(Параметры)  Экспорт
	Параметры.Вставить("ИменаПодсистем",							БазоваяПодсистемаСерверПовтИсп.сП_ИменаПодсистем());
	Параметры.Вставить("ДоступноИспользованиеРазделенныхДанных",	Истина);
	Параметры.Вставить("РазделениеВключено",						Ложь);

	Параметры.Вставить("ЭтоБазоваяВерсияКонфигурации",	СтрНайти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0);
	Параметры.Вставить("ЭтоУчебнаяПлатформа",			СП_ЭтоУчебнаяПлатформа());
	Параметры.Вставить("ИмяCOMСоединителя",				БазоваяПодсистемаКлиентСервер.ОН_ИмяCOMСоединителя());
	Параметры.Вставить("ЭлементыСтиля",					СП_НаборЭлементовСтиля());

	СП_ДобавитьОбщиеПараметрыРаботыКлиента(Параметры);

	Параметры.Вставить("ИмяКонфигурации",     Метаданные.Имя);
	Параметры.Вставить("СинонимКонфигурации", Метаданные.Синоним);
	Параметры.Вставить("ВерсияКонфигурации",  Метаданные.Версия);
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);
	Параметры.Вставить("КодОсновногоЯзыка",   Метаданные.ОсновнойЯзык.КодЯзыка);

	Параметры.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",
		СП_ЗапрашиватьПодтверждениеПриЗавершенииПрограммы());

	Параметры.Вставить("ИнформационнаяБазаФайловая", ОН_ИнформационнаяБазаФайловая());

	// Зарезервировано для новых подсистем

	Параметры.Вставить("ВерсияРежимаСовместимости", СП_ВерсияРежимаСовместимости());
КонецПроцедуры

Функция СП_ВерсияРежимаСовместимости() Экспорт
	Если Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать Тогда
		Информация = Новый СистемнаяИнформация;

		Возврат Информация.ВерсияПриложения;
	КонецЕсли;

	ОписаниеРежимаСовместимости	= СтрРазделить(Метаданные.РежимСовместимости, "_");
	Символов					= СтрДлина(ОписаниеРежимаСовместимости[0]);

	НомерРедакции = "";

	Для НомерСимвола = 1 По Символов Цикл
		ТекущийСимвол = Сред(ОписаниеРежимаСовместимости[0], НомерСимвола, 1);

		Если СтрНайти("0123456789", ТекущийСимвол) > 0 Тогда
			НомерРедакции = НомерРедакции + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;

	ОписаниеРежимаСовместимости.Установить(0, НомерРедакции);

	Для Индекс = ОписаниеРежимаСовместимости.Количество() По 3 Цикл
		ОписаниеРежимаСовместимости.Добавить("0");
	КонецЦикла;

	Возврат СтрСоединить(ОписаниеРежимаСовместимости, ".");
КонецФункции

Процедура СП_ПроверитьВозможностьЗапуска()
	Если ОН_ИнформационнаяБазаФайловая(СтрокаСоединенияИнформационнойБазы()) Тогда
		Возврат;
	КонецЕсли;

	// Зарезервировано для новых подсистем

	// Информационная база не настроена на использование с профилем безопасности, в котором запрещен
	// полный доступ к внешним модулям.
	Попытка
		//@skip-warning
		ДоступенПривилегированныйРежим = Вычислить("СП_ДоступенПереходВПривилегированныйРежим()");
	Исключение
		ВызватьИсключение СтрШаблон(
			"Невозможно установить параметры сеанса по причине: %1.
				|
				|Возможно, для информационной базы через консоль кластера был установлен профиль безопасности, не допускающий выполнения внешних модулей без установки безопасного режима. В этом случае для восстановления работоспособности программы требуется отключить использование профиля безопасности через консоль кластера и заново настроить профили безопасности с помощью интерфейса конфигурации (соответствующие команды находятся в разделе настроек программы). При этом программа будет автоматически корректно настроена на использование совместно с включенными профилями безопасности.",
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

//@skip-warning
Функция СП_ДоступенПереходВПривилегированныйРежим()
	УстановитьПривилегированныйРежим(Истина);

	Возврат ПривилегированныйРежим();
КонецФункции

Процедура СП_ОбработатьОчередьСкопированныхНастроек()
	Если ТекущийРежимЗапуска() = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОчередьНастроек = ХранилищеОбщихНастроек.Загрузить("ОчередьНастроек", "НеПримененныеНастройки");
	Если ТипЗнч(ОчередьНастроек) <> Тип("ХранилищеЗначения") Тогда
		Возврат;
	КонецЕсли;
	ОчередьНастроек = ОчередьНастроек.Получить();
	Если ТипЗнч(ОчередьНастроек) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;

	Для Каждого ЭлементОчереди Из ОчередьНастроек Цикл
		Попытка
			Настройка = ХранилищеСистемныхНастроек.Загрузить(ЭлементОчереди.Ключ, ЭлементОчереди.Значение);
		Исключение
			Продолжить;
		КонецПопытки;
		ХранилищеСистемныхНастроек.Сохранить(ЭлементОчереди.Ключ, ЭлементОчереди.Значение, Настройка);
	КонецЦикла;

	ХранилищеОбщихНастроек.Сохранить("ОчередьНастроек", "НеПримененныеНастройки", Неопределено);
КонецПроцедуры

Процедура СП_ВыполнитьОбработчикиУстановкиПараметровСеанса(ИменаПараметровСеанса, Обработчики, УстановленныеПараметры)
	// Массив с ключами параметров сеанса
	// задаются начальным словом в имени параметра сеанса и символом "*".
	ПараметрыСеансаКлючи = Новый Массив;

	Для Каждого Запись Из Обработчики Цикл
		Если СтрНайти(Запись.Ключ, "*") > 0 Тогда
			КлючПараметра = СокрЛП(Запись.Ключ);
			ПараметрыСеансаКлючи.Добавить(Лев(КлючПараметра, СтрДлина(КлючПараметра)-1));
		КонецЕсли;
	КонецЦикла;

	Для каждого ИмяПараметра Из ИменаПараметровСеанса Цикл
		Если УстановленныеПараметры.Найти(ИмяПараметра) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Обработчик = Обработчики.Получить(ИмяПараметра);
		Если Обработчик <> Неопределено Тогда
			ПараметрыОбработчика = Новый Массив();
			ПараметрыОбработчика.Добавить(ИмяПараметра);
			ПараметрыОбработчика.Добавить(УстановленныеПараметры);
			ОН_ВыполнитьМетодКонфигурации(Обработчик, ПараметрыОбработчика);
			Продолжить;
		КонецЕсли;

		Для Каждого ИмяКлючаПараметра Из ПараметрыСеансаКлючи Цикл
			Если СтрНачинаетсяС(ИмяПараметра, ИмяКлючаПараметра) Тогда
				Обработчик = Обработчики.Получить(ИмяКлючаПараметра + "*");
				ПараметрыОбработчика = Новый Массив();
				ПараметрыОбработчика.Добавить(ИмяПараметра);
				ПараметрыОбработчика.Добавить(УстановленныеПараметры);
				ОН_ВыполнитьМетодКонфигурации(Обработчик, ПараметрыОбработчика);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция СП_ЭтоТаблицаРегистра(ИмяТаблицы) Экспорт
	ВРегИмяТаблицы = ВРег(ИмяТаблицы);
	Если СтрНачинаетсяС(ВРегИмяТаблицы, ВРег("РегистрСведений"))
		Или СтрНачинаетсяС(ВРегИмяТаблицы, ВРег("РегистрНакопления"))
		Или СтрНачинаетсяС(ВРегИмяТаблицы, ВРег("РегистрБухгалтерии"))
		Или СтрНачинаетсяС(ВРегИмяТаблицы, ВРег("РегистрРасчета")) Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Функция СП_ВерсияПрограммыОбновленаДинамически() Экспорт
	Если Не КонфигурацияБазыДанныхИзмененаДинамически() Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Не ОбновлениеВерсииИБСерверПовтИсп.сОИБ_НеобходимоОбновлениеИнформационнойБазы();
КонецФункции

Процедура СП_ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	// ТолькоДляАдминистраторовСистемы.
	НазначениеРолей.ТолькоДляАдминистраторовСистемы.Добавить(Метаданные.Роли.АдминистраторСистемы.Имя);
	НазначениеРолей.ТолькоДляАдминистраторовСистемы.Добавить(Метаданные.Роли.Администрирование.Имя);
	НазначениеРолей.ТолькоДляАдминистраторовСистемы.Добавить(Метаданные.Роли.ОбновлениеКонфигурацииБазыДанных.Имя);

	// ТолькоДляПользователейСистемы.
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(Метаданные.Роли.ЗапускТолстогоКлиента.Имя);
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(Метаданные.Роли.ЗапускВнешнегоСоединения.Имя);
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(Метаданные.Роли.ЗапускAutomation.Имя);
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(Метаданные.Роли.РежимВсеФункции.Имя);
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(Метаданные.Роли.ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок.Имя);

	// ТолькоДляВнешнихПользователей.
	НазначениеРолей.ТолькоДляВнешнихПользователей.Добавить(Метаданные.Роли.БазовыеПраваВнешнихПользователей.Имя);

	// СовместноДляПользователейИВнешнихПользователей.
	НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Добавить(Метаданные.Роли.ЗапускТонкогоКлиента.Имя);
	НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Добавить(Метаданные.Роли.ЗапускВебКлиента.Имя);
	НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Добавить(Метаданные.Роли.ЗапускМобильногоКлиента.Имя);
	НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Добавить(Метаданные.Роли.ВыводНаПринтерФайлБуферОбмена.Имя);
	НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Добавить(Метаданные.Роли.СохранениеДанныхПользователя.Имя);
КонецПроцедуры

Процедура СП_УстановитьПараметрыАдминистрирования(ПараметрыАдминистрированияИБ) Экспорт
	ПараметрыАдминистрированияИБ.ПарольАдминистратораКластера			= "";
	ПараметрыАдминистрированияИБ.ПарольАдминистратораИнформационнойБазы	= "";
	Константы.ПараметрыАдминистрированияИБ.Установить(Новый ХранилищеЗначения(ПараметрыАдминистрированияИБ));
КонецПроцедуры

Функция СП_ПараметрыАдминистрирования() Экспорт
	Если Не ПользователиСервер.П_ЭтоПолноправныйПользователь(, Истина) Тогда
		ВызватьИсключение "Недостаточно прав для выполнения операции";
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	ПараметрыАдминистрированияИБ = Константы.ПараметрыАдминистрированияИБ.Получить().Получить();
	ПараметрыАдминистрированияПоУмолчанию = СП_ПараметрыАдминистрированияПоУмолчанию();

	Если ТипЗнч(ПараметрыАдминистрированияИБ) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыАдминистрированияПоУмолчанию, ПараметрыАдминистрированияИБ);
	КонецЕсли;
	ПараметрыАдминистрированияИБ = ПараметрыАдминистрированияПоУмолчанию;

	Если Не ОН_ИнформационнаяБазаФайловая() Тогда
		СП_ПрочитатьПараметрыИзСтрокиСоединения(ПараметрыАдминистрированияИБ);
	КонецЕсли;

	Возврат ПараметрыАдминистрированияИБ;
КонецФункции

Функция СП_ПараметрыАдминистрированияПоУмолчанию()
	ПараметрыАдминистрированияКластера	= АК_ПараметрыАдминистрированияКластера();
	ПараметрыАдминистрированияИБ		= АК_ПараметрыАдминистрированияИнформационнойБазыКластера();

	// Объединяем структуры параметров.
	СтруктураПараметровАдминистрирования = ПараметрыАдминистрированияКластера;
	Для Каждого Элемент Из ПараметрыАдминистрированияИБ Цикл
		СтруктураПараметровАдминистрирования.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;

	СтруктураПараметровАдминистрирования.Вставить("ПринятоРешениеПоОткрытиюВнешнихОтчетовИОбработок", Ложь);

	Возврат СтруктураПараметровАдминистрирования;
КонецФункции

Процедура СП_ПрочитатьПараметрыИзСтрокиСоединения(СтруктураПараметровАдминистрирования)
	ПодстрокиСтрокиСоединения = СтрРазделить(СтрокаСоединенияИнформационнойБазы(), ";");

	СтрокаИмениСервера									= БазоваяПодсистемаКлиентСервер.СФ_СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[0], 7));
	СтруктураПараметровАдминистрирования.ИмяВКластере	= БазоваяПодсистемаКлиентСервер.СФ_СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[1], 6));

	СписокСерверовКластера = СтрРазделить(СтрокаИмениСервера, ",");
	Если СписокСерверовКластера.Количество() = 1 Тогда
		СписокСерверовКластера = СтрРазделить(СтрокаИмениСервера, ";");
	КонецЕсли;

	ИмяСервера = СписокСерверовКластера[0];

	// Протокол может быть только tcp. Можно отбросить.
	Если СтрНачинаетсяС(ВРег(ИмяСервера), "TCP://") Тогда
		ИмяСервера = Сред(ИмяСервера, 7);
	КонецЕсли;

	// Если в качестве имени сервера передается адрес IPv6, то порт может быть только после закрывающей квадратной скобки.
	НачальнаяПозиция = СтрНайти(ИмяСервера, "]");
	Если НачальнаяПозиция <> 0 Тогда
		РазделительПорта = СтрНайти(ИмяСервера, ":",, НачальнаяПозиция);
	Иначе
		РазделительПорта = СтрНайти(ИмяСервера, ":");
	КонецЕсли;

	Если РазделительПорта > 0 Тогда
		АдресАгентаСервера	= Сред(ИмяСервера, 1, РазделительПорта - 1);
		ПортКластера		= Число(Сред(ИмяСервера, РазделительПорта + 1));
		Если СтруктураПараметровАдминистрирования.ПортКластера = 1541 Тогда
			СтруктураПараметровАдминистрирования.ПортКластера = ПортКластера;
		КонецЕсли;
	Иначе
		АдресАгентаСервера = ИмяСервера;
	КонецЕсли;

	СтруктураПараметровАдминистрирования.АдресАгентаСервера = АдресАгентаСервера;
КонецПроцедуры

Процедура СП_УстановитьКлючНазначенияФормы(Форма, Ключ, КлючПоложения = "", УстановитьНастройки = Истина) Экспорт
	СП_УстановитьКлючНазначенияИспользованияФормы(Форма, Ключ, УстановитьНастройки);
	СП_УстановитьКлючСохраненияПоложенияОкнаФормы(Форма, ?(КлючПоложения = "", Ключ, КлючПоложения), УстановитьНастройки);
КонецПроцедуры

Процедура СП_УстановитьКлючНазначенияИспользованияФормы(Форма, Ключ, УстановитьНастройки)
	Если Не ЗначениеЗаполнено(Ключ) Или Форма.КлючНазначенияИспользования = Ключ Тогда
		Возврат;
	КонецЕсли;

	Если Не УстановитьНастройки Тогда
		Форма.КлючНазначенияИспользования = Ключ;

		Возврат;
	КонецЕсли;

	ТипыНастроек = Новый Массив;
	// Русский вариант.
	ТипыНастроек.Добавить("/КлючТекущегоВарианта");
	ТипыНастроек.Добавить("/КлючТекущихПользовательскихНастроек");
	ТипыНастроек.Добавить("/ТекущиеПользовательскиеНастройки");
	ТипыНастроек.Добавить("/КлючТекущихНастроекДанных");
	ТипыНастроек.Добавить("/ТекущиеДанные");
	ТипыНастроек.Добавить("/НастройкиФормы");
	// Английский вариант.
	ТипыНастроек.Добавить("/CurrentVariantKey");
	ТипыНастроек.Добавить("/CurrentUserSettingsKey");
	ТипыНастроек.Добавить("/CurrentUserSettings");
	ТипыНастроек.Добавить("/CurrentDataSettingsKey");
	ТипыНастроек.Добавить("/CurrentData");
	ТипыНастроек.Добавить("/FormSettings");
	Если ХранилищеСистемныхНастроек.Загрузить(Ключ, "КлючНазначенияИспользованияФормы") <> Истина
		 И ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		СП_УстановитьНастройкиДляКлюча(Ключ, ТипыНастроек, Форма.ИмяФормы, Форма.КлючНазначенияИспользования);
		ХранилищеСистемныхНастроек.Сохранить(Ключ, "КлючНазначенияИспользованияФормы", Истина);
	КонецЕсли;

	Форма.КлючНазначенияИспользования = Ключ;
КонецПроцедуры

Процедура СП_УстановитьКлючСохраненияПоложенияОкнаФормы(Форма, Ключ, УстановитьНастройки)
	Если Не ЗначениеЗаполнено(Ключ) Или Форма.КлючСохраненияПоложенияОкна = Ключ Тогда
		Возврат;
	КонецЕсли;

	Если Не УстановитьНастройки Тогда
		Форма.КлючСохраненияПоложенияОкна = Ключ;

		Возврат;
	КонецЕсли;

	ТипыНастроек = Новый Массив;
	// Русский вариант.
	ТипыНастроек.Добавить("/НастройкиОкна");
	ТипыНастроек.Добавить("/Такси/НастройкиОкна");
	ТипыНастроек.Добавить("/НастройкиОкнаВебКлиента");
	ТипыНастроек.Добавить("/Такси/НастройкиОкнаВебКлиента");
	// Английский вариант.
	ТипыНастроек.Добавить("/WindowSettings");
	ТипыНастроек.Добавить("/Taxi/WindowSettings");
	ТипыНастроек.Добавить("/WebClientWindowSettings");
	ТипыНастроек.Добавить("/Taxi/WebClientWindowSettings");

	Если ХранилищеСистемныхНастроек.Загрузить(Ключ, "КлючСохраненияПоложенияОкнаФормы") <> Истина
		И ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		СП_УстановитьНастройкиДляКлюча(Ключ, ТипыНастроек, Форма.ИмяФормы, Форма.КлючСохраненияПоложенияОкна);
		ХранилищеСистемныхНастроек.Сохранить(Ключ, "КлючСохраненияПоложенияОкнаФормы", Истина);
	КонецЕсли;

	Форма.КлючСохраненияПоложенияОкна = Ключ;
КонецПроцедуры

Процедура СП_УстановитьНастройкиДляКлюча(Ключ, ТипыНастроек, ИмяФормы, ТекущийКлюч)
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;

	НовыйКлюч = "/" + Ключ;
	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);

	Для каждого ТипНастроек Из ТипыНастроек Цикл
		Отбор.Вставить("КлючОбъекта", ИмяФормы + НовыйКлюч + ТипНастроек);
		Выборка = ХранилищеСистемныхНастроек.Выбрать(Отбор);
		Если Выборка.Следующий() Тогда
			Возврат; // Настройки для ключа уже установлены.
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(ТекущийКлюч) Тогда
		ТекущийКлюч = "/" + ТекущийКлюч;
	КонецЕсли;

	// Установка начальных настроек ключа копированием от текущего ключа.
	Для Каждого ТипНастроек Из ТипыНастроек Цикл
		Отбор.Вставить("КлючОбъекта", ИмяФормы + ТекущийКлюч + ТипНастроек);
		Выборка		= ХранилищеСистемныхНастроек.Выбрать(Отбор);
		КлючОбъекта	= ИмяФормы + НовыйКлюч + ТипНастроек;
		Пока Выборка.Следующий() Цикл
			ОписаниеНастроек				= Новый ОписаниеНастроек;
			ОписаниеНастроек.Представление	= Выборка.Представление;
			ХранилищеСистемныхНастроек.Сохранить(КлючОбъекта, Выборка.КлючНастроек, Выборка.Настройки, ОписаниеНастроек);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция СП_ЭлементыСтиля() Экспорт
	НаборЭлементовСтиля = Новый Структура;
	Для каждого ЭлементСтиля Из Метаданные.ЭлементыСтиля Цикл
		НаборЭлементовСтиля.Вставить(ЭлементСтиля.Имя, ЭлементСтиля.Значение);
	КонецЦикла;

	Возврат Новый ФиксированнаяСтруктура(НаборЭлементовСтиля);
КонецФункции

Функция СП_УточнениеОшибкиПараметровРаботыПрограммыДляРазработчика() Экспорт
	Возврат Символы.ПС + Символы.ПС + "Для разработчика: возможно требуется обновить вспомогательные данные,
					|которые влияют на работу программы. Для выполнения обновления можно:
					|- воспользоваться внешней обработкой
					|  ""Инструменты разработчика: Обновление вспомогательных данных"",
					|- либо запустить программу с параметром командной строки 1С:Предприятия 8
					|  ""/С ЗапуститьОбновлениеИнформационнойБазы"",
					|- либо увеличить номер версии конфигурации, чтобы при очередном запуске
					|  выполнились процедуры обновления данных информационной базы.";
КонецФункции

Процедура СП_ПроверитьДинамическоеОбновлениеВерсииПрограммы() Экспорт
	Если СП_ВерсияПрограммыОбновленаДинамически() Тогда
		ВызватьИсключение "Версия программы обновлена, требуется перезапустить сеанс.";
	КонецЕсли;
КонецПроцедуры

Процедура СП_ЗарегистрироватьОбъектНаВсехУзлах(Знач Объект, Знач ИмяПланаОбмена, Знач ВключаяГлавныйУзел = Истина) Экспорт
	Если Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав.Найти(Объект.Метаданные()) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПланОбмена.Ссылка КАК Получатель
		|ИЗ
		|	#ТаблицаПланаОбмена КАК ПланОбмена
		|ГДЕ
		|	НЕ ПланОбмена.ЭтотУзел
		|	И НЕ ПланОбмена.ПометкаУдаления";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаПланаОбмена", "ПланОбмена." + ИмяПланаОбмена);

	Получатели = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Получатель");

	ГлавныйУзел = ПланыОбмена.ГлавныйУзел();

	Для Каждого Получатель Из Получатели Цикл
		Если Не ВключаяГлавныйУзел И Получатель = ГлавныйУзел Тогда
			Продолжить;
		КонецЕсли;
		Объект.ОбменДанными.Получатели.Добавить(Получатель);
	КонецЦикла;
КонецПроцедуры

Функция СП_ИдентификаторИнформационнойБазы() Экспорт
	ИдентификаторИнформационнойБазы = Константы.ИдентификаторИнформационнойБазы.Получить();

	Если ПустаяСтрока(ИдентификаторИнформационнойБазы) Тогда
		ИдентификаторИнформационнойБазы = Строка(Новый УникальныйИдентификатор());

		УстановитьОтключениеБезопасногоРежима(Истина);
		УстановитьПривилегированныйРежим(Истина);

		Константы.ИдентификаторИнформационнойБазы.Установить(ИдентификаторИнформационнойБазы);

		УстановитьПривилегированныйРежим(Ложь);
		УстановитьОтключениеБезопасногоРежима(Ложь);
	КонецЕсли;

	Возврат ИдентификаторИнформационнойБазы;
КонецФункции

Процедура СП_УдалениеУстаревшихПараметровРаботыВерсийРасширенийОбработчикЗадания() Экспорт
	ОН_ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.УдалениеУстаревшихПараметровРаботыВерсийРасширений);

	УстановитьПривилегированныйРежим(Истина);
	Справочники.ВерсииРасширений.УдалитьУстаревшиеВерсииПараметров();
КонецПроцедуры

Функция СП_ТекстСообщенияПриДинамическомОбновлении(ДинамическиеИзмененияКонфигурации) Экспорт
	Сообщения							= Новый Массив;
	ДинамическиеИзмененияКонфигурации	= ДинамическиеИзмененияКонфигурации;
	Если ДинамическиеИзмененияКонфигурации.КонфигурацияБазыДанныхИзмененаДинамически Тогда
		ТекстСообщенияКонфигурация		= "Версия программы обновлена (внесены изменения в конфигурацию информационной базы).";
		Сообщения.Добавить(ТекстСообщенияКонфигурация);
	КонецЕсли;

	Если ДинамическиеИзмененияКонфигурации.Исправления <> Неопределено Тогда
		Если ДинамическиеИзмененияКонфигурации.Исправления.Добавлено > 0 И ДинамическиеИзмененияКонфигурации.Исправления.Удалено > 0 Тогда
			ТекстСообщенияПатчи = "Установлены новые исправления (патчи): %1, удалены: %2.Ссылка";
		ИначеЕсли ДинамическиеИзмененияКонфигурации.Исправления.Добавлено = 1 Тогда
			ТекстСообщенияПатчи = НСтр("ru = 'Установлено новое исправление (патч).'") + "Ссылка";
		ИначеЕсли ДинамическиеИзмененияКонфигурации.Исправления.Добавлено > 0 Тогда
			ТекстСообщенияПатчи = "Установлены новые исправления (патчи): %1.Ссылка";
		ИначеЕсли ДинамическиеИзмененияКонфигурации.Исправления.Удалено > 0 Тогда
			ТекстСообщенияПатчи = "Удалены исправления (патчи): %2.";
		КонецЕсли;
		ТекстСообщенияПатчи = СтрШаблон(ТекстСообщенияПатчи, ДинамическиеИзмененияКонфигурации.Исправления.Добавлено, ДинамическиеИзмененияКонфигурации.Исправления.Удалено);
		Сообщения.Добавить(ТекстСообщенияПатчи);
	КонецЕсли;

	Если ДинамическиеИзмененияКонфигурации.Расширения <> Неопределено Тогда
		Если ДинамическиеИзмененияКонфигурации.Расширения.Добавлено > 0 Тогда
			ТекстСообщенияРасширения = "Установлены новые расширения: %1.";
			ТекстСообщенияРасширения = СтрШаблон(ТекстСообщенияРасширения, ДинамическиеИзмененияКонфигурации.Расширения.Добавлено);
			Сообщения.Добавить(ТекстСообщенияРасширения);
		КонецЕсли;

		Если ДинамическиеИзмененияКонфигурации.Расширения.Удалено > 0 Тогда
			ТекстСообщенияРасширения = "Удалены расширения: %1.";
			ТекстСообщенияРасширения = СтрШаблон(ТекстСообщенияРасширения, ДинамическиеИзмененияКонфигурации.Расширения.Удалено);
			Сообщения.Добавить(ТекстСообщенияРасширения);
		КонецЕсли;

		Если ДинамическиеИзмененияКонфигурации.Расширения.Изменено > 0 Тогда
			ТекстСообщенияРасширения = "Изменены расширения: %1.";
			ТекстСообщенияРасширения = СтрШаблон(ТекстСообщенияРасширения, ДинамическиеИзмененияКонфигурации.Расширения.Изменено);
			Сообщения.Добавить(ТекстСообщенияРасширения);
		КонецЕсли;
	КонецЕсли;

	Сообщения.Добавить("Для того чтобы применить, рекомендуется перезапустить программу и продолжить работу.");
	Сообщения.Добавить(" ");

	Возврат СтрСоединить(Сообщения, Символы.ПС);
КонецФункции

Функция СП_ПоказыватьПредупреждениеОбУстановленныхОбновленияхПрограммы() Экспорт
	Результат = ОН_ХранилищеЗагрузить(ХранилищеОбщихНастроек, "ОбщиеНастройкиПользователя", "ПоказыватьПредупреждениеОбУстановленныхОбновленияхПрограммы", Неопределено, Неопределено, Неопределено);

	Если Результат = Неопределено Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Процедура СП_ВосстановитьПредопределенныеЭлементы() Экспорт
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		ВызватьИсключение "Восстановление предопределенных элементов следует выполнять только в главном узле РИБ.
			           |Затем выполнить синхронизацию с подчиненными узлами.";
	КонецЕсли;

	ОбъектыМетаданных = СП_ОбъектыМетаданныхВсехПредопределенныхДанных();
	Блокировка = Новый БлокировкаДанных;
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		Блокировка.Добавить(ОбъектМетаданных.ПолноеИмя());
	КонецЦикла;

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();

		СП_УстановитьИнициализациюВсехПредопределенныхДанных(ОбъектыМетаданных);

		СП_СоздатьНедостающиеПредопределенныеДанные(ОбъектыМетаданных);

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Функция СП_ОбъектыМетаданныхВсехПредопределенныхДанных()
	КоллекцииМетаданных = Новый Массив;
	КоллекцииМетаданных.Добавить(Метаданные.Справочники);
	КоллекцииМетаданных.Добавить(Метаданные.ПланыВидовХарактеристик);
	КоллекцииМетаданных.Добавить(Метаданные.ПланыСчетов);
	КоллекцииМетаданных.Добавить(Метаданные.ПланыВидовРасчета);

	ОбъектыМетаданных = Новый Массив;

	Для Каждого Коллекция Из КоллекцииМетаданных Цикл
		Для Каждого ОбъектМетаданных Из Коллекция Цикл
			ОбъектыМетаданных.Добавить(ОбъектМетаданных);
		КонецЦикла;
	КонецЦикла;

	Возврат ОбъектыМетаданных;
КонецФункции

Процедура СП_УстановитьИнициализациюВсехПредопределенныхДанных(ОбъектыМетаданных)
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		Менеджер = ОН_МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		Менеджер.УстановитьИнициализациюПредопределенныхДанных(Истина)
	КонецЦикла;

	УстановитьОбновлениеПредопределенныхДанныхИнформационнойБазы(ОбновлениеПредопределенныхДанных.Авто);
КонецПроцедуры

Процедура СП_СоздатьНедостающиеПредопределенныеДанные(ОбъектыМетаданных)
	Запрос			= Новый Запрос;
	ТекстЗапроса	=
		"ВЫБРАТЬ
		|	ПсевдонимЗаданнойТаблицы.Ссылка КАК Ссылка,
		|	ПсевдонимЗаданнойТаблицы.ВерсияДанных КАК ВерсияДанных,
		|	ЕСТЬNULL(ПсевдонимЗаданнойТаблицы.Родитель.ИмяПредопределенныхДанных, """") КАК ИмяРодителя,
		|	ПсевдонимЗаданнойТаблицы.ИмяПредопределенныхДанных КАК Имя
		|ИЗ
		|	&ТекущаяТаблица КАК ПсевдонимЗаданнойТаблицы
		|ГДЕ
		|	ПсевдонимЗаданнойТаблицы.Предопределенный";

	ОписанияСохраненных	= Новый Массив;
	ТаблицыБезСохраненных = Новый Массив;
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		Если ОбъектМетаданных.ОбновлениеПредопределенныхДанных = Метаданные.СвойстваОбъектов.ОбновлениеПредопределенныхДанных.НеОбновлятьАвтоматически Тогда
			Продолжить;
		КонецЕсли;

		ПолноеИмя		= ОбъектМетаданных.ПолноеИмя();
		Запрос.Текст	= СтрЗаменить(ТекстЗапроса, "&ТекущаяТаблица", ПолноеИмя);

		Если Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Или Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Или Не ОбъектМетаданных.Иерархический Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЕСТЬNULL(ПсевдонимЗаданнойТаблицы.Родитель.ИмяПредопределенныхДанных, """")", """""");
		КонецЕсли;

		// АПК:1328-выкл - №648.1.1 В вызывающей процедуре установлена исключительная блокировка.
		ТаблицаИмен		= Запрос.Выполнить().Выгрузить();
		// АПК:1328-вкл.
		ТаблицаИмен.Индексы.Добавить("Имя");
		Имена			= ОбъектМетаданных.ПолучитьИменаПредопределенных();
		СП_СохранитьСуществующиеПредопределенныеОбъектыПередСозданиемНедостающих(ОбъектМетаданных, ПолноеИмя, ТаблицаИмен, Имена, Запрос, ОписанияСохраненных, ТаблицыБезСохраненных);
	КонецЦикла;

	// Восстановление предопределенных элементов, существовавших до инициализации.
	Для Каждого ОписаниеСохраненных Из ОписанияСохраненных Цикл
		Менеджер = ОН_МенеджерОбъектаПоПолномуИмени(ОписаниеСохраненных.ПолноеИмя);
		Менеджер.УстановитьИнициализациюПредопределенныхДанных(Ложь);
		ИнициализироватьПредопределенныеДанные();

		Запрос.Текст	= ОписаниеСохраненных.ТекстЗапроса;
		// АПК:1328-выкл - №648.1.1 В вызывающей процедуре установлена исключительная блокировка.
		ТаблицаИмен		= Запрос.Выполнить().Выгрузить();
		// АПК:1328-вкл.
		ТаблицаИмен.Индексы.Добавить("Имя");
		Для Каждого ОписаниеСохраненного Из ОписаниеСохраненных.ТаблицаИмен Цикл
			Если Не ОписаниеСохраненного.ОбъектСуществует Тогда
				Продолжить;
			КонецЕсли;
			Строка = ТаблицаИмен.Найти(ОписаниеСохраненного.Имя, "Имя");
			Если Строка <> Неопределено Тогда
				НовыйОбъект = Строка.Ссылка.ПолучитьОбъект();
				Если ОписаниеСохраненных.ЭтоПланСчетов Тогда
					Если ОписаниеСохраненного.Объект.ВерсияДанных <> Строка.ВерсияДанных Тогда
						СП_ОбновитьОбъектСчета(ОписаниеСохраненного.Объект);
					КонецЕсли;
					СП_ДополнитьНовыеВидыСубконтоСчета(ОписаниеСохраненного.Объект, НовыйОбъект);
				КонецЕсли;
				// АПК:1327-выкл - №648.1.1 В вызывающей процедуре установлена исключительная блокировка.
				ОбновлениеВерсииИБСервер.ОИБ_УдалитьДанные(НовыйОбъект);
				// АПК:1327-вкл.
				Строка.Имя = "";
			КонецЕсли;
			// АПК:1327-выкл - №648.1.1 В вызывающей процедуре установлена исключительная блокировка.
			ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьДанные(ОписаниеСохраненного.Объект);
			// АПК:1327-вкл
		КонецЦикла;
		Для Каждого Строка Из ТаблицаИмен Цикл
			Если Не ЗначениеЗаполнено(Строка.Имя) Или Не ЗначениеЗаполнено(Строка.ИмяРодителя) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаРодителя = ОписаниеСохраненных.ТаблицаИмен.Найти(Строка.ИмяРодителя, "Имя"); // СправочникСсылка, ПланВидовХарактеристикСсылка, ПланСчетовСсылка, ПланВидовРасчетаСсылка
			Если СтрокаРодителя <> Неопределено Тогда
				НовыйОбъект				= Строка.Ссылка.ПолучитьОбъект();
				НовыйОбъект.Родитель	= СтрокаРодителя.Ссылка;
				// АПК:1327-выкл - №648.1.1 В вызывающей процедуре установлена исключительная блокировка.
				ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьДанные(НовыйОбъект);
				// АПК:1327-вкл.
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Для Каждого ПолноеИмя Из ТаблицыБезСохраненных Цикл
		Менеджер = ОН_МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		Менеджер.УстановитьИнициализациюПредопределенныхДанных(Ложь);
	КонецЦикла;

	ИнициализироватьПредопределенныеДанные();
КонецПроцедуры

Процедура СП_ОбновитьОбъектСчета(СтарыйОбъект)
	НовыйОбъект								= СтарыйОбъект.Ссылка.ПолучитьОбъект();
	НовыйОбъект.ИмяПредопределенныхДанных	= СтарыйОбъект.ИмяПредопределенныхДанных;
	Для Каждого СтрокаВидаСубконто Из СтарыйОбъект.ВидыСубконто Цикл
		Если СтрокаВидаСубконто.Предопределенное Тогда
			НоваяСтрокаВидаСубконто = НовыйОбъект.ВидыСубконто.Найти(СтрокаВидаСубконто.ВидСубконто, "ВидСубконто");
			Если НоваяСтрокаВидаСубконто <> Неопределено Тогда
				НоваяСтрокаВидаСубконто.Предопределенное = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	СтарыйОбъект = НовыйОбъект;
КонецПроцедуры

Процедура СП_ДополнитьНовыеВидыСубконтоСчета(Счет, ОбразецСчета)
	Для Каждого Строка Из ОбразецСчета.ВидыСубконто Цикл
		Индекс	= ОбразецСчета.ВидыСубконто.Индекс(Строка);
		Если Счет.ВидыСубконто.Количество() > Индекс Тогда
			Если Счет.ВидыСубконто[Индекс].ВидСубконто <> Строка.ВидСубконто Тогда
				ЗаписьЖурналаРегистрации("Обмен данными.Отключение связи с главным узлом'",
					УровеньЖурналаРегистрации.Ошибка,
					Счет.Метаданные(),
					Счет,
					СтрШаблон("У счета ""%1"" субконто №%2 ""%3"" не совпадает с предопределенным субконто ""%4"".",
						Строка(Счет),
						Индекс + 1,
						Строка(Счет.ВидыСубконто[Индекс].ВидСубконто),
						Строка(Строка.ВидСубконто)),
					РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
			ИначеЕсли Не Счет.ВидыСубконто[Индекс].Предопределенное Тогда
				Счет.ВидыСубконто[Индекс].Предопределенное = Истина;
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(Счет.ВидыСубконто.Добавить(), Строка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СП_СохранитьСуществующиеПредопределенныеОбъектыПередСозданиемНедостающих(ОбъектМетаданных, ПолноеИмя, ТаблицаИмен, Имена, Запрос, ОписанияСохраненных, ТаблицыБезСохраненных)
	ТребуетсяИнициализация		= Ложь;
	ПредопределенныеСуществуют	= Ложь;
	ТаблицаИмен.Колонки.Добавить("ОбъектСуществует", Новый ОписаниеТипов("Булево"));

	Для Каждого Имя Из Имена Цикл
		Строки = ТаблицаИмен.НайтиСтроки(Новый Структура("Имя", Имя));
		Если Строки.Количество() = 0 Тогда
			ТребуетсяИнициализация = Истина;
		Иначе
			Для Каждого Строка Из Строки Цикл
				Строка.ОбъектСуществует = Истина;
			КонецЦикла;
			ПредопределенныеСуществуют = Истина;
		КонецЕсли;
	КонецЦикла;

	Если Не ТребуетсяИнициализация Тогда
		Возврат;
	КонецЕсли;

	Если ПредопределенныеСуществуют Тогда
		ЭтоПланСчетов = Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных);

		ОписаниеСохраненных = Новый Структура;
		ОписаниеСохраненных.Вставить("ПолноеИмя",     ПолноеИмя);
		ОписаниеСохраненных.Вставить("ТекстЗапроса",  Запрос.Текст);
		ОписаниеСохраненных.Вставить("ТаблицаИмен",   ТаблицаИмен);
		ОписаниеСохраненных.Вставить("ЭтоПланСчетов", ЭтоПланСчетов);
		ОписанияСохраненных.Добавить(ОписаниеСохраненных);

		ТаблицаИмен.Колонки.Добавить("Объект");
		Для Каждого Строка Из ТаблицаИмен Цикл
			Объект								= Строка.Ссылка.ПолучитьОбъект();
			Объект.ИмяПредопределенныхДанных	= "";
			Если ЭтоПланСчетов Тогда
				СтрокиПредопределенныхВидовСубконто = Новый Массив;
				Для Каждого СтрокаВидаСубконто Из Объект.ВидыСубконто Цикл
					Если СтрокаВидаСубконто.Предопределенное Тогда
						СтрокаВидаСубконто.Предопределенное = Ложь;
						СтрокиПредопределенныхВидовСубконто.Добавить(СтрокаВидаСубконто);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			// АПК:1327-выкл - №648.1.1 В вызывающей процедуре установлена исключительная блокировка.
			ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьДанные(Объект);
			// АПК:1327-вкл.
			Если ЭтоПланСчетов Тогда
				Для Каждого СтрокаВидаСубконто Из СтрокиПредопределенныхВидовСубконто Цикл
					СтрокаВидаСубконто.Предопределенное = Истина;
				КонецЦикла;
			КонецЕсли;
			Если Строка.ОбъектСуществует Тогда
				Объект.ИмяПредопределенныхДанных = Строка.Имя;
			КонецЕсли;
			Строка.Объект = Объект;
		КонецЦикла;
	Иначе
		ТаблицыБезСохраненных.Добавить(ПолноеИмя);
	КонецЕсли;
КонецПроцедуры

Процедура СП_ЗарегистрироватьИзменениеПриоритетныхДанныхДляПодчиненныхУзловРИБ() Экспорт
	Если ОН_ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;

	Если Не БазоваяПодсистемаСерверПовтИсп.СП_ОтключитьИдентификаторыОбъектовМетаданных() Тогда
		Справочники.ИдентификаторыОбъектовМетаданных.ЗарегистрироватьПолноеИзменениеДляПодчиненныхУзловРИБ();
	КонецЕсли;

	УзлыПлановОбменаРИБ = Новый Соответствие;
	Для Каждого ПланОбмена Из Метаданные.ПланыОбмена Цикл
		Если Не ПланОбмена.РаспределеннаяИнформационнаяБаза Тогда
			Продолжить;
		КонецЕсли;
		УзлыРИБ				= Новый Массив;
		УзлыПлановОбменаРИБ.Вставить(ПланОбмена.Состав, УзлыРИБ);
		ПланОбменаМенеджер	= ОН_МенеджерОбъектаПоПолномуИмени(ПланОбмена.ПолноеИмя());
		Выборка				= ПланОбменаМенеджер.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Ссылка <> ПланОбменаМенеджер.ЭтотУзел() Тогда
				УзлыРИБ.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Если УзлыПлановОбменаРИБ.Количество() > 0 Тогда
		СП_ЗарегистрироватьИзменениеПредопределенных(УзлыПлановОбменаРИБ, Метаданные.Справочники);
		СП_ЗарегистрироватьИзменениеПредопределенных(УзлыПлановОбменаРИБ, Метаданные.ПланыВидовХарактеристик);
		СП_ЗарегистрироватьИзменениеПредопределенных(УзлыПлановОбменаРИБ, Метаданные.ПланыСчетов);
		СП_ЗарегистрироватьИзменениеПредопределенных(УзлыПлановОбменаРИБ, Метаданные.ПланыВидовРасчета);
	КонецЕсли;
КонецПроцедуры

Процедура СП_ЗарегистрироватьИзменениеПредопределенных(УзлыПлановОбменаРИБ, КоллекцияМетаданных)
	Запрос = Новый Запрос;

	Для Каждого ОбъектМетаданных Из КоллекцияМетаданных Цикл
		УзлыРИБ	= Новый Массив;

		Для Каждого УзлыПланаОбмена Из УзлыПлановОбменаРИБ Цикл
			Если Не УзлыПланаОбмена.Ключ.Содержит(ОбъектМетаданных) Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого УзелРИБ Из УзлыПланаОбмена.Значение Цикл
				УзлыРИБ.Добавить(УзелРИБ);
			КонецЦикла;
		КонецЦикла;

		Если УзлыРИБ.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТекущаяТаблица.Ссылка КАК Ссылка
		|ИЗ
		|	&ТекущаяТаблица КАК ТекущаяТаблица
		|ГДЕ
		|	ТекущаяТаблица.Предопределенный";
		Запрос.Текст	= СтрЗаменить(Запрос.Текст, "&ТекущаяТаблица", ОбъектМетаданных.ПолноеИмя());
		Выборка			= Запрос.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(УзлыРИБ, Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура СП_ПометитьЗаписиКэшаВерсийНеактуальными() Экспорт
	НачатьТранзакцию();
	Попытка
		НаборЗаписей	= РегистрыСведений.КэшПрограммныхИнтерфейсов.СоздатьНаборЗаписей();

		Блокировка		= Новый БлокировкаДанных;
		Блокировка.Добавить("РегистрСведений.КэшПрограммныхИнтерфейсов");
		Блокировка.Заблокировать();

		НаборЗаписей.Прочитать();
		Для каждого Запись Из НаборЗаписей Цикл
			Запись.ДатаОбновления = Неопределено;
		КонецЦикла;

		ОбновлениеВерсииИБСервер.ОИБ_ЗаписатьДанные(НаборЗаписей);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Функция СП_ЯзыкиКонфигурации() Экспорт
	Языки = Новый Массив;
	Для каждого Язык Из Метаданные.Языки Цикл
		Языки.Добавить(Язык.КодЯзыка);
	КонецЦикла;

	Возврат Языки;
КонецФункции

Процедура СП_ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	Обработчик					= Обработчики.Добавить();
	Обработчик.Версия			= "*";
	Обработчик.Процедура		= "БазоваяПодсистемаСервер.СП_ПометитьЗаписиКэшаВерсийНеактуальными";
	Обработчик.Приоритет		= 99;
	Обработчик.ОбщиеДанные		= Истина;
	Обработчик.МонопольныйРежим	= Ложь;

	Обработчик						= Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение	= Истина;
	Обработчик.Процедура			= "ОбновлениеВерсииИБСервер.сОИБ_НачальноеЗаполнениеПредопределенныхДанных";
КонецПроцедуры

#КонецОбласти

#Область АдминистрированиеКластера

Функция АК_ПараметрыАдминистрированияКластера() Экспорт
	Результат = Новый Структура;

	Результат.Вставить("ТипПодключения",				"COM"); // "COM" или "RAS"

	// Только для "COM"
	Результат.Вставить("АдресАгентаСервера",			"");
	Результат.Вставить("ПортАгентаСервера",				1540);

	// Только для "RAS"
	Результат.Вставить("АдресСервераАдминистрирования",	"");
	Результат.Вставить("ПортСервераАдминистрирования",	1545);

	Результат.Вставить("ПортКластера",					1541);
	Результат.Вставить("ИмяАдминистратораКластера",		"");
	Результат.Вставить("ПарольАдминистратораКластера",	"");

	Возврат Результат;
КонецФункции

Функция АК_ПараметрыАдминистрированияИнформационнойБазыКластера() Экспорт
	Результат = Новый Структура;

	Результат.Вставить("ИмяВКластере",								"");
	Результат.Вставить("ИмяАдминистратораИнформационнойБазы",		"");
	Результат.Вставить("ПарольАдминистратораИнформационнойБазы",	"");

	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ДлительныеОперации

Процедура ДО_УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	Если ИмяПараметра = "ОтмененныеДлительныеОперации" Тогда
		ПараметрыСеанса.ОтмененныеДлительныеОперации = Новый ФиксированныйМассив(Новый Массив);
		УстановленныеПараметры.Добавить("ОтмененныеДлительныеОперации");
	КонецЕсли;
КонецПроцедуры

Функция ДО_ВыполнитьФункцию(Знач ПараметрыВыполнения, ИмяФункции, Знач Параметр1 = Неопределено,
	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено, Знач Параметр4 = Неопределено,
	Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено, Знач Параметр7 = Неопределено) Экспорт

	ПараметрыВызова = ДО_СписокПараметров(Параметр1, Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7);

	ПараметрыВыполнения = ДО_ПодготовитьПараметрыВыполнения(ПараметрыВыполнения, Истина);

	Возврат ДО_ВыполнитьВФоне(ИмяФункции, ПараметрыВызова, ПараметрыВыполнения);
КонецФункции

Функция ДО_ПараметрыВыполненияФункции(Знач ИдентификаторФормы) Экспорт
	Результат = ДО_ОбщиеПараметрыВыполненияВФоне();
	ДО_ДобавитьПараметрыВыполненияДляВозвратаРезультата(Результат, ИдентификаторФормы);

	Возврат Результат;
КонецФункции

Процедура ДО_СообщитьПрогресс(Знач Процент = Неопределено, Знач Текст = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	Если Не БазоваяПодсистемаСерверПовтИсп.СП_ЭтоФоновоеЗадание() Тогда
		Возврат;
	КонецЕсли;

	ПередаваемоеЗначение = Новый Структура;
	Если Процент <> Неопределено Тогда
		ПередаваемоеЗначение.Вставить("Процент", Процент);
	КонецЕсли;
	Если Текст <> Неопределено Тогда
		ПередаваемоеЗначение.Вставить("Текст", Текст);
	КонецЕсли;
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПередаваемоеЗначение.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	КонецЕсли;

	ПередаваемыйТекст = ОН_ЗначениеВСтрокуXML(ПередаваемоеЗначение);

	Текст = "{СтандартныеПодсистемы.ДлительныеОперации}" + ПередаваемыйТекст;
	ОН_СообщитьПользователю(Текст);
КонецПроцедуры

Функция ДО_ОперацииВыполнены(Знач Задания) Экспорт
	Результат = Новый Соответствие;
	Для каждого Задание Из Задания Цикл
		Результат.Вставить(Задание.ИдентификаторЗадания, ДО_ОперацияВыполнена(Задание.ИдентификаторЗадания, Ложь, Задание.ВыводитьПрогрессВыполнения, Задание.ВыводитьСообщения));
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция ДО_ОперацияВыполнена(Знач ИдентификаторЗадания, Знач ИсключениеПриОшибке = Ложь, Знач ВыводитьПрогрессВыполнения = Ложь, Знач ВыводитьСообщения = Ложь) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Статус",						"Выполняется");
	Результат.Вставить("КраткоеПредставлениеОшибки",	Неопределено);
	Результат.Вставить("ПодробноеПредставлениеОшибки",	Неопределено);
	Результат.Вставить("Прогресс",						Неопределено);
	Результат.Вставить("Сообщения",						Неопределено);

	Задание = ДО_НайтиЗаданиеПоИдентификатору(ИдентификаторЗадания);
	Если Задание = Неопределено Тогда
		Пояснение = "Операция не выполнена из-за аварийного завершения фонового задания.
			|Фоновое задание не существует: " + Строка(ИдентификаторЗадания);
		ЗаписьЖурналаРегистрации("Длительные операции.Ошибка выполнения", УровеньЖурналаРегистрации.Ошибка, , , Пояснение);
		Если ИсключениеПриОшибке Тогда
			ВызватьИсключение("Не удалось выполнить данную операцию.");
		КонецЕсли;
		Результат.Статус						= "Ошибка";
		Результат.КраткоеПредставлениеОшибки	= "Операция не выполнена из-за аварийного завершения фонового задания.";

		Возврат Результат;
	КонецЕсли;

	Если ВыводитьПрогрессВыполнения Тогда
		ПрогрессИСообщения = ДО_ПрочитатьПрогрессИСообщения(ИдентификаторЗадания, ?(ВыводитьСообщения, "ПрогрессИСообщения", "Прогресс"));
		Результат.Прогресс = ПрогрессИСообщения.Прогресс;
		Если ВыводитьСообщения Тогда
			Результат.Сообщения = ПрогрессИСообщения.Сообщения;
		КонецЕсли;
	ИначеЕсли ВыводитьСообщения Тогда
		Результат.Сообщения = Задание.ПолучитьСообщенияПользователю(Истина);
	КонецЕсли;

	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Возврат Результат;
	КонецЕсли;

	Если Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		УстановитьПривилегированныйРежим(Истина);
		Если ПараметрыСеанса.ОтмененныеДлительныеОперации.Найти(ИдентификаторЗадания) = Неопределено Тогда
			Результат.Статус = "Ошибка";
			Если Задание.ИнформацияОбОшибке <> Неопределено Тогда
				Результат.КраткоеПредставлениеОшибки   = "Операция отменена администратором.";
				Результат.ПодробноеПредставлениеОшибки = Результат.КраткоеПредставлениеОшибки;
			КонецЕсли;
			Если ИсключениеПриОшибке Тогда
				Если Не ПустаяСтрока(Результат.КраткоеПредставлениеОшибки) Тогда
					ТекстСообщения = Результат.КраткоеПредставлениеОшибки;
				Иначе
					ТекстСообщения = "Не удалось выполнить данную операцию.";
				КонецЕсли;

				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		Иначе
			Результат.Статус = "Отменено";
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);

		Возврат Результат;
	КонецЕсли;

	Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Или Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		Результат.Статус = "Ошибка";
		Если Задание.ИнформацияОбОшибке <> Неопределено Тогда
			Результат.КраткоеПредставлениеОшибки   = ОбработкаОшибок.КраткоеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
			Результат.ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
		КонецЕсли;
		Если ИсключениеПриОшибке Тогда
			Если Не ПустаяСтрока(Результат.КраткоеПредставлениеОшибки) Тогда
				ТекстСообщения = Результат.КраткоеПредставлениеОшибки;
			Иначе
				ТекстСообщения = "Не удалось выполнить данную операцию.";
			КонецЕсли;
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;

	Результат.Статус = "Выполнено";

	Возврат Результат;
КонецФункции

Функция ДО_ПрочитатьПрогрессИСообщения(Знач ИдентификаторЗадания, Знач Режим = "ПрогрессИСообщения") Экспорт
	Сообщения = Новый ФиксированныйМассив(Новый Массив);
	Результат = Новый Структура("Сообщения, Прогресс", Сообщения, Неопределено);

	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если Задание = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	МассивСообщений = Задание.ПолучитьСообщенияПользователю(Истина);
	Если МассивСообщений = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	Количество		= МассивСообщений.Количество();
	Сообщения		= Новый Массив;
	ЧитатьСообщения	= (Режим = "ПрогрессИСообщения" Или Режим = "Сообщения");
	ЧитатьПрогресс	= (Режим = "ПрогрессИСообщения" Или Режим = "Прогресс");

	Если ЧитатьСообщения И Не ЧитатьПрогресс Тогда
		Результат.Сообщения = Новый ФиксированныйМассив(МассивСообщений);

		Возврат Результат;
	КонецЕсли;

	Для Номер = 0 По Количество - 1 Цикл
		Сообщение = МассивСообщений[Номер];

		Если ЧитатьПрогресс И СтрНачинаетсяС(Сообщение.Текст, "{") Тогда
			Позиция = СтрНайти(Сообщение.Текст, "}");
			Если Позиция > 2 Тогда
				ИдентификаторМеханизма = Сред(Сообщение.Текст, 2, Позиция - 2);
				Если ИдентификаторМеханизма = "СтандартныеПодсистемы.ДлительныеОперации" Тогда
					ПолученныйТекст = Сред(Сообщение.Текст, Позиция + 1);
					Результат.Прогресс = ОН_ЗначениеИзСтрокиXML(ПолученныйТекст);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЧитатьСообщения Тогда
			Сообщения.Добавить(Сообщение);
		КонецЕсли;
	КонецЦикла;

	Результат.Сообщения = Новый ФиксированныйМассив(Сообщения);

	Возврат Результат;
КонецФункции

Функция ДО_НайтиЗаданиеПоИдентификатору(Знач ИдентификаторЗадания)
	Если ТипЗнч(ИдентификаторЗадания) = Тип("Строка") Тогда
		ИдентификаторЗадания = Новый УникальныйИдентификатор(ИдентификаторЗадания);
	КонецЕсли;

	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);

	Возврат Задание;
КонецФункции

Процедура ДО_ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания) Экспорт
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	Если ПараметрыСеанса.ОтмененныеДлительныеОперации.Найти(ИдентификаторЗадания) = Неопределено Тогда
		ОтмененныеДлительныеОперации = Новый Массив(ПараметрыСеанса.ОтмененныеДлительныеОперации);
		ОтмененныеДлительныеОперации.Добавить(ИдентификаторЗадания);
		ПараметрыСеанса.ОтмененныеДлительныеОперации = Новый ФиксированныйМассив(ОтмененныеДлительныеОперации);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

	Задание = ДО_НайтиЗаданиеПоИдентификатору(ИдентификаторЗадания);
	Если Задание = Неопределено	Или Задание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		Возврат;
	КонецЕсли;

	Попытка
		Задание.Отменить();
	Исключение
		// Возможно задание как раз в этот момент закончилось и ошибки нет.
		ЗаписьЖурналаРегистрации("Длительные операции.Отмена выполнения фонового задания", УровеньЖурналаРегистрации.Информация,,, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

Функция ДО_ПараметрыВыполненияВФоне(Знач ИдентификаторФормы = Неопределено) Экспорт
	Результат = ДО_ОбщиеПараметрыВыполненияВФоне();
	ДО_ДобавитьПараметрыВыполненияДляВозвратаРезультата(Результат, ИдентификаторФормы);
	Результат.Вставить("ДополнительныйРезультат", Ложь);

	Возврат Результат;
КонецФункции

Функция ДО_ОбщиеПараметрыВыполненияВФоне()
	Результат = Новый Структура;
	Результат.Вставить("ОжидатьЗавершение",				?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 0.8));
	Результат.Вставить("НаименованиеФоновогоЗадания",	"");
	Результат.Вставить("КлючФоновогоЗадания",			"");
	Результат.Вставить("ЗапуститьНеВФоне",				Ложь);
	Результат.Вставить("ЗапуститьВФоне",				Ложь);
	Результат.Вставить("БезРасширений",					Ложь);
	Результат.Вставить("СРасширениямиБазыДанных",		Ложь);

	Возврат Результат;
КонецФункции

Процедура ДО_ДобавитьПараметрыВыполненияДляВозвратаРезультата(Параметры, ИдентификаторФормы)
	Параметры.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	Параметры.Вставить("АдресРезультата", Неопределено);
КонецПроцедуры

Функция ДО_ВыполнитьВФоне(Знач ИмяПроцедуры, Знач ПараметрыПроцедуры, Знач ПараметрыВыполнения) Экспорт
	БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр("ДлительныеОперации.ВыполнитьВФоне", "ПараметрыВыполнения", ПараметрыВыполнения, Тип("Структура")); 
	Если ПараметрыВыполнения.ЗапуститьНеВФоне И ПараметрыВыполнения.ЗапуститьВФоне Тогда
		ВызватьИсключение "Параметры ""ВсегдаНеВФоне"" и ""ВсегдаВФоне""
			|не могут одновременно принимать значение Истина в БазоваяПодсистемаСервер.ДО_ВыполнитьВФоне.";
	КонецЕсли;
	Если ПараметрыВыполнения.БезРасширений И ПараметрыВыполнения.СРасширениямиБазыДанных Тогда
		ВызватьИсключение "Параметры ""БезРасширений"" и ""СРасширениямиБазыДанных""
			|не могут одновременно принимать значение Истина в БазоваяПодсистемаСервер.ДО_ВыполнитьВФоне.";
	КонецЕсли;
#Если ВнешнееСоединение Тогда
	ИнформационнаяБазаФайловая = ОН_ИнформационнаяБазаФайловая();
	Если ПараметрыВыполнения.БезРасширений И ИнформационнаяБазаФайловая Тогда
		ВызватьИсключение "Фоновое задание не может быть запущено с параметром ""БезРасширений""
			|в файловой информационной базе в БазоваяПодсистемаСервер.ДО_ВыполнитьВФоне.";
	ИначеЕсли ПараметрыВыполнения.СРасширениямиБазыДанных И ИнформационнаяБазаФайловая Тогда
		ВызватьИсключение "Фоновое задание не может быть запущено с параметром ""СРасширениямиБазыДанных""
			|в файловой информационной базе в БазоваяПодсистемаСервер.ДО_ВыполнитьВФоне.";
	КонецЕсли;
#КонецЕсли

	Результат = Новый Структура;
	Результат.Вставить("Статус",    "Выполняется");
	Результат.Вставить("ИдентификаторЗадания", Неопределено);
	Если ПараметрыВыполнения.Свойство("АдресРезультата") Тогда
		Если ПараметрыВыполнения.АдресРезультата = Неопределено Тогда
			Если Не ЗначениеЗаполнено(ПараметрыВыполнения.ИдентификаторФормы) И ОН_РежимОтладки() Тогда
				Попытка
					ВызватьИсключение "Не указан ни уникальный идентификатор формы в параметре ПараметрыВыполнения.ИдентификаторФормы,
						|ни адрес временного хранилища в ПараметрыВыполнения.АдресРезультата в ДлительныеОперации.ВыполнитьВФоне.
						|Убедиться, что при обработке результата временное хранилище очищается явно методом УдалитьИзВременногоХранилища.";
				Исключение
					// АПК:154-выкл Не ошибка, а предупреждение (рекомендация разработчику).
					ЗаписьЖурналаРегистрации("Длительные операции.Диагностика", УровеньЖурналаРегистрации.Предупреждение,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					// АПК:154-вкл
				КонецПопытки;
			КонецЕсли;
			ПараметрыВыполнения.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, ПараметрыВыполнения.ИдентификаторФормы);
		ИначеЕсли Не ЭтоАдресВременногоХранилища(ПараметрыВыполнения.АдресРезультата) Тогда
			ВызватьИсключение "Не указан адрес временного хранилища в параметре ПараметрыВыполнения.АдресРезультата
				|в БазоваяПодсистемаСервер.ДО_ВыполнитьВФоне.";
		КонецЕсли;
		Результат.Вставить("АдресРезультата", ПараметрыВыполнения.АдресРезультата);
	КонецЕсли;
	Если ПараметрыВыполнения.Свойство("ДополнительныйРезультат") Тогда
		Результат.Вставить("АдресДополнительногоРезультата", "");
	КонецЕсли;
	Результат.Вставить("КраткоеПредставлениеОшибки", "");
	Результат.Вставить("ПодробноеПредставлениеОшибки", "");
	Результат.Вставить("Сообщения", Новый ФиксированныйМассив(Новый Массив));

	Если ПараметрыВыполнения.БезРасширений Тогда
		ПараметрыВыполнения.БезРасширений = ЗначениеЗаполнено(ПараметрыСеанса.ПодключенныеРасширения);
	КонецЕсли;

	ПараметрыЭкспортнойПроцедуры = ПараметрыПроцедуры;
	Если Не ПараметрыВыполнения.Свойство("ЭтоФункция") Тогда
		ПараметрыЭкспортнойПроцедуры = Новый Массив;
		ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыПроцедуры);
		ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыВыполнения.АдресРезультата);
	КонецЕсли;

	Если ПараметрыВыполнения.Свойство("ДополнительныйРезультат") И ПараметрыВыполнения.ДополнительныйРезультат Тогда
		Результат.АдресДополнительногоРезультата = ПоместитьВоВременноеХранилище(Неопределено, ПараметрыВыполнения.ИдентификаторФормы);
		ПараметрыЭкспортнойПроцедуры.Добавить(Результат.АдресДополнительногоРезультата);
	КонецЕсли;

#Если ВнешнееСоединение Тогда
	ВыполнитьБезФоновогоЗадания = ИнформационнаяБазаФайловая Или ОбщегоНазначения.РежимОтладки() Или ПараметрыВыполнения.ЗапуститьНеВФоне Или (ДО_ЕстьФоновыеЗаданияВФайловойИБ() И Не ПараметрыВыполнения.ЗапуститьВФоне) Или Не ДО_ВозможноВыполнитьВФоне(ИмяПроцедуры);
#Иначе
	ВыполнитьБезФоновогоЗадания = Не ПараметрыВыполнения.БезРасширений И Не ПараметрыВыполнения.СРасширениямиБазыДанных И (ОН_РежимОтладки() Или ПараметрыВыполнения.ЗапуститьНеВФоне Или (ДО_ЕстьФоновыеЗаданияВФайловойИБ() И Не ПараметрыВыполнения.ЗапуститьВФоне) Или Не ДО_ВозможноВыполнитьВФоне(ИмяПроцедуры));
#КонецЕсли

	// Выполнить в основном потоке.
	Если ВыполнитьБезФоновогоЗадания Тогда
		Попытка
			Если ПараметрыВыполнения.Свойство("ЭтоФункция") И ПараметрыВыполнения.ЭтоФункция Тогда
				ДО_ВызватьФункцию(ИмяПроцедуры, ПараметрыЭкспортнойПроцедуры, ПараметрыВыполнения.АдресРезультата);
			Иначе
				ДО_ВызватьПроцедуру(ИмяПроцедуры, ПараметрыЭкспортнойПроцедуры);
			КонецЕсли;
			Результат.Статус						= "Выполнено";
		Исключение
			Результат.Статус						= "Ошибка";
			Результат.КраткоеПредставлениеОшибки	= ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Результат.ПодробноеПредставлениеОшибки	= ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации("Ошибка выполнения", УровеньЖурналаРегистрации.Ошибка, , , Результат.ПодробноеПредставлениеОшибки);
		КонецПопытки;
		Возврат Результат;
	КонецЕсли;

	// Выполнить в фоне.
	БезопасныйРежим = БезопасныйРежим();
	УстановитьОтключениеБезопасногоРежима(Истина);
	Попытка
		Задание = ДО_ЗапуститьФоновоеЗаданиеСКонтекстомКлиента(ИмяПроцедуры, ПараметрыВыполнения, ПараметрыЭкспортнойПроцедуры, БезопасныйРежим);
	Исключение
		Результат.Статус = "Ошибка";
		Если Задание <> Неопределено И Задание.ИнформацияОбОшибке <> Неопределено Тогда
			Результат.КраткоеПредставлениеОшибки	= ОбработкаОшибок.КраткоеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
			Результат.ПодробноеПредставлениеОшибки	= ОбработкаОшибок.ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
		Иначе
			Результат.КраткоеПредставлениеОшибки	= ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Результат.ПодробноеПредставлениеОшибки	= ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецЕсли;
		Возврат Результат;
	КонецПопытки;
	УстановитьОтключениеБезопасногоРежима(Ложь);

	Если Задание <> Неопределено И Задание.ИнформацияОбОшибке <> Неопределено Тогда
		Результат.Статус						= "Ошибка";
		Результат.КраткоеПредставлениеОшибки	= ОбработкаОшибок.КраткоеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
		Результат.ПодробноеПредставлениеОшибки	= ОбработкаОшибок.ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);

		Возврат Результат;
	КонецЕсли;

	Результат.ИдентификаторЗадания	= Задание.УникальныйИдентификатор;
	ЗаданиеВыполнено				= Ложь;

	Если ПараметрыВыполнения.ОжидатьЗавершение <> 0 Тогда
		Задание = Задание.ОжидатьЗавершенияВыполнения(ПараметрыВыполнения.ОжидатьЗавершение);
		Если Задание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
			ЗаданиеВыполнено = Истина;
		КонецЕсли;
	КонецЕсли;

	Если ЗаданиеВыполнено Тогда
		ПрогрессИСообщения	= ДО_ПрочитатьПрогрессИСообщения(Задание.УникальныйИдентификатор, "ПрогрессИСообщения");
		Результат.Сообщения	= ПрогрессИСообщения.Сообщения;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(Результат, ДО_ОперацияВыполнена(Задание.УникальныйИдентификатор), , "Сообщения");

	Возврат Результат;
КонецФункции

Процедура ДО_ВызватьФункцию(ИмяФункции, ПараметрыПроцедуры, АдресРезультата)
	ЧастиИмени = СтрРазделить(ИмяФункции, ".");
	ЭтоПроцедураМодуляОбработки = (ЧастиИмени.Количество() = 4) И ВРег(ЧастиИмени[2]) = "МОДУЛЬОБЪЕКТА";
	Если Не ЭтоПроцедураМодуляОбработки Тогда
		Результат = ОН_ВызватьФункциюКонфигурации(ИмяФункции, ПараметрыПроцедуры);
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);

		Возврат;
	КонецЕсли;

	ЭтоОбработка	= ВРег(ЧастиИмени[0]) = "ОБРАБОТКА";
	ЭтоОтчет		= ВРег(ЧастиИмени[0]) = "ОТЧЕТ";
	Если ЭтоОбработка Или ЭтоОтчет Тогда
		МенеджерОбъекта			= ?(ЭтоОтчет, Отчеты, Обработки);
		ОбработкаОтчетОбъект	= МенеджерОбъекта[ЧастиИмени[1]].Создать();
		Результат				= ОН_ВызватьФункциюОбъекта(ОбработкаОтчетОбъект, ЧастиИмени[3], ПараметрыПроцедуры);
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);

		Возврат;
	КонецЕсли;

	ЭтоВнешняяОбработка	= ВРег(ЧастиИмени[0]) = "ВНЕШНЯЯОБРАБОТКА";
	ЭтоВнешнийОтчет		= ВРег(ЧастиИмени[0]) = "ВНЕШНИЙОТЧЕТ";
	Если ЭтоВнешняяОбработка Или ЭтоВнешнийОтчет Тогда
		ВыполнитьПроверкуПравДоступа("ИнтерактивноеОткрытиеВнешнихОбработок", Метаданные);
		МенеджерОбъекта			= ?(ЭтоВнешнийОтчет, ВнешниеОтчеты, ВнешниеОбработки);
		ОбработкаОтчетОбъект	= МенеджерОбъекта.Создать(ЧастиИмени[1], БезопасныйРежим());
		Результат				= ОН_ВызватьФункциюОбъекта(ОбработкаОтчетОбъект, ЧастиИмени[3], ПараметрыПроцедуры);
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);

		Возврат;
	КонецЕсли;

	ВызватьИсключение СтрШаблон("Неверный формат параметра ИмяФункции (переданное значение: %1)", ИмяФункции);
КонецПроцедуры

Процедура ДО_ВызватьПроцедуру(ИмяПроцедуры, ПараметрыВызова)
	ЧастиИмени					= СтрРазделить(ИмяПроцедуры, ".");
	ЭтоПроцедураМодуляОбработки	= (ЧастиИмени.Количество() = 4) И ВРег(ЧастиИмени[2]) = "МОДУЛЬОБЪЕКТА";
	Если Не ЭтоПроцедураМодуляОбработки Тогда
		ОН_ВыполнитьМетодКонфигурации(ИмяПроцедуры, ПараметрыВызова);

		Возврат;
	КонецЕсли;

	ЭтоОбработка	= ВРег(ЧастиИмени[0]) = "ОБРАБОТКА";
	ЭтоОтчет		= ВРег(ЧастиИмени[0]) = "ОТЧЕТ";
	Если ЭтоОбработка Или ЭтоОтчет Тогда
		МенеджерОбъекта			= ?(ЭтоОтчет, Отчеты, Обработки);
		ОбработкаОтчетОбъект	= МенеджерОбъекта[ЧастиИмени[1]].Создать();
		ОН_ВыполнитьМетодОбъекта(ОбработкаОтчетОбъект, ЧастиИмени[3], ПараметрыВызова);

		Возврат;
	КонецЕсли;

	ЭтоВнешняяОбработка	= ВРег(ЧастиИмени[0]) = "ВНЕШНЯЯОБРАБОТКА";
	ЭтоВнешнийОтчет		= ВРег(ЧастиИмени[0]) = "ВНЕШНИЙОТЧЕТ";
	Если ЭтоВнешняяОбработка Или ЭтоВнешнийОтчет Тогда
		ВыполнитьПроверкуПравДоступа("ИнтерактивноеОткрытиеВнешнихОбработок", Метаданные);
		МенеджерОбъекта			= ?(ЭтоВнешнийОтчет, ВнешниеОтчеты, ВнешниеОбработки);
		ОбработкаОтчетОбъект	= МенеджерОбъекта.Создать(ЧастиИмени[1], БезопасныйРежим());
		ОН_ВыполнитьМетодОбъекта(ОбработкаОтчетОбъект, ЧастиИмени[3], ПараметрыВызова);

		Возврат;
	КонецЕсли;

	ВызватьИсключение СтрШаблон("Неверный формат параметра ИмяПроцедуры (переданное значение: %1)", ИмяПроцедуры);
КонецПроцедуры

Функция ДО_ЕстьФоновыеЗаданияВФайловойИБ()
	ЗапущеноЗаданийВФайловойИБ = 0;
	Если ОН_ИнформационнаяБазаФайловая() И Не ОбновлениеВерсииИБСерверПовтИсп.сОИБ_НеобходимоОбновлениеИнформационнойБазы() Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		ЗапущеноЗаданийВФайловойИБ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество();
	КонецЕсли;

	Возврат ЗапущеноЗаданийВФайловойИБ > 0;
КонецФункции

Функция ДО_ВозможноВыполнитьВФоне(ИмяПроцедуры)
	ЧастиИмени = СтрРазделить(ИмяПроцедуры, ".");
	Если ЧастиИмени.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	ЭтоВнешняяОбработка	= (ВРег(ЧастиИмени[0]) = "ВНЕШНЯЯОБРАБОТКА");
	ЭтоВнешнийОтчет		= (ВРег(ЧастиИмени[0]) = "ВНЕШНИЙОТЧЕТ");

	Возврат Не (ЭтоВнешняяОбработка Или ЭтоВнешнийОтчет);
КонецФункции

Функция ДО_ЗапуститьФоновоеЗаданиеСКонтекстомКлиента(ИмяПроцедуры, ПараметрыВыполнения, ПараметрыПроцедуры = Неопределено, БезопасныйРежим = Ложь) Экспорт
	КлючФоновогоЗадания			= ПараметрыВыполнения.КлючФоновогоЗадания;
	НаименованиеФоновогоЗадания	= ?(ПустаяСтрока(ПараметрыВыполнения.НаименованиеФоновогоЗадания), ИмяПроцедуры, ПараметрыВыполнения.НаименованиеФоновогоЗадания);

	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиента = ПараметрыСеанса.ПараметрыКлиентаНаСервере;
	УстановитьПривилегированныйРежим(Ложь);

	ВсеПараметры = Новый Структура;
	ВсеПараметры.Вставить("ИмяПроцедуры",				ИмяПроцедуры);
	ВсеПараметры.Вставить("ПараметрыПроцедуры",			ПараметрыПроцедуры);
	ВсеПараметры.Вставить("ПараметрыКлиентаНаСервере",	ПараметрыКлиента);
	ВсеПараметры.Вставить("ПараметрыВыполнения",		ПараметрыВыполнения);
	ВсеПараметры.Вставить("БезопасныйРежим",			БезопасныйРежим);

	Если Не ПараметрыВыполнения.БезРасширений И Не ПараметрыВыполнения.СРасширениямиБазыДанных Тогда
		Справочники.ВерсииРасширений.ВставитьЗарегистрированныйСоставУстановленныхРасширений(ВсеПараметры);
	КонецЕсли;

	ПараметрыПроцедурыФоновогоЗадания = Новый Массив;
	ПараметрыПроцедурыФоновогоЗадания.Добавить(ВсеПараметры);

	Возврат ДО_ВыполнитьФоновоеЗадание(ПараметрыВыполнения, "БазоваяПодсистемаСервер.ДО_ВыполнитьСКонтекстомКлиента", ПараметрыПроцедурыФоновогоЗадания, КлючФоновогоЗадания, НаименованиеФоновогоЗадания);
КонецФункции

Процедура ДО_ВыполнитьСКонтекстомКлиента(ВсеПараметры) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСеанса.ПараметрыКлиентаНаСервере = ВсеПараметры.ПараметрыКлиентаНаСервере;
	Справочники.ВерсииРасширений.ВосстановитьЗарегистрированныйСоставУстановленныхРасширений(ВсеПараметры);
	Справочники.ВерсииРасширений.ЗарегистрироватьИспользованиеВерсииРасширений();
	УстановитьПривилегированныйРежим(Ложь);

	Если БезопасныйРежим() = Ложь И ВсеПараметры.БезопасныйРежим <> Ложь Тогда
		Если ВРег(ВсеПараметры.ИмяПроцедуры) = ВРег("БазоваяПодсистемаСервер.ДО_ВыполнитьПроцедуруМодуляОбъектаОбработки") Или ВРег(ВсеПараметры.ИмяПроцедуры) = ВРег("БазоваяПодсистемаСервер.ДО_ВыполнитьПроцедуруМодуляОбъектаОтчета") Тогда
			ВсеПараметры.ПараметрыПроцедуры[0].Вставить("БезопасныйРежим", ВсеПараметры.БезопасныйРежим);
		Иначе
			УстановитьБезопасныйРежим(ВсеПараметры.БезопасныйРежим);
		КонецЕсли;
	КонецЕсли;

	Если ВсеПараметры.ПараметрыВыполнения.Свойство("ЭтоФункция") И ВсеПараметры.ПараметрыВыполнения.ЭтоФункция Тогда
		ДО_ВызватьФункцию(ВсеПараметры.ИмяПроцедуры, ВсеПараметры.ПараметрыПроцедуры, ВсеПараметры.ПараметрыВыполнения.АдресРезультата);
	Иначе
		ДО_ВызватьПроцедуру(ВсеПараметры.ИмяПроцедуры, ВсеПараметры.ПараметрыПроцедуры);
	КонецЕсли;
КонецПроцедуры

Функция ДО_ВыполнитьФоновоеЗадание(ПараметрыВыполнения, ИмяМетода, Параметры, Ключ, Наименование)
	Если ТекущийРежимЗапуска() = Неопределено И ОН_ИнформационнаяБазаФайловая() Тогда

		Сеанс = ПолучитьТекущийСеансИнформационнойБазы();
		Если ПараметрыВыполнения.ОжидатьЗавершение = Неопределено И Сеанс.ИмяПриложения = "BackgroundJob" Тогда
			ВызватьИсключение "В файловой информационной базе невозможно одновременно выполнять более одного фонового задания";
		ИначеЕсли Сеанс.ИмяПриложения = "COMConnection" Тогда
			ВызватьИсключение "В файловой информационной базе можно запустить фоновое задание только из клиентского приложения";
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыВыполнения.БезРасширений Тогда
		Возврат РасширенияКонфигурации.ВыполнитьФоновоеЗаданиеБезРасширений(ИмяМетода, Параметры, Ключ, Наименование);
	ИначеЕсли ПараметрыВыполнения.СРасширениямиБазыДанных Тогда
		Возврат РасширенияКонфигурации.ВыполнитьФоновоеЗаданиеСРасширениямиБазыДанных(ИмяМетода, Параметры, Ключ, Наименование);
	Иначе
		Возврат ФоновыеЗадания.Выполнить(ИмяМетода, Параметры, Ключ, Наименование);
	КонецЕсли;
КонецФункции

Функция ДО_ЗаданиеВыполнено(Знач ИдентификаторЗадания) Экспорт
	Задание = ДО_НайтиЗаданиеПоИдентификатору(ИдентификаторЗадания);

	Если Задание <> Неопределено И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Возврат Ложь;
	КонецЕсли;

	ТекстОшибки = "Не удалось выполнить данную операцию.
		|Технические подробности см. в журнале регистрации.";
	Если Задание = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Длительные операции.Фоновое задание не найдено", УровеньЖурналаРегистрации.Ошибка,,, Строка(ИдентификаторЗадания));
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		ОшибкаЗадания = Задание.ИнформацияОбОшибке;
		Если ОшибкаЗадания <> Неопределено Тогда
			ТекстОшибки = СтрШаблон("%1
				|
				|Технические подробности:
				|Ошибка выполнения фонового задания %2 с идентификатором %3 по причине
				|%4
				|
				|См. также журнал регистрации.",
				ОбработкаОшибок.КраткоеПредставлениеОшибки(Задание.ИнформацияОбОшибке), Задание.ИмяМетода,
				Строка(ИдентификаторЗадания), ОбработкаОшибок.ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке));
		КонецЕсли;
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		ЗаписьЖурналаРегистрации("Длительные операции.Фоновое задание отменено администратором", УровеньЖурналаРегистрации.Ошибка,,, "Задание завершилось с неизвестной ошибкой.");
	Иначе
		Возврат Истина;
	КонецЕсли;

	ВызватьИсключение ТекстОшибки;
КонецФункции

Функция ДО_СписокПараметров(Знач Параметр1, Знач Параметр2, Знач Параметр3, Знач Параметр4, Знач Параметр5, Знач Параметр6, Знач Параметр7)
	ПереданныеПараметры = Новый Массив;
	ПереданныеПараметры.Добавить(Параметр7);
	ПереданныеПараметры.Добавить(Параметр6);
	ПереданныеПараметры.Добавить(Параметр5);
	ПереданныеПараметры.Добавить(Параметр4);
	ПереданныеПараметры.Добавить(Параметр3);
	ПереданныеПараметры.Добавить(Параметр2);
	ПереданныеПараметры.Добавить(Параметр1);

	Результат = Новый Массив;

	Для Каждого Параметр Из ПереданныеПараметры Цикл
		Если Результат.Количество() = 0 И Параметр = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Результат.Вставить(0, Параметр);
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция ДО_ПодготовитьПараметрыВыполнения(ПереданныйПараметр, ДляФункции)
	Результат = ДО_ОбщиеПараметрыВыполненияВФоне();

	Если ЗначениеЗаполнено(ПереданныйПараметр) Тогда
		Если ТипЗнч(ПереданныйПараметр) = Тип("Структура") Тогда
			Результат = ПереданныйПараметр;
		ИначеЕсли ДляФункции Тогда
			Идентификатор = Неопределено;
			Если ТипЗнч(ПереданныйПараметр) = Тип("ФормаКлиентскогоПриложения") Тогда
				Идентификатор = ПереданныйПараметр.УникальныйИдентификатор;
			ИначеЕсли ТипЗнч(ПереданныйПараметр) = Тип("УникальныйИдентификатор") Тогда
				Идентификатор = ПереданныйПараметр;
			КонецЕсли;
			ДО_ДобавитьПараметрыВыполненияДляВозвратаРезультата(Результат, Идентификатор);
		КонецЕсли;
	КонецЕсли;

	Результат.Вставить("ЭтоФункция", ДляФункции);

	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

Функция ОН_ПрочитатьДанныеИзБезопасногоХранилища(Владелец, Ключи = "Пароль", ОбщиеДанные = Неопределено) Экспорт
	БазоваяПодсистемаКлиентСервер.ОН_Проверить(ЗначениеЗаполнено(Владелец),
		СтрШаблон(
			"Недопустимое значение параметра %1 в %2.
				|параметр должен содержать ссылку; передано значение: %3 (тип %4).",
			"Владелец", "БазоваяПодсистемаСервер.ОН_ПрочитатьДанныеИзБезопасногоХранилища", Владелец, ТипЗнч(Владелец)));

	Результат = Новый Структура(Ключи);

	Запрос			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ
		|	БезопасноеХранилищеДанных.Данные КАК Данные
		|ИЗ
		|	РегистрСведений.БезопасноеХранилищеДанных КАК БезопасноеХранилищеДанных
		|ГДЕ
		|	БезопасноеХранилищеДанных.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", Владелец);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Если РезультатЗапроса.Следующий() Тогда
		Если ЗначениеЗаполнено(РезультатЗапроса.Данные) Тогда
			СохраненныеДанные = РезультатЗапроса.Данные.Получить();
			Если ЗначениеЗаполнено(СохраненныеДанные) Тогда
				ЗаполнитьЗначенияСвойств(Результат, СохраненныеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Результат <> Неопределено И Результат.Количество() = 1 Тогда
		Возврат ?(Результат.Свойство(Ключи), Результат[Ключи], Неопределено);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Процедура ОН_ЗаписатьДанныеВБезопасноеХранилище(Владелец, Данные, Ключ = "Пароль") Экспорт
	БазоваяПодсистемаКлиентСервер.ОН_Проверить(ЗначениеЗаполнено(Владелец),
		СтрШаблон(
			"Недопустимое значение параметра %1 в %2.
				|параметр должен содержать ссылку; передано значение: %3 (тип %4).",
			"Владелец", "БазоваяПодсистемаСервер.онЗаписатьДанныеВБезопасноеХранилище", Владелец, ТипЗнч(Владелец)));

	БазоваяПодсистемаКлиентСервер.ОН_Проверить(ТипЗнч(Ключ) = Тип("Строка"),
		СтрШаблон(
			"Недопустимое значение параметра %1 в %2.
				|параметр должен содержать строку; передано значение: %3 (тип %4).",
			"Ключ", "БазоваяПодсистемаСервер.онЗаписатьДанныеВБезопасноеХранилище", Ключ, ТипЗнч(Ключ)));

	БезопасноеХранилищеДанных			= РегистрыСведений.БезопасноеХранилищеДанных.СоздатьМенеджерЗаписи();

	БезопасноеХранилищеДанных.Владелец	= Владелец;
	БезопасноеХранилищеДанных.Прочитать();
	Если Данные <> Неопределено Тогда
		Если БезопасноеХранилищеДанных.Выбран() Тогда
			ДанныеДляСохранения = БезопасноеХранилищеДанных.Данные.Получить();
			Если ТипЗнч(ДанныеДляСохранения) <> Тип("Структура") Тогда
				ДанныеДляСохранения = Новый Структура();
			КонецЕсли;
			ДанныеДляСохранения.Вставить(Ключ, Данные);
			ДанныеДляХранилищеЗначения			= Новый ХранилищеЗначения(ДанныеДляСохранения, Новый СжатиеДанных(6));
			БезопасноеХранилищеДанных.Данные	= ДанныеДляХранилищеЗначения;
			БезопасноеХранилищеДанных.Записать();
		Иначе
			ДанныеДляСохранения					= Новый Структура(Ключ, Данные);
			ДанныеДляХранилищеЗначения			= Новый ХранилищеЗначения(ДанныеДляСохранения, Новый СжатиеДанных(6));
			БезопасноеХранилищеДанных.Данные	= ДанныеДляХранилищеЗначения;
			БезопасноеХранилищеДанных.Владелец	= Владелец;
			БезопасноеХранилищеДанных.Записать();
		КонецЕсли;
	Иначе
		БезопасноеХранилищеДанных.Удалить();
	КонецЕсли;
КонецПроцедуры

Функция ОН_ЭтоМобильныйКлиент() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	ЭтоМобильныйКлиент = СП_ПараметрыКлиентаНаСервере().Получить("ЭтоМобильныйКлиент");

	Если ЭтоМобильныйКлиент = Неопределено Тогда
		Возврат Ложь; // Нет клиентского приложения.
	КонецЕсли;

	Возврат ЭтоМобильныйКлиент;
КонецФункции

Функция ОН_ЭтоВебКлиент() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ЭтоВебКлиент = СП_ПараметрыКлиентаНаСервере().Получить("ЭтоВебКлиент");

	Если ЭтоВебКлиент = Неопределено Тогда
		Возврат Ложь; // Нет клиентского приложения.
	КонецЕсли;

	Возврат ЭтоВебКлиент;
КонецФункции

Функция ОН_ФиксированныеДанные(Данные, ВызыватьИсключение = Истина) Экспорт
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		Массив = Новый Массив;

		Для каждого Значение Из Данные Цикл
			Если ТипЗнч(Значение) = Тип("Структура")
			 ИЛИ ТипЗнч(Значение) = Тип("Соответствие")
			 ИЛИ ТипЗнч(Значение) = Тип("Массив") Тогда

				Массив.Добавить(ОН_ФиксированныеДанные(Значение, ВызыватьИсключение));
			Иначе
				Если ВызыватьИсключение Тогда
					ОН_ПроверкаФиксированностиДанных(Значение, Истина);
				КонецЕсли;
				Массив.Добавить(Значение);
			КонецЕсли;
		КонецЦикла;

		Возврат Новый ФиксированныйМассив(Массив);
	ИначеЕсли ТипЗнч(Данные) = Тип("Структура")
	      ИЛИ ТипЗнч(Данные) = Тип("Соответствие") Тогда

		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			Коллекция = Новый Структура;
		Иначе
			Коллекция = Новый Соответствие;
		КонецЕсли;

		Для каждого КлючИЗначение Из Данные Цикл
			Значение = КлючИЗначение.Значение;

			Если ТипЗнч(Значение) = Тип("Структура")
			 ИЛИ ТипЗнч(Значение) = Тип("Соответствие")
			 ИЛИ ТипЗнч(Значение) = Тип("Массив") Тогда

				Коллекция.Вставить(
					КлючИЗначение.Ключ, ОН_ФиксированныеДанные(Значение, ВызыватьИсключение));
			Иначе
				Если ВызыватьИсключение Тогда
					ОН_ПроверкаФиксированностиДанных(Значение, Истина);
				КонецЕсли;
				Коллекция.Вставить(КлючИЗначение.Ключ, Значение);
			КонецЕсли;
		КонецЦикла;

		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			Возврат Новый ФиксированнаяСтруктура(Коллекция);
		Иначе
			Возврат Новый ФиксированноеСоответствие(Коллекция);
		КонецЕсли;

	ИначеЕсли ВызыватьИсключение Тогда
		ОН_ПроверкаФиксированностиДанных(Данные);
	КонецЕсли;

	Возврат Данные;
КонецФункции

Процедура ОН_ПроверкаФиксированностиДанных(Данные, ДанныеВЗначенииФиксированныхТипов = Ложь)
	ТипДанных = ТипЗнч(Данные);

	Если ТипДанных = Тип("ХранилищеЗначения")
	 ИЛИ ТипДанных = Тип("ФиксированныйМассив")
	 ИЛИ ТипДанных = Тип("ФиксированнаяСтруктура")
	 ИЛИ ТипДанных = Тип("ФиксированноеСоответствие") Тогда

		Возврат;
	КонецЕсли;

	Если ДанныеВЗначенииФиксированныхТипов Тогда
		Если ТипДанных = Тип("Булево")
		 ИЛИ ТипДанных = Тип("Строка")
		 ИЛИ ТипДанных = Тип("Число")
		 ИЛИ ТипДанных = Тип("Дата")
		 ИЛИ ТипДанных = Тип("Неопределено")
		 ИЛИ ТипДанных = Тип("УникальныйИдентификатор")
		 ИЛИ ТипДанных = Тип("Null")
		 ИЛИ ТипДанных = Тип("Тип")
		 ИЛИ ТипДанных = Тип("ХранилищеЗначения")
		 ИЛИ ТипДанных = Тип("ОбщийМодуль")
		 ИЛИ ТипДанных = Тип("ОбъектМетаданных")
		 ИЛИ ТипДанных = Тип("ТипЗначенияXDTO")
		 ИЛИ ТипДанных = Тип("ТипОбъектаXDTO")
		 ИЛИ (ТипДанных <> Тип("Неопределено") И БазоваяПодсистемаСерверПовтИсп.СП_ОписаниеТипаВсеСсылки().СодержитТип(ТипДанных)) Тогда

			Возврат;
		КонецЕсли;
	КонецЕсли;

	ВызватьИсключение СтрШаблон(
		"Ошибка в функции ФиксированныеДанные общего модуля БазоваяПодсистемаСервер.
			|Данные типа ""%1"" не могут быть зафиксированы.",
		Строка(ТипДанных) );
КонецПроцедуры

Функция ОН_ХранилищеЗагрузить(МенеджерХранилища, КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию,
			ОписаниеНастроек, ИмяПользователя) Экспорт
	Результат = Неопределено;

	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Результат = МенеджерХранилища.Загрузить(КлючОбъекта, ОН_КлючНастроек(КлючНастроек),
			ОписаниеНастроек, ИмяПользователя);
	КонецЕсли;

	Если Результат = Неопределено Тогда
		Результат = ЗначениеПоУмолчанию;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		Если ОН_ОчиститьНесуществующиеСсылки(Результат) Тогда
			Результат = ЗначениеПоУмолчанию;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Процедура ОН_ХранилищеСохранить(МенеджерХранилища, КлючОбъекта, КлючНастроек, Настройки,
			ОписаниеНастроек, ИмяПользователя, ОбновитьПовторноИспользуемыеЗначения) Экспорт

	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;

	МенеджерХранилища.Сохранить(КлючОбъекта, ОН_КлючНастроек(КлючНастроек), Настройки,
		ОписаниеНастроек, ИмяПользователя);

	Если ОбновитьПовторноИспользуемыеЗначения Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
КонецПроцедуры

Процедура ОН_ХранилищеУдалить(МенеджерХранилища, КлючОбъекта, КлючНастроек, ИмяПользователя) Экспорт
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		МенеджерХранилища.Удалить(КлючОбъекта, ОН_КлючНастроек(КлючНастроек), ИмяПользователя);
	КонецЕсли;
КонецПроцедуры

Функция ОН_КлючНастроек(Знач Строка)
	Возврат ОН_СократитьСтрокуКонтрольнойСуммой(Строка, 128);
КонецФункции

Функция ОН_СократитьСтрокуКонтрольнойСуммой(Строка, МаксимальнаяДлина) Экспорт
	БазоваяПодсистемаКлиентСервер.ОН_Проверить(МаксимальнаяДлина >= 32, "Параметр МаксимальнаяДлина не может быть меньше 32",
		"БазоваяПодсистемаСервер.ОН_СократитьСтрокуКонтрольнойСуммой");

	Результат = Строка;
	Если СтрДлина(Строка) > МаксимальнаяДлина Тогда
		Результат			= Лев(Строка, МаксимальнаяДлина - 32);
		ХешированиеДанных	= Новый ХешированиеДанных(ХешФункция.MD5);
		ХешированиеДанных.Добавить(Сред(Строка, МаксимальнаяДлина - 32 + 1));
		Результат			= Результат + СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ОН_ОчиститьНесуществующиеСсылки(Значение)
	Тип = ТипЗнч(Значение);
	Если Тип = Тип("Неопределено")
		Или Тип = Тип("Булево")
		Или Тип = Тип("Строка")
		Или Тип = Тип("Число")
		Или Тип = Тип("Дата") Тогда // Оптимизация - часто используемые примитивные типы.

		Возврат Ложь; // Не ссылка.
	ИначеЕсли Тип = Тип("Массив") Тогда
		Количество = Значение.Количество();
		Для Номер = 1 По Количество Цикл
			ОбратныйИндекс = Количество - Номер;
			Если ОН_ОчиститьНесуществующиеСсылки(Значение[ОбратныйИндекс]) Тогда
				Значение.Удалить(ОбратныйИндекс);
			КонецЕсли;
		КонецЦикла;

		Возврат Ложь; // Не ссылка.
	ИначеЕсли Тип = Тип("Структура")
		Или Тип = Тип("Соответствие") Тогда

		Для Каждого КлючИЗначение Из Значение Цикл
			Если ОН_ОчиститьНесуществующиеСсылки(КлючИЗначение.Значение) Тогда
				Значение.Вставить(КлючИЗначение.Ключ, Неопределено);
			КонецЕсли;
		КонецЦикла;

		Возврат Ложь; // Не ссылка.
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип)
		Или Справочники.ТипВсеСсылки().СодержитТип(Тип)
		Или Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип)
		Или БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		Или Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
		// Ссылочный тип, исключая ТочкаМаршрутаБизнесПроцессаСсылка.

		Если Значение.Пустая() Тогда
			Возврат Ложь; // Ссылка пустая.
		КонецЕсли;

		Возврат ОН_ЗначениеРеквизитаОбъекта(Значение, "Ссылка") = Неопределено;
	Иначе
		Возврат Ложь; // Не ссылка.
	КонецЕсли;
КонецФункции

Функция ОН_ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты, ВыбратьРазрешенные = Ложь, Знач КодЯзыка = Неопределено) Экспорт
	// Если передано имя предопределенного.
	Если ТипЗнч(Ссылка) = Тип("Строка") Тогда
		ПолноеИмяПредопределенногоЭлемента = Ссылка;

		// Вычисление ссылки по имени предопределенного.
		// - дополнительно выполняет проверку метаданных предопределенного, выполняется предварительно.
		Попытка
			Ссылка = ОН_ПредопределенныйЭлемент(ПолноеИмяПредопределенногоЭлемента);
		Исключение
			ТекстОшибки = СтрШаблон(
			"Неверный первый параметр Ссылка в функции БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта:
				|%1", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;

		// Разбор полного имени предопределенного.
		ЧастиПолногоИмени			= СтрРазделить(ПолноеИмяПредопределенногоЭлемента, ".");
		ПолноеИмяОбъектаМетаданных	= ЧастиПолногоИмени[0] + "." + ЧастиПолногоИмени[1];

		// Если предопределенный не создан в ИБ, то требуется выполнить проверку доступа к объекту.
		// В других сценариях проверка доступа выполняется в момент исполнения запроса.
		Если Ссылка = Неопределено Тогда
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
			Если Не ПравоДоступа("Чтение", МетаданныеОбъекта) Тогда
				ВызватьИсключение СтрШаблон(
					"Недостаточно прав для работы с таблицей ""%1""", ПолноеИмяОбъектаМетаданных);
			КонецЕсли;
		КонецЕсли;
	Иначе // Если передана ссылка.
		Попытка
			ПолноеИмяОбъектаМетаданных = Ссылка.Метаданные().ПолноеИмя();
		Исключение
			ВызватьИсключение
				"Неверный первый параметр Ссылка в функции БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта:
					|- Значение должно быть ссылкой или именем предопределенного элемента";
		КонецПопытки;
	КонецЕсли;

	// Разбор реквизитов, если второй параметр Строка.
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;

		// Удаление пробелов.
		Реквизиты = СтрЗаменить(Реквизиты, " ", "");
		// Преобразование параметра в массив полей.
		Реквизиты = СтрРазделить(Реквизиты, ",");
	КонецЕсли;

	// Приведение реквизитов к единому формату.
	СтруктураПолей = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура")
		Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда

		СтруктураПолей = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив")
		Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда

		Для Каждого Реквизит Из Реквизиты Цикл
			Попытка
				ПсевдонимПоля = СтрЗаменить(Реквизит, ".", "");
				СтруктураПолей.Вставить(ПсевдонимПоля, Реквизит);
			Исключение
				// Если псевдоним не является ключом.

				// Поиск ошибки доступности полей.
				Результат = ОН_НайтиОшибкуДоступностиРеквизитовОбъекта(ПолноеИмяОбъектаМетаданных, Реквизиты);
				Если Результат.Ошибка Тогда
					ВызватьИсключение СтрШаблон("Неверный второй параметр Реквизиты в функции БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта: %1",
						Результат.ОписаниеОшибки);
				КонецЕсли;

				// Не удалось распознать ошибку, проброс первичной ошибки.
				ВызватьИсключение;
			КонецПопытки;
		КонецЦикла;
	Иначе
		ВызватьИсключение СтрШаблон("Неверный тип второго параметра Реквизиты в функции БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта: %1",
			Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;

	// Подготовка результата (после выполнения запроса переопределится).
	Результат = Новый Структура;

	// Формирование текста запроса к выбираемым полям.
	ТекстЗапросаПолей = "";
	Для каждого КлючИЗначение Из СтруктураПолей Цикл
		ИмяПоля = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
						КлючИЗначение.Значение,
						КлючИЗначение.Ключ);
		ПсевдонимПоля = КлючИЗначение.Ключ;

		ТекстЗапросаПолей =
			ТекстЗапросаПолей + ?(ПустаяСтрока(ТекстЗапросаПолей), "", ",") + "
			|	" + ИмяПоля + " КАК " + ПсевдонимПоля;

		// Предварительное добавление поля по псевдониму в возвращаемый результат.
		Результат.Вставить(ПсевдонимПоля);
	КонецЦикла;

	// Если предопределенного нет в ИБ.
	// - приведение результата к отсутствию объекта в ИБ или передаче пустой ссылки.
	Если Ссылка = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	// Выполнение запроса.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|&ТекстЗапросаПолей
		|ИЗ
		|	&ПолноеИмяОбъектаМетаданных КАК ПсевдонимЗаданнойТаблицы
		|ГДЕ
		|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка";

	Если Не ВыбратьРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаПолей",			ТекстЗапросаПолей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолноеИмяОбъектаМетаданных",	ПолноеИмяОбъектаМетаданных);


	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение

		// Если реквизиты были переданы строкой, то они уже конвертированы в массив.
		// Если реквизиты - массив, оставляем без изменений.
		// Если реквизиты - структура - конвертируем в массив.
		// В остальных случаях уже было бы выброшено исключение.
		Если Тип("Структура") = ТипЗнч(Реквизиты) Тогда
			Реквизиты = Новый Массив;
			Для каждого КлючИЗначение Из СтруктураПолей Цикл
				ИмяПоля = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
							КлючИЗначение.Значение,
							КлючИЗначение.Ключ);
				Реквизиты.Добавить(ИмяПоля);
			КонецЦикла;
		КонецЕсли;

		// Поиск ошибки доступности полей.
		Результат = ОН_НайтиОшибкуДоступностиРеквизитовОбъекта(ПолноеИмяОбъектаМетаданных, Реквизиты);
		Если Результат.Ошибка Тогда
			ВызватьИсключение СтрШаблон(
				"Неверный второй параметр Реквизиты в функции ОбщегоНазначения.ЗначенияРеквизитовОбъекта: %1",
				Результат.ОписаниеОшибки);
		КонецЕсли;

		// Не удалось распознать ошибку, проброс первичной ошибки.
		ВызватьИсключение;
	КонецПопытки;

	// Заполнение реквизитов.
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ОН_ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь, Знач КодЯзыка = Неопределено) Экспорт
	Если ПустаяСтрока(ИмяРеквизита) Тогда
		ВызватьИсключение
			"Неверный второй параметр ИмяРеквизита в функции БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта:
				|- Имя реквизита должно быть заполнено";
	КонецЕсли;

	Результат = ОН_ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные, КодЯзыка);

	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
КонецФункции

Функция ОН_ПредопределенныйЭлемент(ПолноеИмяПредопределенного) Экспорт
	Если БазоваяПодсистемаКлиентСервер.сОН_ИспользоватьСтандартнуюФункциюПолученияПредопределенного(
		ПолноеИмяПредопределенного) Тогда

		Возврат ПредопределенноеЗначение(ПолноеИмяПредопределенного);
	КонецЕсли;

	ПоляПредопределенного = БазоваяПодсистемаКлиентСервер.сОН_ИмяПредопределенногоПоПолям(ПолноеИмяПредопределенного);

	ПредопределенныеЗначения = БазоваяПодсистемаСерверПовтИсп.СП_СсылкиПоИменамПредопределенных(
		ПоляПредопределенного.ПолноеИмяОбъектаМетаданных);

	Возврат БазоваяПодсистемаКлиентСервер.сОН_ПредопределенныйЭлемент(
		ПолноеИмяПредопределенного, ПоляПредопределенного, ПредопределенныеЗначения);
КонецФункции

Функция ОН_НайтиОшибкуДоступностиРеквизитовОбъекта(ПолноеИмяОбъектаМетаданных, ПроверяемыеВыражения)
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);

	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат Новый Структура("Ошибка, ОписаниеОшибки", Истина,
			СтрШаблон(
				"Ошибка получения метаданных ""%1""", ПолноеИмяОбъектаМетаданных));
	КонецЕсли;

	// Разрешение вызова из безопасного режима внешней обработки или расширения.
	// Информация о доступности полей источника схемы при проверке метаданных не является секретной.
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);

	Схема = Новый СхемаЗапроса;
	Пакет = Схема.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	Оператор = Пакет.Операторы.Получить(0);

	Источник	= Оператор.Источники.Добавить(ПолноеИмяОбъектаМетаданных, "Таблица");
	ТекстОшибки	= "";

	Для Каждого ТекущееВыражение Из ПроверяемыеВыражения Цикл
		Если Не ОН_ПолеИсточникаСхемыЗапросаДоступно(Источник, ТекущееВыражение) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + СтрШаблон(
				"- Поле объекта ""%1"" не существует", ТекущееВыражение);
		КонецЕсли;
	КонецЦикла;

	Возврат Новый Структура("Ошибка, ОписаниеОшибки", Не ПустаяСтрока(ТекстОшибки), ТекстОшибки);
КонецФункции

Функция ОН_ПолеИсточникаСхемыЗапросаДоступно(ИсточникОператора, ПроверяемоеВыражение)
	ЧастиИмениПоля	= СтрРазделить(ПроверяемоеВыражение, ".");
	ДоступныеПоля	= ИсточникОператора.Источник.ДоступныеПоля;

	ТекущаяЧастьИмениПоля = 0;
	Пока ТекущаяЧастьИмениПоля < ЧастиИмениПоля.Количество() Цикл
		ТекущееПоле = ДоступныеПоля.Найти(ЧастиИмениПоля.Получить(ТекущаяЧастьИмениПоля));

		Если ТекущееПоле = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;

		// Инкрементация следующей части имени поля и соответствующего списка доступности полей.
		ТекущаяЧастьИмениПоля	= ТекущаяЧастьИмениПоля + 1;
		ДоступныеПоля			= ТекущееПоле.Поля;
	КонецЦикла;

	Возврат Истина;
КонецФункции

Функция ОН_ОбщиеПараметрыБазовойФункциональности() Экспорт
	ОбщиеПараметры = Новый Структура;
	ОбщиеПараметры.Вставить("ИмяФормыПерсональныхНастроек",						"");
	ОбщиеПараметры.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",	Истина);
	ОбщиеПараметры.Вставить("ОтключитьИдентификаторыОбъектовМетаданных",		Ложь);
	ОбщиеПараметры.Вставить("РекомендуемыйОбъемОперативнойПамяти",				2);
	ОбщиеПараметры.Вставить("МинимальнаяВерсияПлатформы",						"8.3.14.1694; 8.3.15.2107; 8.3.16.1814; 8.3.17.1851; 8.3.18.1208");
	ОбщиеПараметры.Вставить("РекомендуемаяВерсияПлатформы",						ОбщиеПараметры.МинимальнаяВерсияПлатформы);

	ОбщиеПараметры.МинимальнаяВерсияПлатформы	= ОН_НомерСборкиПоТекущейВерсииПлатформы(ОбщиеПараметры.МинимальнаяВерсияПлатформы);
	ОбщиеПараметры.РекомендуемаяВерсияПлатформы	= ОН_НомерСборкиПоТекущейВерсииПлатформы(ОбщиеПараметры.РекомендуемаяВерсияПлатформы);

	Минимальная   = ОбщиеПараметры.МинимальнаяВерсияПлатформы;
	Рекомендуемая = ОбщиеПараметры.РекомендуемаяВерсияПлатформы;
	Если Не ПустаяСтрока(Минимальная)
		И Не ПустаяСтрока(Рекомендуемая)
		И БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсии(Минимальная, Рекомендуемая) > 0 Тогда
		ТекстСообщения = "Минимальная версия платформы ""1С:Предприятие 8"" указана выше рекомендуемой.
			|Минимальная версия - ""%1"", рекомендуемая версия - ""%2"".";
		ВызватьИсключение СтрШаблон(
			ТекстСообщения,
			ОбщиеПараметры.МинимальнаяВерсияПлатформы,
			ОбщиеПараметры.РекомендуемаяВерсияПлатформы);
	КонецЕсли;

	Возврат ОбщиеПараметры;
КонецФункции

Функция ОН_НомерСборкиПоТекущейВерсииПлатформы(НомераСборокСтрокой)
	НомераСборок = СтрРазделить(НомераСборокСтрокой, ";", Истина);

	СборкиПоВерсиям = Новый Соответствие;
	Для Каждого НомерСборки Из НомераСборок Цикл
		НомерВерсии = БазоваяПодсистемаКлиентСервер.ОН_ВерсияКонфигурацииБезНомераСборки(НомерСборки);
		СборкиПоВерсиям.Вставить(СокрЛП(НомерВерсии), СокрЛП(НомерСборки));
	КонецЦикла;

	СистемнаяИнформация	= Новый СистемнаяИнформация;
	ТекущаяВерсия		= БазоваяПодсистемаКлиентСервер.ОН_ВерсияКонфигурацииБезНомераСборки(СистемнаяИнформация.ВерсияПриложения);

	Результат = СборкиПоВерсиям[ТекущаяВерсия];
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = НомераСборок[0];
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ОН_ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;

	Возврат СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
КонецФункции

Функция ОН_ЭтоПодчиненныйУзелРИБ() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Возврат ПланыОбмена.ГлавныйУзел() <> Неопределено;
КонецФункции

Функция ОН_ЭтоПодчиненныйУзелРИБСФильтром() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	// Зарезервировано для новых подсистем

	Возврат Ложь;
КонецФункции

Функция ОН_КонтрольнаяСуммаСтрокой(Знач Данные, Знач Алгоритм = Неопределено) Экспорт
	Если Алгоритм = Неопределено Тогда
		Алгоритм = ХешФункция.MD5;
	КонецЕсли;

	ХешированиеДанных = Новый ХешированиеДанных(Алгоритм);
	Если ТипЗнч(Данные) <> Тип("Строка") И ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		Данные = ОН_ЗначениеВСтрокуXML(Данные);
	КонецЕсли;
	ХешированиеДанных.Добавить(Данные);

	Если ТипЗнч(ХешированиеДанных.ХешСумма) = Тип("ДвоичныеДанные") Тогда
		Результат = СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	ИначеЕсли ТипЗнч(ХешированиеДанных.ХешСумма) = Тип("Число") Тогда
		Результат = Формат(ХешированиеДанных.ХешСумма, "ЧГ=");
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ОН_ЗначениеВСтрокуXML(Значение) Экспорт
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);

	Возврат ЗаписьXML.Закрыть();
КонецФункции

Процедура ОН_ВыполнитьМетодКонфигурации(Знач ИмяМетода, Знач Параметры = Неопределено) Экспорт
	ОН_ПроверитьИмяПроцедурыКонфигурации(ИмяМетода);

	// Зарезервировано для новых подсистем

	ПараметрыСтрока = "";
	Если Параметры <> Неопределено И Параметры.Количество() > 0 Тогда
		Для Индекс = 0 По Параметры.ВГраница() Цикл
			ПараметрыСтрока = ПараметрыСтрока + "Параметры[" + XMLСтрока(Индекс) + "],";
		КонецЦикла;
		ПараметрыСтрока = Сред(ПараметрыСтрока, 1, СтрДлина(ПараметрыСтрока) - 1);
	КонецЕсли;

	Выполнить ИмяМетода + "(" + ПараметрыСтрока + ")";
КонецПроцедуры

Процедура ОН_ПроверитьИмяПроцедурыКонфигурации(Знач ИмяПроцедуры)
	ЧастиИмени = СтрРазделить(ИмяПроцедуры, ".");
	Если ЧастиИмени.Количество() <> 2 И ЧастиИмени.Количество() <> 3 Тогда
		ВызватьИсключение СтрШаблон(
			"Неправильный формат параметра ИмяПроцедуры (передано значение: ""%1"") в БазоваяПодсистемаСервер.ОН_ВыполнитьМетодКонфигурации", ИмяПроцедуры);
	КонецЕсли;

	ИмяОбъекта = ЧастиИмени[0];
	Если ЧастиИмени.Количество() = 2 И Метаданные.ОбщиеМодули.Найти(ИмяОбъекта) = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
			"Неправильный формат параметра ИмяПроцедуры (передано значение: ""%1"") в БазоваяПодсистемаСервер.ОН_ВыполнитьМетодКонфигурации:
				|Не существует общий модуль ""%2"".",
			ИмяПроцедуры,
			ИмяОбъекта);
	КонецЕсли;

	Если ЧастиИмени.Количество() = 3 Тогда
		ПолноеИмяОбъекта = ЧастиИмени[0] + "." + ЧастиИмени[1];
		Попытка
			Менеджер = ОН_МенеджерОбъектаПоИмени(ПолноеИмяОбъекта);
		Исключение
			Менеджер = Неопределено;
		КонецПопытки;
		Если Менеджер = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				"Неправильный формат параметра ИмяПроцедуры (передано значение: ""%1"") в БазоваяПодсистемаСервер.ОН_ВыполнитьМетодКонфигурации:
				           |Не существует менеджер объекта ""%2"".",
				ИмяПроцедуры,
				ПолноеИмяОбъекта);
		КонецЕсли;
	КонецЕсли;

	ИмяМетодаОбъекта = ЧастиИмени[ЧастиИмени.ВГраница()];
	ВременнаяСтруктура = Новый Структура;
	Попытка
		// Проверка того, что ИмяПроцедуры является допустимым идентификатором.
		// Например: МояПроцедура.
		ВременнаяСтруктура.Вставить(ИмяМетодаОбъекта);
	Исключение
		ЗаписьЖурналаРегистрации("Безопасное выполнение метода",
			УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СтрШаблон(
			"Неправильный формат параметра ИмяПроцедуры (передано значение: ""%1"") в БазоваяПодсистемаСервер.ОН_ВыполнитьМетодКонфигурации:
			           |Имя метода ""%2"" не соответствует требованиям образования имен процедур и функций.",
			ИмяПроцедуры, ИмяМетодаОбъекта);
	КонецПопытки;
КонецПроцедуры

Функция ОН_МенеджерОбъектаПоИмени(Имя)
	Перем КлассОМ, ИмяОМ, Менеджер;

	ЧастиИмени = СтрРазделить(Имя, ".");

	Если ЧастиИмени.Количество() > 0 Тогда
		КлассОМ = ВРег(ЧастиИмени[0]);
	КонецЕсли;

	Если ЧастиИмени.Количество() > 1 Тогда
		ИмяОМ = ЧастиИмени[1];
	КонецЕсли;

	Если      КлассОМ = "ПЛАНОБМЕНА"
	 Или      КлассОМ = "ПЛАНЫОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
	ИначеЕсли КлассОМ = "СПРАВОЧНИК"
	      Или КлассОМ = "СПРАВОЧНИКИ" Тогда
		Менеджер = Справочники;
	ИначеЕсли КлассОМ = "ДОКУМЕНТ"
	      Или КлассОМ = "ДОКУМЕНТЫ" Тогда
		Менеджер = Документы;
	ИначеЕсли КлассОМ = "ЖУРНАЛДОКУМЕНТОВ"
	      Или КлассОМ = "ЖУРНАЛЫДОКУМЕНТОВ" Тогда
		Менеджер = ЖурналыДокументов;
	ИначеЕсли КлассОМ = "ПЕРЕЧИСЛЕНИЕ"
	      Или КлассОМ = "ПЕРЕЧИСЛЕНИЯ" Тогда
		Менеджер = Перечисления;
	ИначеЕсли КлассОМ = "ОБЩИЙМОДУЛЬ"
	      Или КлассОМ = "ОБЩИЕМОДУЛИ" Тогда

		Возврат ОН_ОбщийМодуль(ИмяОМ);
	ИначеЕсли КлассОМ = "ОТЧЕТ"
	      Или КлассОМ = "ОТЧЕТЫ" Тогда
		Менеджер = Отчеты;
	ИначеЕсли КлассОМ = "ОБРАБОТКА"
	      Или КлассОМ = "ОБРАБОТКИ" Тогда
		Менеджер = Обработки;
	ИначеЕсли КлассОМ = "ПЛАНВИДОВХАРАКТЕРИСТИК"
	      Или КлассОМ = "ПЛАНЫВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
	ИначеЕсли КлассОМ = "ПЛАНСЧЕТОВ"
	      Или КлассОМ = "ПЛАНЫСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
	ИначеЕсли КлассОМ = "ПЛАНВИДОВРАСЧЕТА"
	      Или КлассОМ = "ПЛАНЫВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
	ИначеЕсли КлассОМ = "РЕГИСТРСВЕДЕНИЙ"
	      Или КлассОМ = "РЕГИСТРЫСВЕДЕНИЙ" Тогда
		Менеджер = РегистрыСведений;
	ИначеЕсли КлассОМ = "РЕГИСТРНАКОПЛЕНИЯ"
	      Или КлассОМ = "РЕГИСТРЫНАКОПЛЕНИЯ" Тогда
		Менеджер = РегистрыНакопления;
	ИначеЕсли КлассОМ = "РЕГИСТРБУХГАЛТЕРИИ"
	      Или КлассОМ = "РЕГИСТРЫБУХГАЛТЕРИИ" Тогда
		Менеджер = РегистрыБухгалтерии;
	ИначеЕсли КлассОМ = "РЕГИСТРРАСЧЕТА"
	      Или КлассОМ = "РЕГИСТРЫРАСЧЕТА" Тогда

		Если ЧастиИмени.Количество() < 3 Тогда
			// Регистр расчета
			Менеджер = РегистрыРасчета;
		Иначе
			КлассПодчиненногоОМ = ВРег(ЧастиИмени[2]);
			Если ЧастиИмени.Количество() > 3 Тогда
				ИмяПодчиненногоОМ = ЧастиИмени[3];
			КонецЕсли;
			Если КлассПодчиненногоОМ = "ПЕРЕРАСЧЕТ"
			 Или КлассПодчиненногоОМ = "ПЕРЕРАСЧЕТЫ" Тогда
				// Перерасчет
				Попытка
					Менеджер	= РегистрыРасчета[ИмяОМ].Перерасчеты;
					ИмяОМ		= ИмяПодчиненногоОМ;
				Исключение
					Менеджер	= Неопределено;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли КлассОМ = "БИЗНЕСПРОЦЕСС"
	      Или КлассОМ = "БИЗНЕСПРОЦЕССЫ" Тогда
		Менеджер = БизнесПроцессы;
	ИначеЕсли КлассОМ = "ЗАДАЧА"
	      Или КлассОМ = "ЗАДАЧИ" Тогда
		Менеджер = Задачи;
	ИначеЕсли КлассОМ = "КОНСТАНТА"
	      Или КлассОМ = "КОНСТАНТЫ" Тогда
		Менеджер = Константы;
	ИначеЕсли КлассОМ = "ПОСЛЕДОВАТЕЛЬНОСТЬ"
	      Или КлассОМ = "ПОСЛЕДОВАТЕЛЬНОСТИ" Тогда
		Менеджер = Последовательности;
	КонецЕсли;

	Если Менеджер <> Неопределено Тогда
		Если ЗначениеЗаполнено(ИмяОМ) Тогда
			Попытка
				Возврат Менеджер[ИмяОМ];
			Исключение
				Менеджер = Неопределено;
			КонецПопытки;
		Иначе
			Возврат Менеджер;
		КонецЕсли;
	КонецЕсли;

	ВызватьИсключение СтрШаблон("Не удалось получить менеджер для объекта ""%1""", Имя);
КонецФункции

Функция ОН_МенеджерОбъектаПоПолномуИмени(ПолноеИмя) Экспорт
	Перем КлассОМ, ИмяОМ, Менеджер;

	ЧастиИмени = СтрРазделить(ПолноеИмя, ".");

	Если ЧастиИмени.Количество() >= 2 Тогда
		КлассОМ = ЧастиИмени[0];
		ИмяОМ   = ЧастиИмени[1];
	Иначе
		Менеджер = Неопределено;
	КонецЕсли;

	Если      ВРег(КлассОМ) = "ПЛАНОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
	ИначеЕсли ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
		Менеджер = Справочники;
	ИначеЕсли ВРег(КлассОМ) = "ДОКУМЕНТ" Тогда
		Менеджер = Документы;
	ИначеЕсли ВРег(КлассОМ) = "ЖУРНАЛДОКУМЕНТОВ" Тогда
		Менеджер = ЖурналыДокументов;
	ИначеЕсли ВРег(КлассОМ) = "ПЕРЕЧИСЛЕНИЕ" Тогда
		Менеджер = Перечисления;
	ИначеЕсли ВРег(КлассОМ) = "ОТЧЕТ" Тогда
		Менеджер = Отчеты;
	ИначеЕсли ВРег(КлассОМ) = "ОБРАБОТКА" Тогда
		Менеджер = Обработки;
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРСВЕДЕНИЙ" Тогда
		Менеджер = РегистрыСведений;
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
		Менеджер = РегистрыНакопления;
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
		Менеджер = РегистрыБухгалтерии;
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРРАСЧЕТА" Тогда
		Если ЧастиИмени.Количество() = 2 Тогда
			Менеджер = РегистрыРасчета;
		ИначеЕсли ЧастиИмени.Количество() = 4 Тогда
			КлассПодчиненногоОМ = ЧастиИмени[2];
			ИмяПодчиненногоОМ = ЧастиИмени[3];

			Если ВРег(КлассПодчиненногоОМ) = "ПЕРЕРАСЧЕТ" Тогда
				Менеджер	= РегистрыРасчета[ИмяОМ].Перерасчеты;
				ИмяОм		= ИмяПодчиненногоОМ;
			Иначе
				Менеджер = Неопределено;
			КонецЕсли;
		Иначе
			Менеджер = Неопределено;
		КонецЕсли;
	ИначеЕсли ВРег(КлассОМ) = "БИЗНЕСПРОЦЕСС" Тогда
		Менеджер = БизнесПроцессы;
	ИначеЕсли ВРег(КлассОМ) = "ЗАДАЧА" Тогда
		Менеджер = Задачи;
	ИначеЕсли ВРег(КлассОМ) = "КОНСТАНТА" Тогда
		Менеджер = Константы;
	ИначеЕсли ВРег(КлассОМ) = "ПОСЛЕДОВАТЕЛЬНОСТЬ" Тогда
		Менеджер = Последовательности;
	Иначе
		Менеджер = Неопределено;
	КонецЕсли;

	Если Менеджер = Неопределено Тогда
		ОН_ПроверитьОбъектМетаданныхСуществует(ПолноеИмя);
		ВызватьИсключение СтрШаблон(
			"Объект метаданных ""%1"" не имеет менеджера объекта.", ПолноеИмя);
	КонецЕсли;

	Попытка
		Возврат Менеджер[ИмяОМ];
	Исключение
		ОН_ПроверитьОбъектМетаданныхСуществует(ПолноеИмя);

		ВызватьИсключение;
	КонецПопытки;
КонецФункции

Функция ОН_МенеджерОбъектаПоСсылке(Ссылка) Экспорт
	ИмяОбъекта	= Ссылка.Метаданные().Имя;
	ТипСсылки	= ТипЗнч(Ссылка);

	Если Справочники.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Справочники[ИмяОбъекта];
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Документы[ИмяОбъекта];
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат БизнесПроцессы[ИмяОбъекта];
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыВидовХарактеристик[ИмяОбъекта];
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыСчетов[ИмяОбъекта];
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыВидовРасчета[ИмяОбъекта];
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Задачи[ИмяОбъекта];
	ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыОбмена[ИмяОбъекта];
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Перечисления[ИмяОбъекта];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ОН_ОбщийМодуль(Имя) Экспорт
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		// АПК:488-выкл ВычислитьВБезопасномРежиме не используется, чтобы избежать вызова ОбщийМодуль рекурсивно.
		УстановитьБезопасныйРежим(Истина);
		Модуль = Вычислить(Имя);
		// АПК:488-вкл
	ИначеЕсли СтрЧислоВхождений(Имя, ".") = 1 Тогда
		Возврат ОН_СерверныйМодульМенеджера(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;

	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение СтрШаблон("Общий модуль ""%1"" не существует.", Имя);
	КонецЕсли;

	Возврат Модуль;
КонецФункции

Функция ОН_СерверныйМодульМенеджера(Имя)
	ОбъектНайден = Ложь;

	ЧастиИмени = СтрРазделить(Имя, ".");
	Если ЧастиИмени.Количество() = 2 Тогда
		ИмяВида = ВРег(ЧастиИмени[0]);
		ИмяОбъекта = ЧастиИмени[1];

		Если ИмяВида = ВРег("Константы") Тогда
			Если Метаданные.Константы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыСведений") Тогда
			Если Метаданные.РегистрыСведений.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыНакопления") Тогда
			Если Метаданные.РегистрыНакопления.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыБухгалтерии") Тогда
			Если Метаданные.РегистрыБухгалтерии.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыРасчета") Тогда
			Если Метаданные.РегистрыРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Справочники") Тогда
			Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Документы") Тогда
			Если Метаданные.Документы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Отчеты") Тогда
			Если Метаданные.Отчеты.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Обработки") Тогда
			Если Метаданные.Обработки.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("БизнесПроцессы") Тогда
			Если Метаданные.БизнесПроцессы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ЖурналыДокументов") Тогда
			Если Метаданные.ЖурналыДокументов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Задачи") Тогда
			Если Метаданные.Задачи.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыСчетов") Тогда
			Если Метаданные.ПланыСчетов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыОбмена") Тогда
			Если Метаданные.ПланыОбмена.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовХарактеристик") Тогда
			Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовРасчета") Тогда
			Если Метаданные.ПланыВидовРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Не ОбъектНайден Тогда
		ВызватьИсключение СтрШаблон("Объект метаданных ""%1"" не существует.",Имя);
	КонецЕсли;

	// АПК:488-выкл ВычислитьВБезопасномРежиме не используется, чтобы избежать вызова ОбщийМодуль рекурсивно.
	УстановитьБезопасныйРежим(Истина);
	Модуль = Вычислить(Имя);
	// АПК:488-вкл

	Возврат Модуль;
КонецФункции

Процедура ОН_ПроверитьОбъектМетаданныхСуществует(ПолноеИмя)
	Если Метаданные.НайтиПоПолномуИмени(ПолноеИмя) = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
			"Неизвестный тип объекта метаданных ""%1"".", ПолноеИмя);
	КонецЕсли;
КонецПроцедуры

Функция ОН_ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Экспорт
	ИмяОбъектаМетаданных	= ОбъектМетаданных.ПолноеИмя();
	Позиция					= СтрНайти(ИмяОбъектаМетаданных, ".");
	Если Позиция > 0 Тогда
		ИмяБазовогоТипа = Лев(ИмяОбъектаМетаданных, Позиция - 1);
		Возврат ИмяБазовогоТипа = "Справочник"
			Или ИмяБазовогоТипа = "Документ"
			Или ИмяБазовогоТипа = "БизнесПроцесс"
			Или ИмяБазовогоТипа = "Задача"
			Или ИмяБазовогоТипа = "ПланСчетов"
			Или ИмяБазовогоТипа = "ПланОбмена"
			Или ИмяБазовогоТипа = "ПланВидовХарактеристик"
			Или ИмяБазовогоТипа = "ПланВидовРасчета";
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ОН_ЭтоРегистр(ОбъектМетаданных) Экспорт
	Возврат Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных)
		Или Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
		Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных)
		Или Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных);
КонецФункции

Функция ОН_ЭтоСсылка(ПроверяемыйТип) Экспорт
	Возврат ПроверяемыйТип <> Тип("Неопределено") И БазоваяПодсистемаСерверПовтИсп.СП_ОписаниеТипаВсеСсылки().СодержитТип(ПроверяемыйТип);
КонецФункции

Процедура ОН_СообщитьПользователю(Знач ТекстСообщенияПользователю, Знач КлючДанных = Неопределено, Знач Поле = "", Знач ПутьКДанным = "", Отказ = Ложь) Экспорт
	ЭтоОбъект = Ложь;

	Если КлючДанных <> Неопределено
		И XMLТипЗнч(КлючДанных) <> Неопределено Тогда

		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = СтрНайти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;

	БазоваяПодсистемаКлиентСервер.сОН_СообщитьПользователю(ТекстСообщенияПользователю, КлючДанных, Поле, ПутьКДанным, Отказ, ЭтоОбъект);
КонецПроцедуры

Процедура ОН_УдалитьНепроверяемыеРеквизитыИзМассива(МассивРеквизитов, МассивНепроверяемыхРеквизитов) Экспорт
	Для Каждого ЭлементМассива Из МассивНепроверяемыхРеквизитов Цикл
		ПорядковыйНомер = МассивРеквизитов.Найти(ЭлементМассива);
		Если ПорядковыйНомер <> Неопределено Тогда
			МассивРеквизитов.Удалить(ПорядковыйНомер);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ОН_СкопироватьРекурсивно(Источник, ФиксироватьДанные = Неопределено) Экспорт
	Перем Приемник;

	ТипИсточника = ТипЗнч(Источник);

	Если ТипИсточника = Тип("ТаблицаЗначений") Тогда
		Возврат Источник.Скопировать();
	КонецЕсли;

	Если ТипИсточника = Тип("Структура")
		Или ТипИсточника = Тип("ФиксированнаяСтруктура") Тогда
		Приемник = ОН_СкопироватьСтруктуру(Источник, ФиксироватьДанные);
	ИначеЕсли ТипИсточника = Тип("Соответствие")
		Или ТипИсточника = Тип("ФиксированноеСоответствие") Тогда
		Приемник = ОН_СкопироватьСоответствие(Источник, ФиксироватьДанные);
	ИначеЕсли ТипИсточника = Тип("Массив")
		Или ТипИсточника = Тип("ФиксированныйМассив") Тогда
		Приемник = ОН_СкопироватьМассив(Источник, ФиксироватьДанные);
	ИначеЕсли ТипИсточника = Тип("СписокЗначений") Тогда
		Приемник = ОН_СкопироватьСписокЗначений(Источник, ФиксироватьДанные);
	Иначе
		Приемник = Источник;
	КонецЕсли;

	Возврат Приемник;
КонецФункции

Функция ОН_СкопироватьСтруктуру(СтруктураИсточник, ФиксироватьДанные)
	СтруктураРезультат = Новый Структура;

	Для Каждого КлючИЗначение Из СтруктураИсточник Цикл
		СтруктураРезультат.Вставить(КлючИЗначение.Ключ, ОН_СкопироватьРекурсивно(КлючИЗначение.Значение, ФиксироватьДанные));
	КонецЦикла;

	Если ФиксироватьДанные = Истина
		Или ФиксироватьДанные = Неопределено
		И ТипЗнч(СтруктураИсточник) = Тип("ФиксированнаяСтруктура") Тогда

		Возврат Новый ФиксированнаяСтруктура(СтруктураРезультат);
	КонецЕсли;

	Возврат СтруктураРезультат;
КонецФункции

Функция ОН_СкопироватьСоответствие(СоответствиеИсточник, ФиксироватьДанные)
	СоответствиеРезультат = Новый Соответствие;

	Для Каждого КлючИЗначение Из СоответствиеИсточник Цикл
		СоответствиеРезультат.Вставить(КлючИЗначение.Ключ, ОН_СкопироватьРекурсивно(КлючИЗначение.Значение, ФиксироватьДанные));
	КонецЦикла;

	Если ФиксироватьДанные = Истина
		Или ФиксироватьДанные = Неопределено
		И ТипЗнч(СоответствиеИсточник) = Тип("ФиксированноеСоответствие") Тогда

		Возврат Новый ФиксированноеСоответствие(СоответствиеРезультат);
	КонецЕсли;

	Возврат СоответствиеРезультат;
КонецФункции

Функция ОН_СкопироватьМассив(МассивИсточник, ФиксироватьДанные)
	МассивРезультат = Новый Массив;

	Для Каждого Элемент Из МассивИсточник Цикл
		МассивРезультат.Добавить(ОН_СкопироватьРекурсивно(Элемент, ФиксироватьДанные));
	КонецЦикла;

	Если ФиксироватьДанные = Истина
		Или ФиксироватьДанные = Неопределено
		И ТипЗнч(МассивИсточник) = Тип("ФиксированныйМассив") Тогда

		Возврат Новый ФиксированныйМассив(МассивРезультат);
	КонецЕсли;

	Возврат МассивРезультат;
КонецФункции

Функция ОН_СкопироватьСписокЗначений(СписокИсточник, ФиксироватьДанные)
	СписокРезультат = Новый СписокЗначений;

	Для Каждого ЭлементСписка Из СписокИсточник Цикл
		СписокРезультат.Добавить(
			ОН_СкопироватьРекурсивно(ЭлементСписка.Значение, ФиксироватьДанные),
			ЭлементСписка.Представление,
			ЭлементСписка.Пометка,
			ЭлементСписка.Картинка);
	КонецЦикла;

	Возврат СписокРезультат;
КонецФункции

Функция ОН_ДанныеСовпадают(Данные1, Данные2) Экспорт
	Если ТипЗнч(Данные1) <> ТипЗнч(Данные2) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(Данные1) = Тип("Структура")
	 ИЛИ ТипЗнч(Данные1) = Тип("ФиксированнаяСтруктура") Тогда

		Если Данные1.Количество() <> Данные2.Количество() Тогда
			Возврат Ложь;
		КонецЕсли;

		Для каждого КлючИЗначение Из Данные1 Цикл
			СтароеЗначение = Неопределено;

			Если НЕ Данные2.Свойство(КлючИЗначение.Ключ, СтароеЗначение)
			 ИЛИ НЕ ОН_ДанныеСовпадают(КлючИЗначение.Значение, СтароеЗначение) Тогда

				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;

		Возврат Истина;
	ИначеЕсли ТипЗнч(Данные1) = Тип("Соответствие")
	      ИЛИ ТипЗнч(Данные1) = Тип("ФиксированноеСоответствие") Тогда

		Если Данные1.Количество() <> Данные2.Количество() Тогда
			Возврат Ложь;
		КонецЕсли;

		КлючиНовогоСоответствия = Новый Соответствие;

		Для каждого КлючИЗначение Из Данные1 Цикл
			КлючиНовогоСоответствия.Вставить(КлючИЗначение.Ключ, Истина);
			СтароеЗначение = Данные2.Получить(КлючИЗначение.Ключ);

			Если НЕ ОН_ДанныеСовпадают(КлючИЗначение.Значение, СтароеЗначение) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;

		Для каждого КлючИЗначение Из Данные2 Цикл
			Если КлючиНовогоСоответствия[КлючИЗначение.Ключ] = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;

		Возврат Истина;
	ИначеЕсли ТипЗнч(Данные1) = Тип("Массив")
	      ИЛИ ТипЗнч(Данные1) = Тип("ФиксированныйМассив") Тогда

		Если Данные1.Количество() <> Данные2.Количество() Тогда
			Возврат Ложь;
		КонецЕсли;

		Индекс = Данные1.Количество()-1;
		Пока Индекс >= 0 Цикл
			Если НЕ ОН_ДанныеСовпадают(Данные1.Получить(Индекс), Данные2.Получить(Индекс)) Тогда
				Возврат Ложь;
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;

		Возврат Истина;
	ИначеЕсли ТипЗнч(Данные1) = Тип("ТаблицаЗначений") Тогда
		Если Данные1.Количество() <> Данные2.Количество() Тогда
			Возврат Ложь;
		КонецЕсли;

		Если Данные1.Колонки.Количество() <> Данные2.Колонки.Количество() Тогда
			Возврат Ложь;
		КонецЕсли;

		Для каждого Колонка Из Данные1.Колонки Цикл
			Если Данные2.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;

			Индекс = Данные1.Количество()-1;
			Пока Индекс >= 0 Цикл
				Если НЕ ОН_ДанныеСовпадают(Данные1[Индекс][Колонка.Имя], Данные2[Индекс][Колонка.Имя]) Тогда
					Возврат Ложь;
				КонецЕсли;
				Индекс = Индекс - 1;
			КонецЦикла;
		КонецЦикла;

		Возврат Истина;
	ИначеЕсли ТипЗнч(Данные1) = Тип("ХранилищеЗначения") Тогда
		Если НЕ ОН_ДанныеСовпадают(Данные1.Получить(), Данные2.Получить()) Тогда
			Возврат Ложь;
		КонецЕсли;

		Возврат Истина;
	КонецЕсли;

	Возврат Данные1 = Данные2;
КонецФункции

Функция ОН_ЭтоАвтономноеРабочееМесто() Экспорт
	// Зарезервировано для новых подсистем

	Возврат Ложь;
КонецФункции

Функция ОН_РежимОтладки() Экспорт
	ПараметрЗапускаПриложения = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");

	Возврат СтрНайти(ПараметрЗапускаПриложения, "РежимОтладки") > 0;
КонецФункции

Функция ОН_ЗначениеИзСтрокиXML(СтрокаXML) Экспорт
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);

	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
КонецФункции

Функция ОН_ВызватьФункциюКонфигурации(Знач ИмяМетода, Знач Параметры = Неопределено) Экспорт
	ОН_ПроверитьИмяПроцедурыКонфигурации(ИмяМетода);

	// Зарезервировано для новых подсистем

	ПараметрыСтрока = "";
	Если Параметры <> Неопределено И Параметры.Количество() > 0 Тогда
		Для Индекс = 0 По Параметры.ВГраница() Цикл
			ПараметрыСтрока = ПараметрыСтрока + "Параметры[" + XMLСтрока(Индекс) + "],";
		КонецЦикла;
		ПараметрыСтрока = Сред(ПараметрыСтрока, 1, СтрДлина(ПараметрыСтрока) - 1);
	КонецЕсли;

	Возврат Вычислить(ИмяМетода + "(" + ПараметрыСтрока + ")");
КонецФункции

Функция ОН_ВызватьФункциюОбъекта(Знач Объект, Знач ИмяМетода, Знач Параметры = Неопределено) Экспорт
	// Проверка имени метода на корректность.
	Попытка
		Тест = Новый Структура;
		Тест.Вставить(ИмяМетода, ИмяМетода);
	Исключение
		ВызватьИсключение СтрШаблон("Некорректное значение параметра ИмяМетода (%1) в БазоваяПодсистемаСервер.ОН_ВызватьФункциюОбъекта", ИмяМетода);
	КонецПопытки;

	// Зарезервировано для новых подсистем

	ПараметрыСтрока = "";
	Если Параметры <> Неопределено И Параметры.Количество() > 0 Тогда
		Для Индекс = 0 По Параметры.ВГраница() Цикл
			ПараметрыСтрока = ПараметрыСтрока + "Параметры[" + XMLСтрока(Индекс) + "],";
		КонецЦикла;
		ПараметрыСтрока = Сред(ПараметрыСтрока, 1, СтрДлина(ПараметрыСтрока) - 1);
	КонецЕсли;

	Возврат Вычислить("Объект." + ИмяМетода + "(" + ПараметрыСтрока + ")");
КонецФункции

Процедура ОН_ВыполнитьМетодОбъекта(Знач Объект, Знач ИмяМетода, Знач Параметры = Неопределено) Экспорт
	// Проверка имени метода на корректность.
	Попытка
		Тест = Новый Структура(ИмяМетода, ИмяМетода);
		Если Тест = Неопределено Тогда
			ВызватьИсключение "Синтетический тест";
		КонецЕсли;
	Исключение
		ВызватьИсключение СтрШаблон("Некорректное значение параметра ИмяМетода (%1) в БазоваяПодсистемаСервер.ОН_ВыполнитьМетодОбъекта", ИмяМетода);
	КонецПопытки;

	// Зарезервировано для новых подсистем

	ПараметрыСтрока = "";
	Если Параметры <> Неопределено И Параметры.Количество() > 0 Тогда
		Для Индекс = 0 По Параметры.ВГраница() Цикл
			ПараметрыСтрока = ПараметрыСтрока + "Параметры[" + XMLСтрока(Индекс) + "],";
		КонецЦикла;
		ПараметрыСтрока = Сред(ПараметрыСтрока, 1, СтрДлина(ПараметрыСтрока) - 1);
	КонецЕсли;

	Выполнить "Объект." + ИмяМетода + "(" + ПараметрыСтрока + ")";
КонецПроцедуры

Процедура ОН_ПриНачалеВыполненияРегламентногоЗадания(РегламентноеЗадание = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Справочники.ВерсииРасширений.ЗарегистрироватьИспользованиеВерсииРасширений();
	УстановитьПривилегированныйРежим(Ложь);

	Если РегистрыСведений.ПараметрыРаботыПрограммы.НеобходимоОбновление() Тогда
		Текст = "Вход в программу временно невозможен в связи с обновлением на новую версию.
			               |Рекомендуется запрещать выполнение регламентных заданий на время обновления.";
		РегламентныеЗаданияСервер.РЗ_ОтменитьВыполнениеЗадания(РегламентноеЗадание, Текст);
		ВызватьИсключение Текст;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Если ПланыОбмена.ГлавныйУзел() = Неопределено И ЗначениеЗаполнено(Константы.ГлавныйУзел.Получить()) Тогда
		Текст = "Вход в программу временно невозможен до восстановления связи с главным узлом.
			               |Рекомендуется запрещать выполнение регламентных заданий на время восстановления.";
		РегламентныеЗаданияСервер.РЗ_ОтменитьВыполнениеЗадания(РегламентноеЗадание, Текст);

		ВызватьИсключение Текст;
	КонецЕсли;

	Если РегламентноеЗадание <> Неопределено Тогда
		РегламентныеЗаданияСервер.БРСВР_ПриНачалеВыполненияРегламентногоЗадания(РегламентноеЗадание);

		Доступно = РегламентныеЗаданияСервер.сРЗ_РегламентноеЗаданиеДоступноПоФункциональнымОпциям(РегламентноеЗадание);
		Если Не Доступно Тогда
			Задания = РегламентныеЗаданияСервер.РЗ_НайтиЗадания(Новый Структура("Метаданные", РегламентноеЗадание));
			Для Каждого Задание Из Задания Цикл
				РегламентныеЗаданияСервер.РЗ_ИзменитьЗадание(Задание.УникальныйИдентификатор, Новый Структура("Использование", Ложь));
			КонецЦикла;
			Текст = "Регламентное задание недоступно по функциональным опциям или
				               |не поддерживает работу в текущем режиме работы программы.
				               |Выполнение прервано. Задание отключено.";
			РегламентныеЗаданияСервер.РЗ_ОтменитьВыполнениеЗадания(РегламентноеЗадание, Текст);

			ВызватьИсключение Текст;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ОН_ОписаниеЗащитыБезПредупреждений() Экспорт
	ОписаниеЗащиты									= Новый ОписаниеЗащитыОтОпасныхДействий;
	ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях	= Ложь;

	Возврат ОписаниеЗащиты;
КонецФункции

Функция ОН_СтроковоеПредставлениеТипа(Тип) Экспорт
	Представление = "";

	Если ОН_ЭтоСсылка(Тип) Тогда
		ПолноеИмя	= Метаданные.НайтиПоТипу(Тип).ПолноеИмя();
		ИмяОбъекта	= СтрРазделить(ПолноеИмя, ".")[1];
		Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "СправочникСсылка";
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ДокументСсылка";
		ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "БизнесПроцессСсылка";
		ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланВидовХарактеристикСсылка";
		ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланСчетовСсылка";
		ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланВидовРасчетаСсылка";
		ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ЗадачаСсылка";
		ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланОбменаСсылка";
		ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПеречислениеСсылка";
		КонецЕсли;

		Результат = ?(Представление = "", Представление, Представление + "." + ИмяОбъекта);
	Иначе
		Результат = Строка(Тип);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Процедура ОН_УстановитьСвойстваДинамическогоСписка(Список, СвойстваСписка) Экспорт
	Форма							= Список.Родитель;
	ТипФормаКлиентскогоПриложения	= Тип("ФормаКлиентскогоПриложения");

	Пока ТипЗнч(Форма) <> ТипФормаКлиентскогоПриложения Цикл
		Форма = Форма.Родитель;
	КонецЦикла;

	ДинамическийСписок	= Форма[Список.ПутьКДанным];
	ТекстЗапроса		= СвойстваСписка.ТекстЗапроса;

	Если Не ПустаяСтрока(ТекстЗапроса) Тогда
		ДинамическийСписок.ТекстЗапроса = ТекстЗапроса;
	КонецЕсли;

	ОсновнаяТаблица = СвойстваСписка.ОсновнаяТаблица;

	Если Не ПустаяСтрока(ОсновнаяТаблица) Тогда
		ДинамическийСписок.ОсновнаяТаблица = ОсновнаяТаблица;
	КонецЕсли;

	ДинамическоеСчитываниеДанных = СвойстваСписка.ДинамическоеСчитываниеДанных;

	Если ТипЗнч(ДинамическоеСчитываниеДанных) = Тип("Булево") Тогда
		ДинамическийСписок.ДинамическоеСчитываниеДанных = ДинамическоеСчитываниеДанных;
	КонецЕсли;
КонецПроцедуры

Функция ОН_ПараметрыПодключенияWSПрокси() Экспорт
	Результат	= Новый Структура;
	Результат.Вставить("АдресWSDL");
	Результат.Вставить("URIПространстваИмен");
	Результат.Вставить("ИмяСервиса");
	Результат.Вставить("ИмяТочкиПодключения",			"");
	Результат.Вставить("ИмяПользователя");
	Результат.Вставить("Пароль");
	Результат.Вставить("Таймаут",						0);
	Результат.Вставить("Местоположение");
	Результат.Вставить("ИспользоватьАутентификациюОС",	Ложь);
	Результат.Вставить("ДелатьКонтрольныйВызов",		Ложь);
	Результат.Вставить("ЗащищенноеСоединение",			Неопределено);

	Возврат Результат;
КонецФункции

Функция ОН_СоздатьWSПрокси(ПереданныеПараметры) Экспорт
	БазоваяПодсистемаКлиентСервер.ОН_ПроверитьПараметр("СоздатьWSПрокси", "Параметры", ПереданныеПараметры, Тип("Структура"), Новый Структура("АдресWSDL,URIПространстваИмен,ИмяСервиса", Тип("Строка"), Тип("Строка"), Тип("Строка")));

	ПараметрыПодключения	= ОН_ПараметрыПодключенияWSПрокси();
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения, ПереданныеПараметры);

	ДелатьКонтрольныйВызов	= ПараметрыПодключения.ДелатьКонтрольныйВызов;
	Таймаут					= ПараметрыПодключения.Таймаут;

	Если ДелатьКонтрольныйВызов И Таймаут <> Неопределено И Таймаут > 20 Тогда
		ПараметрыПодключения.Таймаут	= 7;
		WSПроксиPing					= РегистрыСведений.КэшПрограммныхИнтерфейсов.ВнутренняяWSПрокси(ПараметрыПодключения);
		Попытка
			WSПроксиPing.Ping();
		Исключение
			АдресТочкиПодключения = WSПроксиPing.ТочкаПодключения.Местоположение;

			ТекстОшибки = СтрШаблон("Не удалось проверить доступность web-сервиса
				           |%1
				           |по причине:
				           |%2",
				ПараметрыПодключения.АдресWSDL,
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));

			// Зарезервировано для новых подсистем

			ЗаписьЖурналаРегистрации("WSПрокси", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);

			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
		ПараметрыПодключения.Таймаут = Таймаут;
	КонецЕсли;

	Возврат РегистрыСведений.КэшПрограммныхИнтерфейсов.ВнутренняяWSПрокси(ПараметрыПодключения);
КонецФункции

Функция ОН_ОбъектМетаданныхДоступенПоФункциональнымОпциям(Знач ОбъектМетаданных) Экспорт
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(ОбъектМетаданных) <> Тип("Строка") Тогда
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	Иначе
		ПолноеИмя = ОбъектМетаданных;
	КонецЕсли;

	Возврат БазоваяПодсистемаСерверПовтИсп.СП_ДоступностьОбъектовПоОпциям().Получить(ПолноеИмя) <> Ложь;
КонецФункции

Функция ОН_СсылкаСуществует(ПроверяемаяСсылка) Экспорт
	Запрос			= Новый Запрос;
	Запрос.Текст	=
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	&ИмяТаблицы КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицы", ПроверяемаяСсылка.Метаданные().ПолноеИмя());

	Запрос.УстановитьПараметр("Ссылка", ПроверяемаяСсылка);

	УстановитьПривилегированныйРежим(Истина);

	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

Функция ОН_ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) Экспорт
	Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Возврат "Документы";
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Возврат "Справочники";
	ИначеЕсли Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
		Возврат "Перечисления";
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрыСведений";
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрыНакопления";
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрыБухгалтерии";
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрыРасчета";
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланыОбмена";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланыВидовХарактеристик";
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
		Возврат "БизнесПроцессы";
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		Возврат "Задачи";
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланыСчетов";
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланыВидовРасчета";
	ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		Возврат "Константы";
	ИначеЕсли Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных) Тогда
		Возврат "ЖурналыДокументов";
	ИначеЕсли Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		Возврат "Последовательности";
	ИначеЕсли Метаданные.РегламентныеЗадания.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегламентныеЗадания";
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных.Родитель()) И ОбъектМетаданных.Родитель().Перерасчеты.Найти(ОбъектМетаданных.Имя) = ОбъектМетаданных Тогда
		Возврат "Перерасчеты";
	ИначеЕсли Метаданные.Обработки.Содержит(ОбъектМетаданных) Тогда
		Возврат "Обработки";
	ИначеЕсли Метаданные.Отчеты.Содержит(ОбъектМетаданных) Тогда
		Возврат "Отчеты";
	ИначеЕсли Метаданные.Подсистемы.Содержит(ОбъектМетаданных) Тогда
		Возврат "Подсистемы";
	ИначеЕсли Метаданные.ОбщиеМодули.Содержит(ОбъектМетаданных) Тогда
		Возврат "ОбщиеМодули";
	ИначеЕсли Метаданные.ПараметрыСеанса.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПараметрыСеанса";
	ИначеЕсли Метаданные.Роли.Содержит(ОбъектМетаданных) Тогда
		Возврат "Роли";
	ИначеЕсли Метаданные.КритерииОтбора.Содержит(ОбъектМетаданных) Тогда
		Возврат "КритерииОтбора";
	ИначеЕсли Метаданные.ПодпискиНаСобытия.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПодпискиНаСобытия";
	ИначеЕсли Метаданные.ФункциональныеОпции.Содержит(ОбъектМетаданных) Тогда
		Возврат "ФункциональныеОпции";
	ИначеЕсли Метаданные.ПараметрыФункциональныхОпций.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПараметрыФункциональныхОпций";
	ИначеЕсли Метаданные.ХранилищаНастроек.Содержит(ОбъектМетаданных) Тогда
		Возврат "ХранилищаНастроек";
	ИначеЕсли Метаданные.ОбщиеФормы.Содержит(ОбъектМетаданных) Тогда
		Возврат "ОбщиеФормы";
	ИначеЕсли Метаданные.ОбщиеКоманды.Содержит(ОбъектМетаданных) Тогда
		Возврат "ОбщиеКоманды";
	ИначеЕсли Метаданные.ГруппыКоманд.Содержит(ОбъектМетаданных) Тогда
		Возврат "ГруппыКоманд";
	ИначеЕсли Метаданные.ОбщиеМакеты.Содержит(ОбъектМетаданных) Тогда
		Возврат "ОбщиеМакеты";
	ИначеЕсли Метаданные.ОбщиеКартинки.Содержит(ОбъектМетаданных) Тогда
		Возврат "ОбщиеКартинки";
	ИначеЕсли Метаданные.ПакетыXDTO.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПакетыXDTO";
	ИначеЕсли Метаданные.WebСервисы.Содержит(ОбъектМетаданных) Тогда
		Возврат "WebСервисы";
	ИначеЕсли Метаданные.WSСсылки.Содержит(ОбъектМетаданных) Тогда
		Возврат "WSСсылки";
	ИначеЕсли Метаданные.Стили.Содержит(ОбъектМетаданных) Тогда
		Возврат "Стили";
	ИначеЕсли Метаданные.Языки.Содержит(ОбъектМетаданных) Тогда
		Возврат "Языки";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция ОН_ЗначенияРеквизитовОбъектов(Ссылки, Знач Реквизиты, ВыбратьРазрешенные = Ложь, Знач КодЯзыка = Неопределено) Экспорт
	Если ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Реквизиты = СтрСоединить(Реквизиты, ",");
	КонецЕсли;

	Если ПустаяСтрока(Реквизиты) Тогда
		ВызватьИсключение "Неверный второй параметр Реквизиты в функции БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъектов:
			           |- Поле объекта должно быть указано";
	КонецЕсли;

	Если СтрНайти(Реквизиты, ".") <> 0 Тогда
		ВызватьИсключение "Неверный второй параметр Реквизиты в функции БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъектов:
			           |- Обращение через точку не поддерживается";
	КонецЕсли;

	ЗначенияРеквизитов = Новый Соответствие;
	Если Ссылки.Количество() = 0 Тогда
		Возврат ЗначенияРеквизитов;
	КонецЕсли;

	Если ЗначениеЗаполнено(КодЯзыка) Тогда
		КодЯзыка = СтрРазделить(КодЯзыка, "_", Истина)[0];
	КонецЕсли;

	РеквизитыТекстЗапроса = Реквизиты;

	СсылкиПоТипам = Новый Соответствие;
	Для Каждого Ссылка Из Ссылки Цикл
		Тип = ТипЗнч(Ссылка);
		Если СсылкиПоТипам[Тип] = Неопределено Тогда
			СсылкиПоТипам[Тип] = Новый Массив;
		КонецЕсли;
		ЭлементПоТипу = СсылкиПоТипам[Тип]; // Массив
		ЭлементПоТипу.Добавить(Ссылка);
	КонецЦикла;

	ТекстыЗапросов		= Новый Массив;
	ПараметрыЗапроса	= Новый Структура;

	ИменаОбъектовМетаданных = Новый Массив;

	Для Каждого СсылкиПоТипу Из СсылкиПоТипам Цикл
		Тип = СсылкиПоТипу.Ключ;
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено Тогда
			ВызватьИсключение "Неверный первый параметр Ссылки в функции БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъектов:
				           |- Значения массива должны быть ссылками";
		КонецЕсли;

		ПолноеИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
		ИменаОбъектовМетаданных.Добавить(ПолноеИмяОбъектаМетаданных);

		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Ссылка,
			|	&Реквизиты
			|ИЗ
			|	&ПолноеИмяОбъектаМетаданных КАК ПсевдонимЗаданнойТаблицы
			|ГДЕ
			|	ПсевдонимЗаданнойТаблицы.Ссылка В (&Ссылки)";
		Если Не ВыбратьРазрешенные Или ТекстыЗапросов.Количество() > 0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", ""); // @Query-part-1
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Реквизиты", РеквизитыТекстЗапроса);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъектаМетаданных", ПолноеИмяОбъектаМетаданных);
		ИмяПараметра = "Ссылки" + СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Ссылки", "&" + ИмяПараметра); // @Query-part-1
		ПараметрыЗапроса.Вставить(ИмяПараметра, СсылкиПоТипу.Значение);

		ТекстыЗапросов.Добавить(ТекстЗапроса);
	КонецЦикла;

	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);

	Запрос			= Новый Запрос;
	Запрос.Текст	= ТекстЗапроса;
	Запрос.УстановитьПараметр("КодЯзыка", КодЯзыка);
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;

	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение
		// Удаление пробелов.
		Реквизиты = СтрЗаменить(Реквизиты, " ", "");
		// Преобразование параметра в массив полей.
		Реквизиты = СтрРазделить(Реквизиты, ",");

		// Поиск ошибки доступности полей.
		СписокОшибок = Новый Массив;
		Для Каждого ПолноеИмяОбъектаМетаданных Из ИменаОбъектовМетаданных Цикл
			Результат = ОН_НайтиОшибкуДоступностиРеквизитовОбъекта(ПолноеИмяОбъектаМетаданных, Реквизиты);
			Если Результат.Ошибка Тогда
				СписокОшибок.Добавить(Результат.ОписаниеОшибки);
			КонецЕсли;
		КонецЦикла;

		Если ЗначениеЗаполнено(СписокОшибок) Тогда
			ВызватьИсключение СтрШаблон("Неверный второй параметр Реквизиты в функции БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъектов: %1", СтрСоединить(СписокОшибок, Символы.ПС));
		КонецЕсли;

		// Не удалось распознать ошибку, проброс первичной ошибки.
		ВызватьИсключение;
	КонецПопытки;

	Пока Выборка.Следующий() Цикл
		Результат = Новый Структура(Реквизиты);
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		ЗначенияРеквизитов[Выборка.Ссылка] = Результат;
	КонецЦикла;

	Возврат ЗначенияРеквизитов;
КонецФункции

Функция ОН_ЗначениеРеквизитаОбъектов(МассивСсылок, ИмяРеквизита, ВыбратьРазрешенные = Ложь, Знач КодЯзыка = Неопределено) Экспорт
	Если ПустаяСтрока(ИмяРеквизита) Тогда
		ВызватьИсключение "Неверный второй параметр ИмяРеквизита в функции БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъектов:
		                             |- Имя реквизита должно быть заполнено";
	КонецЕсли;

	ЗначенияРеквизитов = ОН_ЗначенияРеквизитовОбъектов(МассивСсылок, ИмяРеквизита, ВыбратьРазрешенные, КодЯзыка);
	Для каждого Элемент Из ЗначенияРеквизитов Цикл
		ЗначенияРеквизитов[Элемент.Ключ] = Элемент.Значение[ИмяРеквизита];
	КонецЦикла;

	Возврат ЗначенияРеквизитов;
КонецФункции

Функция ОН_ПредставлениеОбъекта(ОбъектМетаданных) Экспорт
	СвойстваОбъекта = Новый Структура("РасширенноеПредставлениеОбъекта,ПредставлениеОбъекта");
	ЗаполнитьЗначенияСвойств(СвойстваОбъекта, ОбъектМетаданных);

	Если ЗначениеЗаполнено(СвойстваОбъекта.РасширенноеПредставлениеОбъекта) Тогда
		Результат = СвойстваОбъекта.РасширенноеПредставлениеОбъекта;
	ИначеЕсли ЗначениеЗаполнено(СвойстваОбъекта.ПредставлениеОбъекта) Тогда
		Результат = СвойстваОбъекта.ПредставлениеОбъекта;
	Иначе
		Результат = ОбъектМетаданных.Представление();
	КонецЕсли;;

	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СтроковыеФункции

Функция СФ_ФорматированнаяСтрока(Знач ШаблонСтроки, Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено, Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено) Экспорт
	ЭлементыСтиля = СП_ЭлементыСтиля();

	Возврат БазоваяПодсистемаКлиентСервер.СФ_СформироватьФорматированнуюСтроку(ШаблонСтроки, ЭлементыСтиля, Параметр1, Параметр2, Параметр3, Параметр4, Параметр5);
КонецФункции

#КонецОбласти

#Область ЖурналРегистрации

Процедура ЖР_СформироватьПредставлениеОтбора(ПредставлениеОтбора, ОтборЖурналаРегистрации, ОтборЖурналаРегистрацииПоУмолчанию = Неопределено) Экспорт
	ПредставлениеОтбора = "";
	// Интервал
	ДатаНачалаИнтервала    = Неопределено;
	ДатаОкончанияИнтервала = Неопределено;
	Если Не ОтборЖурналаРегистрации.Свойство("ДатаНачала", ДатаНачалаИнтервала) Или ДатаНачалаИнтервала = Неопределено Тогда
		ДатаНачалаИнтервала    = '00010101000000';
	КонецЕсли;

	Если Не ОтборЖурналаРегистрации.Свойство("ДатаОкончания", ДатаОкончанияИнтервала) Или ДатаОкончанияИнтервала = Неопределено Тогда
		ДатаОкончанияИнтервала = '00010101000000';
	КонецЕсли;

	Если Не (ДатаНачалаИнтервала = '00010101000000' И ДатаОкончанияИнтервала = '00010101000000') Тогда
		ПредставлениеОтбора = ПредставлениеПериода(ДатаНачалаИнтервала, ДатаОкончанияИнтервала);
	КонецЕсли;

	ЖР_ДобавитьОграничениеВПредставлениеОтбора(ОтборЖурналаРегистрации, ПредставлениеОтбора,	"Пользователь");
	ЖР_ДобавитьОграничениеВПредставлениеОтбора(ОтборЖурналаРегистрации, ПредставлениеОтбора,	"Событие",			ОтборЖурналаРегистрацииПоУмолчанию);
	ЖР_ДобавитьОграничениеВПредставлениеОтбора(ОтборЖурналаРегистрации, ПредставлениеОтбора,	"ИмяПриложения",	ОтборЖурналаРегистрацииПоУмолчанию);
	ЖР_ДобавитьОграничениеВПредставлениеОтбора(ОтборЖурналаРегистрации, ПредставлениеОтбора,	"Сеанс");
	ЖР_ДобавитьОграничениеВПредставлениеОтбора(ОтборЖурналаРегистрации, ПредставлениеОтбора,	"Уровень");

	// Остальные ограничения указываем просто по представлением, без указания значений ограничения.
	Для Каждого ЭлементОтбора Из ОтборЖурналаРегистрации Цикл
		ИмяОграничения = ЭлементОтбора.Ключ;
		Если ВРег(ИмяОграничения) = ВРег("ДатаНачала") Или ВРег(ИмяОграничения) = ВРег("ДатаОкончания") Или ВРег(ИмяОграничения) = ВРег("Событие") Или ВРег(ИмяОграничения) = ВРег("ИмяПриложения") Или ВРег(ИмяОграничения) = ВРег("Пользователь") Или ВРег(ИмяОграничения) = ВРег("Сеанс") Или ВРег(ИмяОграничения) = ВРег("Уровень") Тогда
			Продолжить; // Интервал и особые ограничения уже выводили.
		КонецЕсли;

		// Для некоторых ограничений меняем представление.
		Если ВРег(ИмяОграничения) = ВРег("ИмяПриложения") Тогда
			ИмяОграничения = "Приложение";
		ИначеЕсли ВРег(ИмяОграничения) = ВРег("СтатусТранзакции") Тогда
			ИмяОграничения = "Статус транзакции";
		ИначеЕсли ВРег(ИмяОграничения) = ВРег("ПредставлениеДанных") Тогда
			ИмяОграничения = "Представление данных";
		ИначеЕсли ВРег(ИмяОграничения) = ВРег("РабочийСервер") Тогда
			ИмяОграничения = "Рабочий сервер";
		ИначеЕсли ВРег(ИмяОграничения) = ВРег("ОсновнойIPПорт") Тогда
			ИмяОграничения = "Основной IP порт";
		ИначеЕсли ВРег(ИмяОграничения) = ВРег("ВспомогательныйIPПорт") Тогда
			ИмяОграничения = "Вспомогательный IP порт";
		КонецЕсли;

		Если Не ПустаяСтрока(ПредставлениеОтбора) Тогда
			ПредставлениеОтбора = ПредставлениеОтбора + "; ";
		КонецЕсли;
		ПредставлениеОтбора = ПредставлениеОтбора + ИмяОграничения;

	КонецЦикла;

	Если ПустаяСтрока(ПредставлениеОтбора) Тогда
		ПредставлениеОтбора = "Не установлен";
	КонецЕсли;
КонецПроцедуры

Процедура ЖР_ДобавитьОграничениеВПредставлениеОтбора(ОтборЖурналаРегистрации, ПредставлениеОтбора, ИмяОграничения,
	ОтборЖурналаРегистрацииПоУмолчанию = Неопределено)

	Если Не ОтборЖурналаРегистрации.Свойство(ИмяОграничения) Тогда
		Возврат;
	КонецЕсли;

	СписокОграничений = ОтборЖурналаРегистрации[ИмяОграничения];
	Ограничение       = "";

	// Не формируем представление отбора, если его значение соответствует значению отбора по умолчанию.
	Если ОтборЖурналаРегистрацииПоУмолчанию <> Неопределено Тогда
		СписокОграниченийПоУмолчанию = "";
		Если ОтборЖурналаРегистрацииПоУмолчанию.Свойство(ИмяОграничения, СписокОграниченийПоУмолчанию) И БазоваяПодсистемаКлиентСервер.ОН_СпискиЗначенийИдентичны(СписокОграниченийПоУмолчанию, СписокОграничений) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ИмяОграничения = "Событие" И СписокОграничений.Количество() > 5 Тогда
		Ограничение = СтрШаблон("События (%1)", СписокОграничений.Количество());
	ИначеЕсли ИмяОграничения = "Сеанс" И СписокОграничений.Количество() > 3 Тогда
		Ограничение = СтрШаблон("Сеансы (%1)", СписокОграничений.Количество());
	Иначе
		Для Каждого ЭлементСписка Из СписокОграничений Цикл
			Если Не ПустаяСтрока(Ограничение) Тогда
				Ограничение = Ограничение + ", ";
			КонецЕсли;

			Если Не ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
				ЗначениеОграничения = ЭлементСписка.Значение;
			Иначе
				ЗначениеОграничения = ЭлементСписка.Представление;
			КонецЕсли;

			Если (ВРег(ИмяОграничения) = ВРег("Сеанс") ИЛИ ВРег(ИмяОграничения) = ВРег("Уровень")) И ПустаяСтрока(Ограничение) Тогда
				Если ИмяОграничения = "Сеанс" Тогда
					ПредставлениеОграничения = "Сеанс";
				Иначе
					ПредставлениеОграничения = "Уровень";
				КонецЕсли;

				Ограничение = СтрШаблон("%1: %2", ПредставлениеОграничения, ЗначениеОграничения);
			Иначе
				Ограничение = Ограничение + ЗначениеОграничения;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Не ПустаяСтрока(ПредставлениеОтбора) Тогда
		ПредставлениеОтбора = ПредставлениеОтбора + "; ";
	КонецЕсли;

	ПредставлениеОтбора = ПредставлениеОтбора + Ограничение;
КонецПроцедуры

Процедура ЖР_ПоместитьДанныеВоВременноеХранилище(СобытияЖурнала, ХранилищеДанных) Экспорт
	Соответствие = ПолучитьИзВременногоХранилища(ХранилищеДанных);
	Для Каждого СтрокаСобытие Из СобытияЖурнала Цикл
		Если ПустаяСтрока(СтрокаСобытие.АдресДанных) Тогда
			АдресДанных = "";
		ИначеЕсли СтрНачинаетсяС(СтрокаСобытие.АдресДанных, "e1cib") Тогда
			АдресДанных = ПолучитьИзВременногоХранилища(СтрокаСобытие.АдресДанных);
		Иначе
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(СтрокаСобытие.АдресДанных);
			АдресДанных = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		КонецЕсли;
		ИдентификаторСобытия		= Строка(Новый УникальныйИдентификатор);
		Соответствие.Вставить(ИдентификаторСобытия, АдресДанных);
		СтрокаСобытие.АдресДанных	= ИдентификаторСобытия;
	КонецЦикла;
	ПоместитьВоВременноеХранилище(Соответствие, ХранилищеДанных);
КонецПроцедуры

Функция ЖР_ЖурналДляТехподдержки(ОтборЖурналаРегистрации, КоличествоСобытий, УникальныйИдентификатор = Неопределено) Экспорт
	Отбор = Новый Структура;
	Для Каждого ЭлементОтбора Из ОтборЖурналаРегистрации Цикл
		Отбор.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
	КонецЦикла;
	СмещениеВремениСервера = ЖР_СмещениеВремениСервера();
	ЖР_ПреобразованиеОтбора(Отбор, СмещениеВремениСервера);

	// Выгрузка отбираемых событий и формирование структуры таблицы.
	ВременныйФайл	= ПолучитьИмяВременногоФайла("xml");
	ВыгрузитьЖурналРегистрации(ВременныйФайл, Отбор, , , КоличествоСобытий);
	ДвоичныеДанные	= Новый ДвоичныеДанные(ВременныйФайл);
	УдалитьФайлы(ВременныйФайл);

	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
КонецФункции

Функция ЖР_СмещениеВремениСервера() Экспорт
	СмещениеВремениСервера = ТекущаяДата() - ТекущаяДатаСеанса();
	Если СмещениеВремениСервера >= -1 И СмещениеВремениСервера <= 1 Тогда
		СмещениеВремениСервера = 0;
	КонецЕсли;

	Возврат СмещениеВремениСервера;
КонецФункции

Процедура ЖР_ПреобразованиеОтбора(Отбор, СмещениеВремениСервера)
	Для Каждого ЭлементОтбора Из Отбор Цикл
		Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
			ЖР_ПреобразованиеЭлементаОтбора(Отбор, ЭлементОтбора);
		ИначеЕсли ВРег(ЭлементОтбора.Ключ) = ВРег("Транзакция") Тогда
			Если СтрНайти(ЭлементОтбора.Значение, "(") = 0 Тогда
				Отбор.Вставить(ЭлементОтбора.Ключ, "(" + ЭлементОтбора.Значение);
			КонецЕсли;
		ИначеЕсли СмещениеВремениСервера <> 0 И (ВРег(ЭлементОтбора.Ключ) = ВРег("ДатаНачала") Или ВРег(ЭлементОтбора.Ключ) = ВРег("ДатаОкончания")) Тогда
			Отбор.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение + СмещениеВремениСервера);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЖР_ПреобразованиеЭлементаОтбора(Отбор, ЭлементОтбора)
	КлючСтруктурыОтбора = ЭлементОтбора.Ключ;

	НовоеЗначение = Новый Массив;

	КлючСтруктурыОтбора = ЭлементОтбора.Ключ;

	Для Каждого ЗначениеИзСписка Из ЭлементОтбора.Значение Цикл
		Если ВРег(КлючСтруктурыОтбора) = ВРег("Уровень") Тогда
			// Уровни сообщений представлены строкой, требуется преобразование в значение перечисления.
			НовоеЗначение.Добавить(Обработки.ЖурналРегистрации.УровеньЖурналаРегистрацииЗначениеПоИмени(ЗначениеИзСписка.Значение));
		ИначеЕсли ВРег(КлючСтруктурыОтбора) = ВРег("СтатусТранзакции") Тогда
			// Статусы транзакций представлены строкой, требуется преобразование в значение перечисления.
			НовоеЗначение.Добавить(Обработки.ЖурналРегистрации.СтатусТранзакцииЗаписиЖурналаРегистрацииЗначениеПоИмени(ЗначениеИзСписка.Значение));
		Иначе
			ЗначенияОтбора = СтрРазделить(ЗначениеИзСписка.Значение, Символы.ПС);
			Для Каждого ЗначениеОтбора Из ЗначенияОтбора Цикл
				НовоеЗначение.Добавить(ЗначениеОтбора);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Отбор.Вставить(ЭлементОтбора.Ключ, НовоеЗначение);
КонецПроцедуры

Процедура ЖР_ДобавитьСообщениеДляЖурналаРегистрации(Знач ИмяСобытия, Знач Уровень, Знач ОбъектМетаданных = Неопределено, Знач Данные = Неопределено, Знач Комментарий = "") Экспорт
	Если ПустаяСтрока(ИмяСобытия) Тогда
		ИмяСобытия = "Событие"; // не локализуется, чтобы не допускать остановки запуска в частично переведенной конфигурации
	КонецЕсли;

	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень, ОбъектМетаданных, Данные, Комментарий, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
КонецПроцедуры

Процедура ЖР_ПрочитатьСобытияЖурналаРегистрации(ПараметрыОтчета, АдресХранилища) Экспорт
	ОтборЖурналаНаКлиенте          = ПараметрыОтчета.ОтборЖурналаРегистрации;
	КоличествоСобытий              = ПараметрыОтчета.КоличествоПоказываемыхСобытий;
	МенеджерВладельца              = ПараметрыОтчета.МенеджерВладельца;
	ДобавлятьДополнительныеКолонки = ПараметрыОтчета.ДобавлятьДополнительныеКолонки;

	// Проверяем параметры на корректность.
	ДатаНачала			= Неопределено;
	ДатаОкончания		= Неопределено;
	ДатыОтбораУказаны	= ОтборЖурналаНаКлиенте.Свойство("ДатаНачала", ДатаНачала) И ОтборЖурналаНаКлиенте.Свойство("ДатаОкончания", ДатаОкончания) И ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ОтборЖурналаНаКлиенте.ДатаОкончания);

	Если ДатыОтбораУказаны И ДатаНачала > ДатаОкончания Тогда
		ВызватьИсключение "Некорректно заданы условия отбора журнала регистрации. Дата начала больше даты окончания.";
	КонецЕсли;
	СмещениеВремениСервера	= ЖР_СмещениеВремениСервера();

	// Подготовка отбора
	Отбор = Новый Структура;
	Для Каждого ЭлементОтбора Из ОтборЖурналаНаКлиенте Цикл
		Отбор.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
	КонецЦикла;
	ЖР_ПреобразованиеОтбора(Отбор, СмещениеВремениСервера);

	// Выгрузка отбираемых событий и формирование структуры таблицы.
	СобытияЖурнала = Новый ТаблицаЗначений;
	ВыгрузитьЖурналРегистрации(СобытияЖурнала, Отбор,,, КоличествоСобытий);

	СобытияЖурнала.Колонки.Дата.Имя	= "ДатаНаСервере";
	СобытияЖурнала.Колонки.Добавить("Дата",			Новый ОписаниеТипов("Дата"));
	СобытияЖурнала.Колонки.Добавить("НомерРисунка",	Новый ОписаниеТипов("Число"));
	СобытияЖурнала.Колонки.Добавить("АдресДанных",	Новый ОписаниеТипов("Строка"));

	СобытияЖурнала.Колонки.Добавить("РазделениеДанныхСеанса", Новый ОписаниеТипов("Строка"));
	СобытияЖурнала.Колонки.Добавить("ПредставлениеРазделенияДанныхСеанса", Новый ОписаниеТипов("Строка"));

	Если ДобавлятьДополнительныеКолонки Тогда
		МенеджерВладельца.ДобавитьДополнительныеКолонкиСобытия(СобытияЖурнала);
	КонецЕсли;

	Для Каждого СобытиеЖурнала Из СобытияЖурнала Цикл
		СобытиеЖурнала.Дата = СобытиеЖурнала.ДатаНаСервере - СмещениеВремениСервера;

		// Заполнение номеров картинок строк.
		МенеджерВладельца.УстановитьНомерРисунка(СобытиеЖурнала);

		Если ДобавлятьДополнительныеКолонки Тогда
			// Заполнение дополнительных полей, определенных только у владельца.
			МенеджерВладельца.ЗаполнитьДополнительныеКолонкиСобытия(СобытиеЖурнала);
		КонецЕсли;

		// Преобразование массива метаданных в список значений.
		СписокПредставленийМетаданных = Новый СписокЗначений;
		Если ТипЗнч(СобытиеЖурнала.ПредставлениеМетаданных) = Тип("Массив") Тогда
			СписокПредставленийМетаданных.ЗагрузитьЗначения(СобытиеЖурнала.ПредставлениеМетаданных);
			СобытиеЖурнала.ПредставлениеМетаданных = СписокПредставленийМетаданных;
		Иначе
			СобытиеЖурнала.ПредставлениеМетаданных = Строка(СобытиеЖурнала.ПредставлениеМетаданных);
		КонецЕсли;

		// Обработка данных специальных событий.
		Если СобытиеЖурнала.Событие = "_$Access$_.Access" Тогда
			ЖР_УстановитьСтрокуАдресаДанных(СобытиеЖурнала);

			Если СобытиеЖурнала.Данные <> Неопределено Тогда
				СобытиеЖурнала.Данные = ?(СобытиеЖурнала.Данные.Данные = Неопределено, "", "...");
			КонецЕсли;
		ИначеЕсли СобытиеЖурнала.Событие = "_$Access$_.AccessDenied" Тогда
			ЖР_УстановитьСтрокуАдресаДанных(СобытиеЖурнала);

			Если СобытиеЖурнала.Данные <> Неопределено Тогда
				Если СобытиеЖурнала.Данные.Свойство("Право") Тогда
					СобытиеЖурнала.Данные	= СтрШаблон("Право: %1", СобытиеЖурнала.Данные.Право);
				Иначе
					ДанныеЖурнала			= СобытиеЖурнала.Данные; // Структура
					ДанныеЖурнала.Действие	= СтрШаблон("Действие: %1%2", СобытиеЖурнала.Данные.Действие, ?(СобытиеЖурнала.Данные.Данные = Неопределено, "", ", ...") );
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СобытиеЖурнала.Событие = "_$Session$_.Authentication" Или СобытиеЖурнала.Событие = "_$Session$_.AuthenticationError" Тогда
			ЖР_УстановитьСтрокуАдресаДанных(СобытиеЖурнала);

			СобытиеЖурналаДанные = "";
			Если СобытиеЖурнала.Данные <> Неопределено Тогда
				Для Каждого КлючИЗначение Из СобытиеЖурнала.Данные Цикл
					Если ЗначениеЗаполнено(СобытиеЖурналаДанные) Тогда
						СобытиеЖурналаДанные = СобытиеЖурналаДанные + ", ...";

						Прервать;
					КонецЕсли;
					СобытиеЖурналаДанные = КлючИЗначение.Ключ + ": " + КлючИЗначение.Значение;
				КонецЦикла;
			КонецЕсли;
			СобытиеЖурнала.Данные = СобытиеЖурналаДанные;
		ИначеЕсли СобытиеЖурнала.Событие = "_$User$_.Delete" Тогда
			ЖР_УстановитьСтрокуАдресаДанных(СобытиеЖурнала);

			СобытиеЖурналаДанные = "";
			Если СобытиеЖурнала.Данные <> Неопределено Тогда
				Для каждого КлючИЗначение Из СобытиеЖурнала.Данные Цикл
					СобытиеЖурналаДанные = КлючИЗначение.Ключ + ": " + КлючИЗначение.Значение;

					Прервать;
				КонецЦикла;
			КонецЕсли;
			СобытиеЖурнала.Данные = СобытиеЖурналаДанные;
		ИначеЕсли СобытиеЖурнала.Событие = "_$User$_.New" ИЛИ СобытиеЖурнала.Событие = "_$User$_.Update" Тогда
			ЖР_УстановитьСтрокуАдресаДанных(СобытиеЖурнала);

			ИмяПользователяИБ = "";
			Если СобытиеЖурнала.Данные <> Неопределено Тогда
				СобытиеЖурнала.Данные.Свойство("Имя", ИмяПользователяИБ);
			КонецЕсли;
			СобытиеЖурнала.Данные = СтрШаблон("Имя: %1, ...", ИмяПользователяИБ);
		КонецЕсли;

		УстановитьПривилегированныйРежим(Истина);
		// Уточнение имени пользователя.
		Если СобытиеЖурнала.Пользователь = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
			СобытиеЖурнала.ИмяПользователя = "<Неопределен>";
		ИначеЕсли СобытиеЖурнала.ИмяПользователя = "" Тогда
			СобытиеЖурнала.ИмяПользователя = "<Не указан>";
		ИначеЕсли ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(СобытиеЖурнала.Пользователь) = Неопределено Тогда
			СобытиеЖурнала.ИмяПользователя = СтрШаблон("%1 <Удален>", СобытиеЖурнала.ИмяПользователя);
		КонецЕсли;

		// Преобразование идентификатора в имя для использования в дальнейшем при установке отборе.
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(СобытиеЖурнала.Пользователь);
		Если ПользовательИБ <> Неопределено Тогда
			СобытиеЖурнала.Пользователь = ПользовательИБ.Имя;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЦикла;

	// Успешное завершение
	Результат = Новый Структура;
	Результат.Вставить("СобытияЖурнала", СобытияЖурнала);

	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
КонецПроцедуры

Процедура ЖР_УстановитьСтрокуАдресаДанных(СобытиеЖурнала)
	ЗаписьXML					= Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, СобытиеЖурнала.Данные);
	СобытиеЖурнала.АдресДанных	= ЗаписьXML.Закрыть();
КонецПроцедуры

#КонецОбласти

#Область ФайловаяСистема

Функция ФС_СоздатьВременныйКаталог(Знач Расширение = "") Экспорт
	ПутьККаталогу = БазоваяПодсистемаКлиентСервер.ОН_ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла(Расширение));
	СоздатьКаталог(ПутьККаталогу);

	Возврат ПутьККаталогу;
КонецФункции

Процедура ФС_УдалитьВременныйКаталог(Знач Путь) Экспорт
	Если Не СтрНачинаетсяС(СтрЗаменить(Путь, "/", "\"), СтрЗаменить(КаталогВременныхФайлов(), "/", "\")) Тогда
		ВызватьИсключение СтрШаблон("Неверное значение параметра Путь в БазоваяПодсистемаСервер.ФС_УдалитьВременныйКаталог:
				       |Каталог не является временным ""%1""",
			Путь);
	КонецЕсли;

	ФС_УдалитьВременныеФайлы(Путь);
КонецПроцедуры

Процедура ФС_УдалитьВременныйФайл(Знач Путь) Экспорт
	Если Не СтрНачинаетсяС(СтрЗаменить(Путь, "/", "\"), СтрЗаменить(КаталогВременныхФайлов(), "/", "\")) Тогда
		ВызватьИсключение СтрШаблон("Неверное значение параметра Путь в БазоваяПодсистемаСервер.ФС_УдалитьВременныйФайл:
				       |Файл не является временным ""%1""",
			Путь);
	КонецЕсли;

	ФС_УдалитьВременныеФайлы(Путь);
КонецПроцедуры

Процедура ФС_УдалитьВременныеФайлы(Знач Путь)
	Попытка
		УдалитьФайлы(Путь);
	Исключение
		ЗаписьЖурналаРегистрации(
			"Стандартные подсистемы",
			УровеньЖурналаРегистрации.Ошибка,,,
			СтрШаблон("Не удалось удалить временный файл ""%1"" по причине:
					|%2", Путь, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
КонецПроцедуры

#КонецОбласти
