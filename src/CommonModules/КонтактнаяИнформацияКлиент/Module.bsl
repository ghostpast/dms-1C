///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область УправлениеКонтактнойИнформацией

Процедура УКИ_СтранаМираОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;

	ТипВыбранного = ТипЗнч(ВыбранноеЗначение);
	Если ТипВыбранного = Тип("Массив") Тогда
		СписокПреобразования = Новый Соответствие;
		Для Индекс = 0 По ВыбранноеЗначение.ВГраница() Цикл
			Данные = ВыбранноеЗначение[Индекс];
			Если ТипЗнч(Данные) = Тип("Структура") И Данные.Свойство("Код") Тогда
				СписокПреобразования.Вставить(Индекс, Данные.Код);
			КонецЕсли;
		КонецЦикла;

		Если СписокПреобразования.Количество() > 0 Тогда
			КонтактнаяИнформацияВызовСервера.сУКИ_КоллекцияСтранМираПоДаннымКлассификатора(СписокПреобразования);
			Для Каждого КлючЗначение Из СписокПреобразования Цикл
				ВыбранноеЗначение[КлючЗначение.Ключ] = КлючЗначение.Значение;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипВыбранного = Тип("Структура") И ВыбранноеЗначение.Свойство("Код") Тогда
		ВыбранноеЗначение = КонтактнаяИнформацияВызовСервера.сУКИ_СтранаМираПоДаннымКлассификатора(ВыбранноеЗначение.Код);
	КонецЕсли;
КонецПроцедуры

Процедура УКИ_ПоказатьАдресНаКарте(Адрес, ИмяКартографическогоСервиса) Экспорт
	АдресКодированный = УКИ_ДекодированиеСтроки(Адрес);
	Если ИмяКартографическогоСервиса = "GoogleMaps" Тогда
		СтрокаЗапуска = "https://maps.google.ru/?q=" + АдресКодированный;
	Иначе
		СтрокаЗапуска = "https://maps.yandex.ru/?text=" + АдресКодированный;
	КонецЕсли;

	БазоваяПодсистемаКлиент.ФС_ОткрытьНавигационнуюСсылку(СтрокаЗапуска);
КонецПроцедуры

Функция УКИ_ДекодированиеСтроки(Строка)
	Результат = "";
	Для НомерСимвола = 1 По СтрДлина(Строка) Цикл
		КодСимвола	= КодСимвола(Строка, НомерСимвола);
		Символ		= Сред(Строка, НомерСимвола, 1);

		// пропускаем A..Z, a..z, 0..9
		Если СтрНайти("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", Символ) > 0 Тогда // символы -_.!~*\() кодируем как небезопасные
			Результат = Результат + Символ;

			Продолжить;
		КонецЕсли;

		Если Символ = " " Тогда
			Результат = Результат + "+";

			Продолжить;
		КонецЕсли;

		Если КодСимвола <= 127 Тогда // 0x007F
			Результат = Результат + УКИ_ПредставлениеБайта(КодСимвола);
		ИначеЕсли КодСимвола <= 2047 Тогда // 0x07FF
			Результат = Результат
					  + УКИ_ПредставлениеБайта(
					  					   УКИ_БинарныйМассивВЧисло(
																УКИ_ЛогическоеПобитовоеИли(
																			 УКИ_ЧислоВБинарныйМассив(192,8),
																			 УКИ_ЧислоВБинарныйМассив(Цел(КодСимвола / Pow(2,6)),8)))); // 0xc0 | (ch >> 6)
			Результат = Результат
					  + УКИ_ПредставлениеБайта(
					  					   УКИ_БинарныйМассивВЧисло(
										   						УКИ_ЛогическоеПобитовоеИли(
																			 УКИ_ЧислоВБинарныйМассив(128,8),
																			 УКИ_ЛогическоеПобитовоеИ(
																			 			УКИ_ЧислоВБинарныйМассив(КодСимвола,8),
																						УКИ_ЧислоВБинарныйМассив(63,8)))));  //0x80 | (ch & 0x3F)
		Иначе  // 0x7FF < ch <= 0xFFFF
			Результат = Результат
					  + УКИ_ПредставлениеБайта(
					  						 УКИ_БинарныйМассивВЧисло(
																  УКИ_ЛогическоеПобитовоеИли(
																			   УКИ_ЧислоВБинарныйМассив(224,8),
																			   УКИ_ЧислоВБинарныйМассив(Цел(КодСимвола / Pow(2,12)),8)))); // 0xe0 | (ch >> 12)
			Результат = Результат
					  + УКИ_ПредставлениеБайта(
					  					   УКИ_БинарныйМассивВЧисло(
										   						УКИ_ЛогическоеПобитовоеИли(
																			 УКИ_ЧислоВБинарныйМассив(128,8),
																			 УКИ_ЛогическоеПобитовоеИ(
																			 			УКИ_ЧислоВБинарныйМассив(Цел(КодСимвола / Pow(2,6)),8),
																						УКИ_ЧислоВБинарныйМассив(63,8)))));  //0x80 | ((ch >> 6) & 0x3F)
			Результат = Результат
					  + УКИ_ПредставлениеБайта(
					  					   УКИ_БинарныйМассивВЧисло(
										   						УКИ_ЛогическоеПобитовоеИли(
																			 УКИ_ЧислоВБинарныйМассив(128,8),
																			 УКИ_ЛогическоеПобитовоеИ(
																			 			УКИ_ЧислоВБинарныйМассив(КодСимвола,8),
																						УКИ_ЧислоВБинарныйМассив(63,8)))));  //0x80 | (ch & 0x3F)
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция УКИ_ПредставлениеБайта(Знач Байт)
	Результат		= "";
	СтрокаСимволов	= "0123456789ABCDEF";
	Для Счетчик = 1 По 2 Цикл
		Результат	= Сред(СтрокаСимволов, Байт % 16 + 1, 1) + Результат;
		Байт		= Цел(Байт / 16);
	КонецЦикла;

	Возврат "%" + Результат;
КонецФункции

Функция УКИ_ЧислоВБинарныйМассив(Знач Число, Знач ВсегоРазрядов = 32)
	Результат		= Новый Массив;
	ТекущийРазряд	= 0;
	Пока ТекущийРазряд < ВсегоРазрядов Цикл
		ТекущийРазряд	= ТекущийРазряд + 1;
		Результат.Добавить(Булево(Число % 2));
		Число			= Цел(Число / 2);
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция УКИ_БинарныйМассивВЧисло(Массив)
	Результат = 0;
	Для НомерРазряда = -(Массив.Количество()-1) По 0 Цикл
		Результат = Результат * 2 + Число(Массив[-НомерРазряда]);
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция УКИ_ЛогическоеПобитовоеИ(БинарныйМассив1, БинарныйМассив2)
	Результат = Новый Массив;
	Для Индекс = 0 По БинарныйМассив1.Количество()-1 Цикл
		Результат.Добавить(БинарныйМассив1[Индекс] И БинарныйМассив2[Индекс]);
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция УКИ_ЛогическоеПобитовоеИли(БинарныйМассив1, БинарныйМассив2)
	Результат = Новый Массив;
	Для Индекс = 0 По БинарныйМассив1.Количество()-1 Цикл
		Результат.Добавить(БинарныйМассив1[Индекс] Или БинарныйМассив2[Индекс]);
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция УКИ_ОткрытьФормуКонтактнойИнформации(Параметры, Владелец = Неопределено, Оповещение = Неопределено) Экспорт
	Параметры.Вставить("ОткрытаПоСценарию", Истина);

	Возврат ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма", Параметры, Владелец,,,, Оповещение);
КонецФункции

#КонецОбласти

#Область РаботаСАдресами

Процедура РСА_ПреобразоватьВводАдреса(Текст) Экспорт
	РусскиеКлавиши		= "ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЁ";
	АнглийскиеКлавиши	= "QWERTYUIOP[]ASDFGHJKL;'ZXCVBNM,`";
	Текст = ВРег(Текст);
	Для Позиция = 0 По СтрДлина(Текст) Цикл
		Символ			= Сред(Текст, Позиция, 1);
		ПозицияСимвола	= СтрНайти(АнглийскиеКлавиши, Символ);
		Если ПозицияСимвола > 0 Тогда
			Текст = СтрЗаменить(Текст, Символ, Сред(РусскиеКлавиши, ПозицияСимвола, 1));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура РСА_ПоказатьКлассификатор(ПараметрыОткрытия, ВладелецФормы, РежимОткрытияОкна = Неопределено) Экспорт
	ОткрытьФорму("Справочник.СтраныМира.Форма.Классификатор", ПараметрыОткрытия, ВладелецФормы,,,,, РежимОткрытияОкна);
КонецПроцедуры

Процедура РСА_ОчиститьАдрес(НаселенныйПунктДетально) Экспорт
	Для каждого ЭлементАдреса Из НаселенныйПунктДетально Цикл
		Если СтрСравнить(ЭлементАдреса.Ключ, "type") = 0  Тогда
			Продолжить;
		ИначеЕсли СтрСравнить(ЭлементАдреса.Ключ, "buildings") = 0 ИЛИ СтрСравнить(ЭлементАдреса.Ключ, "apartments") = 0 Тогда
			НаселенныйПунктДетально[ЭлементАдреса.Ключ] = Новый Массив;
		Иначе
			НаселенныйПунктДетально[ЭлементАдреса.Ключ] = "";
		КонецЕсли;
	КонецЦикла;

	НаселенныйПунктДетально.addressType = "Муниципальный";
КонецПроцедуры

Функция РСА_ПредставлениеУровняБезСокращения(ИмяУровня) Экспорт
	Если СтрСравнить(ИмяУровня, "MunDistrict") = 0  Или СтрСравнить(ИмяУровня, "Settlement") = 0 Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Процедура РСА_ПоказатьПодсказкуКорректностиКодовСтраныИГорода(КодСтраны, КодГорода) Экспорт
	Если (КодСтраны = "+7" ИЛИ КодСтраны = "8") И СтрНачинаетсяС(КодГорода, "9") И СтрДлина(КодГорода) <> 3 Тогда
		БазоваяПодсистемаКлиент.ОН_СообщитьПользователю("Коды мобильных телефонов начинающиеся на цифру 9 имеют фиксированную длину в 3 цифры, например - 916.",, "КодГорода");
	КонецЕсли;
КонецПроцедуры

Процедура РСА_ПроверитьКорректностьКодовСтраныИГорода(ПоляТелефона, СписокОшибок) Экспорт
	КонтактнаяИнформацияКлиентСервер.РСА_ПроверитьКорректностьКодовСтраныИГорода(ПоляТелефона, СписокОшибок);
КонецПроцедуры

#КонецОбласти
