///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Перем ПоследнийЭлемент;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Начальное значение настройки до загрузки данных из настроек.
	ВыбиратьИерархически = Истина;

	НовыйХранимыеПараметры();

	МассивПустыхСсылок = Неопределено;
	Параметры.Свойство("Назначение", МассивПустыхСсылок);
	ЗаполнитьПараметрыДинамическихСписков(МассивПустыхСсылок);

	Если Параметры.РежимВыбора Тогда
		БазоваяПодсистемаСервер.СП_УстановитьКлючНазначенияФормы(ЭтотОбъект, "ВыборПодбор");
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ИначеЕсли ПользователиСервер.П_ЭтоПолноправныйПользователь() Тогда
		// Добавление отбора пользователей, подготовленных ответственным за список.
		БазоваяПодсистемаКлиентСервер.ОН_УстановитьЭлементОтбораДинамическогоСписка(
			ВнешниеПользователиСписок, "Подготовлен", Истина, ,
			"Подготовленные ответственным за список", Ложь,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
	КонецЕсли;

	// Скрытие пользователей с пустым идентификатором, если значение параметра Истина.
	Если Параметры.СкрытьПользователейБезПользователяИБ Тогда
		БазоваяПодсистемаКлиентСервер.ОН_УстановитьЭлементОтбораДинамическогоСписка(
			ВнешниеПользователиСписок,
			"ИдентификаторПользователяИБ",
			Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"),
			ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЕсли;

	// Скрытие переданного пользователя из формы выбора пользователей.
	Если ТипЗнч(Параметры.СкрываемыеПользователи) = Тип("СписокЗначений") Тогда
		ВидСравненияКД = ВидСравненияКомпоновкиДанных.НеВСписке;
		БазоваяПодсистемаКлиентСервер.ОН_УстановитьЭлементОтбораДинамическогоСписка(
			ВнешниеПользователиСписок,
			"Ссылка",
			Параметры.СкрываемыеПользователи,
			ВидСравненияКД);
	КонецЕсли;

	ОформитьИСкрытьНедействительныхВнешнихПользователей();
	НастроитьПараметрыСпискаВнешнихПользователейДляКомандыУстановитьПароль();
	НастроитьПорядокГруппыВсеВнешниеПользователи(ГруппыВнешнихПользователей);

	ХранимыеПараметры.Вставить("РасширенныйПодбор", Параметры.РасширенныйПодбор);
	Элементы.ВыбранныеПользователиИГруппы.Видимость	= ХранимыеПараметры.РасширенныйПодбор;
	Элементы.ВидПользователей.Видимость				= Не ХранимыеПараметры.РасширенныйПодбор;
	ХранимыеПараметры.Вставить("ИспользоватьГруппы", ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей"));

	Если Не ПравоДоступа("Редактирование", Метаданные.Справочники.ГруппыВнешнихПользователей) Тогда
		Элементы.ВнешниеПользователиСписокКонтекстноеМенюНазначитьГруппы.Видимость = Ложь;
		Элементы.НазначитьГруппы.Видимость = Ложь;
	КонецЕсли;

	Если НЕ ПользователиСервер.П_ЭтоПолноправныйПользователь(, Истина) Тогда
		Если Элементы.Найти("ПользователиИБ") <> Неопределено Тогда
			Элементы.ПользователиИБ.Видимость = Ложь;
		КонецЕсли;
		Элементы.СведенияОВнешнихПользователях.Видимость = Ложь;
	КонецЕсли;

	Если Параметры.РежимВыбора Тогда
		Если Элементы.Найти("ПользователиИБ") <> Неопределено Тогда
			Элементы.ПользователиИБ.Видимость = Ложь;
		КонецЕсли;
		Элементы.СведенияОВнешнихПользователях.Видимость	= Ложь;
		Элементы.ГруппыВнешнихПользователей.РежимВыбора		= ХранимыеПараметры.ВыборГруппВнешнихПользователей;

		// Отключение перетаскивания пользователя в формах выбора и подбора пользователей.
		Элементы.ВнешниеПользователиСписок.РазрешитьНачалоПеретаскивания = Ложь;

		Если Параметры.Свойство("ИдентификаторыНесуществующихПользователейИБ") Тогда
			БазоваяПодсистемаКлиентСервер.ОН_УстановитьЭлементОтбораДинамическогоСписка(
				ВнешниеПользователиСписок, "ИдентификаторПользователяИБ",
				Параметры.ИдентификаторыНесуществующихПользователейИБ,
				ВидСравненияКомпоновкиДанных.ВСписке, , Истина,
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		КонецЕсли;

		Если Параметры.ЗакрыватьПриВыборе = Ложь Тогда
			// Режим подбора.
			Элементы.ВнешниеПользователиСписок.МножественныйВыбор = Истина;

			Если ХранимыеПараметры.РасширенныйПодбор Тогда
				БазоваяПодсистемаСервер.СП_УстановитьКлючНазначенияФормы(ЭтотОбъект, "РасширенныйПодбор");
				ИзменитьПараметрыРасширеннойФормыПодбора();
			КонецЕсли;

			Если ХранимыеПараметры.ВыборГруппВнешнихПользователей Тогда
				Элементы.ГруппыВнешнихПользователей.МножественныйВыбор = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Элементы.ВнешниеПользователиСписок.РежимВыбора	= Ложь;
		Элементы.ГруппыВнешнихПользователей.РежимВыбора	= Ложь;
		Элементы.Комментарии.Видимость					= Ложь;

		БазоваяПодсистемаКлиентСервер.ОН_УстановитьСвойствоЭлементаФормы(Элементы, "ВыбратьВнешнегоПользователя", "Видимость", Ложь);

		БазоваяПодсистемаКлиентСервер.ОН_УстановитьСвойствоЭлементаФормы(Элементы, "ВыбратьГруппуВнешнихПользователей", "Видимость", Ложь);
	КонецЕсли;

	ХранимыеПараметры.Вставить("ГруппаВсеПользователи", Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи);

	ХранимыеПараметры.Вставить("ТекущаяСтрока", Параметры.ТекущаяСтрока);
	НастроитьФормуПоИспользованиюГруппПользователей();
	ХранимыеПараметры.Удалить("ТекущаяСтрока");

	// Зарезервировано для новых подсистем
	Элементы.ФормаИзменитьВыделенные.Видимость = Ложь;
	Элементы.ВнешниеПользователиСписокКонтекстноеМенюИзменитьВыделенные.Видимость = Ложь;

	ОписаниеОбъекта = Новый Структура;
	ОписаниеОбъекта.Вставить("Ссылка", Справочники.Пользователи.ПустаяСсылка());
	ОписаниеОбъекта.Вставить("ИдентификаторПользователяИБ", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	УровеньДоступа = ПользователиСервер.сП_УровеньДоступаКСвойствамПользователя(ОписаниеОбъекта);

	Если Не УровеньДоступа.УправлениеСписком Тогда
		Элементы.ФормаУстановитьПароль.Видимость = Ложь;
		Элементы.ВнешниеПользователиСписокКонтекстноеМенюУстановитьПароль.Видимость = Ложь;
	КонецЕсли;

	Если БазоваяПодсистемаСервер.ОН_ЭтоАвтономноеРабочееМесто() Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;

	Если БазоваяПодсистемаСервер.ОН_ЭтоМобильныйКлиент() Тогда
		Элементы.ЗавершитьИЗакрыть.Отображение = ОтображениеКнопки.Картинка;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Параметры.РежимВыбора Тогда
		ПроверкаИзмененияТекущегоЭлементаФормы();
	КонецЕсли;

	#Если МобильныйКлиент Тогда
	Если ХранимыеПараметры.Свойство("ИспользоватьГруппы") И ХранимыеПараметры.ИспользоватьГруппы Тогда
		Элементы.ГруппаГруппы.Заголовок = Строка(Элементы.ГруппыВнешнихПользователей.ТекущиеДанные.Ссылка);
	КонецЕсли;
#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ВРег(ИмяСобытия) = ВРег("Запись_ГруппыВнешнихПользователей") И Источник = Элементы.ГруппыВнешнихПользователей.ТекущаяСтрока Тогда
		Элементы.ГруппыВнешнихПользователей.Обновить();
		Элементы.ВнешниеПользователиСписок.Обновить();
		ОбновитьСодержимоеФормыПриИзмененииГруппы(ЭтотОбъект);
	ИначеЕсли ВРег(ИмяСобытия) = ВРег("Запись_НаборКонстант") Тогда
		Если ВРег(Источник) = ВРег("ИспользоватьГруппыПользователей") Тогда
			ПодключитьОбработчикОжидания("ПриИзмененииИспользованияГруппПользователей", 0.1, Истина);
		КонецЕсли;
	ИначеЕсли ВРег(ИмяСобытия) = ВРег("РазмещениеПользователейВГруппах") Тогда
		Элементы.ВнешниеПользователиСписок.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	Если ТипЗнч(Настройки["ВыбиратьИерархически"]) = Тип("Булево") Тогда
		ВыбиратьИерархически = Настройки["ВыбиратьИерархически"];
	КонецЕсли;

	Если НЕ ВыбиратьИерархически Тогда
		ОбновитьСодержимоеФормыПриИзмененииГруппы(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбиратьИерархическиПриИзменении(Элемент)
	ОбновитьСодержимоеФормыПриИзмененииГруппы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНедействительныхПользователейПриИзменении(Элемент)
	ПереключитьОтображениеНедействительныхПользователей(ПоказыватьНедействительныхПользователей);
КонецПроцедуры

&НаКлиенте
Процедура ВидПользователейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораНазначения", ЭтотОбъект);
	ПользователиКлиент.сП_ВыбратьНазначение(ЭтотОбъект, "Выбор вида пользователей", Ложь, Истина, ОписаниеОповещения);
КонецПроцедуры



&НаКлиенте
Процедура ГруппыВнешнихПользователейПриИзменении(Элемент)
	СписокПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ГруппыВнешнихПользователейПриАктивизацииСтроки(Элемент)
	ОбновитьСодержимоеФормыПриИзмененииГруппы(ЭтотОбъект);

#Если МобильныйКлиент Тогда
	Если ХранимыеПараметры.Свойство("РасширенныйПодбор") И Не ХранимыеПараметры.РасширенныйПодбор Тогда
		Элементы.ГруппаГруппы.Заголовок	= Строка(Элементы.ГруппыВнешнихПользователей.ТекущиеДанные.Ссылка);
		ТекущийЭлемент					= Элементы.ВнешниеПользователиСписок;
	КонецЕсли;
#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ГруппыВнешнихПользователейВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	Если Не ХранимыеПараметры.РасширенныйПодбор Тогда
		ОповеститьОВыборе(Значение);
	Иначе
		ПолучитьКартинкиИЗаполнитьСписокВыбранных(Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппыВнешнихПользователейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если НЕ Копирование Тогда
		Отказ			= Истина;
		ПараметрыФормы	= Новый Структура;

		Если ЗначениеЗаполнено(Элементы.ГруппыВнешнихПользователей.ТекущаяСтрока) Тогда
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("Родитель", Элементы.ГруппыВнешнихПользователей.ТекущаяСтрока));
		КонецЕсли;

		ОткрытьФорму("Справочник.ГруппыВнешнихПользователей.ФормаОбъекта", ПараметрыФормы, Элементы.ГруппыВнешнихПользователей);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппыВнешнихПользователейПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ГруппыВнешнихПользователейПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;

	Если ВыбиратьИерархически Тогда
		ПоказатьПредупреждение(,
			"Для перетаскивания пользователя в группы отключите
			           |флажок ""Показывать пользователей нижестоящих групп"".");
		Возврат;
	КонецЕсли;

	Если Элементы.ГруппыВнешнихПользователей.ТекущаяСтрока = Строка Или Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
		Перемещение = Истина;
	Иначе
		Перемещение = Ложь;
	КонецЕсли;

	ТекущаяСтрокаГруппы					= Элементы.ГруппыВнешнихПользователей.ТекущаяСтрока;
	ГруппаСТипомВсеОбъектыАвторизации	= Элементы.ГруппыВнешнихПользователей.ДанныеСтроки(ТекущаяСтрокаГруппы).ВсеОбъектыАвторизации;

	Если Строка = ХранимыеПараметры.ГруппаВсеПользователи
		И ГруппаСТипомВсеОбъектыАвторизации Тогда
		СообщениеПользователю = Новый Структура("Сообщение, ЕстьОшибки, Пользователи",
			"Из групп с типом участников ""Все пользователи заданного типа"" исключение пользователей невозможно.",
			Истина,
			Неопределено);
	Иначе
		ГруппаПомеченаНаУдаление		= Элементы.ГруппыВнешнихПользователей.ДанныеСтроки(Строка).ПометкаУдаления;
		КоличествоПользователей			= ПараметрыПеретаскивания.Значение.Количество();
		ДействиеИсключитьПользователя	= (ХранимыеПараметры.ГруппаВсеПользователи = Строка);
		ВключитьВГруппу					= (ХранимыеПараметры.ГруппаВсеПользователи = ТекущаяСтрокаГруппы) ИЛИ ГруппаСТипомВсеОбъектыАвторизации;

		Если КоличествоПользователей = 1 Тогда
			Если ДействиеИсключитьПользователя Тогда
				ТекстВопроса = СтрШаблон("Исключить пользователя ""%1"" из группы ""%2""?",
					Строка(ПараметрыПеретаскивания.Значение[0]),
					Строка(Элементы.ГруппыВнешнихПользователей.ТекущаяСтрока));
			ИначеЕсли Не ГруппаПомеченаНаУдаление Тогда
				Если ВключитьВГруппу Тогда
					Шаблон = "Включить пользователя ""%1"" в группу ""%2""?";
				ИначеЕсли Перемещение Тогда
					Шаблон = "Переместить пользователя ""%1"" в группу ""%2""?";
				Иначе
					Шаблон = "Скопировать пользователя ""%1"" в группу ""%2""?";
				КонецЕсли;

				ТекстВопроса = СтрШаблон(Шаблон, Строка(ПараметрыПеретаскивания.Значение[0]), Строка(Строка));
			Иначе
				Если ВключитьВГруппу Тогда
					Шаблон = "Группа ""%1"" помечена на удаление. Включить пользователя ""%2"" в эту группу?";
				ИначеЕсли Перемещение Тогда
					Шаблон = "Группа ""%1"" помечена на удаление. Переместить пользователя ""%2"" в эту группу?";
				Иначе
					Шаблон = "Группа ""%1"" помечена на удаление. Скопировать пользователя ""%2"" в эту группу?";
				КонецЕсли;

				ТекстВопроса = СтрШаблон(Шаблон, Строка(Строка), Строка(ПараметрыПеретаскивания.Значение[0]));
			КонецЕсли;
		Иначе
			Если ДействиеИсключитьПользователя Тогда
				ТекстВопроса = СтрШаблон("Исключить пользователей (%1) из группы ""%2""?", КоличествоПользователей, Строка(Элементы.ГруппыВнешнихПользователей.ТекущаяСтрока));
			ИначеЕсли Не ГруппаПомеченаНаУдаление Тогда
				Если ВключитьВГруппу Тогда
					Шаблон = "Включить пользователей (%1) в группу ""%2""?";
				ИначеЕсли Перемещение Тогда
					Шаблон = "Переместить пользователей (%1) в группу ""%2""?";
				Иначе
					Шаблон = "Скопировать пользователей (%1) в группу ""%2""?";
				КонецЕсли;

				ТекстВопроса = СтрШаблон(Шаблон, КоличествоПользователей, Строка(Строка));
			Иначе
				Если ВключитьВГруппу Тогда
					Шаблон = "Группа ""%1"" помечена на удаление. Включить пользователей (%2) в эту группу?";
				ИначеЕсли Перемещение Тогда
					Шаблон = "Группа ""%1"" помечена на удаление. Переместить пользователей (%2) в эту группу?";
				Иначе
					Шаблон = "Группа ""%1"" помечена на удаление. Скопировать пользователей (%2) в эту группу?";
				КонецЕсли;

				ТекстВопроса = СтрШаблон(Шаблон, Строка(Строка), КоличествоПользователей);
			КонецЕсли;
		КонецЕсли;

		ДополнительныеПараметры = Новый Структура("ПараметрыПеретаскивания, Строка, Перемещение",
			ПараметрыПеретаскивания.Значение, Строка, Перемещение);
		Оповещение = Новый ОписаниеОповещения("ГруппыВнешнихПользователейПеретаскиваниеОбработкаВопроса", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);

		Возврат;
	КонецЕсли;
	ГруппыВнешнихПользователейПеретаскиваниеЗавершение(СообщениеПользователю);
КонецПроцедуры

&НаКлиенте
Процедура ВнешниеПользователиСписокПриИзменении(Элемент)
	СписокПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВнешниеПользователиСписокПриАктивизацииСтроки(Элемент)
	Если БазоваяПодсистемаКлиент.СП_ЭтоЭлементДинамическогоСписка(Элементы.ВнешниеПользователиСписок) Тогда
		ВозможноСменитьПароль = Элементы.ВнешниеПользователиСписок.ТекущиеДанные.ВозможноСменитьПароль;
	Иначе
		ВозможноСменитьПароль = Ложь;
	КонецЕсли;

	Элементы.ФормаУстановитьПароль.Доступность										= ВозможноСменитьПароль;
	Элементы.ВнешниеПользователиСписокКонтекстноеМенюУстановитьПароль.Доступность	= ВозможноСменитьПароль;
КонецПроцедуры

&НаКлиенте
Процедура ВнешниеПользователиСписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	Если Не ХранимыеПараметры.РасширенныйПодбор Тогда
		ОповеститьОВыборе(Значение);
	Иначе
		ПолучитьКартинкиИЗаполнитьСписокВыбранных(Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВнешниеПользователиСписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;

	ПараметрыФормы = Новый Структура("ГруппаНовогоВнешнегоПользователя", Элементы.ГруппыВнешнихПользователей.ТекущаяСтрока);

	Если ЗначениеЗаполнено(ХранимыеПараметры.ОтборОбъектАвторизации) Тогда
		ПараметрыФормы.Вставить("ОбъектАвторизацииНовогоВнешнегоПользователя", ХранимыеПараметры.ОтборОбъектАвторизации);
	КонецЕсли;

	Если Копирование И Элемент.ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ЗначениеКопирования", Элемент.ТекущаяСтрока);
	КонецЕсли;

	ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаОбъекта", ПараметрыФормы, Элементы.ВнешниеПользователиСписок);
КонецПроцедуры

&НаКлиенте
Процедура ВнешниеПользователиСписокПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;

	Если Не ЗначениеЗаполнено(Элемент.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущаяСтрока);
	ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаОбъекта", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВнешниеПользователиСписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбранныхПользователейИГруппВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	УдалитьИзСпискаВыбранных();
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбранныхПользователейИГруппПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГруппуВнешнихПользователей(Команда)
	ТекущиеДанные = Элементы.ГруппыВнешнихПользователей.ТекущиеДанные;
	Если Не БазоваяПодсистемаКлиент.СП_ЭтоЭлементДинамическогоСписка(ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ВсеОбъектыАвторизации Тогда
		ПоказатьПредупреждение(, СтрШаблон("Невозможно добавить подгруппу к группе ""%1"",
			           |так как в число ее участников входят все пользователи выбранных видов.",
			ТекущиеДанные.Наименование));
		Возврат;
	КонецЕсли;

	Элементы.ГруппыВнешнихПользователей.ДобавитьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура НазначитьГруппы(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Пользователи", Элементы.ВнешниеПользователиСписок.ВыделенныеСтроки);
	ПараметрыФормы.Вставить("ВнешниеПользователи", Истина);

	ОткрытьФорму("ОбщаяФорма.ГруппыПользователей", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПароль(Команда)
	ТекущиеДанные = Элементы.ВнешниеПользователиСписок.ТекущиеДанные;

	Если БазоваяПодсистемаКлиент.СП_ЭтоЭлементДинамическогоСписка(ТекущиеДанные) Тогда
		ПользователиКлиент.сП_ОткрытьФормуСменыПароля(ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИЗакрыть(Команда)
	Если ХранимыеПараметры.РасширенныйПодбор Тогда
		МассивПользователей = РезультатВыбора();
		ОповеститьОВыборе(МассивПользователей);
		ЭтотОбъект.Модифицированность = Ложь;
		Закрыть(МассивПользователей);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПользователяКоманда(Команда)
	МассивПользователей = Элементы.ВнешниеПользователиСписок.ВыделенныеСтроки;
	ПолучитьКартинкиИЗаполнитьСписокВыбранных(МассивПользователей);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыборПользователяИлиГруппы(Команда)
	УдалитьИзСпискаВыбранных();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСписокВыбранныхПользователейИГрупп(Команда)
	УдалитьИзСпискаВыбранных(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьГруппу(Команда)
	МассивГрупп = Элементы.ГруппыВнешнихПользователей.ВыделенныеСтроки;
	ПолучитьКартинкиИЗаполнитьСписокВыбранных(МассивГрупп);
КонецПроцедуры

&НаКлиенте
Процедура СведенияОВнешнихПользователях(Команда)
	ОткрытьФорму(
		"Отчет.СведенияОПользователях.ФормаОбъекта",
		Новый Структура("КлючВарианта", "СведенияОВнешнихПользователях"),
		ЭтотОбъект,
		"СведенияОВнешнихПользователях");
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаСервере
Функция НовыйХранимыеПараметры()
	ХранимыеПараметры = Новый Структура;
	ХранимыеПараметры.Вставить("ВыборГруппВнешнихПользователей", Параметры.ВыборГруппВнешнихПользователей);

	Если Параметры.Отбор.Свойство("ОбъектАвторизации") Тогда
		ХранимыеПараметры.Вставить("ОтборОбъектАвторизации", Параметры.Отбор.ОбъектАвторизации);
	Иначе
		ХранимыеПараметры.Вставить("ОтборОбъектАвторизации", Неопределено);
	КонецЕсли;

	Возврат ХранимыеПараметры;
КонецФункции


&НаСервере
Процедура ЗаполнитьПараметрыДинамическихСписков(МассивПустыхСсылок = Неопределено)
	Используется = МассивПустыхСсылок <> Неопределено И МассивПустыхСсылок.Количество() <> 0;

	БазоваяПодсистемаКлиентСервер.ОН_УстановитьЭлементОтбораДинамическогоСписка(ГруппыВнешнихПользователей, "Ссылка.Назначение.ТипПользователей", МассивПустыхСсылок, ВидСравненияКомпоновкиДанных.ВСписке, , Используется);

	МассивТипов = Новый Массив;
	Если Используется Тогда
		Для Каждого Элемент Из МассивПустыхСсылок Цикл
			МассивТипов.Добавить(ТипЗнч(Элемент));
		КонецЦикла;
	КонецЕсли;

	БазоваяПодсистемаКлиентСервер.ОН_УстановитьЭлементОтбораДинамическогоСписка(ВнешниеПользователиСписок, "ТипОбъектаАвторизации", МассивТипов, ВидСравненияКомпоновкиДанных.ВСписке, , Используется);
КонецПроцедуры

&НаСервере
Процедура ОформитьИСкрытьНедействительныхВнешнихПользователей()
	// Оформление.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ЭлементЦветаОформления					= ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение			= Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение;
	ЭлементЦветаОформления.Использование	= Истина;

	ЭлементОтбораДанных						= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ВнешниеПользователиСписок.Недействителен");
	ЭлементОтбораДанных.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение		= Истина;
	ЭлементОтбораДанных.Использование		= Истина;

	ЭлементОформляемогоПоля					= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле			= Новый ПолеКомпоновкиДанных("ВнешниеПользователиСписок");
	ЭлементОформляемогоПоля.Использование	= Истина;

	// Скрытие.
	БазоваяПодсистемаКлиентСервер.ОН_УстановитьЭлементОтбораДинамическогоСписка(ВнешниеПользователиСписок, "Недействителен", Ложь, , , Истина);
КонецПроцедуры

&НаСервере
Процедура НастроитьПараметрыСпискаВнешнихПользователейДляКомандыУстановитьПароль()
	ОбновитьЗначениеПараметраКомпоновкиДанных(ВнешниеПользователиСписок, "ИдентификаторТекущегоПользователяИБ",
		ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);

	ОбновитьЗначениеПараметраКомпоновкиДанных(ВнешниеПользователиСписок, "ПустойУникальныйИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));

	ОбновитьЗначениеПараметраКомпоновкиДанных(ВнешниеПользователиСписок, "ВозможноСменитьТолькоСвойПароль",
		Не ПользователиСервер.П_ЭтоПолноправныйПользователь());
КонецПроцедуры

&НаСервере
Процедура НастроитьПорядокГруппыВсеВнешниеПользователи(Список)
	Перем Порядок;

	// Порядок.
	Порядок											= Список.КомпоновщикНастроек.Настройки.Порядок;
	Порядок.ИдентификаторПользовательскойНастройки	= "ОсновнойПорядок";

	Порядок.Элементы.Очистить();

	ЭлементПорядка						= Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Поле					= Новый ПолеКомпоновкиДанных("Предопределенный");
	ЭлементПорядка.ТипУпорядочивания	= НаправлениеСортировкиКомпоновкиДанных.Убыв;
	ЭлементПорядка.РежимОтображения		= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементПорядка.Использование		= Истина;

	ЭлементПорядка						= Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Поле					= Новый ПолеКомпоновкиДанных("Наименование");
	ЭлементПорядка.ТипУпорядочивания	= НаправлениеСортировкиКомпоновкиДанных.Возр;
	ЭлементПорядка.РежимОтображения		= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементПорядка.Использование		= Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаИзмененияТекущегоЭлементаФормы()
	Если ТекущийЭлемент <> ПоследнийЭлемент Тогда
		ПриИзмененииТекущегоЭлементаФормы();
		ПоследнийЭлемент = ТекущийЭлемент;
	КонецЕсли;

#Если ВебКлиент Тогда
	ПодключитьОбработчикОжидания("ПроверкаИзмененияТекущегоЭлементаФормы", 0.7, Истина);
#Иначе
	ПодключитьОбработчикОжидания("ПроверкаИзмененияТекущегоЭлементаФормы", 0.1, Истина);
#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТекущегоЭлементаФормы()
	Если ТекущийЭлемент = Элементы.ГруппыВнешнихПользователей Тогда
		Элементы.Комментарии.ТекущаяСтраница = Элементы.КомментарийГруппы;

	ИначеЕсли ТекущийЭлемент = Элементы.ВнешниеПользователиСписок Тогда
		Элементы.Комментарии.ТекущаяСтраница = Элементы.КомментарийПользователя;
	КонецЕсли
КонецПроцедуры

&НаСервере
Процедура УдалитьИзСпискаВыбранных(УдалитьВсех = Ложь)
	Если УдалитьВсех Тогда
		ВыбранныеПользователиИГруппы.Очистить();
		ОбновитьЗаголовокСпискаВыбранныхПользователейИГрупп();

		Возврат;
	КонецЕсли;

	МассивЭлементовСписка = Элементы.СписокВыбранныхПользователейИГрупп.ВыделенныеСтроки;
	Для Каждого ЭлементСписка Из МассивЭлементовСписка Цикл
		ВыбранныеПользователиИГруппы.Удалить(ВыбранныеПользователиИГруппы.НайтиПоИдентификатору(ЭлементСписка));
	КонецЦикла;

	ОбновитьЗаголовокСпискаВыбранныхПользователейИГрупп();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКартинкиИЗаполнитьСписокВыбранных(МассивВыбранныхЭлементов)
	ВыбранныеЭлементыИКартинки = Новый Массив;
	Для Каждого ВыбранныйЭлемент Из МассивВыбранныхЭлементов Цикл
		Если ТипЗнч(ВыбранныйЭлемент) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			НомерКартинки = Элементы.ВнешниеПользователиСписок.ДанныеСтроки(ВыбранныйЭлемент).НомерКартинки;
		Иначе
			НомерКартинки = Элементы.ГруппыВнешнихПользователей.ДанныеСтроки(ВыбранныйЭлемент).НомерКартинки;
		КонецЕсли;

		ВыбранныеЭлементыИКартинки.Добавить(
			Новый Структура("ВыбранныйЭлемент, НомерКартинки", ВыбранныйЭлемент, НомерКартинки));
	КонецЦикла;

	ЗаполнитьСписокВыбранныхПользователейИГрупп(ВыбранныеЭлементыИКартинки);
КонецПроцедуры

&НаСервере
Функция РезультатВыбора()
	ВыбранныеПользователиТаблицаЗначений	= ВыбранныеПользователиИГруппы.Выгрузить( , "Пользователь");
	МассивПользователей						= ВыбранныеПользователиТаблицаЗначений.ВыгрузитьКолонку("Пользователь");

	Возврат МассивПользователей;
КонецФункции

&НаСервере
Процедура ИзменитьПараметрыРасширеннойФормыПодбора()
	// Загрузка списка выбранных пользователей.
	ПараметрыРасширеннойФормыПодбора = ПолучитьИзВременногоХранилища(Параметры.ПараметрыРасширеннойФормыПодбора);
	ВыбранныеПользователиИГруппы.Загрузить(ПараметрыРасширеннойФормыПодбора.ВыбранныеПользователи);
	ХранимыеПараметры.Вставить("ЗаголовокФормыПодбора", ПараметрыРасширеннойФормыПодбора.ЗаголовокФормыПодбора);
	ПользователиСервер.П_ЗаполнитьНомераКартинокПользователей(ВыбранныеПользователиИГруппы, "Пользователь", "НомерКартинки");
	// Установка параметров расширенной формы подбора.
	Элементы.ЗавершитьИЗакрыть.Видимость			= Истина;
	Элементы.ГруппаВыбратьПользователя.Видимость	= Истина;
	// Включение видимости списка выбранных пользователей.
	Элементы.ВыбранныеПользователиИГруппы.Видимость	= Истина;
	ИспользоватьГруппыПользователей					= ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей");
	Элементы.ГруппаВыбратьГруппу.Видимость			= ИспользоватьГруппыПользователей;

	Если БазоваяПодсистемаСервер.ОН_ЭтоМобильныйКлиент() Тогда
		Элементы.ГруппыИПользователи.Группировка				= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.ГруппыИПользователи.ВажностьПриОтображении		= ВажностьПриОтображении.ОченьВысокая;
		Элементы.ГруппаСодержимое.Группировка					= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		Элементы.ГруппаВыбратьГруппу.Видимость					= Ложь;
		Элементы.ГруппаВыбратьПользователя.Видимость			= Ложь;
		Элементы.Переместить(Элементы.ВыбранныеПользователиИГруппы, Элементы.ГруппаСодержимое, Элементы.ВыбранныеПользователиИГруппы);
	ИначеЕсли ИспользоватьГруппыПользователей Тогда
		Элементы.ГруппыИПользователи.Группировка				= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.ВнешниеПользователиСписок.Высота				= 5;
		Элементы.ГруппыВнешнихПользователей.Высота				= 3;
		ЭтотОбъект.Высота										= 17;
		// Включение отображения заголовков списков ПользователиСписок и ГруппыПользователей.
		Элементы.ГруппыВнешнихПользователей.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элементы.ВнешниеПользователиСписок.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элементы.ВнешниеПользователиСписок.Заголовок			= "Пользователи в группе";
		Если ПараметрыРасширеннойФормыПодбора.Свойство("ПодборГруппНевозможен") Тогда
			Элементы.ВыбратьГруппу.Видимость					= Ложь;
		КонецЕсли;
	Иначе
		Элементы.ОтменитьВыборПользователя.Видимость			= Истина;
		Элементы.ОчиститьСписокВыбранных.Видимость				= Истина;
	КонецЕсли;

	// Добавление количества выбранных пользователей в заголовке выбранных пользователей и групп.
	ОбновитьЗаголовокСпискаВыбранныхПользователейИГрупп();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокСпискаВыбранныхПользователейИГрупп()
	Если ХранимыеПараметры.ИспользоватьГруппы Тогда
		ЗаголовокВыбранныеПользователиИГруппы = "Выбранные пользователи и группы (%1)";
	Иначе
		ЗаголовокВыбранныеПользователиИГруппы = "Выбранные пользователи (%1)";
	КонецЕсли;

	КоличествоПользователей = ВыбранныеПользователиИГруппы.Количество();
	Если КоличествоПользователей <> 0 Тогда
		Элементы.СписокВыбранныхПользователейИГрупп.Заголовок = СтрШаблон(ЗаголовокВыбранныеПользователиИГруппы, КоличествоПользователей);
	Иначе
		Если ХранимыеПараметры.ИспользоватьГруппы Тогда
			Элементы.СписокВыбранныхПользователейИГрупп.Заголовок = "Выбранные пользователи и группы";
		Иначе
			Элементы.СписокВыбранныхПользователейИГрупп.Заголовок = "Выбранные пользователи";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбранныхПользователейИГрупп(ВыбранныеЭлементыИКартинки)
	ПользователиСервер.сП_ВыбратьПользователейГруппы(ВыбранныеЭлементыИКартинки, ХранимыеПараметры, Элементы.ВнешниеПользователиСписок);

	Для Каждого СтрокаМассива Из ВыбранныеЭлементыИКартинки Цикл
		ВыбранныйПользовательИлиГруппа	= СтрокаМассива.ВыбранныйЭлемент;
		НомерКартинки					= СтрокаМассива.НомерКартинки;

		ПараметрыОтбора	= Новый Структура("Пользователь", ВыбранныйПользовательИлиГруппа);
		Найденный		= ВыбранныеПользователиИГруппы.НайтиСтроки(ПараметрыОтбора);
		Если Найденный.Количество() = 0 Тогда
			СтрокаВыбранныеПользователи					= ВыбранныеПользователиИГруппы.Добавить();
			СтрокаВыбранныеПользователи.Пользователь	= ВыбранныйПользовательИлиГруппа;
			СтрокаВыбранныеПользователи.НомерКартинки	= НомерКартинки;
			ЭтотОбъект.Модифицированность				= Истина;
		КонецЕсли;
	КонецЦикла;

	ВыбранныеПользователиИГруппы.Сортировать("Пользователь Возр");
	ОбновитьЗаголовокСпискаВыбранныхПользователейИГрупп();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииИспользованияГруппПользователей()
	НастроитьФормуПоИспользованиюГруппПользователей(Истина);
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоИспользованиюГруппПользователей(ИзменилосьИспользованиеГрупп = Ложь)
	Если ИзменилосьИспользованиеГрупп Тогда
		ХранимыеПараметры.Вставить("ИспользоватьГруппы", ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей"));
	КонецЕсли;

	Если ХранимыеПараметры.Свойство("ТекущаяСтрока") Тогда
		Если ТипЗнч(Параметры.ТекущаяСтрока) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
			Если ХранимыеПараметры.ИспользоватьГруппы Тогда
				ТекущиеХранимыеПараметры							= ХранимыеПараметры; // Структура
				Элементы.ГруппыВнешнихПользователей.ТекущаяСтрока	= ТекущиеХранимыеПараметры.ТекущаяСтрока;
			Иначе
				Параметры.ТекущаяСтрока = Неопределено;
			КонецЕсли;
		Иначе
			ТекущийЭлемент = Элементы.ВнешниеПользователиСписок;

			Элементы.ГруппыВнешнихПользователей.ТекущаяСтрока = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи;
		КонецЕсли;
	Иначе
		Если НЕ ХранимыеПараметры.ИспользоватьГруппы
		   И Элементы.ГруппыВнешнихПользователей.ТекущаяСтрока <> Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда

			Элементы.ГруппыВнешнихПользователей.ТекущаяСтрока = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи;
		КонецЕсли;
	КонецЕсли;

	Элементы.ВыбиратьИерархически.Видимость = ХранимыеПараметры.ИспользоватьГруппы;

	Если ХранимыеПараметры.РасширенныйПодбор Тогда
		Элементы.НазначитьГруппы.Видимость = Ложь;
	Иначе
		Элементы.НазначитьГруппы.Видимость = ХранимыеПараметры.ИспользоватьГруппы;
	КонецЕсли;

	Элементы.СоздатьГруппуВнешнихПользователей.Видимость = ПравоДоступа("Добавление", Метаданные.Справочники.ГруппыВнешнихПользователей) И ХранимыеПараметры.ИспользоватьГруппы;

	ВыборГруппВнешнихПользователей = ХранимыеПараметры.ВыборГруппВнешнихПользователей И ХранимыеПараметры.ИспользоватьГруппы И Параметры.РежимВыбора;

	Если Параметры.РежимВыбора Тогда
		БазоваяПодсистемаКлиентСервер.ОН_УстановитьСвойствоЭлементаФормы(Элементы, "ВыбратьГруппуВнешнихПользователей", "Видимость", ?(ХранимыеПараметры.РасширенныйПодбор, Ложь, ВыборГруппВнешнихПользователей));
		БазоваяПодсистемаКлиентСервер.ОН_УстановитьСвойствоЭлементаФормы(Элементы, "ВыбратьВнешнегоПользователя", "КнопкаПоУмолчанию", ?(ХранимыеПараметры.РасширенныйПодбор, Ложь, Не ВыборГруппВнешнихПользователей));
		БазоваяПодсистемаКлиентСервер.ОН_УстановитьСвойствоЭлементаФормы(Элементы, "ВыбратьВнешнегоПользователя", "Видимость", Не ХранимыеПараметры.РасширенныйПодбор);

		АвтоЗаголовок = Ложь;

		Если Параметры.ЗакрыватьПриВыборе = Ложь Тогда
			// Режим подбора.

			Если ВыборГруппВнешнихПользователей Тогда
				Если ХранимыеПараметры.РасширенныйПодбор Тогда
					Заголовок = ХранимыеПараметры.ЗаголовокФормыПодбора;
				Иначе
					Заголовок = "Подбор внешних пользователей и групп";
				КонецЕсли;

				БазоваяПодсистемаКлиентСервер.ОН_УстановитьСвойствоЭлементаФормы(Элементы, "ВыбратьВнешнегоПользователя", "Заголовок", "Выбрать внешних пользователей");

				БазоваяПодсистемаКлиентСервер.ОН_УстановитьСвойствоЭлементаФормы(Элементы, "ВыбратьГруппуВнешнихПользователей", "Заголовок", "Выбрать группы");
			Иначе
				Если ХранимыеПараметры.РасширенныйПодбор Тогда
					Заголовок = ХранимыеПараметры.ЗаголовокФормыПодбора;
				Иначе
					Заголовок = "Подбор внешних пользователей";
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Режим выбора.
			Если ВыборГруппВнешнихПользователей Тогда
				Заголовок = "Выбор внешнего пользователя или группы";

				БазоваяПодсистемаКлиентСервер.ОН_УстановитьСвойствоЭлементаФормы(Элементы, "ВыбратьВнешнегоПользователя", "Заголовок", "Выбрать внешнего пользователя");
			Иначе
				Заголовок = "Выбор внешнего пользователя";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ОбновитьСодержимоеФормыПриИзмененииГруппы(ЭтотОбъект);

	// Принудительное обновление видимости после изменения функциональной
	// опции без использования команды ОбновитьИнтерфейс.
	Элементы.ГруппыВнешнихПользователей.Видимость = Ложь;
	Элементы.ГруппыВнешнихПользователей.Видимость = Истина;
КонецПроцедуры

&НаСервере
Функция ПеремещениеПользователяВНовуюГруппу(МассивПользователей, НоваяГруппаВладелец, Перемещение)
	Если НоваяГруппаВладелец = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТекущаяГруппаВладелец = Элементы.ГруппыВнешнихПользователей.ТекущаяСтрока;
	СообщениеПользователю = ПользователиСервер.сП_ПеремещениеПользователяВНовуюГруппу(МассивПользователей, ТекущаяГруппаВладелец, НоваяГруппаВладелец, Перемещение);

	Элементы.ВнешниеПользователиСписок.Обновить();
	Элементы.ГруппыВнешнихПользователей.Обновить();

	Возврат СообщениеПользователю;
КонецФункции

&НаКлиенте
Процедура ПереключитьОтображениеНедействительныхПользователей(ПоказатьНедействительных)
	БазоваяПодсистемаКлиентСервер.ОН_УстановитьЭлементОтбораДинамическогоСписка(ВнешниеПользователиСписок, "Недействителен", Ложь, , ,НЕ ПоказатьНедействительных);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСодержимоеФормыПриИзмененииГруппы(Форма)
	Элементы						= Форма.Элементы;
	ГруппаВсеВнешниеПользователи	= ПредопределенноеЗначение("Справочник.ГруппыВнешнихПользователей.ВсеВнешниеПользователи");

	Если НЕ Форма.ХранимыеПараметры.ИспользоватьГруппы ИЛИ Элементы.ГруппыВнешнихПользователей.ТекущаяСтрока = ГруппаВсеВнешниеПользователи Тогда
		ОбновитьЗначениеПараметраКомпоновкиДанных(Форма.ВнешниеПользователиСписок, "ВсеВнешниеПользователи", Истина);

		ОбновитьЗначениеПараметраКомпоновкиДанных(Форма.ВнешниеПользователиСписок, "ВыбиратьИерархически", Истина);

		ОбновитьЗначениеПараметраКомпоновкиДанных(Форма.ВнешниеПользователиСписок, "ГруппаВнешнихПользователей", ГруппаВсеВнешниеПользователи);
	Иначе
		ОбновитьЗначениеПараметраКомпоновкиДанных(Форма.ВнешниеПользователиСписок, "ВсеВнешниеПользователи", Ложь);

	#Если Сервер Тогда
		Если ЗначениеЗаполнено(Элементы.ГруппыВнешнихПользователей.ТекущаяСтрока) Тогда
			ТекущиеДанные = БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта(Элементы.ГруппыВнешнихПользователей.ТекущаяСтрока, "ВсеОбъектыАвторизации");
		Иначе
			ТекущиеДанные = Неопределено;
		КонецЕсли;
	#Иначе
		ТекущиеДанные = Элементы.ГруппыВнешнихПользователей.ТекущиеДанные;
	#КонецЕсли

		Если ТекущиеДанные <> Неопределено И Не ТекущиеДанные.Свойство("ГруппировкаСтроки") И ТекущиеДанные.ВсеОбъектыАвторизации Тогда
			ОбновитьЗначениеПараметраКомпоновкиДанных(Форма.ВнешниеПользователиСписок, "ВыбиратьИерархически", Истина);
		Иначе
			ОбновитьЗначениеПараметраКомпоновкиДанных(Форма.ВнешниеПользователиСписок, "ВыбиратьИерархически", Форма.ВыбиратьИерархически);
		КонецЕсли;

		ОбновитьЗначениеПараметраКомпоновкиДанных(Форма.ВнешниеПользователиСписок, "ГруппаВнешнихПользователей", Элементы.ГруппыВнешнихПользователей.ТекущаяСтрока);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗначениеПараметраКомпоновкиДанных(Знач ВладелецПараметров, Знач ИмяПараметра, Знач ЗначениеПараметра)
	Для каждого Параметр Из ВладелецПараметров.Параметры.Элементы Цикл
		Если Строка(Параметр.Параметр) = ИмяПараметра Тогда
			Если Параметр.Использование И Параметр.Значение = ЗначениеПараметра Тогда
				Возврат;
			КонецЕсли;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	ВладелецПараметров.Параметры.УстановитьЗначениеПараметра(ИмяПараметра, ЗначениеПараметра);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриИзмененииНаСервере()
	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаКлиенте
Процедура ГруппыВнешнихПользователейПеретаскиваниеОбработкаВопроса(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	СообщениеПользователю = ПеремещениеПользователяВНовуюГруппу(ДополнительныеПараметры.ПараметрыПеретаскивания, ДополнительныеПараметры.Строка, ДополнительныеПараметры.Перемещение);
	ГруппыВнешнихПользователейПеретаскиваниеЗавершение(СообщениеПользователю);
КонецПроцедуры

&НаКлиенте
Процедура ГруппыВнешнихПользователейПеретаскиваниеЗавершение(СообщениеПользователю)
	Если СообщениеПользователю.Сообщение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Оповестить("Запись_ГруппыВнешнихПользователей");

	Если СообщениеПользователю.ЕстьОшибки = Ложь Тогда
		ПоказатьОповещениеПользователя("Перемещение пользователей", , СообщениеПользователю.Сообщение, БиблиотекаКартинок.Информация32);
	Иначе
		БазоваяПодсистемаКлиент.СП_ПоказатьВопросПользователю(Неопределено,
			СтрШаблон("%1
				|Следующие пользователи не были включены в выбранную группу:
				|%2", СообщениеПользователю.Сообщение, СообщениеПользователю.Пользователи), РежимДиалогаВопрос.ОК);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораНазначения(МассивТипов, ДополнительныеПараметры) Экспорт
	ЗаполнитьПараметрыДинамическихСписков(МассивТипов);
КонецПроцедуры

&НаКлиенте
Процедура ВидПользователейОчистка(Элемент, СтандартнаяОбработка)
	ЗаполнитьПараметрыДинамическихСписков();
КонецПроцедуры
