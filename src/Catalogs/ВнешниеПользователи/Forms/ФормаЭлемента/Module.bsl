///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не (ПользователиСерверПовтИсп.сП_ПустыеСсылкиТиповОбъектовАвторизации().Количество() > 0) Тогда
		Элементы.ОбъектАвторизации.Доступность = Ложь;
	КонецЕсли;

	// Заполнение вспомогательных данных.

	ЗапретРедактированияРолей = ПользователиСерверПовтИсп.сП_Настройки().РедактированиеРолей <> Истина;

	// Заполнение списка выбора языка.
	Если Метаданные.Языки.Количество() < 2 Тогда
		Элементы.ПользовательИБЯзык.Видимость = Ложь;
	Иначе
		Для каждого МетаданныеЯзыка Из Метаданные.Языки Цикл
			Элементы.ПользовательИБЯзык.СписокВыбора.Добавить(МетаданныеЯзыка.Имя, МетаданныеЯзыка.Синоним);
		КонецЦикла;
	КонецЕсли;

	// Подготовка к интерактивным действиям с учетом сценариев открытия формы.
	УровеньДоступа = ПользователиСервер.сП_УровеньДоступаКСвойствамПользователя(Объект);

	УстановитьПривилегированныйРежим(Истина);

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Создание нового элемента.
		Если Параметры.ГруппаНовогоВнешнегоПользователя <> Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
			ГруппаНовогоВнешнегоПользователя = Параметры.ГруппаНовогоВнешнегоПользователя;
		КонецЕсли;

		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			// Копирование элемента.
			ЗначениеКопирования					= Параметры.ЗначениеКопирования;
			Объект.Наименование					= "";
			Объект.ОбъектАвторизации			= Неопределено;
			ПользовательИБАдресЭлектроннойПочты	= "";

			Если Не ПользователиСервер.сП_УровеньДоступаПользователяВыше(ЗначениеКопирования, УровеньДоступа) Тогда
				ПрочитатьПользователяИБ(ЗначениеЗаполнено(ЗначениеКопирования.ИдентификаторПользователяИБ));
			Иначе
				ПрочитатьПользователяИБ();
			КонецЕсли;

			Если Не УровеньДоступа.ИзменениеРазрешенияНаВход Тогда
				ВходВПрограммуРазрешен							= Ложь;
				ВходВПрограммуРазрешенЗначениеПрямогоИзменения	= Ложь;
			КонецЕсли;
		Иначе
			// Добавление элемента.
			Если Параметры.Свойство("ОбъектАвторизацииНовогоВнешнегоПользователя") Тогда
				Объект.ОбъектАвторизации = Параметры.ОбъектАвторизацииНовогоВнешнегоПользователя;
				ОбъектАвторизацииЗаданПриОткрытии = ЗначениеЗаполнено(Объект.ОбъектАвторизации);
			ИначеЕсли ЗначениеЗаполнено(ГруппаНовогоВнешнегоПользователя) Тогда
				НазначениеГруппыВнешнихПользователей	= БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(ГруппаНовогоВнешнегоПользователя, "Назначение").Выгрузить();

				ОдинТипПользователей					= НазначениеГруппыВнешнихПользователей.Количество() = 1;

				Если ОдинТипПользователей Тогда
					Объект.ОбъектАвторизации = НазначениеГруппыВнешнихПользователей[0].ТипПользователей;
				КонецЕсли;

				Элементы.ОбъектАвторизации.ВыбиратьТип = Не ОдинТипПользователей;
			КонецЕсли;

			// Чтение начальных значений свойств пользователя ИБ.
			ПрочитатьПользователяИБ();

			Если Не ЗначениеЗаполнено(Параметры.ИдентификаторПользователяИБ) Тогда
				ПользовательИБАутентификацияСтандартная = Истина;

				Если УровеньДоступа.ИзменениеРазрешенияНаВход Тогда
					ВходВПрограммуРазрешен							= Истина;
					ВходВПрограммуРазрешенЗначениеПрямогоИзменения	= Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если УровеньДоступа.УправлениеСписком И Объект.ОбъектАвторизации <> Неопределено Тогда
			ПользовательИБИмя		= ПользователиКлиентСервер.сП_ПолучитьКраткоеИмяПользователяИБ(ТекущееПредставлениеОбъектаАвторизации);
			ПользовательИБПолноеИмя	= Объект.Наименование;
		КонецЕсли;
	Иначе
		// Открытие существующего элемента.
		ПрочитатьПользователяИБ();
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

	ОбработатьИнтерфейсРолей("НастроитьИнтерфейсРолейПриСозданииФормы", Истина);
	НачальноеОписаниеПользователяИБ = НачальноеОписаниеПользователяИБ();

	НастроитьФорму(Объект, Истина);

	Если ОбъектАвторизацииЗаданПриОткрытии Тогда
		ОбъектАвторизацииПриИзмененииНаКлиентеНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;

	Если БазоваяПодсистемаСервер.ОН_ЭтоАвтономноеРабочееМесто() Тогда
		Элементы.ГруппаШапка.ТолькоПросмотр = Истина;
		Элементы.СтраницаДополнительныеРеквизиты.ТолькоПросмотр = Истина;
		Элементы.СтраницаКомментарий.ТолькоПросмотр = Истина;
	КонецЕсли;

	// Зарезервировано для новых подсистем

	ПарольДляПодтвержденияИзмененияПочты = Неопределено;

	Если КонтактнаяИнформацияСервер.УКИ_СодержитКонтактнуюИнформацию(Объект.ОбъектАвторизации) Тогда
		ИмяРеквизитаОбъектАвторизации = ИмяРеквизитаОбъектАвторизации(ТипЗнч(Объект.ОбъектАвторизации));

		КонтактнаяИнформацияСервер.УКИ_ПриСозданииНаСервере(ЭтотОбъект, ЭтотОбъект[ИмяРеквизитаОбъектАвторизации]);

		Если ПользователиСервер.сП_ДоступнаНастройкаВосстановленияПароля(УровеньДоступа) Тогда
			Если Не ПользователиСервер.сП_ИнтерактивноЗапрашиватьВводПароля(УровеньДоступа, Объект) Тогда
				ПарольДляПодтвержденияИзмененияПочты = "";
			КонецЕсли;

			ИмяРеквизитаСПочтойДляВосстановленияПароля = КонтактнаяИнформацияСервер.УКИ_ОпределитьЭлементСПочтойДляВосстановленияПароля(ЭтотОбъект, ПользовательИБАдресЭлектроннойПочты, ПользователиСервер.сП_ДоступноРедактированиеПочтыДляВосстановленияПароля(УровеньДоступа, Объект), Истина);
		КонецЕсли;

		Элементы.ГруппаКонтактнаяИнформация.Доступность = ПользователиСервер.П_ЭтоПолноправныйПользователь();
	КонецЕсли;

	Если Не ПользователиСерверПовтИсп.сП_Настройки().ОбщиеНастройкиВхода Тогда
		Элементы.ГруппаИзменитьОграничение.Видимость = Ложь;
	КонецЕсли;

	Если Не ПользователиСерверПовтИсп.сП_ВерсияПредприятияПоддерживаетВосстановлениеПаролей() Тогда
		Элементы.ПользовательИБЗапрещеноВосстанавливатьПароль.Видимость = Ложь;
	КонецЕсли;

	Элементы.ПотребоватьСменуПароляПриВходе.РасширеннаяПодсказка.Заголовок =
		ПользователиСервер.сП_ПодсказкаПотребоватьСменуПароляПриВходе(Истина);

	Если БазоваяПодсистемаСервер.ОН_ЭтоМобильныйКлиент() Тогда
		Элементы.ФормаЗаписатьИЗакрыть.Отображение = ОтображениеКнопки.Картинка;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// Зарезервировано для новых подсистем

	НастроитьФорму(ТекущийОбъект);

	ТекущееПредставлениеОбъектаАвторизации = Строка(Объект.ОбъектАвторизации);

	// Зарезервировано для новых подсистем

	Если КонтактнаяИнформацияСервер.УКИ_СодержитКонтактнуюИнформацию(Объект.ОбъектАвторизации) Тогда
		ИмяРеквизитаОбъектАвторизации = ИмяРеквизитаОбъектАвторизации(ТипЗнч(Объект.ОбъектАвторизации));
		КонтактнаяИнформацияСервер.УКИ_ПриЧтенииНаСервере(ЭтотОбъект, ЭтотОбъект[ИмяРеквизитаОбъектАвторизации]);

		Если ТипЗнч(УровеньДоступа) = Тип("Структура") И ПользователиСервер.сП_ДоступнаНастройкаВосстановленияПароля(УровеньДоступа) Тогда
			ИмяРеквизитаСПочтойДляВосстановленияПароля = КонтактнаяИнформацияСервер.УКИ_ОпределитьЭлементСПочтойДляВосстановленияПароля(ЭтотОбъект, ПользовательИБАдресЭлектроннойПочты, ПользователиСервер.сП_ДоступноРедактированиеПочтыДляВосстановленияПароля(УровеньДоступа, Объект.ОбъектАвторизации), Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьИнтерфейсРолейУстановитьТолькоПросмотрРолей(ТекущийОбъект = Неопределено)
	Если ТекущийОбъект = Неопределено Тогда
		ТекущийОбъект = Объект;
	КонецЕсли;

	ОбработатьИнтерфейсРолей("УстановитьТолькоПросмотрРолей",
		    ЗапретРедактированияРолей
		Или ДействияВФорме.Роли <> "Редактирование"
		Или Не УровеньДоступа.НастройкиДляВхода
		Или Не ТекущийОбъект.УстановитьРолиНепосредственно);
КонецПроцедуры

&НаСервере
Процедура НастроитьФорму(ТекущийОбъект, ПриСозданииНаСервере = Ложь, ПараметрыЗаписи = Неопределено)
	СоздатьРеквизитОбъектАвторизации();

	Если НачальноеОписаниеПользователяИБ = Неопределено Тогда
		Возврат; // Вызов ПриЧтенииНаСервере до вызова ПриСозданииНаСервере.
	КонецЕсли;

	Если Не ПриСозданииНаСервере Тогда
		ПрочитатьПользователяИБ();
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	ПользователиСервер.сП_ПрочитатьСведенияОПользователе(ЭтотОбъект);
	УстановитьПривилегированныйРежим(Ложь);

	УровеньДоступа = ПользователиСервер.сП_УровеньДоступаКСвойствамПользователя(ТекущийОбъект);

	ОпределитьДействияВФорме();

	ОпределитьНесоответствияПользователяСПользователемИБ(ПараметрыЗаписи);

	ОбработатьИнтерфейсРолейУстановитьТолькоПросмотрРолей(ТекущийОбъект);

	// Установка постоянной доступности свойств.
	Элементы.СвойстваПользователяИБ.Видимость =
		ЗначениеЗаполнено(ДействияВФорме.СвойстваПользователяИБ);

	Элементы.ОтображениеРолей.Видимость =
		ЗначениеЗаполнено(ДействияВФорме.Роли);

	Элементы.УстановитьРолиНепосредственно.Видимость =
		ЗначениеЗаполнено(ДействияВФорме.Роли) И НЕ (ПользователиСерверПовтИсп.сП_Настройки().РедактированиеРолей <> Истина);

	ОбновитьОтображаемыйТипПользователя();

	ТолькоПросмотр = ТолькоПросмотр
		ИЛИ ДействияВФорме.Роли                   <> "Редактирование"
		  И ДействияВФорме.СвойстваЭлемента       <> "Редактирование"
		  И ДействияВФорме.СвойстваПользователяИБ <> "Редактирование";

	ДоступностьКнопки = Не ТолькоПросмотр И ПравоДоступа("Редактирование", Метаданные.Справочники.ВнешниеПользователи);

	Если Элементы.ФормаЗаписатьИЗакрыть.Доступность <> ДоступностьКнопки Тогда
		Элементы.ФормаЗаписатьИЗакрыть.Доступность = ДоступностьКнопки;
	КонецЕсли;

	Если Элементы.ИзменитьОграничениеНаВходВПрограмму.Доступность <> ДоступностьКнопки Тогда
		Элементы.ИзменитьОграничениеНаВходВПрограмму.Доступность = ДоступностьКнопки;
	КонецЕсли;

	Если Элементы.СменитьПароль.Доступность <> ДоступностьКнопки Тогда
		Элементы.СменитьПароль.Доступность = ДоступностьКнопки;
	КонецЕсли;

	Элементы.РекомендуетсяПроверитьНастройкиДляВхода.Видимость =
		  УровеньДоступа.ИзменениеРазрешенияНаВход
		И ТекущийОбъект.Подготовлен
		И Не ПриЧтенииВходВПрограммуРазрешен;

	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ОчиститьСообщения();

	// Зарезервировано для новых подсистем

	Если ДействияВФорме.Роли = "Редактирование"
	   И Объект.УстановитьРолиНепосредственно
	   И ПользовательИБРоли.Количество() = 0 Тогда

		Если НЕ ПараметрыЗаписи.Свойство("СПустымСпискомРолей") Тогда
			Отказ = Истина;
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ПослеОтветаНаВопросОЗаписиСПустымСпискомРолей", ЭтотОбъект, ПараметрыЗаписи),
				"Пользователю информационной базы не установлено ни одной роли. Продолжить?",
				РежимДиалогаВопрос.ДаНет,
				,
				,
				"Запись пользователя информационной базы");
			Возврат;
		КонецЕсли;
	КонецЕсли;

	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗначениеКопирования", ЗначениеКопирования);

	ОбновитьОтображаемыйТипПользователя();
	// Автообновление наименования внешнего пользователя.
	УстановитьПривилегированныйРежим(Истина);
	ТекущееПредставлениеОбъектаАвторизации = Строка(ТекущийОбъект.ОбъектАвторизации);
	УстановитьПривилегированныйРежим(Ложь);
	Объект.Наименование        = ТекущееПредставлениеОбъектаАвторизации;
	ТекущийОбъект.Наименование = ТекущееПредставлениеОбъектаАвторизации;

	Если ТребуетсяЗаписьПользователяИБ(ЭтотОбъект) Тогда
		Если ПользователиСервер.сП_ДоступнаНастройкаВосстановленияПароля(УровеньДоступа) Тогда
			Если ПользовательИБЗапрещеноИзменятьПароль Тогда
				ПользовательИБЗапрещеноВосстанавливатьПароль = Истина;
			КонецЕсли;

			Если ПользователиСервер.сП_ДоступноРедактированиеПочтыДляВосстановленияПароля(УровеньДоступа, Объект) Тогда
				Если ЗначениеЗаполнено(ИмяРеквизитаСПочтойДляВосстановленияПароля) И ПользовательИБАдресЭлектроннойПочты <> ЭтотОбъект[ИмяРеквизитаСПочтойДляВосстановленияПароля] Тогда
					Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
						Подготовлен = БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(ТекущийОбъект.Ссылка, "Подготовлен");
					Иначе
						Подготовлен = УровеньДоступа.УправлениеСписком;
					КонецЕсли;

					ИзменятьПочтуБезПодтвержденияПаролем = ПользователиСервер.П_ЭтоПолноправныйПользователь() Или Подготовлен;

					Если Не ИзменятьПочтуБезПодтвержденияПаролем Тогда
						ПарольСовпадаетССохраненным = Ложь;

						Если ТипЗнч(ПарольДляПодтвержденияИзмененияПочты) = Тип("Строка") Тогда
							УстановитьПривилегированныйРежим(Истина);
							ПарольСовпадаетССохраненным = ПользователиСервер.сП_СтарыйПарольСовпадаетССохраненным(ПарольДляПодтвержденияИзмененияПочты, Объект.ИдентификаторПользователяИБ);
							УстановитьПривилегированныйРежим(Ложь);
						КонецЕсли;

						// проверка пароля
						Если Не ПарольСовпадаетССохраненным Тогда
							ПарольДляПодтвержденияИзмененияПочты = Неопределено;

							ВызватьИсключение "Пароль указан неверно";
						КонецЕсли;
					КонецЕсли;

					ПользовательИБАдресЭлектроннойПочты = ЭтотОбъект[ИмяРеквизитаСПочтойДляВосстановленияПароля];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ОписаниеПользователяИБ = ОписаниеПользователяИБ();

		Если ЗначениеЗаполнено(Объект.ИдентификаторПользователяИБ) Тогда
			ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", Объект.ИдентификаторПользователяИБ);
		КонецЕсли;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");

		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
	КонецЕсли;

	Если ДействияВФорме.СвойстваЭлемента <> "Редактирование" Тогда
		ЗаполнитьЗначенияСвойств(ТекущийОбъект, БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта(ТекущийОбъект.Ссылка, "ПометкаУдаления"));
	КонецЕсли;

	ТекущийОбъект.ДополнительныеСвойства.Вставить("ГруппаНовогоВнешнегоПользователя", ГруппаНовогоВнешнегоПользователя);

	// Зарезервировано для новых подсистем

	ИмяРеквизитаОбъектАвторизации = ИмяРеквизитаОбъектАвторизации(ТипЗнч(Объект.ОбъектАвторизации));
	КонтактнаяИнформацияСервер.УКИ_ПередЗаписьюНаСервере(ЭтотОбъект, ЭтотОбъект[ИмяРеквизитаОбъектАвторизации]);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ПользователиСервер.П_ЭтоПолноправныйПользователь() Тогда
		ИмяРеквизитаОбъектАвторизации = ИмяРеквизитаОбъектАвторизации(ТипЗнч(Объект.ОбъектАвторизации));

		ОбъектАвторизацииОбъект = РеквизитФормыВЗначение(ИмяРеквизитаОбъектАвторизации);
		Если Не ОбъектАвторизацииОбъект.Ссылка.Пустая() Тогда
			ОбъектАвторизацииОбъект.Записать();
			ЗначениеВРеквизитФормы(ОбъектАвторизацииОбъект, ИмяРеквизитаОбъектАвторизации);
		КонецЕсли;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	ПользователиСервер.сП_ЗаписатьСведенияОПользователе(ЭтотОбъект, ТекущийОбъект);

	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если ТребуетсяЗаписьПользователяИБ(ЭтотОбъект) Тогда
		ПараметрыЗаписи.Вставить(ТекущийОбъект.ДополнительныеСвойства.ОписаниеПользователяИБ.РезультатДействия);
	КонецЕсли;

	НастроитьФорму(ТекущийОбъект, , ПараметрыЗаписи);

	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ВнешниеПользователи", Новый Структура, Объект.Ссылка);
	ОповеститьОбИзменении(Объект.ОбъектАвторизации);

	Если ПараметрыЗаписи.Свойство("ДобавленПользовательИБ") Тогда
		Оповестить("ДобавленПользовательИБ", ПараметрыЗаписи.ДобавленПользовательИБ, ЭтотОбъект);
	ИначеЕсли ПараметрыЗаписи.Свойство("ИзмененПользовательИБ") Тогда
		Оповестить("ИзмененПользовательИБ", ПараметрыЗаписи.ИзмененПользовательИБ, ЭтотОбъект);
	ИначеЕсли ПараметрыЗаписи.Свойство("УдаленПользовательИБ") Тогда
		Оповестить("УдаленПользовательИБ", ПараметрыЗаписи.УдаленПользовательИБ, ЭтотОбъект);
	ИначеЕсли ПараметрыЗаписи.Свойство("ОчищеноСопоставлениеСНесуществующимПользователемИБ") Тогда
		Оповестить("ОчищеноСопоставлениеСНесуществующимПользователемИБ", ПараметрыЗаписи.ОчищеноСопоставлениеСНесуществующимПользователемИБ, ЭтотОбъект);
	КонецЕсли;

	Если ЗначениеЗаполнено(ГруппаНовогоВнешнегоПользователя) Тогда
		ОповеститьОбИзменении(ГруппаНовогоВнешнегоПользователя);

		Оповестить("Запись_ГруппыВнешнихПользователей", Новый Структура, ГруппаНовогоВнешнегоПользователя);

		ГруппаНовогоВнешнегоПользователя = Неопределено;
	КонецЕсли;

	ПользователиКлиент.сП_РазвернутьПодсистемыРолей(ЭтотОбъект);

	Если ПараметрыЗаписи.Свойство("ЗаписатьИЗакрыть") Тогда
		ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	ТекстОшибки = "";
	Если ПользователиСервер.сП_ОбъектАвторизацииИспользуется(Объект.ОбъектАвторизации, Объект.Ссылка, , , ТекстОшибки) Тогда
		БазоваяПодсистемаСервер.ОН_СообщитьПользователю(ТекстОшибки, , "Объект.ОбъектАвторизации", , Отказ);
	КонецЕсли;

	Если ВходВПрограммуРазрешен И ЗначениеЗаполнено(СрокДействия) И СрокДействия <= НачалоДня(ТекущаяДатаСеанса()) Тогда
		БазоваяПодсистемаСервер.ОН_СообщитьПользователю("Ограничение должно быть до завтра или более.",, "ВходВПрограммуРазрешен",, Отказ);
	КонецЕсли;

	Если ТребуетсяЗаписьПользователяИБ(ЭтотОбъект) Тогда
		ОписаниеПользователяИБ = ОписаниеПользователяИБ();
		ОписаниеПользователяИБ.Вставить("ИдентификаторПользователяИБ", Объект.ИдентификаторПользователяИБ);
		ПользователиСервер.сП_ПроверитьОписаниеПользователяИБ(ОписаниеПользователяИБ, Отказ, Истина);

		ТекстСообщения = "";
		Если ПользователиСервер.сП_ТребуетсяСоздатьПервогоАдминистратора(Неопределено, ТекстСообщения) Тогда
			БазоваяПодсистемаСервер.ОН_СообщитьПользователю(ТекстСообщения, , "ВходВПрограммуРазрешен", , Отказ);
		КонецЕсли;
	КонецЕсли;

	// Проверка наличия ролей в метаданных.
	Если Не Элементы.Роли.ТолькоПросмотр Тогда
		Ошибки = Неопределено;
		ЭлементыДерева = Роли.ПолучитьЭлементы();
		Для Каждого Строка Из ЭлементыДерева Цикл
			Если Не Строка.Пометка Тогда
				Продолжить;
			КонецЕсли;
			Если Строка.ЭтоНесуществующаяРоль Тогда
				БазоваяПодсистемаКлиентСервер.ОН_ДобавитьОшибкуПользователю(Ошибки,
					"Роли[%1].РолиСиноним",
					СтрШаблон("Несуществующая роль ""%1"".", Строка.Синоним),
					"Роли",
					ЭлементыДерева.Индекс(Строка),
					СтрШаблон("Несуществующая роль ""%1"" в строке %2.", Строка.Синоним, "%1"));
			КонецЕсли;
			Если Строка.ЭтоНедоступнаяРоль Тогда
				БазоваяПодсистемаКлиентСервер.ОН_ДобавитьОшибкуПользователю(Ошибки,
					"Роли[%1].РолиСиноним",
					СтрШаблон("Роль ""%1"" недоступна для внешних пользователей.", Строка.Синоним),
					"Роли",
					ЭлементыДерева.Индекс(Строка),
					СтрШаблон("Роль ""%1"" в строке %2 недоступна для внешних пользователей.", Строка.Синоним, "%1"));
			КонецЕсли;
		КонецЦикла;
		БазоваяПодсистемаКлиентСервер.ОН_СообщитьОшибкиПользователю(Ошибки, Отказ);
	КонецЕсли;

	// Зарезервировано для новых подсистем

	Если КонтактнаяИнформацияСервер.УКИ_СодержитКонтактнуюИнформацию(Объект.ОбъектАвторизации) Тогда
		ИмяРеквизитаОбъектАвторизации	= ИмяРеквизитаОбъектАвторизации(ТипЗнч(Объект.ОбъектАвторизации));
		ОбъектАвторизацииОбъект			= РеквизитФормыВЗначение(ИмяРеквизитаОбъектАвторизации);
		КонтактнаяИнформацияСервер.УКИ_ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, ОбъектАвторизацииОбъект, Отказ);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ОбработатьИнтерфейсРолей("НастроитьИнтерфейсРолейПриЗагрузкеНастроек", Настройки);
КонецПроцедуры

&НаКлиенте
Процедура ОбъектАвторизацииПриИзменении(Элемент)
	ОбъектАвторизацииПриИзмененииНаКлиентеНаСервере(ЭтотОбъект, Объект);
	ИзменитьРеквизитОбъектАвторизации();
КонецПроцедуры

&НаКлиенте
Процедура НедействителенПриИзменении(Элемент)
	Если Объект.Недействителен Тогда
		ВходВПрограммуРазрешен = Ложь;
		Если Не ПользовательИБАутентификацияOpenID И Не ПользовательИБАутентификацияСтандартнаяЗначениеПрямогоИзменения И ПользовательИБАутентификацияСтандартная Тогда
			ПользовательИБАутентификацияСтандартная = Ложь;
		КонецЕсли;
	ИначеЕсли ВходВПрограммуРазрешенЗначениеПрямогоИзменения Тогда
		Если Не ПользовательИБАутентификацияСтандартная И Не ПользовательИБАутентификацияOpenID Тогда
			ПользовательИБАутентификацияСтандартная = Истина;
		КонецЕсли;
		ВходВПрограммуРазрешен = Истина;
	КонецЕсли;

	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВходВПрограммуРазрешенПриИзменении(Элемент)
	Если Объект.ПометкаУдаления И ВходВПрограммуРазрешен Тогда
		ВходВПрограммуРазрешен = Ложь;
		ПоказатьПредупреждение(,"Чтобы разрешить вход в программу, снимите
			           |пометку на удаление с этого внешнего пользователя.");
		Возврат;
	КонецЕсли;

	Если Не ВходВПрограммуРазрешен И Не ПользовательИБАутентификацияOpenID И Не ПользовательИБАутентификацияСтандартнаяЗначениеПрямогоИзменения И ПользовательИБАутентификацияСтандартная Тогда
		ПользовательИБАутентификацияСтандартная = Ложь;
	КонецЕсли;

	ОбновитьИмяДляВхода(ЭтотОбъект);

	Если ВходВПрограммуРазрешен И НЕ ПользовательИБАутентификацияOpenID И НЕ ПользовательИБАутентификацияСтандартная Тогда
		ПользовательИБАутентификацияСтандартная = Истина;
	КонецЕсли;

	УстановитьДоступностьСвойств(ЭтотОбъект);

	Если Не УровеньДоступа.ИзменениеРазрешенияНаВход И Не ВходВПрограммуРазрешен Тогда
		ПоказатьПредупреждение(,"После записи вход в программу сможет разрешить только администратор.");
	КонецЕсли;

	ВходВПрограммуРазрешенЗначениеПрямогоИзменения = ВходВПрограммуРазрешен;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОграничениеНаВходВПрограмму(Команда)
	ОткрытьФорму("Справочник.Пользователи.Форма.ОграничениеНаВходВПрограмму",, ЭтотОбъект,,,, Новый ОписаниеОповещения("ИзменитьОграничениеНаВходВПрограммуЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБИмяПриИзменении(Элемент)
	ПользовательИБИмя							= СокрЛП(ПользовательИБИмя);
	ПользовательИБИмяЗначениеПрямогоИзменения	= ПользовательИБИмя;

	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБАутентификацияСтандартнаяПриИзменении(Элемент)
	АутентификацияПриИзменении();
	ПользовательИБАутентификацияСтандартнаяЗначениеПрямогоИзменения = ПользовательИБАутентификацияСтандартная;
КонецПроцедуры

&НаКлиенте
Процедура ПотребоватьСменуПароляПриВходеПриИзменении(Элемент)
	Если ПотребоватьСменуПароляПриВходе Тогда
		ПользовательИБЗапрещеноИзменятьПароль = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБЗапрещеноИзменятьПарольПриИзменении(Элемент)
	Если ПользовательИБЗапрещеноИзменятьПароль Тогда
		ПотребоватьСменуПароляПриВходе					= Ложь;
		ПользовательИБЗапрещеноВосстанавливатьПароль	= Истина;
	КонецЕсли;

	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБАутентификацияOpenIDПриИзменении(Элемент)
	АутентификацияПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБЯзыкПриИзменении(Элемент)
	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРолиНепосредственноПриИзменении(Элемент)
	Если Не Объект.УстановитьРолиНепосредственно Тогда
		ПрочитатьРолиПользователяИБ();
		ПользователиКлиент.сП_РазвернутьПодсистемыРолей(ЭтотОбъект);
	КонецЕсли;

	УстановитьДоступностьСвойств(ЭтотОбъект);
	ОбработатьИнтерфейсРолейУстановитьТолькоПросмотрРолей();
КонецПроцедуры

&НаКлиенте
Процедура СтраницыГлавноеИКомментарийПриСменеСтраницы(Элемент, ТекущаяСтраница)
	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаКлиенте
Процедура ПотребоватьСменуПароляПриВходеРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказатьНастройкиВнешнихПользователей", Истина);

	ОткрытьФорму("ОбщаяФорма.НастройкиВходаПользователей", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РолиПометкаПриИзменении(Элемент)
	Если Элементы.Роли.ТекущиеДанные <> Неопределено Тогда
		ОбработатьИнтерфейсРолей("ОбновитьСоставРолей");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Записать(Новый Структура("ЗаписатьИЗакрыть"));
КонецПроцедуры

&НаКлиенте
Процедура СменитьПароль(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВернутьПарольБезУстановки", Истина);
	ДополнительныеПараметры.Вставить("СтарыйПароль", ПользовательИБСтарыйПароль);

	ПользователиКлиент.сП_ОткрытьФормуСменыПароля(Объект.Ссылка, Новый ОписаниеОповещения("СменитьПарольПослеПолученияПароля", ЭтотОбъект), ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТолькоВыбранныеРоли(Команда)
	ОбработатьИнтерфейсРолей("ТолькоВыбранныеРоли");
	ПользователиКлиент.сП_РазвернутьПодсистемыРолей(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаРолейПоПодсистемам(Команда)
	ОбработатьИнтерфейсРолей("ГруппировкаПоПодсистемам");
	ПользователиКлиент.сП_РазвернутьПодсистемыРолей(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРоли(Команда)
	ОбработатьИнтерфейсРолей("ОбновитьСоставРолей", "ВключитьВсе");

	ПользователиКлиент.сП_РазвернутьПодсистемыРолей(ЭтотОбъект, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьРоли(Команда)
	ОбработатьИнтерфейсРолей("ОбновитьСоставРолей", "ИсключитьВсе");
КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитОбъектАвторизации()
	ЗначениеОбъектаАвторизации = ОбъектАвторизации("ОбъектАвторизации");

	Если ЗначениеОбъектаАвторизации = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущийТипОбъектАвторизации = ТипЗнч(ЗначениеОбъектаАвторизации);

	ИмяРеквизитаОбъектАвторизации = ИмяРеквизитаОбъектАвторизации(ТекущийТипОбъектАвторизации);

	ОписаниеТипаНаФорме = Неопределено;
	РеквизитыФормы = ПолучитьРеквизиты();
	Для каждого РеквизитФормы Из РеквизитыФормы Цикл
		Если РеквизитФормы.Имя = ИмяРеквизитаОбъектАвторизации Тогда
			ОписаниеТипаНаФорме = РеквизитФормы.ТипЗначения.Типы()[0];

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ТекущийТипОбъектАвторизации <> ОписаниеТипаНаФорме Тогда
		ДобавляемыеРеквизиты = Новый Массив;

		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТекущийТипОбъектАвторизации);

		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизитаОбъектАвторизации, ОписаниеТипа));
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;

	ЗначениеВРеквизитФормы(ЗначениеОбъектаАвторизации, ИмяРеквизитаОбъектАвторизации);
КонецПроцедуры

&НаСервере
Функция ОбъектАвторизации(ИмяРеквизитаОбъектАвторизации)
	Если ТипЗнч(Объект[ИмяРеквизитаОбъектАвторизации])= Тип("Строка") Или Не ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъектАвторизации]) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ЗначениеОбъектаАвторизации = Объект[ИмяРеквизитаОбъектАвторизации].ПолучитьОбъект();

	Возврат ЗначениеОбъектаАвторизации;
КонецФункции

&НаСервереБезКонтекста
Функция ИмяРеквизитаОбъектАвторизации(ТипОбъектАвторизации)
	Префикс = Метаданные.НайтиПоТипу(ТипОбъектАвторизации).Имя;

	Возврат "ОбъектАвторизацииВнешнегоПользователя" + Префикс;
КонецФункции

&НаСервере
Процедура ИзменитьРеквизитОбъектАвторизации()
	СоздатьРеквизитОбъектАвторизации();

	Если Не ЗначениеЗаполнено(Объект.ОбъектАвторизации) Или Не КонтактнаяИнформацияСервер.УКИ_СодержитКонтактнуюИнформацию(Объект.ОбъектАвторизации) Тогда
			Возврат;
	КонецЕсли;

	ИмяРеквизитаОбъектАвторизации = ИмяРеквизитаОбъектАвторизации(ТипЗнч(Объект.ОбъектАвторизации));

	Если Элементы.ГруппаКонтактнаяИнформация.ПодчиненныеЭлементы.Количество() = 0 Тогда
		Если КонтактнаяИнформацияСервер.УКИ_СодержитКонтактнуюИнформацию(Объект.ОбъектАвторизации) Тогда
			КонтактнаяИнформацияСервер.УКИ_ПриСозданииНаСервере(ЭтотОбъект, ЭтотОбъект[ИмяРеквизитаОбъектАвторизации]);
		КонецЕсли;
	Иначе
		КонтактнаяИнформацияСервер.УКИ_ПриЧтенииНаСервере(ЭтотОбъект, ЭтотОбъект[ИмяРеквизитаОбъектАвторизации]);
	КонецЕсли;

	ПарольДляПодтвержденияИзмененияПочты  = Неопределено;
	Если ПользователиСервер.П_ЭтоПолноправныйПользователь() Тогда
		Если Не ПользователиСервер.сП_ИнтерактивноЗапрашиватьВводПароля(УровеньДоступа, Объект) Тогда
			ПарольДляПодтвержденияИзмененияПочты = "";
		КонецЕсли;

		ИмяРеквизитаСПочтойДляВосстановленияПароля = КонтактнаяИнформацияСервер.УКИ_ОпределитьЭлементСПочтойДляВосстановленияПароля(ЭтотОбъект, ПользовательИБАдресЭлектроннойПочты, ПользователиСервер.сП_ДоступноРедактированиеПочтыДляВосстановленияПароля(УровеньДоступа, Объект), Истина);

		Элементы.ГруппаКонтактнаяИнформация.Доступность = Истина;
	Иначе
		Элементы.ГруппаКонтактнаяИнформация.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИмяДляВхода(Форма, ПриИзмененииНаименования = Ложь)
	Элементы = Форма.Элементы;

	// Настройка необходимости заполнения.
	Если ТребуетсяЗаписьПользователяИБ(Форма, Ложь) Тогда
		НоваяСтраница = Элементы.ИмяСОтметкойНезаполненного;
	Иначе
		НоваяСтраница = Элементы.ИмяБезОтметкиНезаполненного;
	КонецЕсли;

	Если Элементы.ИмяПереключениеОтметкиНезаполненного.ТекущаяСтраница <> НоваяСтраница Тогда
		Элементы.ИмяПереключениеОтметкиНезаполненного.ТекущаяСтраница = НоваяСтраница;
	КонецЕсли;

	Если Форма.ПользовательИБСуществует Тогда
		Возврат;
	КонецЕсли;

	КраткоеИмя = ПользователиКлиентСервер.сП_ПолучитьКраткоеИмяПользователяИБ(Форма.ТекущееПредставлениеОбъектаАвторизации);

	Если Элементы.ИмяПереключениеОтметкиНезаполненного.ТекущаяСтраница = Элементы.ИмяБезОтметкиНезаполненного Тогда
		Если (Не ЗначениеЗаполнено(Форма.ПользовательИБИмяЗначениеПрямогоИзменения) Или Форма.ПользовательИБИмяЗначениеПрямогоИзменения = КраткоеИмя) И Форма.ПользовательИБИмя = КраткоеИмя Тогда
			Форма.ПользовательИБИмя = "";
		КонецЕсли;
	Иначе
		Если ПриИзмененииНаименования
		 Или Не ЗначениеЗаполнено(Форма.ПользовательИБИмя) Тогда

			Форма.ПользовательИБИмя = КраткоеИмя;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АутентификацияПриИзменении()
	Если НЕ ПользовательИБАутентификацияOpenID
	   И НЕ ПользовательИБАутентификацияСтандартная Тогда

		ВходВПрограммуРазрешен = Ложь;

	ИначеЕсли Не ВходВПрограммуРазрешен Тогда
		ВходВПрограммуРазрешен = ВходВПрограммуРазрешенЗначениеПрямогоИзменения;
	КонецЕсли;

	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

// Продолжение процедуры СменитьПароль.
&НаКлиенте
Процедура СменитьПарольПослеПолученияПароля(Результат, Контекст) Экспорт
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;

	Модифицированность = Истина;

	ПользовательИБПароль       = Результат.НовыйПароль;
	ПользовательИБСтарыйПароль = Результат.СтарыйПароль;

	УстановитьНаличиеПароля(ЭтотОбъект, ЗначениеЗаполнено(ПользовательИБПароль), БазоваяПодсистемаКлиент.СП_ПараметрКлиента("АвторизованныйПользователь"));

	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНаличиеПароля(Форма, ПарольУстановлен, АвторизованныйПользователь)
	ПользователиКлиентСервер.сП_УстановитьНаличиеПароля(Форма, ПарольУстановлен, АвторизованныйПользователь);
КонецПроцедуры

&НаСервере
Процедура ОпределитьДействияВФорме()
	ДействияВФорме = Новый Структура;

	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("Роли", "");

	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("СвойстваПользователяИБ", "");

	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("СвойстваЭлемента", "Просмотр");

	Если УровеньДоступа.ИзменениеТекущего Или УровеньДоступа.УправлениеСписком Тогда
		ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
	КонецЕсли;

	Если УровеньДоступа.УправлениеСписком Тогда
		ДействияВФорме.СвойстваЭлемента = "Редактирование";
	КонецЕсли;

	Если УровеньДоступа.ПолныеПрава Тогда
		ДействияВФорме.Роли = "Редактирование";
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ ЗначениеЗаполнено(Объект.ОбъектАвторизации) Тогда
		ДействияВФорме.СвойстваЭлемента = "Редактирование";
	КонецЕсли;

	ИнтеграцияПодсистемСервер.ПриОпределенииДействийВФорме(Объект.Ссылка, ДействияВФорме);

	// Проверка имен действий в форме.
	Если СтрНайти(", Просмотр, Редактирование,", ", " + ДействияВФорме.Роли + ",") = 0 Тогда
		ДействияВФорме.Роли = "";
	ИначеЕсли ДействияВФорме.Роли = "Редактирование" И ПользователиСерверПовтИсп.сП_Настройки().РедактированиеРолей <> Истина Тогда
		ДействияВФорме.Роли = "Просмотр";
	КонецЕсли;

	Если СтрНайти(", Просмотр, ПросмотрВсех, Редактирование, РедактированиеСвоих, РедактированиеВсех,", ", " + ДействияВФорме.СвойстваПользователяИБ + ",") = 0 Тогда
		ДействияВФорме.СвойстваПользователяИБ = "";
	Иначе // Поддержка обратной совместимости.
		Если СтрНайти(ДействияВФорме.СвойстваПользователяИБ, "Просмотр") Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Просмотр";

		ИначеЕсли СтрНайти(ДействияВФорме.СвойстваПользователяИБ, "Редактирование") Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
		КонецЕсли;
	КонецЕсли;

	Если СтрНайти(", Просмотр, Редактирование,", ", " + ДействияВФорме.СвойстваЭлемента + ",") = 0 Тогда
		ДействияВФорме.СвойстваЭлемента = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОписаниеПользователяИБ()
	Если УровеньДоступа.УправлениеСписком И ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
		ПользовательИБПолноеИмя = Объект.Наименование;
	КонецЕсли;

	Если УровеньДоступа.АдминистраторСистемы Или УровеньДоступа.ПолныеПрава Тогда
		Результат = ПользователиСервер.П_НовоеОписаниеПользователяИБ();
		ПользователиСервер.П_СкопироватьСвойстваПользователяИБ(Результат, ЭтотОбъект, , "УникальныйИдентификатор,
			|Роли",
			"ПользовательИБ");

		Результат.Вставить("ВходВПрограммуРазрешен", ВходВПрограммуРазрешен);
	Иначе
		Результат = Новый Структура;

		Если УровеньДоступа.ИзменениеТекущего Тогда
			Результат.Вставить("Пароль", ПользовательИБПароль);
			Результат.Вставить("Язык",   ПользовательИБЯзык);
		КонецЕсли;

		Если УровеньДоступа.УправлениеСписком Тогда
			Результат.Вставить("ВходВПрограммуРазрешен",  ВходВПрограммуРазрешен);
			Результат.Вставить("ЗапрещеноИзменятьПароль", ПользовательИБЗапрещеноИзменятьПароль);
			Результат.Вставить("Язык",                    ПользовательИБЯзык);
			Результат.Вставить("ПолноеИмя",               ПользовательИБПолноеИмя);
		КонецЕсли;

		Если УровеньДоступа.НастройкиДляВхода Тогда
			Результат.Вставить("АутентификацияСтандартная", ПользовательИБАутентификацияСтандартная);
			Результат.Вставить("Пароль",                    ПользовательИБПароль);
			Результат.Вставить("Имя",                       ПользовательИБИмя);
			Результат.Вставить("АутентификацияOpenID",      ПользовательИБАутентификацияOpenID);
		КонецЕсли;
	КонецЕсли;

	Если УровеньДоступа.НастройкиДляВхода И Не (ПользователиСерверПовтИсп.сП_Настройки().РедактированиеРолей <> Истина) И Объект.УстановитьРолиНепосредственно Тогда
		ТекущиеРоли = ПользовательИБРоли.Выгрузить(, "Роль").ВыгрузитьКолонку("Роль");
		Результат.Вставить("Роли", ТекущиеРоли);
	КонецЕсли;

	Если УровеньДоступа.УправлениеСписком Тогда
		Результат.Вставить("ПоказыватьВСпискеВыбора", Ложь);
		Результат.Вставить("РежимЗапуска", "Авто");
	КонецЕсли;

	Если УровеньДоступа.ПолныеПрава Тогда
		Результат.Вставить("АутентификацияОС", Ложь);
		Результат.Вставить("ПользовательОС", "");
	КонецЕсли;

	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбъектАвторизацииПриИзмененииНаКлиентеНаСервере(Форма, Объект)
	Если Объект.ОбъектАвторизации = Неопределено Тогда
		Объект.ОбъектАвторизации = Форма.ТипОбъектовАвторизации;
	КонецЕсли;

	Если Форма.ТекущееПредставлениеОбъектаАвторизации <> Строка(Объект.ОбъектАвторизации) Тогда
		Форма.ТекущееПредставлениеОбъектаАвторизации = Строка(Объект.ОбъектАвторизации);
		ОбновитьИмяДляВхода(Форма, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображаемыйТипПользователя()
	Если БазоваяПодсистемаСервер.ОН_ЭтоСсылка(ТипЗнч(Объект.ОбъектАвторизации)) Тогда
		Элементы.ОбъектАвторизации.Заголовок = Метаданные.НайтиПоТипу(ТипЗнч(Объект.ОбъектАвторизации)).ПредставлениеОбъекта;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОЗаписиСПустымСпискомРолей(Ответ, ПараметрыЗаписи) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи.Вставить("СПустымСпискомРолей");
		Записать(ПараметрыЗаписи);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОКопированииПрав(Ответ, ПараметрыЗаписи) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи.Вставить("КопироватьПраваПользователя");
	Иначе
		ПараметрыЗаписи.Вставить("НеКопироватьПраваПользователя");
	КонецЕсли;
	Записать(ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	Закрыть();
КонецПроцедуры

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРолиПользователяИБ()
	СвойстваПользователяИБ = ПользователиСервер.П_СвойстваПользователяИБ(Объект.ИдентификаторПользователяИБ);
	Если СвойстваПользователяИБ = Неопределено Тогда
		СвойстваПользователяИБ = ПользователиСервер.П_НовоеОписаниеПользователяИБ();
	КонецЕсли;
	ОбработатьИнтерфейсРолей("ЗаполнитьРоли", СвойстваПользователяИБ.Роли);
КонецПроцедуры

&НаСервере
Функция НачальноеОписаниеПользователяИБ()
	Если НачальноеОписаниеПользователяИБ <> Неопределено Тогда
		НачальноеОписаниеПользователяИБ.Роли = Новый Массив;

		Возврат НачальноеОписаниеПользователяИБ;
	КонецЕсли;

	ОписаниеПользователяИБ = ПользователиСервер.П_НовоеОписаниеПользователяИБ();
	ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
	ОписаниеПользователяИБ.Роли = Новый Массив;

	Возврат ОписаниеПользователяИБ;
КонецФункции

&НаСервере
Процедура ПрочитатьПользователяИБ(ПриКопированииЭлемента = Ложь)
	УстановитьПривилегированныйРежим(Истина);

	ОписаниеПользователяИБ							= НачальноеОписаниеПользователяИБ();
	ПользовательИБСуществует						= Ложь;
	ПользовательИБОсновной							= Ложь;
	ВходВПрограммуРазрешен							= Ложь;
	ВходВПрограммуРазрешенЗначениеПрямогоИзменения	= Ложь;

	Если ПриКопированииЭлемента Тогда
		ПрочитанныеСвойства = ПользователиСервер.П_СвойстваПользователяИБ(Параметры.ЗначениеКопирования.ИдентификаторПользователяИБ);
		Если ПрочитанныеСвойства <> Неопределено Тогда

			// Сопоставление пользователя ИБ с пользователем в справочнике.
			Если ПользователиСервер.П_ВходВПрограммуРазрешен(ПрочитанныеСвойства) Тогда
				ВходВПрограммуРазрешен								= Истина;
				ВходВПрограммуРазрешенЗначениеПрямогоИзменения		= Истина;
				ОписаниеПользователяИБ.АутентификацияСтандартная	= Истина;
			КонецЕсли;

			// Копирование свойств и ролей пользователяИБ.
			ЗаполнитьЗначенияСвойств(
				ОписаниеПользователяИБ,
				ПрочитанныеСвойства,
				"ЗапрещеноИзменятьПароль,
				|ОсновнойИнтерфейс,
				|РежимЗапуска" + ?(Не Элементы.ПользовательИБЯзык.Видимость, "", ",
				|Язык") + ?(ПользователиСерверПовтИсп.сП_Настройки().РедактированиеРолей <> Истина, "", ",
				|Роли") + ПользователиСервер.сП_ПоляВосстановленияПаролей());
		КонецЕсли;
		Объект.ИдентификаторПользователяИБ = Неопределено;
		УстановитьНаличиеПароля(ЭтотОбъект, Ложь, ПользователиСервер.сП_АвторизованныйПользователь());
	Иначе
		ПрочитанныеСвойства = ПользователиСервер.П_СвойстваПользователяИБ(Объект.ИдентификаторПользователяИБ);
		Если ПрочитанныеСвойства <> Неопределено Тогда
			ПользовательИБСуществует = Истина;
			ПользовательИБОсновной = Истина;
		ИначеЕсли Параметры.Свойство("ИдентификаторПользователяИБ") И ЗначениеЗаполнено(Параметры.ИдентификаторПользователяИБ) Тогда
			Если Объект.ИдентификаторПользователяИБ <> Параметры.ИдентификаторПользователяИБ Тогда
				Объект.ИдентификаторПользователяИБ	= Параметры.ИдентификаторПользователяИБ;
				Модифицированность					= Истина;
			КонецЕсли;
			ПрочитанныеСвойства = ПользователиСервер.П_СвойстваПользователяИБ(Объект.ИдентификаторПользователяИБ);
			Если ПрочитанныеСвойства <> Неопределено Тогда
				ПользовательИБСуществует = Истина;
				Если Объект.Наименование <> ПрочитанныеСвойства.ПолноеИмя Тогда
					ПрочитанныеСвойства.ПолноеИмя	= Объект.Наименование;
					Модифицированность				= Истина;
				КонецЕсли;
				Если ПрочитанныеСвойства.АутентификацияОС Тогда
					ПрочитанныеСвойства.АутентификацияОС	= Ложь;
					Модифицированность						= Истина;
				КонецЕсли;
				Если ЗначениеЗаполнено(ПрочитанныеСвойства.ПользовательОС) Тогда
					ПрочитанныеСвойства.ПользовательОС	= "";
					Модифицированность					= Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ПользовательИБСуществует Тогда
			Если Не Элементы.ПользовательИБЯзык.Видимость Тогда
				ПрочитанныеСвойства.Язык = ОписаниеПользователяИБ.Язык;
			КонецЕсли;

			Если ПользователиСервер.П_ВходВПрограммуРазрешен(ПрочитанныеСвойства) Тогда
				ВходВПрограммуРазрешен							= Истина;
				ВходВПрограммуРазрешенЗначениеПрямогоИзменения	= Истина;
			КонецЕсли;

			ЗаполнитьЗначенияСвойств(
				ОписаниеПользователяИБ,
				ПрочитанныеСвойства,
				"Имя,
				|ПолноеИмя,
				|АутентификацияOpenID,
				|АутентификацияСтандартная,
				|ПоказыватьВСпискеВыбора,
				|ЗапрещеноИзменятьПароль,
				|АутентификацияОС,
				|ПользовательОС,
				|ОсновнойИнтерфейс,
				|РежимЗапуска" + ?(Не Элементы.ПользовательИБЯзык.Видимость, "", ",
				|Язык") + ?(ПользователиСерверПовтИсп.сП_Настройки().РедактированиеРолей <> Истина, "", ",
				|Роли"));
		КонецЕсли;

		Если ПрочитанныеСвойства = Неопределено Тогда
			УстановитьНаличиеПароля(ЭтотОбъект, Ложь, ПользователиСервер.сП_АвторизованныйПользователь());
		Иначе
			УстановитьНаличиеПароля(ЭтотОбъект, ПрочитанныеСвойства.ПарольУстановлен, ПользователиСервер.сП_АвторизованныйПользователь());
		КонецЕсли;
	КонецЕсли;

	ПользователиСервер.П_СкопироватьСвойстваПользователяИБ(ЭтотОбъект, ОписаниеПользователяИБ, ,"УникальныйИдентификатор,
		|Роли",
		"ПользовательИБ");

	Если ПользовательИБОсновной И Не ВходВПрограммуРазрешен Тогда
		ХранимыеСвойства						= ПользователиСервер.сП_ХранимыеСвойстваПользователяИБ(Объект.Ссылка);
		ПользовательИБАутентификацияOpenID		= ХранимыеСвойства.АутентификацияOpenID;
		ПользовательИБАутентификацияСтандартная	= ХранимыеСвойства.АутентификацияСтандартная;
	КонецЕсли;

	Если ПользовательИБСуществует Тогда
		ПользовательИБАутентификацияСтандартнаяЗначениеПрямогоИзменения = ПользовательИБАутентификацияСтандартная;
	КонецЕсли;

	ОбработатьИнтерфейсРолей("ЗаполнитьРоли", ОписаниеПользователяИБ.Роли);

	ПриЧтенииВходВПрограммуРазрешен = ВходВПрограммуРазрешен;
КонецПроцедуры

&НаСервере
Процедура ОпределитьНесоответствияПользователяСПользователемИБ(ПараметрыЗаписи = Неопределено)
	// Проверка соответствия свойства ПолноеИмя пользователяИБ и
	// реквизита Наименование внешнего пользователя. А также значений свойств по умолчанию.

	ПоказатьНесоответствие				= Истина;
	ПоказатьКомандыУстраненияРазличий	= Ложь;

	Если НЕ ПользовательИБСуществует Тогда
		ПоказатьНесоответствие = Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПользовательИБПолноеИмя	= Объект.Наименование;
		ПоказатьНесоответствие	= Ложь;
	ИначеЕсли УровеньДоступа.УправлениеСписком Тогда
		УточнениеСвойств						= Новый Массив;
		ЕстьРазличияУстранимыеБезАдминистратора	= Ложь;

		Если ПользовательИБАутентификацияОС <> Ложь Тогда
			УточнениеСвойств.Добавить("Аутентификация ОС (включена)");
		КонецЕсли;

		Если ПриЧтенииВходВПрограммуРазрешен И Объект.Недействителен Тогда
			ВходВПрограммуРазрешен = Ложь;
			УточнениеСвойств.Вставить(0, "Вход в программу разрешен");
		КонецЕсли;

		Если ЗначениеЗаполнено(УточнениеСвойств) Тогда
			ПоказатьКомандыУстраненияРазличий = УровеньДоступа.НастройкиДляВхода И ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
		КонецЕсли;

		Если ПользовательИБПолноеИмя <> Объект.Наименование Тогда
			ЕстьРазличияУстранимыеБезАдминистратора = Истина;

			УточнениеСвойств.Вставить(0, СтрШаблон("Полное имя ""%1""", ПользовательИБПолноеИмя));
		КонецЕсли;

		Если ПользовательИБПользовательОС <> "" Тогда
			УточнениеСвойств.Добавить("Пользователь ОС (указан)");
		КонецЕсли;

		Если ПользовательИБПоказыватьВСпискеВыбора Тогда
			ЕстьРазличияУстранимыеБезАдминистратора = Истина;
			УточнениеСвойств.Добавить("Показывать в списке выбора (включено)");
		КонецЕсли;

		Если ПользовательИБРежимЗапуска <> "Авто" Тогда
			ЕстьРазличияУстранимыеБезАдминистратора = Истина;
			УточнениеСвойств.Добавить("Режим запуска (не Авто)");
		КонецЕсли;

		Если УточнениеСвойств.Количество() > 0 Тогда
			СтрокаУточненияСвойств	= "";
			ТекущаяСтрока			= "";
			Для каждого УточнениеСвойства Из УточнениеСвойств Цикл
				Если СтрДлина(ТекущаяСтрока + УточнениеСвойства) > 90 Тогда
					СтрокаУточненияСвойств	= СтрокаУточненияСвойств + СокрП(ТекущаяСтрока) + ", " + Символы.ПС;
					ТекущаяСтрока			= "";
				КонецЕсли;
				ТекущаяСтрока = ТекущаяСтрока + ?(ЗначениеЗаполнено(ТекущаяСтрока), ", ", "") + УточнениеСвойства;
			КонецЦикла;
			Если ЗначениеЗаполнено(ТекущаяСтрока) Тогда
				СтрокаУточненияСвойств = СтрокаУточненияСвойств + ТекущаяСтрока;
			КонецЕсли;
			Если ПоказатьКомандыУстраненияРазличий
			 Или ЕстьРазличияУстранимыеБезАдминистратора
			   И ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда

				Рекомендация = Символы.ПС + "Нажмите ""Записать"", чтобы устранить различия и не выводить это предупреждение.";
			ИначеЕсли Не ПользователиСервер.П_ЭтоПолноправныйПользователь() Тогда
				Рекомендация = Символы.ПС + "Обратитесь к администратору, чтобы устранить различия.";
			Иначе
				Рекомендация = "";
			КонецЕсли;
			Элементы.СвойстваПояснениеНесоответствия.Заголовок = СтрШаблон("Следующие свойства пользователя информационной базы отличаются от указанных в этой форме:
					           |%1.",
					СтрокаУточненияСвойств) + Рекомендация;
		Иначе
			ПоказатьНесоответствие = Ложь;
		КонецЕсли;
	Иначе
		ПоказатьНесоответствие = Ложь;
	КонецЕсли;

	Элементы.СвойстваОбработкаНесоответствия.Видимость				= ПоказатьНесоответствие;
	Элементы.СвойстваПояснениеНесоответствия.ВертикальноеПоложение	= ?(ЗначениеЗаполнено(Рекомендация), ВертикальноеПоложениеЭлемента.Верх, ВертикальноеПоложениеЭлемента.Центр);

	// Определение сопоставления несуществующего пользователя ИБ с пользователем в справочнике.
	ЕстьНовоеСопоставлениеСНесуществующимПользователемИБ = НЕ ПользовательИБСуществует И ЗначениеЗаполнено(Объект.ИдентификаторПользователяИБ);

	Если ПараметрыЗаписи <> Неопределено
	   И ЕстьСопоставлениеСНесуществующимПользователемИБ
	   И НЕ ЕстьНовоеСопоставлениеСНесуществующимПользователемИБ Тогда

		ПараметрыЗаписи.Вставить("ОчищеноСопоставлениеСНесуществующимПользователемИБ", Объект.Ссылка);
	КонецЕсли;
	ЕстьСопоставлениеСНесуществующимПользователемИБ = ЕстьНовоеСопоставлениеСНесуществующимПользователемИБ;

	Если УровеньДоступа.УправлениеСписком Тогда
		Элементы.СопоставлениеОбработкаНесоответствия.Видимость = ЕстьСопоставлениеСНесуществующимПользователемИБ;
	Иначе
		// Сопоставление не может быть изменено.
		Элементы.СопоставлениеОбработкаНесоответствия.Видимость = Ложь;
	КонецЕсли;

	Если ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
		Рекомендация = Символы.ПС + "Нажмите ""Записать"", чтобы устранить проблему и не выводить это предупреждение.";

	ИначеЕсли Не ПользователиСервер.П_ЭтоПолноправныйПользователь() Тогда
		Рекомендация = Символы.ПС + "Обратитесь к администратору, чтобы устранить различия.";
	Иначе
		Рекомендация = "";
	КонецЕсли;

	Элементы.СопоставлениеПояснениеНесоответствия.Заголовок = "Несуществующий пользователь информационной базы." + Рекомендация;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьСвойств(Форма)
	Элементы       = Форма.Элементы;
	Объект         = Форма.Объект;
	ДействияВФорме = Форма.ДействияВФорме;
	УровеньДоступа = Форма.УровеньДоступа;

	// Настройка возможности изменения.
	Элементы.ОбъектАвторизации.ТолькоПросмотр = ДействияВФорме.СвойстваЭлемента <> "Редактирование"
		Или Форма.ОбъектАвторизацииЗаданПриОткрытии
		Или ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.ОбъектАвторизации);

	Элементы.Недействителен.ТолькоПросмотр			= Не (ДействияВФорме.СвойстваЭлемента = "Редактирование" И УровеньДоступа.УправлениеСписком);
	Элементы.ОсновныеСвойства.ТолькоПросмотр		= Не (ДействияВФорме.СвойстваПользователяИБ = "Редактирование" И (УровеньДоступа.УправлениеСписком Или УровеньДоступа.ИзменениеТекущего));
	Элементы.ВходВПрограммуРазрешен.ТолькоПросмотр	= Не (Элементы.ОсновныеСвойства.ТолькоПросмотр = Ложь И (УровеньДоступа.ИзменениеРазрешенияНаВход Или УровеньДоступа.ОтключениеРазрешенияНаВход И Форма.ПриЧтенииВходВПрограммуРазрешен));

	Элементы.ПользовательИБИмя1.ТолькоПросмотр						= Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБИмя2.ТолькоПросмотр						= Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБАутентификацияСтандартная.ТолькоПросмотр	= Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБАутентификацияOpenID.ТолькоПросмотр      = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.УстановитьРолиНепосредственно.ТолькоПросмотр           = Не УровеньДоступа.НастройкиДляВхода;

	Элементы.ПотребоватьСменуПароляПриВходе.ТолькоПросмотр			= Не УровеньДоступа.УправлениеСписком;
	Элементы.ПользовательИБЗапрещеноИзменятьПароль.ТолькоПросмотр	= Не УровеньДоступа.УправлениеСписком;

	Элементы.СменитьПароль.Доступность	= (УровеньДоступа.НастройкиДляВхода Или УровеньДоступа.ИзменениеТекущего И Не Форма.ПользовательИБЗапрещеноИзменятьПароль);
	Элементы.Комментарий.ТолькоПросмотр	= Не (ДействияВФорме.СвойстваЭлемента = "Редактирование" И УровеньДоступа.УправлениеСписком);

	ОбновитьИмяДляВхода(Форма);

	// Настройка доступности связанных элементов.
	Элементы.ВходВПрограммуРазрешен.Доступность					= Не Объект.Недействителен;
	Элементы.ОсновныеСвойства.Доступность						= Не Объект.Недействителен;
	Элементы.РедактированиеИлиПросмотрРолей.Доступность			= Не Объект.Недействителен;
	Элементы.ГруппаИзменитьОграничение.Доступность				= Не Объект.Недействителен И Не Элементы.Недействителен.ТолькоПросмотр;

	Элементы.ПараметрыАутентификации1СПредприятия.Доступность	= Форма.ПользовательИБАутентификацияСтандартная;

	ПользователиКлиентСервер.сП_ОбновитьОграничениеСрокаДействия(Форма);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОграничениеНаВходВПрограммуЗавершение(Результат, Контекст) Экспорт
	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяЗаписьПользователяИБ(Форма, УчитыватьСтандартноеИмя = Истина)
	Если Форма.ДействияВФорме.СвойстваПользователяИБ <> "Редактирование" Тогда
		Возврат Ложь;
	КонецЕсли;

	Шаблон = Форма.НачальноеОписаниеПользователяИБ;

	ТекущееИмя = "";
	Если Не УчитыватьСтандартноеИмя Тогда
		КраткоеИмя = ПользователиКлиентСервер.сП_ПолучитьКраткоеИмяПользователяИБ(Форма.ТекущееПредставлениеОбъектаАвторизации);

		Если Форма.ПользовательИБИмя = КраткоеИмя Тогда
			ТекущееИмя = КраткоеИмя;
		КонецЕсли;
	КонецЕсли;

	Если Форма.ПользовательИБСуществует
	 ИЛИ Форма.ВходВПрограммуРазрешен
	 ИЛИ Форма.ПользовательИБИмя                       <> ТекущееИмя
	 ИЛИ Форма.ПользовательИБАутентификацияСтандартная <> Шаблон.АутентификацияСтандартная
	 ИЛИ Форма.ПользовательИБЗапрещеноИзменятьПароль   <> Шаблон.ЗапрещеноИзменятьПароль
	 ИЛИ Форма.ПользовательИБПароль                    <> Неопределено
	 ИЛИ Форма.ПользовательИБАутентификацияOpenID      <> Шаблон.АутентификацияOpenID
	 ИЛИ Форма.ПользовательИБЯзык                      <> Шаблон.Язык
	 ИЛИ Форма.ПользовательИБРоли.Количество()         <> 0 Тогда

		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

&НаСервере
Процедура ОбработатьИнтерфейсРолей(Действие, ОсновнойПараметр = Неопределено)
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ОсновнойПараметр", ОсновнойПараметр);
	ПараметрыДействия.Вставить("Форма",            ЭтотОбъект);
	ПараметрыДействия.Вставить("КоллекцияРолей",   ПользовательИБРоли);
	ПараметрыДействия.Вставить("НазначениеРолей",  "ДляВнешнихПользователей");

	ПользователиСервер.сП_ОбработатьИнтерфейсРолей(Действие, ПараметрыДействия);
КонецПроцедуры
