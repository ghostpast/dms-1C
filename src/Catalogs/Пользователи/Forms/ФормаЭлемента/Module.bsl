///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Перем ПараметрыЗаписиПриПроверкеПервогоАдминистратора;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьУсловноеОформление();

	//Зарезервировано для новых подсистем

	Если БазоваяПодсистемаСервер.СП_ЭтоУчебнаяПлатформа() Тогда
		Элементы.СвойстваАутентификацииОС.ТолькоПросмотр = Истина;
	КонецЕсли;

	// Заполнение вспомогательных данных.

	// Заполнение списка выбора режимов запуска.
	Для каждого РежимЗапуска Из РежимЗапускаКлиентскогоПриложения Цикл
		ПолноеИмяЗначения	= ПолучитьПолноеИмяПредопределенногоЗначения(РежимЗапуска);
		ИмяЗначения			= Сред(ПолноеИмяЗначения, СтрНайти(ПолноеИмяЗначения, ".") + 1);
		Элементы.ПользовательИБРежимЗапуска.СписокВыбора.Добавить(ИмяЗначения, Строка(РежимЗапуска));
	КонецЦикла;
	Элементы.ПользовательИБРежимЗапуска.СписокВыбора.СортироватьПоПредставлению();

	// Заполнение списка выбора языка.
	Если Метаданные.Языки.Количество() < 2 Тогда
		Элементы.ПользовательИБЯзык.Видимость = Ложь;
	Иначе
		Для каждого МетаданныеЯзыка Из Метаданные.Языки Цикл
			Элементы.ПользовательИБЯзык.СписокВыбора.Добавить(МетаданныеЯзыка.Имя, МетаданныеЯзыка.Синоним);
		КонецЦикла;
	КонецЕсли;

	УровеньДоступа = ПользователиСервер.сП_УровеньДоступаКСвойствамПользователя(Объект);

	// Подготовка к интерактивным действиям с учетом сценариев открытия формы.
	УстановитьПривилегированныйРежим(Истина);

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Создание нового элемента.
		Если Параметры.ГруппаНовогоПользователя <> Справочники.ГруппыПользователей.ВсеПользователи Тогда
			ГруппаНовогоПользователя = Параметры.ГруппаНовогоПользователя;
		КонецЕсли;

		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			// Копирование элемента.
			ЗначениеКопирования = Параметры.ЗначениеКопирования;
			Объект.Наименование = "";

			Если Не ПользователиСервер.сП_УровеньДоступаПользователяВыше(ЗначениеКопирования, УровеньДоступа) Тогда
				ПрочитатьПользователяИБ(ЗначениеЗаполнено(ЗначениеКопирования.ИдентификаторПользователяИБ));
			Иначе
				ПрочитатьПользователяИБ();
			КонецЕсли;

			Если Не УровеньДоступа.ИзменениеРазрешенияНаВход Тогда
				ВходВПрограммуРазрешен = Ложь;
				ВходВПрограммуРазрешенЗначениеПрямогоИзменения = Ложь;
			КонецЕсли;

			ПользовательИБАдресЭлектроннойПочты = "";
		Иначе
			// Добавление элемента.

			// Чтение начальных значений свойств пользователя ИБ.
			ПрочитатьПользователяИБ();

			Если Не ЗначениеЗаполнено(Параметры.ИдентификаторПользователяИБ) Тогда
				ПользовательИБАутентификацияСтандартная = Истина;

				Если УровеньДоступа.ИзменениеРазрешенияНаВход Тогда
					ВходВПрограммуРазрешен							= Истина;
					ВходВПрограммуРазрешенЗначениеПрямогоИзменения	= Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Открытие существующего элемента.
		ПрочитатьПользователяИБ();
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

	ОбработатьИнтерфейсРолей("НастроитьИнтерфейсРолейПриСозданииФормы", ПользовательИБСуществует);
	НачальноеОписаниеПользователяИБ = НачальноеОписаниеПользователяИБ();

	ПарольДляПодтвержденияИзмененияПочты = Неопределено;

	ДополнительныеПараметры								= КонтактнаяИнформацияСервер.УКИ_ПараметрыКонтактнойИнформации();
	ДополнительныеПараметры.ИмяЭлементаДляРазмещения	= "КонтактнаяИнформация";

	КонтактнаяИнформацияСервер.УКИ_ПриСозданииНаСервере(ЭтотОбъект, Объект, ДополнительныеПараметры);

	Если ПользователиСервер.сП_ДоступнаНастройкаВосстановленияПароля(УровеньДоступа) Тогда
		Если Не ПользователиСервер.сП_ИнтерактивноЗапрашиватьВводПароля(УровеньДоступа, Объект) Тогда
			ПарольДляПодтвержденияИзмененияПочты = "";
		КонецЕсли;

		ИмяРеквизитаСПочтойДляВосстановленияПароля = КонтактнаяИнформацияСервер.УКИ_ОпределитьЭлементСПочтойДляВосстановленияПароля(ЭтотОбъект, ПользовательИБАдресЭлектроннойПочты, ПользователиСервер.сП_ДоступноРедактированиеПочтыДляВосстановленияПароля(УровеньДоступа, Объект));
	КонецЕсли;

	НастроитьФорму(Объект, Истина);

	Если БазоваяПодсистемаСервер.ОН_ЭтоАвтономноеРабочееМесто() Тогда
		Элементы.ГруппаШапка.ТолькоПросмотр						= Истина;
		Элементы.КонтактнаяИнформация.ТолькоПросмотр			= Истина;
		Элементы.СтраницаДополнительныеРеквизиты.ТолькоПросмотр	= Истина;
		Элементы.СтраницаКомментарий.ТолькоПросмотр				= Истина;
	КонецЕсли;

	// Зарезервировано для новых подсистем

	ОбновитьВидимостьРеквизитаПоказыватьВСпискеВыбора();

	Если Не ПользователиСерверПовтИсп.сП_Настройки().ОбщиеНастройкиВхода Тогда
		Элементы.ГруппаИзменитьОграничение.Видимость = Ложь;
	КонецЕсли;

	Элементы.ПотребоватьСменуПароляПриВходе.РасширеннаяПодсказка.Заголовок = ПользователиСервер.сП_ПодсказкаПотребоватьСменуПароляПриВходе(Ложь);

	Если БазоваяПодсистемаСервер.ОН_ЭтоМобильныйКлиент() Тогда
		Элементы.ФормаЗаписатьИЗакрыть.Отображение = ОтображениеКнопки.Картинка;
	КонецЕсли;

	// Зарезервировано для новых подсистем

	Если НЕ ЗначениеЗаполнено(АдресФотографии) Тогда
		АдресФотографии = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ПользовательБезФотографии, УникальныйИдентификатор);
	КонецЕсли;

	Если Не ПользователиСерверПовтИсп.сП_ВерсияПредприятияПоддерживаетВосстановлениеПаролей() Тогда
		Элементы.ПользовательИБЗапрещеноВосстанавливатьПароль.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	#Если ВебКлиент Тогда
	Элементы.ПользовательИБПользовательОС.КнопкаВыбора = Ложь;
	#КонецЕсли

	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// Зарезервировано для новых подсистем

	Если ВРег(ИмяСобытия) = ВРег("Запись_НаборКонстант") И ВРег(Источник) = ВРег("ИспользоватьВнешнихПользователей") Тогда
		ПодключитьОбработчикОжидания("ПриИзмененииИспользованияВнешнихПользователей", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// Зарезервировано для новых подсистем

	КонтактнаяИнформацияСервер.УКИ_ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект, "КонтактнаяИнформация");

	Если ТипЗнч(УровеньДоступа) = Тип("Структура") И ПользователиСервер.сП_ДоступнаНастройкаВосстановленияПароля(УровеньДоступа) Тогда
		ИмяРеквизитаСПочтойДляВосстановленияПароля = КонтактнаяИнформацияСервер.УКИ_ОпределитьЭлементСПочтойДляВосстановленияПароля(ЭтотОбъект, ПользовательИБАдресЭлектроннойПочты, ПользователиСервер.сП_ДоступноРедактированиеПочтыДляВосстановленияПароля(УровеньДоступа, ТекущийОбъект));
	КонецЕсли;

	НастроитьФорму(ТекущийОбъект);

	// Зарезервировано для новых подсистем

	Фотография = ТекущийОбъект.Фотография.Получить();
	Если Фотография <> Неопределено Тогда
		АдресФотографии		= ПоместитьВоВременноеХранилище(Фотография, УникальныйИдентификатор);
		ФотографияЗадана	= Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	// Зарезервировано для новых подсистем

	ОчиститьСообщения();
	ЗаголовокВопросов = "Запись пользователя информационной базы";

	// Зарезервировано для новых подсистем

	Если Не ПараметрыЗаписи.Свойство("СПустымСпискомРолей")
	   И ВходВПрограммуРазрешен
	   И ДействияВФорме.Роли = "Редактирование"
	   И ПользовательИБРоли.Количество() = 0 Тогда

		Отказ = Истина;
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПослеОтветаНаВопросОЗаписиСПустымСпискомРолей", ЭтотОбъект, ПараметрыЗаписи),
			"Пользователю информационной базы не установлено ни одной роли. Продолжить?",
			РежимДиалогаВопрос.ДаНет,
			,
			,
			ЗаголовокВопросов);
		Возврат;
	КонецЕсли;

	Если Не ПараметрыЗаписи.Свойство("ССозданиемПервогоАдминистратора") И ЗначениеЗаполнено(ПользовательИБИмя) И СписокПользователейИБПустой() Тогда
		Отказ											= Истина;
		ПараметрыЗаписиПриПроверкеПервогоАдминистратора	= ПараметрыЗаписи;
		ПодключитьОбработчикОжидания("ПроверитьПервогоАдминистратора", 0.1, Истина);

		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗначениеКопирования", ЗначениеКопирования);

	Если ТребуетсяЗаписьПользователяИБ(ЭтотОбъект) Тогда
		Если ПользователиСервер.сП_ДоступнаНастройкаВосстановленияПароля(УровеньДоступа) Тогда
			Если ПользовательИБЗапрещеноИзменятьПароль Тогда
				ПользовательИБЗапрещеноВосстанавливатьПароль = Истина;
			КонецЕсли;

			Если ПользователиСервер.сП_ДоступноРедактированиеПочтыДляВосстановленияПароля(УровеньДоступа, Объект) Тогда
				Если ЗначениеЗаполнено(ИмяРеквизитаСПочтойДляВосстановленияПароля) И ПользовательИБАдресЭлектроннойПочты <> ЭтотОбъект[ИмяРеквизитаСПочтойДляВосстановленияПароля] Тогда
					Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
						Подготовлен = БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(ТекущийОбъект.Ссылка, "Подготовлен");
					Иначе
						Подготовлен = УровеньДоступа.УправлениеСписком;
					КонецЕсли;

					ИзменятьПочтуБезПодтвержденияПаролем = ПользователиСервер.П_ЭтоПолноправныйПользователь() Или Подготовлен;

					Если Не ИзменятьПочтуБезПодтвержденияПаролем Тогда
						ПарольСовпадаетССохраненным = Ложь;

						Если ТипЗнч(ПарольДляПодтвержденияИзмененияПочты) = Тип("Строка") Тогда
							УстановитьПривилегированныйРежим(Истина);
							ПарольСовпадаетССохраненным = ПользователиСервер.сП_СтарыйПарольСовпадаетССохраненным(ПарольДляПодтвержденияИзмененияПочты, Объект.ИдентификаторПользователяИБ);
							УстановитьПривилегированныйРежим(Ложь);
						КонецЕсли;

						// проверка пароля
						Если Не ПарольСовпадаетССохраненным Тогда
							ПарольДляПодтвержденияИзмененияПочты = Неопределено;

							ВызватьИсключение "Пароль указан неверно";
						КонецЕсли;
					КонецЕсли;

					ПользовательИБАдресЭлектроннойПочты = ЭтотОбъект[ИмяРеквизитаСПочтойДляВосстановленияПароля];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ОписаниеПользователяИБ = ОписаниеПользователяИБ();

		Если ЗначениеЗаполнено(Объект.ИдентификаторПользователяИБ) Тогда
			ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", Объект.ИдентификаторПользователяИБ);
		КонецЕсли;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");

		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);

		Если ПараметрыЗаписи.Свойство("ССозданиемПервогоАдминистратора") Тогда
			ТекущийОбъект.ДополнительныеСвойства.Вставить("СозданиеАдминистратора", "Первый пользователь информационной базы назначается администратором.");
		КонецЕсли;
	КонецЕсли;

	Если ДействияВФорме.СвойстваЭлемента <> "Редактирование" Тогда
		ЗаполнитьЗначенияСвойств(ТекущийОбъект, БазоваяПодсистемаСервер.ОН_ЗначенияРеквизитовОбъекта(ТекущийОбъект.Ссылка, "Наименование, ПометкаУдаления"));
	КонецЕсли;

	ТекущийОбъект.ДополнительныеСвойства.Вставить("ГруппаНовогоПользователя", ГруппаНовогоПользователя);

	// Зарезервировано для новых подсистем

	Если НЕ Отказ И ДействияВФорме.КонтактнаяИнформация = "Редактирование" Тогда
		КонтактнаяИнформацияСервер.УКИ_ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;

	Если ФотографияЗадана И ЭтоАдресВременногоХранилища(АдресФотографии) Тогда
		ТекущийОбъект.Фотография = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресФотографии));
	Иначе
		ТекущийОбъект.Фотография = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	УстановитьПривилегированныйРежим(Истина);
	ПользователиСервер.сП_ЗаписатьСведенияОПользователе(ЭтотОбъект, ТекущийОбъект);
	УстановитьПривилегированныйРежим(Ложь);

	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если ТребуетсяЗаписьПользователяИБ(ЭтотОбъект) Тогда
		ПараметрыЗаписи.Вставить(ТекущийОбъект.ДополнительныеСвойства.ОписаниеПользователяИБ.РезультатДействия);
	КонецЕсли;

	Если ПараметрыЗаписи.Свойство("ССозданиемПервогоАдминистратора") Тогда
		ПользователиСервер.сП_СкопироватьНастройкиПользователя("", ПользовательИБИмя);
	КонецЕсли;

	НастроитьФорму(ТекущийОбъект, , ПараметрыЗаписи);

	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// Зарезервировано для новых подсистем

	Оповестить("Запись_Пользователи", Новый Структура, Объект.Ссылка);

	Если ПараметрыЗаписи.Свойство("ДобавленПользовательИБ") Тогда
		Оповестить("ДобавленПользовательИБ", ПараметрыЗаписи.ДобавленПользовательИБ, ЭтотОбъект);
	ИначеЕсли ПараметрыЗаписи.Свойство("ИзмененПользовательИБ") Тогда
		Оповестить("ИзмененПользовательИБ", ПараметрыЗаписи.ИзмененПользовательИБ, ЭтотОбъект);
	ИначеЕсли ПараметрыЗаписи.Свойство("УдаленПользовательИБ") Тогда
		Оповестить("УдаленПользовательИБ", ПараметрыЗаписи.УдаленПользовательИБ, ЭтотОбъект);
	ИначеЕсли ПараметрыЗаписи.Свойство("ОчищеноСопоставлениеСНесуществующимПользователемИБ") Тогда
		Оповестить("ОчищеноСопоставлениеСНесуществующимПользователемИБ", ПараметрыЗаписи.ОчищеноСопоставлениеСНесуществующимПользователемИБ, ЭтотОбъект);
	КонецЕсли;

	Если ЗначениеЗаполнено(ГруппаНовогоПользователя) Тогда
		ОповеститьОбИзменении(ГруппаНовогоПользователя);
		Оповестить("Запись_ГруппыПользователей", Новый Структура, ГруппаНовогоПользователя);
		ГруппаНовогоПользователя = Неопределено;
	КонецЕсли;

	// Зарезервировано для новых подсистем

	ПарольДляПодтвержденияИзмененияПочты = Неопределено;

	ПослеЗаписиЗавершение(Неопределено, ПараметрыЗаписи);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если ТребуетсяЗаписьПользователяИБ(ЭтотОбъект) Тогда
		ОписаниеПользователяИБ = ОписаниеПользователяИБ();
		ОписаниеПользователяИБ.Вставить("ИдентификаторПользователяИБ", Объект.ИдентификаторПользователяИБ);

		Если ПользователиСерверПовтИсп.сП_ВерсияПредприятияПоддерживаетВосстановлениеПаролей() И ЗначениеЗаполнено(ИмяРеквизитаСПочтойДляВосстановленияПароля) Тогда
			ОписаниеПользователяИБ.АдресЭлектроннойПочты = ЭтотОбъект[ИмяРеквизитаСПочтойДляВосстановленияПароля];
		КонецЕсли;

		ПользователиСервер.сП_ПроверитьОписаниеПользователяИБ(ОписаниеПользователяИБ, Отказ, Ложь);
	КонецЕсли;

	Если ВходВПрограммуРазрешен И ЗначениеЗаполнено(СрокДействия) И СрокДействия <= НачалоДня(ТекущаяДатаСеанса()) Тогда
		БазоваяПодсистемаСервер.ОН_СообщитьПользователю("Ограничение должно быть до завтра или более.",, "ВходВПрограммуРазрешен",, Отказ);
	КонецЕсли;

	// Проверка наличия ролей в метаданных.
	Если Не Элементы.Роли.ТолькоПросмотр Тогда
		Ошибки			= Неопределено;
		ЭлементыДерева	= Роли.ПолучитьЭлементы();
		Для Каждого Строка Из ЭлементыДерева Цикл
			Если Не Строка.Пометка Тогда
				Продолжить;
			КонецЕсли;
			Если Строка.ЭтоНесуществующаяРоль Тогда
				БазоваяПодсистемаКлиентСервер.ОН_ДобавитьОшибкуПользователю(Ошибки,
					"Роли[%1].РолиСиноним",
					СтрШаблон("Несуществующая роль ""%1"".", Строка.Синоним),
					"Роли",
					ЭлементыДерева.Индекс(Строка),
					СтрШаблон("Несуществующая роль ""%1"" в строке %2.", Строка.Синоним, "%1"));
			КонецЕсли;
			Если Строка.ЭтоНедоступнаяРоль Тогда
				БазоваяПодсистемаКлиентСервер.ОН_ДобавитьОшибкуПользователю(Ошибки,
					"Роли[%1].РолиСиноним",
					СтрШаблон("Роль ""%1"" недоступна для пользователей.", Строка.Синоним),
					"Роли",
					ЭлементыДерева.Индекс(Строка),
					СтрШаблон("Роль ""%1"" в строке %2 недоступна для пользователей.", Строка.Синоним, "%1"));
			КонецЕсли;
		КонецЦикла;
		БазоваяПодсистемаКлиентСервер.ОН_СообщитьОшибкиПользователю(Ошибки, Отказ);
	КонецЕсли;

	// Зарезервировано для новых подсистем

	КонтактнаяИнформацияСервер.УКИ_ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ОбработатьИнтерфейсРолей("НастроитьИнтерфейсРолейПриЗагрузкеНастроек", Настройки);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзПользователяИБ(Команда)
	Если УровеньДоступа.УправлениеСписком И ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
		Если ПриЧтенииВходВПрограммуРазрешен И Объект.Недействителен Тогда
			Объект.Недействителен = Ложь;
			НедействителенПриИзменении(Элементы.Недействителен);
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьПоляПоПользователюИБНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	ОбновитьИмяДляВхода(ЭтотОбъект, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НедействителенПриИзменении(Элемент)
	Если Объект.Недействителен Тогда
		ВходВПрограммуРазрешен = Ложь;
		Если Не ПользовательИБАутентификацияOpenID И Не ПользовательИБАутентификацияОС И Не ПользовательИБАутентификацияСтандартнаяЗначениеПрямогоИзменения И ПользовательИБАутентификацияСтандартная Тогда
			ПользовательИБАутентификацияСтандартная = Ложь;
		КонецЕсли;
	ИначеЕсли ВходВПрограммуРазрешенЗначениеПрямогоИзменения Тогда
		Если Не ПользовательИБАутентификацияСтандартная И Не ПользовательИБАутентификацияOpenID И Не ПользовательИБАутентификацияОС Тогда
			ПользовательИБАутентификацияСтандартная = Истина;
		КонецЕсли;
		ВходВПрограммуРазрешен = Истина;
	КонецЕсли;

	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВходВПрограммуРазрешенПриИзменении(Элемент)
	Если Объект.ПометкаУдаления И ВходВПрограммуРазрешен Тогда
		ВходВПрограммуРазрешен = Ложь;
		ПоказатьПредупреждение(,
			"Чтобы разрешить вход в программу, снимите
			           |пометку на удаление с этого пользователя.");
		Возврат;
	КонецЕсли;

	Если Не ВходВПрограммуРазрешен И Не ПользовательИБАутентификацияOpenID И Не ПользовательИБАутентификацияОС И Не ПользовательИБАутентификацияСтандартнаяЗначениеПрямогоИзменения И ПользовательИБАутентификацияСтандартная Тогда
		ПользовательИБАутентификацияСтандартная = Ложь;
	КонецЕсли;

	ОбновитьИмяДляВхода(ЭтотОбъект);

	Если ВходВПрограммуРазрешен И НЕ ПользовательИБАутентификацияOpenID И НЕ ПользовательИБАутентификацияСтандартная И НЕ ПользовательИБАутентификацияОС Тогда
		ПользовательИБАутентификацияСтандартная = Истина;
	КонецЕсли;

	УстановитьДоступностьСвойств(ЭтотОбъект);

	Если Не УровеньДоступа.ИзменениеРазрешенияНаВход И Не ВходВПрограммуРазрешен Тогда
		ПоказатьПредупреждение(,"После записи вход в программу сможет разрешить только администратор.");
	КонецЕсли;

	ВходВПрограммуРазрешенЗначениеПрямогоИзменения = ВходВПрограммуРазрешен;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОграничениеНаВходВПрограмму(Команда)
	ОткрытьФорму("Справочник.Пользователи.Форма.ОграничениеНаВходВПрограмму",, ЭтотОбъект,,,, Новый ОписаниеОповещения("ИзменитьОграничениеНаВходВПрограммуЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБИмяПриИзменении(Элемент)
	ПользовательИБИмя							= СокрЛП(ПользовательИБИмя);
	ПользовательИБИмяЗначениеПрямогоИзменения	= ПользовательИБИмя;

	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБАутентификацияСтандартнаяПриИзменении(Элемент)
	АутентификацияПриИзменении();
	ПользовательИБАутентификацияСтандартнаяЗначениеПрямогоИзменения = ПользовательИБАутентификацияСтандартная;
КонецПроцедуры

&НаКлиенте
Процедура ПотребоватьСменуПароляПриВходеПриИзменении(Элемент)
	Если ПотребоватьСменуПароляПриВходе Тогда
		ПользовательИБЗапрещеноИзменятьПароль = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБПоказыватьВСпискеВыбораПриИзменении(Элемент)
	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБЗапрещеноИзменятьПарольПриИзменении(Элемент)
	Если ПользовательИБЗапрещеноИзменятьПароль Тогда
		ПотребоватьСменуПароляПриВходе					= Ложь;
		ПользовательИБЗапрещеноВосстанавливатьПароль	= Истина;
	КонецЕсли;

	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБАутентификацияOpenIDПриИзменении(Элемент)
	АутентификацияПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБАутентификацияОСПриИзменении(Элемент)
	АутентификацияПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБПользовательОСПриИзменении(Элемент)
	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБПользовательОСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	#Если НЕ ВебКлиент И НЕ МобильныйКлиент Тогда
		ОткрытьФорму("Справочник.Пользователи.Форма.ВыборПользователяОперационнойСистемы", , Элемент);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБЯзыкПриИзменении(Элемент)
	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБРежимЗапускаПриИзменении(Элемент)
	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБРежимЗапускаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаКлиенте
Процедура ПотребоватьСменуПароляПриВходеРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ОткрытьФорму("ОбщаяФорма.НастройкиВходаПользователей", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ФотографияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка					= Ложь;
	ОповещениеОЗавершение					= Новый ОписаниеОповещения("ФотографияНажатиеЗавершение", ЭтотОбъект);
	ПараметрыЗагрузки						= БазоваяПодсистемаКлиент.ФС_ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.ИдентификаторФормы	= УникальныйИдентификатор;
	БазоваяПодсистемаКлиент.ФС_ЗагрузитьФайл(ОповещениеОЗавершение,ПараметрыЗагрузки);
КонецПроцедуры

&НаКлиенте
Процедура ФотографияНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат	= Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоАдресВременногоХранилища(АдресФотографии) Тогда
		УдалитьИзВременногоХранилища(АдресФотографии);
	КонецЕсли;

	АдресФотографии		= Результат.Хранение;
	Модифицированность	= Истина;
	ФотографияЗадана	= Истина;
КонецПроцедуры

&НаКлиенте
Процедура РолиПометкаПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Роли.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если СтрокаТаблицы.Пометка И СтрокаТаблицы.Имя = "ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок" Тогда
		Оповещение		= Новый ОписаниеОповещения("РолиПометкаПриИзмененииПослеПодтверждения", ЭтотОбъект);
		ПараметрыФормы	= Новый Структура("Ключ", "ПередВыборомРоли");
		ОткрытьФорму("ОбщаяФорма.ПредупреждениеБезопасности", ПараметрыФормы, , , , , Оповещение);
	Иначе
		ОбработатьИнтерфейсРолей("ОбновитьСоставРолей");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РолиПометкаПриИзмененииПослеПодтверждения(Ответ, ПараметрыВыполнения) Экспорт
	СтрокаТаблицы = Элементы.Роли.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Ответ = "Продолжить" Тогда
		ОбработатьИнтерфейсРолей("ОбновитьСоставРолей");
	Иначе
		СтрокаТаблицы.Пометка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Записать(Новый Структура("ЗаписатьИЗакрыть"));
КонецПроцедуры

&НаКлиенте
Процедура СменитьПароль(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВернутьПарольБезУстановки",	Истина);
	ДополнительныеПараметры.Вставить("СтарыйПароль",				ПользовательИБСтарыйПароль);

	ПользователиКлиент.сП_ОткрытьФормуСменыПароля(Объект.Ссылка, Новый ОписаниеОповещения("СменитьПарольПослеПолученияПароля", ЭтотОбъект), ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФотографию(Команда)
	АдресФотографии		= ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ПользовательБезФотографии, УникальныйИдентификатор);
	ФотографияЗадана	= Ложь;
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьТолькоВыбранныеРоли(Команда)
	ОбработатьИнтерфейсРолей("ТолькоВыбранныеРоли");
	ПользователиКлиент.сП_РазвернутьПодсистемыРолей(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаРолейПоПодсистемам(Команда)
	ОбработатьИнтерфейсРолей("ГруппировкаПоПодсистемам");
	ПользователиКлиент.сП_РазвернутьПодсистемыРолей(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРоли(Команда)
	ОбработатьИнтерфейсРолей("ОбновитьСоставРолей", "ВключитьВсе");

	ПользователиКлиент.сП_РазвернутьПодсистемыРолей(ЭтотОбъект, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьРоли(Команда)
	ОбработатьИнтерфейсРолей("ОбновитьСоставРолей", "ИсключитьВсе");
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	УсловноеОформление.Элементы.Очистить();

	Элемент						= УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента				= Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле			= Новый ПолеКомпоновкиДанных(Элементы.РолиПометка.Имя);

	ГруппаОтбора1				= Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента					= ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Роли.Имя");
	ОтборЭлемента.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение	= Метаданные.Роли.ПолныеПрава.Имя;

	ОтборЭлемента					= ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ЗапретИзмененияАдминистративногоДоступа");
	ОтборЭлемента.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение	= Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

	Элемент						= УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента				= Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле			= Новый ПолеКомпоновкиДанных(Элементы.РолиПометка.Имя);

	ПолеЭлемента				= Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле			= Новый ПолеКомпоновкиДанных(Элементы.РолиСиноним.Имя);

	ГруппаОтбора1				= Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента					= ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Роли.Имя");
	ОтборЭлемента.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение	= Метаданные.Роли.ПолныеПрава.Имя;

	ОтборЭлемента					= ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ЗапретИзмененияАдминистративногоДоступа");
	ОтборЭлемента.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение	= Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииИспользованияВнешнихПользователей()
	ОбновитьВидимостьРеквизитаПоказыватьВСпискеВыбора();
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьРеквизитаПоказыватьВСпискеВыбора()
	Элементы.ПользовательИБПоказыватьВСпискеВыбора.Видимость = Не ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей")
КонецПроцедуры

&НаСервере
Процедура НастроитьФорму(ТекущийОбъект, ПриСозданииНаСервере = Ложь, ПараметрыЗаписи = Неопределено)
	Если НачальноеОписаниеПользователяИБ = Неопределено Тогда
		Возврат; // Вызов ПриЧтенииНаСервере до вызова ПриСозданииНаСервере.
	КонецЕсли;

	Если Не ПриСозданииНаСервере Тогда
		ПрочитатьПользователяИБ();
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	ПользователиСервер.сП_ПрочитатьСведенияОПользователе(ЭтотОбъект);
	УстановитьПривилегированныйРежим(Ложь);

	УровеньДоступа = ПользователиСервер.сП_УровеньДоступаКСвойствамПользователя(ТекущийОбъект);

	ОпределитьДействияВФорме();

	ОпределитьНесоответствияПользователяСПользователемИБ(ПараметрыЗаписи);

	ОбработатьИнтерфейсРолей("УстановитьТолькоПросмотрРолей", ПользователиСерверПовтИсп.сП_Настройки().РедактированиеРолей <> Истина Или ДействияВФорме.Роли <> "Редактирование" Или Не УровеньДоступа.НастройкиДляВхода);

	// Настройка возможности просмотра.
	Элементы.КонтактнаяИнформация.Видимость   = ЗначениеЗаполнено(ДействияВФорме.КонтактнаяИнформация);
	Элементы.СвойстваПользователяИБ.Видимость = ЗначениеЗаполнено(ДействияВФорме.СвойстваПользователяИБ);

	ВыводитьСписокРолей											= ЗначениеЗаполнено(ДействияВФорме.Роли);
	Элементы.ОтображениеРолей.Видимость							= ВыводитьСписокРолей;
	Элементы.СвойстваАутентификации1СПредприятия.Отображение	= ?(ВыводитьСписокРолей, ОтображениеОбычнойГруппы.Нет, ОтображениеОбычнойГруппы.ОбычноеВыделение);
	Элементы.РекомендуетсяПроверитьНастройкиДляВхода.Видимость	= УровеньДоступа.ИзменениеРазрешенияНаВход И ТекущийОбъект.Подготовлен И Не ПриЧтенииВходВПрограммуРазрешен;

	// Настройка возможности изменения.
	Если ТекущийОбъект.Служебный Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	Элементы.ГруппаСлужебныйПользователь.Видимость				= ТекущийОбъект.Служебный;

	ТолькоПросмотр = ТолькоПросмотр
		ИЛИ ДействияВФорме.Роли                   <> "Редактирование"
		  И ДействияВФорме.СвойстваЭлемента       <> "Редактирование"
		  И ДействияВФорме.КонтактнаяИнформация   <> "Редактирование"
		  И ДействияВФорме.СвойстваПользователяИБ <> "Редактирование";

	ДоступностьКнопки = Не ТолькоПросмотр И ПравоДоступа("Редактирование", Метаданные.Справочники.Пользователи);

	Если Элементы.ФормаЗаписатьИЗакрыть.Доступность <> ДоступностьКнопки Тогда
		Элементы.ФормаЗаписатьИЗакрыть.Доступность = ДоступностьКнопки;
	КонецЕсли;

	Если Элементы.ИзменитьОграничениеНаВходВПрограмму.Доступность <> ДоступностьКнопки Тогда
		Элементы.ИзменитьОграничениеНаВходВПрограмму.Доступность = ДоступностьКнопки;
	КонецЕсли;

	Если Элементы.СменитьПароль.Доступность <> ДоступностьКнопки Тогда
		Элементы.СменитьПароль.Доступность = ДоступностьКнопки;
	КонецЕсли;

	Элементы.Наименование.ТолькоПросмотр	= Не (ДействияВФорме.СвойстваЭлемента = "Редактирование" И УровеньДоступа.УправлениеСписком);

	Элементы.Недействителен.ТолькоПросмотр	= Элементы.Наименование.ТолькоПросмотр;

	Элементы.ОсновныеСвойства.ТолькоПросмотр = Не (ДействияВФорме.СвойстваПользователяИБ = "Редактирование" И (УровеньДоступа.УправлениеСписком Или УровеньДоступа.ИзменениеТекущего));

	Элементы.ПользовательИБИмя1.ТолькоПросмотр                      = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБИмя2.ТолькоПросмотр                      = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБАутентификацияСтандартная.ТолькоПросмотр = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБАутентификацияOpenID.ТолькоПросмотр      = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБАутентификацияОС.ТолькоПросмотр          = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБПользовательОС.ТолькоПросмотр            = Не УровеньДоступа.НастройкиДляВхода;

	Элементы.ПользовательИБПоказыватьВСпискеВыбора.ТолькоПросмотр        = Не УровеньДоступа.УправлениеСписком;
	Элементы.ПотребоватьСменуПароляПриВходе.ТолькоПросмотр               = Не УровеньДоступа.УправлениеСписком;
	Элементы.ПользовательИБЗапрещеноИзменятьПароль.ТолькоПросмотр        = Не УровеньДоступа.УправлениеСписком;
	Элементы.ПользовательИБЗапрещеноВосстанавливатьПароль.ТолькоПросмотр = Не УровеньДоступа.УправлениеСписком;
	Элементы.ПользовательИБРежимЗапуска.ТолькоПросмотр                   = Не УровеньДоступа.УправлениеСписком;

	Элементы.Комментарий.ТолькоПросмотр								= Не (ДействияВФорме.СвойстваЭлемента = "Редактирование" И УровеньДоступа.УправлениеСписком);

	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПодготовитьНеобязательныйРеквизит(ИмяРеквизита)
	Если ТипЗнч(Объект[ИмяРеквизита]) = Тип("Строка") Тогда
		Элементы[ИмяРеквизита].Видимость = Ложь;
	Иначе
		ТипыПодразделения = Метаданные.ОпределяемыеТипы[ИмяРеквизита].Тип.Типы();
		Если ТипыПодразделения.Количество() = 1 И БазоваяПодсистемаСервер.ОН_ЭтоСсылка(ТипыПодразделения[0]) Тогда
			ОбъектМетаданных					= Метаданные.НайтиПоТипу(ТипыПодразделения[0]);
			Элементы[ИмяРеквизита].Заголовок	= ПредставлениеОбъекта(ОбъектМетаданных);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПредставлениеОбъекта(ОбъектМетаданных)
	Если ЗначениеЗаполнено(ОбъектМетаданных.ПредставлениеОбъекта) Тогда
		Возврат ОбъектМетаданных.ПредставлениеОбъекта;
	КонецЕсли;

	Возврат ОбъектМетаданных.Представление();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИмяДляВхода(Форма, ПриИзмененииНаименования = Ложь)
	Элементы = Форма.Элементы;

	// Настройка необходимости заполнения.
	Если ТребуетсяЗаписьПользователяИБ(Форма, Ложь) Тогда
		НоваяСтраница = Элементы.ИмяСОтметкойНезаполненного;
	Иначе
		НоваяСтраница = Элементы.ИмяБезОтметкиНезаполненного;
	КонецЕсли;

	Если Элементы.ИмяПереключениеОтметкиНезаполненного.ТекущаяСтраница <> НоваяСтраница Тогда
		Элементы.ИмяПереключениеОтметкиНезаполненного.ТекущаяСтраница = НоваяСтраница;
	КонецЕсли;

	Если Форма.ПользовательИБСуществует Тогда
		Возврат;
	КонецЕсли;

	КраткоеИмя = ПользователиКлиентСервер.сП_ПолучитьКраткоеИмяПользователяИБ(Форма.Объект.Наименование);

	Если Элементы.ИмяПереключениеОтметкиНезаполненного.ТекущаяСтраница = Элементы.ИмяБезОтметкиНезаполненного Тогда
		Если (Не ЗначениеЗаполнено(Форма.ПользовательИБИмяЗначениеПрямогоИзменения) Или Форма.ПользовательИБИмяЗначениеПрямогоИзменения = КраткоеИмя) И Форма.ПользовательИБИмя = КраткоеИмя Тогда
			Форма.ПользовательИБИмя = "";
		КонецЕсли;
	Иначе
		Если ПриИзмененииНаименования Или Не ЗначениеЗаполнено(Форма.ПользовательИБИмя) Тогда
			Форма.ПользовательИБИмя = КраткоеИмя;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АутентификацияПриИзменении()
	Если НЕ ПользовательИБАутентификацияOpenID И НЕ ПользовательИБАутентификацияСтандартная И НЕ ПользовательИБАутентификацияОС Тогда
		ВходВПрограммуРазрешен							= Ложь;
		ПользовательИБЗапрещеноВосстанавливатьПароль	= Истина;
	ИначеЕсли Не ВходВПрограммуРазрешен Тогда
		ВходВПрограммуРазрешен = ВходВПрограммуРазрешенЗначениеПрямогоИзменения;

		Если ЗначениеЗаполнено(ИмяРеквизитаСПочтойДляВосстановленияПароля) И ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизитаСПочтойДляВосстановленияПароля]) Тогда
			ПользовательИБЗапрещеноВосстанавливатьПароль = Ложь;
		КонецЕсли;
	КонецЕсли;

	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СменитьПарольПослеПолученияПароля(Результат, Контекст) Экспорт
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;

	Модифицированность = Истина;

	ПользовательИБПароль       = Результат.НовыйПароль;
	ПользовательИБСтарыйПароль = Результат.СтарыйПароль;

	УстановитьНаличиеПароля(ЭтотОбъект, ЗначениеЗаполнено(ПользовательИБПароль), БазоваяПодсистемаКлиент.СП_ПараметрКлиента("АвторизованныйПользователь"));

	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНаличиеПароля(Форма, ПарольУстановлен, АвторизованныйПользователь)
	ПользователиКлиентСервер.сП_УстановитьНаличиеПароля(Форма, ПарольУстановлен, АвторизованныйПользователь);
КонецПроцедуры

&НаСервере
Процедура ОпределитьДействияВФорме()
	ДействияВФорме = Новый Структура;

	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("Роли", "");

	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("КонтактнаяИнформация", "Просмотр");

	// "", "ПросмотрВсех", "Редактирование".
	ДействияВФорме.Вставить("СвойстваПользователяИБ", "");

	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("СвойстваЭлемента", "Просмотр");

	Если Не УровеньДоступа.АдминистраторСистемы И УровеньДоступа.ПолныеПрава И ПользователиСервер.П_ЭтоПолноправныйПользователь(Объект.Ссылка, Истина) Тогда
		// Администратор системы доступен только на просмотр.
		ДействияВФорме.Роли                   = "Просмотр";
		ДействияВФорме.СвойстваПользователяИБ = "Просмотр";
	ИначеЕсли УровеньДоступа.АдминистраторСистемы ИЛИ УровеньДоступа.ПолныеПрава Тогда
		ДействияВФорме.Роли                   = "Редактирование";
		ДействияВФорме.КонтактнаяИнформация   = "Редактирование";
		ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
		ДействияВФорме.СвойстваЭлемента       = "Редактирование";
	Иначе
		Если УровеньДоступа.ИзменениеТекущего Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
			ДействияВФорме.КонтактнаяИнформация   = "Редактирование";
		КонецЕсли;

		Если УровеньДоступа.УправлениеСписком Тогда
			// Ответственный за список пользователей и групп пользователей.
			// (Исполнитель распоряжений о приеме на работу и переводу,
			//  переназначению, созданию отделов, подразделений и рабочих групп).
			ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
			ДействияВФорме.КонтактнаяИнформация   = "Редактирование";
			ДействияВФорме.СвойстваЭлемента       = "Редактирование";

			Если УровеньДоступа.НастройкиДляВхода Тогда
				ДействияВФорме.Роли = "Редактирование";
			КонецЕсли;
			Если ПользователиСервер.П_ЭтоПолноправныйПользователь(Объект.Ссылка) Тогда
				ДействияВФорме.Роли = "Просмотр";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ИнтеграцияПодсистемСервер.ПриОпределенииДействийВФорме(Объект.Ссылка, ДействияВФорме);

	// Проверка имен действий в форме.
	Если СтрНайти(", Просмотр, Редактирование,", ", " + ДействияВФорме.Роли + ",") = 0 Тогда
		ДействияВФорме.Роли = "";

	ИначеЕсли ДействияВФорме.Роли = "Редактирование" И ПользователиСерверПовтИсп.сП_Настройки().РедактированиеРолей <> Истина Тогда
		ДействияВФорме.Роли = "Просмотр";
	КонецЕсли;

	Если СтрНайти(", Просмотр, Редактирование,", ", " + ДействияВФорме.КонтактнаяИнформация + ",") = 0 Тогда
		ДействияВФорме.КонтактнаяИнформация = "";
	КонецЕсли;

	Если СтрНайти(", Просмотр, ПросмотрВсех, Редактирование, РедактированиеСвоих, РедактированиеВсех,", ", " + ДействияВФорме.СвойстваПользователяИБ + ",") = 0 Тогда
		ДействияВФорме.СвойстваПользователяИБ = "";
	Иначе // Поддержка обратной совместимости.
		Если СтрНайти(ДействияВФорме.СвойстваПользователяИБ, "Просмотр") Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Просмотр";
		ИначеЕсли СтрНайти(ДействияВФорме.СвойстваПользователяИБ, "Редактирование") Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
		КонецЕсли;
	КонецЕсли;

	Если СтрНайти(", Просмотр, Редактирование,", ", " + ДействияВФорме.СвойстваЭлемента + ",") = 0 Тогда
		ДействияВФорме.СвойстваЭлемента = "";
	КонецЕсли;

	Если Объект.Служебный Тогда
		Если ДействияВФорме.Роли = "Редактирование" Тогда
			ДействияВФорме.Роли = "Просмотр";
		КонецЕсли;

		Если ДействияВФорме.КонтактнаяИнформация = "Редактирование" Тогда
			ДействияВФорме.КонтактнаяИнформация = "Просмотр";
		КонецЕсли;

		Если ДействияВФорме.СвойстваПользователяИБ = "Редактирование" Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Просмотр";
		КонецЕсли;

		Если ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
			ДействияВФорме.СвойстваЭлемента = "Просмотр";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОписаниеПользователяИБ(ДляПроверкиПервогоАдминистратора = Ложь)
	Если УровеньДоступа.УправлениеСписком И ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
		ПользовательИБПолноеИмя = Объект.Наименование;
	КонецЕсли;

	Если УровеньДоступа.АдминистраторСистемы Или УровеньДоступа.ПолныеПрава Тогда
		Результат = ПользователиСервер.П_НовоеОписаниеПользователяИБ();
		ПользователиСервер.П_СкопироватьСвойстваПользователяИБ(
			Результат,
			ЭтотОбъект,
			,
			"УникальныйИдентификатор,
			|Роли",
			"ПользовательИБ");

		Результат.Вставить("ВходВПрограммуРазрешен", ВходВПрограммуРазрешен);
	Иначе
		Результат = Новый Структура;

		Если УровеньДоступа.ИзменениеТекущего Тогда
			Результат.Вставить("Пароль", ПользовательИБПароль);
			Результат.Вставить("Язык",   ПользовательИБЯзык);
			Если ПользователиСерверПовтИсп.сП_ВерсияПредприятияПоддерживаетВосстановлениеПаролей() Тогда
				Результат.Вставить("АдресЭлектроннойПочты", ПользовательИБАдресЭлектроннойПочты);
			КонецЕсли;
		КонецЕсли;

		Если УровеньДоступа.УправлениеСписком Тогда
			Результат.Вставить("ВходВПрограммуРазрешен",         ВходВПрограммуРазрешен);
			Результат.Вставить("ПоказыватьВСпискеВыбора",        ПользовательИБПоказыватьВСпискеВыбора И Не ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей"));
			Результат.Вставить("ЗапрещеноИзменятьПароль",        ПользовательИБЗапрещеноИзменятьПароль);

			Результат.Вставить("Язык",                           ПользовательИБЯзык);
			Результат.Вставить("РежимЗапуска",                   ПользовательИБРежимЗапуска);
			Если ПользователиСерверПовтИсп.сП_ВерсияПредприятияПоддерживаетВосстановлениеПаролей() Тогда
				Результат.Вставить("ЗапрещеноВосстанавливатьПароль",	ПользовательИБЗапрещеноВосстанавливатьПароль);
				Результат.Вставить("АдресЭлектроннойПочты",				ПользовательИБАдресЭлектроннойПочты);
			КонецЕсли;

			Если ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
				Результат.Вставить("ПолноеИмя", ПользовательИБПолноеИмя);
			КонецЕсли;
		КонецЕсли;

		Если УровеньДоступа.НастройкиДляВхода Тогда
			Результат.Вставить("АутентификацияСтандартная", ПользовательИБАутентификацияСтандартная);
			Результат.Вставить("Имя",                       ПользовательИБИмя);
			Результат.Вставить("Пароль",                    ПользовательИБПароль);
			Результат.Вставить("АутентификацияOpenID",      ПользовательИБАутентификацияOpenID);
			Результат.Вставить("АутентификацияОС",          ПользовательИБАутентификацияОС);
			Результат.Вставить("ПользовательОС",            ПользовательИБПользовательОС);
		КонецЕсли;
	КонецЕсли;

	Если Не УровеньДоступа.НастройкиДляВхода Тогда
		Возврат Результат;
	КонецЕсли;

	Если Не ПользователиСерверПовтИсп.сП_Настройки().РедактированиеРолей <> Истина Тогда
		ТекущиеРоли = ПользовательИБРоли.Выгрузить(, "Роль").ВыгрузитьКолонку("Роль");
		Результат.Вставить("Роли", ТекущиеРоли);
	КонецЕсли;

	Если ДляПроверкиПервогоАдминистратора Тогда
		Возврат Результат;
	КонецЕсли;

	// Добавление ролей требуемых при создании первого администратора.
	Если ПользователиСервер.сП_ТребуетсяСоздатьПервогоАдминистратора(Результат) Тогда
		Если Результат.Свойство("Роли") И Результат.Роли <> Неопределено Тогда
			РолиАдминистратора = Результат.Роли;
		Иначе
			РолиАдминистратора = Новый Массив;
		КонецЕсли;

		Если РолиАдминистратора.Найти("ПолныеПрава") = Неопределено Тогда
			РолиАдминистратора.Добавить("ПолныеПрава");
		КонецЕсли;

		Если РолиАдминистратора.Найти("АдминистраторСистемы") = Неопределено Тогда
			РолиАдминистратора.Добавить("АдминистраторСистемы");
		КонецЕсли;
		Результат.Вставить("Роли", РолиАдминистратора);
	КонецЕсли;

	Возврат Результат;
КонецФункции

&НаСервере
Функция ТребуетсяСоздатьПервогоАдминистратора(ТекстВопроса = Неопределено)
	Возврат ПользователиСервер.сП_ТребуетсяСоздатьПервогоАдминистратора(ОписаниеПользователяИБ(Истина), ТекстВопроса);
КонецФункции

&НаСервереБезКонтекста
Функция СписокПользователейИБПустой()
	УстановитьПривилегированныйРежим(Истина);

	Возврат Не ЗначениеЗаполнено(ПользователиИнформационнойБазы.ТекущийПользователь().Имя) И ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0;
КонецФункции

&НаКлиенте
Процедура ПослеОтветаНаВопросОЗаписиСПустымСпискомРолей(Ответ, ПараметрыЗаписи) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи.Вставить("СПустымСпискомРолей");
		Записать(ПараметрыЗаписи);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПервогоАдминистратора()
	ПараметрыЗаписи									= ПараметрыЗаписиПриПроверкеПервогоАдминистратора;
	ПараметрыЗаписиПриПроверкеПервогоАдминистратора	= Неопределено;

	ТекстВопроса = "";
	Если Не ТребуетсяСоздатьПервогоАдминистратора(ТекстВопроса) Тогда
		ПараметрыЗаписи.Вставить("ССозданиемПервогоАдминистратора");
		Попытка
			Записать(ПараметрыЗаписи);
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		Возврат;
	КонецЕсли;

	ЗаголовокВопроса = "Запись пользователя информационной базы";
	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеПодтвержденияСозданияПервогоАдминистратора", ЭтотОбъект, ПараметрыЗаписи), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияСозданияПервогоАдминистратора(Ответ, ПараметрыЗаписи) Экспорт
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ВходВПрограммуРазрешен					= Истина;
	ПользовательИБАутентификацияСтандартная	= Истина;

	ПараметрыЗаписи.Вставить("ССозданиемПервогоАдминистратора");
	Записать(ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОКопированииПрав(Ответ, ПараметрыЗаписи) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи.Вставить("КопироватьПраваПользователя");
	Иначе
		ПараметрыЗаписи.Вставить("НеКопироватьПраваПользователя");
	КонецЕсли;
	Записать(ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиЗавершение(Результат, ПараметрыЗаписи) Экспорт
	Если ПараметрыЗаписи <> Неопределено И ПараметрыЗаписи.Свойство("ЗаписатьИЗакрыть") Тогда
		ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	Закрыть();
КонецПроцедуры

&НаСервере
Функция НачальноеОписаниеПользователяИБ()
	УстановитьПривилегированныйРежим(Истина);

	Если НачальноеОписаниеПользователяИБ <> Неопределено Тогда
		НачальноеОписаниеПользователяИБ.Роли = Новый Массив;

		Возврат НачальноеОписаниеПользователяИБ;
	КонецЕсли;

	ОписаниеПользователяИБ							= ПользователиСервер.П_НовоеОписаниеПользователяИБ();
	ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора	= НЕ Константы.ИспользоватьВнешнихПользователей.Получить();
	ОписаниеПользователяИБ.Роли						= Новый Массив;

	Возврат ОписаниеПользователяИБ;
КонецФункции

&НаСервере
Процедура ПрочитатьПользователяИБ(ПриКопированииЭлемента = Ложь)
	УстановитьПривилегированныйРежим(Истина);

	ПрочитанныеСвойства      = Неопределено;
	ОписаниеПользователяИБ   = НачальноеОписаниеПользователяИБ();
	ПользовательИБСуществует = Ложь;
	ПользовательИБОсновной   = Ложь;
	ВходВПрограммуРазрешен   = Ложь;
	ВходВПрограммуРазрешенЗначениеПрямогоИзменения = Ложь;

	Если ПриКопированииЭлемента Тогда
		ПрочитанныеСвойства = ПользователиСервер.П_СвойстваПользователяИБ(Параметры.ЗначениеКопирования.ИдентификаторПользователяИБ);
		Если ПрочитанныеСвойства <> Неопределено Тогда
			// Сопоставление пользователя ИБ с пользователем в справочнике.
			Если ПользователиСервер.П_ВходВПрограммуРазрешен(ПрочитанныеСвойства) Тогда
				ВходВПрограммуРазрешен								= Истина;
				ВходВПрограммуРазрешенЗначениеПрямогоИзменения		= Истина;
				ОписаниеПользователяИБ.АутентификацияСтандартная	= Истина;
			КонецЕсли;

			// Копирование свойств и ролей пользователяИБ.
			ЗаполнитьЗначенияСвойств(
				ОписаниеПользователяИБ,
				ПрочитанныеСвойства,
				"ЗапрещеноИзменятьПароль,
				|ПоказыватьВСпискеВыбора,
				|ОсновнойИнтерфейс,
				|РежимЗапуска" + ?(Не Элементы.ПользовательИБЯзык.Видимость, "", ",
				|Язык") + ?(ПользователиСерверПовтИсп.сП_Настройки().РедактированиеРолей <> Истина, "", ",
				|Роли") + ПользователиСервер.сП_ПоляВосстановленияПаролей());
		КонецЕсли;
		Объект.ИдентификаторПользователяИБ = Неопределено;
		УстановитьНаличиеПароля(ЭтотОбъект, Ложь, ПользователиСервер.сП_АвторизованныйПользователь());
	Иначе
		ПрочитанныеСвойства = ПользователиСервер.П_СвойстваПользователяИБ(Объект.ИдентификаторПользователяИБ);
		Если ПрочитанныеСвойства <> Неопределено Тогда
			ПользовательИБСуществует = Истина;
			ПользовательИБОсновной = Истина;
		ИначеЕсли Параметры.Свойство("ИдентификаторПользователяИБ") И ЗначениеЗаполнено(Параметры.ИдентификаторПользователяИБ) Тогда
			Если Объект.ИдентификаторПользователяИБ <> Параметры.ИдентификаторПользователяИБ Тогда
				Объект.ИдентификаторПользователяИБ	= Параметры.ИдентификаторПользователяИБ;
				Модифицированность					= Истина;
			КонецЕсли;
			ПрочитанныеСвойства					= ПользователиСервер.П_СвойстваПользователяИБ(Объект.ИдентификаторПользователяИБ);
			Если ПрочитанныеСвойства <> Неопределено Тогда
				ПользовательИБСуществует = Истина;
				Если Объект.Наименование <> ПрочитанныеСвойства.ПолноеИмя Тогда
					Объект.Наименование	= ПрочитанныеСвойства.ПолноеИмя;
					Модифицированность	= Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ПользовательИБСуществует Тогда
			Если ПользователиСервер.П_ВходВПрограммуРазрешен(ПрочитанныеСвойства) Тогда
				ВходВПрограммуРазрешен							= Истина;
				ВходВПрограммуРазрешенЗначениеПрямогоИзменения	= Истина;
			КонецЕсли;

			ЗаполнитьЗначенияСвойств(
				ОписаниеПользователяИБ,
				ПрочитанныеСвойства,
				"Имя,
				|ПолноеИмя,
				|АутентификацияOpenID,
				|АутентификацияСтандартная,
				|ПоказыватьВСпискеВыбора,
				|ЗапрещеноИзменятьПароль,
				|АутентификацияОС,
				|ПользовательОС,
				|ОсновнойИнтерфейс,
				|РежимЗапуска" + ?(Не Элементы.ПользовательИБЯзык.Видимость, "", ",
				|Язык") + ?(ПользователиСерверПовтИсп.сП_Настройки().РедактированиеРолей <> Истина, "", ",
				|Роли"));
		КонецЕсли;

		Если ПрочитанныеСвойства = Неопределено Тогда
			УстановитьНаличиеПароля(ЭтотОбъект, Ложь, ПользователиСервер.сП_АвторизованныйПользователь());
		Иначе
			УстановитьНаличиеПароля(ЭтотОбъект, ПрочитанныеСвойства.ПарольУстановлен, ПользователиСервер.сП_АвторизованныйПользователь());
		КонецЕсли;
	КонецЕсли;

	ПользователиСервер.П_СкопироватьСвойстваПользователяИБ(
		ЭтотОбъект,
		ОписаниеПользователяИБ,
		,
		"УникальныйИдентификатор,
		|Роли" + ?(ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей"), ",
		|ПоказыватьВСпискеВыбора", ""),
		"ПользовательИБ");

	Если ПользовательИБОсновной И Не ВходВПрограммуРазрешен Тогда
		ХранимыеСвойства						= ПользователиСервер.сП_ХранимыеСвойстваПользователяИБ(Объект.Ссылка);
		ПользовательИБАутентификацияOpenID      = ХранимыеСвойства.АутентификацияOpenID;
		ПользовательИБАутентификацияСтандартная = ХранимыеСвойства.АутентификацияСтандартная;
		ПользовательИБАутентификацияОС          = ХранимыеСвойства.АутентификацияОС;
	КонецЕсли;

	Если ПользовательИБСуществует Тогда
		ПользовательИБАутентификацияСтандартнаяЗначениеПрямогоИзменения = ПользовательИБАутентификацияСтандартная;
	КонецЕсли;

	ОбработатьИнтерфейсРолей("ЗаполнитьРоли", ОписаниеПользователяИБ.Роли);

	ПриЧтенииВходВПрограммуРазрешен = ВходВПрограммуРазрешен;
КонецПроцедуры

&НаСервере
Процедура ОпределитьНесоответствияПользователяСПользователемИБ(ПараметрыЗаписи = Неопределено)
	// Проверка соответствия свойства ПолноеИмя пользователяИБ и
	// реквизита Наименование пользователя.

	ПоказатьНесоответствие				= Истина;
	ПоказатьКомандыУстраненияРазличий	= Ложь;

	Если НЕ ПользовательИБСуществует Тогда
		ПоказатьНесоответствие = Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Наименование		= ПользовательИБПолноеИмя;
		ПоказатьНесоответствие	= Ложь;
	ИначеЕсли УровеньДоступа.УправлениеСписком Тогда
		УточнениеСвойств = Новый Массив;

		Если ПользовательИБПолноеИмя <> Объект.Наименование Тогда
			ПоказатьКомандыУстраненияРазличий = ПоказатьКомандыУстраненияРазличий Или ДействияВФорме.СвойстваЭлемента = "Редактирование";

			УточнениеСвойств.Вставить(0, СтрШаблон("Полное имя ""%1""", ПользовательИБПолноеИмя));
		КонецЕсли;

		Если ПриЧтенииВходВПрограммуРазрешен И Объект.Недействителен Тогда
			ВходВПрограммуРазрешен				= Ложь;
			ПоказатьКомандыУстраненияРазличий	= ПоказатьКомандыУстраненияРазличий Или ДействияВФорме.СвойстваЭлемента = "Редактирование";

			УточнениеСвойств.Вставить(0, "Вход в программу разрешен");
		КонецЕсли;

		// Проверка на соответствие почты
		Если УровеньДоступа.ИзменениеТекущего Тогда
			ВидEmailПользователя	= КонтактнаяИнформацияСервер.УКИ_ВидКонтактнойИнформацииПоИмени("EmailПользователя");

			СтрокаОписания			= КонтактнаяИнформацияСервер.УКИ_СтрокаОписанияПочтыДляВосстановленияПароляИзДанныхФормы(ЭтотОбъект, ВидEmailПользователя, ПользовательИБАдресЭлектроннойПочты);

			Если СтрокаОписания = Неопределено Тогда
				ПоказатьКомандыУстраненияРазличий = ПоказатьКомандыУстраненияРазличий Или ДействияВФорме.СвойстваЭлемента = "Редактирование";

				УточнениеСвойств.Вставить(0, СтрШаблон("Почта для восстановления пароля ""%1""", ПользовательИБАдресЭлектроннойПочты));
			КонецЕсли;
		КонецЕсли;

		Если УточнениеСвойств.Количество() > 0 Тогда
			СтрокаУточненияСвойств	= "";
			ТекущаяСтрока			= "";
			Для каждого УточнениеСвойства Из УточнениеСвойств Цикл
				Если СтрДлина(ТекущаяСтрока + УточнениеСвойства) > 90 Тогда
					СтрокаУточненияСвойств	= СтрокаУточненияСвойств + СокрП(ТекущаяСтрока) + ", " + Символы.ПС;
					ТекущаяСтрока			= "";
				КонецЕсли;
				ТекущаяСтрока = ТекущаяСтрока + ?(ЗначениеЗаполнено(ТекущаяСтрока), ", ", "") + УточнениеСвойства;
			КонецЦикла;
			Если ЗначениеЗаполнено(ТекущаяСтрока) Тогда
				СтрокаУточненияСвойств = СтрокаУточненияСвойств + ТекущаяСтрока;
			КонецЕсли;
			Если ПоказатьКомандыУстраненияРазличий Тогда
				Рекомендация = Символы.ПС + "Нажмите ""Записать"", чтобы устранить различия и не выводить это предупреждение.";
			ИначеЕсли Не ПользователиСервер.П_ЭтоПолноправныйПользователь() Тогда
				Рекомендация = Символы.ПС + "Обратитесь к администратору, чтобы устранить различия.";
			Иначе
				Рекомендация = "";
			КонецЕсли;
			Элементы.СвойстваПояснениеНесоответствия.Заголовок = СтрШаблон("Следующие свойства пользователя информационной базы отличаются от указанных в этой форме:
				           |%1.",
				СтрокаУточненияСвойств) + Рекомендация;
		Иначе
			ПоказатьНесоответствие = Ложь;
		КонецЕсли;
	Иначе
		ПоказатьНесоответствие = Ложь;
	КонецЕсли;

	Элементы.СвойстваОбработкаНесоответствия.Видимость				= ПоказатьНесоответствие;
	Элементы.СвойстваКомандыУстраненияРазличий.Видимость			= ПоказатьКомандыУстраненияРазличий;
	Элементы.СвойстваПояснениеНесоответствия.ВертикальноеПоложение	= ?(ЗначениеЗаполнено(Рекомендация), ВертикальноеПоложениеЭлемента.Верх, ВертикальноеПоложениеЭлемента.Центр);

	// Определение сопоставление несуществующего пользователя ИБ с пользователем в справочнике.
	ЕстьНовоеСопоставлениеСНесуществующимПользователемИБ = НЕ ПользовательИБСуществует И ЗначениеЗаполнено(Объект.ИдентификаторПользователяИБ);

	Если ПараметрыЗаписи <> Неопределено И ЕстьСопоставлениеСНесуществующимПользователемИБ И НЕ ЕстьНовоеСопоставлениеСНесуществующимПользователемИБ Тогда
		ПараметрыЗаписи.Вставить("ОчищеноСопоставлениеСНесуществующимПользователемИБ", Объект.Ссылка);
	КонецЕсли;
	ЕстьСопоставлениеСНесуществующимПользователемИБ = ЕстьНовоеСопоставлениеСНесуществующимПользователемИБ;

	Если УровеньДоступа.УправлениеСписком Тогда
		Элементы.СопоставлениеОбработкаНесоответствия.Видимость = ЕстьСопоставлениеСНесуществующимПользователемИБ;
	Иначе
		// Сопоставление не может быть изменено.
		Элементы.СопоставлениеОбработкаНесоответствия.Видимость = Ложь;
	КонецЕсли;

	Если ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
		Рекомендация = Символы.ПС + "Нажмите ""Записать"", чтобы устранить проблему и не выводить это предупреждение.";
	ИначеЕсли Не ПользователиСервер.П_ЭтоПолноправныйПользователь() Тогда
		Рекомендация = Символы.ПС + "Обратитесь к администратору, чтобы устранить различия.";
	Иначе
		Рекомендация = "";
	КонецЕсли;

	Элементы.СопоставлениеПояснениеНесоответствия.Заголовок = "Несуществующий пользователь информационной базы." + Рекомендация;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляПоПользователюИБНаСервере()
	Если УровеньДоступа.УправлениеСписком И ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
		Объект.Наименование = ПользовательИБПолноеИмя;
		ЗаполнитьПолеПочтыДляВосстановленияПароляИзИБ();
	КонецЕсли;

	ОпределитьНесоответствияПользователяСПользователемИБ();

	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьСвойств(Форма)
	Элементы       = Форма.Элементы;
	Объект         = Форма.Объект;
	УровеньДоступа = Форма.УровеньДоступа;

	// Настройка возможности изменения.
	Элементы.ВходВПрограммуРазрешен.ТолькоПросмотр = Не (Элементы.ОсновныеСвойства.ТолькоПросмотр = Ложь И (УровеньДоступа.ИзменениеРазрешенияНаВход Или УровеньДоступа.ОтключениеРазрешенияНаВход И Форма.ПриЧтенииВходВПрограммуРазрешен));

	Элементы.СменитьПароль.Доступность = (УровеньДоступа.НастройкиДляВхода Или УровеньДоступа.ИзменениеТекущего И Не Форма.ПользовательИБЗапрещеноИзменятьПароль) И Не Объект.Служебный;

	ОбновитьИмяДляВхода(Форма);

	// Настройка доступности связанных элементов.
	Элементы.ВходВПрограммуРазрешен.Доступность    = Не Объект.Недействителен;
	Элементы.ОсновныеСвойства.Доступность          = Не Объект.Недействителен;
	Элементы.ГруппаИзменитьОграничение.Доступность = Не Объект.Недействителен И Не Элементы.Наименование.ТолькоПросмотр;

	Элементы.ПараметрыАутентификации1СПредприятия.Доступность			= Форма.ПользовательИБАутентификацияСтандартная;
	Элементы.ПользовательИБПользовательОС.Доступность         			= Форма.ПользовательИБАутентификацияОС;

	Элементы.ПользовательИБЗапрещеноВосстанавливатьПароль.Доступность	= Не Форма.ПользовательИБЗапрещеноИзменятьПароль;

	ПользователиКлиентСервер.сП_ОбновитьОграничениеСрокаДействия(Форма);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОграничениеНаВходВПрограммуЗавершение(Результат, Контекст) Экспорт
	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяЗаписьПользователяИБ(Форма, УчитыватьСтандартноеИмя = Истина)
	Если Форма.ДействияВФорме.СвойстваПользователяИБ <> "Редактирование" Тогда
		Возврат Ложь;
	КонецЕсли;

	Шаблон = Форма.НачальноеОписаниеПользователяИБ;

	ТекущееИмя = "";
	Если Не УчитыватьСтандартноеИмя Тогда
		КраткоеИмя = ПользователиКлиентСервер.сП_ПолучитьКраткоеИмяПользователяИБ(Форма.Объект.Наименование);

		Если Форма.ПользовательИБИмя = КраткоеИмя Тогда
			ТекущееИмя = КраткоеИмя;
		КонецЕсли;
	КонецЕсли;

	Если Форма.ПользовательИБСуществует
	 ИЛИ Форма.ВходВПрограммуРазрешен
	 ИЛИ Форма.ПользовательИБИмя                            <> ТекущееИмя
	 ИЛИ Форма.ПользовательИБАутентификацияСтандартная      <> Шаблон.АутентификацияСтандартная
	 ИЛИ Форма.ПользовательИБПоказыватьВСпискеВыбора        <> Шаблон.ПоказыватьВСпискеВыбора
	 ИЛИ Форма.ПользовательИБЗапрещеноИзменятьПароль        <> Шаблон.ЗапрещеноИзменятьПароль
	 ИЛИ Форма.ПользовательИБПароль                         <> Неопределено
	 ИЛИ Форма.ПользовательИБАутентификацияОС               <> Шаблон.АутентификацияОС
	 ИЛИ Форма.ПользовательИБПользовательОС                 <> ""
	 ИЛИ Форма.ПользовательИБАутентификацияOpenID           <> Шаблон.АутентификацияOpenID
	 ИЛИ Форма.ПользовательИБРежимЗапуска                   <> Шаблон.РежимЗапуска
	 ИЛИ Форма.ПользовательИБЯзык                           <> Шаблон.Язык
	 ИЛИ Форма.ПользовательИБРоли.Количество()              <> 0 Тогда

		Возврат Истина;
	КонецЕсли;

	// Поддерживается в новых версиях платформы
	Если Шаблон.Свойство("ЗапрещеноВосстанавливатьПароль") И Форма.ПользовательИБЗапрещеноВосстанавливатьПароль <> Шаблон.ЗапрещеноВосстанавливатьПароль Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

&НаСервере
Процедура ОбработатьИнтерфейсРолей(Действие, ОсновнойПараметр = Неопределено)
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ОсновнойПараметр",							ОсновнойПараметр);
	ПараметрыДействия.Вставить("Форма",										ЭтотОбъект);
	ПараметрыДействия.Вставить("КоллекцияРолей",							ПользовательИБРоли);
	ПараметрыДействия.Вставить("ЗапретИзмененияАдминистративногоДоступа",	ЗапретИзмененияАдминистративногоДоступа);
	ПараметрыДействия.Вставить("НазначениеРолей",							"ДляАдминистраторов");

	ПользователиСервер.сП_ОбработатьИнтерфейсРолей(Действие, ПараметрыДействия);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолеПочтыДляВосстановленияПароляИзИБ()
	Если ПустаяСтрока(ИмяРеквизитаСПочтойДляВосстановленияПароля) Тогда
		Возврат;
	КонецЕсли;

	ПочтаДляВосстановленияПароляИзОбъекта = Новый Структура(ИмяРеквизитаСПочтойДляВосстановленияПароля, Неопределено);
	ЗаполнитьЗначенияСвойств(ПочтаДляВосстановленияПароляИзОбъекта, ЭтотОбъект);

	Если ЗначениеЗаполнено(ПочтаДляВосстановленияПароляИзОбъекта[ИмяРеквизитаСПочтойДляВосстановленияПароля]) Или ПочтаДляВосстановленияПароляИзОбъекта[ИмяРеквизитаСПочтойДляВосстановленияПароля] <> ПользовательИБАдресЭлектроннойПочты Тогда
		ВидEmailПользователя	= КонтактнаяИнформацияСервер.УКИ_ВидКонтактнойИнформацииПоИмени("EmailПользователя");
		ОписаниеПочты			= КонтактнаяИнформацияСервер.УКИ_СтрокаОписанияПочтыДляВосстановленияПароляИзДанныхФормы(ЭтотОбъект, ВидEmailПользователя, ЭтотОбъект[ИмяРеквизитаСПочтойДляВосстановленияПароля]);

		Если ОписаниеПочты <> Неопределено Тогда
			ОписаниеПочты.Представление	= ПользовательИБАдресЭлектроннойПочты;
			ОписаниеПочты.Значение		= КонтактнаяИнформацияСервер.сУКИ_СтруктураВСтрокуJSON(КонтактнаяИнформацияСервер.сУКИ_КонтактнаяИнформацияПоПредставлению(ПользовательИБАдресЭлектроннойПочты, ВидEmailПользователя));

			ЭтотОбъект[ИмяРеквизитаСПочтойДляВосстановленияПароля] = ПользовательИБАдресЭлектроннойПочты;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
