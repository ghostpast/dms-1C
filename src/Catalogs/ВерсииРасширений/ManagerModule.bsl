///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура УстановкаПараметровСеанса(ИменаПараметровСеанса, УстановленныеПараметры) Экспорт
	Если ИменаПараметровСеанса = Неопределено
	 Или ИменаПараметровСеанса.Найти("УстановленныеРасширения") <> Неопределено Тогда

		ПараметрыСеанса.УстановленныеРасширения = УстановленныеРасширения(Истина);
		УстановленныеПараметры.Добавить("УстановленныеРасширения");
	КонецЕсли;

	Если ИменаПараметровСеанса = Неопределено
	 Или ИменаПараметровСеанса.Найти("ПодключенныеРасширения") <> Неопределено Тогда

		Расширения = РасширенияКонфигурации.Получить(, ИсточникРасширенийКонфигурации.СеансАктивные);
		ПараметрыСеанса.ПодключенныеРасширения = КонтрольныеСуммыРасширений(Расширения, "БезопасныйРежим");
		УстановленныеПараметры.Добавить("ПодключенныеРасширения");
	КонецЕсли;

	Если ИменаПараметровСеанса <> Неопределено
	   И ИменаПараметровСеанса.Найти("ВерсияРасширений") <> Неопределено Тогда

		ПараметрыСеанса.ВерсияРасширений = ВерсияРасширений();
		УстановленныеПараметры.Добавить("ВерсияРасширений");
	КонецЕсли;

	Если ИменаПараметровСеанса = Неопределено
	   И ТекущийРежимЗапуска() <> Неопределено Тогда

		ЗарегистрироватьИспользованиеВерсииРасширений();
	КонецЕсли;
КонецПроцедуры

Функция УстановленныеРасширения(ПриЗапуске = Ложь) Экспорт
	РасширенияБазыДанных = РасширенияКонфигурации.Получить();
	Если ПриЗапуске Тогда
		РасширенияПриЗапуске	= Новый Соответствие;
		АктивныеРасширения		= РасширенияКонфигурации.Получить(, ИсточникРасширенийКонфигурации.СеансАктивные);
		Для Каждого Расширение Из АктивныеРасширения Цикл
			РасширенияПриЗапуске.Вставить(КонтрольнаяСуммаРасширения(Расширение), Расширение);
		КонецЦикла;
		НеподключенныеРасширения = РасширенияКонфигурации.Получить(, ИсточникРасширенийКонфигурации.СеансОтключенные);
		Для Каждого Расширение Из НеподключенныеРасширения Цикл
			РасширенияПриЗапуске.Вставить(КонтрольнаяСуммаРасширения(Расширение), Расширение);
		КонецЦикла;
		ДобавленныеРасширения	= Новый Соответствие;
		Расширения				= Новый Массив;
		Для Каждого Расширение Из РасширенияБазыДанных Цикл
			КонтрольнаяСумма		= КонтрольнаяСуммаРасширения(Расширение);
			РасширениеПриЗапуске	= РасширенияПриЗапуске.Получить(КонтрольнаяСумма);
			Если РасширениеПриЗапуске <> Неопределено Тогда
				ДобавленныеРасширения.Вставить(КонтрольнаяСумма, Истина);
				Расширения.Добавить(РасширениеПриЗапуске);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ОписаниеРасширения Из РасширенияПриЗапуске Цикл
			Если ДобавленныеРасширения.Получить(ОписаниеРасширения.Ключ) = Неопределено Тогда
				Расширения.Добавить(ОписаниеРасширения.Значение);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Расширения = РасширенияБазыДанных;
	КонецЕсли;

	Индекс = Расширения.Количество();
	Пока Индекс > 0 Цикл
		Индекс		= Индекс - 1;
		Расширение	= Расширения.Получить(Индекс);
		Если Base64Строка(Расширение.ХешСумма) = "AAAAAAAAAAAAAAAAAAAAAAAAAAA=" Тогда
			Расширения.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;

	Основные    = Новый Массив;
	Исправления = Новый Массив;

	// Зарезервировано для новых подсистем

	Для Каждого Расширение Из Расширения Цикл
		// Зарезервировано для новых подсистем

		Основные.Добавить(Расширение);
	КонецЦикла;

	УстановленныеРасширения = Новый Структура;
	УстановленныеРасширения.Вставить("Основные",				КонтрольныеСуммыРасширений(Основные));
	УстановленныеРасширения.Вставить("Исправления",				КонтрольныеСуммыРасширений(Исправления));
	УстановленныеРасширения.Вставить("ОсновныеСостояние",		КонтрольныеСуммыРасширений(Основные, "Все"));
	УстановленныеРасширения.Вставить("ИсправленияСостояние",	КонтрольныеСуммыРасширений(Исправления, "Все"));

	Если ПриЗапуске
	   И АктивныеРасширения.Количество() = 0
	   И НеподключенныеРасширения.Количество() = 0
	   И РасширенияБазыДанных.Количество() <> 0
	   И СтрНайти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0 Тогда

		УстановленныеРасширения.Вставить("РасширенияНедоступны");
	КонецЕсли;

	Если ПриЗапуске Тогда
		УстановитьНачальноеЗарегистрированноеСостояние(УстановленныеРасширения, УстановленныеРасширения);
	КонецЕсли;

	Возврат Новый ФиксированнаяСтруктура(УстановленныеРасширения);
КонецФункции

Процедура ВставитьЗарегистрированныйСоставУстановленныхРасширений(Параметры) Экспорт
	РасширенияИзмененыДинамически();

	УстановитьПривилегированныйРежим(Истина);
	УстановленныеРасширения = ПараметрыСеанса.УстановленныеРасширения;
	УстановитьПривилегированныйРежим(Ложь);

	Свойства = Новый Структура;
	Свойства.Вставить("ОсновныеСостояние",     УстановленныеРасширения.ОсновныеЗарегистрированноеСостояние);
	Свойства.Вставить("ИсправленияСостояние",  УстановленныеРасширения.ИсправленияЗарегистрированноеСостояние);

	Параметры.Вставить("ЗарегистрированныйСоставУстановленныхРасширений", Свойства);
КонецПроцедуры

Процедура ВосстановитьЗарегистрированныйСоставУстановленныхРасширений(Параметры) Экспорт
	Если Параметры.Свойство("ЗарегистрированныйСоставУстановленныхРасширений") Тогда
		УстановитьНачальноеЗарегистрированноеСостояние(Параметры.ЗарегистрированныйСоставУстановленныхРасширений);
	КонецЕсли;
КонецПроцедуры

Функция УстановленныеРасширенияПриЗапуске() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Основные",				"");
	Результат.Вставить("Исправления",			"");
	Результат.Вставить("ОсновныеСостояние",		"");
	Результат.Вставить("ИсправленияСостояние",	"");

	ЗаполнитьЗначенияСвойств(Результат, ПараметрыСеанса.УстановленныеРасширения);

	Возврат Новый ФиксированнаяСтруктура(Результат);
КонецФункции

Функция РасширенияИзмененыДинамически() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	УстановленныеРасширения				= УстановленныеРасширения();
	УстановленныеРасширенияПриЗапуске	= УстановленныеРасширенияПриЗапуске();

	БезИзменений = УстановленныеРасширенияПриЗапуске.Свойство("РасширенияНедоступны") Или УстановленныеРасширенияПриЗапуске.ОсновныеСостояние = УстановленныеРасширения.ОсновныеСостояние И УстановленныеРасширенияПриЗапуске.ИсправленияСостояние = УстановленныеРасширения.ИсправленияСостояние;

	ЗарегистрироватьИзменениеУстановленныхРасширений(УстановленныеРасширения, БезИзменений);

	Возврат Не БезИзменений;
КонецФункции

Функция ДинамическиИзмененныеРасширения(УстановленныеРасширенияПриЗапуске = Неопределено) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Расширения",	Неопределено);
	Результат.Вставить("Исправления",	Неопределено);

	УстановитьПривилегированныйРежим(Истина);

	УстановленныеРасширения = УстановленныеРасширения();

	Если УстановленныеРасширенияПриЗапуске = Неопределено Тогда
		ПроверкаВТекущемСеансе = Истина;
		УстановленныеРасширенияПриЗапуске = УстановленныеРасширенияПриЗапуске();
	Иначе
		ПроверкаВТекущемСеансе = Ложь;
	КонецЕсли;

	БезИзменений = УстановленныеРасширенияПриЗапуске.Свойство("РасширенияНедоступны") Или УстановленныеРасширенияПриЗапуске.ОсновныеСостояние = УстановленныеРасширения.ОсновныеСостояние И УстановленныеРасширенияПриЗапуске.ИсправленияСостояние = УстановленныеРасширения.ИсправленияСостояние;

	Если ПроверкаВТекущемСеансе Тогда
		ЗарегистрироватьИзменениеУстановленныхРасширений(УстановленныеРасширения, БезИзменений);
	КонецЕсли;

	Если БезИзменений Тогда
		Возврат Результат;
	КонецЕсли;

	Если УстановленныеРасширенияПриЗапуске.ИсправленияСостояние <> УстановленныеРасширения.ИсправленияСостояние Тогда
		Изменения				= ИзмененияВСоставеРасширений(УстановленныеРасширенияПриЗапуске.Исправления, УстановленныеРасширения.Исправления);
		Результат.Исправления	= Изменения;
	КонецЕсли;

	Если УстановленныеРасширенияПриЗапуске.ОсновныеСостояние <> УстановленныеРасширения.ОсновныеСостояние Тогда
		Изменения				= ИзмененияВСоставеРасширений(УстановленныеРасширенияПриЗапуске.ОсновныеСостояние, УстановленныеРасширения.ОсновныеСостояние);
		Результат.Расширения	= Изменения;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Процедура ЗарегистрироватьИспользованиеВерсииРасширений() Экспорт
	Если ТранзакцияАктивна() Тогда
		Возврат;
	КонецЕсли;

	ВерсияРасширений = ПараметрыСеанса.ВерсияРасширений;

	Если Не ЗначениеЗаполнено(ВерсияРасширений) Тогда
		ОбновитьПоследнююВерсиюРасширений(ВерсияРасширений);

		Возврат;
	КонецЕсли;

	ОкругленнаяДатаНачалаСеанса = ОкругленнаяДатаНачалаСеанса();

	Запрос			= Новый Запрос;
	Запрос.Текст	=
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ВерсииРасширений КАК ВерсииРасширений
	|ГДЕ
	|	НЕ ВерсииРасширений.ПометкаУдаления
	|	И ВерсииРасширений.Ссылка = &ВерсияРасширений
	|	И ВерсииРасширений.ДатаПоследнегоИспользования < &ДатаПоследнегоИспользования";
	Запрос.УстановитьПараметр("ВерсияРасширений",				ВерсияРасширений);
	Запрос.УстановитьПараметр("ДатаПоследнегоИспользования",	ОкругленнаяДатаНачалаСеанса);

	// Если в другом сеансе обновляется дата последнего использования текущей версии, тогда
	// нужно дождаться окончания обновления, чтобы избежать очереди исключительных блокировок.
	Блокировка				= Новый БлокировкаДанных;
	ЭлементБлокировки		= Блокировка.Добавить("Справочник.ВерсииРасширений");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ВерсияРасширений);
	ЭлементБлокировки.Режим	= РежимБлокировкиДанных.Разделяемый;

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		РезультатЗапроса = Запрос.Выполнить();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Если Не РезультатЗапроса.Пустой() Тогда
		Блокировка			= Новый БлокировкаДанных;
		ЭлементБлокировки	= Блокировка.Добавить("Справочник.ВерсииРасширений");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ВерсияРасширений);
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			Объект	= СлужебныйЭлемент(ВерсияРасширений);

			Если Объект <> Неопределено И Объект.ДатаПоследнегоИспользования < ОкругленнаяДатаНачалаСеанса Тогда
				Объект.ДатаПоследнегоИспользования = ОкругленнаяДатаНачалаСеанса;
				Объект.Записать();
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;

	ОбновитьПоследнююВерсиюРасширений(ВерсияРасширений);
КонецПроцедуры

Процедура ОбновитьПоследнююВерсиюРасширений(ВерсияРасширений)
	Если КонфигурацияБазыДанныхИзмененаДинамически() Или РасширенияИзмененыДинамически() Тогда
		Возврат;
	КонецЕсли;

	ХранимыеСвойства = ПоследняяВерсияРасширений();

	Если ХранимыеСвойства.ВерсияРасширений = ВерсияРасширений Тогда
		Возврат;
	КонецЕсли;

	ХранимыеСвойства.ВерсияРасширений			= ВерсияРасширений;
	ХранимыеСвойства.ДатаОбновления				= ТекущаяДатаСеанса();
	ХранимыеСвойства.ИдентификаторОбновления	= Новый УникальныйИдентификатор;

	ИмяПараметра = "СтандартныеПодсистемы.БазоваяПодсистема.ПоследняяВерсияРасширений";
	РегистрыСведений.ПараметрыРаботыВерсийРасширений.УстановитьПараметрРаботыРасширения(ИмяПараметра, ХранимыеСвойства, Истина);
КонецПроцедуры

Функция ПоследняяВерсияРасширений() Экспорт
	ИмяПараметра = "СтандартныеПодсистемы.БазоваяПодсистема.ПоследняяВерсияРасширений";
	ХранимыеСвойства = РегистрыСведений.ПараметрыРаботыВерсийРасширений.ПараметрРаботыРасширения(ИмяПараметра, Истина);

	Если ХранимыеСвойства = Неопределено
	 Или ТипЗнч(ХранимыеСвойства) <> Тип("Структура")
	 Или Не ХранимыеСвойства.Свойство("ВерсияРасширений")
	 Или Не ХранимыеСвойства.Свойство("ДатаОбновления")
	 Или Не ХранимыеСвойства.Свойство("ИдентификаторОбновления") Тогда

		ХранимыеСвойства = Новый Структура;
		ХранимыеСвойства.Вставить("ВерсияРасширений");
		ХранимыеСвойства.Вставить("ДатаОбновления", '00010101');
		ХранимыеСвойства.Вставить("ИдентификаторОбновления", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	КонецЕсли;

	Возврат ХранимыеСвойства;
КонецФункции

Процедура УдалитьУстаревшиеВерсииПараметров() Экспорт
	ДругаяВерсия = ДругаяВерсияРасширений();

	Если Не ЗначениеЗаполнено(ДругаяВерсия) Тогда
		ОтключитьРегламентноеЗаданиеЕслиТребуется();

		Возврат;
	КонецЕсли;

	ПроверяемыеПриложения = Новый Соответствие;
	ПроверяемыеПриложения.Вставить("1CV8",					Истина);
	ПроверяемыеПриложения.Вставить("1CV8C",					Истина);
	ПроверяемыеПриложения.Вставить("WebClient",				Истина);
	ПроверяемыеПриложения.Вставить("COMConnection",			Истина);
	ПроверяемыеПриложения.Вставить("WSConnection",			Истина);
	ПроверяемыеПриложения.Вставить("BackgroundJob",			Истина);
	ПроверяемыеПриложения.Вставить("SystemBackgroundJob",	Истина);

	МассивСеансов				= ПолучитьСеансыИнформационнойБазы();
	НаименьшаяДатаНачалаСеанса	= ПолучитьТекущийСеансИнформационнойБазы().НачалоСеанса;

	Для Каждого Сеанс Из МассивСеансов Цикл
		Если Сеанс.НачалоСеанса >= НаименьшаяДатаНачалаСеанса Или ПроверяемыеПриложения.Получить(Сеанс.ИмяПриложения) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НаименьшаяДатаНачалаСеанса = Сеанс.НачалоСеанса;
	КонецЦикла;
	НаименьшаяДатаНачалаСеанса = ОкругленнаяДатаНачалаСеанса(НаименьшаяДатаНачалаСеанса);

	// Пометка устаревших версий расширений.
	Пока Истина Цикл
		ДругаяВерсия = ДругаяВерсияРасширений(НаименьшаяДатаНачалаСеанса);
		Если Не ЗначениеЗаполнено(ДругаяВерсия) Тогда
			Прервать;
		КонецЕсли;

		Блокировка			= Новый БлокировкаДанных;
		ЭлементБлокировки	= Блокировка.Добавить("Справочник.ВерсииРасширений");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ДругаяВерсия);

		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			Объект = СлужебныйЭлемент(ДругаяВерсия);

			Если Объект <> Неопределено И Объект.ДатаПоследнегоИспользования < НаименьшаяДатаНачалаСеанса Тогда
				Объект.ПометкаУдаления = Истина;
				Объект.Записать();
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;

	ОтключитьРегламентноеЗаданиеЕслиТребуется();
КонецПроцедуры

Процедура ВключитьЗаданиеУдалениеУстаревшихПараметровРаботыВерсийРасширений(Включить) Экспорт
	РегламентныеЗаданияСервер.РЗ_УстановитьИспользованиеПредопределенногоРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.УдалениеУстаревшихПараметровРаботыВерсийРасширений, Включить);
КонецПроцедуры

Функция ВсеРасширенияПодключены() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	КоличествоРасширений				= РасширенияКонфигурации.Получить().Количество();
	КоличествоПодключенныхРасширений	= РасширенияКонфигурации.Получить(, ИсточникРасширенийКонфигурации.СеансАктивные).Количество();

	Возврат КоличествоРасширений = КоличествоПодключенныхРасширений;
КонецФункции

Функция КонтрольныеСуммыРасширений(Расширения, СвойстваПодключения = "", ВключаяКонфигурацию = Истина)
	Список = Новый СписокЗначений;

	Для Каждого Расширение Из Расширения Цикл
		Список.Добавить(КонтрольнаяСуммаРасширения(Расширение, СвойстваПодключения));
	КонецЦикла;

	Если ВключаяКонфигурацию И Список.Количество() <> 0 Тогда
		КонтрольнаяСумма = "#" + Метаданные.Имя + " (" + Метаданные.Версия + ")";
		Список.Добавить(КонтрольнаяСумма);
	КонецЕсли;

	КонтрольныеСуммы = "";
	Для Каждого Элемент Из Список Цикл
		КонтрольныеСуммы = КонтрольныеСуммы + Символы.ПС + Элемент.Значение;
	КонецЦикла;

	Возврат СокрЛ(КонтрольныеСуммы);
КонецФункции

Функция КонтрольнаяСуммаРасширения(Расширение, СвойстваПодключения = "")
	КонтрольнаяСумма = Расширение.Имя + " (" + Расширение.Версия + ") " + Base64Строка(Расширение.ХешСумма);

	Если ЗначениеЗаполнено(СвойстваПодключения) Тогда
		КонтрольнаяСумма = КонтрольнаяСумма + " БезопасныйРежим:" + Расширение.БезопасныйРежим;
	КонецЕсли;

	Если СвойстваПодключения = "Все" Тогда
		КонтрольнаяСумма = КонтрольнаяСумма
			+ " ПередаватьВПодчиненныеУзлыРИБ:" + Расширение.ИспользуетсяВРаспределеннойИнформационнойБазе
			+ " Активно:" + Расширение.Активно;
	КонецЕсли;

	Возврат КонтрольнаяСумма;
КонецФункции

Функция ВерсияРасширений()
	ОписаниеРасширений = ПараметрыСеанса.ПодключенныеРасширения;
	Если Не ЗначениеЗаполнено(ОписаниеРасширений) Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;

	Запрос			= Новый Запрос;
	Запрос.Текст	=
	"ВЫБРАТЬ
	|	ВерсииРасширений.Ссылка КАК Ссылка,
	|	ВерсииРасширений.ОписаниеМетаданных КАК ОписаниеРасширений
	|ИЗ
	|	Справочник.ВерсииРасширений КАК ВерсииРасширений
	|ГДЕ
	|	НЕ ВерсииРасширений.ПометкаУдаления";

	// Если в другом сеансе создается новая версия, тогда нужно дождаться
	// окончания создания, чтобы избежать очереди исключительных блокировок.
	Блокировка				= Новый БлокировкаДанных;
	ЭлементБлокировки		= Блокировка.Добавить("Справочник.ВерсииРасширений");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Справочники.ВерсииРасширений.ПолучитьСсылку(Новый УникальныйИдентификатор("61ce6265-abb2-11ea-87d6-b06ebfbf08c7")));
	ЭлементБлокировки.Режим	= РежимБлокировкиДанных.Разделяемый;
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Выборка = Запрос.Выполнить().Выбрать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ВызватьИсключение;
	КонецПопытки;

	Если ВерсияНайдена(Выборка, ОписаниеРасширений) Тогда
		ВерсияРасширений = Выборка.Ссылка;
	Иначе
		// Создание новой версии расширений.
		ОкругленнаяДатаНачалаСеанса	= ОкругленнаяДатаНачалаСеанса();
		Блокировка					= Новый БлокировкаДанных;
		ЭлементБлокировки			= Блокировка.Добавить("Справочник.ВерсииРасширений");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Справочники.ВерсииРасширений.ПолучитьСсылку(Новый УникальныйИдентификатор("61ce6265-abb2-11ea-87d6-b06ebfbf08c7")));
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			// Повторная проверка, что версия еще не создана,
			// что маловероятно, но возможно между транзакциями.
			РезультатЗапроса	= Запрос.Выполнить();
			Выборка				= РезультатЗапроса.Выбрать();
			Если ВерсияНайдена(Выборка, ОписаниеРасширений) Тогда
				ВерсияРасширений = Выборка.Ссылка;
			Иначе
				Выборка = РезультатЗапроса.Выбрать();
				Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
					ВключитьЗаданиеУдалениеУстаревшихПараметровРаботыВерсийРасширений(Истина);
				КонецЕсли;
				Объект								= СлужебныйЭлемент();
				Объект.ОписаниеМетаданных			= ОписаниеРасширений;
				Объект.ДатаПоследнегоИспользования	= ОкругленнаяДатаНачалаСеанса;
				Объект.Записать();
				ВерсияРасширений					= Объект.Ссылка;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();

			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;

	Возврат ВерсияРасширений;
КонецФункции

Функция ВерсияНайдена(Выборка, ОписаниеРасширений)
	Пока Выборка.Следующий() Цикл
		Если Выборка.ОписаниеРасширений = ОписаниеРасширений Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

Функция ОкругленнаяДатаНачалаСеанса(НачалоСеанса = '00010101')
	Если ЗначениеЗаполнено(НачалоСеанса) Тогда
		Возврат НачалоЧаса(НачалоСеанса);
	КонецЕсли;

	Возврат НачалоЧаса(ПолучитьТекущийСеансИнформационнойБазы().НачалоСеанса);
КонецФункции

Функция СлужебныйЭлемент(Ссылка = Неопределено)
	Если Ссылка = Неопределено Тогда
		ЭлементСправочника	= СоздатьЭлемент();
		Запрос			= Новый Запрос;
		Запрос.Текст	=
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ВерсииРасширений.Код), 0) КАК МаксимальныйНомер
		|ИЗ
		|	Справочник.ВерсииРасширений КАК ВерсииРасширений";
		Выборка					= Запрос.Выполнить().Выбрать();
		ЭлементСправочника.Код	= ?(Выборка.Следующий(), Выборка.МаксимальныйНомер, 0) + 1;
	Иначе
		ЭлементСправочника = Ссылка.ПолучитьОбъект();
		Если ЭлементСправочника = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	ЭлементСправочника.ДополнительныеСвойства.Вставить("НеВыполнятьКонтрольУдаляемых");
	ЭлементСправочника.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
	ЭлементСправочника.ОбменДанными.Получатели.АвтоЗаполнение	= Ложь;
	ЭлементСправочника.ОбменДанными.Загрузка					= Истина;

	Возврат ЭлементСправочника;
КонецФункции

Функция ДругаяВерсияРасширений(НаименьшаяДатаНачалаСеанса = '39991231')
	Запрос			= Новый Запрос;
	Запрос.Текст	=
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВерсииРасширений.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВерсииРасширений КАК ВерсииРасширений
	|ГДЕ
	|	ВерсииРасширений.Ссылка <> &ВерсияРасширений
	|	И ВерсииРасширений.ДатаПоследнегоИспользования < &НаименьшаяДатаНачалаСеанса
	|	И НЕ ВерсииРасширений.ПометкаУдаления";
	Запрос.УстановитьПараметр("ВерсияРасширений", ПараметрыСеанса.ВерсияРасширений);
	Запрос.УстановитьПараметр("НаименьшаяДатаНачалаСеанса", НаименьшаяДатаНачалаСеанса);

	// Если справочник ВерсииРасширений изменяется в другом сеансе,
	// тогда нужно дождаться окончания изменений.
	Блокировка				= Новый БлокировкаДанных;
	ЭлементБлокировки		= Блокировка.Добавить("Справочник.ВерсииРасширений");
	ЭлементБлокировки.Режим	= РежимБлокировкиДанных.Разделяемый;

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Выборка = Запрос.Выполнить().Выбрать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

Процедура ОтключитьРегламентноеЗаданиеЕслиТребуется()
	// Отключение регламентного задания, если осталась только одна версия расширений.
	Блокировка				= Новый БлокировкаДанных;
	ЭлементБлокировки		= Блокировка.Добавить("Справочник.ВерсииРасширений");
	ЭлементБлокировки.Режим	= РежимБлокировкиДанных.Разделяемый;

	Запрос			= Новый Запрос;
	Запрос.Текст	=
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ВерсииРасширений.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВерсииРасширений КАК ВерсииРасширений
	|ГДЕ
	|	НЕ ВерсииРасширений.ПометкаУдаления";

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 0 Или Выборка.Количество() = 1 И Выборка.Следующий() И Выборка.Ссылка = ПараметрыСеанса.ВерсияРасширений Тогда
			ВключитьЗаданиеУдалениеУстаревшихПараметровРаботыВерсийРасширений(Ложь);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Функция ИзмененияВСоставеРасширений(ТекущийСостав, НовыйСостав)
	СоответствиеНовых	= Новый Соответствие;
	Для Каждого Расширение Из СтрРазделить(НовыйСостав, Символы.ПС) Цикл
		Если СтрНачинаетсяС(Расширение, "#") Или Не ЗначениеЗаполнено(Расширение) Тогда
			Продолжить;
		КонецЕсли;
		ИмяИХеш = СтрРазделить(Расширение, " ");
		СоответствиеНовых.Вставить(ИмяИХеш[0], Расширение);
	КонецЦикла;

	СоответствиеТекущих	= Новый Соответствие;
	Для Каждого Расширение Из СтрРазделить(ТекущийСостав, Символы.ПС) Цикл
		Если СтрНачинаетсяС(Расширение, "#") Или Не ЗначениеЗаполнено(Расширение) Тогда
			Продолжить;
		КонецЕсли;
		ИмяИХеш = СтрРазделить(Расширение, " ");
		СоответствиеТекущих.Вставить(ИмяИХеш[0], Расширение);
	КонецЦикла;

	Добавлено = 0;
	Изменено  = 0;
	СписокНовых = Новый Массив;
	Для Каждого НовоеРасширение Из СоответствиеНовых Цикл
		НайденныйЭлемент = СоответствиеТекущих[НовоеРасширение.Ключ];
		Если НайденныйЭлемент = Неопределено Тогда
			Добавлено = Добавлено + 1;
			СписокНовых.Добавить(НовоеРасширение.Ключ);
		ИначеЕсли НайденныйЭлемент <> НовоеРасширение.Значение Тогда
			Изменено = Изменено + 1;
			СоответствиеТекущих.Удалить(НовоеРасширение.Ключ);
		Иначе
			СоответствиеТекущих.Удалить(НовоеРасширение.Ключ);
		КонецЕсли;
	КонецЦикла;
	Удалено = СоответствиеТекущих.Количество();

	Результат = Новый Структура;
	Результат.Вставить("Добавлено", Добавлено);
	Результат.Вставить("Изменено", Изменено);
	Результат.Вставить("Удалено", Удалено);
	Результат.Вставить("СписокНовых", СписокНовых);

	Возврат Результат;
КонецФункции

Процедура УстановитьНачальноеЗарегистрированноеСостояние(Источник, Приемник = Неопределено)
	Если Приемник = Неопределено Тогда
		ОбновитьЗарегистрированноеСостояниеВПараметреСеанса(Источник);
	Иначе
		Приемник.Вставить("ОсновныеЗарегистрированноеСостояние",    Источник.ОсновныеСостояние);
		Приемник.Вставить("ИсправленияЗарегистрированноеСостояние", Источник.ИсправленияСостояние);
	КонецЕсли;
КонецПроцедуры

Процедура ЗарегистрироватьИзменениеУстановленныхРасширений(УстановленныеРасширения, БезИзменений)
	Если ПараметрыСеанса.УстановленныеРасширения.ОсновныеЗарегистрированноеСостояние = УстановленныеРасширения.ОсновныеСостояние И ПараметрыСеанса.УстановленныеРасширения.ИсправленияЗарегистрированноеСостояние = УстановленныеРасширения.ИсправленияСостояние Тогда
		Возврат;
	КонецЕсли;

	Комментарий = СтрШаблон(
		"1. Было:
		           |- расширения:
		           |""%1""
		           |- исправления:
		           |""%2""
		           |2. Стало:
		           |- расширения:
		           |""%3""
		           |- исправления:
		           |""%4""
		           |3. Новый состав, как при запуске сеанса: %5",
		ПараметрыСеанса.УстановленныеРасширения.ОсновныеЗарегистрированноеСостояние,
		ПараметрыСеанса.УстановленныеРасширения.ИсправленияЗарегистрированноеСостояние,
		УстановленныеРасширения.ОсновныеСостояние,
		УстановленныеРасширения.ИсправленияСостояние,
		?(БезИзменений, "Да", "Нет"));

	ЗаписьЖурналаРегистрации("Расширения конфигурации.Обнаружено изменение установленных расширений'", УровеньЖурналаРегистрации.Информация,,, Комментарий);

	ОбновитьЗарегистрированноеСостояниеВПараметреСеанса(УстановленныеРасширения);
КонецПроцедуры

Процедура ОбновитьЗарегистрированноеСостояниеВПараметреСеанса(УстановленныеРасширения)
	Свойства = Новый Структура(ПараметрыСеанса.УстановленныеРасширения);
	Свойства.ОсновныеЗарегистрированноеСостояние	= УстановленныеРасширения.ОсновныеСостояние;
	Свойства.ИсправленияЗарегистрированноеСостояние	= УстановленныеРасширения.ИсправленияСостояние;

	ПараметрыСеанса.УстановленныеРасширения			= Новый ФиксированнаяСтруктура(Свойства);
КонецПроцедуры

Функция ОписаниеРасширенийДляЖурнала() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Подключенные", КонтрольныеСуммыРасширений(РасширенияКонфигурации.Получить(, ИсточникРасширенийКонфигурации.СеансАктивные), "Все", Ложь));
	Результат.Вставить("Отключенные", КонтрольныеСуммыРасширений(РасширенияКонфигурации.Получить(, ИсточникРасширенийКонфигурации.СеансОтключенные), "Все", Ложь));
	Результат.Вставить("Все", КонтрольныеСуммыРасширений(РасширенияКонфигурации.Получить(), "Все", Ложь));

	Возврат Результат;
КонецФункции

#КонецЕсли
