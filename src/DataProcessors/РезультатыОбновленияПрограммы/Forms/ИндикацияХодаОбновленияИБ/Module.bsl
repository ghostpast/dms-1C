///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Перем ПараметрыПродолжения;
&НаКлиенте
Перем РезультатВыполненияОбновления;
&НаКлиенте
Перем ОбработкаЗавершения;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ВыполняетсяОбновлениеВерсииИБ	= Истина;
	ВремяНачалаОбновления			= ТекущаяДатаСеанса();

	КлиентСервер  = Не БазоваяПодсистемаСервер.ОН_ИнформационнаяБазаФайловая();

	ПрогрессВыполнения = 5;

	РежимОбновленияДанных						= ОбновлениеВерсииИБСервер.сОИБ_РежимОбновленияДанных();

	ТолькоОбновлениеПараметровРаботыПрограммы	= Не ОбновлениеВерсииИБСерверПовтИсп.сОИБ_НеобходимоОбновлениеИнформационнойБазы();

	Если ТолькоОбновлениеПараметровРаботыПрограммы Тогда
		Заголовок													= "Обновление параметров работы программы";
		Элементы.РежимЗапуска.ТекущаяСтраница						= Элементы.ОбновлениеПараметровРаботыПрограммы;
	ИначеЕсли РежимОбновленияДанных = "НачальноеЗаполнение" Тогда
		Заголовок													= "Начальное заполнение данных";
		Элементы.РежимЗапуска.ТекущаяСтраница						= Элементы.НачальноеЗаполнение;
	ИначеЕсли РежимОбновленияДанных = "ПереходСДругойПрограммы" Тогда
		Заголовок													= "Переход с другой программы";
		Элементы.РежимЗапуска.ТекущаяСтраница						= Элементы.ПереходСДругойПрограммы;
		Элементы.ТекстСообщенияПереходСДругойПрограммы.Заголовок	= СтрШаблон(Элементы.ТекстСообщенияПереходСДругойПрограммы.Заголовок, Метаданные.Синоним);
	Иначе
		Заголовок													= "Обновление версии программы";
		Элементы.РежимЗапуска.ТекущаяСтраница						= Элементы.ОбновлениеВерсииПрограммы;
		Элементы.ТекстСообщенияОбновляемаяКонфигурация.Заголовок	= СтрШаблон(Элементы.ТекстСообщенияОбновляемаяКонфигурация.Заголовок, Метаданные.Версия);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ВыполняетсяОбновлениеВерсииИБ Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТехническаяИнформацияНажатие(Элемент)
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ЗапускатьНеВФоне", Истина);
	ПараметрыОтбора.Вставить("ДатаНачала", ВремяНачалаОбновления);
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыОтбора, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОбновитьПараметрыРаботыПрограммы(Параметры) Экспорт
	ПараметрыПродолжения = Параметры;
	ПодключитьОбработчикОжидания("НачатьЗагрузкуПараметровРаботыПрограммы", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗагрузкуПараметровРаботыПрограммы()
	РезультатВыполнения		= ЗагрузитьПараметрыРаботыПрограммыВФоне();

	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") И РезультатВыполнения.Свойство("ОшибкаУдаленияИсправлений") Тогда
		СообщениеОНеудачномОбновлении(РезультатВыполнения, Неопределено);

		Возврат;
	КонецЕсли;

	ДополнительныеПараметры	= Новый Структура("КраткоеПредставлениеОшибки, ПодробноеПредставлениеОшибки");

	Если РезультатВыполнения = "ТребуетсяПерезапускСеанса" Тогда
		ПрекратитьРаботуСистемы(Истина);
	ИначеЕсли РезультатВыполнения = "ЗагрузкаПараметровРаботыПрограммыНеТребуется" Тогда
		Результат = Новый Структура("Статус", РезультатВыполнения);
		НачатьОбновлениеПараметровРаботыПрограммы(Результат, ДополнительныеПараметры);

		Возврат;
	ИначеЕсли РезультатВыполнения = "ЗагрузкаИОбновлениеПараметровРаботыПрограммыНеТребуются" Тогда
		Результат = Новый Структура("Статус", РезультатВыполнения);
		НачатьОбновлениеПараметровРаботыВерсийРасширений(Результат, ДополнительныеПараметры);

		Возврат;
	КонецЕсли;

	ОповещениеОЗавершении								= Новый ОписаниеОповещения("НачатьОбновлениеПараметровРаботыПрограммы", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания									= БазоваяПодсистемаКлиент.ДО_ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания				= Ложь;
	ПараметрыОжидания.Интервал							= 1;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения		= Истина;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения	= Новый ОписаниеОповещения("ПрогрессОбновленияПараметровРаботыПрограммы", ЭтотОбъект); 
	БазоваяПодсистемаКлиент.ДО_ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПараметрыРаботыПрограммыВФоне()
	ОбновитьПовторноИспользуемыеЗначения();

	ПараметрыЗапуска = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");

	// Зарезервировано для новых подсистем

	Если Не РегистрыСведений.ПараметрыРаботыПрограммы.ТребуетсяЗагрузитьПараметрыРаботыПрограммы() Тогда
		Возврат "ЗагрузкаПараметровРаботыПрограммыНеТребуется";
	КонецЕсли;

	// Вызов длительной операции (обычно в фоновом задании).
	Возврат РегистрыСведений.ПараметрыРаботыПрограммы.ЗагрузитьПараметрыРаботыПрограммыВФоне(0, УникальныйИдентификатор, Истина);
КонецФункции

&НаКлиенте
Процедура ПрогрессОбновленияПараметровРаботыПрограммы(Прогресс, ДополнительныеПараметры) Экспорт
	Если Прогресс = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Прогресс.Статус <> "Выполняется" Тогда
		Возврат;
	КонецЕсли;

	Если Прогресс.Прогресс <> Неопределено Тогда
		Если ТолькоОбновлениеПараметровРаботыПрограммы Тогда
			ПрогрессВыполнения = 5 + (90 * Прогресс.Прогресс.Процент / 100);
		Иначе
			ПрогрессВыполнения = 5 + (5 * Прогресс.Прогресс.Процент / 100);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачатьОбновлениеПараметровРаботыПрограммы(Результат, ДополнительныеПараметры) Экспорт
	Попытка
		ОбработанныйРезультат = ОбработанныйРезультатДлительнойОперации(Результат, "ЗагрузкаПараметровРаботыПрограммы");
	Исключение
		ИнформацияОбОшибке		= ИнформацияОбОшибке();
		ОбработанныйРезультат	= Новый Структура;
		ОбработанныйРезультат.Вставить("КраткоеПредставлениеОшибки",	ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ОбработанныйРезультат.Вставить("ПодробноеПредставлениеОшибки",	ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;

	Если ЗначениеЗаполнено(ОбработанныйРезультат.КраткоеПредставлениеОшибки) Тогда
		СообщениеОНеудачномОбновлении(ОбработанныйРезультат, Неопределено);

		Возврат;
	КонецЕсли;

	РезультатВыполнения = ОбновитьПараметрыРаботыПрограммыВФоне();

	ДополнительныеПараметры	= Новый Структура("КраткоеПредставлениеОшибки, ПодробноеПредставлениеОшибки");

	ОповещениеОЗавершении								= Новый ОписаниеОповещения("НачатьОбновлениеПараметровРаботыВерсийРасширений", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания									= БазоваяПодсистемаКлиент.ДО_ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания				= Ложь;
	ПараметрыОжидания.Интервал							= 1;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения		= Истина;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения	= Новый ОписаниеОповещения("ПрогрессОбновленияПараметровРаботыПрограммы", ЭтотОбъект); 
	БазоваяПодсистемаКлиент.ДО_ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
КонецПроцедуры

&НаСервере
Функция ОбновитьПараметрыРаботыПрограммыВФоне()
	// Вызов длительной операции (обычно в фоновом задании).
	Возврат РегистрыСведений.ПараметрыРаботыПрограммы.ОбновитьПараметрыРаботыПрограммыВФоне(0, УникальныйИдентификатор, Истина);
КонецФункции

&НаКлиенте
Процедура НачатьОбновлениеПараметровРаботыВерсийРасширений(Результат, ДополнительныеПараметры) Экспорт
	Попытка
		ОбработанныйРезультат = ОбработанныйРезультатДлительнойОперации(Результат, "ОбновлениеПараметровРаботыПрограммы");
	Исключение
		ИнформацияОбОшибке		= ИнформацияОбОшибке();
		ОбработанныйРезультат	= Новый Структура;
		ОбработанныйРезультат.Вставить("КраткоеПредставлениеОшибки",	ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ОбработанныйРезультат.Вставить("ПодробноеПредставлениеОшибки",	ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;

	Если ЗначениеЗаполнено(ОбработанныйРезультат.КраткоеПредставлениеОшибки) Тогда
		СообщениеОНеудачномОбновлении(ОбработанныйРезультат, Неопределено);

		Возврат;
	КонецЕсли;

	РезультатВыполнения = ОбновитьПараметрыРаботыВерсийРасширенийВФоне();

	Если РезультатВыполнения = "ОбновлениеПараметровРаботыВерсийРасширенийНеТребуется" Тогда
		Результат = Новый Структура("Статус", РезультатВыполнения);
		ЗавершитьОбновлениеПараметровРаботыПрограммы(Результат, ДополнительныеПараметры);

		Возврат;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура("КраткоеПредставлениеОшибки, ПодробноеПредставлениеОшибки");

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьОбновлениеПараметровРаботыПрограммы", ЭтотОбъект, ДополнительныеПараметры);

	ПараметрыОжидания									= БазоваяПодсистемаКлиент.ДО_ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания				= Ложь;
	ПараметрыОжидания.Интервал							= 1;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения		= Истина;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения	= Новый ОписаниеОповещения("ПрогрессОбновленияПараметровРаботыПрограммы", ЭтотОбъект); 
	БазоваяПодсистемаКлиент.ДО_ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
КонецПроцедуры

&НаСервере
Функция ОбновитьПараметрыРаботыВерсийРасширенийВФоне()
	// Вызов длительной операции (обычно в фоновом задании).
	Возврат РегистрыСведений.ПараметрыРаботыПрограммы.ОбновитьПараметрыРаботыВерсийРасширенийВФоне(0, УникальныйИдентификатор, Истина);
КонецФункции

&НаКлиенте
Процедура ЗавершитьОбновлениеПараметровРаботыПрограммы(Результат, ДополнительныеПараметры) Экспорт
	Попытка
		ОбработанныйРезультат = ОбработанныйРезультатДлительнойОперации(Результат, "ОбновлениеПараметровРаботыВерсийРасширений");
	Исключение
		ИнформацияОбОшибке		= ИнформацияОбОшибке();
		ОбработанныйРезультат	= Новый Структура;
		ОбработанныйРезультат.Вставить("КраткоеПредставлениеОшибки",	ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ОбработанныйРезультат.Вставить("ПодробноеПредставлениеОшибки",	ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;

	Если ЗначениеЗаполнено(ОбработанныйРезультат.КраткоеПредставлениеОшибки) Тогда
		СообщениеОНеудачномОбновлении(ОбработанныйРезультат, Неопределено);

		Возврат;
	КонецЕсли;

	ПараметрыПродолжения.ПолученныеПараметрыКлиента.Вставить("НеобходимоОбновлениеПараметровРаботыПрограммы");
	ПараметрыПродолжения.Вставить("КоличествоПолученныхПараметровКлиента", ПараметрыПродолжения.ПолученныеПараметрыКлиента.Количество());

	ОбновитьПовторноИспользуемыеЗначения();

	Попытка
		ПараметрыКлиента = БазоваяПодсистемаКлиентПовтИсп.СП_ПараметрыРаботыКлиентаПриЗапуске();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ДополнительныеПараметры.Вставить("КраткоеПредставлениеОшибки",		ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ДополнительныеПараметры.Вставить("ПодробноеПредставлениеОшибки",	ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		СообщениеОНеудачномОбновлении(ДополнительныеПараметры, Неопределено);

		Возврат;
	КонецПопытки;

	Если Не ТолькоОбновлениеПараметровРаботыПрограммы Тогда
		ВыполнитьОбработкуОповещения(ПараметрыПродолжения.ОбработкаПродолжения);

		Возврат;
	КонецЕсли;

	Если ПараметрыКлиента.Свойство("НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы") Тогда
		Попытка
			ОбновлениеВерсииИБВызовСервера.сОИБ_ВыполнитьОбновлениеИнформационнойБазы(Истина);
		Исключение
			ИнформацияОбОшибке	= ИнформацияОбОшибке();
			ДополнительныеПараметры.Вставить("КраткоеПредставлениеОшибки",		ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			ДополнительныеПараметры.Вставить("ПодробноеПредставлениеОшибки",	ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
		Если ЗначениеЗаполнено(ДополнительныеПараметры.КраткоеПредставлениеОшибки) Тогда
			СообщениеОНеудачномОбновлении(ДополнительныеПараметры, Неопределено);

			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если БлокировкаИБ <> Неопределено И БлокировкаИБ.Свойство("СнятьБлокировкуФайловойБазы") Тогда
		ОбновлениеВерсииИБВызовСервера.сОИБ_СнятьБлокировкуФайловойБазы();
	КонецЕсли;

	ЗакрытьФорму(Ложь, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформационнуюБазу() Экспорт
	ПрогрессВыполнения = 10;
	ПодключитьОбработчикОжидания("НачатьОбновлениеИнформационнойБазы", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачатьОбновлениеИнформационнойБазы()
	ВремяНачалаОбновления = БазоваяПодсистемаКлиент.ОН_ДатаСеанса();

	РезультатОбновленияИБ = ОбновитьИнформационнуюБазуВФоне();

	Если Не РезультатОбновленияИБ.Свойство("АдресРезультата") Тогда
		ЗавершитьОбновлениеИнформационнойБазы(РезультатОбновленияИБ, Неопределено);

		Возврат;
	КонецЕсли;

	Если КлиентСервер Тогда
		ПроцедураПродолжения = "ЗарегистрироватьДанныеДляОтложенногоОбновления";
	Иначе
		ПроцедураПродолжения = "ЗавершитьОбновлениеИнформационнойБазы";
	КонецЕсли;

	ОповещениеОЗавершении								= Новый ОписаниеОповещения(ПроцедураПродолжения, ЭтотОбъект);
	ПараметрыОжидания									= БазоваяПодсистемаКлиент.ДО_ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания				= Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения		= Истина;
	ПараметрыОжидания.ВыводитьСообщения					= Истина;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения	= Новый ОписаниеОповещения("ПрогрессОбновленияИнформационнойБазы", ЭтотОбъект); 
	БазоваяПодсистемаКлиент.ДО_ОжидатьЗавершение(РезультатОбновленияИБ, ОповещениеОЗавершении, ПараметрыОжидания);
КонецПроцедуры

&НаСервере
Функция ОбновитьИнформационнуюБазуВФоне()
	Результат		= ОбновлениеВерсииИБСервер.сОИБ_ОбновитьИнформационнуюБазуВФоне(УникальныйИдентификатор, БлокировкаИБ);
	БлокировкаИБ	= Результат.БлокировкаИБ;

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПрогрессОбновленияИнформационнойБазы(Прогресс, ДополнительныеПараметры) Экспорт
	Если Прогресс = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Прогресс.Статус = "Ошибка" Тогда
		Возврат;
	КонецЕсли;

	Если Прогресс.Свойство("ДополнительныеПараметры") И Прогресс.ДополнительныеПараметры.Свойство("ОбменДанными") Тогда
		Возврат;
	КонецЕсли;

	Если Прогресс.Прогресс <> Неопределено Тогда
		ПрогрессВыполнения = 10 + (90 * Прогресс.Прогресс.Процент / 100);
	КонецЕсли;

	ОбработатьОшибкуПравилРегистрации(Прогресс.Сообщения);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбновлениеИнформационнойБазы(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Или Результат.Статус = "Отменено" Тогда
		ПризнакВыполненияОбработчиков = БлокировкаИБ.Ошибка;
	ИначеЕсли Результат.Статус = "Выполнено"  Тогда
		РезультатОбновления = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ТипЗнч(РезультатОбновления) = Тип("Структура") Тогда
			Если РезультатОбновления.Свойство("КраткоеПредставлениеОшибки") И РезультатОбновления.Свойство("ПодробноеПредставлениеОшибки") Тогда
				Результат.КраткоеПредставлениеОшибки	= РезультатОбновления.КраткоеПредставлениеОшибки;
				Результат.ПодробноеПредставлениеОшибки	= РезультатОбновления.ПодробноеПредставлениеОшибки;
			Иначе
				ПризнакВыполненияОбработчиков	= РезультатОбновления.Результат;
				УстановитьПараметрыСеансаИзФоновогоЗадания(РезультатОбновления.ПараметрыКлиентаНаСервере);
				ПрогрессВыполнения				= 100;
			КонецЕсли;
		Иначе
			ПризнакВыполненияОбработчиков = РезультатОбновления;
		КонецЕсли;

		ОбработатьОшибкуПравилРегистрации(Результат.Сообщения);
	Иначе // ошибка
		ПризнакВыполненияОбработчиков = БлокировкаИБ.Ошибка;
	КонецЕсли;

	Если ПризнакВыполненияОбработчиков = "ЗаблокироватьВыполнениеРегламентныхЗаданий" Тогда
		ПерезапускСБлокировкойВыполненияРегламентныхЗаданий();
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДокументОписаниеОбновлений",		Неопределено);
	ДополнительныеПараметры.Вставить("КраткоеПредставлениеОшибки",		Результат.КраткоеПредставлениеОшибки);
	ДополнительныеПараметры.Вставить("ПодробноеПредставлениеОшибки",	Результат.ПодробноеПредставлениеОшибки);
	ДополнительныеПараметры.Вставить("ВремяНачалаОбновления",			ВремяНачалаОбновления);
	ДополнительныеПараметры.Вставить("ВремяОкончанияОбновления",		БазоваяПодсистемаКлиент.ОН_ДатаСеанса());
	ДополнительныеПараметры.Вставить("ПризнакВыполненияОбработчиков",	ПризнакВыполненияОбработчиков);

	Если ПризнакВыполненияОбработчиков = "ОшибкаУстановкиМонопольногоРежима" Тогда
		ОбновитьИнформационнуюБазуПриОшибкеУстановкиМонопольногоРежима(ДополнительныеПараметры);

		Возврат;
	КонецЕсли;

	СнятьБлокировкуФайловойБазы = Ложь;
	Если БлокировкаИБ.Свойство("СнятьБлокировкуФайловойБазы", СнятьБлокировкуФайловойБазы) Тогда
		Если СнятьБлокировкуФайловойБазы Тогда
			ОбновлениеВерсииИБВызовСервера.сОИБ_СнятьБлокировкуФайловойБазы();
		КонецЕсли;
	КонецЕсли;

	ОбновитьИнформационнуюБазуЗавершение(ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкуПравилРегистрации(СообщенияПользователю)
	Если СообщенияПользователю <> Неопределено Тогда
		Для Каждого СообщениеПользователю Из СообщенияПользователю Цикл
			НачалоСтроки = "ОбменДанными=";
			Если СтрНачинаетсяС(СообщениеПользователю.Текст, НачалоСтроки) Тогда
				ИмяПланаОбмена = Сред(СообщениеПользователю.Текст, СтрДлина(НачалоСтроки) + 1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформационнуюБазуПриОшибкеУстановкиМонопольногоРежима(ДополнительныеПараметры)
	Если ДополнительныеПараметры.ПризнакВыполненияОбработчиков <> "ОшибкаУстановкиМонопольногоРежима" Тогда
		ОбновитьИнформационнуюБазуЗавершение(ДополнительныеПараметры);

		Возврат;
	КонецЕсли;

	СообщениеОНеудачномОбновлении(ДополнительныеПараметры, Неопределено);

	Возврат;

	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформационнуюБазуПриОшибкеУстановкиМонопольногоРежимаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	Если Отказ <> Ложь Тогда
		ЗакрытьФорму(Истина, Ложь);

		Возврат;
	КонецЕсли;

	УстановитьПараметрыБлокировкиИБПриОшибкеУстановкиМонопольногоРежима();
	НачатьОбновлениеИнформационнойБазы();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыБлокировкиИБПриОшибкеУстановкиМонопольногоРежима()
	Если БлокировкаИБ = Неопределено Тогда
		БлокировкаИБ = Новый Структура;
	КонецЕсли;

	БлокировкаИБ.Вставить("Установлена",					Ложь);
	БлокировкаИБ.Вставить("СнятьБлокировкуФайловойБазы",	Истина);
	БлокировкаИБ.Вставить("Ошибка",							Неопределено);
	БлокировкаИБ.Вставить("ОперативноеОбновление",			Неопределено);
	БлокировкаИБ.Вставить("КлючЗаписи",						Неопределено);
	БлокировкаИБ.Вставить("РежимОтладки",					Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформационнуюБазуЗавершение(ДополнительныеПараметры)
	Если ЗначениеЗаполнено(ДополнительныеПараметры.КраткоеПредставлениеОшибки) Тогда
		ВремяОкончанияОбновления = БазоваяПодсистемаКлиент.ОН_ДатаСеанса();
		СообщениеОНеудачномОбновлении(ДополнительныеПараметры, ВремяОкончанияОбновления);

		Возврат;
	КонецЕсли;

	ОбновитьИнформационнуюБазуЗавершениеСервер(ДополнительныеПараметры);
	ОбновитьПовторноИспользуемыеЗначения();

	ЗакрытьФорму(Ложь, Ложь);
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформационнуюБазуЗавершениеСервер(ДополнительныеПараметры)
	// Если обновление ИБ завершилось - разблокируем ИБ.
	ОбновлениеВерсииИБСервер.сОИБ_РазблокироватьИБ(БлокировкаИБ);
	ОбновлениеВерсииИБСервер.сОИБ_ЗаписатьВремяВыполненияОбновления(ДополнительныеПараметры.ВремяНачалаОбновления, ДополнительныеПараметры.ВремяОкончанияОбновления);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Отказ, Перезапустить)
	ВыполняетсяОбновлениеВерсииИБ = Ложь;
	Закрыть(Новый Структура("Отказ, Перезапустить", Отказ, Перезапустить));
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьДанныеДляОтложенногоОбновления(Результат, ДополнительныеПараметры) Экспорт
	РезультатОбновления = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);

	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗавершитьОбновлениеИнформационнойБазы", ЭтотОбъект, Результат);
	РезультатВыполненияОбновления = Результат;
	Если Результат.Статус <> "Выполнено"
		Или (ТипЗнч(РезультатОбновления) = Тип("Структура") И РезультатОбновления.Свойство("КраткоеПредставлениеОшибки") И РезультатОбновления.Свойство("ПодробноеПредставлениеОшибки")) Тогда
		ВыполнитьОбработкуОповещения(ОбработкаЗавершения, РезультатВыполненияОбновления);

		Возврат;
	КонецЕсли;

	СостояниеРегистрации = ЗаполнениеДанныхДляПараллельногоОтложенногоОбновления();
	Если СостояниеРегистрации.Статус <> "Выполняется" Тогда
		ЗаполнитьЗначенияСвойств(РезультатВыполненияОбновления, СостояниеРегистрации, "Статус,КраткоеПредставлениеОшибки,ПодробноеПредставлениеОшибки");
		ВыполнитьОбработкуОповещения(ОбработкаЗавершения, РезультатВыполненияОбновления);
	Иначе
		ИдентификаторЗадания = СостояниеРегистрации.ИдентификаторЗадания;
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьПроцедурыЗаполненияОтложенныхОбработчиков", 5);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗаполнениеДанныхДляПараллельногоОтложенногоОбновления()
	// Очистка плана обмена ОбновлениеИнформационнойБазы.
	Если Не (БазоваяПодсистемаСерверПовтИсп.СП_ИспользуетсяРИБ("СФильтром") И БазоваяПодсистемаСервер.ОН_ЭтоПодчиненныйУзелРИБ()) Тогда
		Запрос			= Новый Запрос;
		Запрос.Текст	=
		"ВЫБРАТЬ
		|	ОбновлениеИнформационнойБазы.Ссылка КАК Узел
		|ИЗ
		|	ПланОбмена.ОбновлениеИнформационнойБазы КАК ОбновлениеИнформационнойБазы
		|ГДЕ
		|	НЕ ОбновлениеИнформационнойБазы.ЭтотУзел";

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.Узел);
		КонецЦикла;
	КонецЕсли;

	ОписанияБиблиотек		= БазоваяПодсистемаСерверПовтИсп.СП_ОписанияПодсистем().ПоИменам;
	ОбработанныеБиблиотеки	= Новый Массив;

	ВсегоПроцедур = 0;
	Обработчики = ОбновлениеВерсииИБСервер.сОИБ_ОбработчикиДляОтложеннойРегистрацииДанных(Истина);
	Для Каждого Обработчик Из Обработчики Цикл
		Если ОбработанныеБиблиотеки.Найти(Обработчик.ИмяБиблиотеки) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если ОписанияБиблиотек[Обработчик.ИмяБиблиотеки].РежимВыполненияОтложенныхОбработчиков <> "Параллельно" Тогда
			ОбновлениеВерсииИБСервер.сОИБ_ОтметитьРегистрациюОтложенныхОбработчиковОбновления(Обработчик.ИмяБиблиотеки, Истина);
			ОбработанныеБиблиотеки.Добавить(Обработчик.ИмяБиблиотеки);

			Продолжить;
		КонецЕсли;

		ПараллельноСВерсии = ОписанияБиблиотек[Обработчик.ИмяБиблиотеки].ПараллельноеОтложенноеОбновлениеСВерсии;

		Если ЗначениеЗаполнено(ПараллельноСВерсии) И Не СтрНачинаетсяС(Обработчик.Версия, "ОтладкаОбработчика") И (Обработчик.Версия = "*" Или Обработчик.Версия <> "*" И БазоваяПодсистемаКлиентСервер.ОН_СравнитьВерсии(Обработчик.Версия, ПараллельноСВерсии) < 0) Тогда
			Продолжить;
		КонецЕсли;

		ОписаниеОбрабатываемыхДанных = ОбновлениеВерсииИБСервер.сОИБ_НовоеОписаниеОбрабатываемыхДанных(Обработчик.Многопоточный, Истина);
		Если Обработчик.Многопоточный Тогда
			ОписаниеОбрабатываемыхДанных.ПараметрыВыборки = ОбновлениеВерсииИБСервер.ОИБ_ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки();
		КонецЕсли;

		ОписаниеОбрабатываемыхДанных.ИмяОбработчика			= Обработчик.ИмяОбработчика;
		ОписаниеОбрабатываемыхДанных.Очередь				= Обработчик.ОчередьОтложеннойОбработки;
		ОписаниеОбрабатываемыхДанных.ПроцедураЗаполнения	= Обработчик.ПроцедураЗаполненияДанныхОбновления;

		ОписаниеОбрабатываемыхДанных	= Новый ХранилищеЗначения(ОписаниеОбрабатываемыхДанных, Новый СжатиеДанных(9));
		ОбновлениеВерсииИБСервер.сОИБ_УстановитьСвойствоОбработчика(Обработчик.ИмяОбработчика, "ОбрабатываемыеДанные", ОписаниеОбрабатываемыхДанных);

		ВсегоПроцедур = ВсегоПроцедур + 1;
	КонецЦикла;

	// Зарезервировано для новых подсистем

	ХодРегистрации = Новый Структура;
	ХодРегистрации.Вставить("НачальныйПрогресс",	ПрогрессВыполнения);
	ХодРегистрации.Вставить("ВсегоПроцедур",		ВсегоПроцедур);
	ХодРегистрации.Вставить("ВыполненоПроцедур",	0);

	// Снятие блокировки информационной базы и выполнение регистрации на плане обмена.
	ОбновлениеВерсииИБСервер.сОИБ_РазблокироватьИБ(БлокировкаИБ);

	Возврат ЗапуститьПроцедурыЗаполненияОтложенныхОбработчиков();
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьПроцедурыЗаполненияОтложенныхОбработчиков()
	Результат = ПроверитьПроцедурыЗаполненияОтложенныхОбработчиков();

	Если Результат.Статус <> "Выполняется" Тогда
		ЗаполнитьЗначенияСвойств(РезультатВыполненияОбновления, Результат);
		ВыполнитьОбработкуОповещения(ОбработкаЗавершения, РезультатВыполненияОбновления);
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьПроцедурыЗаполненияОтложенныхОбработчиков");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗапуститьПроцедурыЗаполненияОтложенныхОбработчиков()
	ПараметрыВыполнения								= БазоваяПодсистемаСервер.ДО_ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания	= "Управление многопоточной регистрацией данных отложенного обновления";

	ИмяПроцедуры		= "ОбновлениеВерсииИБСервер.сОИБ_ЗапускРегистрацииДанныхОтложенногоОбновления";
	РезультатВыполнения	= БазоваяПодсистемаСервер.ДО_ВыполнитьВФоне(ИмяПроцедуры, УникальныйИдентификатор, ПараметрыВыполнения);

	Возврат ПроверитьПроцедурыЗаполненияОтложенныхОбработчиков(РезультатВыполнения);
КонецФункции

&НаСервере
Функция ПроверитьПроцедурыЗаполненияОтложенныхОбработчиков(РезультатВыполненияУправляющегоФЗ = Неопределено)
	Если РезультатВыполненияУправляющегоФЗ = Неопределено Тогда
		РезультатВыполненияУправляющегоФЗ = БазоваяПодсистемаСервер.ДО_ОперацияВыполнена(ИдентификаторЗадания);
	КонецЕсли;

	Статус = РезультатВыполненияУправляющегоФЗ.Статус;

	Если Статус = "Выполнено" Тогда
		ОбновлениеВерсииИБСервер.сОИБ_ОтметитьРегистрациюОтложенныхОбработчиковОбновления();
	ИначеЕсли Статус = "Ошибка" Или Статус = "Отменено" Тогда
		Группы = ОбновлениеВерсииИБСервер.сОИБ_НовоеОписаниеГруппПотоковРегистрацииДанныхОтложенногоОбновления();
		ОбновлениеВерсииИБСервер.сОИБ_ОтменитьВыполнениеВсехПотоков(Группы);

		Возврат РезультатВыполненияУправляющегоФЗ;
	КонецЕсли;

	// Обновление прогресса.
	ВыполненоПроцедур	= 0;
	Обработчики			= ОбновлениеВерсииИБСервер.сОИБ_ОбработчикиДляОтложеннойРегистрацииДанных();
	Для Каждого Обработчик Из Обработчики Цикл
		ОписаниеОбрабатываемыхДанных = Обработчик.ОбрабатываемыеДанные.Получить();
		Если ОписаниеОбрабатываемыхДанных.Статус = "Выполнено" Тогда
			ВыполненоПроцедур = ВыполненоПроцедур + 1;
		КонецЕсли;
	КонецЦикла;

	ХодРегистрации.ВыполненоПроцедур = ВыполненоПроцедур;
	Если ХодРегистрации.ВсегоПроцедур <> 0 Тогда
		ПрибавкаПрогресса = ХодРегистрации.ВыполненоПроцедур / ХодРегистрации.ВсегоПроцедур * (100 - ХодРегистрации.НачальныйПрогресс);
	Иначе
		ПрибавкаПрогресса = 0;
	КонецЕсли;
	ПрогрессВыполнения = ПрогрессВыполнения + ПрибавкаПрогресса;

	Возврат РезультатВыполненияУправляющегоФЗ;
КонецФункции

&НаКлиенте
Процедура НачатьЗакрытие() Экспорт
	ПодключитьОбработчикОжидания("ПродолжитьЗакрытие", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗакрытие() Экспорт
	ВыполняетсяОбновлениеВерсииИБ = Ложь;

	ЗакрытьФорму(Ложь, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОНеудачномОбновлении(ДополнительныеПараметры, ВремяОкончанияОбновления)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьИнформационнуюБазуДействияПриОшибке", ЭтотОбъект);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КраткоеПредставлениеОшибки",	ДополнительныеПараметры.КраткоеПредставлениеОшибки);
	ПараметрыФормы.Вставить("ПодробноеПредставлениеОшибки",	ДополнительныеПараметры.ПодробноеПредставлениеОшибки);
	ПараметрыФормы.Вставить("ВремяНачалаОбновления",		ВремяНачалаОбновления);
	ПараметрыФормы.Вставить("ВремяОкончанияОбновления",		ВремяОкончанияОбновления);

	Если ЗначениеЗаполнено(ИмяПланаОбмена) Тогда
		// Зарезервировано для новых подсистем
	Иначе
		ИмяОткрываемойФормы = "Обработка.РезультатыОбновленияПрограммы.Форма.СообщениеОНеудачномОбновлении";
	КонецЕсли;

	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы,,,,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформационнуюБазуДействияПриОшибке(ЗавершитьРаботу, ДополнительныеПараметры) Экспорт
	Если БлокировкаИБ <> Неопределено И БлокировкаИБ.Свойство("СнятьБлокировкуФайловойБазы") Тогда
		ОбновлениеВерсииИБВызовСервера.сОИБ_СнятьБлокировкуФайловойБазы();
	КонецЕсли;

	Если ЗавершитьРаботу <> Ложь Тогда
		ЗакрытьФорму(Истина, Ложь);
	Иначе
		ЗакрытьФорму(Истина, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПерезапускСБлокировкойВыполненияРегламентныхЗаданий()
	НовыйПараметрЗапуска = ПараметрЗапуска + ";РегламентныеЗаданияОтключены";
	НовыйПараметрЗапуска = "/AllowExecuteScheduledJobs -Off " + "/C """ + НовыйПараметрЗапуска + """";
	ПрекратитьРаботуСистемы(Истина, НовыйПараметрЗапуска);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПараметрыСеансаИзФоновогоЗадания(ПараметрыКлиентаНаСервере)
	ПараметрыСеанса.ПараметрыКлиентаНаСервере	= ПараметрыКлиентаНаСервере;
	ПараметрыСеанса.ВыполняетсяОбновлениеИБ		= Ложь;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработанныйРезультатДлительнойОперации(Результат, Операция)
	Возврат РегистрыСведений.ПараметрыРаботыПрограммы.ОбработанныйРезультатДлительнойОперации(Результат, Операция);
КонецФункции
