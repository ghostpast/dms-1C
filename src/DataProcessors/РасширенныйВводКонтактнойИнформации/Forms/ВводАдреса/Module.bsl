///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не Параметры.Свойство("ОткрытаПоСценарию") Тогда
		ВызватьИсключение "Обработка не предназначена для непосредственного использования.";
	КонецЕсли;

	// Настройки формы
	СведенияОАдресномКлассификаторе		= КонтактнаяИнформацияСерверПовтИсп.сУКИ_СведенияОДоступностиАдресногоКлассификатора();
	ЕстьЗагруженныйКлассификатор		= СведенияОАдресномКлассификаторе.Получить("ИспользоватьЗагруженные");
	ВебКлассификаторДоступен			= СведенияОАдресномКлассификаторе.Получить("КлассификаторДоступен");
	ИспользуетсяАдресныйКлассификатор	= СведенияОАдресномКлассификаторе.Получить("ИспользуетсяАдресныйКлассификатор");
	ВебСервисИспользуется				= ВебКлассификаторДоступен;

	Если Не ИспользуетсяАдресныйКлассификатор Тогда
		ОтключитьВозможностьВыбораАдресныхСведенийИзКлассификатора();
	КонецЕсли;

	ЕстьПравоЗагружатьКлассификатор = Обработки.РасширенныйВводКонтактнойИнформации.ЕстьВозможностьИзмененияАдресногоКлассификатора();

	Параметры.Свойство("ВозвращатьСписокЗначений", ВозвращатьСписокЗначений);

	ОсновнаяСтрана				= ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	ВидКИ						= КонтактнаяИнформацияСервер.сУКИ_СтруктураВидаКонтактнойИнформации(Параметры.ВидКонтактнойИнформации);
	ВидКонтактнойИнформации		= ВидКИ;
	ПриСозданииНаСервереХранитьИсториюИзменений();

	Заголовок = ?(ПустаяСтрока(Параметры.Заголовок), Строка(ВидКИ.Ссылка), Параметры.Заголовок);

	СкрыватьНеактуальныеАдреса  = ВидКонтактнойИнформации.СкрыватьНеактуальныеАдреса;
	ТолькоНациональныйАдрес     = ВидКонтактнойИнформации.ТолькоНациональныйАдрес;
	ТипКонтактнойИнформации     = ВидКонтактнойИнформации.Тип;
	МеждународныйФорматАдреса   = ВидКонтактнойИнформации.МеждународныйФорматАдреса;

	Элементы.АдресВСвободнойФорме.Видимость                                         = Не ВидКонтактнойИнформации.ПроверятьКорректность;
	Элементы.ПредставлениеАдресаКонтекстноеМенюВвестиАдресВСвободнойФорме.Видимость = Не ВидКонтактнойИнформации.ПроверятьКорректность;

	// Пытаемся заполнить из параметров.
	ЗначенияПолей = ОпределитьЗначениеАдреса(Параметры);

	Если ПустаяСтрока(ЗначенияПолей) Тогда
		НаселенныйПунктДетально				= КонтактнаяИнформацияКлиентСервер.РСА_ОписаниеНовойКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес); // Новый адрес
		НаселенныйПунктДетально.AddressType	= "Муниципальный";
	ИначеЕсли ТипЗнч(ЗначенияПолей) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(ЗначенияПолей), "{") Тогда
		ДанныеАдреса			= КонтактнаяИнформацияСервер.сУКИ_JSONВКонтактнуюИнформациюПоПолям(ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес);
		НаселенныйПунктДетально	= КонтактнаяИнформацияСервер.РСА_ПодготовитьАдресДляВвода(ДанныеАдреса);
	Иначе
		XDTOКонтактная			= ИзвлечьСтарыйФорматАдреса(ЗначенияПолей, ТипКонтактнойИнформации);
		ДанныеАдреса			= КонтактнаяИнформацияСервер.сУКИ_КонтактнаяИнформацияВСтруктуруJSON(XDTOКонтактная, ТипКонтактнойИнформации);
		НаселенныйПунктДетально	= КонтактнаяИнформацияСервер.РСА_ПодготовитьАдресДляВвода(ДанныеАдреса);
	КонецЕсли;

	Если МеждународныйФорматАдреса И Не (СтрСравнить("ВСвободнойФорме", НаселенныйПунктДетально.AddressType) = 0) Тогда
		НаселенныйПунктДетально.AddressType = "Иностранный";
	ИначеЕсли ЗначениеЗаполнено(Параметры.ТипАдреса) Тогда
		УстановитьТипАдресаИзПараметра(Параметры.ТипАдреса);
	КонецЕсли;

	ЗаполнитьПредопределенныеВариантыАдреса(Параметры);

	УстановитьЗначениеРеквизитовПоКонтактнойИнформации(НаселенныйПунктДетально);

	Если ЗначениеЗаполнено(НаселенныйПунктДетально.Comment) Тогда
		Элементы.ОсновныеСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.СтраницаКомментарий.Картинка = БазоваяПодсистемаКлиентСервер.ОН_КартинкаКомментария(Комментарий);
	Иначе
		Элементы.ОсновныеСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;

	Если ТолькоНациональныйАдрес Тогда
		Элементы.Страна.Видимость = Ложь;
		Элементы.ОКТМО.Видимость  = ВидКонтактнойИнформации.УказыватьОКТМО;

		Если Страна <> ОсновнаяСтрана Тогда
			// Считаем адрес российским
			ТекстПредупрежденияПриОткрытии = "Адрес введен некорректно: допускается ввод только национальных адресов.
			|Значение поля ""Страна"" было изменено на %1, проверьте остальные поля.";
			ТекстПредупрежденияПриОткрытии = СтрШаблон(ТекстПредупрежденияПриОткрытии, ОсновнаяСтрана.Наименование);
			ПолеПредупрежденияПриОткрытии               = "СтранаВСвободнойФорме";
			Модифицированность                          = Истина;
			Элементы.Страна.Доступность                 = Ложь;
			Элементы.Страна.Видимость                   = Истина;
			Элементы.СтранаВСвободнойФорме.Видимость    = Истина;
			Элементы.СтранаВСвободнойФорме.КнопкаВыбора = Ложь;
			Элементы.СтранаВСвободнойФорме.Доступность  = Ложь;
		КонецЕсли;

		Если СтрНачинаетсяС(ВРег(НаселенныйПунктДетально.value), ВРег(НаселенныйПунктДетально.country) + ",") Тогда
			ЧастиАдреса                   = СтрРазделить(НаселенныйПунктДетально.value, ",");
			ЧастиАдреса.Удалить(0);
			НаселенныйПунктДетально.value = СокрЛП(СтрСоединить(ЧастиАдреса, ","));
			ПредставлениеАдреса           = НаселенныйПунктДетально.value;
		КонецЕсли;

		Страна                          = ОсновнаяСтрана;
	ИначеЕсли МеждународныйФорматАдреса Тогда
		Элементы.ПроверитьЗаполнениеАдреса.Видимость             = Ложь;
		Элементы.АдресныйКлассификаторУстарел.Видимость          = Ложь;
		Элементы.МуниципальноеДеление.Видимость                  = Ложь;
		Элементы.АдминистративноТерриториальноеДеление.Видимость = Ложь;
		Элементы.ЗаполнитьПоПочтовомуИндексу.Видимость           = Ложь;
		Элементы.ЗагрузитьКлассификатор.Видимость                = Ложь;
		Элементы.ГруппаИнформация.Видимость                      = Ложь;
		Элементы.НужнаПомощь.Видимость                           = Ложь;
		Элементы.СтраницаТипАдреса.ТекущаяСтраница               = Элементы.СтраницаДругойАдрес;
	КонецЕсли;
	НаселенныйПунктДетально.Country = НаименованиеСтраны(Страна, МеждународныйФорматАдреса);

	Если БазоваяПодсистемаСервер.ОН_ЭтоМобильныйКлиент() Тогда
		Элементы.ГруппаИнформационныеСообщения.Видимость    = Ложь;
		Элементы.НаселенныйПункт.МногострочныйРежим         = Истина;
		Элементы.ФормаКомандаОК.Отображение                 = ОтображениеКнопки.Картинка;
		Элементы.ТипДома.ОтображениеКнопкиВыбора            = ОтображениеКнопкиВыбора.Авто;
		Элементы.ТипСтроения.ОтображениеКнопкиВыбора        = ОтображениеКнопкиВыбора.Авто;
		элементы.ФормаОтмена.Видимость = Ложь;
	КонецЕсли;

	ОпределитьОтображениеЭлементовНаФорме(Параметры.ТолькоПросмотр);

	Если Не ЕстьПравоЗагружатьКлассификатор Тогда
		Элементы.ИнформацияОЗагрузкеАдресныеСведений.Заголовок = "Для автоподбора и проверки адресов обратитесь к администратору для загрузки адресных сведений.";
		Элементы.ЗагрузитьКлассификатор.Видимость = Ложь;
	КонецЕсли;

	УстановитьКлючИспользованияФормы();
	СформироватьМенюДобавленияСтроенийИПомещений();

	СформироватьТекстНужнаПомощь();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЗначениеЗаполнено(ТекстПредупрежденияПриОткрытии) Тогда
		БазоваяПодсистемаКлиентСервер.сОН_СообщитьПользователю(ТекстПредупрежденияПриОткрытии,, ПолеПредупрежденияПриОткрытии, "", Ложь);
	КонецЕсли;

	ОтобразитьПоляПоТипуАдреса();
	ОбновитьМенюДобавленияСтроенийИПомещений();
	ПоказатьПодсказкуПоТипАдреса();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("ПодтвердитьИЗакрыть", ЭтотОбъект);
	БазоваяПодсистемаКлиент.ОН_ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "АдресныйКлассификаторАктуализирован" ИЛИ ИмяСобытия = "ЗагруженАдресныйКлассификатор" Тогда
		СообщениеОНеобходимостиЗагрузкиКлассификатора();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("КраткоеПредставлениеОшибки") И ЗначениеЗаполнено(ВыбранноеЗначение.КраткоеПредставлениеОшибки) Тогда
		ПоказатьПредупреждение(, ВыбранноеЗначение.КраткоеПредставлениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтключитьВозможностьВыбораАдресныхСведенийИзКлассификатора()
	Элементы.ГруппаИнформация.Видимость            = Ложь;
	Элементы.ПроверитьЗаполнениеАдреса.Видимость   = Ложь;
	Элементы.ЗаполнитьПоПочтовомуИндексу.Видимость = Ложь;
	Элементы.ЗагрузитьКлассификатор.Видимость      = Ложь;
	Элементы.Улица.КнопкаВыбора                    = Ложь;
	Элементы.Дом.КнопкаВыбора                      = Ложь;
	Элементы.Строение.КнопкаВыбора                 = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СтранаПриИзменении(Элемент)
	ОтобразитьЭлементыФормыВСоответствиеСоСтраной();
КонецПроцедуры

&НаКлиенте
Процедура СтранаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СтранаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда
		// Формирование списка быстрого выбора.
		Если ПустаяСтрока(Текст) Тогда
			ДанныеВыбора = Новый СписокЗначений;
		КонецЕсли;

		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтранаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	Если ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

#Если ВебКлиент Тогда
	// Обход особенности платформы.
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора         = Новый СписокЗначений;
	ДанныеВыбора.Добавить(Страна);
#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура СтранаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("Код") Тогда
		НаселенныйПунктДетально.CountryCode = ВыбранноеЗначение.Код;
	Иначе
		НаселенныйПунктДетально.CountryCode = КодСтраны(ВыбранноеЗначение);
	КонецЕсли;

	КонтактнаяИнформацияКлиент.УКИ_СтранаМираОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ИндексИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	Если СтрДлина(СокрЛП(Текст)) = 6 И СтрСравнить(Индекс, Текст) <> 0 И Страна = ОсновнаяСтрана Тогда
		СтандартнаяОбработка = Ложь;
		НаселенныйПунктДетально.ZipCode = Текст;
		ФормаВыбораУлицПоИндексу(Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИндексОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	НаселенныйПунктДетально.ZipCode = Текст;
	Если СтрДлина(СокрЛП(Текст)) = 6 И СтрСравнить(Индекс, Текст) <> 0 И Страна = ОсновнаяСтрана Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыбораУлицПоИндексу(Текст);
	Иначе
		Индекс = Текст;
		ОбновитьПредставлениеАдреса();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИндексПриИзменении(Элемент)
	НаселенныйПунктДетально.ZipCode = Индекс;
	ОбновитьПредставлениеАдреса();
КонецПроцедуры

&НаКлиенте
Процедура ОКТМОПриИзменении(Элемент)
	НаселенныйПунктДетально.OKTMO = ОКТМО;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораАдресаПоИндексу(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Если Результат.Отказ Тогда
			Если Результат.Свойство("Индекс") И НЕ ПустаяСтрока(Результат.Индекс) Тогда
				ОбновитьПредставлениеАдреса();

				Возврат;
			Иначе
				Если НЕ ПодборПоИндексуДоступен Тогда
					ТекстСообщения = СтрШаблон("Индекс %1 не найден в адресном классификаторе",
						Формат(Результат.Индекс, "ЧРГ=' '; ЧГ=0"));
					БазоваяПодсистемаКлиентСервер.сОН_СообщитьПользователю(ТекстСообщения,,, "Объект.Индекс", Ложь);
				Иначе
					ПроверитьДоступностьКлассификатора();
				КонецЕсли;
			КонецЕсли;
			Возврат;
		КонецЕсли;

		ОчиститьАдресКлиент();
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			ПолученныйАдрес = ОпределитьАдресПоИдентификатору(Результат);
			ЗаполнитьЗначенияСвойств(НаселенныйПунктДетально, ПолученныйАдрес);
			Если ПустаяСтрока(НаселенныйПунктДетально.ZipCode) Тогда
				НаселенныйПунктДетально.ZipCode = Формат(Результат.Индекс,"ЧГ=0");
			КонецЕсли;
		КонецЕсли;

		ОбработкаИзмененияАдреса();
		УстановитьФлагиВМенюПоТипуАдреса();

		ТекущийЭлемент = Элементы.Дом;
	Иначе
		ОбновитьПредставлениеАдреса();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	НаселенныйПунктДетально.Comment = Комментарий;
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТипДомаПриИзменении(Элемент)
	Если СтрСравнить(ТипДома, "Зем. участок") <> 0 Тогда
		НаселенныйПунктДетально.HouseType = ТипДома;

		Элементы.ТипСтроения.Доступность = Истина;
		Элементы.Строение.Доступность    = Истина;

		Если ЗначениеЗаполнено(НаселенныйПунктДетально.stead) Тогда
			НаселенныйПунктДетально.HouseNumber = НаселенныйПунктДетально.stead;
			НаселенныйПунктДетально.stead   = "";
			НаселенныйПунктДетально.steadId = "";
			ОбновитьПредставлениеАдреса();
		ИначеЕсли ЗначениеЗаполнено(НаселенныйПунктДетально.HouseNumber) Тогда
			ОбновитьПредставлениеАдреса();
		КонецЕсли;
	Иначе
		НаселенныйПунктДетально.HouseType	= "";
		Элементы.ТипСтроения.Доступность	= Ложь;
		Элементы.Строение.Доступность		= Ложь;

		Если ЗначениеЗаполнено(НаселенныйПунктДетально.HouseNumber)
			Или НаселенныйПунктДетально.buildings.Количество() > 0 Тогда
				НаселенныйПунктДетально.stead		= НаселенныйПунктДетально.HouseNumber;
				НаселенныйПунктДетально.HouseNumber	= "";
				НаселенныйПунктДетально.HouseId		= "";
				Строение							= "";
				НаселенныйПунктДетально.buildings.Очистить();
				ОбновитьПредставлениеАдреса();
				ПодключитьОбработчикОжидания("ОтобразитьДополнительныеЗданияКлиент", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДомПриИзменении(Элемент)
	Если ЭтоЗемельныйУчасток(ТипДома) Тогда
		НаселенныйПунктДетально.stead = Дом;
	Иначе
		НаселенныйПунктДетально.HouseNumber = Дом;
		Если ПустаяСтрока(НаселенныйПунктДетально.HouseType) Тогда
			НаселенныйПунктДетально.HouseType = ТипДома;
		КонецЕсли;
	КонецЕсли;

	НайденныйИдентификатор = ИдентификаторАдреса(НаселенныйПунктДетально, Истина);
	Если ЗначениеЗаполнено(НайденныйИдентификатор) Тогда
		НайденныйИндекс = НайтиИндексУДома(НайденныйИдентификатор, Дом);
		Если ЗначениеЗаполнено(НайденныйИндекс) Тогда
			Индекс							= НайденныйИндекс;
			НаселенныйПунктДетально.ZipCode = Индекс;
		КонецЕсли;
	КонецЕсли;

	ОбновитьПредставлениеАдреса();
КонецПроцедуры

&НаКлиенте
Процедура ДомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		ЗаполнитьПоляДомовСтроенийЗемельныхУчастков(ВыбранноеЗначение);
		Элементы.Дом.ОбновитьТекстРедактирования();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтроениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		ЗаполнитьПоляДомовСтроенийЗемельныхУчастков(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипСтроенияПриИзменении(Элемент)
	Если НаселенныйПунктДетально.Buildings.Количество() > 0 Тогда
		НаселенныйПунктДетально.Buildings[0].Type = ТипСтроения;
	КонецЕсли;

	ОбновитьМенюДобавленияСтроенийИПомещений();

	ОбработкаИзмененияАдреса();
КонецПроцедуры

&НаКлиенте
Процедура СтроениеПриИзменении(Элемент)
	ЭтоНовый = Истина;
	Для каждого Помещения Из НаселенныйПунктДетально.Buildings Цикл
		Если СтрСравнить(Помещения.Type, ТипСтроения) = 0 Тогда
			Помещения.Type = ЭтотОбъект["ТипСтроения"];
			Помещения.number = Строение;
			ЭтоНовый = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ЭтоНовый Тогда
		ИнформацияОСтроении = ЗначениеСтроенияИлиПомещения(ТипСтроения, Строение);
		НаселенныйПунктДетально.Buildings.Вставить(0, ИнформацияОСтроении);
	ИначеЕсли ПустаяСтрока(ЭтотОбъект[Элемент.Имя]) Тогда
		Для ИндексПозиции = 0 По НаселенныйПунктДетально.Buildings.Количество() - 1 Цикл
			СведенияОСтроении = НаселенныйПунктДетально.Buildings[ИндексПозиции];
			Если СтрСравнить(СведенияОСтроении.Type, ЭтотОбъект["ТипСтроения"]) =0 Тогда
				НаселенныйПунктДетально.Buildings.Удалить(ИндексПозиции);

				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ОбновитьПредставлениеАдреса();
КонецПроцедуры

&НаКлиенте
Процедура СтроениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		Идентификатор = ИдентификаторАдреса(НаселенныйПунктДетально, Истина);

		Если ЗначениеЗаполнено(Идентификатор) Тогда
			ДанныеВыбора = СписокАвтоподбораВариантовДомов(Идентификатор, Дом);
			Если ДанныеВыбора.Количество() > 1 Тогда
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипСтроенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Отбор			= Новый Структура("Значение", ВыбранноеЗначение);
	НайденныеСтроки	= ДополнительныеСтроенияИПомещения.НайтиСтроки(Отбор);

	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если НайденныеСтроки[0].Видимость = Ложь Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипПомещенияПриИзменении(Элемент)
	Если Элемент.ВыделенныйТекст = НаименованиеПриДобавлениеПроизвольногоПомещения() Тогда
		ЭтотОбъект[Элемент.Имя] = "";
	КонецЕсли;

	Если ПустаяСтрока(Помещение) Тогда
		ОбновитьМенюДобавленияСтроенийИПомещений();
		Возврат;
	КонецЕсли;

	Если НаселенныйПунктДетально.Apartments.Количество() > 0 Тогда
		НаселенныйПунктДетально.Apartments[0].Type = ТипПомещения;
	КонецЕсли;

	Если ПустаяСтрока(ЭтотОбъект[Элемент.Имя]) Тогда
		УдалитьПомещениеИзАдреса(ЭтотОбъект["ТипПомещения"]);
	КонецЕсли;

	ОбновитьМенюДобавленияСтроенийИПомещений();

	ОбработкаИзмененияАдреса();
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеПриИзменении(Элемент)
	Если ПустаяСтрока(ЭтотОбъект[Элемент.Имя]) Тогда
		УдалитьПомещениеИзАдреса(ЭтотОбъект["ТипПомещения"]);
	Иначе
		ИнформацияОПомещении = ЗначениеСтроенияИлиПомещения(ТипПомещения, Помещение);
		Если НаселенныйПунктДетально.Apartments.Количество() = 0 Тогда
			НаселенныйПунктДетально.Apartments.Добавить(ИнформацияОПомещении);
		Иначе
			Если СтрСравнить(НаселенныйПунктДетально.Apartments[0].type, ТипПомещения) = 0 Тогда
				НаселенныйПунктДетально.Apartments[0] = ИнформацияОПомещении;
			Иначе
				НаселенныйПунктДетально.Apartments.Вставить(0, ИнформацияОПомещении);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ОбработкаИзмененияАдреса();
КонецПроцедуры

&НаКлиенте
Процедура ТипПомещенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Отбор			= Новый Структура("Значение", ВыбранноеЗначение);
	НайденныеСтроки = ДополнительныеСтроенияИПомещения.НайтиСтроки(Отбор);

	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если НайденныеСтроки[0].Видимость = Ложь Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктПриИзменении(Элемент)
	ИзменитьСведенияОНаселенномПункте();
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктОчистка(Элемент, СтандартнаяОбработка)
	ОчиститьНаселенныйПункт();
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	// Если пришли впрямую после редактирования, то сбрасываем адрес.
	Если Элемент.ТекстРедактирования <> НаселенныйПункт Тогда
		Модифицированность				= Истина;
		НаселенныйПункт					= Элемент.ТекстРедактирования;
		ИзменитьСведенияОНаселенномПункте();
		ИдентификаторНаселенногоПункта	= Неопределено;
	КонецЕсли;

	ПараметрыФормы = ПараметрыОткрытияФормыНаселенногоПункта();

	Оповещение = Новый ОписаниеОповещения("ПослеВводаСведенийНаселенногоПункта", ЭтотОбъект);

	ОткрытьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.НаселенныйПунктАдреса", ПараметрыФормы, Элемент,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСведенийНаселенногоПункта(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		НаселенныйПунктДетально = Результат;
		ОбработкаИзмененияАдреса();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Модифицированность = Истина;

	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	Если ЕстьПравоЗагружатьКлассификатор И ВыбранноеЗначение.ПредлагатьЗагрузкуКлассификатора = Истина Тогда
		// Предлагаем загрузить классификатор.
		ПредложениеЗагрузкиКлассификатора(СтрШаблон("Данные для ""%1"" не загружены.", ВыбранноеЗначение.Представление), ВыбранноеЗначение);
	Иначе
		УстановитьНаселенныйПунктПослеВыбора(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если МеждународныйФорматАдреса Тогда
		Возврат;
	КонецЕсли;

	ДанныеВыбора = Новый СписокЗначений;

	ТекстДляАвтоПодбора = СокрЛП(Текст);
	Если СтрДлина(ТекстДляАвтоПодбора) < 3 Или СтрСравнить(ПредопределенноеЗначение("Справочник.СтраныМира.Россия"), Страна) <> 0 Тогда
		// Нет вариантов, список пуст, стандартную обработку не надо трогать.
		Возврат;
	КонецЕсли;

	Результат = СписокАвтоподбораНаселенногоПункта(ТекстДляАвтоПодбора, ТипАдреса);
	Если Результат.Отказ Тогда
		Возврат;
	КонецЕсли;

	ДанныеВыбора = Результат.Данные;
	// Стандартную обработку отключаем, только если есть наши варианты.
	Если ДанныеВыбора.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УлицаПриИзменении(Элемент)
	ЧастиАдреса = СтрРазделить(Улица, " ");
	Если ЧастиАдреса.Количество() > 1 Тогда
		Сокращение = ЧастиАдреса[ЧастиАдреса.Количество() - 1];
		ЧастиАдреса.Удалить(ЧастиАдреса.Количество() - 1);
	Иначе
		Сокращение = "";
	КонецЕсли;
	Наименование = СокрЛП(СтрСоединить(ЧастиАдреса, " "));

	НаселенныйПунктДетально.Street     = Наименование;
	НаселенныйПунктДетально.StreetType = Сокращение;
	НаселенныйПунктДетально.StreetID   = "";

	ОбновитьПредставлениеАдреса();

	УстановитьИдентификаторыАдреса(НаселенныйПунктДетально);
КонецПроцедуры

&НаКлиенте
Процедура УлицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	// Если пришли впрямую после редактирования, то сбрасываем.
	Если Элемент.ТекстРедактирования <> Улица Тогда
		Улица = Элемент.ТекстРедактирования;
	КонецЕсли;

	ИдентификаторНаселенногоПункта = ИдентификаторАдреса(НаселенныйПунктДетально, Ложь);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Родитель",  ИдентификаторНаселенногоПункта);
	ПараметрыФормы.Вставить("Уровень",   7);
	ПараметрыФормы.Вставить("ТипАдреса", НаселенныйПунктДетально.AddressType);

	Оповещение = Новый ОписаниеОповещения("ПослеВыбораУлицы", ЭтотОбъект);

	ОткрытьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.ВыборАдресаПоУровню", ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораУлицы(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Не Результат.Отказ Тогда
			НаселенныйПунктДетально = ОпределитьАдресПоИдентификатору(Результат);
			ОбработкаИзмененияАдреса();
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, "Выбор из списка недоступен, т.к в адресном классификаторе отсутствует информация об улицах для введенного населенного пункта.");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УлицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Страна <> ОсновнаяСтрана Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Модифицированность	= Истина;
	ТипЗначения			= ТипЗнч(ВыбранноеЗначение);

	Если ТипЗначения = Тип("УникальныйИдентификатор") Тогда
		СведенияОбАдресе = Новый Структура("Идентификатор", ВыбранноеЗначение);
	ИначеЕсли ТипЗначения = Тип("Структура") Тогда
		СведенияОбАдресе = ВыбранноеЗначение;
	КонецЕсли;
	СведенияОбАдресе.Вставить("Муниципальный", СтрСравнить(НаселенныйПунктДетально.addressType, "Муниципальный") = 0);

	НаселенныйПунктУстановитьПоляАдреса(НаселенныйПунктДетально, СведенияОбАдресе, Истина);
	ОбработкаИзмененияАдреса();
	Элементы.Улица.ОбновитьТекстРедактирования();
КонецПроцедуры

&НаКлиенте
Процедура УлицаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	Если Не АвтоподборДоступен Тогда
		Возврат;
	КонецЕсли;

	ДанныеВыбора = Новый СписокЗначений;

	ИдентификаторНаселенногоПункта = ИдентификаторАдреса(НаселенныйПунктДетально, Ложь);
	Если СтрДлина(Текст) < 2 Или Не ЗначениеЗаполнено(ИдентификаторНаселенногоПункта)Тогда
		// Нет вариантов, список пуст, стандартную обработку не надо трогать.
		Возврат;
	КонецЕсли;

	Результат = ВариантыУлицПоТексту(Текст);

	Если Результат.Отказ Тогда
		Возврат;
	КонецЕсли;

	Если Результат.Данные.Количество() = 0 Тогда
		АдаптацияИдентификатораНаселенногоПункта(ИдентификаторНаселенногоПункта);
		Результат = ВариантыУлицПоТексту(Текст);

		Если Результат.Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ДанныеВыбора = Результат.Данные;

	// Стандартную обработку отключаем, только если есть наши варианты.
	Если ДанныеВыбора.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УлицаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка				= Ложь;
	НаселенныйПунктДетально.StreetID	= "";
	НаселенныйПунктДетально.Street		= "";
	НаселенныйПунктДетально.StreetType	= "";
	Улица								= "";
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеИностранногоАдресаПриИзменении(Элемент)
	НаселенныйПунктДетально.Value = ПредставлениеАдреса;
КонецПроцедуры

&НаКлиенте
Процедура ДомАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Не АвтоподборДоступен Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Текст) Тогда
		Идентификатор = ИдентификаторАдреса(НаселенныйПунктДетально, Истина);
		Если ЗначениеЗаполнено(Идентификатор) Тогда
			Если СтрСравнить(ТипДома, "Зем. участок") <> 0 Тогда
				ДанныеВыбора = СписокАвтоподбораВариантовДомов(Идентификатор, Текст + "%");
			Иначе
				ДанныеВыбора = СписокАвтоподбораЗемельныхУчастков(Идентификатор, Текст + "%");
			КонецЕсли;

			СтандартнаяОбработка = (ДанныеВыбора.Количество() = 0);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдресНаДатуАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если СтрСравнить(Текст, НачалоУчета()) = 0 Или ПустаяСтрока(Текст) Тогда
		Элементы.АдресНаДату.ФорматРедактирования = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдресНаДатуПриИзменении(Элемент)
	Если Не ВводНовогоАдреса Тогда
		Отбор			= Новый Структура("Вид", ОписаниеВидаКонтактнойИнформации(ЭтотОбъект).Ссылка);
		НайденныеСтроки	= КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		Результат		= ОпределитьДатуДействия(АдресНаДату, НайденныеСтроки);

		Если Результат.ТекущаяСтрока <> Неопределено Тогда
			Тип						= Результат.ТекущаяСтрока.Тип;
			АдресДействуетС			= Результат.ДействуетС;
			НаселенныйПунктДетально	= АдресСИсторией(Результат.ТекущаяСтрока.Значение);
		Иначе
			Тип						= ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес");
			АдресДействуетС			= АдресНаДату;
			НаселенныйПунктДетально	= КонтактнаяИнформацияКлиентСервер.РСА_ОписаниеНовойКонтактнойИнформации(Тип);
		КонецЕсли;

		ОбработкаИзмененияАдреса();

		Если ЗначениеЗаполнено(Результат.ДействуетПо) Тогда
			ТекстИсторическийАдрес = " " + СтрШаблон("действует по %1", Формат(Результат.ДействуетПо - 10, "ДЛФ=DD"));
		Иначе
			ТекстИсторическийАдрес = "действует по настоящее время.";
		КонецЕсли;
		Элементы.ТекстПроДатуДействия.Заголовок = ТекстИсторическийАдрес;
	Иначе
		АдресДействуетС = АдресНаДату;
	КонецЕсли;

	ТекстНачалаУчета							= НачалоУчета();
	Элементы.АдресНаДату.ФорматРедактирования	= ?(ЗначениеЗаполнено(АдресНаДату), "", "ДФ='""" + ТекстНачалаУчета  + """'");
КонецПроцедуры

&НаСервереБезКонтекста
Функция АдресСИсторией(ЗначенияПолей)
	Возврат КонтактнаяИнформацияСервер.сУКИ_JSONВКонтактнуюИнформациюПоПолям(ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес);
КонецФункции

&НаКлиенте
Процедура ИнформацияОЗагрузкеАдресныеСведенийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	// Зарезервировано для новх подсистем
КонецПроцедуры

&НаКлиенте
Процедура ПослеАвторизоватьНаСайтеПоддержкиПользователей(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		ОткрытьФормуЗагрузкиКлассификатора();
		Возврат;
	КонецЕсли;

	ОбновитьПовторноИспользуемыеЗначения();
	ВебКлассификаторДоступен = Истина;
	СообщениеОНеобходимостиЗагрузкиКлассификатора();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНужнаПомощьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	// Зарезервировано для новх подсистем
КонецПроцедуры

&НаКлиенте
Процедура КомандаОК(Команда)
	ПодтвердитьИЗакрыть();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	Модифицированность = Ложь;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеАдреса(Команда)
	Если РазрешитьВводАдресаВСвободнойФорме Тогда
		ПоказатьПредупреждение(, "Адрес не может быть проверен, так как он введен в свободной форме.");

		Возврат;
	КонецЕсли;

	ПредупреждатьОбОтсутствииОшибок	= Истина;
	ТребуетсяОбновление	= Ложь;

	СписокОшибок = СписокОшибокЗаполнения(НаселенныйПунктДетально, ВидКонтактнойИнформации, ПредупреждатьОбОтсутствииОшибок, ТребуетсяОбновление);
	СообщитьОбОшибкахЗаполнения(СписокОшибок, ПредупреждатьОбОтсутствииОшибок, ТребуетсяОбновление);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьАдрес(Команда)
	ОчиститьАдресКлиент();
	ОбработкаИзмененияАдреса();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПочтовомуИндексу(Команда)
	Если ЕстьЗагруженныйКлассификатор И СтрДлина(Индекс) = 6 Тогда
		ФормаВыбораУлицПоИндексу(Индекс);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКлассификатор(Команда)
	ОткрытьФормуЗагрузкиКлассификатора();
КонецПроцедуры

&НаКлиенте
Процедура ВвестиАдресВСвободнойФорме(Команда)
	ЭтоНациональныйАдрес = СтрСравнить(НаселенныйПунктДетально.AddressType, "Муниципальный") = 0 Или СтрСравнить(НаселенныйПунктДетально.AddressType, "Административно-территориальный") = 0;

	Если РазрешитьВводАдресаВСвободнойФорме Тогда
		ПереключитьНаСтруктурированныйВвод();
	ИначеЕсли ЭтоНациональныйАдрес Тогда
		ТекстВопроса = "Ввести адрес в свободной форме?
		                        |Адреса, введенные в свободной форме, могут не пройти проверку по адресному классификатору.";
		Оповещение = Новый ОписаниеОповещения("ВвестиАдресВСвободнойФормеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , НСтр("ru = 'Подтверждение'"));
	Иначе
		ПереключитьАдресВСвободнойФорму();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтактнаяИнформацияПоПредставлению(ПредставлениеАдреса, Комментарий = "", РазбиватьНаПоля = Ложь)
	Адрес			= КонтактнаяИнформацияСервер.сУКИ_КонтактнаяИнформацияПоПредставлению(ПредставлениеАдреса, Перечисления.ТипыКонтактнойИнформации.Адрес, РазбиватьНаПоля);
	Адрес.comment	= Комментарий;

	Возврат Адрес;
КонецФункции

&НаКлиенте
Процедура ПоказатьАдресВСвободнойФорме()
	ОчиститьАдресКлиент();
	УдалитьСтрануИзПредставления();

	НаселенныйПунктДетально.Value       = ПредставлениеАдреса;
	НаселенныйПунктДетально.AddressType = "ВСвободнойФорме";
	НаселенныйПунктДетально.Comment     = Комментарий;

	НаселенныйПунктДетально.Country     =  НаименованиеСтраны(Страна, ОписаниеВидаКонтактнойИнформации(ЭтотОбъект).МеждународныйФорматАдреса);

	Если Элементы.СтранаВСвободнойФорме.Доступность Тогда
		Элементы.СтранаВСвободнойФорме.Видимость = Не ВидКонтактнойИнформации.ТолькоНациональныйАдрес;
	КонецЕсли;

	Элементы.АдресПредставлениеКомментарий.ТекущаяСтраница = Элементы.ВСвободнойФорме;
	Элементы.АдресВСвободнойФорме.Пометка                  = Истина;
	Элементы.АдминистративноТерриториальноеДеление.Пометка = Ложь;
	Элементы.МуниципальноеДеление.Пометка                  = Ложь;
	НаселенныйПунктДетально.AddressType                    = "ВСвободнойФорме";

	ПоказатьПодсказкуПоТипАдреса();
КонецПроцедуры

&НаКлиенте
Процедура АвторизацияНаСайтеПоддержкиПользователей(Команда)
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("АвторизацияНаСайтеПоддержкиПользователейЗавершение", ЭтотОбъект);
	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаКлиенте
Процедура ДомНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПоказатьСписокДомовИлиЗемельныхУчастков(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СтроениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПоказатьСписокДомовИлиЗемельныхУчастков(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИзменений(Команда)
	ДополнительныеПараметры = Новый Структура;

	ОписаниеДополнительныхРеквизитов = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;

	СписокКонтактнойИнформации = ЗаполнитьСписокКонтактнойИнформации(ОписаниеВидаКонтактнойИнформации(ЭтотОбъект).Ссылка, ОписаниеДополнительныхРеквизитов);

	ПараметрыФормы = Новый Структура("СписокКонтактнойИнформации", СписокКонтактнойИнформации);
	ПараметрыФормы.Вставить("ВидКонтактнойИнформации",	ОписаниеВидаКонтактнойИнформации(ЭтотОбъект).Ссылка);
	ПараметрыФормы.Вставить("ТолькоПросмотр",			ЭтотОбъект.ТолькоПросмотр);
	ПараметрыФормы.Вставить("ИзФормыВводаАдреса",		Истина);
	ПараметрыФормы.Вставить("ДействуетС",				АдресНаДату);

	ОповещениеОЗакрытие = Новый ОписаниеОповещения("ПослеЗакрытияФормыИстории", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма.ИсторияКонтактнойИнформации", ПараметрыФормы, ЭтотОбъект,,,, ОповещениеОЗакрытие);
КонецПроцедуры

&НаКлиенте
Процедура АдресНаЯндексКарты(Команда)
	КонтактнаяИнформацияКлиент.УКИ_ПоказатьАдресНаКарте(ПредставлениеАдреса, "Яндекс.Карты");
КонецПроцедуры

&НаКлиенте
Процедура АдресНаGoogleMaps(Команда)
	КонтактнаяИнформацияКлиент.УКИ_ПоказатьАдресНаКарте(ПредставлениеАдреса, "GoogleMaps");
КонецПроцедуры

&НаКлиенте
Процедура АдресныйКлассификаторУстарел(Команда)
	СообщениеОПроверкеАдреса = "Адресные сведения, загруженные в программу, устарели.
		|Рекомендуется выполнить обновление адресного классификатор, чтобы проверка адреса выполнялась корректно.";
	Если ЕстьПравоЗагружатьКлассификатор Тогда
		ВопросОбОбновлениеАдресногоКлассификатора(СообщениеОПроверкеАдреса);
	Иначе
		СообщениеОПроверкеАдреса = СообщениеОПроверкеАдреса + Символы.ПС + "Для обновления адресного классификатора обратитесь к администратору.";
		ПоказатьПредупреждение(, СообщениеОПроверкеАдреса);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдминистративноТерриториальноеДеление(Команда)
	ПереключитьНаСтруктурированныйВвод("Административно-территориальный");
КонецПроцедуры

&НаКлиенте
Процедура МуниципальноеДеление(Команда)
	ПереключитьНаСтруктурированныйВвод("Муниципальный");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	Элементы.ОсновныеСтраницы.ОтображениеСтраниц	= ОтображениеСтраницФормы.ЗакладкиСверху;
	Элементы.ОсновныеСтраницы.ТекущаяСтраница		= Элементы.СтраницаКомментарий;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДобавитьСтроениеИлиПомещение(Команда)
	ТипСтроенияИлиПомещения = СтрРазделить(Команда.Имя, "_")[1];

	Отбор = Новый Структура("Ключ", ТипСтроенияИлиПомещения);
	НайденныеСтроки = ДополнительныеСтроенияИПомещения.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	НайденныеСтроки[0].Видимость = Ложь;

	Идентификатор	= СтрЗаменить(Новый УникальныйИдентификатор(),"-", "");
	ИмяТекущего		= ДобавитьПолеСтроенияИлиПомещения(Идентификатор, НайденныеСтроки[0].Тип, НайденныеСтроки[0].Значение);

	Если ИмяТекущего <> Неопределено Тогда
		ТекущийЭлемент = Элементы[ИмяТекущего];
	КонецЕсли;

	Если НайденныеСтроки[0].Тип = "Помещение" Тогда
		Значение		= ?(НайденныеСтроки[0].Значение <> НСтр("ru = 'Другое'"), НайденныеСтроки[0].Значение, "");
		ПомещенияАдреса	= НаселенныйПунктДетально.Apartments; // Массив
		ПомещенияАдреса.Добавить(ЗначениеСтроенияИлиПомещения(Значение, ЭтотОбъект[ИмяТекущего]));
	Иначе
		ЗданияАдреса	= НаселенныйПунктДетально.Buildings;  // Массив
		ЗданияАдреса.Добавить(ЗначениеСтроенияИлиПомещения(НайденныеСтроки[0].Значение, ЭтотОбъект[ИмяТекущего]));
	КонецЕсли;

	ОбновитьМенюДобавленияСтроенийИПомещений();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьМуниципальныеСведения(НаселенныйПунктДетально)
	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаКлиенте
Функция ВариантыУлицПоТексту(Знач Текст)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Идентификатор", ИдентификаторНаселенногоПункта);
	ДополнительныеПараметры.Вставить("ТипАдреса",     НаселенныйПунктДетально.AddressType);
	ДополнительныеПараметры.Вставить("Уровень",       7);

	Результат = СписокАвтоподбораУлицы(Текст, ДополнительныеПараметры);

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ФормаВыбораУлицПоИндексу(Знач Текст)
	Если Не ЭтоРФАдрес() Тогда
		Возврат;
	КонецЕсли;

	Модифицированность	= Истина;
	Индекс				= Текст;

	Если АвтоподборДоступен Тогда
		ПараметрыФормы			= ПараметрыОткрытияФормаВыбораПоИндексу();
		ПараметрыФормы.Индекс	= СокрЛП(Текст);

		Оповещение = Новый ОписаниеОповещения("ПослеВыбораАдресаПоИндексу", ЭтотОбъект);
		ОткрытьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.ВыборАдресаПоПочтовомуИндексу", ПараметрыФормы, Элементы.Индекс,,,, Оповещение);
	Иначе
		ОбновитьПредставлениеАдреса();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЭтоРФАдрес()
	Возврат СтрСравнить(НаселенныйПунктДетально.addressType, "Муниципальный") = 0 Или СтрСравнить(НаселенныйПунктДетально.addressType, "Административно-территориальный") = 0;
КонецФункции

&НаКлиенте
Процедура ВвестиАдресВСвободнойФормеЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ПереключитьАдресВСвободнойФорму();
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьАдресВСвободнойФорму()
	Элементы.ПроверитьЗаполнениеАдреса.Доступность = Ложь;

	Если Элементы.АдресПредставлениеКомментарий.ТекущаяСтраница = Элементы.НациональныйАдрес Тогда
		РазрешитьВводАдресаВСвободнойФорме = Истина;
		ПоказатьАдресВСвободнойФорме();

		Возврат;
	КонецЕсли;

	РазрешитьВводАдресаВСвободнойФорме						= Ложь;
	Элементы.АдресПредставлениеКомментарий.ТекущаяСтраница	= Элементы.НациональныйАдрес;

	Если Не СтрСравнить("ВСвободнойФорме", НаселенныйПунктДетально.AddressType) = 0 Тогда
		ОтобразитьВыданныйТипАдреса(НаселенныйПунктДетально.AddressType);

		Возврат;
	КонецЕсли;

	Если СтрСравнить(ПредопределенноеЗначение("Справочник.СтраныМира.Россия"), Страна) = 0 Тогда
		// Попытка восстановить адрес по полям из представления.
		НаселенныйПунктДетально = КонтактнаяИнформацияПоПредставлению(ПредставлениеАдреса, Комментарий, Истина);
		ОтобразитьВыданныйТипАдреса(НаселенныйПунктДетально.AddressType);

		Возврат;
	КонецЕсли;

	ЧастиАдреса = СтрРазделить(ПредставлениеАдреса, ",");
	Если СтрСравнить(Страна, ЧастиАдреса[0]) = 0 Тогда
		ЧастиАдреса.Удалить(0);
	КонецЕсли;

	Если ЧастиАдреса.Количество() > 1 Тогда
		ЧастьУлица = СокрЛП(ЧастиАдреса[ЧастиАдреса.Количество() - 1]);
		ЧастиАдреса.Удалить(ЧастиАдреса.Количество() - 1);
	Иначе
		ЧастьУлица = "";
	КонецЕсли;

	ЧастьГород = СокрЛП(?(ЧастиАдреса.Количество() > 0, СтрСоединить(ЧастиАдреса, ","), ""));

	Если СведенияОСтране.УчастникЕАЭС Тогда
		НаселенныйПунктДетально.AddressType	= "ЕАЭС";
		НаселенныйПунктДетально.Area		= ЧастьГород;
	Иначе
		НаселенныйПунктДетально.AddressType	= "Иностранный";
		НаселенныйПунктДетально.City		= ЧастьГород;
	КонецЕсли;
	НаселенныйПунктДетально.Street = ЧастьУлица;

	ОтобразитьВыданныйТипАдреса(НаселенныйПунктДетально.AddressType);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНаселенныйПункт()
	ИдентификаторНаселенногоПункта = Неопределено;

	УровниАдреса = КонтактнаяИнформацияКлиентСервер.РСА_ИменаУровнейАдреса(НаселенныйПунктДетально.AddressType, Ложь);
	Для каждого ИмяУровня Из УровниАдреса Цикл
		Если НаселенныйПунктДетально.Свойство(ИмяУровня) Тогда
			НаселенныйПунктДетально[ИмяУровня]			= "";
			НаселенныйПунктДетально[ИмяУровня + "Type"]	= "";
			НаселенныйПунктДетально[ИмяУровня + "Id"]	= "";
		КонецЕсли;
	КонецЦикла;

	ОчиститьИдентификаторыАдреса();
	ОбновитьПредставлениеАдреса();
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьЭлементыФормыВСоответствиеСоСтраной()
	СведенияОСтране = СведенияОСтране(Страна);
	Если Не СтрСравнить("ВСвободнойФорме", НаселенныйПунктДетально.AddressType) = 0 Тогда
		КоличествоПолейПредыдущийТипАдреса = КонтактнаяИнформацияКлиентСервер.РСА_ИменаУровнейАдреса(НаселенныйПунктДетально.AddressType, Ложь).Количество();

		ПереопределитьТипаАдресаПоСтране(Страна, НаселенныйПунктДетально, СведенияОСтране);

		КоличествоПолейНовыйТипАдреса = КонтактнаяИнформацияКлиентСервер.РСА_ИменаУровнейАдреса(НаселенныйПунктДетально.AddressType, Ложь).Количество();
		Если КоличествоПолейПредыдущийТипАдреса > КоличествоПолейНовыйТипАдреса Тогда
			ПеренестиЗначенияПолейАдресВПоляНовогоТипа();
		КонецЕсли;
	КонецЕсли;

	ОтобразитьПоляПоТипуАдреса();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереопределитьТипаАдресаПоСтране(Страна, НаселенныйПунктДетально, СведенияОСтране)
	Если СтрСравнить(ПредопределенноеЗначение("Справочник.СтраныМира.Россия"), Страна) = 0 Тогда
		Если СтрСравнить(НаселенныйПунктДетально.AddressType, "Административно-территориальный") <> 0 Тогда
			НаселенныйПунктДетально.AddressType = "Муниципальный";
		КонецЕсли;
	ИначеЕсли СведенияОСтране.УчастникЕАЭС Тогда
		НаселенныйПунктДетально.AddressType = "ЕАЭС";
	Иначе
		НаселенныйПунктДетально.AddressType = "Иностранный";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗначенияПолейАдресВПоляНовогоТипа()
	ИменаВсехУровней = КонтактнаяИнформацияКлиентСервер.РСА_ИменаУровнейАдреса("Все", Ложь);
	СведенияАдреса = Новый Массив;
	Для каждого ИмяУровня Из ИменаВсехУровней Цикл
		Если НаселенныйПунктДетально.Свойство(ИмяУровня) И ЗначениеЗаполнено(НаселенныйПунктДетально[ИмяУровня]) Тогда
			Сведения				= ОписаниеСведенийАдреса();
			Сведения.Наименование	= НаселенныйПунктДетально[ИмяУровня];
			Сведения.Сокращение		= НаселенныйПунктДетально[ИмяУровня + "Type"];
			Сведения.Представление	= СокрЛП(Сведения.Наименование + " " + Сведения.Сокращение);
			СведенияАдреса.Добавить(Сведения);

			НаселенныйПунктДетально[ИмяУровня]          = "";
			НаселенныйПунктДетально[ИмяУровня + "Type"] = "";
		КонецЕсли;
	КонецЦикла;

	ИменаУровнейНовогоТипа	= КонтактнаяИнформацияКлиентСервер.РСА_ИменаУровнейАдреса(НаселенныйПунктДетально.AddressType, Ложь);
	ИмяУровня				= ИменаУровнейНовогоТипа.Получить(0);
	Разделитель				= "";
	Для Счетчик = 0 По СведенияАдреса.Количество() - 1 Цикл
		Если ИменаУровнейНовогоТипа.Количество() > Счетчик + 1 Тогда
			ИмяУровня									= ИменаУровнейНовогоТипа.Получить(Счетчик);
			ЗначениеСведенияАдреса						= СведенияАдреса.Получить(Счетчик); // см. ОписаниеСведенийАдреса
			НаселенныйПунктДетально[ИмяУровня]          = ЗначениеСведенияАдреса.Наименование;
			НаселенныйПунктДетально[ИмяУровня + "Type"] = ЗначениеСведенияАдреса.Сокращение;
		Иначе
			НаселенныйПунктДетально[ИмяУровня]			= НаселенныйПунктДетально[ИмяУровня] + Разделитель + СведенияАдреса.Получить(Счетчик).Представление;
			Разделитель									= ", ";
		КонецЕсли;
	КонецЦикла;

	Если ЭтоМеждународныйАдрес(НаселенныйПунктДетально.AddressType) И НаселенныйПунктДетально.Свойство("Street") Тогда
		СписокЭлементовАдреса = Новый Массив;

		СписокЭлементовАдреса.Добавить(СокрЛП(НаселенныйПунктДетально["Street"] + " " + НаселенныйПунктДетально["StreetType"]));
		НаселенныйПунктДетально["StreetType"] = ""; // В иностранном адресе нет сокращений.

		Если НаселенныйПунктДетально.Свойство("HouseNumber") И ЗначениеЗаполнено(НаселенныйПунктДетально["HouseType"]) Тогда
			СписокЭлементовАдреса.Добавить(СокрЛП(НаселенныйПунктДетально["HouseType"] + " №" + НаселенныйПунктДетально["HouseNumber"]));
			НаселенныйПунктДетально["HouseNumber"]  = "";
			НаселенныйПунктДетально["HouseType"]    = "";
		КонецЕсли;

		Если НаселенныйПунктДетально.Свойство("Buildings") И ТипЗнч(НаселенныйПунктДетально["Buildings"]) = Тип("Массив") Тогда
			Для каждого СтроениеВАдресе Из НаселенныйПунктДетально["Buildings"] Цикл
				СписокЭлементовАдреса.Добавить(СокрЛП(СтроениеВАдресе["Type"] + " " + СтроениеВАдресе["Number"]));
			КонецЦикла;
			НаселенныйПунктДетально["Buildings"] = Новый Массив;
		КонецЕсли;

		Если НаселенныйПунктДетально.Свойство("Apartments") И ТипЗнч(НаселенныйПунктДетально["Apartments"]) = Тип("Массив") Тогда
			Для каждого ПомещениеВАдресе Из НаселенныйПунктДетально["Apartments"] Цикл
				СписокЭлементовАдреса.Добавить(СокрЛП(ПомещениеВАдресе["Type"] + " " + ПомещениеВАдресе["Number"]));
			КонецЦикла;
			НаселенныйПунктДетально["Apartments"] = Новый Массив;
		КонецЕсли;

		НаселенныйПунктДетально["Street"]	= СтрСоединить(СписокЭлементовАдреса, ", ");
		Улица								= НаселенныйПунктДетально["Street"];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ОписаниеСведенийАдреса()
	Сведения = Новый Структура;
	Сведения.Вставить("Наименование",	"");
	Сведения.Вставить("Сокращение",		"");
	Сведения.Вставить("Представление",	"");

	Возврат Сведения;
КонецФункции

&НаКлиенте
Процедура АдаптацияИдентификатораНаселенногоПункта(ИдентификаторНаселенногоПункта)
	Если НаселенныйПунктДетально["munDistrictId"] = ИдентификаторНаселенногоПункта Или НаселенныйПунктДетально["districtId"] = ИдентификаторНаселенногоПункта Тогда
		ИдентификаторНаселенногоПункта = НаселенныйПунктДетально["areaId"];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВыданныйТипАдреса(ВыбранныйТипАдреса = Неопределено)
	Если СтрСравнить("ВСвободнойФорме", НаселенныйПунктДетально.AddressType) = 0 И ПустаяСтрока(НаселенныйПунктДетально.Area) Тогда
			Если СтрСравнить(ПредопределенноеЗначение("Справочник.СтраныМира.Россия"), Страна) = 0 Тогда
				// Попытка восстановить адрес по полям из представления.
				НаселенныйПунктДетально = КонтактнаяИнформацияПоПредставлению(ПредставлениеАдреса, Комментарий, Истина);
			Иначе
				УдалитьСтрануИзПредставления();
				НаселенныйПунктДетально.Street		= ПредставлениеАдреса;
				НаселенныйПунктДетально.AddressType	= ?(СведенияОСтране.УчастникЕАЭС, "ЕАЭС", "Иностранный");
			КонецЕсли;
		КонецЕсли;

	Если ВыбранныйТипАдреса = "Муниципальный" Тогда
		Если ПустаяСтрока(НаселенныйПунктДетально.munDistrict) И ПустаяСтрока(НаселенныйПунктДетально.settlement) Тогда
			УстановитьМуниципальныеСведения(НаселенныйПунктДетально);
		КонецЕсли;
	КонецЕсли;

	Если ВыбранныйТипАдреса <> Неопределено Тогда
		НаселенныйПунктДетально.AddressType = ВыбранныйТипАдреса;
	КонецЕсли;
	ОбработкаИзмененияАдреса();

	Если Элементы.АдресПредставлениеКомментарий.ТекущаяСтраница = Элементы.ВСвободнойФорме Тогда
		Элементы.АдресПредставлениеКомментарий.ТекущаяСтраница = Элементы.НациональныйАдрес;
	КонецЕсли;

	УстановитьФлагиВМенюПоТипуАдреса();
	ПоказатьПодсказкуПоТипАдреса();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрануИзПредставления()
	НаименованиеСтраны = ВРег(НаименованиеСтраны(Страна, ОписаниеВидаКонтактнойИнформации(ЭтотОбъект).МеждународныйФорматАдреса));

	ПредставлениеАдреса = СокрЛП(ПредставлениеАдреса);
	Если СтрНачинаетсяС(ВРег(ПредставлениеАдреса), НаименованиеСтраны) Тогда
		Позиция				= СтрДлина(НаименованиеСтраны) + 1;
		Позиция				= ?(Сред(ПредставлениеАдреса, Позиция, 1) = ",", Позиция + 1, Позиция);
		ПредставлениеАдреса	= СокрЛП(Сред(ПредставлениеАдреса, Позиция));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСписокДомовИлиЗемельныхУчастков(ВключитьОтбор)
	Идентификатор = ИдентификаторАдреса(НаселенныйПунктДетально, Истина);

	Если ЗначениеЗаполнено(Идентификатор) И ЕстьСписокДомов(Идентификатор) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТипДома",			ТипДома);
		ПараметрыФормы.Вставить("Номер",			Дом);
		ПараметрыФормы.Вставить("Идентификатор",	Идентификатор);
		ПараметрыФормы.Вставить("Строение",			Строение);
		ПараметрыФормы.Вставить("ТипСтроения",		ТипСтроения);
		ПараметрыФормы.Вставить("Отбор",			ВключитьОтбор);

		ОповещениеОЗакрытие = Новый ОписаниеОповещения("ВыбранДома", ЭтотОбъект);
		ОткрытьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.ВыборДома", ПараметрыФормы,,,,, ОповещениеОЗакрытие, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Если ЗначениеЗаполнено(ПредставлениеАдреса) Тогда
			ТекстПредупреждения = "Выбор из списка недоступен, т.к в адресном классификаторе отсутствует информация о нумерации домов для введенного адреса.";
		Иначе
			ТекстПредупреждения = "Для просмотра списка домов заполните поля адреса.";
		КонецЕсли;
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбОбновлениеАдресногоКлассификатора(Знач СообщениеОПроверкеАдреса)
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("Закрыть",					"Закрыть");
	Кнопки.Добавить("ОбновитьКлассификатор",	"Обновить классификатор");
	Оповещение = Новый ОписаниеОповещения("ПослеВопросОбОбновление", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, СообщениеОПроверкеАдреса, Кнопки);
КонецПроцедуры

&НаКлиенте
Процедура ВыбранДома(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ЗаполнитьПоляДомовСтроенийЗемельныхУчастков(Результат);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	Элементы.СтраницаКомментарий.Картинка = БазоваяПодсистемаКлиентСервер.ОН_КартинкаКомментария(Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	Если Модифицированность Тогда // При немодифицированности работает как "отмена".
		Контекст = Новый Структура("ВидКонтактнойИнформации, НаселенныйПунктДетально, ОсновнаяСтрана, Страна");
		ЗаполнитьЗначенияСвойств(Контекст, ЭтотОбъект);
		Результат = РезультатВыбора(Контекст, ВозвращатьСписокЗначений);

		// Флаги вида были прочитаны заново.
		ВидКонтактнойИнформации = Контекст.ВидКонтактнойИнформации;

		Если (ВидКонтактнойИнформации.ПроверятьКорректность	И Не РазрешитьВводАдресаВСвободнойФорме Или ВидКонтактнойИнформации.МеждународныйФорматАдреса) И Результат.ОшибкиЗаполнения.Количество() > 0 Тогда
			СообщитьОбОшибкахЗаполнения(Результат.ОшибкиЗаполнения, Ложь);

			Возврат;
		КонецЕсли;

		Результат = Результат.ДанныеВыбора;
		Если ВидКонтактнойИнформации.ХранитьИсториюИзменений Тогда
			ОбработатьКонтактнуюИнформациюСИсторией(Результат);
		КонецЕсли;

		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Вставить("КонтактнаяИнформацияОписаниеДополнительныхРеквизитов", КонтактнаяИнформацияОписаниеДополнительныхРеквизитов);
		КонецЕсли;

		СброситьМодифицированностьПриВыборе();
#Если ВебКлиент Тогда
		ФлагЗакрытия		= ЗакрыватьПриВыборе;
		ЗакрыватьПриВыборе	= Ложь;
		ОповеститьОВыборе(Результат);
		ЗакрыватьПриВыборе	= ФлагЗакрытия;
#Иначе
		ОповеститьОВыборе(Результат);
#КонецЕсли
		СохранитьСостояниеФормы();
	Иначе
		Результат = Неопределено;
	КонецЕсли;

	Если (МодальныйРежим Или ЗакрыватьПриВыборе) И Открыта() Тогда
		СброситьМодифицированностьПриВыборе();
		СохранитьСостояниеФормы();
		Закрыть(Результат);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКонтактнуюИнформациюСИсторией(Результат)
	Результат.Вставить("ДействуетС", ?(ВводНовогоАдреса, АдресНаДату, АдресДействуетС));
	ИмяРеквизита	= "";
	Отбор			= Новый Структура("Вид", Результат.Вид);

	СтрокаДействующегоАдреса = Неопределено;
	ДатаБылаИзменена         = Истина;
	ТекущаяДатаАдреса        = БазоваяПодсистемаКлиент.ОН_ДатаСеанса();
	Дельта                   = АдресНаДату - ТекущаяДатаАдреса;
	МинимальнаяДельта        = ?(Дельта > 0, Дельта, -Дельта);
	НайденныеСтроки          = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если ЗначениеЗаполнено(НайденнаяСтрока.ИмяРеквизита) Тогда
			ИмяРеквизита = НайденнаяСтрока.ИмяРеквизита;
		КонецЕсли;
		Если НайденнаяСтрока.ДействуетС = АдресНаДату Тогда
			ДатаБылаИзменена			= Ложь;
			СтрокаДействующегоАдреса	= НайденнаяСтрока;

			Прервать;
		КонецЕсли;

		Дельта = ТекущаяДатаАдреса - НайденнаяСтрока.ДействуетС;
		Дельта = ?(Дельта > 0, Дельта, -Дельта);
		Если Дельта <= МинимальнаяДельта Тогда
			МинимальнаяДельта = Дельта;
			СтрокаДействующегоАдреса = НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;

	Если СтрокаДействующегоАдреса <> Неопределено Тогда
		ДанныеБылиИзменены = ДанныеБылиИзменены(Результат.Значение, СтрокаДействующегоАдреса.Значение);
	Иначе
		ДанныеБылиИзменены = Истина;
	КонецЕсли;

	Если ДатаБылаИзменена Тогда
		Отбор			= Новый Структура("ДействуетС, Вид", АдресДействуетС, Результат.Вид);
		СтрокиСАдресом	= КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);

		Если ДанныеБылиИзменены Тогда
				НоваяКонтактнаяИнформация							= КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяКонтактнаяИнформация, Результат);
				НоваяКонтактнаяИнформация.ЗначенияПолей				= Результат.КонтактнаяИнформация;
				НоваяКонтактнаяИнформация.Значение					= Результат.Значение;
				НоваяКонтактнаяИнформация.ДействуетС				= АдресНаДату;
				НоваяКонтактнаяИнформация.ХранитьИсториюИзменений	= Истина;
				Если СтрокаДействующегоАдреса = Неопределено Тогда
					Отбор = Новый Структура("ЭтоИсторическаяКонтактнаяИнформация, Вид", Ложь, Результат.Вид);
					НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
					Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						НайденнаяСтрока.ЭтоИсторическаяКонтактнаяИнформация	= Истина;
						НайденнаяСтрока.ИмяРеквизита						= "";
					КонецЦикла;
					НоваяКонтактнаяИнформация.ИмяРеквизита							= ИмяРеквизита;
					НоваяКонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация	= Ложь;
				Иначе
					НоваяКонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация	= Истина;
					Результат.Представление											= СтрокаДействующегоАдреса.Представление;
					Результат.КонтактнаяИнформация									= СтрокаДействующегоАдреса.ЗначенияПолей;
					Результат.Значение												= СтрокаДействующегоАдреса.Значение;
				КонецЕсли;
		ИначеЕсли СтрСравнить(Результат.Комментарий, СтрокаДействующегоАдреса.Комментарий) <> 0 И СтрокиСАдресом.Количество() > 0 Тогда
			// Поменяли только комментарий.
			СтрокиСАдресом[0].Комментарий = Результат.Комментарий;
		КонецЕсли;
	Иначе
		Если ДанныеБылиИзменены Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДействующегоАдреса, Результат);
			СтрокаДействующегоАдреса.ЗначенияПолей                       = Результат.КонтактнаяИнформация;
			СтрокаДействующегоАдреса.Значение                            = Результат.Значение;
			СтрокаДействующегоАдреса.ИмяРеквизита                        = ИмяРеквизита;
			СтрокаДействующегоАдреса.ЭтоИсторическаяКонтактнаяИнформация = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеБылиИзменены(ЗначениеПолейДо, ЗначениеПолейПосле)
	Если СтрСравнить(ЗначениеПолейПосле, ЗначениеПолейДо) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ЗначениеЗаполнено(ЗначениеПолейДо)И ЗначениеЗаполнено(ЗначениеПолейПосле) Тогда
		ЗначенияДо    = КонтактнаяИнформацияСервер.сУКИ_JSONВКонтактнуюИнформациюПоПолям(ЗначениеПолейДо, Перечисления.ТипыКонтактнойИнформации.Адрес);
		ЗначенияПосле = КонтактнаяИнформацияСервер.сУКИ_JSONВКонтактнуюИнформациюПоПолям(ЗначениеПолейПосле, Перечисления.ТипыКонтактнойИнформации.Адрес);

		Если СтрСравнить(ЗначенияДо.value, ЗначенияПосле.value) <> 0 Или СтрСравнить(ЗначенияДо.country, ЗначенияПосле.country) <> 0 Или СтрСравнить(ЗначенияДо.comment, ЗначенияПосле.comment) <> 0 Или СтрСравнить(ЗначенияДо.oktmo, ЗначенияПосле.oktmo) <> 0 Тогда
			Возврат Истина;
		КонецЕсли;

		Возврат Ложь;
	КонецЕсли;

	Возврат Истина; // Один из вариантов пустой, другой заполнен.
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияФормыИстории(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВводНовогоАдреса = ?(Результат.Свойство("ВводНовогоАдреса"), Результат.ВводНовогоАдреса, Ложь);
	Если ВводНовогоАдреса Тогда
		АдресДействуетС	= АдресНаДату;
		АдресНаДату		= Результат.ТекущийАдрес;
		Страна			= ОсновнаяСтрана;
		НаселенныйПунктДетально				= КонтактнаяИнформацияКлиентСервер.РСА_ОписаниеНовойКонтактнойИнформации(ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
		НаселенныйПунктДетально.AddressType	= "Муниципальный";
		НаселенныйПунктДетально.Country		= Строка(Страна);
		ОбработкаИзмененияАдреса();
	Иначе
		Отбор			= Новый Структура("Вид", ОписаниеВидаКонтактнойИнформации(ЭтотОбъект).Ссылка);
		НайденныеСтроки	= КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);

		ИмяРеквизита = "";
		Для Каждого СтрокаКонтактнойИнформации Из НайденныеСтроки Цикл
			Если НЕ СтрокаКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация Тогда
				ИмяРеквизита = СтрокаКонтактнойИнформации.ИмяРеквизита;
			КонецЕсли;
			КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Удалить(СтрокаКонтактнойИнформации);
		КонецЦикла;

		Для Каждого СтрокаКонтактнойИнформации Из Результат.История Цикл
			ДанныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаКонтактнойИнформации);
			Если НЕ СтрокаКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация Тогда
				ДанныеСтроки.ИмяРеквизита = ИмяРеквизита;
			КонецЕсли;
			Если НачалоДня(Результат.ТекущийАдрес) = НачалоДня(СтрокаКонтактнойИнформации.ДействуетС) Тогда
				АдресНаДату = Результат.ТекущийАдрес;
				НаселенныйПунктДетально = СтрокаJSONВСтруктуру(СтрокаКонтактнойИнформации.Значение);
				Комментарий = НаселенныйПунктДетально.comment;
				ОбработкаИзмененияАдреса();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ОтобразитьИнформациюОДатахДействияАдреса(АдресНаДату);

	Если НЕ ЭтотОбъект.Модифицированность Тогда
		ЭтотОбъект.Модифицированность = Результат.Модифицированность;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтрокаJSONВСтруктуру(Значение)
	Возврат КонтактнаяИнформацияСервер.сУКИ_JSONВКонтактнуюИнформациюПоПолям(Значение, Перечисления.ТипыКонтактнойИнформации.Адрес);
КонецФункции

&НаКлиенте
Процедура СохранитьСостояниеФормы()
	УстановитьКлючИспользованияФормы();
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СброситьМодифицированностьПриВыборе()
	Модифицированность = Ложь;
	КопияКомментария   = Комментарий;
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатВыбора(Контекст, ВозвращатьСписокЗначений = Ложь)
	// Обновляем некоторые флаги
	ВидКИ			= Контекст.ВидКонтактнойИнформации;
	ЗначениеФлагов	= КонтактнаяИнформацияСервер.сУКИ_СтруктураВидаКонтактнойИнформации(ВидКИ.Ссылка);

	ВидКИ.ТолькоНациональныйАдрес = ЗначениеФлагов.ТолькоНациональныйАдрес;
	ВидКИ.ПроверятьКорректность   = ЗначениеФлагов.ПроверятьКорректность;

	НаселенныйПунктДетально	= Контекст.НаселенныйПунктДетально;
	Результат				= Новый Структура("ДанныеВыбора, ОшибкиЗаполнения");

	НаселенныйПунктДетально.Value = КонтактнаяИнформацияКлиентСервер.РСА_ПредставлениеАдреса(НаселенныйПунктДетально, ВидКИ.ВключатьСтрануВПредставление);

	Если ВозвращатьСписокЗначений Тогда
		ДанныеВыбора = Обработки.РасширенныйВводКонтактнойИнформации.КонтактнаяИнформацияВСтаруюСтруктуру(НаселенныйПунктДетально);
	ИначеЕсли Контекст.Страна = Контекст.ОсновнаяСтрана И ПустаяСтрока(НаселенныйПунктДетально.Value) Тогда
		ДанныеВыбора = "";
	Иначе
		ДанныеВыбора = НаселенныйПунктДетально;
	КонецЕсли;

	Если ТипЗнч(ДанныеВыбора) = Тип("Структура") Тогда
		Если ПустаяСтрока(ДанныеВыбора.countryCode) Тогда
			СведенияОСтране = КонтактнаяИнформацияСервер.УКИ_ДанныеСтраныМира(Неопределено, ДанныеВыбора.Country);
			Если СведенияОСтране <> Неопределено Тогда
				ДанныеВыбора.countryCode = СведенияОСтране.Код;
			КонецЕсли;
		КонецЕсли;

		Значение				= КонтактнаяИнформацияСервер.сУКИ_СтруктураВСтрокуJSON(ДанныеВыбора);
		КонтактнаяИнформация	= КонтактнаяИнформацияСервер.сУКИ_КонтактнаяИнформацияИзJSONВXML(ДанныеВыбора, Перечисления.ТипыКонтактнойИнформации.Адрес);
	Иначе
		Значение             = "";
		КонтактнаяИнформация = "";
	КонецЕсли;

	Результат.ДанныеВыбора = Новый Структура;
	Результат.ДанныеВыбора.Вставить("КонтактнаяИнформация",		КонтактнаяИнформация);
	Результат.ДанныеВыбора.Вставить("Значение",					Значение);
	Результат.ДанныеВыбора.Вставить("Представление",			НаселенныйПунктДетально.Value);
	Результат.ДанныеВыбора.Вставить("Комментарий",				НаселенныйПунктДетально.Comment);
	Результат.ДанныеВыбора.Вставить("ВведеноВСвободнойФорме",	КонтактнаяИнформацияСервер.сУКИ_АдресВведенВСвободнойФорме(НаселенныйПунктДетально));

	// ошибки заполнения
	Результат.ОшибкиЗаполнения = Новый Массив;
	ПроверятьКорректность = ВидКИ.ПроверятьКорректность Или ВидКИ.МеждународныйФорматАдреса;
	Если ПроверятьКорректность И ЗначениеЗаполнено(Значение) Тогда
		Результат.ОшибкиЗаполнения = Обработки.РасширенныйВводКонтактнойИнформации.ОшибкиЗаполненияАдресаXDTO(Значение, ВидКИ);
	КонецЕсли;

	Результат.ДанныеВыбора.Вставить("ВВидеГиперссылки", Контекст.ВидКонтактнойИнформации.ВидРедактирования = "Диалог");

	// Подавляем перенос строк в возвращаемом отдельно представлении.
	Результат.ДанныеВыбора.Представление = СокрЛП(СтрЗаменить(Результат.ДанныеВыбора.Представление, Символы.ПС, " "));
	Результат.ДанныеВыбора.Вставить("Вид",ВидКИ.Ссылка);
	Результат.ДанныеВыбора.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);

	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция СписокОшибокЗаполнения(Адрес, ВидКонтактнойИнформации, ПредупреждатьОбОтсутствии, ТребуетсяОбновление = Ложь)
	Результат = Обработки.РасширенныйВводКонтактнойИнформации.ОшибкиЗаполненияАдресаXDTO(Адрес, ВидКонтактнойИнформации);
	ОпределитьНеобходимостьОбновленияКлассификатора(Адрес, ТребуетсяОбновление);

	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Процедура ОпределитьНеобходимостьОбновленияКлассификатора(Знач НаселенныйПунктДетально, ТребуетсяОбновление)
	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НаименованиеРегиона(НаселенныйПункт)
	Возврат СокрЛП(НаселенныйПункт.area + " " + НаселенныйПункт.areaType);
КонецФункции

&НаСервереБезКонтекста
Функция АдресныеСведенияКлассификатораЗагружены(НаименованиеРегиона)
	Результат = Новый Структура("РегионЗагружен, СведенияУстарели", Ложь, Ложь);

	// Зарезервировано для новых подсистем

	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьСписокКонтактнойИнформации(ВидКонтактнойИнформации, КонтактнаяИнформацияОписаниеДополнительныхРеквизитов)
	Отбор = Новый Структура("Вид", ВидКонтактнойИнформации);
	НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);

	СписокКонтактнойИнформации = Новый Массив;
	Для каждого СтрокаКонтактнойИнформации Из НайденныеСтроки Цикл
		КонтактнаяИнформация = Новый Структура("Представление, Значение, ЗначенияПолей, ДействуетС, Комментарий");
		ЗаполнитьЗначенияСвойств(КонтактнаяИнформация, СтрокаКонтактнойИнформации);
		СписокКонтактнойИнформации.Добавить(КонтактнаяИнформация);
	КонецЦикла;

	Возврат СписокКонтактнойИнформации;
КонецФункции

&НаКлиенте
Процедура ПослеЗагрузкиАдресногоКлассификатора(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(НаселенныйПунктДетально) = Тип("Структура") И НаселенныйПунктДетально.Свойство("areaId") Тогда
		СообщениеОНеобходимостиОбновленияКлассификатора(НаселенныйПунктДетально.areaId);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СообщениеОНеобходимостиОбновленияКлассификатора(Идентификатор = Неопределено)
	Элементы.АдресныйКлассификаторУстарел.Видимость = Ложь;
	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПоляПоТипуАдреса()
	Если СтрСравнить("ВСвободнойФорме", НаселенныйПунктДетально.AddressType) = 0 Тогда
		ПоказатьАдресВСвободнойФорме();
	КонецЕсли;

	ЭтоНациональныйАдрес = (Страна = ОсновнаяСтрана И Не МеждународныйФорматАдреса);
	ОпределитьДоступностьАвтоПодборАдреса();

	Если МеждународныйФорматАдреса Тогда
		НаселенныйПунктДетально.Country = ?(ЗначениеЗаполнено(СведенияОСтране.МеждународноеНаименование), СведенияОСтране.МеждународноеНаименование, ДанныеСтраныМира(СведенияОСтране).Наименование);
	Иначе
		НаселенныйПунктДетально.Country = ДанныеСтраныМира(СведенияОСтране).Наименование;
	КонецЕсли;

	Если ЭтоНациональныйАдрес Тогда
		Если ПустаяСтрока(НаселенныйПунктДетально.AddressType) Тогда
			НаселенныйПунктДетально.AddressType = "Муниципальный";
		КонецЕсли;

		ЭтоЗемельныйУчасток = ?(ЭтоЗемельныйУчасток(ТипДома), Истина, Ложь);

		Элементы.Улица.Заголовок                     = "Улица";
		Элементы.ОКТМО.Видимость                     = ВидКонтактнойИнформации.УказыватьОКТМО;
		ВебСервисИспользуется                        = ВебКлассификаторДоступен;
		АвтоподборДоступен                           = ИспользуетсяАдресныйКлассификатор И (ВебКлассификаторДоступен Или ЕстьЗагруженныйКлассификатор);
		ВидимостьСтроений                            = Истина;
		Элементы.ГруппаДобавлениеСтроения.Видимость  = Истина;
		Элементы.ГруппаДобавлениеПомещения.Видимость = Истина;
		Элементы.Дом.КнопкаВыбора                    = АвтоподборДоступен;
		Элементы.Улица.КнопкаВыбора                  = АвтоподборДоступен;
		Элементы.НаселенныйПункт.КнопкаВыбора        = Истина;
		Элементы.Строение.КнопкаВыбора               = Ложь;
		Элементы.Строение.Доступность                = Не ЭтоЗемельныйУчасток;
		Элементы.ТипСтроения.Доступность             = Не ЭтоЗемельныйУчасток;
		Элементы.НаселенныйПункт.ПодсказкаВвода      = "Введите первые буквы названия населенного пункта";
		Элементы.Улица.ПодсказкаВвода                = "Введите первые буквы названия улицы";
	Иначе
		Элементы.ГруппаДобавлениеСтроения.Видимость  = Ложь;
		Элементы.ГруппаДобавлениеПомещения.Видимость = Ложь;
		Если СведенияОСтране.УчастникЕАЭС И Не МеждународныйФорматАдреса Тогда
			Элементы.Улица.Заголовок              = "Улица";
			Элементы.НаселенныйПункт.КнопкаВыбора = Истина;
			ВидимостьСтроений                     = Истина;
			Элементы.Дом.КнопкаВыбора             = Ложь;
			Элементы.Строение.КнопкаВыбора        = Ложь;
		Иначе
			Элементы.Улица.Заголовок              = "Адрес";
			Элементы.НаселенныйПункт.КнопкаВыбора = Ложь;
			Элементы.Улица.КнопкаВыбора           = Ложь;
			ВидимостьСтроений                     = Ложь;
		КонецЕсли;

		Элементы.ОКТМО.Видимость                       = Ложь;
		Элементы.ПроверитьЗаполнениеАдреса.Доступность = Ложь;
		ВебСервисИспользуется                          = Ложь;
		АвтоподборДоступен                             = Ложь;
		Элементы.НаселенныйПункт.ПодсказкаВвода        = "";
		Элементы.Улица.ПодсказкаВвода                  = "";
	КонецЕсли;

	// Проверять, вводить в свободной форме и искать по индексу можем только российские адреса.
	Элементы.Улица.МногострочныйРежим                          = НЕ ЭтоНациональныйАдрес;
	Элементы.ГруппаСтроенияИИнформация.Видимость               = ВидимостьСтроений;
	Элементы.ПроверитьЗаполнениеАдреса.Доступность             = ЭтоНациональныйАдрес И АвтоподборДоступен;
	Элементы.ЗаполнитьПоПочтовомуИндексу.Доступность           = ЭтоНациональныйАдрес;
	Элементы.МуниципальноеДеление.Доступность                  = ЭтоНациональныйАдрес;
	Элементы.АдминистративноТерриториальноеДеление.Доступность = ЭтоНациональныйАдрес;

	Если ВидКонтактнойИнформации.ВключатьСтрануВПредставление Тогда
		ОбновитьПредставлениеАдреса();
	КонецЕсли;

	УстановитьФлагиВМенюПоТипуАдреса();
	ПоказатьПодсказкуПоТипАдреса();
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьДоступностьАвтоПодборАдреса()
	Если Не (СтрСравнить(ПредопределенноеЗначение("Справочник.СтраныМира.Россия"), Страна) = 0) Тогда
		АвтоподборДоступен = Ложь;

		Возврат;
	КонецЕсли;

	АвтоподборДоступен = ВебКлассификаторДоступен Или ЕстьЗагруженныйКлассификатор;
КонецПроцедуры

&НаСервере
Процедура ОпределитьОтображениеЭлементовНаФорме(ТолькоПросмотр)
	// Разовые настройки отображения формы.

	Если Не ЕстьЗагруженныйКлассификатор Тогда
		Элементы.ЗаполнитьПоПочтовомуИндексу.Видимость            = Ложь;
		Элементы.Улица.КнопкаВыбора                               = Ложь;
		Элементы.Дом.КнопкаВыбора                                 = Ложь;
		Элементы.Строение.КнопкаВыбора                            = Ложь;
		Элементы.НаселенныйПункт.ПодсказкаВвода                   = "Введите название населенного пункта";
		Элементы.Улица.ПодсказкаВвода                             = "Введите название улицы";
	КонецЕсли;

	Если ВебКлассификаторДоступен Или МеждународныйФорматАдреса Тогда
		Элементы.ГруппаИнформация.Видимость = Ложь;
	Иначе
		СведенияОЗагрузке = АдресныеСведенияКлассификатораЗагружены(НаименованиеРегиона(НаселенныйПунктДетально));
		Если Не СведенияОЗагрузке.РегионЗагружен Тогда
			Элементы.ГруппаИнформация.Видимость             = Истина;
		Иначе
			Элементы.ГруппаИнформация.Видимость             = Ложь;
			Элементы.АдресныйКлассификаторУстарел.Видимость = СведенияОЗагрузке.СведенияУстарели;
		КонецЕсли;
	КонецЕсли;

	Если ТолькоПросмотр Тогда
		Элементы.ГруппаКомандаДобавить.Видимость = Ложь;
		Элементы.ДобавитьКомментарий.Доступность = Ложь;
		Элементы.ФормаОчиститьАдрес.Доступность  = Ложь;
		Элементы.АдресНаДату.Доступность         = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокВыбораЭлемента(ЭлементВид, ЭлементЗначение, Данные)
	ЭлементЗначение.КнопкаВыпадающегоСписка = Данные.МожноПодбиратьЗначения;

	СписокТипов = Данные.ВариантыТипа;
	ЭлементВид.КнопкаВыпадающегоСписка = СписокТипов.Количество() > 0;
	Если ЭлементВид.КнопкаВыпадающегоСписка Тогда
		ЭлементВид.СписокВыбора.ЗагрузитьЗначения(СписокТипов);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеРеквизитовПоКонтактнойИнформации(ДанныеАдреса)
	// Общие реквизиты
	ПредставлениеАдреса = ДанныеАдреса.Value;
	Если ДанныеАдреса.Свойство("Comment") Тогда
		Комментарий         = ДанныеАдреса.Comment;
	КонецЕсли;

	СсылкаНаОсновнуюСтрану	= ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	ДанныеСтраны			= Неопределено;
	Если ДанныеАдреса.Свойство("Country") И ЗначениеЗаполнено(ДанныеАдреса.Country) Тогда
		ДанныеСтраны = КонтактнаяИнформацияСервер.УКИ_ДанныеСтраныМира(, СокрЛП(ДанныеАдреса.Country));
	КонецЕсли;

	Если ДанныеСтраны = Неопределено Тогда
		// Не нашли ни в справочнике, ни в классификаторе.
		Страна    = СсылкаНаОсновнуюСтрану;
		КодСтраны = СсылкаНаОсновнуюСтрану.Код;
	Иначе
		Страна    = ДанныеСтраны.Ссылка;
		КодСтраны = ДанныеСтраны.Код;
	КонецЕсли;

	СведенияОСтране = СведенияОСтране(Страна);

	Если СтрСравнить("ВСвободнойФорме", ДанныеАдреса.AddressType) = 0 Тогда
		РазрешитьВводАдресаВСвободнойФорме = Истина;
	КонецЕсли;

	УстановитьЗначенияНациональныхРеквизитовКонтактнойИнформации(ДанныеАдреса);
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияНациональныхРеквизитовКонтактнойИнформации(ДанныеАдреса)
	// Индекс просто ставим
	Если ДанныеАдреса.Свойство("ZIPCode") Тогда
		Индекс = Формат(ДанныеАдреса.ZIPCode, "ЧГ=");
	КонецЕсли;

	// Индекс просто ставим
	Если ДанныеАдреса.Свойство("OKTMO") Тогда
		ОКТМО = Формат(ДанныеАдреса.OKTMO, "ЧГ=");
	КонецЕсли;

	// Синтетический "Населенный пункт" получаем как представление.
	НаселенныйПункт = Обработки.РасширенныйВводКонтактнойИнформации.ПредставлениеНаселенногоПункта(ДанныеАдреса);
	Если ЗначениеЗаполнено(ДанныеАдреса.Street) Тогда
		Улица = СокрЛП(ДанныеАдреса.Street + " " + ДанныеАдреса.StreetType);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеАдреса.HouseType) Тогда
		ТипДома = ДанныеАдреса.HouseType;
		Если ДанныеАдреса.Свойство("HouseNumber") Тогда
			Дом = ДанныеАдреса.HouseNumber;
		ИначеЕсли ДанныеАдреса.Свойство("House") Тогда
			Дом = ДанныеАдреса.House;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ДанныеАдреса.stead) Тогда
		ТипДома	= "Зем. участок";
		Дом		= ДанныеАдреса.stead;
	КонецЕсли;

	ЗаполняемПервоеЗдание = Истина;
	Если ДанныеАдреса.Свойство("Buildings") И  ТипЗнч(ДанныеАдреса.Buildings) = Тип("Массив") Тогда
		Для каждого ОписаниеЗдания Из ДанныеАдреса.Buildings Цикл
			Если ЗаполняемПервоеЗдание Тогда
				ТипСтроения				= ОписаниеЗдания.Type;
				Строение				= ОписаниеЗдания.Number;
				ЗаполняемПервоеЗдание	= Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ЗаполняемПервоеПомещение = Истина;
	Если ДанныеАдреса.Свойство("Apartments") И  ТипЗнч(ДанныеАдреса.Apartments) = Тип("Массив") Тогда
		Для каждого ОписаниеСтроения Из ДанныеАдреса.Apartments Цикл
			Если ЗаполняемПервоеПомещение Тогда
				ТипПомещения    = ОписаниеСтроения.Type;
				Помещение       = ОписаниеСтроения.Number;
				ЗаполняемПервоеПомещение = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ОтобразитьДополнительныеЗдания(НаселенныйПунктДетально);
КонецПроцедуры

&НаСервере
Функция ДобавитьПолеСтроенияИлиПомещения(Идентификатор, Тип, Значение)
	Если Тип = "Помещение" Тогда
		НоваяГруппа = Элементы.Добавить("ГруппаПомещение" + Идентификатор, Тип("ГруппаФормы"), Элементы.ГруппаПомещенияДополнительно);
		ЗаполнитьЗначенияСвойств(НоваяГруппа, Элементы.ГруппаПомещенияОсновная,, "ПутьКДаннымЗаголовка");

		НовыйТип = Элементы.Добавить("ТипПомещения" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
		ЗаполнитьЗначенияСвойств(НовыйТип, Элементы.ТипПомещения,, "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
		НовыйТип.СписокВыбора.ЗагрузитьЗначения(Элементы.ТипПомещения.СписокВыбора.ВыгрузитьЗначения());
		НовыйТип.УстановитьДействие("ПриИзменении", "Подключаемый_ТипПомещенияПриИзменении");
		Если БазоваяПодсистемаСервер.ОН_ЭтоМобильныйКлиент() Тогда
			НовыйТип.КнопкаВыбора				= Истина;
			НовыйТип.ОтображениеКнопкиВыбора	= ОтображениеКнопкиВыбора.Авто;
		КонецЕсли;

		НовыйЭлемент = Элементы.Добавить("Помещение" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элементы.Помещение,, "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
		НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(Элементы.Помещение.СписокВыбора.ВыгрузитьЗначения());
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПомещениеПриИзменении");
	Иначе
		НоваяГруппа = Элементы.Добавить("ГруппаСтроение" + Идентификатор, Тип("ГруппаФормы"), Элементы.ГруппаСтроенияДополнительно);
		ЗаполнитьЗначенияСвойств(НоваяГруппа, Элементы.ГруппаСтроенияОсновная,, "ПутьКДаннымЗаголовка");

		НовыйТип = Элементы.Добавить("ТипСтроения" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
		ЗаполнитьЗначенияСвойств(НовыйТип, Элементы.ТипСтроения,, "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
		НовыйТип.СписокВыбора.ЗагрузитьЗначения(Элементы.ТипСтроения.СписокВыбора.ВыгрузитьЗначения());
		НовыйТип.УстановитьДействие("ПриИзменении", "Подключаемый_ТипСтроенияПриИзменении");
		Если БазоваяПодсистемаСервер.ОН_ЭтоМобильныйКлиент() Тогда
			НовыйТип.КнопкаВыбора				= Истина;
			НовыйТип.ОтображениеКнопкиВыбора	= ОтображениеКнопкиВыбора.Авто;
		КонецЕсли;

		НовыйЭлемент = Элементы.Добавить("Строение" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элементы.Строение,, "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
		НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(Элементы.Строение.СписокВыбора.ВыгрузитьЗначения());
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_СтроениеПриИзменении");
	КонецЕсли;

	НовыйЭлемент.КнопкаВыбора	= Ложь;
	Добавлять					= Новый Массив;

	Добавлять.Добавить(Новый РеквизитФормы(НовыйТип.Имя,     Новый ОписаниеТипов("Строка")));
	Добавлять.Добавить(Новый РеквизитФормы(НовыйЭлемент.Имя, Новый ОписаниеТипов("Строка")));

	ИзменитьРеквизиты(Добавлять);

	НайденныеСтроки = ДополнительныеСтроенияИПомещения.НайтиСтроки(Новый Структура("Значение", Значение));
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныеСтроки[0].ИмяЭлемента = Идентификатор;
	КонецЕсли;

	Если СтрСравнить(Значение, НаименованиеПриДобавлениеПроизвольногоПомещения()) <> 0 Тогда
		ЭтотОбъект[НовыйТип.Имя]     = Значение;
		Результат                    = НовыйЭлемент.Имя;
	Иначе
		НайденныеСтроки[0].ПредыдущиеЗначение = "";
		Результат                             = НовыйТип.Имя;
	КонецЕсли;

	ЭтотОбъект[НовыйЭлемент.Имя] = "";

	НовыйТип.ПутьКДанным     = НовыйТип.Имя;
	НовыйЭлемент.ПутьКДанным = НовыйЭлемент.Имя;

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ОбновитьДополнительныеЗдания()
	ОтобразитьДополнительныеЗдания();
КонецПроцедуры

&НаСервере
Функция ОтобразитьДополнительныеЗдания(НаселенныйПунктДетальноПереопределение = Неопределено)
	Если НаселенныйПунктДетальноПереопределение <> Неопределено Тогда
		НаселенныйПунктДетально = НаселенныйПунктДетальноПереопределение;
	КонецЕсли;

	Если НаселенныйПунктДетально = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Удалять = Новый Массив;

	КоличествоЭлементов = Элементы.ГруппаСтроенияДополнительно.ПодчиненныеЭлементы.Количество();
	Пока КоличествоЭлементов > 0 Цикл
		КоличествоЭлементов = КоличествоЭлементов - 1;

		ЭлементыФормы = Элементы.ГруппаСтроенияДополнительно.ПодчиненныеЭлементы.Получить(КоличествоЭлементов);
		Идентификатор = Сред(ЭлементыФормы.Имя, СтрДлина("ГруппаСтроение") + 1);
		Удалять.Добавить("ТипСтроения" + Идентификатор);
		Удалять.Добавить("Строение" + Идентификатор);
		Элементы.Удалить(Элементы["ГруппаСтроение" + Идентификатор]);

		НайденныеСтроки = ДополнительныеСтроенияИПомещения.НайтиСтроки(Новый Структура("ИмяЭлемента", Идентификатор));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].ИмяЭлемента = "";
		КонецЕсли;
	КонецЦикла;

	КоличествоЭлементов = Элементы.ГруппаПомещенияДополнительно.ПодчиненныеЭлементы.Количество();
	Пока КоличествоЭлементов > 0 Цикл
		КоличествоЭлементов	= КоличествоЭлементов - 1;
		ЭлементыФормы		= Элементы.ГруппаПомещенияДополнительно.ПодчиненныеЭлементы.Получить(КоличествоЭлементов);

		Идентификатор		= Сред(ЭлементыФормы.Имя, СтрДлина("ГруппаПомещение") + 1);
		Удалять.Добавить("ТипПомещения" + Идентификатор);
		Удалять.Добавить("Помещение" + Идентификатор);
		Элементы.Удалить(Элементы["ГруппаПомещение" + Идентификатор]);

		НайденныеСтроки = ДополнительныеСтроенияИПомещения.НайтиСтроки(Новый Структура("ИмяЭлемента", Идентификатор));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].ИмяЭлемента = "";
		КонецЕсли;
	КонецЦикла;

	ИзменитьРеквизиты(, Удалять);

	Если ТипЗнч(НаселенныйПунктДетально.Buildings) = Тип("Массив") Тогда
		КоличествоЗданий = НаселенныйПунктДетально.Buildings.Количество() - 1;

		Результат = Неопределено;
		Для НомерСтроки = 1 По КоличествоЗданий Цикл
			Строка        = НаселенныйПунктДетально.Buildings[НомерСтроки];
			Идентификатор = СтрЗаменить(Новый УникальныйИдентификатор(),"-", "");

			НоваяГруппа = Элементы.Добавить("ГруппаСтроение" + Идентификатор, Тип("ГруппаФормы"), Элементы.ГруппаСтроенияДополнительно);
			ЗаполнитьЗначенияСвойств(НоваяГруппа, Элементы.ГруппаСтроенияОсновная,, "ПутьКДаннымЗаголовка");

			НовыйТип = Элементы.Добавить("ТипСтроения" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
			ЗаполнитьЗначенияСвойств(НовыйТип, Элементы.ТипСтроения, , "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
			НовыйТип.СписокВыбора.ЗагрузитьЗначения(Элементы.ТипСтроения.СписокВыбора.ВыгрузитьЗначения());
			НовыйТип.УстановитьДействие("ПриИзменении", "Подключаемый_ТипСтроенияПриИзменении");
			Если БазоваяПодсистемаСервер.ОН_ЭтоМобильныйКлиент() Тогда
				НовыйТип.КнопкаВыбора				= Истина;
				НовыйТип.ОтображениеКнопкиВыбора	= ОтображениеКнопкиВыбора.Авто;
			КонецЕсли;

			НовыйЭлемент = Элементы.Добавить("Строение" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элементы.Строение,, "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
			НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(Элементы.Строение.СписокВыбора.ВыгрузитьЗначения());
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_СтроениеПриИзменении");
			НовыйЭлемент.КнопкаВыбора = Ложь;

			Если НомерСтроки = КоличествоЗданий Тогда
				Результат = НовыйЭлемент.Имя;
			КонецЕсли;

			Добавлять = Новый Массив;
			Добавлять.Добавить(Новый РеквизитФормы(НовыйТип.Имя,     Новый ОписаниеТипов("Строка")));
			Добавлять.Добавить(Новый РеквизитФормы(НовыйЭлемент.Имя, Новый ОписаниеТипов("Строка")));

			ИзменитьРеквизиты(Добавлять);
			ЭтотОбъект[НовыйТип.Имя]     = Строка.Type;
			ЭтотОбъект[НовыйЭлемент.Имя] = Строка.Number;

			НовыйТип.ПутьКДанным     = НовыйТип.Имя;
			НовыйЭлемент.ПутьКДанным = НовыйЭлемент.Имя;

			НайденныеСтроки = ДополнительныеСтроенияИПомещения.НайтиСтроки(Новый Структура("Значение", Строка.Type));
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденныеСтроки[0].ИмяЭлемента = Идентификатор;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если ТипЗнч(НаселенныйПунктДетально.Apartments) = Тип("Массив") Тогда
		КоличествоПомещений = НаселенныйПунктДетально.Apartments.Количество() - 1;

		Результат = Неопределено;
		Для НомерСтроки = 1 По КоличествоПомещений Цикл
			Строка        = НаселенныйПунктДетально.Apartments[НомерСтроки];
			Идентификатор = СтрЗаменить(Новый УникальныйИдентификатор(),"-", "");

			НоваяГруппа = Элементы.Добавить("ГруппаПомещение" + Идентификатор, Тип("ГруппаФормы"), Элементы.ГруппаПомещенияДополнительно);
			ЗаполнитьЗначенияСвойств(НоваяГруппа, Элементы.ГруппаПомещенияОсновная,, "ПутьКДаннымЗаголовка");

			НовыйТип = Элементы.Добавить("ТипПомещения" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
			ЗаполнитьЗначенияСвойств(НовыйТип, Элементы.ТипПомещения, , "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
			НовыйТип.СписокВыбора.ЗагрузитьЗначения(Элементы.ТипПомещения.СписокВыбора.ВыгрузитьЗначения());
			НовыйТип.УстановитьДействие("ПриИзменении", "Подключаемый_ТипПомещенияПриИзменении");
			Если БазоваяПодсистемаСервер.ОН_ЭтоМобильныйКлиент() Тогда
				НовыйТип.КнопкаВыбора				= Истина;
				НовыйТип.ОтображениеКнопкиВыбора	= ОтображениеКнопкиВыбора.Авто;
			КонецЕсли;

			НовыйЭлемент = Элементы.Добавить("Помещение" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элементы.Помещение,, "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
			НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(Элементы.Помещение.СписокВыбора.ВыгрузитьЗначения());
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПомещениеПриИзменении");
			НовыйЭлемент.КнопкаВыбора = Ложь;

			Если НомерСтроки = КоличествоПомещений Тогда
				Результат = НовыйЭлемент.Имя;
			КонецЕсли;

			Добавлять = Новый Массив;
			Добавлять.Добавить(Новый РеквизитФормы(НовыйТип.Имя,     Новый ОписаниеТипов("Строка")));
			Добавлять.Добавить(Новый РеквизитФормы(НовыйЭлемент.Имя, Новый ОписаниеТипов("Строка")));

			ИзменитьРеквизиты(Добавлять);
			ЭтотОбъект[НовыйТип.Имя]     = Строка.Type;
			ЭтотОбъект[НовыйЭлемент.Имя] = Строка.Number;

			НовыйТип.ПутьКДанным     = НовыйТип.Имя;
			НовыйЭлемент.ПутьКДанным = НовыйЭлемент.Имя;

			НайденныеСтроки = ДополнительныеСтроенияИПомещения.НайтиСтроки(Новый Структура("Значение", Строка.Type));
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденныеСтроки[0].ИмяЭлемента = Идентификатор;
			Иначе
				НовоеПомещение                       = ДополнительныеСтроенияИПомещения.Добавить();
				НовоеПомещение.Тип                   = "Помещение";
				НовоеПомещение.Значение              = НаименованиеПриДобавлениеПроизвольногоПомещения();
				НовоеПомещение.Видимость             = Ложь;
				НовоеПомещение.Ключ                  = "";
				НовоеПомещение.ПредыдущиеЗначение    = Строка.Type;
				НовоеПомещение.ИмяЭлемента           = Идентификатор;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
КонецФункции

&НаСервере
Процедура ОтобразитьИнформациюОДатахДействияАдреса(ДействуетС)
	Если ВводНовогоАдреса Тогда
		ТекстИсторическийАдрес = "";
		АдресНаДату = ДействуетС;
		Элементы.ГруппаИсторическийАдрес.Видимость = ЗначениеЗаполнено(ДействуетС);
	Иначе
		Отбор = Новый Структура("Вид", ОписаниеВидаКонтактнойИнформации(ЭтотОбъект).Ссылка);
		НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0  ИЛИ (НайденныеСтроки.Количество() = 1 И ПустаяСтрока(НайденныеСтроки[0].Представление)) Тогда
			АдресНаДату									= Дата(1, 1, 1);
			Элементы.ГруппаИсторическийАдрес.Видимость	= Ложь;
			Элементы.ИсторияИзменений.Видимость			= Ложь;
		Иначе
			Результат		= ОпределитьДатуДействия(ДействуетС, НайденныеСтроки);
			АдресНаДату		= Результат.ДействуетС;
			АдресДействуетС	= Результат.ДействуетС;

			Если НЕ ЗначениеЗаполнено(Результат.ДействуетС) И ПустаяСтрока(Результат.ТекущаяСтрока.Представление) Тогда
				Элементы.ГруппаИсторическийАдрес.Видимость = Ложь;
			ИначеЕсли ЗначениеЗаполнено(Результат.ДействуетПо) Тогда
				ТекстИсторическийАдрес = " " + СтрШаблон("действует по %1", Формат(Результат.ДействуетПо - 10, "ДЛФ=DD"));
			Иначе
				ТекстИсторическийАдрес = "действует по настоящее время.";
			КонецЕсли;
			ОтобразитьКоличествоЗаписейВИсторииИзменений();
		КонецЕсли;
	КонецЕсли;

	Элементы.ТекстПроДатуДействия.Заголовок		= ТекстИсторическийАдрес;
	Элементы.АдресНаДату.ФорматРедактирования	= ?(ЗначениеЗаполнено(АдресНаДату), "", "ДФ='""" + НачалоУчета() + """'");
КонецПроцедуры

&НаСервере
Процедура ОтобразитьКоличествоЗаписейВИсторииИзменений()
	ВидКИ = ВидКонтактнойИнформации;
	Отбор = Новый Структура("Вид", ВидКИ.Ссылка);
	НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 1 Тогда
		Элементы.ИсторияИзмененийГиперссылка.Заголовок = СтрШаблон("История изменений (%1)", НайденныеСтроки.Количество());
		Элементы.ИсторияИзмененийГиперссылка.Видимость = Истина;
	ИначеЕсли НайденныеСтроки.Количество() = 1 И ПустаяСтрока(НайденныеСтроки[0].ЗначенияПолей) Тогда
		Элементы.ИсторияИзмененийГиперссылка.Видимость = Ложь;
	Иначе
		Элементы.ИсторияИзмененийГиперссылка.Заголовок = "История изменений";
		Элементы.ИсторияИзмененийГиперссылка.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьДатуДействия(ДействуетС, История)
	Результат = Новый Структура("ДействуетПо, ДействуетС, ТекущаяСтрока");
	Если История.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;

	ТекущаяСтрока        = Неопределено;
	ДействуетПо          = Неопределено;
	Минимум              = -1;
	МинимумСравнительный = Неопределено;

	Для каждого СтрокаИстория Из История Цикл
		Дельта = СтрокаИстория.ДействуетС - ДействуетС;
		Если Дельта <= 0 И (МинимумСравнительный = Неопределено ИЛИ Дельта > МинимумСравнительный) Тогда
			ТекущаяСтрока        = СтрокаИстория;
			МинимумСравнительный = Дельта;
		КонецЕсли;

		Если Минимум = -1 Тогда
			Минимум       = Дельта + 1;
			ТекущаяСтрока = СтрокаИстория;
		КонецЕсли;
		Если Дельта > 0 И МодульЧисла(Дельта) < МодульЧисла(Минимум) Тогда
			ДействуетПо = СтрокаИстория.ДействуетС;
			Минимум     = МодульЧисла(Дельта);
		КонецЕсли;
	КонецЦикла;

	Результат.ДействуетПо   = ДействуетПо;
	Результат.ДействуетС    = ТекущаяСтрока.ДействуетС;
	Результат.ТекущаяСтрока = ТекущаяСтрока;

	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МодульЧисла(Число)
	Возврат Макс(Число, -Число);
КонецФункции

&НаКлиенте
Процедура Подключаемый_ТипСтроенияПриИзменении(Элемент)
	Идентификатор = Сред(Элемент.Имя, СтрДлина("ТипСтроения") + 1);
	НайденныеСтрокиСтарые = ДополнительныеСтроенияИПомещения.НайтиСтроки(Новый Структура("ИмяЭлемента", Идентификатор));
	Если НайденныеСтрокиСтарые.Количество() > 0 Тогда
		СтароеЗначение = НайденныеСтрокиСтарые[0].Значение;
	КонецЕсли;

	Значение = ЭтотОбъект[Элемент.Имя];

	НайденныеСтрокиНовый = ДополнительныеСтроенияИПомещения.НайтиСтроки(Новый Структура("Значение", Значение));
	Если НайденныеСтрокиНовый.Количество() > 0 Тогда
		Если НайденныеСтрокиНовый[0].Видимость = Ложь Тогда
			ЭтотОбъект[Элемент.Имя] = СтароеЗначение; // Такое уже значение есть на форме, откатываем на старое.
			Возврат;
		КонецЕсли;
		НайденныеСтрокиСтарые[0].ИмяЭлемента = "";
		НайденныеСтрокиНовый[0].ИмяЭлемента  = Идентификатор;
	КонецЕсли;

	Для каждого Помещения Из НаселенныйПунктДетально.Buildings Цикл
		Если СтрСравнить(Помещения.Type, СтароеЗначение) = 0 Тогда
			Помещения.Type = ЭтотОбъект[Элемент.Имя];
			ОбновитьПредставлениеАдреса();
			Прервать;
		КонецЕсли;
	КонецЦикла;

	ОбновитьМенюДобавленияСтроенийИПомещений();

	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтроениеПриИзменении(Элемент)
	Идентификатор = Сред(Элемент.Имя, СтрДлина("Строение") + 1);

	НайденныеСтроки = ДополнительныеСтроенияИПомещения.НайтиСтроки(Новый Структура("ИмяЭлемента", Идентификатор));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Значение = НайденныеСтроки[0].Значение;
	Иначе
		Возврат;
	КонецЕсли;

	ЭтоНовый = Истина;
	Для ИндексПозиции = 0 По НаселенныйПунктДетально.Buildings.Количество() - 1 Цикл
		Помещения = НаселенныйПунктДетально.Buildings[ИндексПозиции];
		Если СтрСравнить(Помещения.Type, Значение) = 0 Тогда
			Если ЗначениеЗаполнено(ЭтотОбъект[Элемент.Имя]) Тогда
				Помещения.Number = ЭтотОбъект[Элемент.Имя];
			Иначе
				НаселенныйПунктДетально.Buildings.Удалить(ИндексПозиции);
			КонецЕсли;
			ЭтоНовый = Ложь;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ЭтоНовый Тогда
		НаселенныйПунктДетально.Buildings.Добавить(ЗначениеСтроенияИлиПомещения(Значение, ЭтотОбъект[Элемент.Имя]));
	КонецЕсли;

	ОбновитьПредставлениеАдреса();

	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТипПомещенияПриИзменении(Элемент)
	Идентификатор = Сред(Элемент.Имя, СтрДлина("ТипПомещения") + 1);
	НайденныеСтрокиСтарые = ДополнительныеСтроенияИПомещения.НайтиСтроки(Новый Структура("ИмяЭлемента", Идентификатор));
	Если НайденныеСтрокиСтарые.Количество() > 0 Тогда
		СтароеЗначение = НайденныеСтрокиСтарые[0].ПредыдущиеЗначение;
	КонецЕсли;

	Значение = ПерваяБукваЗаглавная(ЭтотОбъект[Элемент.Имя]);
	Если ПустаяСтрока(Значение) Тогда
		ЭтотОбъект[Элемент.Имя] = СтароеЗначение; // Такое значение есть на форме, откатываем на старое.

		Возврат;
	КонецЕсли;

	НайденныеСтрокиНовый = ДополнительныеСтроенияИПомещения.НайтиСтроки(Новый Структура("Значение", Значение));
	Если НайденныеСтрокиНовый.Количество() > 0 Тогда
		Если НайденныеСтрокиНовый[0].Видимость = Ложь Тогда
			ЭтотОбъект[Элемент.Имя] = СтароеЗначение; // Такое значение есть на форме, откатываем на старое.

			Возврат;
		КонецЕсли;

		НайденныеСтрокиНовый[0].ИмяЭлемента         = Идентификатор;
		НайденныеСтрокиСтарые[0].ИмяЭлемента        = "";
		Если СтрСравнить(НайденныеСтрокиСтарые[0].Значение, НаименованиеПриДобавлениеПроизвольногоПомещения()) <> 0 Тогда
			НайденныеСтрокиСтарые[0].ПредыдущиеЗначение = ЭтотОбъект[Элемент.Имя];
		Иначе
			НайденныеСтрокиСтарые[0].ПредыдущиеЗначение =  НаименованиеПриДобавлениеПроизвольногоПомещения();
		КонецЕсли;
	Иначе
		НовоеПомещение                       = ДополнительныеСтроенияИПомещения.Добавить();
		НовоеПомещение.Тип                   = "Помещение";
		НовоеПомещение.Значение              = Значение;
		НовоеПомещение.Видимость             = Ложь;
		НовоеПомещение.Ключ                  = "";
		НовоеПомещение.ПредыдущиеЗначение    = ЭтотОбъект[Элемент.Имя];
		НовоеПомещение.ИмяЭлемента           = Идентификатор;
		НайденныеСтрокиСтарые[0].ИмяЭлемента = "";
	КонецЕсли;

	Для каждого Помещения Из НаселенныйПунктДетально.Apartments Цикл
		Если СтрСравнить(Помещения.Type, СтароеЗначение) = 0 Тогда
			Помещения.Type = ЭтотОбъект[Элемент.Имя];
			ОбновитьПредставлениеАдреса();

			Прервать;
		КонецЕсли;
	КонецЦикла;

	ОбновитьМенюДобавленияСтроенийИПомещений();

	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПомещениеПриИзменении(Элемент)
	Идентификатор = Сред(Элемент.Имя, СтрДлина("Помещение") + 1);

	НайденныеСтроки = ДополнительныеСтроенияИПомещения.НайтиСтроки(Новый Структура("ИмяЭлемента", Идентификатор));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Если СтрСравнить(НайденныеСтроки[0].Значение, НаименованиеПриДобавлениеПроизвольногоПомещения()) <> 0 Тогда
			Значение = НайденныеСтроки[0].Значение;
		Иначе
			Значение = НайденныеСтроки[0].ПредыдущиеЗначение;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	ЭтоНовый = Истина;
	Для ИндексПозиции = 0 По НаселенныйПунктДетально.Apartments.Количество() - 1 Цикл
		Помещения = НаселенныйПунктДетально.Apartments[ИндексПозиции];
		Если СтрСравнить(Помещения.Type, Значение) = 0 Тогда
			Если ЗначениеЗаполнено(ЭтотОбъект[Элемент.Имя]) Тогда
				Помещения.Number = ЭтотОбъект[Элемент.Имя];
			Иначе
				НаселенныйПунктДетально.Apartments.Удалить(ИндексПозиции);
			КонецЕсли;
			ЭтоНовый = Ложь;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ЭтоНовый Тогда
		НаселенныйПунктДетально.Apartments.Добавить(ЗначениеСтроенияИлиПомещения(Значение, ЭтотОбъект[Элемент.Имя]));
	КонецЕсли;
	ОбновитьПредставлениеАдреса();

	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПомещениеИзАдреса(УдаляемыйТипПомещения)
	Для ИндексПозиции = 0 По НаселенныйПунктДетально.Apartments.Количество() - 1 Цикл
		СведенияОПомещении = НаселенныйПунктДетально.Apartments[ИндексПозиции];
		Если СтрСравнить(СведенияОПомещении.Type, УдаляемыйТипПомещения) =0 Тогда
			НаселенныйПунктДетально.Apartments.Удалить(ИндексПозиции);

			Возврат;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМенюДобавленияСтроенийИПомещений()
	Для каждого СтроениеПомещение Из ДополнительныеСтроенияИПомещения Цикл
		Если ЗначениеЗаполнено(СтроениеПомещение.Ключ) Тогда
			Если ЗначениеЗаполнено(СтроениеПомещение.ИмяЭлемента) Или СтрСравнить(СтроениеПомещение.Значение, ТипПомещения) = 0 Или СтрСравнить(СтроениеПомещение.Значение, ТипСтроения)  = 0 Тогда
				СтроениеПомещение.Видимость								= Ложь;
				Элементы["Добавить_"+ СтроениеПомещение.Ключ].Видимость	= Ложь;
			Иначе
				СтроениеПомещение.Видимость								= Истина;
				Элементы["Добавить_"+ СтроениеПомещение.Ключ].Видимость	= Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахЗаполнения(СписокОшибок, ПредупреждатьОбОтсутствии, ТребуетсяОбновление = Ложь)
	ОчиститьСообщения();

	КоличествоОшибок = СписокОшибок.Количество();
	Если КоличествоОшибок = 0 И ПредупреждатьОбОтсутствии Тогда
		Элементы.ГруппаОписаниеНедоступностиСервера.Видимость = Ложь;
		// Нет ошибок
		Если НЕ ВебСервисИспользуется И ТребуетсяОбновление Тогда
			Если ЕстьПравоЗагружатьКлассификатор Тогда
				СообщениеОПроверкеАдреса = "Адрес введен корректно, но адресные сведения, загруженные в программу, давно не обновлялись.
				|Рекомендуется выполнить обновление и повторить проверку адреса заново.";
				ВопросОбОбновлениеАдресногоКлассификатора(СообщениеОПроверкеАдреса);
			Иначе
				СообщениеОПроверкеАдреса = "Адрес введен корректно, но адресные сведения, загруженные в программу,
				|давно не обновлялись. Рекомендуется выполнить обновление и повторить проверку адреса заново.
				|Для обновления адресного классификатора обратитесь к администратору.";
				ПоказатьПредупреждение(, СообщениеОПроверкеАдреса);
			КонецЕсли;
		Иначе
			ПоказатьПредупреждение(, "Адрес введен корректно");
		КонецЕсли;

		Элементы.ГруппаОписаниеНедоступностиСервера.ТекущаяСтраница	= Элементы.СервисДоступен;
		Элементы.СообщениеОбОшибке.Видимость						= Ложь;

		Возврат;
	КонецЕсли;

	Если КоличествоОшибок = 1 Тогда
		МестоОшибки = СписокОшибок[0].ИмяПоля;
		Если СписокОшибок[0].АдресПроверен = Ложь И НЕ ВебСервисИспользуется Тогда
			ТекстВопроса = "Адрес не может быть проверен." + Символы.ПС + СписокОшибок[0].ТекстОшибки + Символы.ПС + "Загрузить классификатор для проверки адреса?";
			ПредложениеЗагрузкиКлассификатора(ТекстВопроса);

			Возврат;
		ИначеЕсли ПустаяСтрока(МестоОшибки) Или МестоОшибки = "/" Тогда
			Элементы.ГруппаОписаниеНедоступностиСервера.ТекущаяСтраница = Элементы.СообщениеОбОшибке;
		КонецЕсли;
	КонецЕсли;

	Элементы.ГруппаОписаниеНедоступностиСервера.ТекущаяСтраница	= Элементы.СообщениеОбОшибке;
	Элементы.ГруппаОписаниеНедоступностиСервера.Видимость		= Истина;
	Элементы.СообщениеОбОшибке.Видимость						= Истина;

	Для Каждого Элемент Из СписокОшибок Цикл
		Если Элемент.ВариантАдреса.Количество() > 0 Тогда
			ДополнительныеПараметры	= Новый Структура("НовыйАдрес", Элемент.ВариантАдреса[0]);
			Оповещение				= Новый ОписаниеОповещения("ПослеВопросаПроЗаменуИсторическогоАдреса", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса			= СтрШаблон("%1
				|Обновить адрес?", Элемент.ТекстОшибки);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

			Возврат;
		КонецЕсли;
	КонецЦикла;

	// Сообщаем список с привязкой к полям.
	Для Каждого Элемент Из СписокОшибок Цикл
		БазоваяПодсистемаКлиентСервер.сОН_СообщитьПользователю(Элемент.ТекстОшибки,,, Элемент.ИмяПоля, Ложь);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаПроЗаменуИсторическогоАдреса(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьЗначенияСвойств(НаселенныйПунктДетально, ДополнительныеПараметры.НовыйАдрес);
		УстановитьЗначениеРеквизитовПоКонтактнойИнформации(НаселенныйПунктДетально);
		ОбновитьПредставлениеАдреса();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросОбОбновление(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = "ОбновитьКлассификатор" Тогда
		// Зарезервировано для новых подсистем
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьАдресКлиент()
	КонтактнаяИнформацияКлиент.РСА_ОчиститьАдрес(НаселенныйПунктДетально);
	ОтобразитьДополнительныеЗдания();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаселенныйПунктУстановитьПоляАдреса(НаселенныйПунктДетально, Знач ВыбранноеЗначение, Знач ВключатьУлица)
	Если ВыбранноеЗначение.Свойство("Адрес") И ЗначениеЗаполнено(ВыбранноеЗначение.Адрес) Тогда
		ПолученныйАдрес = КонтактнаяИнформацияСервер.сУКИ_JSONВКонтактнуюИнформациюПоПолям(ВыбранноеЗначение.Адрес, Перечисления.ТипыКонтактнойИнформации.Адрес);
	Иначе
		ПолученныйАдрес = ОпределитьАдресПоИдентификатору(ВыбранноеЗначение);
	КонецЕсли;

	Если Не ВключатьУлица Тогда
		ВключатьУлица = ЗначениеЗаполнено(ПолученныйАдрес.street);
	КонецЕсли;

	ИменаУровнейНаселенногоПункта = КонтактнаяИнформацияКлиентСервер.РСА_ИменаУровнейАдреса("Все", ВключатьУлица);
	Для каждого ИмяУровня Из ИменаУровнейНаселенногоПункта Цикл
		Если ПолученныйАдрес.Свойство(ИмяУровня) Тогда
			НаселенныйПунктДетально[ИмяУровня]          = ПолученныйАдрес[ИмяУровня];
			НаселенныйПунктДетально[ИмяУровня + "Type"] = ПолученныйАдрес[ИмяУровня + "Type"];
			НаселенныйПунктДетально[ИмяУровня + "Id"]   = ПолученныйАдрес[ИмяУровня + "Id"];
		КонецЕсли;
	КонецЦикла;

	НаселенныйПунктДетально.houseId		= "";
	НаселенныйПунктДетально.AddressType	= ПолученныйАдрес.AddressType;

	Если ЗначениеЗаполнено(ПолученныйАдрес.ZipCode) Тогда
		НаселенныйПунктДетально.ZipCode = ПолученныйАдрес.ZipCode;
	КонецЕсли;

	Если ЗначениеЗаполнено(ПолученныйАдрес.OKTMO) Тогда
		НаселенныйПунктДетально.OKTMO = ПолученныйАдрес.OKTMO;
	КонецЕсли;

	Если ЗначениеЗаполнено(НаселенныйПунктДетально.Street) Или ЗначениеЗаполнено(НаселенныйПунктДетально.HouseNumber) Или НаселенныйПунктДетально.Buildings.Количество() > 0 Тогда
		УстановитьИдентификаторыАдреса(НаселенныйПунктДетально);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция КодСтраны(Страна)
	СведенияОбАдресе = КонтактнаяИнформацияСервер.УКИ_ДанныеСтраныМира(Неопределено, Строка(Страна));
	Если СведенияОбАдресе <> Неопределено Тогда
		Возврат СведенияОбАдресе.Код;
	КонецЕсли;

	Возврат 0;
КонецФункции

&НаСервере
Процедура УстановитьКлючИспользованияФормы()
	КлючСохраненияПоложенияОкна = Строка(Страна);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьКлассификатора()
	Если Не ЕстьЗагруженныйКлассификатор Тогда
		Возврат;
	КонецЕсли;

	Задание = ПроверитьДоступностьКлассификатораВФоне(УникальныйИдентификатор);

	НастройкиОжидания						= БазоваяПодсистемаКлиент.ДО_ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания	= Ложь;

	Обработчик = Новый ОписаниеОповещения("ПослеПроверкиДоступностиКлассификатораВФоне", ЭтотОбъект);
	БазоваяПодсистемаКлиент.ДО_ОжидатьЗавершение(Задание, Обработчик, НастройкиОжидания);
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиДоступностиКлассификатораВФоне(Задание, ДополнительныеПараметры) Экспорт
	Если Задание = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Задание.Статус = "Выполнено" Тогда
		ДоступностьКлассификатора = ПолучитьИзВременногоХранилища(Задание.АдресРезультата);
		Если ДоступностьКлассификатора <> Неопределено Тогда
			Элементы.ГруппаОписаниеНедоступностиСервера.ТекущаяСтраница = ?(ДоступностьКлассификатора.Отказ,
			Элементы.СервисНедоступен, Элементы.СервисДоступен);
			Если ДоступностьКлассификатора.Отказ Тогда
				ТекстСообщенияСервиса = НСтр("ru = 'Автоподбор и проверка адреса недоступны:'") + Символы.ПС  + ДоступностьКлассификатора.КраткоеПредставлениеОшибки;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Задание.Статус = "Ошибка" Тогда
		Элементы.ГруппаОписаниеНедоступностиСервера.ТекущаяСтраница = Элементы.СервисНедоступен;
		ТекстСообщенияСервиса = "Автоподбор и проверка адреса недоступны:" + Символы.ПС  + Задание.КраткоеПредставлениеОшибки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АвторизацияНаСайтеПоддержкиПользователейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ОбновитьПовторноИспользуемыеЗначения();
		ПроверитьДоступностьКлассификатора();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоляДомовСтроенийЗемельныхУчастков(Знач ВыбранноеЗначение)
	Модифицированность = Истина;

	НаселенныйПунктДетально.ZIPcode        = ВыбранноеЗначение.Индекс;
	НаселенныйПунктДетально.OKTMO          = ВыбранноеЗначение.ОКТМО;
	НаселенныйПунктДетально.okato          = ВыбранноеЗначение.ОКАТО;
	НаселенныйПунктДетально.ifnsFLCode     = ВыбранноеЗначение.КодИФНСФЛ;
	НаселенныйПунктДетально.ifnsULCode     = ВыбранноеЗначение.КодИФНСЮЛ;
	НаселенныйПунктДетально.ifnsFLAreaCode = ВыбранноеЗначение.КодУчасткаИФНСФЛ;
	НаселенныйПунктДетально.ifnsULAreaCode = ВыбранноеЗначение.КодУчасткаИФНСЮЛ;
	НаселенныйПунктДетально.codeKLADR      = ВыбранноеЗначение.КодКЛАДР;

	ТипЧисло = Новый ОписаниеТипов("Число");
	УстановитьМуниципальныеЧастиАдреса(НаселенныйПунктДетально, ТипЧисло.ПривестиЗначение(ВыбранноеЗначение.ОКТМО));
	ОбработкаИзмененияАдреса();

	Если СтрСравнить(ТипДома, "Зем. участок") <> 0 Тогда
		ЗаполнитьПоляДомовИСтроений(ВыбранноеЗначение);
	Иначе
		ЗаполнитьПоляЗемельногоУчастка(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоляДомовИСтроений(Знач ВыбранноеЗначение)
	НеобходимоПерерисоватьПоляДомов = НаселенныйПунктДетально.Buildings.Количество() > 1;

	Если ВыбранноеЗначение.Свойство("Дом") Тогда
		НаселенныйПунктДетально.HouseNumber   = ВыбранноеЗначение.Дом.НомерВладения;
		Если ЗначениеЗаполнено(ВыбранноеЗначение.Дом.ВидВладения) Тогда
			НаселенныйПунктДетально.HouseType = ПерваяБукваЗаглавная(ВыбранноеЗначение.Дом.ВидВладения);
		КонецЕсли;
	КонецЕсли;

	НаселенныйПунктДетально.Buildings.Очистить();

	Если ВыбранноеЗначение.Свойство("Корпус") И ТипЗнч(ВыбранноеЗначение.Корпус) = Тип("Структура") Тогда
		СведенияОКорпусе = Новый Структура("type, number", ПерваяБукваЗаглавная(ВыбранноеЗначение.Корпус.ВидКорпуса), ВыбранноеЗначение.Корпус.НомерКорпуса);
		НаселенныйПунктДетально.Buildings.Добавить(СведенияОКорпусе);
	КонецЕсли;

	Если ВыбранноеЗначение.Свойство("Строение") И ТипЗнч(ВыбранноеЗначение.Строение) = Тип("Структура") Тогда
		СведенияОКорпусе = Новый Структура("type, number", ПерваяБукваЗаглавная(ВыбранноеЗначение.Строение.ВидСтроения), ВыбранноеЗначение.Строение.НомерСтроения);
		НаселенныйПунктДетально.Buildings.Добавить(СведенияОКорпусе);
	КонецЕсли;

	НаселенныйПунктДетально.houseId = ВыбранноеЗначение.Идентификатор;

	// отрисовка

	Индекс = НаселенныйПунктДетально.ZipCode;
	ОКТМО  = НаселенныйПунктДетально.OKTMO;

	Дом = НаселенныйПунктДетально.HouseNumber;
	Если ЗначениеЗаполнено(НаселенныйПунктДетально.HouseType) Тогда
		ТипДома = НаселенныйПунктДетально.HouseType;
	КонецЕсли;

	Если НаселенныйПунктДетально.Buildings.Количество() > 0 Тогда
		Строение       = НаселенныйПунктДетально.Buildings[0].Number;
		ТипСтроения    = НаселенныйПунктДетально.Buildings[0].Type;
		Если НаселенныйПунктДетально.Buildings.Количество() > 1 Тогда
			НеобходимоПерерисоватьПоляДомов = Истина;
		КонецЕсли;
	Иначе
		Строение       = "";
	КонецЕсли;

	Если НеобходимоПерерисоватьПоляДомов Тогда
		ПодключитьОбработчикОжидания("ОтобразитьДополнительныеЗданияКлиент", 0.1, Истина);
	Иначе
		ОбновитьПредставлениеАдреса();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоляЗемельногоУчастка(Знач ВыбранноеЗначение)
	НаселенныйПунктДетально.stead   = ВыбранноеЗначение.Дом;
	НаселенныйПунктДетально.steadId = ВыбранноеЗначение.Идентификатор;

	Индекс = НаселенныйПунктДетально.ZipCode;
	ОКТМО  = НаселенныйПунктДетально.OKTMO;
	Дом    = НаселенныйПунктДетально.stead;

	НаселенныйПунктДетально.Buildings.Очистить();
	Строение       = "";

	ПодключитьОбработчикОжидания("ОтобразитьДополнительныеЗданияКлиент", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Функция ПерваяБукваЗаглавная(Строка)
	Возврат ВРег(Лев(Строка, 1)) + Сред(НРег(Строка), 2); // Использовать ТРег нельзя.
КонецФункции

&НаКлиенте
Процедура ОтобразитьДополнительныеЗданияКлиент()
	ИмяТекущего = ОтобразитьДополнительныеЗдания();

	ОбновитьМенюДобавленияСтроенийИПомещений();

	Если ИмяТекущего <> Неопределено Тогда
		ТекущийЭлемент = Элементы[ИмяТекущего];
	КонецЕсли;

	ОбновитьПредставлениеАдреса();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредопределенныеВариантыАдреса(Параметры)
	Если Параметры.Свойство("Индекс") И ЗначениеЗаполнено(Параметры.Индекс) Тогда
		Индекс = Параметры.Индекс;
		НаселенныйПунктДетально.ZipCode = Индекс;
	КонецЕсли;

	Если Параметры.Свойство("Страна") И ПустаяСтрока(НаселенныйПунктДетально.Country) Тогда
		Если ТипЗнч(Параметры.Страна) = Тип("СправочникСсылка.СтраныМира") Тогда
			Если ЗначениеЗаполнено(Параметры.Страна) Тогда
				Страна							= Параметры.Страна; // СправочникСсылка.СтраныМира
				НаселенныйПунктДетально.Country	= БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(Страна, "Наименование");
			Иначе
				Страна							= ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
				НаселенныйПунктДетально.Country	= БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(Страна, "Наименование");
			КонецЕсли;
		Иначе
			Страна = КонтактнаяИнформацияСервер.УКИ_СтранаМираПоКодуИлиНаименованию(Параметры.Страна);
			Если Страна <> Справочники.СтраныМира.ПустаяСсылка() Тогда
				НаселенныйПунктДетально.Country	= Параметры.Страна;
			Иначе
				Страна							= ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
				НаселенныйПунктДетально.Country	= БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(Страна, "Наименование");
			КонецЕсли;
		КонецЕсли;

		ПереопределитьТипаАдресаПоСтране(Страна, НаселенныйПунктДетально, СведенияОСтране(Страна));
	КонецЕсли;

	// Возможные варианты дома, строения, квартиры.
	ВариантыДанныхДом = Обработки.РасширенныйВводКонтактнойИнформации.ВариантыДанныхДом();
	УстановитьСписокВыбораЭлемента(Элементы.ТипДома, Элементы.Дом, ВариантыДанныхДом);

	ВариантыДанныхСтроение = Обработки.РасширенныйВводКонтактнойИнформации.ВариантыДанныхСтроение();
	УстановитьСписокВыбораЭлемента(Элементы.ТипСтроения, Элементы.Строение, ВариантыДанныхСтроение);

	ВариантыДанныхПомещение = Обработки.РасширенныйВводКонтактнойИнформации.ВариантыДанныхПомещение();
	УстановитьСписокВыбораЭлемента(Элементы.ТипПомещения, Элементы.Помещение, ВариантыДанныхПомещение);
	Элементы.ТипПомещения.СписокВыбора.НайтиПоЗначению("").Значение = НаименованиеПриДобавлениеПроизвольногоПомещения();

	// Возможно пустые значения, чтобы не смущали.
	Если ПустаяСтрока(Дом) И ПустаяСтрока(ТипДома) Тогда
		ТипДома = ПервыйИлиПустой(Элементы.ТипДома);
	КонецЕсли;
	Если ПустаяСтрока(Строение) И ПустаяСтрока(ТипСтроения) Тогда
		ТипСтроения = ПервыйИлиПустой(Элементы.ТипСтроения);
	КонецЕсли;

	Если Параметры.Свойство("ТипПомещения") И ВариантыДанныхПомещение.ВариантыТипа.Найти(Параметры.ТипПомещения) <> Неопределено Тогда
		ТипПомещения = Параметры.ТипПомещения;
	КонецЕсли;

	Если ПустаяСтрока(Помещение) И ПустаяСтрока(ТипПомещения) Тогда
		ТипПомещения = ПервыйИлиПустой(Элементы.ТипПомещения);
	КонецЕсли;

	Для каждого ВариантДанных Из ВариантыДанныхСтроение.ВариантыТипа Цикл
		ДобавитьОписаниеСтроенияИлиПомещения(ВариантДанных, "Строение");
	КонецЦикла;

	Для каждого ВариантДанных Из ВариантыДанныхПомещение.ВариантыТипа Цикл
		Если ПустаяСтрока(ВариантДанных) Тогда
			ВариантДанных = НаименованиеПриДобавлениеПроизвольногоПомещения();
		КонецЕсли;

		ДобавитьОписаниеСтроенияИлиПомещения(ВариантДанных, "Помещение", СтрЗаменить(ВариантДанных, "/", ""));
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПервыйИлиПустой(Знач СписокДанных)
	ТипСписка = ТипЗнч(СписокДанных);
	Если ТипСписка = Тип("СписокЗначений") И СписокДанных.Количество() > 0 Тогда
		Возврат СписокДанных[0].Значение;
	ИначеЕсли ТипСписка = Тип("Массив") И СписокДанных.Количество() > 0 Тогда
		Возврат СписокДанных[0];
	ИначеЕсли ТипСписка = Тип("ПолеФормы") Тогда
		Возврат ПервыйИлиПустой(СписокДанных.СписокВыбора);
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция СведенияОРегионе(НаименованиеСубъектаРФ)
	//Зарезервировано для новых подсистем

	Результат			= Новый Структура("Загружен, Устарел, КодСубъектаРФ", Ложь, Ложь, Неопределено);
	СведенияОРегионе	= Новый ФиксированнаяСтруктура(Результат);

	Возврат СведенияОРегионе;
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьДоступностьКлассификатораВФоне(Знач УникальныйИдентификатор)
	ИмяМетода = "Обработки.РасширенныйВводКонтактнойИнформации.ПроверитьДоступностьКлассификатора";

	НастройкиЗапуска = БазоваяПодсистемаСервер.ДО_ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка доступности сервиса адресного классификатора'");

	Возврат БазоваяПодсистемаСервер.ДО_ВыполнитьВФоне(ИмяМетода, Новый Структура, НастройкиЗапуска);
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьАдресПоИдентификатору(СведенияОбАдреса)
	Возврат Обработки.РасширенныйВводКонтактнойИнформации.СписокРеквизитовНаселенныйПункт(СведенияОбАдреса);
КонецФункции

&НаСервереБезКонтекста
Функция СписокАвтоподбораНаселенногоПункта(Текст, ТипАдреса)
	ДополнительныеПараметры				= КонтактнаяИнформацияСервер.сУКИ_ПараметрыАвтоподбораАдреса();
	ДополнительныеПараметры.Уровни		= "1,3,31,4,41,5,6,65";
	ДополнительныеПараметры.ТипАдреса	= ТипАдреса;

	Результат = Обработки.РасширенныйВводКонтактнойИнформации.СписокАвтоподбораНаселенногоПункта(Текст, ДополнительныеПараметры);
	КонтактнаяИнформацияСервер.сУКИ_ФорматированиеРезультатовАвтоподбора(Результат.Данные, Текст, ПустаяСтрока(ТипАдреса));

	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьСписокДомов(Идентификатор)
	//Зарезервировано для новых подсистем

	Возврат Ложь;
КонецФункции

&НаСервереБезКонтекста
Функция СписокАвтоподбораУлицы(Текст, ПараметрыАвтоподбора)
	Результат = Обработки.РасширенныйВводКонтактнойИнформации.СписокАвтоподбораУлицы(Текст, ПараметрыАвтоподбора);
	КонтактнаяИнформацияСервер.сУКИ_ФорматированиеРезультатовАвтоподбора(Результат.Данные, Текст, Ложь);

	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция СписокАвтоподбораВариантовДомов(Идентификатор, Текст)
	Возврат Обработки.РасширенныйВводКонтактнойИнформации.СписокАвтоподбораНомераДомов(Идентификатор, Текст);
КонецФункции

&НаСервереБезКонтекста
Функция СписокАвтоподбораЗемельныхУчастков(Идентификатор, Текст)
	Возврат Обработки.РасширенныйВводКонтактнойИнформации.СписокАвтоподбораЗемельныхУчастков(Идентификатор, Текст);
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервереХранитьИсториюИзменений()
	Если ВидКонтактнойИнформации.ХранитьИсториюИзменений Тогда
		Если Параметры.Свойство("КонтактнаяИнформацияОписаниеДополнительныхРеквизитов") Тогда
			Для каждого СтрокаКИ Из Параметры.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
				НоваяСтрока = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКИ);
			КонецЦикла;
		Иначе
			Элементы.ИсторияИзменений.Видимость           = Ложь;
		КонецЕсли;
		Элементы.ИсторияИзмененийГиперссылка.Видимость = НЕ Параметры.Свойство("ИзФормыИстории");
		ВводНовогоАдреса = ?(Параметры.Свойство("ВводНовогоАдреса"), Параметры.ВводНовогоАдреса, Ложь);
		Если ВводНовогоАдреса Тогда
			ДействуетС = Параметры.ДействуетС;
		Иначе
			ДействуетС = ?(ЗначениеЗаполнено(Параметры.ДействуетС), Параметры.ДействуетС, ТекущаяДатаСеанса());
		КонецЕсли;
		ОтобразитьИнформациюОДатахДействияАдреса(ДействуетС);
	Иначе
		Элементы.ИсторияИзменений.Видимость           = Ложь;
		Элементы.ГруппаИсторическийАдрес.Видимость    = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьТипАдресаИзПараметра(ТипАдресаИзПараметра)
	Если СтрСравнить(ТипАдресаИзПараметра, "АдминистративноТерриториальный") = 0 Или СтрСравнить(ТипАдресаИзПараметра, "Административно-территориальный") = 0 Тогда
		НаселенныйПунктДетально.AddressType	= "Административно-территориальный";
		ТипАдреса							= "Административно-территориальный";
	ИначеЕсли СтрСравнить(ТипАдресаИзПараметра, "ВСвободнойФорме") = 0 Тогда
		НаселенныйПунктДетально.AddressType	= "ВСвободнойФорме";
		ТипАдреса							= "ВСвободнойФорме";
	ИначеЕсли СтрСравнить(ТипАдресаИзПараметра, "ЕАЭС") = 0 Тогда
		НаселенныйПунктДетально.AddressType	= "ЕАЭС";
		ТипАдреса							= "ЕАЭС";
	Иначе
		НаселенныйПунктДетально.AddressType	= "Муниципальный";
		ТипАдреса							= "Муниципальный";
	КонецЕсли;

	Элементы.ФормаВсеДействияИзмененияАдреса.Видимость						= Ложь;
	Элементы.ДекорацияМуниципальный.ОтображениеПодсказки					= ОтображениеПодсказки.Нет;
	Элементы.ДекорацияАдминистративноТерриториальный.ОтображениеПодсказки	= ОтображениеПодсказки.Нет;
КонецПроцедуры

&НаКлиенте
Функция ЭтоМеждународныйАдрес(ТипАдреса)
	Возврат СтрСравнить("Иностранный", ТипАдреса) = 0;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоЗемельныйУчасток(ТипДома)
	Возврат СтрСравнить("Зем. участок", ТипДома) = 0;
КонецФункции

&НаКлиенте
Процедура ПредложениеЗагрузкиКлассификатора(Знач Текст = "", Знач ДанныеОбАдресе = Неопределено)
	// Зарезервировано для новых подсистем
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаЛогинИПароля(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ПредложениеЗагрузкиКлассификатораЗавершение", ЭтотОбъект, ДополнительныеПараметры.ПараметрыЗагрузки);
		ОткрытьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.ЗагрузкаАдресногоКлассификатора", ДополнительныеПараметры.ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

		Возврат;
	КонецЕсли;

	УстановитьНаселенныйПунктПослеВыбора(ДополнительныеПараметры.ПараметрыЗагрузки.ДанныеОбАдресе);
	ОбновитьПовторноИспользуемыеЗначения();
	ВебКлассификаторДоступен = Истина;
	СообщениеОНеобходимостиЗагрузкиКлассификатора();
КонецПроцедуры

&НаКлиенте
Процедура ПредложениеЗагрузкиКлассификатораЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		УстановитьНаселенныйПунктПослеВыбора(ДополнительныеПараметры.ДанныеОбАдресе);

		Возврат;
	КонецЕсли;

	ЗагрузитьАдресныйКлассификатор(ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОНеобходимостиЗагрузкиКлассификатора()
	АдресныеСведенияЗагружены = АдресныеСведенияКлассификатораЗагружены(НаименованиеРегиона(НаселенныйПунктДетально));
	Если ВебКлассификаторДоступен Или АдресныеСведенияЗагружены.РегионЗагружен Тогда
		Элементы.ГруппаИнформация.Видимость            = Ложь;
		Элементы.Дом.КнопкаВыбора                      = Истина;
		Элементы.Улица.КнопкаВыбора                    = Истина;
		АвтоподборДоступен                             = Истина;
		Элементы.ПроверитьЗаполнениеАдреса.Доступность = Истина;
	Иначе
		Элементы.ГруппаИнформация.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНаселенныйПунктПослеВыбора(Знач ДанныеОбАдресе)
	НаселенныйПунктУстановитьПоляАдреса(НаселенныйПунктДетально, ДанныеОбАдресе, Ложь);
	ОбработкаИзмененияАдреса();
	УстановитьФлагиВМенюПоТипуАдреса();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьАдресныйКлассификатор(Знач ДополнительныеПараметры = Неопределено)
	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОСтране(Страна)
	Возврат КонтактнаяИнформацияСервер.УКИ_ДанныеСтраныМира(, Страна);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НаименованиеПриДобавлениеПроизвольногоПомещения()
	Возврат "Другое";
КонецФункции

&НаСервере
Функция ОпределитьЗначениеАдреса(Параметры)
	Если Параметры.Свойство("Значение") Тогда
		Если ПустаяСтрока(Параметры.Значение) И ЗначениеЗаполнено(Параметры.ЗначенияПолей) Тогда
			ЗначенияПолей = Параметры.ЗначенияПолей;
		Иначе
			ЗначенияПолей = Параметры.Значение;
		КонецЕсли;
	Иначе
		ЗначенияПолей = Параметры.ЗначенияПолей;
	КонецЕсли;

	Если ПустаяСтрока(ЗначенияПолей) И ЗначениеЗаполнено(Параметры.Представление) Тогда
		ЗначенияПолей = КонтактнаяИнформацияСервер.сУКИ_СтруктураВСтрокуJSON(КонтактнаяИнформацияСервер.сУКИ_КонтактнаяИнформацияПоПредставлению(Параметры.Представление, Перечисления.ТипыКонтактнойИнформации.Адрес));
		Модифицированность = Истина;
	КонецЕсли;

	Возврат ЗначенияПолей;
КонецФункции

&НаСервере
Функция ИзвлечьСтарыйФорматАдреса(Знач ЗначенияПолей, Знач ТипКонтактнойИнформации)
	Перем XDTOКонтактная, РезультатыЧтения;

	Если ТипЗнч(ЗначенияПолей) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(ЗначенияПолей), "<") И ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		РезультатыЧтения	= Новый Структура;
		XDTOКонтактная		= КонтактнаяИнформацияСервер.сУКИ_КонтактнаяИнформацияИзXML(ЗначенияПолей, ТипКонтактнойИнформации, РезультатыЧтения);
		Если РезультатыЧтения.Свойство("ТекстОшибки") Тогда
			// Распознали с ошибками, сообщим при открытии.
			ТекстПредупрежденияПриОткрытии = РезультатыЧтения.ТекстОшибки;
			XDTOКонтактная.Представление   = Параметры.Представление;
			XDTOКонтактная.Состав.Страна   = Строка(ОсновнаяСтрана);
		КонецЕсли;
	Иначе
		XDTOКонтактная = Обработки.РасширенныйВводКонтактнойИнформации.АдресXMLВXDTO(ЗначенияПолей, Параметры.Представление);
		Если Параметры.Свойство("Страна") И ЗначениеЗаполнено(Параметры.Страна) Тогда
			Если ТипЗнч(Параметры.Страна) = ТипЗнч(Справочники.СтраныМира.ПустаяСсылка()) Тогда
				СтранаСсылка = Параметры.Страна; // СправочникСсылка.СтраныМира
				XDTOКонтактная.Состав.Страна = БазоваяПодсистемаСервер.ОН_ЗначениеРеквизитаОбъекта(СтранаСсылка , "Наименование");
			Иначе
				XDTOКонтактная.Состав.Страна = Строка(Параметры.Страна);
			КонецЕсли;
		Иначе
			XDTOКонтактная.Состав.Страна = ОсновнаяСтрана.Наименование;
		КонецЕсли;
	КонецЕсли;
	Если Параметры.Комментарий <> Неопределено Тогда
		// Ставим новый комментарий, иначе он придет из информации.
		XDTOКонтактная.Комментарий = Параметры.Комментарий;
	КонецЕсли;

	Возврат XDTOКонтактная;
КонецФункции

&НаСервере
Процедура СформироватьМенюДобавленияСтроенийИПомещений()
	Для каждого СтроениеИлиПомещение Из ДополнительныеСтроенияИПомещения Цикл
		Если ЗначениеЗаполнено(СтроениеИлиПомещение.Ключ) Тогда
			ИмяКоманды                        = "Добавить_" + СтроениеИлиПомещение.Ключ;
			Команда                           = Команды.Добавить(ИмяКоманды);
			Команда.Подсказка                 = "Добавить " + НРег(СтроениеИлиПомещение.Значение);
			Команда.Действие                  = "Подключаемый_ДобавитьСтроениеИлиПомещение";
			Команда.ИзменяетСохраняемыеДанные = Истина;

			Группа				= ?(СтроениеИлиПомещение.Тип = "Строение", Элементы.ГруппаДобавлениеСтроения, Элементы.ГруппаДобавлениеПомещения);
			Кнопка				= Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Группа);
			Кнопка.ИмяКоманды	= ИмяКоманды;
			Кнопка.Заголовок	= СтроениеИлиПомещение.Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьОписаниеСтроенияИлиПомещения(ИмяПомещенияИлиСтроения, Тип, Ключ = "")
	ОписаниеПомещения						= ДополнительныеСтроенияИПомещения.Добавить();
	ОписаниеПомещения.Значение				= ИмяПомещенияИлиСтроения;
	ОписаниеПомещения.Тип					= Тип;
	ОписаниеПомещения.Видимость				= Истина;
	ОписаниеПомещения.Ключ					= "key" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	ОписаниеПомещения.ПредыдущиеЗначение	= ИмяПомещенияИлиСтроения;
КонецПроцедуры

&НаКлиенте
Функция ЗначениеСтроенияИлиПомещения(Тип, Значение)
	Возврат Новый Структура("type, number", Тип, Значение);
КонецФункции

&НаКлиенте
Процедура ИндексНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если СтрДлина(Индекс) = 6 Тогда
		ФормаВыбораУлицПоИндексу(Индекс);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеАдреса()
	КонтактнаяИнформацияКлиентСервер.РСА_ОбновитьПредставлениеАдреса(НаселенныйПунктДетально, ВидКонтактнойИнформации.ВключатьСтрануВПредставление);
	ПредставлениеАдреса = НаселенныйПунктДетально.Value;
	Если ВидКонтактнойИнформации.ВключатьСтрануВПредставление И СтрСравнить("ВСвободнойФорме", НаселенныйПунктДетально.AddressType) = 0 Тогда
		УдалитьСтрануИзПредставления();
	КонецЕсли;

	ПоказатьПодсказкуПоТипАдреса();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСведенияОНаселенномПункте()
	Если ПустаяСтрока(НаселенныйПункт) Тогда
		ОчиститьНаселенныйПункт();

		Возврат;
	КонецЕсли;

	АдресВосстановлен = Ложь;
	ОчиститьИдентификаторыАдреса();
	Если СтрСравнить(ПредопределенноеЗначение("Справочник.СтраныМира.Россия"), Страна) = 0 И Не МеждународныйФорматАдреса Тогда
		ИменаУровнейАдреса	= КонтактнаяИнформацияКлиентСервер.РСА_ИменаУровнейАдреса(НаселенныйПунктДетально.AddressType, Ложь);
		АдресВосстановлен	= ВосстановитьАдрес(НаселенныйПункт, НаселенныйПунктДетально, ИменаУровнейАдреса);
	КонецЕсли;

	Если Не АдресВосстановлен Тогда
		Если Не ЭтоРФАдрес() Тогда
			ТипАдреса = ?(СведенияОСтране.УчастникЕАЭС, "ЕАЭС", "Иностранный");
		КонецЕсли;

		ИменаУровнейАдреса = КонтактнаяИнформацияКлиентСервер.РСА_ИменаУровнейАдреса(ТипАдреса, Ложь);

		ЭлементыАдреса = СтрРазделить(НаселенныйПункт, ",", Истина);

		Для ИндексАдреса = 0 По ИменаУровнейАдреса.Количество() - 1 Цикл
			Если ЭлементыАдреса.Количество() > 0 Тогда
				ЗначениеПоля	= СокрЛП(ЭлементыАдреса[0]);
				Позиция			= СтрНайти(ЗначениеПоля, " ", НаправлениеПоиска.СКонца);
				Если Позиция > 0 И НЕ КонтактнаяИнформацияКлиент.РСА_ПредставлениеУровняБезСокращения(ИменаУровнейАдреса[ИндексАдреса]) Тогда
					НаселенныйПунктДетально[ИменаУровнейАдреса[ИндексАдреса]] = СокрЛП(Лев(ЗначениеПоля, Позиция));
					НаселенныйПунктДетально[ИменаУровнейАдреса[ИндексАдреса] + "Type"] = СокрЛП(Сред(ЗначениеПоля, Позиция +1));
				Иначе
					НаселенныйПунктДетально[ИменаУровнейАдреса[ИндексАдреса]] = ЗначениеПоля;
				КонецЕсли;
				ЭлементыАдреса.Удалить(0);
			Иначе
				НаселенныйПунктДетально[ИменаУровнейАдреса[ИндексАдреса]] = "";
			КонецЕсли;
		КонецЦикла;

		Если ЭлементыАдреса.Количество() > 0 Тогда
			НаселенныйПунктДетально[ИменаУровнейАдреса[ИменаУровнейАдреса.Количество() - 1]] = СокрЛП(СтрСоединить(ЭлементыАдреса, ","));
		КонецЕсли;
	КонецЕсли;

	ОбновитьПредставлениеАдреса();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВосстановитьАдрес(НаселенныйПункт, НаселенныйПунктДетально, ИменаУровнейАдреса)
	Результат = КонтактнаяИнформацияСервер.сУКИ_СтруктураВСтрокуJSON(КонтактнаяИнформацияСервер.сУКИ_КонтактнаяИнформацияПоПредставлению(НаселенныйПункт, Перечисления.ТипыКонтактнойИнформации.Адрес));

	Адрес = КонтактнаяИнформацияСервер.сУКИ_JSONВКонтактнуюИнформациюПоПолям(Результат, Перечисления.ТипыКонтактнойИнформации.Адрес);
	Если КонтактнаяИнформацияСервер.УКИ_АдресВведенВСвободнойФорме(Адрес) Тогда
		Возврат Ложь;
	КонецЕсли;

	Для каждого ИмяУровняАдреса Из ИменаУровнейАдреса Цикл
		НаселенныйПунктДетально[ИмяУровняАдреса]			= Адрес[ИмяУровняАдреса];
		НаселенныйПунктДетально[ИмяУровняАдреса + "Type"]	= Адрес[ИмяУровняАдреса + "Type"];
	КонецЦикла;

	УстановитьИдентификаторыАдреса(НаселенныйПунктДетально);

	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПоказатьПодсказкуПоТипАдреса()
	Если МеждународныйФорматАдреса Тогда
		Элементы.СтраницаТипАдреса.ТекущаяСтраница	= Элементы.СтраницаДругойАдрес;
		Элементы.НужнаПомощь.Видимость				= Ложь;
	ИначеЕсли СтрСравнить(НаселенныйПунктДетально.AddressType, "Муниципальный") = 0 Тогда
		Элементы.СтраницаТипАдреса.ТекущаяСтраница	= Элементы.СтраницаМуниципальныйАдрес;
		Элементы.НужнаПомощь.Видимость				= Истина;
	ИначеЕсли СтрСравнить(НаселенныйПунктДетально.AddressType, "Административно-территориальный") = 0 Тогда
		Элементы.СтраницаТипАдреса.ТекущаяСтраница	= Элементы.СтраницаАдминистративноТерриториальныйАдрес;
		Элементы.НужнаПомощь.Видимость				= Истина;
	Иначе
		Элементы.СтраницаТипАдреса.ТекущаяСтраница	= Элементы.СтраницаДругойАдрес;
		Элементы.НужнаПомощь.Видимость				= Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияАдреса()
	НаселенныйПункт = ПредставлениеНаселенногоПунктаАдреса(НаселенныйПунктДетально);

	Улица = ?(ПустаяСтрока(НаселенныйПунктДетально.Street), "", КонтактнаяИнформацияКлиентСервер.УКИ_СоединитьНаименованиеИТипАдресногоОбъекта(НаселенныйПунктДетально.Street, НаселенныйПунктДетально.StreetType));

	Если ПустаяСтрока(НаселенныйПунктДетально.country) И (ЗначениеЗаполнено(НаселенныйПункт) Или ЗначениеЗаполнено(Улица)) Тогда
		НаселенныйПунктДетально.country = ?(ЗначениеЗаполнено(Страна), Строка(Страна), ПредопределенноеЗначение("Справочник.СтраныМира.Россия"));
	КонецЕсли;

	ОбновитьПредставлениеАдреса();

	ФорматАдреса = НаселенныйПунктДетально.AddressType;
	Индекс       = НаселенныйПунктДетально.ZIPCode;
	ОКТМО        = НаселенныйПунктДетально.OKTMO;

	Если ЗначениеЗаполнено(НаселенныйПунктДетально.HouseType) Тогда
		ТипДома = НаселенныйПунктДетально.HouseType;
	КонецЕсли;

	Если ПустаяСтрока(НаселенныйПунктДетально.stead) Тогда
		Дом = НаселенныйПунктДетально.HouseNumber;
	Иначе
		Дом = НаселенныйПунктДетально.stead;
	КонецЕсли;

	Если НаселенныйПунктДетально.Buildings.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(НаселенныйПунктДетально.Buildings[0].Type) Тогда
			ТипСтроения = НаселенныйПунктДетально.Buildings[0].Type;
		КонецЕсли;

		Строение = НаселенныйПунктДетально.Buildings[0].Number;
	Иначе
		Строение = "";
	КонецЕсли;

	Если НаселенныйПунктДетально.Apartments.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(НаселенныйПунктДетально.Apartments[0].Type) Тогда
			ТипПомещения = НаселенныйПунктДетально.Apartments[0].Type;
		КонецЕсли;

		Помещение = НаселенныйПунктДетально.Apartments[0].Number;
	Иначе
		Помещение = "";
	КонецЕсли;

	ПодключитьОбработчикОжидания("ОбновитьДополнительныеЗдания", 0.1, Истина);

	Если ЗначениеЗаполнено(Комментарий) Тогда
		Элементы.ОсновныеСтраницы.ОтображениеСтраниц	= ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.СтраницаКомментарий.Картинка			= БазоваяПодсистемаКлиентСервер.ОН_КартинкаКомментария(Комментарий);
	Иначе
		Элементы.ОсновныеСтраницы.ТекущаяСтраница		= Элементы.СтраницаАдрес;
		Элементы.ОсновныеСтраницы.ОтображениеСтраниц	= ОтображениеСтраницФормы.Нет;
	КонецЕсли;

	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеНаселенногоПунктаАдреса(Адрес)
	СписокЗаполненныхУровней = Новый Массив;

	Для каждого ИмяУровня Из КонтактнаяИнформацияКлиентСервер.РСА_ИменаУровнейАдреса(Адрес.AddressType, Ложь) Цикл
		Если ЗначениеЗаполнено(Адрес[ИмяУровня]) Тогда
			СписокЗаполненныхУровней.Добавить(КонтактнаяИнформацияКлиентСервер.УКИ_СоединитьНаименованиеИТипАдресногоОбъекта(Адрес[ИмяУровня], Адрес[ИмяУровня + "Type"], СтрСравнить(ИмяУровня, "Area") = 0));
		КонецЕсли;
	КонецЦикла;

	Возврат СтрСоединить(СписокЗаполненныхУровней, ", ");
КонецФункции

&НаКлиенте
Процедура УстановитьФлагиВМенюПоТипуАдреса()
	Если СтрСравнить("ВСвободнойФорме", НаселенныйПунктДетально.AddressType) = 0 Тогда
		Элементы.АдресВСвободнойФорме.Пометка                  = Истина;
		Элементы.МуниципальноеДеление.Пометка                  = Ложь;
		Элементы.АдминистративноТерриториальноеДеление.Пометка = Ложь;
	ИначеЕсли СтрСравнить("Муниципальный", НаселенныйПунктДетально.AddressType) = 0 Тогда
		Элементы.АдресВСвободнойФорме.Пометка                  = Ложь;
		Элементы.МуниципальноеДеление.Пометка                  = Истина;
		Элементы.АдминистративноТерриториальноеДеление.Пометка = Ложь;
		Элементы.ПроверитьЗаполнениеАдреса.Доступность         = Истина;
	ИначеЕсли СтрСравнить("Административно-территориальный", НаселенныйПунктДетально.AddressType) = 0 Тогда
		Элементы.АдресВСвободнойФорме.Пометка                  = Ложь;
		Элементы.МуниципальноеДеление.Пометка                  = Ложь;
		Элементы.АдминистративноТерриториальноеДеление.Пометка = Истина;
		Элементы.ПроверитьЗаполнениеАдреса.Доступность         = Истина;
	Иначе
		Элементы.МуниципальноеДеление.Пометка                  = Ложь;
		Элементы.АдминистративноТерриториальноеДеление.Пометка = Ложь;
		Элементы.АдресВСвободнойФорме.Пометка                  = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСтруктурированныйВвод(ТипАдреса = Неопределено)
	Если СтрСравнить("ВСвободнойФорме", НаселенныйПунктДетально.AddressType) = 0 Тогда
		РазрешитьВводАдресаВСвободнойФорме = Ложь;
		ТекстВопроса = "Изменения, введенные вручную, будут потеряны.
		|Исходный адрес будет перемещен в комментарий.
		|Продолжить?";

		Если МеждународныйФорматАдреса Тогда
			ТипАдреса = "Иностранный";
		КонецЕсли;

		ДополнительныеПараметры = Новый Структура("ТипАдреса", ТипАдреса);
		Оповещение = Новый ОписаниеОповещения("ПереключитьНаСтруктурированныйВводЗавершение", ЭтотОбъект, ДополнительныеПараметры );

		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, "Подтверждение");
	Иначе
		ОтобразитьВыданныйТипАдреса(ТипАдреса);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСтруктурированныйВводЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	Комментарий						= ?(НЕ ПустаяСтрока(Комментарий), Комментарий + Символы.ПС, "") + "Исходный адрес:" + " " + ПредставлениеАдреса;
	НаселенныйПунктДетально.comment	= Комментарий;

	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);

	ОтобразитьВыданныйТипАдреса(ДополнительныеПараметры.ТипАдреса);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИдентификаторыАдреса()
	Для каждого ЭлементАдреса Из НаселенныйПунктДетально Цикл
		Если СтрЗаканчиваетсяНа(ЭлементАдреса.Ключ, "Id") Тогда
			НаселенныйПунктДетально[ЭлементАдреса.Ключ] = "";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьИдентификаторыАдреса(Адрес)
	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторАдреса(Адрес, ВключатьУлицу)
	ИдентификаторАдреса	= Неопределено;
	МаксимальныйУровень	= 0;
	Уровни				= СопоставлениеУровняАдресаИНаименования(Адрес.AddressType, ВключатьУлицу);

	Для каждого Уровень Из Уровни Цикл
		УровеньКлюч = УровеньАдреса(Уровень.Ключ, Адрес.AddressType);

		Если УровеньКлюч > МаксимальныйУровень И Адрес.Свойство(Уровень.Значение + "Id") И ЗначениеЗаполнено(Адрес[Уровень.Значение + "Id"]) Тогда
			ИдентификаторАдреса = Адрес[Уровень.Значение + "Id"];
			МаксимальныйУровень = УровеньКлюч;
		КонецЕсли;
	КонецЦикла;

	Возврат ИдентификаторАдреса;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УровеньАдреса(Знач Уровень, Знач ТипАдреса)
	Если СтрСравнить(ТипАдреса, "Муниципальный") = 0 И Уровень = 4 Тогда
		Возврат 45; // В мун. адресах город следует после поселений (уровень 41)
	КонецЕсли;

	Уровень = ?(Уровень < 10, Уровень * 10, Уровень);

	Возврат Уровень;
КонецФункции

&НаСервереБезКонтекста
Функция НайтиИндексУДома(АдресныйОбъект, Дом)
	ПолныйСписокДомов = Обработки.РасширенныйВводКонтактнойИнформации.СписокДомов(АдресныйОбъект, Дом, 1);
	Если ПолныйСписокДомов.Количество() > 0 Тогда
		Возврат ПолныйСписокДомов[0].Значение.Индекс;
	КонецЕсли;

	Возврат "";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СопоставлениеУровняАдресаИНаименования(ТипАдреса, ВключатьУлицу)
	Уровни = Новый Соответствие;

	Уровни.Вставить(1, "Area");
	Если СтрСравнить(ТипАдреса, "Муниципальный") = 0 Тогда
		Уровни.Вставить(31, "MunDistrict");
		Уровни.Вставить(41, "Settlement");
	Иначе
		Уровни.Вставить(3, "District");
	КонецЕсли;

	Уровни.Вставить(4, "City");
	Уровни.Вставить(5, "CityDistrict");
	Уровни.Вставить(6, "Locality");
	Уровни.Вставить(65, "Territory");

	Если ВключатьУлицу Тогда
		Уровни.Вставить(7, "Street");
	КонецЕсли;

	Возврат Уровни;
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуЗагрузкиКлассификатора()
	ДополнительныеПараметры = Новый Структура;

	Если ТипЗнч(НаселенныйПунктДетально) = Тип("Структура") И НаселенныйПунктДетально.Свойство("Area") Тогда
		СведенияОРегионе = СведенияОРегионе(НаселенныйПунктДетально.Area + " " + НаселенныйПунктДетально.AreaType);
		ДополнительныеПараметры.Вставить("КодРегионаДляЗагрузки", СведенияОРегионе.КодСубъектаРФ);
	КонецЕсли;

	ЗагрузитьАдресныйКлассификатор(ДополнительныеПараметры);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьМуниципальныеЧастиАдреса(НаселенныйПунктДетально, ОКТМО)
	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаСервере
Процедура СформироватьТекстНужнаПомощь()
	Возврат;

	// Зарезервировано для новых подсистем
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеВидаКонтактнойИнформации(Форма)
	Возврат Форма.ВидКонтактнойИнформации;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеСтраныМира(Страна)
	Возврат Страна;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НаименованиеСтраны(Страна, МеждународныйФорматАдреса)
	СведенияОСтране = СведенияОСтране(Страна);

	НаименованиеСтраны = СведенияОСтране.Наименование;
	Если МеждународныйФорматАдреса Тогда
		Если ЗначениеЗаполнено(СведенияОСтране.МеждународноеНаименование) Тогда
			НаименованиеСтраны = СведенияОСтране.МеждународноеНаименование;
		КонецЕсли;
	КонецЕсли;

	Возврат НаименованиеСтраны;
КонецФункции

&НаКлиенте
Функция ПараметрыОткрытияФормыНаселенногоПункта()
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НаселенныйПунктДетально", НаселенныйПунктДетально);
	ПараметрыФормы.Вставить("ОтображатьКнопкиВыбора",  ИспользуетсяАдресныйКлассификатор);
	ПараметрыФормы.Вставить("ТипАдреса",               ТипАдреса);

	Возврат ПараметрыФормы;
КонецФункции

&НаКлиенте
Функция ПараметрыОткрытияФормаВыбораПоИндексу()
	ПараметрыФормы = Новый Структура;

	ПараметрыФормы.Вставить("Индекс",                        "");
	ПараметрыФормы.Вставить("ВыборАдресаПоПочтовомуИндексу", Истина);
	ПараметрыФормы.Вставить("ТипАдреса",                     ТипАдреса);

	Возврат ПараметрыФормы;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НачалоУчета()
	Возврат "начало учета";
КонецФункции
