///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ДесериализацияАдресаОбщая(Знач ЗначенияПолей, Знач Представление, Знач ОжидаемыйТип = Неопределено)
	Если ТипЗнч(ЗначенияПолей) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(ЗначенияПолей), "<") Тогда
		// Общий формат контактной информации.
		Возврат КонтактнаяИнформацияСервер.сУКИ_КонтактнаяИнформацияИзXML(ЗначенияПолей, ОжидаемыйТип);
	КонецЕсли;

	Если ОжидаемыйТип <> Неопределено Тогда
		Если ОжидаемыйТип <> Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			ВызватьИсключение "Ошибка десериализации контактной информации, ожидается адрес";
		КонецЕсли;
	КонецЕсли;

	// Старый формат через разделитель строк и равенство.
	ПространствоИмен = "http://www.v8.1c.ru/ssl/contactinfo";

	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));

	Результат.Комментарий = "";
	Результат.Состав      = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));

	НазваниеОсновнойСтраны  = ВРег(ПредопределенноеЗначение("Справочник.СтраныМира.Россия").Наименование);
	ЭлементКвартира = Неопределено;
	ЭлементКорпус   = Неопределено;
	ЭлементДом      = Неопределено;

	// Национальный
	НациональныйАдрес = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.v8.1c.ru/ssl/contactinfo_ru", "АдресРФ"));

	// Общий состав
	Адрес			= Результат.Состав;
	Адрес.Страна	= НазваниеОсновнойСтраны; // Страна по умолчанию
	АдресРоссийский	= Истина;

	ТипЗначенийПолей = ТипЗнч(ЗначенияПолей);
	Если ТипЗначенийПолей = Тип("СписокЗначений") Тогда
		СписокПолей = ЗначенияПолей;
	ИначеЕсли ТипЗначенийПолей = Тип("Структура") Тогда
		СписокПолей = КонтактнаяИнформацияСервер.сУКИ_ПреобразоватьСтрокуВСписокПолей(КонтактнаяИнформацияСервер.РСА_СтрокаПолей(ЗначенияПолей, Ложь));
	Иначе
		// Уже преобразовано в строку
		СписокПолей = КонтактнаяИнформацияСервер.сУКИ_ПреобразоватьСтрокуВСписокПолей(ЗначенияПолей);
	КонецЕсли;

	ТипКвартирыНеопределен = Истина;
	ТипКорпусаНеопределен  = Истина;
	ТипДомаНеопределен     = Истина;
	ПолеПредставления      = "";

	Для Каждого ЭлементСписка Из СписокПолей Цикл
		ИмяПоля = ВРег(ЭлементСписка.Представление);

		Если ИмяПоля="ИНДЕКС" Тогда
			ЭлементИндекс			= СоздатьДопАдрЭлемента(НациональныйАдрес);
			ЭлементИндекс.ТипАдрЭл	= КонтактнаяИнформацияСервер.РСА_КодСериализацииОбъектаАдресации("Почтовый индекс");
			ЭлементИндекс.Значение	= ЭлементСписка.Значение;
		ИначеЕсли ИмяПоля = "СТРАНА" Тогда
			Адрес.Страна = ЭлементСписка.Значение;
			Если ВРег(ЭлементСписка.Значение) <> НазваниеОсновнойСтраны Тогда
				АдресРоссийский = Ложь;
			КонецЕсли;
		ИначеЕсли ИмяПоля = "КОДСТРАНЫ" Тогда
			// действия не требуется
		ИначеЕсли ИмяПоля = "КОДРЕГИОНА" Тогда
			НациональныйАдрес.СубъектРФ = РегионКода(ЭлементСписка.Значение);
		ИначеЕсли ИмяПоля = "РЕГИОН" Тогда
			НациональныйАдрес.СубъектРФ = ЭлементСписка.Значение;
		ИначеЕсли ИмяПоля = "РАЙОН" Тогда
			Если НациональныйАдрес.СвРайМО = Неопределено Тогда
				НациональныйАдрес.СвРайМО = ФабрикаXDTO.Создать( НациональныйАдрес.Тип().Свойства.Получить("СвРайМО").Тип )
			КонецЕсли;
			НациональныйАдрес.СвРайМО.Район = ЭлементСписка.Значение;
		ИначеЕсли ИмяПоля = "ГОРОД" Тогда
			НациональныйАдрес.Город = ЭлементСписка.Значение;
		ИначеЕсли ИмяПоля = "НАСЕЛЕННЫЙПУНКТ" Тогда
			НациональныйАдрес.НаселПункт = ЭлементСписка.Значение;
		ИначеЕсли ИмяПоля = "УЛИЦА" Тогда
			НациональныйАдрес.Улица = ЭлементСписка.Значение;
		ИначеЕсли ИмяПоля = "ТИПДОМА" Тогда
			Если ЭлементДом = Неопределено Тогда
				ЭлементДом = СоздатьНомерДопАдрЭлемента(НациональныйАдрес);
			КонецЕсли;
			ЭлементДом.Тип		= КонтактнаяИнформацияСервер.РСА_КодСериализацииОбъектаАдресации(ЭлементСписка.Значение);
			ТипДомаНеопределен	= Ложь;
		ИначеЕсли ИмяПоля = "ДОМ" Тогда
			Если ЭлементДом = Неопределено Тогда
				ЭлементДом = СоздатьНомерДопАдрЭлемента(НациональныйАдрес);
			КонецЕсли;
			ЭлементДом.Значение = ЭлементСписка.Значение;
		ИначеЕсли ИмяПоля = "ТИПКОРПУСА" Тогда
			Если ЭлементКорпус = Неопределено Тогда
				ЭлементКорпус = СоздатьНомерДопАдрЭлемента(НациональныйАдрес);
			КонецЕсли;
			ЭлементКорпус.Тип		= КонтактнаяИнформацияСервер.РСА_КодСериализацииОбъектаАдресации(ЭлементСписка.Значение);
			ТипКорпусаНеопределен	= Ложь;
		ИначеЕсли ИмяПоля = "КОРПУС" Тогда
			Если ЭлементКорпус = Неопределено Тогда
				ЭлементКорпус = СоздатьНомерДопАдрЭлемента(НациональныйАдрес);
			КонецЕсли;
			ЭлементКорпус.Значение = ЭлементСписка.Значение;
		ИначеЕсли ИмяПоля = "ТИПКВАРТИРЫ" Тогда
			Если ЭлементКвартира = Неопределено Тогда
				ЭлементКвартира = СоздатьНомерДопАдрЭлемента(НациональныйАдрес);
			КонецЕсли;
			ЭлементКвартира.Тип		= КонтактнаяИнформацияСервер.РСА_КодСериализацииОбъектаАдресации(ЭлементСписка.Значение);
			ТипКвартирыНеопределен	= Ложь;
		ИначеЕсли ИмяПоля = "КВАРТИРА" Тогда
			Если ЭлементКвартира = Неопределено Тогда
				ЭлементКвартира = СоздатьНомерДопАдрЭлемента(НациональныйАдрес);
			КонецЕсли;
			ЭлементКвартира.Значение = ЭлементСписка.Значение;
		ИначеЕсли ИмяПоля = "ПРЕДСТАВЛЕНИЕ" Тогда
			ПолеПредставления = СокрЛП(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;

	// Умолчания
	Если ТипДомаНеопределен И ЭлементДом <> Неопределено Тогда
		ЭлементДом.Тип = КонтактнаяИнформацияСервер.РСА_КодСериализацииОбъектаАдресации("Дом");
	КонецЕсли;

	Если ТипКорпусаНеопределен И ЭлементКорпус <> Неопределено Тогда
		ЭлементКорпус.Тип = КонтактнаяИнформацияСервер.РСА_КодСериализацииОбъектаАдресации("Корпус");
	КонецЕсли;

	Если ТипКвартирыНеопределен И ЭлементКвартира <> Неопределено Тогда
		ЭлементКвартира.Тип = КонтактнаяИнформацияСервер.РСА_КодСериализацииОбъектаАдресации("Квартира");
	КонецЕсли;

	// Представление с приоритетами.
	Если Не ПустаяСтрока(Представление) Тогда
		Результат.Представление = Представление;
	ИначеЕсли ЗначениеЗаполнено(ПолеПредставления) Или ТипЗначенийПолей = Тип("СписокЗначений") Тогда
		Результат.Представление = ПолеПредставления;
	Иначе
		Результат.Представление = КонтактнаяИнформацияКлиентСервер.РСА_ПредставлениеАдреса(Результат, Истина);
	КонецЕсли;

	Адрес.Состав = ?(АдресРоссийский, НациональныйАдрес, Результат.Представление);

	Возврат Результат;
КонецФункции

Функция АдресXMLВXDTO(Знач ЗначенияПолей, Знач Представление = "", Знач ОжидаемыйТип = Неопределено) Экспорт
	ТипЗначения			= ТипЗнч(ЗначенияПолей);
	РазбиратьПоПолям	= (ТипЗначения = Тип("СписокЗначений") Или ТипЗначения = Тип("Структура") Или (ТипЗначения = Тип("Строка") И Не ПустаяСтрока(ЗначенияПолей)));
	Если РазбиратьПоПолям Тогда
		// Разбираем из значений полей.
		Возврат ДесериализацияАдресаОбщая(ЗначенияПолей, Представление, ОжидаемыйТип);
	КонецЕсли;

	// Разбираем адрес из его представления по классификатору.
	// Зарезервировано для новых подсистем

	// Пустой объект с представлением.
	ПространствоИмен		= "http://www.v8.1c.ru/ssl/contactinfo";
	Результат				= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Состав		= ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
	Результат.Состав.Состав	= Представление;
	Результат.Представление	= Представление;

	Возврат Результат;
КонецФункции

Функция ПочтовыйИндексАдреса(XDTOАдрес, НовоеЗначение = Неопределено) Экспорт
	АдресРФ = НациональныйАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если НовоеЗначение = Неопределено Тогда
		// Чтение
		Результат = АдресРФ.Получить("ДопАдрЭл[ТипАдрЭл='" + КонтактнаяИнформацияСервер.РСА_КодСериализацииОбъектаАдресации("Почтовый индекс") + "']");
		Если Результат <> Неопределено Тогда
			Результат = Результат.Значение;
		КонецЕсли;

		Возврат Результат;
	КонецЕсли;

	// Запись
	КодИндекса = КонтактнаяИнформацияСервер.РСА_КодСериализацииОбъектаАдресации("Почтовый индекс");

	ЗаписьИндекса = АдресРФ.Получить("ДопАдрЭл[ТипАдрЭл='" + КонтактнаяИнформацияСервер.РСА_КодСериализацииОбъектаАдресации("Почтовый индекс") + "']");
	Если ЗаписьИндекса = Неопределено Тогда
		ДопАдрЭл				= АдресРФ.ДопАдрЭл; // СписокXDTO
		ЗаписьИндекса			= ДопАдрЭл.Добавить(ФабрикаXDTO.Создать(XDTOАдрес.ДопАдрЭл.ВладеющееСвойство.Тип));
		ЗаписьИндекса.ТипАдрЭл	= КодИндекса;
	КонецЕсли;

	ЗаписьИндекса.Значение = СокрЛП(НовоеЗначение);

	Возврат НовоеЗначение;
КонецФункции

Функция ЗначениеДополнительныхЭлементов(Знач XDTOАдрес) Экспорт
	Результат = Новый Структура("ДополнительныйЭлемент, ПодчиненныйЭлемент");

	АдресРФ = НациональныйАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	ДополнительныйЭлементАдреса		= НайтиДополнительныйЭлементАдреса(АдресРФ).Значение;

	Результат.ДополнительныйЭлемент	= ДополнительныйЭлементАдреса;
	Результат.ПодчиненныйЭлемент	= ДополнительныйЭлементАдреса(АдресРФ, "ДопАдрЭл[ТипАдрЭл='" + КонтактнаяИнформацияСервер.РСА_КодСериализацииДополнительногоОбъектаАдресации(91, "") + "']");

	Возврат Результат;
КонецФункции

Функция ЗданияИПомещенияАдреса(XDTOАдрес, НовоеЗначение = Неопределено) Экспорт
	Результат = Новый Структура("Здания, Помещения", ТаблицаЗначений("Тип, Значение, Сокращение, ПутьXPath, Вид", "Тип, Вид"), ТаблицаЗначений("Тип, Значение, Сокращение, ПутьXPath, Вид", "Тип, Вид"));

	АдресРФ = НациональныйАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	Если НовоеЗначение <> Неопределено Тогда
		// Запись
		Если НовоеЗначение.Свойство("Здания") Тогда
			Для Каждого Строка Из НовоеЗначение.Здания Цикл
				ВставитьЗданиеПомещение(XDTOАдрес, Строка.Тип, Строка.Значение);
			КонецЦикла;
		КонецЕсли;
		Если НовоеЗначение.Свойство("Помещения") Тогда
			Для Каждого Строка Из НовоеЗначение.Помещения Цикл
				ВставитьЗданиеПомещение(XDTOАдрес, Строка.Тип, Строка.Значение);
			КонецЦикла;
		КонецЕсли;
		Возврат НовоеЗначение
	КонецЕсли;

	// Чтение
	Для Каждого ДопЭлемент Из АдресРФ.ДопАдрЭл Цикл
		Если ДопЭлемент.Номер <> Неопределено Тогда
			КодОбъекта = ДопЭлемент.Номер.Тип;
			ТипОбъекта = КонтактнаяИнформацияСервер.РСА_ТипОбъектаПоКодуСериализации(КодОбъекта);
			Если ТипОбъекта <> Неопределено Тогда
				Вид = ТипОбъекта.Тип;
				Если Вид = 1 Или Вид = 2 Тогда
					НоваяСтрока = Результат.Здания.Добавить();
				ИначеЕсли Вид = 3 Тогда
					НоваяСтрока = Результат.Помещения.Добавить();
				Иначе
					НоваяСтрока = Неопределено;
				КонецЕсли;
				Если НоваяСтрока <> Неопределено Тогда
					НоваяСтрока.Тип        = ТипОбъекта.Наименование;
					НоваяСтрока.Значение   = ДопЭлемент.Номер.Значение;
					НоваяСтрока.Сокращение = ТипОбъекта.Сокращение;
					НоваяСтрока.ПутьXPath  = КонтактнаяИнформацияСервер.РСА_XPathНомераДополнительногоОбъектаАдресации(НоваяСтрока.Тип);
					НоваяСтрока.Вид        = Вид;
				КонецЕсли;
			Иначе
				НоваяСтрока = Результат.Помещения.Добавить();
				НоваяСтрока.Тип        = ДопЭлемент.Номер.Тип;
				НоваяСтрока.Значение   = ДопЭлемент.Номер.Значение;
				НоваяСтрока.Сокращение = ДопЭлемент.Номер.Тип;
				НоваяСтрока.ПутьXPath  = КонтактнаяИнформацияСервер.РСА_XPathНомераДополнительногоОбъектаАдресации("2000");
				НоваяСтрока.Вид        = 3;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Результат.Здания.Сортировать("Вид");
	Результат.Помещения.Сортировать("Вид");

	Возврат Результат;
КонецФункции

Функция СоздатьНомерДопАдрЭлемента(АдресРФ)
	ДопАдрЭл		= СоздатьДопАдрЭлемента(АдресРФ);
	ДопАдрЭл.Номер	= ФабрикаXDTO.Создать(ДопАдрЭл.Тип().Свойства.Получить("Номер").Тип);

	Возврат ДопАдрЭл.Номер;
КонецФункции

Функция СоздатьДопАдрЭлемента(АдресРФ)
	СвойствоДопАдрЭлемента	= АдресРФ.ДопАдрЭл.ВладеющееСвойство;
	ДопАдрЭлемента			= ФабрикаXDTO.Создать(СвойствоДопАдрЭлемента.Тип);
	АдресРФ.ДопАдрЭл.Добавить(ДопАдрЭлемента);

	Возврат ДопАдрЭлемента;
КонецФункции

Функция РегионКода(Знач Код)
	// Зарезервировано для новых подсистем

	Возврат Неопределено;
КонецФункции

Функция НациональныйАдрес(ОбъектИнформации)
	Результат = Неопределено;
	ТипXDTO   = Тип("ОбъектXDTO");

	Если ТипЗнч(ОбъектИнформации) = ТипXDTO Тогда
		ПространствоИмен = "http://www.v8.1c.ru/ssl/contactinfo";

		Если ОбъектИнформации.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация") Тогда
			Адрес = ОбъектИнформации.Состав;
		Иначе
			Адрес = ОбъектИнформации;
		КонецЕсли;

		Если ТипЗнч(Адрес) = ТипXDTO И Адрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
			Адрес = Адрес.Состав;
		КонецЕсли;

		Если ТипЗнч(Адрес) = ТипXDTO Тогда
			Результат = Адрес;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ДополнительныйЭлементАдреса(XDTOАдрес, XPathЭлемента)
	АдресРФ = НациональныйАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Результат = АдресРФ.Получить(XPathЭлемента);
	Если Результат <> Неопределено Тогда
		Возврат Результат.Значение;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция НайтиДополнительныйЭлементАдреса(АдресРФ)
	ВариантыДополнительногоЭлементаАдреса = ВариантыДополнительногоЭлементаАдреса();

	ПутьXPath = "";
	ДополнительныйЭлементАдреса = Неопределено;
	Для каждого ВариантДополнительныйЭлементАдреса Из ВариантыДополнительногоЭлементаАдреса Цикл
		ПутьXPath = "ДопАдрЭл[ТипАдрЭл='" + КонтактнаяИнформацияСервер.РСА_КодСериализацииДополнительногоОбъектаАдресации(90, ВариантДополнительныйЭлементАдреса) + "']";
		ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, ПутьXPath);
		Если ДополнительныйЭлементАдреса <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Новый Структура("Значение, XPath", ДополнительныйЭлементАдреса, ПутьXPath);
КонецФункции

Функция ВариантыДополнительногоЭлементаАдреса()
	ВариантыДополнительногоЭлементаАдреса = Новый Массив;
	ВариантыДополнительногоЭлементаАдреса.Добавить("СНТ");
	ВариантыДополнительногоЭлементаАдреса.Добавить("ГСК");
	ВариантыДополнительногоЭлементаАдреса.Добавить("ТЕР");
	ВариантыДополнительногоЭлементаАдреса.Добавить("");

	Возврат ВариантыДополнительногоЭлементаАдреса;
КонецФункции

Процедура ВставитьЗданиеПомещение(XDTOАдрес, Тип, Значение)
	Если ПустаяСтрока(Значение) Тогда
		Возврат;
	КонецЕсли;

	Запись = XDTOАдрес.Получить(КонтактнаяИнформацияСервер.РСА_XPathНомераДополнительногоОбъектаАдресации(Тип));
	Если Запись = Неопределено Тогда
		Запись					= XDTOАдрес.ДопАдрЭл.Добавить( ФабрикаXDTO.Создать(XDTOАдрес.ДопАдрЭл.ВладеющееСвойство.Тип));
		Запись.Номер			= ФабрикаXDTO.Создать(Запись.Свойства().Получить("Номер").Тип);
		Запись.Номер.Значение	= Значение;

		КодТипа = КонтактнаяИнформацияСервер.РСА_КодСериализацииОбъектаАдресации(Тип);
		Если КодТипа = Неопределено Тогда
			КодТипа = Тип;
		КонецЕсли;
		Запись.Номер.Тип = КодТипа
	Иначе
		Запись.Значение = Значение;
	КонецЕсли;
КонецПроцедуры

Функция ТаблицаЗначений(СписокКолонок, СписокИндексов = "")
	ТаблицаРезультата = Новый ТаблицаЗначений;

	Для Каждого КлючЗначение Из (Новый Структура(СписокКолонок)) Цикл
		ТаблицаРезультата.Колонки.Добавить(КлючЗначение.Ключ);
	КонецЦикла;

	СтрокиИндексов = СтрЗаменить(СписокИндексов, "|", Символы.ПС);
	Для НомерИндекса = 1 По СтрЧислоСтрок(СтрокиИндексов) Цикл
		КолонкиИндекса = СокрЛП(СтрПолучитьСтроку(СтрокиИндексов, НомерИндекса));
		Для Каждого КлючЗначение Из (Новый Структура(КолонкиИндекса)) Цикл
			ТаблицаРезультата.Индексы.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
	КонецЦикла;

	Возврат ТаблицаРезультата;
КонецФункции

Функция ЕстьВозможностьИзмененияАдресногоКлассификатора() Экспорт
	// Зарезервировано для новых подсистем

	Возврат Ложь;
КонецФункции

Функция КонтактнаяИнформацияВСтаруюСтруктуру(XDTOКонтактнаяИнформация, СтарыйСоставПолей = Ложь) Экспорт
	Если ТипЗнч(XDTOКонтактнаяИнформация) = Тип("Строка") И СтрНачинаетсяС(СокрЛ(XDTOКонтактнаяИнформация), "<") Тогда
		XDTOКонтактная = КонтактнаяИнформацияСервер.сУКИ_КонтактнаяИнформацияИзXML(XDTOКонтактнаяИнформация);
	Иначе
		XDTOКонтактная = XDTOКонтактнаяИнформация
	КонецЕсли;

	Результат = Новый Структура("Представление, ЗначенияПолей", XDTOКонтактная.Представление, Новый СписокЗначений);

	ПространствоИмен	= "http://www.v8.1c.ru/ssl/contactinfo";
	Состав				= XDTOКонтактная.Состав;

	Если Состав = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	Тип = Состав.Тип();
	Если Тип = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		Результат.ЗначенияПолей = АдресВСтарыйСписокПолей(Состав, Не СтарыйСоставПолей);
		Результат.ЗначенияПолей.Добавить(Результат.Представление, "Представление");
	ИначеЕсли Тип = ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
		Результат.ЗначенияПолей = КонтактнаяИнформацияСервер.сУКИ_НомерТелефонаВСтарыйСписокПолей(Состав);
		Результат.ЗначенияПолей.Добавить(XDTOКонтактная.Комментарий, "Комментарий");
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция АдресВСтарыйСписокПолей(XDTOАдрес, РасширенныйСоставПолей = Истина)
	Список = Новый СписокЗначений;

	ПространствоИмен	= "http://www.v8.1c.ru/ssl/contactinfo";
	XDTOТип				= XDTOАдрес.Тип();
	Если XDTOТип = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		// Страна с кодом
		ДобавитьЗначение(Список, "Страна", XDTOАдрес.Страна);
		Если ПустаяСтрока(XDTOАдрес.Страна) Тогда
			КодСтраны = "";
		Иначе
			Страна		= Справочники.СтраныМира.НайтиПоНаименованию(XDTOАдрес.Страна, Истина);
			КодСтраны	= СокрЛП(Страна.Код);
		КонецЕсли;
		ДобавитьЗначение(Список, "КодСтраны", КодСтраны);

		Если Не СтрСравнить(ПредопределенноеЗначение("Справочник.СтраныМира.Россия"), XDTOАдрес.Страна) = 0 Тогда
			Возврат Список;
		КонецЕсли;

		АдресРФ = XDTOАдрес.Состав;
	ИначеЕсли XDTOТип = ФабрикаXDTO.Тип("http://www.v8.1c.ru/ssl/contactinfo_ru", "АдресРФ") Тогда
		АдресРФ = XDTOАдрес;
	Иначе
		Возврат Список;
	КонецЕсли;

	ДобавитьЗначение(Список, "Индекс", ПочтовыйИндексАдреса(АдресРФ) );

	ДобавитьЗначение(Список, "Регион", АдресРФ.СубъектРФ);
	ДобавитьЗначение(Список, "КодРегиона", КонтактнаяИнформацияСервер.РСА_КодРегиона(АдресРФ.СубъектРФ) );
	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "РегионСокращение", Сокращение(АдресРФ.СубъектРФ));
	КонецЕсли;

	Район = РайонАдреса(АдресРФ);
	ДобавитьЗначение(Список, "Район", Район);
	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "РайонСокращение", Сокращение(Район));
	КонецЕсли;

	ДобавитьЗначение(Список, "Город", АдресРФ.Город);
	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "ГородСокращение", Сокращение(АдресРФ.Город));
	КонецЕсли;

	// преобразование в КЛАДР
	НаселенныйПункт                 = АдресРФ.НаселПункт;
	Улица                           = АдресРФ.Улица;
	ДополнительныйЭлементАдреса     = НайтиДополнительныйЭлементАдреса(АдресРФ).Значение;
	ПодчиненныйЭлементЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, "ДопАдрЭл[ТипАдрЭл='" + КонтактнаяИнформацияСервер.РСА_КодСериализацииДополнительногоОбъектаАдресации(91, "") + "']");

	ЕстьДополнительныйЭлементАдреса     = ЗначениеЗаполнено(ДополнительныйЭлементАдреса);
	ЕстьПодчиненныйЭлементЭлементАдреса = ЗначениеЗаполнено(ПодчиненныйЭлементЭлементАдреса);

	Если ЕстьДополнительныйЭлементАдреса Тогда
		Если ЕстьПодчиненныйЭлементЭлементАдреса Тогда
			НаселенныйПункт = ДополнительныйЭлементАдреса;
			Улица = ПодчиненныйЭлементЭлементАдреса;
		Иначе
			Улица = ДополнительныйЭлементАдреса;
		КонецЕсли;

	ИначеЕсли ЕстьПодчиненныйЭлементЭлементАдреса Тогда
		Улица = ПодчиненныйЭлементЭлементАдреса;
	КонецЕсли;

	ДобавитьЗначение(Список, "НаселенныйПункт", НаселенныйПункт);
	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "НаселенныйПунктСокращение", Сокращение(НаселенныйПункт));
	КонецЕсли;

	ДобавитьЗначение(Список, "Улица", Улица);

	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "УлицаСокращение", Сокращение(Улица));
	КонецЕсли;

	// Дом и корпус
	ЗданияИПомещения = ЗданияИПомещенияАдреса(АдресРФ);

	ПараметрыОбъекта = ЗначениеЗданияИлиПомещения(ЗданияИПомещения.Здания, ВариантыДанныхДом(), РасширенныйСоставПолей);
	Если ПараметрыОбъекта.Количество() = 0 Тогда
		ДобавитьЗначение(Список, "ТипДома", "");
		ДобавитьЗначение(Список, "Дом",     "");
	Иначе
		Для Каждого СтрокаОбъекта Из ПараметрыОбъекта Цикл
			ДобавитьЗначение(Список, "ТипДома", СтрокаОбъекта.Тип,      РасширенныйСоставПолей);
			ДобавитьЗначение(Список, "Дом",     СтрокаОбъекта.Значение, РасширенныйСоставПолей);
		КонецЦикла;
	КонецЕсли;

	ПараметрыОбъекта = ЗначениеЗданияИлиПомещения(ЗданияИПомещения.Здания, ВариантыДанныхСтроение(), РасширенныйСоставПолей);
	Если ПараметрыОбъекта.Количество() = 0 Тогда
		ДобавитьЗначение(Список, "ТипКорпуса", "");
		ДобавитьЗначение(Список, "Корпус",     "");
	ИначеЕсли ПараметрыОбъекта.Количество() = 1 Тогда
		СтрокаОбъекта  = ПараметрыОбъекта[0];
		ДобавитьЗначение(Список, "ТипКорпуса", СтрокаОбъекта.Тип,      РасширенныйСоставПолей);
		ДобавитьЗначение(Список, "Корпус",     СтрокаОбъекта.Значение, РасширенныйСоставПолей);
	Иначе
		ТипКорпуса		= ПараметрыОбъекта[0].Тип;
		ЗначениеКорпуса	= "";
		Разделитель		= "";
		Сокращения		= КонтактнаяИнформацияСервер.РСА_СокращенияОбъектовАдресацииАдресаРФ();
		Для Каждого СтрокаОбъекта Из ПараметрыОбъекта Цикл
			ИмяЗдания = ?(ЗначениеЗаполнено(Сокращения[СтрокаОбъекта.Тип]), Сокращения[СтрокаОбъекта.Тип], СтрокаОбъекта.Тип);
			ЗначениеКорпуса  = ЗначениеКорпуса  + Разделитель + ИмяЗдания + " " + СтрокаОбъекта.Значение;
			Разделитель = ", " ;
		КонецЦикла;
		ДобавитьЗначение(Список, "ТипКорпуса", ТипКорпуса,      РасширенныйСоставПолей);
		ДобавитьЗначение(Список, "Корпус",     ЗначениеКорпуса  , РасширенныйСоставПолей);
	КонецЕсли;

	ПараметрыОбъекта = ЗначениеЗданияИлиПомещения(ЗданияИПомещения.Помещения, ВариантыДанныхПомещение(), РасширенныйСоставПолей);
	Если ПараметрыОбъекта.Количество() = 0 Тогда
		ДобавитьЗначение(Список, "ТипКвартиры", "");
		ДобавитьЗначение(Список, "Квартира",    "");
	ИначеЕсли ПараметрыОбъекта.Количество() = 1 Тогда
		СтрокаОбъекта  = ПараметрыОбъекта[0];
		ДобавитьЗначение(Список, "ТипКвартиры", СтрокаОбъекта.Тип,      РасширенныйСоставПолей);
		ДобавитьЗначение(Список, "Квартира",    СтрокаОбъекта.Значение, РасширенныйСоставПолей);
	Иначе
		ТипПомещения		= ПараметрыОбъекта[0].Тип;
		ЗначениеПомещения	= "";
		Разделитель			= "";
		Сокращения			= КонтактнаяИнформацияСервер.РСА_СокращенияОбъектовАдресацииАдресаРФ();
		Для Каждого СтрокаОбъекта Из ПараметрыОбъекта Цикл
			ИмяПомещения = ?(ЗначениеЗаполнено(Сокращения[СтрокаОбъекта.Тип]), Сокращения[СтрокаОбъекта.Тип], СтрокаОбъекта.Тип);
			ЗначениеПомещения = ЗначениеПомещения + Разделитель + ИмяПомещения + " " + СтрокаОбъекта.Значение;
			Разделитель = ", " ;
		КонецЦикла;
		ДобавитьЗначение(Список, "ТипКвартиры", ТипПомещения,      РасширенныйСоставПолей);
		ДобавитьЗначение(Список, "Квартира",    ЗначениеПомещения, РасширенныйСоставПолей);
	КонецЕсли;

	Возврат Список;
КонецФункции

Процедура ДобавитьЗначение(Список, ИмяПоля, Значение, РазрешитьДубли = Ложь)
	Если Не РазрешитьДубли Тогда
		Для Каждого Элемент Из Список Цикл
			Если Элемент.Представление = ИмяПоля Тогда
				Элемент.Значение = Строка(Значение);

				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Список.Добавить(Строка(Значение), ИмяПоля);
КонецПроцедуры

Функция Сокращение(Знач Текст)
	Части = КонтактнаяИнформацияКлиентСервер.УКИ_НаименованиеСокращение(Текст);

	Возврат Части.Сокращение;
КонецФункции

Функция ВариантыДанныхДом() Экспорт
	Возврат Новый Структура("ВариантыТипа, МожноПодбиратьЗначения", КонтактнаяИнформацияСервер.РСА_НаименованияОбъектовАдресацииПоТипу(1), Ложь);
КонецФункции

Функция ВариантыДанныхСтроение() Экспорт
	Возврат Новый Структура("ВариантыТипа, МожноПодбиратьЗначения", КонтактнаяИнформацияСервер.РСА_НаименованияОбъектовАдресацииПоТипу(2), Ложь);
КонецФункции

Функция ВариантыДанныхПомещение() Экспорт
	Возврат Новый Структура("ВариантыТипа, МожноПодбиратьЗначения", КонтактнаяИнформацияСервер.РСА_НаименованияОбъектовАдресацииПоТипу(3, Ложь), Ложь);
КонецФункции

Функция ЗначениеЗданияИлиПомещения(Данные, Варианты, ВсеЗначенияВарианта)
	Результат = ТаблицаЗначений("Тип, Значение");

	Для каждого СведенияОбОбъекте Из Данные Цикл
		Для каждого Вариант Из Варианты.ВариантыТипа Цикл
			Если СтрСравнить(Вариант, СведенияОбОбъекте.Тип) = 0 Тогда
				ЗаполнитьЗначенияСвойств(Результат.Добавить(), СведенияОбОбъекте);
				Если Не ВсеЗначенияВарианта Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция РайонАдреса(XDTOАдрес, НовоеЗначение = Неопределено)
	Если НовоеЗначение = Неопределено Тогда
		// Чтение

		XDTOТип = XDTOАдрес.Тип();
		Если XDTOТип = ФабрикаXDTO.Тип("http://www.v8.1c.ru/ssl/contactinfo_ru", "АдресРФ") Тогда
			АдресРФ = XDTOАдрес;
		Иначе
			АдресРФ = XDTOАдрес.Состав;
		КонецЕсли;

		Если ТипЗнч(АдресРФ) = Тип("ОбъектXDTO") Тогда
			Возврат ПолучитьXDTOРеквизитОбъекта(АдресРФ, "СвРайМО/Район");
		КонецЕсли;

		Возврат Неопределено;
	КонецЕсли;

	// Запись
	Запись			= СвРайМО(XDTOАдрес);
	Запись.Район	= НовоеЗначение;

	Возврат НовоеЗначение;
КонецФункции

Функция СвРайМО(АдресРФ)
	Если АдресРФ.СвРайМО <> Неопределено Тогда
		Возврат АдресРФ.СвРайМО;
	КонецЕсли;

	АдресРФ.СвРайМО = ФабрикаXDTO.Создать(АдресРФ.Свойства().Получить("СвРайМО").Тип);

	Возврат АдресРФ.СвРайМО;
КонецФункции

Функция ПолучитьXDTOРеквизитОбъекта(ОбъектXTDO, XPath)
	// Переносов строки в XPath не ожидаем.
	СтрокаСвойств = СтрЗаменить(СтрЗаменить(XPath, "/", Символы.ПС), Символы.ПС + Символы.ПС, "/");

	ЧислоСвойств = СтрЧислоСтрок(СтрокаСвойств);
	Если ЧислоСвойств = 1 Тогда
		Результат = ОбъектXTDO.Получить(СтрокаСвойств);
		Если ТипЗнч(Результат) = Тип("ОбъектXDTO") Тогда
			Возврат Результат.Значение;
		КонецЕсли;

		Возврат Результат;
	КонецЕсли;

	Результат = ?(ЧислоСвойств = 0, Неопределено, ОбъектXTDO);
	Для Индекс = 1 По ЧислоСвойств Цикл
		Результат = Результат.Получить(СтрПолучитьСтроку(СтрокаСвойств, Индекс));
		Если Результат = Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Процедура УстановитьXDTOРеквизитОбъекта(ОбъектXDTO, ПутьXPath, Значение) Экспорт
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Части XPath
	ЧастиПути  = СтрЗаменить(ПутьXPath, "/", Символы.ПС);
	ЧастейПути = СтрЧислоСтрок(ЧастиПути);

	ВедущийОбъект = ОбъектXDTO;
	Объект        = ОбъектXDTO;

	Для Позиция = 1 По ЧастейПути Цикл
		ЧастьПути = СтрПолучитьСтроку(ЧастиПути, Позиция);
		Если ЧастейПути = 1 Тогда
			Прервать;
		КонецЕсли;

		Свойство = Объект.Свойства().Получить(ЧастьПути);
		Если Не Объект.Установлено(Свойство) Тогда
			Объект.Установить(Свойство, ФабрикаXDTO.Создать(Свойство.Тип));
		КонецЕсли;
		ВедущийОбъект = Объект;
		Объект        = Объект[ЧастьПути];
	КонецЦикла;

	Если Объект <> Неопределено Тогда
		Если СтрНайти(ЧастьПути, "ДопАдрЭл") = 0 Тогда
			Объект[ЧастьПути]		= Значение;
		Иначе
			КодПутьXPath			= Сред(ЧастьПути, 20, 8);
			ЗначениеПоля			= Объект.ДопАдрЭл.Добавить(ФабрикаXDTO.Создать(Объект.ДопАдрЭл.ВладеющееСвойство.Тип));
			ЗначениеПоля.ТипАдрЭл	= КодПутьXPath;
			ЗначениеПоля.Значение	= Значение;
		КонецЕсли;

	ИначеЕсли ВедущийОбъект <> Неопределено Тогда
		ВедущийОбъект[ЧастьПути] =  Значение;
	КонецЕсли;
КонецПроцедуры

Функция ОшибкиЗаполненияАдресаXDTO(Знач Адрес, ВидИнформации) Экспорт
	Если ТипЗнч(Адрес) = Тип("ОбъектXDTO") Тогда
		АдресXML	= КонтактнаяИнформацияСервер.сУКИ_КонтактнаяИнформацияXDTOВXML(Адрес);
		Адрес		= КонтактнаяИнформацияСервер.УКИ_КонтактнаяИнформацияВJSON(АдресXML);
	КонецЕсли;

	Если ТипЗнч(Адрес) = Тип("Строка") Тогда
		Адрес = КонтактнаяИнформацияСервер.сУКИ_JSONВКонтактнуюИнформациюПоПолям(Адрес, Перечисления.ТипыКонтактнойИнформации.Адрес);
	КонецЕсли;

	СписокОшибок = Новый Массив;

	// Флаги проверки
	Если ТипЗнч(ВидИнформации) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		ФлагиПроверки = КонтактнаяИнформацияСервер.сУКИ_СтруктураВидаКонтактнойИнформации(ВидИнформации);
	Иначе
		ФлагиПроверки = ВидИнформации;
	КонецЕсли;

	Если ФлагиПроверки.МеждународныйФорматАдреса Тогда
		Если СтрСравнить("ВСвободнойФорме", Адрес.addressType) = 0 Тогда
			ПредставлениеАдреса = Адрес.value;
			Если ВидИнформации.ВключатьСтрануВПредставление Тогда
				ПредставлениеАдреса = СтрЗаменить(ПредставлениеАдреса, Адрес.country, "");
			КонецЕсли;
			ТолькоЛатиницаВСтроке(ПредставлениеАдреса, СписокОшибок);
		Иначе
			ИменаУровней = КонтактнаяИнформацияКлиентСервер.РСА_ИменаУровнейАдреса(Адрес.addressType, Истина);

			Для каждого ИмяУровня Из ИменаУровней Цикл
				ТолькоЛатиницаВСтроке(Адрес[ИмяУровня], СписокОшибок);
				Если СписокОшибок.Количество() > 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Возврат СписокОшибок;
	КонецЕсли;

	Если НЕ КонтактнаяИнформацияСервер.сУКИ_ЭтоНациональныйАдрес(Адрес) Тогда
		// Адрес за пределами РФ
		Если ФлагиПроверки.ТолькоНациональныйАдрес Тогда
			ТекстОшибки = "Адрес должен быть только российским.";
			СписокОшибок.Добавить(ПоляОшибки(ТекстОшибки, Ложь));
		КонецЕсли;

		Возврат СписокОшибок;
	КонецЕсли;

	// Адрес пустой
	Если Не КонтактнаяИнформацияСервер.сУКИ_ЕстьЗаполненныеСвойстваКонтактнойИнформации(Адрес) Тогда
		Если ФлагиПроверки.ОбязательноеЗаполнение Тогда
			// Но должен быть заполнен
			ТекстОшибки = "Адрес не заполнен.";
			СписокОшибок.Добавить(ПоляОшибки(ТекстОшибки, Ложь));
		КонецЕсли;

		Возврат СписокОшибок;
	КонецЕсли;

	ВсеОшибки = ОбщиеГруппыОшибокЗаполненияАдреса(Адрес, ФлагиПроверки);

	Если ВсеОшибки.Количество() > 0 Тогда
		Для Каждого Группа Из ВсеОшибки Цикл
			Для Каждого Поле Из Группа.Поля Цикл
				СписокОшибок.Добавить(ПоляОшибки( Поле.Сообщение, Истина, Поле.ИмяПоля));
			КонецЦикла;
		КонецЦикла;
		Возврат СписокОшибок;
	КонецЕсли;

	// Зарезервировано для новых подсистем

	Возврат СписокОшибок;
КонецФункции

Функция ПоляОшибки(ТекстОшибки, АдресПроверен, ИмяПоля = "Представление", ВариантАдреса = Неопределено)
	Если ВариантАдреса = Неопределено Тогда
		ВариантАдреса = Новый Массив;
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки",   ТекстОшибки);
	Результат.Вставить("АдресПроверен", АдресПроверен);
	Результат.Вставить("ИмяПоля",       ИмяПоля);
	Результат.Вставить("ВариантАдреса", ВариантАдреса);

	Возврат Результат;
КонецФункции

Процедура ТолькоЛатиницаВСтроке(Значение, Знач Результат)
	Если Не БазоваяПодсистемаКлиентСервер.СФ_ТолькоЛатиницаВСтроке(Значение, Ложь, "1234567890,") Тогда
		ТекстОшибки = "Адрес в международном формате должен быть набран латиницей.";
		Результат.Добавить(ПоляОшибки(ТекстОшибки, Истина));
	КонецЕсли;
КонецПроцедуры

Функция ОбщиеГруппыОшибокЗаполненияАдреса(Знач ДанныеАдреса, Знач ВидИнформации)
	Результат = Новый Массив;

	НеЗаполненыОбязательныеПоля = ГруппаОшибокАдреса("НеЗаполненыОбязательныеПоля", "Не заполнены обязательные поля:");
	Результат.Добавить(НеЗаполненыОбязательныеПоля);

	НеУказаныСокращенияПолей = ГруппаОшибокАдреса("НеУказаныСокращенияПолей", "Не указано сокращение для полей:");
	Результат.Добавить(НеУказаныСокращенияПолей);

	НедопустимыеСимволыПолей = ГруппаОшибокАдреса("НедопустимыеСимволыПолей", "Найдены недопустимые символы в полях:");
	Результат.Добавить(НедопустимыеСимволыПолей);

	НеСоответствуетДлинаПолей = ГруппаОшибокАдреса("НеСоответствуетДлинаПолей", "Не соответствует установленной длина полей:");
	Результат.Добавить(НеСоответствуетДлинаПолей);

	Регион = СокрЛП(ДанныеАдреса.Area + " " + ДанныеАдреса.AreaType);
	Если ПустаяСтрока(Регион) Тогда
		ДобавитьОшибкуЗаполненияАдреса(НеЗаполненыОбязательныеПоля, "СубъектРФ", "Не указан регион адреса", "Регион");
	КонецЕсли;

	// 3) Регион, Район, Город, НаселенныйПункт, Улица должны:
	//      - иметь сокращение.
	//      - не длинней 50 символов.
	//      - только кириллица.

	ДопустимоКромеКириллицы = "/,-. 0123456789_NIV";

	// Регион
	Если Не ПустаяСтрока(Регион) Тогда
		Поле = "СубъектРФ";
		Если ПустаяСтрока(ДанныеАдреса.AreaType) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеУказаныСокращенияПолей, "СубъектРФ", СтрШаблон("Для региона ""%1"" не указан тип (республика, область, город и пр.)", Регион), "Регион");
		КонецЕсли;
		Если Не БазоваяПодсистемаКлиентСервер.СФРФ_ТолькоКириллицаВСтроке(Регион, Ложь, ДопустимоКромеКириллицы) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НедопустимыеСимволыПолей, Поле, СтрШаблон("В названии региона ""%1"" есть не кириллические символы", Регион), "Регион");
		КонецЕсли
	КонецЕсли;

	// Район
	Район = КонтактнаяИнформацияКлиентСервер.УКИ_СоединитьНаименованиеИТипАдресногоОбъекта(ДанныеАдреса.District, ДанныеАдреса.DistrictType);
	Если Не ПустаяСтрока(Район) Тогда
		Поле = "Район";
		Если ПустаяСтрока(ДанныеАдреса.DistrictType) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеУказаныСокращенияПолей, Поле, СтрШаблон("Для района ""%1"" не указан тип (район, поселение и пр.)", Район), "Район");
		КонецЕсли;
		Если Не БазоваяПодсистемаКлиентСервер.СФРФ_ТолькоКириллицаВСтроке(Район, Ложь, ДопустимоКромеКириллицы) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НедопустимыеСимволыПолей, Поле, СтрШаблон("В названии района ""%1"" есть не кириллические символы", Район), "Район");
		КонецЕсли;
	КонецЕсли;

	// Город
	Город = КонтактнаяИнформацияКлиентСервер.УКИ_СоединитьНаименованиеИТипАдресногоОбъекта(ДанныеАдреса.City, ДанныеАдреса.CityType);
	Если Не ПустаяСтрока(Город) Тогда
		Поле = "Город";
		Если ПустаяСтрока(ДанныеАдреса.CityType) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеУказаныСокращенияПолей, Поле, СтрШаблон("Для города ""%1"" не указан тип (город, поселок, сельское поселение и пр.)", Город), "Город");
		КонецЕсли;
		Если Не БазоваяПодсистемаКлиентСервер.СФРФ_ТолькоКириллицаВСтроке(Город, Ложь, ДопустимоКромеКириллицы) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НедопустимыеСимволыПолей, Поле, СтрШаблон("В названии города ""%1"" есть не кириллические символы", Город), "Город");
		КонецЕсли;
	КонецЕсли;

	// Населенный пункт
	НаселенныйПункт = КонтактнаяИнформацияКлиентСервер.УКИ_СоединитьНаименованиеИТипАдресногоОбъекта(ДанныеАдреса.Locality, ДанныеАдреса.LocalityType);
	Если Не ПустаяСтрока(НаселенныйПункт) Тогда
		Поле = "НаселПункт";
		Если ПустаяСтрока(ДанныеАдреса.LocalityType) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеУказаныСокращенияПолей, Поле, СтрШаблон("Для населенного пункта ""%1"" не указан тип (город, деревня, село и пр.)", НаселенныйПункт), "Населенный пункт");
		КонецЕсли;
		Если Не БазоваяПодсистемаКлиентСервер.СФРФ_ТолькоКириллицаВСтроке(НаселенныйПункт, Ложь, ДопустимоКромеКириллицы) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НедопустимыеСимволыПолей, Поле, СтрШаблон("В названии населенного пункта ""%1"" есть не кириллические символы", НаселенныйПункт), "Населенный пункт");
		КонецЕсли;
	КонецЕсли;

	// Улица
	Улица = КонтактнаяИнформацияКлиентСервер.УКИ_СоединитьНаименованиеИТипАдресногоОбъекта(ДанныеАдреса.Street, ДанныеАдреса.StreetType);
	Если Не ПустаяСтрока(Улица) Тогда
		Поле = "Улица";
		Если ПустаяСтрока(ДанныеАдреса.StreetType) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеУказаныСокращенияПолей, Поле, СтрШаблон("Для улицы ""%1"" не указан тип (улица, переулок, шоссе и пр.)", Улица), "Улица");
		КонецЕсли;
		Если Не БазоваяПодсистемаКлиентСервер.СФРФ_ТолькоКириллицаВСтроке(Улица, Ложь, ДопустимоКромеКириллицы) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НедопустимыеСимволыПолей, Поле, СтрШаблон("В названии улицы ""%1"" есть не кириллические символы", Улица), "Улица");
		КонецЕсли;
	КонецЕсли;

	// 4) Индекс - если есть, то 6 цифр.
	Если Не ПустаяСтрока(ДанныеАдреса.ZipCode) Тогда
		Поле = "Индекс";
		Если СтрДлина(ДанныеАдреса.ZipCode) <> 6 Или Не БазоваяПодсистемаКлиентСервер.СФ_ТолькоЦифрыВСтроке(ДанныеАдреса.ZipCode) Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, Поле, "Почтовый индекс должен состоять из 6 цифр", "Индекс");
		КонецЕсли;
	КонецЕсли;

	// 6) Поля Город и НаселенныйПункт могут быть одновременно пустые только в регионе - городе ФЗ.
	Территория = КонтактнаяИнформацияКлиентСервер.УКИ_СоединитьНаименованиеИТипАдресногоОбъекта(ДанныеАдреса.territory, ДанныеАдреса.territoryType);
	Если ПустаяСтрока(Город) И ПустаяСтрока(НаселенныйПункт) И ПустаяСтрока(Территория) И ПустаяСтрока(Район) Тогда
		Если КонтактнаяИнформацияСервер.РСА_ЭтоГородФедеральногоЗначения(Регион) = Ложь Тогда
			ДобавитьОшибкуЗаполненияАдреса(НеЗаполненыОбязательныеПоля, "Город", "Город может быть не указан только в регионе - городе федерального значения", "Город");
			ДобавитьОшибкуЗаполненияАдреса(НеЗаполненыОбязательныеПоля, "НаселПункт", "Населенный пункт может быть не указан только в регионе - городе федерального значения", "Населенный пункт");
		КонецЕсли;
	КонецЕсли;

	// 7) Дома не могут быть пустыми
	Если ПустаяСтрока(ДанныеАдреса.houseNumber) И ДанныеАдреса.buildings.Количество() = 0 И ПустаяСтрока(ДанныеАдреса.stead) Тогда
		Поле = "Дом";
		ДобавитьОшибкуЗаполненияАдреса(НеСоответствуетДлинаПолей, Поле, "Не указан номер дома", "Дом");
	КонецЕсли;

	// Все. Убираем пустые результаты, корректируем сообщение группы.
	Для Индекс = 1-Результат.Количество() По 0 Цикл
		Группа			= Результат[-Индекс];
		Поля			= Группа.Поля;
		СписокСущностей = "";
		Для ИндексПоля = 1-Поля.Количество() По 0 Цикл
			Поле = Поля[-ИндексПоля];
			Если ПустаяСтрока(Поле.Сообщение) Тогда
				Поля.Удалить(-ИндексПоля);
			Иначе
				СписокСущностей = ", " + Поле.СущностьПоля + СписокСущностей;
				Поле.Удалить("СущностьПоля");
			КонецЕсли;
		КонецЦикла;
		Если Поля.Количество() = 0 Тогда
			Результат.Удалить(-Индекс);
		ИначеЕсли Не ПустаяСтрока(СписокСущностей) Тогда
			Группа.Сообщение = Группа.Сообщение + Сред(СписокСущностей, 2);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция ГруппаОшибокАдреса(ТипОшибки, Сообщение)
	Возврат Новый Структура("ТипОшибки, Сообщение, Поля", ТипОшибки, Сообщение, Новый Массив);
КонецФункции

Процедура ДобавитьОшибкуЗаполненияАдреса(Группа, ИмяПоля = "", Сообщение = "", СущностьПоля = "")
	Группа.Поля.Добавить(Новый Структура("ИмяПоля, Сообщение, СущностьПоля", ИмяПоля, Сообщение, СущностьПоля));
КонецПроцедуры

Функция ПредставлениеНаселенногоПункта(ОбъектАдреса) Экспорт
	АдресныеУровниБезСокращений = Новый Соответствие();
	АдресныеУровниБезСокращений.Вставить("MunDistrict", Истина);
	АдресныеУровниБезСокращений.Вставить("Settlement",  Истина);

	ЭтоМуниципальныйАдрес = СтрСравнить("Муниципальный", ОбъектАдреса.AddressType) = 0;
	Если НЕ ОбъектАдреса.Свойство("AddressType") Тогда
		СписокПолейАдреса = "Area,City";
	ИначеЕсли ЭтоМуниципальныйАдрес Тогда
		СписокПолейАдреса = "Area,MunDistrict,Settlement,CityDistrict,Locality,Territory";
	Иначе
		СписокПолейАдреса = "Area,District,City,CityDistrict,Locality,Territory";
	КонецЕсли;
	СписокПолей = СтрРазделить(СписокПолейАдреса, ",");

	Адрес = Новый Массив;
	Для каждого ИмяПоля Из СписокПолей Цикл
		Если ЭтоМуниципальныйАдрес И СтрСравнить(ИмяПоля, "locality") = 0 И ПустаяСтрока(ОбъектАдреса["locality"]) Тогда
			ИмяПоля = "city";
		КонецЕсли;

		Если ОбъектАдреса.Свойство(ИмяПоля) И ЗначениеЗаполнено(ОбъектАдреса[ИмяПоля]) Тогда
			ПредставлениеУровня = ОбъектАдреса[ИмяПоля] + ?(АдресныеУровниБезСокращений.Получить(ИмяПоля) = Неопределено, " " + ОбъектАдреса[ИмяПоля + "Type"], "");
			Адрес.Добавить(СокрЛП(ПредставлениеУровня));
		КонецЕсли;
	КонецЦикла;

	Возврат СтрСоединить(Адрес, ", ");
КонецФункции

Функция СписокРеквизитовНаселенныйПункт(СведенияОбАдресномОбъекте = Неопределено) Экспорт
	Адрес = КонтактнаяИнформацияКлиентСервер.УКИ_ОписаниеНовойКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);

	Если СведенияОбАдресномОбъекте = Неопределено Тогда
		Возврат Адрес;
	КонецЕсли;

	Возврат Неопределено;

	// Зарезервировано для новых подсистем
КонецФункции

Функция СписокАвтоподбораНаселенногоПункта(Текст, ДополнительныеПараметры) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Данные",                       Новый СписокЗначений);
	Результат.Вставить("Отказ",                        Ложь);
	Результат.Вставить("ПодробноеПредставлениеОшибки", Неопределено);
	Результат.Вставить("КраткоеПредставлениеОшибки",   Неопределено);

	Результат.Отказ                        = Истина;
	Результат.КраткоеПредставлениеОшибки   = "Адресные сведения отсутствуют.";
	Результат.ПодробноеПредставлениеОшибки = "";

	Возврат Результат;

	// Зарезервировано для новых подсистем
КонецФункции

Функция СписокАвтоподбораУлицы(Текст, ПараметрыАвтоподбора) Экспорт
	// Зарезервировано для новых подсистем

	Возврат Неопределено;
КонецФункции

Функция СписокАвтоподбораНомераДомов(ИдентификаторАдресногоОбъекта, СтрокаПоиска) Экспорт
	ВариантыДомов = Новый СписокЗначений;

	СписокДомов = СписокДомов(ИдентификаторАдресногоОбъекта, СтрокаПоиска);
	Если СписокДомов <> Неопределено Тогда
		ВариантыДомов = Новый СписокЗначений;
		Для каждого Строка Из СписокДомов Цикл
			ВариантыДомов.Добавить(Строка.Значение, Строка.Представление);
		КонецЦикла;
	КонецЕсли;

	Возврат ВариантыДомов;
КонецФункции

Функция СписокДомов(ИдентификаторАдресногоОбъекта, СтрокаПоиска = "", ПорцияПриПоиске = 20) Экспорт
	// Зарезервировано для новых подсистем

	Возврат Неопределено;
КонецФункции

Функция СписокАвтоподбораЗемельныхУчастков(ИдентификаторАдресногоОбъекта, СтрокаПоиска) Экспорт
	ВариантыУчастков = Новый СписокЗначений;

	// Зарезервировано для новых подсистем

	Возврат ВариантыУчастков;
КонецФункции

Функция СписокЗемельныхУчастков(ИдентификаторАдресногоОбъекта, СтрокаПоиска = "", ПорцияПриПоиске = 20) Экспорт
	// Зарезервировано для новых подсистем

	Возврат Неопределено;
КонецФункции

Функция АдресаКлассификатораПоПочтовомуИндексу(Знач Индекс, Знач ДополнительныеПараметры) Экспорт
	// Зарезервировано для новых подсистем

	Результат = СтруктураОшибкиПоставщикаАдресногоКлассификатора();
	Результат.Вставить("Данные", Новый ТаблицаЗначений);

	Возврат Результат;
КонецФункции

Функция СтруктураОшибкиПоставщикаАдресногоКлассификатора(ИсходнаяСтруктура = Неопределено)
	Если ИсходнаяСтруктура = Неопределено Тогда
		ИсходнаяСтруктура = Новый Структура;
	КонецЕсли;

	ИсходнаяСтруктура.Вставить("Отказ", Ложь);
	ИсходнаяСтруктура.Вставить("ПодробноеПредставлениеОшибки");
	ИсходнаяСтруктура.Вставить("КраткоеПредставлениеОшибки");

	Возврат ИсходнаяСтруктура;
КонецФункции

Функция АдресаДляИнтерактивногоВыбора(Родитель, Уровень, ТипАдреса, ДополнительныеПараметры) Экспорт
	// Зарезервировано для новых подсистем

	Результат = СтруктураОшибкиПоставщикаАдресногоКлассификатора();
	Результат.Вставить("Заголовок");
	Результат.Вставить("Данные", Новый ТаблицаЗначений);

	Возврат Результат;
КонецФункции

Процедура ЗаполнитьРасширенныеРеквизитыТабличнойЧастиДляАдреса(Знач Адрес, Знач СтрокаТабличнойЧасти) Экспорт
	Если КонтактнаяИнформацияСервер.сУКИ_ЭтоНациональныйАдрес(Адрес) Тогда
		// национальный адрес
		СтрокаТабличнойЧасти.Регион = Строка(Адрес.Area) + ?(ПустаяСтрока(Адрес.AreaType), "", " " + Адрес.AreaType);
		СтрокаТабличнойЧасти.Город  = Строка(Адрес.City) + ?(ПустаяСтрока(Адрес.CityType), "", " " + Адрес.CityType);
	КонецЕсли;
КонецПроцедуры

#КонецЕсли
