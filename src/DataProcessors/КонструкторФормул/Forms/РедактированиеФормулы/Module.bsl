///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ДляЗапроса = Параметры.ДляЗапроса;

	ПараметрыДобавленияСпискаПолей										= ВариантыОтчетовСервер.сКФ_ПараметрыДобавленияСпискаПолей();
	ПараметрыДобавленияСпискаПолей.ИмяСписка							= ИмяСпискаОперандов();
	ПараметрыДобавленияСпискаПолей.КоллекцииПолей.Добавить(ПрочитатьСписокОперандов());
	ПараметрыДобавленияСпискаПолей.МестоРазмещенияСписка				= Элементы.ГруппаДоступныеПоля;
	ПараметрыДобавленияСпискаПолей.ПодсказкаВводаСтрокиПоиска			= "Найти операнд...";
	ПараметрыДобавленияСпискаПолей.ИспользоватьИдентификаторыДляФормул	= Истина;
	ПараметрыДобавленияСпискаПолей.ОбработчикиСписка.Вставить("Выбор", "Подключаемый_СписокПолейВыбор");
	ВариантыОтчетовСервер.сКФ_ДобавитьСписокПолейНаФорму(ЭтотОбъект, ПараметрыДобавленияСпискаПолей);

	ПараметрыДобавленияСпискаПолей										= ВариантыОтчетовСервер.сКФ_ПараметрыДобавленияСпискаПолей();
	ПараметрыДобавленияСпискаПолей.ИмяСписка							= ИмяСпискаОператоров();
	ПараметрыДобавленияСпискаПолей.КоллекцииПолей.Добавить(СписокОператоров());
	ПараметрыДобавленияСпискаПолей.МестоРазмещенияСписка				= Элементы.ГруппаОператорыИФункции;
	ПараметрыДобавленияСпискаПолей.ПодсказкаВводаСтрокиПоиска			= "Найти оператор или функцию...";
	ПараметрыДобавленияСпискаПолей.СкобкиПредставлений					= Ложь;
	ПараметрыДобавленияСпискаПолей.ОбработчикиСписка.Вставить("Выбор",						"Подключаемый_СписокПолейВыбор");
	ПараметрыДобавленияСпискаПолей.ОбработчикиСписка.Вставить("НачалоПеретаскивания",		"Подключаемый_ОператорыНачалоПеретаскивания");
	ПараметрыДобавленияСпискаПолей.ОбработчикиСписка.Вставить("ОкончаниеПеретаскивания",	"Подключаемый_ОператорыОкончаниеПеретаскивания");
	ВариантыОтчетовСервер.сКФ_ДобавитьСписокПолейНаФорму(ЭтотОбъект, ПараметрыДобавленияСпискаПолей);

	ПредставлениеФормулы			= ВариантыОтчетовСервер.сКФ_ПредставлениеФормулы(ЭтотОбъект, Параметры.Формула);

	Элементы.Наименование.Видимость	= Параметры.Наименование <> Неопределено;
	Наименование					= Параметры.Наименование;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодтвердитьИЗакрыть", ЭтотОбъект);
	БазоваяПодсистемаКлиент.ОН_ПоказатьПодтверждениеЗакрытияФормы(ОписаниеОповещения, Отказ, ЗавершениеРаботы);

	Если Модифицированность Или ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактирование(Команда)
	ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФормулу(Команда)
	ВыполнитьПроверку();
	ПоказатьПредупреждение(, "Проверка выполнена успешно.");
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	ЗакрытьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	ВыполнитьПроверку();
	Модифицированность = Ложь;
	Закрыть(ОписаниеФормулы());
КонецПроцедуры

&НаСервере
Функция ПрочитатьСписокОперандов()
	СписокОперандов = Параметры.Операнды;
	Если ЭтоАдресВременногоХранилища(СписокОперандов) Тогда
		СписокОперандов = ПолучитьИзВременногоХранилища(СписокОперандов);
	КонецЕсли;

	Если СписокОперандов = Неопределено Тогда
		СписокОперандов = ВариантыОтчетовСервер.сКФ_ТаблицаПолей();
	КонецЕсли;

	КомпоновщикНастроек = ВариантыОтчетовСервер.сКФ_КомпоновщикНастроекИсточникаПолей(СписокОперандов);

	Возврат ВариантыОтчетовСервер.сКФ_КоллекцияПолей(СписокОперандов, , Параметры.ИмяКоллекцииСКДОперандов);
КонецФункции

&НаКлиенте
Функция ОписаниеФормулы()
	ОписаниеФормулы = Новый Структура;
	ОписаниеФормулы.Вставить("Формула",					ФормулаИзПредставления());
	ОписаниеФормулы.Вставить("ПредставлениеФормулы",	ПредставлениеФормулы);
	Если Элементы.Наименование.Видимость Тогда
		ОписаниеФормулы.Вставить("Наименование", Наименование);
	КонецЕсли;

	Возврат ОписаниеФормулы;
КонецФункции

&НаСервере
Функция ФормулаИзПредставления()
	Возврат ВариантыОтчетовСервер.сКФ_ФормулаИзПредставления(ЭтотОбъект, ПредставлениеФормулы);
КонецФункции

&НаКлиенте
Процедура Подключаемый_СписокПолейПередРазворачиванием(Элемент, Строка, Отказ)
	ВариантыОтчетовКлиент.КФ_СписокПолейПередРазворачиванием(ЭтотОбъект, Элемент, Строка, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазвернутьТекущийЭлементСпискаПолей()
	ВариантыОтчетовКлиент.КФ_РазвернутьТекущийЭлементСпискаПолей(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьСписокДоступныхПолей(ПараметрыЗаполнения) Экспорт // АПК:78 - вызывается из КонструкторФормулКлиент
	ЗаполнитьСписокДоступныхПолей(ПараметрыЗаполнения);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхПолей(ПараметрыЗаполнения)
	ВариантыОтчетовСервер.сКФ_ЗаполнитьСписокДоступныхПолей(ЭтотОбъект, ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокПолейНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ВариантыОтчетовКлиент.КФ_СписокПолейНачалоПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, Выполнение);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтрокаПоискаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	ВариантыОтчетовКлиент.КФ_СтрокаПоискаИзменениеТекстаРедактирования(ЭтотОбъект, Элемент, Текст, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПоискВСпискеПолей()
	ВыполнитьПоискВСпискеПолей();
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискВСпискеПолей()
	ВариантыОтчетовСервер.сКФ_ВыполнитьПоискВСпискеПолей(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	ВариантыОтчетовКлиент.КФ_СтрокаПоискаИзменениеТекстаРедактирования(ЭтотОбъект, Элемент, "", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокПолейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	ВыбранноеПоле			= ВариантыОтчетовКлиент.КФ_ВыбранноеПолеВСпискеПолей(ЭтотОбъект);
	Если Элемент.Имя = ИмяСпискаОперандов() Тогда
		ПредставлениеФормулы = СокрП(ПредставлениеФормулы) + " [" + ВыбранноеПоле.ПредставлениеПутиКДанным + "]";
	Иначе
		ПредставлениеФормулы = СокрП(ПредставлениеФормулы) + " " + ВыражениеДляВставки(ВыбранноеПоле);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОператорыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Оператор							= ВариантыОтчетовКлиент.КФ_ВыбранноеПолеВСпискеПолей(ЭтотОбъект, ИмяСпискаОператоров());
	ПараметрыПеретаскивания.Значение	= ВыражениеДляВставки(Оператор);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОператорыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Если ВариантыОтчетовКлиент.КФ_ВыбранноеПолеВСпискеПолей(ЭтотОбъект, ИмяСпискаОператоров()).ПутьКДанным = "Формат" Тогда
		ФорматСтроки = Новый КонструкторФорматнойСтроки;
		ФорматСтроки.Показать(Новый ОписаниеОповещения("ОператорыОкончаниеПеретаскиванияЗавершение", ЭтотОбъект, Новый Структура("ФорматСтроки", ФорматСтроки)));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОператорыОкончаниеПеретаскиванияЗавершение(Текст, ДополнительныеПараметры) Экспорт
	ФорматСтроки = ДополнительныеПараметры.ФорматСтроки;

	Если ЗначениеЗаполнено(ФорматСтроки.Текст) Тогда
		ТекстДляВставки									= "Формат( , """ + ФорматСтроки.Текст + """)";
		Элементы.ПредставлениеФормулы.ВыделенныйТекст	= ТекстДляВставки;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяСпискаОперандов()
	Возврат "СписокОперандов";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяСпискаОператоров()
	Возврат "СписокОператоров";
КонецФункции

&НаСервере
Функция СписокОператоров()
	СписокОператоров = Параметры.Операторы;
	Если Не ЗначениеЗаполнено(СписокОператоров) Тогда
		СписокОператоров = ВариантыОтчетовСервер.сКФ_СписокОператоров(?(ДляЗапроса, "ВсеОператорыСКД", Неопределено));
	КонецЕсли;

	Возврат ВариантыОтчетовСервер.сКФ_КоллекцияПолей(СписокОператоров, , Параметры.ИмяКоллекцииСКДОператоров);
КонецФункции

&НаКлиенте
Функция ВыражениеДляВставки(Оператор)
	Результат = Оператор.Заголовок + "(";

	Если Не ЗначениеЗаполнено(Оператор.Родитель) Тогда
		Возврат "";
	КонецЕсли;

	Если Оператор.Родитель.Имя = "Разделители" Тогда
		Результат = "+ """ + Оператор.Заголовок + """ +";
		Если Оператор.Имя = "[ ]" Тогда
			Результат = "+ "" "" +";
		КонецЕсли;
	КонецЕсли;

	Если Оператор.Родитель.Имя = "ЛогическиеОператорыИКонстанты" Или Оператор.Родитель.Имя = "Операторы" Или Оператор.Родитель.Имя = "ОперацииНадСтроками" Или Оператор.Родитель.Имя = "ЛогическиеОперации" Или Оператор.Родитель.Имя = "ОперацииСравнения" И Оператор.Имя <> "В" Тогда
		Результат = Оператор.Заголовок;
	КонецЕсли;

	Если Оператор.Родитель.Имя = "ПрочиеФункции" Тогда
		Если Оператор.Имя = "[?]" Или Оператор.Имя = "Формат" Тогда
			Результат = Оператор.Заголовок + "(,,)";
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
КонецФункции

&НаСервере
Функция ВыражениеДляПроверки()
	Возврат ВариантыОтчетовСервер.сКФ_ВыражениеДляПроверки(ЭтотОбъект, ПредставлениеФормулы, ИмяСпискаОперандов());
КонецФункции

&НаСервере
Процедура ПроверитьВыражениеДляЗапроса()
	Выражение = ВариантыОтчетовСервер.сКФ_ФормулаИзПредставления(ЭтотОбъект, ПредставлениеФормулы);
	Поле = КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));

	Попытка
		Поле.УстановитьВыражениеДетальныхЗаписей(Выражение);
	Исключение
		ВызватьИсключение ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверку()
	Если ДляЗапроса Тогда
		Попытка
			ПроверитьВыражениеДляЗапроса();
		Исключение
			ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());

			ВызватьИсключение ТекстСообщенияОбОшибкеПриПроверкеФормулы(ТекстОшибки);
		КонецПопытки;
	Иначе
		Выражение = ВыражениеДляПроверки();
		Попытка
			Результат = Вычислить(Выражение);
		Исключение
			ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());

			ВызватьИсключение ТекстСообщенияОбОшибкеПриПроверкеФормулы(ТекстОшибки);
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияОбОшибкеПриПроверкеФормулы(ТекстОшибки)
	ШаблонСообщения = "Введенная формула некорректная:
	|%1";

	ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекстОшибки);

	Возврат ТекстСообщения;
КонецФункции
